
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,233,194,162,295,259,179,248],
[318,0,259,237,332,255,242,236],
[357,292,0,319,311,301,283,275],
[389,314,232,0,314,288,271,257],
[256,219,240,237,0,284,222,199],
[292,296,250,263,267,0,212,304],
[372,309,268,280,329,339,0,293],
[303,315,276,294,352,247,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,286,272,271,287,257,272],
[274,0,272,286,295,279,282,263],
[265,279,0,273,284,276,271,253],
[279,265,278,0,266,273,276,254],
[280,256,267,285,0,295,268,261],
[264,272,275,278,256,0,257,253],
[294,269,280,275,283,294,0,293],
[279,288,298,297,290,298,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,304,282,297,288,268,305],
[277,0,299,270,310,300,282,325],
[247,252,0,229,279,274,240,258],
[269,281,322,0,303,307,300,299],
[254,241,272,248,0,275,223,269],
[263,251,277,244,276,0,266,285],
[283,269,311,251,328,285,0,297],
[246,226,293,252,282,266,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,286,276,266,292,288,276],
[256,0,272,245,255,246,280,273],
[265,279,0,236,272,265,280,266],
[275,306,315,0,266,279,282,281],
[285,296,279,285,0,265,284,269],
[259,305,286,272,286,0,285,287],
[263,271,271,269,267,266,0,290],
[275,278,285,270,282,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,232,338,327,308,270,306],
[239,0,300,240,414,316,279,270],
[319,251,0,269,308,365,195,308],
[213,311,282,0,405,378,266,305],
[224,137,243,146,0,304,227,245],
[243,235,186,173,247,0,212,298],
[281,272,356,285,324,339,0,273],
[245,281,243,246,306,253,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,307,250,306,279,271,309],
[292,0,312,221,304,298,269,287],
[244,239,0,243,270,220,224,258],
[301,330,308,0,304,263,269,309],
[245,247,281,247,0,264,207,282],
[272,253,331,288,287,0,291,304],
[280,282,327,282,344,260,0,305],
[242,264,293,242,269,247,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,293,228,339,267,429,250],
[203,0,260,245,359,228,381,197],
[258,291,0,283,307,216,303,163],
[323,306,268,0,342,317,373,307],
[212,192,244,209,0,138,267,120],
[284,323,335,234,413,0,440,236],
[122,170,248,178,284,111,0,117],
[301,354,388,244,431,315,434,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,268,264,269,265,241,268],
[303,0,291,276,292,298,265,306],
[283,260,0,246,259,259,242,255],
[287,275,305,0,257,270,280,293],
[282,259,292,294,0,284,281,293],
[286,253,292,281,267,0,277,293],
[310,286,309,271,270,274,0,304],
[283,245,296,258,258,258,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,287,289,292,281,277],
[276,0,309,303,270,301,278,297],
[275,242,0,270,245,294,254,275],
[264,248,281,0,265,268,264,262],
[262,281,306,286,0,300,285,288],
[259,250,257,283,251,0,270,264],
[270,273,297,287,266,281,0,281],
[274,254,276,289,263,287,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,278,293,282,276,280],
[281,0,278,266,271,274,273,277],
[262,273,0,259,269,264,278,264],
[273,285,292,0,281,291,285,276],
[258,280,282,270,0,274,274,265],
[269,277,287,260,277,0,277,259],
[275,278,273,266,277,274,0,267],
[271,274,287,275,286,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,278,261,251,284,266,232],
[311,0,306,275,287,317,302,276],
[273,245,0,243,213,284,268,278],
[290,276,308,0,259,288,281,258],
[300,264,338,292,0,324,301,279],
[267,234,267,263,227,0,252,230],
[285,249,283,270,250,299,0,252],
[319,275,273,293,272,321,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,261,272,277,262,267],
[273,0,281,278,290,285,277,276],
[275,270,0,271,273,276,267,268],
[290,273,280,0,285,286,285,276],
[279,261,278,266,0,279,285,262],
[274,266,275,265,272,0,256,255],
[289,274,284,266,266,295,0,263],
[284,275,283,275,289,296,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,310,316,271,264,353],
[263,0,272,312,296,244,294,378],
[264,279,0,305,282,249,257,355],
[241,239,246,0,259,220,233,302],
[235,255,269,292,0,237,248,356],
[280,307,302,331,314,0,243,335],
[287,257,294,318,303,308,0,333],
[198,173,196,249,195,216,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,185,399,286,393,382,292],
[165,0,138,214,242,287,126,125],
[366,413,0,353,253,388,297,248],
[152,337,198,0,240,407,352,246],
[265,309,298,311,0,395,246,252],
[158,264,163,144,156,0,187,120],
[169,425,254,199,305,364,0,228],
[259,426,303,305,299,431,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,267,261,243,242,272],
[266,0,284,276,264,259,265,270],
[285,267,0,269,291,269,283,281],
[284,275,282,0,261,295,269,295],
[290,287,260,290,0,283,280,286],
[308,292,282,256,268,0,265,287],
[309,286,268,282,271,286,0,306],
[279,281,270,256,265,264,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,256,277,293,297,317,268],
[288,0,260,282,298,267,288,284],
[295,291,0,269,309,293,309,279],
[274,269,282,0,309,267,322,298],
[258,253,242,242,0,272,307,278],
[254,284,258,284,279,0,301,295],
[234,263,242,229,244,250,0,252],
[283,267,272,253,273,256,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,313,253,287,286,308],
[271,0,268,289,284,286,295,290],
[275,283,0,273,275,299,284,296],
[238,262,278,0,249,266,264,257],
[298,267,276,302,0,286,277,290],
[264,265,252,285,265,0,277,287],
[265,256,267,287,274,274,0,280],
[243,261,255,294,261,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,266,283,266,262,277],
[282,0,247,272,292,274,265,261],
[274,304,0,278,296,290,285,285],
[285,279,273,0,309,285,269,279],
[268,259,255,242,0,269,241,247],
[285,277,261,266,282,0,263,236],
[289,286,266,282,310,288,0,289],
[274,290,266,272,304,315,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,293,269,253,254,270,302],
[309,0,288,297,293,273,296,294],
[258,263,0,264,292,285,296,282],
[282,254,287,0,279,269,264,299],
[298,258,259,272,0,249,288,265],
[297,278,266,282,302,0,285,268],
[281,255,255,287,263,266,0,317],
[249,257,269,252,286,283,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,290,285,280,276,269,316],
[256,0,258,250,277,284,284,296],
[261,293,0,272,291,285,308,287],
[266,301,279,0,269,279,292,284],
[271,274,260,282,0,280,268,287],
[275,267,266,272,271,0,280,292],
[282,267,243,259,283,271,0,264],
[235,255,264,267,264,259,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,236,277,267,276,275,281],
[294,0,275,287,302,283,283,299],
[315,276,0,270,285,271,274,290],
[274,264,281,0,292,277,284,289],
[284,249,266,259,0,273,286,283],
[275,268,280,274,278,0,275,290],
[276,268,277,267,265,276,0,289],
[270,252,261,262,268,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,291,273,292,251,320,296],
[323,0,260,221,241,278,245,202],
[260,291,0,206,278,312,317,252],
[278,330,345,0,235,363,352,249],
[259,310,273,316,0,283,283,324],
[300,273,239,188,268,0,285,261],
[231,306,234,199,268,266,0,345],
[255,349,299,302,227,290,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,273,283,284,294,297,306],
[255,0,278,253,260,262,262,302],
[278,273,0,246,266,266,270,286],
[268,298,305,0,272,277,282,313],
[267,291,285,279,0,285,274,297],
[257,289,285,274,266,0,277,303],
[254,289,281,269,277,274,0,306],
[245,249,265,238,254,248,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,287,259,279,287,292],
[267,0,270,269,255,288,289,269],
[273,281,0,284,282,296,292,282],
[264,282,267,0,265,274,282,278],
[292,296,269,286,0,285,280,270],
[272,263,255,277,266,0,280,272],
[264,262,259,269,271,271,0,269],
[259,282,269,273,281,279,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,291,284,286,290,284],
[284,0,269,293,284,279,293,284],
[271,282,0,277,282,292,275,282],
[260,258,274,0,275,272,282,269],
[267,267,269,276,0,285,281,282],
[265,272,259,279,266,0,266,272],
[261,258,276,269,270,285,0,266],
[267,267,269,282,269,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,305,302,257,269,264,265],
[290,0,278,290,266,262,265,272],
[246,273,0,284,250,259,270,256],
[249,261,267,0,260,254,255,251],
[294,285,301,291,0,273,283,278],
[282,289,292,297,278,0,269,283],
[287,286,281,296,268,282,0,280],
[286,279,295,300,273,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,273,289,283,291,277,280],
[253,0,251,273,263,278,273,264],
[278,300,0,288,262,279,276,273],
[262,278,263,0,282,289,265,282],
[268,288,289,269,0,289,271,280],
[260,273,272,262,262,0,260,262],
[274,278,275,286,280,291,0,284],
[271,287,278,269,271,289,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,257,258,266,277,267],
[279,0,282,266,283,282,294,279],
[277,269,0,261,281,270,275,273],
[294,285,290,0,289,270,298,292],
[293,268,270,262,0,276,288,273],
[285,269,281,281,275,0,303,277],
[274,257,276,253,263,248,0,268],
[284,272,278,259,278,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,290,284,265,271,287,267],
[257,0,298,272,269,247,278,262],
[261,253,0,262,252,243,253,238],
[267,279,289,0,263,268,286,249],
[286,282,299,288,0,279,285,273],
[280,304,308,283,272,0,289,282],
[264,273,298,265,266,262,0,254],
[284,289,313,302,278,269,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,278,282,282,267,283],
[283,0,284,294,285,268,278,287],
[270,267,0,285,280,259,277,279],
[273,257,266,0,279,257,277,268],
[269,266,271,272,0,261,270,278],
[269,283,292,294,290,0,288,286],
[284,273,274,274,281,263,0,278],
[268,264,272,283,273,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,272,288,248,251,274,269],
[304,0,274,295,276,276,292,277],
[279,277,0,279,279,306,274,287],
[263,256,272,0,264,258,259,273],
[303,275,272,287,0,267,275,283],
[300,275,245,293,284,0,262,289],
[277,259,277,292,276,289,0,288],
[282,274,264,278,268,262,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,273,276,267,278,274,297],
[251,0,271,268,253,268,260,266],
[278,280,0,271,266,270,268,280],
[275,283,280,0,257,263,276,268],
[284,298,285,294,0,276,275,274],
[273,283,281,288,275,0,287,289],
[277,291,283,275,276,264,0,297],
[254,285,271,283,277,262,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,293,271,288,284,286,270],
[280,0,288,266,274,283,286,279],
[258,263,0,243,256,272,275,252],
[280,285,308,0,284,283,286,274],
[263,277,295,267,0,258,286,293],
[267,268,279,268,293,0,293,255],
[265,265,276,265,265,258,0,262],
[281,272,299,277,258,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,281,265,275,284,279],
[271,0,276,279,270,292,276,277],
[263,275,0,281,277,269,257,276],
[270,272,270,0,267,265,258,258],
[286,281,274,284,0,286,290,282],
[276,259,282,286,265,0,257,268],
[267,275,294,293,261,294,0,269],
[272,274,275,293,269,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,215,223,200,203,292,253],
[312,0,269,295,262,304,290,313],
[336,282,0,323,260,275,305,302],
[328,256,228,0,207,216,289,268],
[351,289,291,344,0,272,352,302],
[348,247,276,335,279,0,321,286],
[259,261,246,262,199,230,0,229],
[298,238,249,283,249,265,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,322,288,295,290,307,257],
[234,0,235,262,269,267,260,250],
[229,316,0,262,273,249,273,241],
[263,289,289,0,297,218,292,264],
[256,282,278,254,0,236,265,237],
[261,284,302,333,315,0,295,277],
[244,291,278,259,286,256,0,257],
[294,301,310,287,314,274,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,290,267,298,278,292,295],
[230,0,253,250,286,245,240,262],
[261,298,0,277,309,271,270,281],
[284,301,274,0,334,293,289,288],
[253,265,242,217,0,256,250,256],
[273,306,280,258,295,0,242,285],
[259,311,281,262,301,309,0,275],
[256,289,270,263,295,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,262,246,259,244,245,247],
[293,0,262,242,259,270,263,268],
[289,289,0,269,259,259,275,246],
[305,309,282,0,302,253,279,265],
[292,292,292,249,0,290,255,271],
[307,281,292,298,261,0,297,291],
[306,288,276,272,296,254,0,266],
[304,283,305,286,280,260,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,257,281,280,300,282,325],
[253,0,280,266,278,278,271,286],
[294,271,0,286,286,310,279,318],
[270,285,265,0,273,280,291,297],
[271,273,265,278,0,291,288,315],
[251,273,241,271,260,0,278,319],
[269,280,272,260,263,273,0,293],
[226,265,233,254,236,232,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,290,266,287,292,297],
[265,0,268,267,253,262,276,297],
[279,283,0,257,265,267,290,290],
[261,284,294,0,283,289,299,306],
[285,298,286,268,0,286,278,293],
[264,289,284,262,265,0,275,301],
[259,275,261,252,273,276,0,284],
[254,254,261,245,258,250,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,250,246,233,249,280,278],
[280,0,304,280,254,283,263,267],
[301,247,0,231,256,226,261,226],
[305,271,320,0,278,250,284,280],
[318,297,295,273,0,283,285,302],
[302,268,325,301,268,0,304,302],
[271,288,290,267,266,247,0,271],
[273,284,325,271,249,249,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,269,270,259,259,255,243],
[289,0,283,282,267,264,278,282],
[282,268,0,274,286,270,254,269],
[281,269,277,0,254,263,270,270],
[292,284,265,297,0,271,267,273],
[292,287,281,288,280,0,268,275],
[296,273,297,281,284,283,0,282],
[308,269,282,281,278,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,292,264,283,271,275,255],
[286,0,300,280,268,282,285,267],
[259,251,0,252,275,258,257,235],
[287,271,299,0,290,294,287,285],
[268,283,276,261,0,257,255,262],
[280,269,293,257,294,0,264,259],
[276,266,294,264,296,287,0,259],
[296,284,316,266,289,292,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,274,262,254,278,272],
[288,0,288,275,264,279,278,289],
[283,263,0,277,271,276,272,284],
[277,276,274,0,276,272,274,265],
[289,287,280,275,0,282,286,283],
[297,272,275,279,269,0,284,277],
[273,273,279,277,265,267,0,265],
[279,262,267,286,268,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,285,275,299,277,282],
[279,0,312,305,255,290,280,297],
[261,239,0,265,266,269,268,277],
[266,246,286,0,255,280,268,259],
[276,296,285,296,0,272,268,301],
[252,261,282,271,279,0,274,268],
[274,271,283,283,283,277,0,288],
[269,254,274,292,250,283,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,296,270,281,296,282,284],
[298,0,308,312,272,282,287,238],
[255,243,0,303,291,277,213,261],
[281,239,248,0,259,255,240,247],
[270,279,260,292,0,274,260,276],
[255,269,274,296,277,0,226,241],
[269,264,338,311,291,325,0,270],
[267,313,290,304,275,310,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,286,258,293,282,286],
[294,0,285,289,257,287,267,272],
[290,266,0,280,247,266,274,263],
[265,262,271,0,258,278,253,261],
[293,294,304,293,0,283,286,273],
[258,264,285,273,268,0,280,255],
[269,284,277,298,265,271,0,282],
[265,279,288,290,278,296,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,267,272,250,305,297],
[267,0,319,286,281,287,345,303],
[270,232,0,289,279,263,280,264],
[284,265,262,0,282,239,301,292],
[279,270,272,269,0,252,283,316],
[301,264,288,312,299,0,285,319],
[246,206,271,250,268,266,0,266],
[254,248,287,259,235,232,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,264,287,299,249,266,261],
[280,0,280,310,297,281,271,262],
[287,271,0,299,284,272,273,279],
[264,241,252,0,278,248,274,257],
[252,254,267,273,0,273,254,249],
[302,270,279,303,278,0,274,286],
[285,280,278,277,297,277,0,257],
[290,289,272,294,302,265,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,312,270,274,293,267,292],
[265,0,305,276,272,271,250,270],
[239,246,0,245,249,258,249,262],
[281,275,306,0,270,287,258,284],
[277,279,302,281,0,274,276,276],
[258,280,293,264,277,0,266,288],
[284,301,302,293,275,285,0,295],
[259,281,289,267,275,263,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,300,275,265,271,263,266],
[266,0,279,257,287,264,287,261],
[251,272,0,276,271,287,289,259],
[276,294,275,0,281,273,263,273],
[286,264,280,270,0,258,264,249],
[280,287,264,278,293,0,276,281],
[288,264,262,288,287,275,0,271],
[285,290,292,278,302,270,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,245,211,274,279,339],
[267,0,245,256,242,303,289,273],
[282,306,0,213,264,278,230,272],
[306,295,338,0,331,326,268,346],
[340,309,287,220,0,309,370,292],
[277,248,273,225,242,0,234,289],
[272,262,321,283,181,317,0,272],
[212,278,279,205,259,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,287,287,279,270,280],
[275,0,274,290,252,286,260,280],
[272,277,0,283,237,260,238,264],
[264,261,268,0,250,263,258,264],
[264,299,314,301,0,282,286,287],
[272,265,291,288,269,0,274,279],
[281,291,313,293,265,277,0,268],
[271,271,287,287,264,272,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,255,283,256,260,240,264],
[282,0,271,271,271,282,256,285],
[296,280,0,278,273,269,256,264],
[268,280,273,0,251,247,263,278],
[295,280,278,300,0,309,256,269],
[291,269,282,304,242,0,274,258],
[311,295,295,288,295,277,0,273],
[287,266,287,273,282,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,249,276,270,254,255],
[277,0,240,233,243,271,225,236],
[278,311,0,278,275,287,271,280],
[302,318,273,0,282,300,293,278],
[275,308,276,269,0,307,272,274],
[281,280,264,251,244,0,258,251],
[297,326,280,258,279,293,0,278],
[296,315,271,273,277,300,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,376,271,281,295,347,270,324],
[175,0,157,157,180,140,170,163],
[280,394,0,274,267,297,295,273],
[270,394,277,0,284,353,297,282],
[256,371,284,267,0,338,285,225],
[204,411,254,198,213,0,268,210],
[281,381,256,254,266,283,0,274],
[227,388,278,269,326,341,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,290,293,290,271,257],
[285,0,275,289,283,289,287,287],
[279,276,0,290,294,302,282,274],
[261,262,261,0,289,257,261,246],
[258,268,257,262,0,283,245,246],
[261,262,249,294,268,0,257,252],
[280,264,269,290,306,294,0,260],
[294,264,277,305,305,299,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,277,282,302,272,276],
[285,0,270,273,288,285,286,281],
[270,281,0,277,280,279,259,256],
[274,278,274,0,270,299,275,255],
[269,263,271,281,0,294,269,261],
[249,266,272,252,257,0,266,253],
[279,265,292,276,282,285,0,267],
[275,270,295,296,290,298,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,263,261,268,283,274],
[266,0,276,269,268,281,301,263],
[278,275,0,274,269,264,249,265],
[288,282,277,0,277,294,295,269],
[290,283,282,274,0,273,286,267],
[283,270,287,257,278,0,272,287],
[268,250,302,256,265,279,0,260],
[277,288,286,282,284,264,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,277,288,289,330,298,212],
[335,0,279,333,299,303,237,309],
[274,272,0,294,247,277,258,181],
[263,218,257,0,266,273,237,199],
[262,252,304,285,0,305,301,216],
[221,248,274,278,246,0,233,181],
[253,314,293,314,250,318,0,236],
[339,242,370,352,335,370,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,290,286,280,275,285],
[273,0,284,284,270,275,282,288],
[288,267,0,295,296,269,294,281],
[261,267,256,0,255,253,269,276],
[265,281,255,296,0,259,281,275],
[271,276,282,298,292,0,295,292],
[276,269,257,282,270,256,0,289],
[266,263,270,275,276,259,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,403,300,198,406,294,198],
[148,0,282,334,204,355,317,150],
[148,269,0,319,270,289,221,214],
[251,217,232,0,292,232,157,157],
[353,347,281,259,0,355,238,150],
[145,196,262,319,196,0,221,221],
[257,234,330,394,313,330,0,283],
[353,401,337,394,401,330,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,258,210,257,259,279,245],
[330,0,278,282,314,284,330,265],
[293,273,0,213,257,283,297,277],
[341,269,338,0,284,316,348,337],
[294,237,294,267,0,284,284,249],
[292,267,268,235,267,0,327,257],
[272,221,254,203,267,224,0,248],
[306,286,274,214,302,294,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,248,230,220,236,263],
[285,0,275,296,247,231,236,288],
[280,276,0,324,230,252,251,308],
[303,255,227,0,246,210,221,284],
[321,304,321,305,0,272,276,306],
[331,320,299,341,279,0,272,290],
[315,315,300,330,275,279,0,321],
[288,263,243,267,245,261,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,275,288,274,281,276,270],
[254,0,275,284,281,274,262,280],
[276,276,0,287,281,277,268,275],
[263,267,264,0,263,278,253,260],
[277,270,270,288,0,265,270,260],
[270,277,274,273,286,0,283,278],
[275,289,283,298,281,268,0,276],
[281,271,276,291,291,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,263,279,258,269,276,270],
[296,0,280,275,293,275,290,291],
[288,271,0,260,282,285,294,273],
[272,276,291,0,300,284,308,297],
[293,258,269,251,0,275,271,286],
[282,276,266,267,276,0,281,277],
[275,261,257,243,280,270,0,252],
[281,260,278,254,265,274,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,259,256,275,278,251],
[267,0,273,280,280,273,260,282],
[261,278,0,265,274,271,257,268],
[292,271,286,0,280,275,280,295],
[295,271,277,271,0,286,279,283],
[276,278,280,276,265,0,274,273],
[273,291,294,271,272,277,0,282],
[300,269,283,256,268,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,286,285,268,288,256,285],
[263,0,274,271,267,289,261,284],
[265,277,0,276,259,308,263,287],
[266,280,275,0,262,292,278,244],
[283,284,292,289,0,327,268,291],
[263,262,243,259,224,0,261,265],
[295,290,288,273,283,290,0,289],
[266,267,264,307,260,286,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,291,301,319,334,320,329],
[307,0,280,240,328,305,301,303],
[260,271,0,279,254,306,324,269],
[250,311,272,0,290,294,364,277],
[232,223,297,261,0,271,317,256],
[217,246,245,257,280,0,300,278],
[231,250,227,187,234,251,0,273],
[222,248,282,274,295,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,257,301,248,289,274],
[288,0,273,255,291,260,287,282],
[283,278,0,291,311,277,267,300],
[294,296,260,0,300,271,295,272],
[250,260,240,251,0,252,268,272],
[303,291,274,280,299,0,288,304],
[262,264,284,256,283,263,0,268],
[277,269,251,279,279,247,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,240,319,386,371,338,349],
[162,0,258,267,282,284,312,260],
[311,293,0,268,421,336,341,300],
[232,284,283,0,293,289,324,263],
[165,269,130,258,0,309,286,230],
[180,267,215,262,242,0,261,298],
[213,239,210,227,265,290,0,270],
[202,291,251,288,321,253,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,270,280,266,258,262,261],
[258,0,260,266,252,255,241,249],
[281,291,0,287,271,255,259,268],
[271,285,264,0,269,267,265,267],
[285,299,280,282,0,263,261,278],
[293,296,296,284,288,0,279,266],
[289,310,292,286,290,272,0,286],
[290,302,283,284,273,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,280,270,283,267,274,288],
[252,0,270,277,267,260,272,272],
[271,281,0,295,278,293,292,298],
[281,274,256,0,276,271,294,278],
[268,284,273,275,0,276,272,281],
[284,291,258,280,275,0,283,284],
[277,279,259,257,279,268,0,282],
[263,279,253,273,270,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,284,272,269,307,303,265],
[251,0,257,251,251,284,248,262],
[267,294,0,258,246,284,271,257],
[279,300,293,0,278,270,332,279],
[282,300,305,273,0,309,299,285],
[244,267,267,281,242,0,269,284],
[248,303,280,219,252,282,0,261],
[286,289,294,272,266,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,302,268,270,238,264,271],
[273,0,279,289,253,226,264,254],
[249,272,0,290,281,243,268,250],
[283,262,261,0,262,262,277,276],
[281,298,270,289,0,231,266,295],
[313,325,308,289,320,0,270,304],
[287,287,283,274,285,281,0,279],
[280,297,301,275,256,247,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,323,346,325,320,292,263],
[226,0,307,267,259,345,259,190],
[228,244,0,268,170,262,175,167],
[205,284,283,0,294,401,228,197],
[226,292,381,257,0,322,290,308],
[231,206,289,150,229,0,182,143],
[259,292,376,323,261,369,0,180],
[288,361,384,354,243,408,371,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,256,249,283,247,254,267],
[287,0,270,265,276,255,272,270],
[295,281,0,288,295,276,274,277],
[302,286,263,0,298,275,265,270],
[268,275,256,253,0,247,251,259],
[304,296,275,276,304,0,275,290],
[297,279,277,286,300,276,0,273],
[284,281,274,281,292,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,253,249,261,256,262],
[283,0,281,273,266,288,259,249],
[297,270,0,283,265,287,275,280],
[298,278,268,0,270,269,258,270],
[302,285,286,281,0,291,278,268],
[290,263,264,282,260,0,260,268],
[295,292,276,293,273,291,0,275],
[289,302,271,281,283,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,364,171,224,364,384,278],
[308,0,275,189,275,296,378,189],
[187,276,0,302,295,157,267,290],
[380,362,249,0,371,350,322,290],
[327,276,256,180,0,350,276,290],
[187,255,394,201,201,0,201,255],
[167,173,284,229,275,350,0,163],
[273,362,261,261,261,296,388,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,290,293,244,309,277,325],
[240,0,240,285,220,244,250,280],
[261,311,0,292,285,277,282,298],
[258,266,259,0,243,256,275,269],
[307,331,266,308,0,305,310,302],
[242,307,274,295,246,0,292,287],
[274,301,269,276,241,259,0,292],
[226,271,253,282,249,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,288,314,280,273,282],
[282,0,282,300,295,306,265,253],
[280,269,0,289,305,309,275,278],
[263,251,262,0,290,288,282,267],
[237,256,246,261,0,273,247,271],
[271,245,242,263,278,0,252,257],
[278,286,276,269,304,299,0,247],
[269,298,273,284,280,294,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,229,239,233,263,243,218],
[336,0,313,307,333,342,315,270],
[322,238,0,232,263,269,249,241],
[312,244,319,0,276,327,281,291],
[318,218,288,275,0,299,234,242],
[288,209,282,224,252,0,292,208],
[308,236,302,270,317,259,0,244],
[333,281,310,260,309,343,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,292,269,264,255,295],
[275,0,272,274,261,240,288,287],
[258,279,0,278,256,249,279,282],
[259,277,273,0,262,250,277,287],
[282,290,295,289,0,264,275,297],
[287,311,302,301,287,0,273,299],
[296,263,272,274,276,278,0,289],
[256,264,269,264,254,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,271,275,293,281,288],
[266,0,274,285,261,275,282,270],
[257,277,0,264,280,292,266,278],
[280,266,287,0,266,294,299,276],
[276,290,271,285,0,293,280,285],
[258,276,259,257,258,0,250,267],
[270,269,285,252,271,301,0,258],
[263,281,273,275,266,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,233,255,236,312,252],
[272,0,294,274,269,270,279,256],
[275,257,0,225,256,267,295,257],
[318,277,326,0,266,296,305,298],
[296,282,295,285,0,283,264,274],
[315,281,284,255,268,0,301,292],
[239,272,256,246,287,250,0,240],
[299,295,294,253,277,259,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,241,236,251,253,250,246],
[286,0,296,305,280,264,303,256],
[310,255,0,252,286,264,302,296],
[315,246,299,0,281,280,297,293],
[300,271,265,270,0,263,300,264],
[298,287,287,271,288,0,254,252],
[301,248,249,254,251,297,0,258],
[305,295,255,258,287,299,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,294,274,298,310,253,275],
[257,0,303,238,242,283,285,284],
[257,248,0,243,251,293,284,233],
[277,313,308,0,282,293,314,269],
[253,309,300,269,0,305,326,275],
[241,268,258,258,246,0,269,251],
[298,266,267,237,225,282,0,253],
[276,267,318,282,276,300,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,257,263,266,263,265],
[293,0,270,277,283,271,269,284],
[287,281,0,268,273,274,274,265],
[294,274,283,0,276,279,272,279],
[288,268,278,275,0,272,272,260],
[285,280,277,272,279,0,290,275],
[288,282,277,279,279,261,0,267],
[286,267,286,272,291,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,281,292,276,275,288],
[275,0,295,285,290,283,291,276],
[264,256,0,266,264,269,269,270],
[270,266,285,0,274,271,272,287],
[259,261,287,277,0,273,258,273],
[275,268,282,280,278,0,288,286],
[276,260,282,279,293,263,0,274],
[263,275,281,264,278,265,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,284,279,309,288,288],
[282,0,288,292,275,286,281,294],
[276,263,0,268,278,300,276,276],
[267,259,283,0,263,292,282,280],
[272,276,273,288,0,309,294,305],
[242,265,251,259,242,0,252,249],
[263,270,275,269,257,299,0,288],
[263,257,275,271,246,302,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,239,261,278,243,281,282],
[256,0,246,271,265,234,280,285],
[312,305,0,272,296,282,295,307],
[290,280,279,0,288,251,291,306],
[273,286,255,263,0,254,275,302],
[308,317,269,300,297,0,316,311],
[270,271,256,260,276,235,0,256],
[269,266,244,245,249,240,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,313,267,249,285,270,263],
[276,0,319,275,274,258,293,273],
[238,232,0,238,236,246,259,259],
[284,276,313,0,280,269,283,270],
[302,277,315,271,0,244,275,286],
[266,293,305,282,307,0,286,277],
[281,258,292,268,276,265,0,272],
[288,278,292,281,265,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,265,258,266,271,263],
[288,0,300,271,287,291,293,288],
[285,251,0,253,266,253,277,269],
[286,280,298,0,261,255,303,272],
[293,264,285,290,0,283,296,271],
[285,260,298,296,268,0,286,268],
[280,258,274,248,255,265,0,273],
[288,263,282,279,280,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,287,274,282,291,286],
[263,0,246,278,276,265,299,244],
[264,305,0,276,290,294,303,254],
[264,273,275,0,293,295,296,264],
[277,275,261,258,0,276,286,264],
[269,286,257,256,275,0,290,248],
[260,252,248,255,265,261,0,260],
[265,307,297,287,287,303,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,294,293,298,299,295],
[275,0,263,289,290,284,285,289],
[276,288,0,254,281,289,285,293],
[257,262,297,0,299,280,291,288],
[258,261,270,252,0,267,275,272],
[253,267,262,271,284,0,271,270],
[252,266,266,260,276,280,0,268],
[256,262,258,263,279,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,265,263,266,278,269],
[293,0,276,275,272,288,279,273],
[273,275,0,273,270,256,262,277],
[286,276,278,0,275,268,292,279],
[288,279,281,276,0,274,277,273],
[285,263,295,283,277,0,263,268],
[273,272,289,259,274,288,0,279],
[282,278,274,272,278,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,267,261,269,266,276],
[289,0,288,271,260,274,280,275],
[268,263,0,268,240,252,272,274],
[284,280,283,0,258,280,271,276],
[290,291,311,293,0,280,289,275],
[282,277,299,271,271,0,292,277],
[285,271,279,280,262,259,0,278],
[275,276,277,275,276,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,289,273,315,279,273,264],
[283,0,274,296,293,293,280,274],
[262,277,0,282,274,315,283,279],
[278,255,269,0,275,273,269,264],
[236,258,277,276,0,295,265,289],
[272,258,236,278,256,0,242,249],
[278,271,268,282,286,309,0,290],
[287,277,272,287,262,302,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,258,249,267,244,253,282],
[278,0,261,234,287,271,273,252],
[293,290,0,266,296,274,262,297],
[302,317,285,0,293,282,272,282],
[284,264,255,258,0,250,278,279],
[307,280,277,269,301,0,257,292],
[298,278,289,279,273,294,0,269],
[269,299,254,269,272,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,258,294,245,237,232,230],
[244,0,231,257,267,240,240,226],
[293,320,0,301,300,283,297,266],
[257,294,250,0,262,263,247,243],
[306,284,251,289,0,284,269,279],
[314,311,268,288,267,0,255,285],
[319,311,254,304,282,296,0,281],
[321,325,285,308,272,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,274,284,341,275,239,259],
[255,0,264,250,312,233,242,259],
[277,287,0,246,304,244,232,231],
[267,301,305,0,320,237,213,249],
[210,239,247,231,0,219,203,205],
[276,318,307,314,332,0,248,298],
[312,309,319,338,348,303,0,262],
[292,292,320,302,346,253,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,254,314,209,205,268,286],
[309,0,215,269,239,217,246,237],
[297,336,0,261,317,237,309,270],
[237,282,290,0,257,222,271,254],
[342,312,234,294,0,221,265,241],
[346,334,314,329,330,0,292,269],
[283,305,242,280,286,259,0,271],
[265,314,281,297,310,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,345,319,285,281,305,311],
[311,0,306,287,263,292,299,331],
[206,245,0,243,253,214,242,294],
[232,264,308,0,275,236,259,309],
[266,288,298,276,0,264,273,320],
[270,259,337,315,287,0,291,312],
[246,252,309,292,278,260,0,322],
[240,220,257,242,231,239,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,274,250,270,242,240,264],
[310,0,308,300,285,300,274,291],
[277,243,0,267,227,256,266,280],
[301,251,284,0,267,254,273,284],
[281,266,324,284,0,279,259,268],
[309,251,295,297,272,0,282,309],
[311,277,285,278,292,269,0,288],
[287,260,271,267,283,242,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,249,264,275,282,266],
[289,0,265,288,294,289,283,285],
[293,286,0,265,307,284,288,289],
[302,263,286,0,280,291,283,279],
[287,257,244,271,0,257,266,261],
[276,262,267,260,294,0,264,262],
[269,268,263,268,285,287,0,284],
[285,266,262,272,290,289,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,267,281,295,271,274,269],
[264,0,261,253,303,268,257,255],
[284,290,0,268,300,277,273,279],
[270,298,283,0,308,284,272,262],
[256,248,251,243,0,259,248,255],
[280,283,274,267,292,0,262,270],
[277,294,278,279,303,289,0,260],
[282,296,272,289,296,281,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,238,224,263,235,261,305],
[320,0,261,293,308,242,311,310],
[313,290,0,267,277,313,307,304],
[327,258,284,0,268,271,282,311],
[288,243,274,283,0,271,263,280],
[316,309,238,280,280,0,297,320],
[290,240,244,269,288,254,0,272],
[246,241,247,240,271,231,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,279,262,284,288,292],
[269,0,293,279,282,269,287,283],
[271,258,0,268,258,253,279,266],
[272,272,283,0,268,272,277,283],
[289,269,293,283,0,282,296,282],
[267,282,298,279,269,0,284,278],
[263,264,272,274,255,267,0,281],
[259,268,285,268,269,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,246,270,236,248,261,258],
[303,0,258,290,267,309,251,297],
[305,293,0,294,260,301,279,295],
[281,261,257,0,248,272,268,286],
[315,284,291,303,0,287,274,289],
[303,242,250,279,264,0,247,271],
[290,300,272,283,277,304,0,306],
[293,254,256,265,262,280,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,244,263,252,250,257],
[288,0,281,274,275,288,274,281],
[285,270,0,271,279,272,294,274],
[307,277,280,0,280,284,270,303],
[288,276,272,271,0,297,292,266],
[299,263,279,267,254,0,272,271],
[301,277,257,281,259,279,0,273],
[294,270,277,248,285,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,300,274,277,263,270],
[258,0,284,287,280,258,267,291],
[267,267,0,276,255,268,267,262],
[251,264,275,0,253,249,278,261],
[277,271,296,298,0,261,281,269],
[274,293,283,302,290,0,287,267],
[288,284,284,273,270,264,0,279],
[281,260,289,290,282,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,257,258,252,263,296,265],
[259,0,269,255,254,269,258,259],
[294,282,0,276,269,301,283,294],
[293,296,275,0,267,273,299,288],
[299,297,282,284,0,270,307,294],
[288,282,250,278,281,0,263,277],
[255,293,268,252,244,288,0,273],
[286,292,257,263,257,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,260,366,275,265,251,324],
[239,0,205,291,257,236,232,184],
[291,346,0,374,252,309,281,291],
[185,260,177,0,132,250,271,229],
[276,294,299,419,0,238,274,281],
[286,315,242,301,313,0,221,380],
[300,319,270,280,277,330,0,327],
[227,367,260,322,270,171,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,268,276,270,290,293],
[280,0,267,281,266,284,278,285],
[264,284,0,271,274,259,283,280],
[283,270,280,0,272,301,293,276],
[275,285,277,279,0,279,284,296],
[281,267,292,250,272,0,286,279],
[261,273,268,258,267,265,0,258],
[258,266,271,275,255,272,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,277,274,265,294,286],
[275,0,268,269,258,249,261,259],
[280,283,0,278,258,253,278,268],
[274,282,273,0,278,273,268,270],
[277,293,293,273,0,260,299,275],
[286,302,298,278,291,0,282,274],
[257,290,273,283,252,269,0,264],
[265,292,283,281,276,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,274,321,311,317,313,296],
[295,0,273,312,297,311,308,293],
[277,278,0,317,294,325,275,303],
[230,239,234,0,238,284,257,244],
[240,254,257,313,0,291,284,296],
[234,240,226,267,260,0,263,279],
[238,243,276,294,267,288,0,272],
[255,258,248,307,255,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,275,316,302,284,311],
[263,0,276,287,284,290,263,294],
[263,275,0,278,295,288,267,310],
[276,264,273,0,288,285,255,290],
[235,267,256,263,0,271,262,278],
[249,261,263,266,280,0,250,275],
[267,288,284,296,289,301,0,296],
[240,257,241,261,273,276,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,304,293,288,267,261,289],
[253,0,298,254,258,248,272,277],
[247,253,0,251,244,246,230,275],
[258,297,300,0,248,253,270,267],
[263,293,307,303,0,278,282,320],
[284,303,305,298,273,0,272,306],
[290,279,321,281,269,279,0,290],
[262,274,276,284,231,245,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,242,276,285,272,250,262],
[278,0,265,273,265,272,275,278],
[309,286,0,295,298,296,282,273],
[275,278,256,0,273,297,268,262],
[266,286,253,278,0,279,266,254],
[279,279,255,254,272,0,269,264],
[301,276,269,283,285,282,0,301],
[289,273,278,289,297,287,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,323,270,303,200,303,258],
[239,0,326,232,230,190,203,233],
[228,225,0,190,189,253,251,266],
[281,319,361,0,319,277,294,227],
[248,321,362,232,0,234,351,267],
[351,361,298,274,317,0,355,296],
[248,348,300,257,200,196,0,188],
[293,318,285,324,284,255,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,235,227,257,213,226,270],
[297,0,304,286,280,240,233,309],
[316,247,0,239,244,257,228,316],
[324,265,312,0,331,283,292,330],
[294,271,307,220,0,293,257,324],
[338,311,294,268,258,0,273,257],
[325,318,323,259,294,278,0,310],
[281,242,235,221,227,294,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,256,248,251,247,236,247],
[303,0,269,288,287,280,300,276],
[295,282,0,295,271,303,284,248],
[303,263,256,0,284,231,259,257],
[300,264,280,267,0,253,262,248],
[304,271,248,320,298,0,277,252],
[315,251,267,292,289,274,0,256],
[304,275,303,294,303,299,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,311,283,269,357,313,347],
[276,0,302,298,248,311,309,258],
[240,249,0,281,263,266,257,263],
[268,253,270,0,251,263,221,258],
[282,303,288,300,0,306,309,245],
[194,240,285,288,245,0,287,268],
[238,242,294,330,242,264,0,275],
[204,293,288,293,306,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,280,243,269,255,275,304],
[246,0,237,251,261,270,264,279],
[271,314,0,276,259,308,267,277],
[308,300,275,0,265,292,279,305],
[282,290,292,286,0,297,268,290],
[296,281,243,259,254,0,262,295],
[276,287,284,272,283,289,0,295],
[247,272,274,246,261,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,275,219,245,248,235],
[289,0,285,279,264,282,315,272],
[284,266,0,284,231,261,265,248],
[276,272,267,0,214,232,249,227],
[332,287,320,337,0,305,318,271],
[306,269,290,319,246,0,271,282],
[303,236,286,302,233,280,0,226],
[316,279,303,324,280,269,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,253,254,285,252,237,292],
[297,0,266,279,286,276,271,274],
[298,285,0,290,311,296,273,305],
[297,272,261,0,292,277,255,298],
[266,265,240,259,0,266,237,264],
[299,275,255,274,285,0,292,308],
[314,280,278,296,314,259,0,323],
[259,277,246,253,287,243,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,269,300,270,273,280,263],
[271,0,259,311,271,284,288,279],
[282,292,0,299,274,275,270,274],
[251,240,252,0,254,279,269,239],
[281,280,277,297,0,276,272,272],
[278,267,276,272,275,0,290,268],
[271,263,281,282,279,261,0,254],
[288,272,277,312,279,283,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,245,263,243,243,243,281],
[276,0,271,282,268,237,283,262],
[306,280,0,263,288,248,288,288],
[288,269,288,0,292,252,255,310],
[308,283,263,259,0,292,269,294],
[308,314,303,299,259,0,273,295],
[308,268,263,296,282,278,0,298],
[270,289,263,241,257,256,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,240,260,201,281,298,270],
[327,0,228,302,290,329,321,365],
[311,323,0,332,250,311,304,361],
[291,249,219,0,274,300,318,290],
[350,261,301,277,0,333,352,314],
[270,222,240,251,218,0,304,235],
[253,230,247,233,199,247,0,232],
[281,186,190,261,237,316,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,267,286,289,269,274],
[284,0,259,273,271,287,282,262],
[285,292,0,273,286,288,279,272],
[284,278,278,0,277,283,267,283],
[265,280,265,274,0,275,272,283],
[262,264,263,268,276,0,255,258],
[282,269,272,284,279,296,0,265],
[277,289,279,268,268,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,272,208,258,239,212,259],
[326,0,343,301,299,291,265,266],
[279,208,0,231,291,263,217,269],
[343,250,320,0,298,335,279,281],
[293,252,260,253,0,217,239,262],
[312,260,288,216,334,0,276,270],
[339,286,334,272,312,275,0,302],
[292,285,282,270,289,281,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,257,270,277,280,284],
[260,0,292,278,289,272,274,265],
[262,259,0,274,273,245,265,259],
[294,273,277,0,278,261,295,287],
[281,262,278,273,0,246,262,266],
[274,279,306,290,305,0,277,288],
[271,277,286,256,289,274,0,261],
[267,286,292,264,285,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,264,232,267,235,273,250],
[315,0,280,264,279,279,287,254],
[287,271,0,276,282,259,281,280],
[319,287,275,0,295,272,291,276],
[284,272,269,256,0,262,268,240],
[316,272,292,279,289,0,311,272],
[278,264,270,260,283,240,0,259],
[301,297,271,275,311,279,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,261,271,275,277,284],
[271,0,262,273,288,287,270,267],
[275,289,0,274,270,256,270,266],
[290,278,277,0,285,273,284,276],
[280,263,281,266,0,272,286,259],
[276,264,295,278,279,0,271,296],
[274,281,281,267,265,280,0,290],
[267,284,285,275,292,255,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,279,294,267,277,280,289],
[262,0,274,292,276,259,274,285],
[272,277,0,291,270,279,266,280],
[257,259,260,0,265,253,271,279],
[284,275,281,286,0,277,281,291],
[274,292,272,298,274,0,279,275],
[271,277,285,280,270,272,0,281],
[262,266,271,272,260,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,268,268,274,282,265],
[291,0,268,271,285,273,286,284],
[285,283,0,245,301,271,291,246],
[283,280,306,0,294,278,335,270],
[283,266,250,257,0,261,289,235],
[277,278,280,273,290,0,310,254],
[269,265,260,216,262,241,0,235],
[286,267,305,281,316,297,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,241,262,262,265,267,268],
[281,0,266,259,257,270,275,287],
[310,285,0,281,273,291,297,299],
[289,292,270,0,283,277,293,291],
[289,294,278,268,0,287,293,290],
[286,281,260,274,264,0,282,284],
[284,276,254,258,258,269,0,269],
[283,264,252,260,261,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,285,270,258,287,254],
[276,0,281,276,280,254,267,276],
[275,270,0,301,277,294,295,275],
[266,275,250,0,269,256,254,271],
[281,271,274,282,0,259,293,247],
[293,297,257,295,292,0,272,319],
[264,284,256,297,258,279,0,298],
[297,275,276,280,304,232,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,279,280,288,298,291],
[280,0,273,286,290,279,316,295],
[272,278,0,289,280,277,305,291],
[272,265,262,0,279,282,282,288],
[271,261,271,272,0,280,300,285],
[263,272,274,269,271,0,300,294],
[253,235,246,269,251,251,0,265],
[260,256,260,263,266,257,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,282,266,289,272,273],
[278,0,266,283,270,272,261,267],
[279,285,0,275,286,281,286,286],
[269,268,276,0,277,250,264,266],
[285,281,265,274,0,278,273,275],
[262,279,270,301,273,0,249,255],
[279,290,265,287,278,302,0,281],
[278,284,265,285,276,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,274,274,270,262,269],
[284,0,284,259,287,287,271,279],
[279,267,0,269,266,265,277,260],
[277,292,282,0,288,285,266,267],
[277,264,285,263,0,271,267,258],
[281,264,286,266,280,0,269,265],
[289,280,274,285,284,282,0,286],
[282,272,291,284,293,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,272,269,278,277,301,253],
[284,0,289,264,305,270,299,280],
[279,262,0,289,277,303,322,270],
[282,287,262,0,298,264,276,283],
[273,246,274,253,0,281,274,275],
[274,281,248,287,270,0,295,288],
[250,252,229,275,277,256,0,261],
[298,271,281,268,276,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,288,270,261,295,276,294],
[259,0,251,255,261,280,304,262],
[263,300,0,276,253,275,303,284],
[281,296,275,0,252,290,289,293],
[290,290,298,299,0,271,310,280],
[256,271,276,261,280,0,299,276],
[275,247,248,262,241,252,0,280],
[257,289,267,258,271,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,288,279,256,272,276,258],
[295,0,304,291,270,286,292,285],
[263,247,0,278,261,274,275,263],
[272,260,273,0,273,278,296,274],
[295,281,290,278,0,297,297,272],
[279,265,277,273,254,0,278,271],
[275,259,276,255,254,273,0,248],
[293,266,288,277,279,280,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,318,307,277,270,281,305],
[256,0,283,289,250,282,253,277],
[233,268,0,282,247,260,287,284],
[244,262,269,0,231,268,241,277],
[274,301,304,320,0,323,292,334],
[281,269,291,283,228,0,255,265],
[270,298,264,310,259,296,0,297],
[246,274,267,274,217,286,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,303,263,307,235,262,268],
[268,0,285,240,281,259,249,238],
[248,266,0,234,240,227,236,213],
[288,311,317,0,298,275,285,267],
[244,270,311,253,0,250,239,256],
[316,292,324,276,301,0,268,254],
[289,302,315,266,312,283,0,280],
[283,313,338,284,295,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,337,273,374,317,284,372],
[241,0,280,233,344,199,268,320],
[214,271,0,236,298,310,264,301],
[278,318,315,0,318,234,297,304],
[177,207,253,233,0,270,191,281],
[234,352,241,317,281,0,217,306],
[267,283,287,254,360,334,0,320],
[179,231,250,247,270,245,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,301,279,285,256,269],
[271,0,303,300,275,290,252,284],
[270,248,0,289,269,261,241,274],
[250,251,262,0,250,260,230,279],
[272,276,282,301,0,292,278,279],
[266,261,290,291,259,0,260,281],
[295,299,310,321,273,291,0,295],
[282,267,277,272,272,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,320,272,313,241,283,291],
[293,0,356,262,363,300,333,321],
[231,195,0,225,250,193,250,210],
[279,289,326,0,329,265,272,304],
[238,188,301,222,0,173,271,272],
[310,251,358,286,378,0,308,319],
[268,218,301,279,280,243,0,343],
[260,230,341,247,279,232,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,272,277,272,269,262,257],
[280,0,303,286,283,278,270,279],
[279,248,0,263,266,268,256,268],
[274,265,288,0,287,275,269,259],
[279,268,285,264,0,269,265,259],
[282,273,283,276,282,0,268,262],
[289,281,295,282,286,283,0,262],
[294,272,283,292,292,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,288,278,290,277,273,277],
[273,0,282,291,286,274,286,275],
[263,269,0,261,275,273,277,273],
[273,260,290,0,295,283,297,283],
[261,265,276,256,0,238,276,261],
[274,277,278,268,313,0,271,271],
[278,265,274,254,275,280,0,277],
[274,276,278,268,290,280,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,298,287,267,277,268],
[274,0,286,293,281,266,282,279],
[259,265,0,276,262,254,279,263],
[253,258,275,0,273,259,279,265],
[264,270,289,278,0,267,273,261],
[284,285,297,292,284,0,299,269],
[274,269,272,272,278,252,0,266],
[283,272,288,286,290,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,264,293,284,264,284,263],
[272,0,295,277,289,278,297,288],
[287,256,0,308,288,278,284,265],
[258,274,243,0,272,267,272,276],
[267,262,263,279,0,267,260,266],
[287,273,273,284,284,0,284,281],
[267,254,267,279,291,267,0,260],
[288,263,286,275,285,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,255,267,266,276,254,268],
[287,0,265,259,281,283,258,279],
[296,286,0,261,284,300,276,284],
[284,292,290,0,289,298,269,290],
[285,270,267,262,0,283,261,276],
[275,268,251,253,268,0,254,264],
[297,293,275,282,290,297,0,286],
[283,272,267,261,275,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,261,234,284,217,231,260],
[280,0,295,267,284,253,283,275],
[290,256,0,247,259,215,266,269],
[317,284,304,0,292,280,260,298],
[267,267,292,259,0,262,271,285],
[334,298,336,271,289,0,288,270],
[320,268,285,291,280,263,0,306],
[291,276,282,253,266,281,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,221,257,248,266,247,204],
[280,0,261,266,279,316,255,252],
[330,290,0,276,296,261,314,271],
[294,285,275,0,274,290,273,272],
[303,272,255,277,0,297,311,277],
[285,235,290,261,254,0,253,268],
[304,296,237,278,240,298,0,275],
[347,299,280,279,274,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,299,291,295,302,290],
[283,0,279,293,280,322,263,298],
[283,272,0,300,298,317,302,270],
[252,258,251,0,279,269,257,270],
[260,271,253,272,0,271,256,248],
[256,229,234,282,280,0,283,260],
[249,288,249,294,295,268,0,276],
[261,253,281,281,303,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,268,280,252,282,284,247],
[314,0,295,285,259,278,259,264],
[283,256,0,254,264,274,253,255],
[271,266,297,0,269,267,291,301],
[299,292,287,282,0,264,276,285],
[269,273,277,284,287,0,252,265],
[267,292,298,260,275,299,0,265],
[304,287,296,250,266,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,306,254,298,303,243,261],
[266,0,283,286,278,277,257,265],
[245,268,0,245,305,305,279,279],
[297,265,306,0,297,302,262,293],
[253,273,246,254,0,292,245,252],
[248,274,246,249,259,0,214,252],
[308,294,272,289,306,337,0,303],
[290,286,272,258,299,299,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,264,247,219,256,248,238],
[338,0,272,312,302,292,272,318],
[287,279,0,313,288,353,279,273],
[304,239,238,0,319,277,270,336],
[332,249,263,232,0,305,248,295],
[295,259,198,274,246,0,210,269],
[303,279,272,281,303,341,0,333],
[313,233,278,215,256,282,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,298,255,296,280,303,295],
[267,0,279,293,275,307,292,278],
[253,272,0,266,272,303,293,292],
[296,258,285,0,316,310,300,296],
[255,276,279,235,0,250,266,224],
[271,244,248,241,301,0,304,279],
[248,259,258,251,285,247,0,250],
[256,273,259,255,327,272,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,304,283,291,292,265],
[264,0,249,300,271,274,281,276],
[279,302,0,298,283,284,292,268],
[247,251,253,0,252,253,261,246],
[268,280,268,299,0,276,290,263],
[260,277,267,298,275,0,291,254],
[259,270,259,290,261,260,0,260],
[286,275,283,305,288,297,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,273,277,271,280,261],
[281,0,293,294,292,274,279,286],
[266,258,0,276,277,256,274,263],
[278,257,275,0,282,258,264,252],
[274,259,274,269,0,252,270,270],
[280,277,295,293,299,0,275,265],
[271,272,277,287,281,276,0,264],
[290,265,288,299,281,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,256,283,337,251,282,339],
[261,0,273,279,295,312,238,293],
[295,278,0,288,301,276,260,276],
[268,272,263,0,329,265,286,318],
[214,256,250,222,0,237,230,244],
[300,239,275,286,314,0,251,279],
[269,313,291,265,321,300,0,294],
[212,258,275,233,307,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,260,373,306,290,319,323],
[181,0,259,254,211,220,220,257],
[291,292,0,283,262,300,269,274],
[178,297,268,0,275,262,225,271],
[245,340,289,276,0,295,301,298],
[261,331,251,289,256,0,220,255],
[232,331,282,326,250,331,0,275],
[228,294,277,280,253,296,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,344,156,284,335,148,257],
[311,0,376,156,217,193,182,263],
[207,175,0,170,156,368,118,213],
[395,395,381,0,307,371,338,263],
[267,334,395,244,0,317,189,246],
[216,358,183,180,234,0,162,263],
[403,369,433,213,362,389,0,311],
[294,288,338,288,305,288,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,286,251,268,277,283,265],
[247,0,249,254,244,264,266,243],
[265,302,0,272,250,252,263,267],
[300,297,279,0,253,274,267,264],
[283,307,301,298,0,273,282,285],
[274,287,299,277,278,0,278,270],
[268,285,288,284,269,273,0,254],
[286,308,284,287,266,281,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,292,329,306,315,319],
[271,0,307,286,348,331,299,283],
[278,244,0,267,331,266,317,284],
[259,265,284,0,320,276,282,323],
[222,203,220,231,0,260,286,271],
[245,220,285,275,291,0,269,319],
[236,252,234,269,265,282,0,306],
[232,268,267,228,280,232,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,271,266,242,255,252],
[283,0,256,293,276,255,283,265],
[282,295,0,279,280,247,303,280],
[280,258,272,0,277,270,290,257],
[285,275,271,274,0,275,275,260],
[309,296,304,281,276,0,303,266],
[296,268,248,261,276,248,0,244],
[299,286,271,294,291,285,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,213,192,245,252,291,228],
[301,0,295,289,242,291,332,305],
[338,256,0,255,299,278,312,248],
[359,262,296,0,284,311,358,297],
[306,309,252,267,0,281,313,263],
[299,260,273,240,270,0,314,228],
[260,219,239,193,238,237,0,244],
[323,246,303,254,288,323,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,286,276,272,267,260,286],
[248,0,280,259,273,284,264,287],
[265,271,0,255,253,270,244,277],
[275,292,296,0,283,300,254,292],
[279,278,298,268,0,266,285,283],
[284,267,281,251,285,0,272,274],
[291,287,307,297,266,279,0,288],
[265,264,274,259,268,277,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,307,274,277,312,279,231],
[215,0,233,214,254,246,213,228],
[244,318,0,266,281,225,272,231],
[277,337,285,0,315,273,315,299],
[274,297,270,236,0,271,254,277],
[239,305,326,278,280,0,366,234],
[272,338,279,236,297,185,0,215],
[320,323,320,252,274,317,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,261,282,263,260,271],
[284,0,253,267,262,257,267,262],
[292,298,0,289,304,268,282,287],
[290,284,262,0,277,266,286,271],
[269,289,247,274,0,263,274,277],
[288,294,283,285,288,0,289,269],
[291,284,269,265,277,262,0,279],
[280,289,264,280,274,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,265,288,267,284,280],
[261,0,256,254,263,254,244,278],
[268,295,0,266,288,261,278,273],
[286,297,285,0,281,284,272,289],
[263,288,263,270,0,281,261,266],
[284,297,290,267,270,0,279,282],
[267,307,273,279,290,272,0,278],
[271,273,278,262,285,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,305,288,273,274,282,275],
[288,0,277,273,279,280,280,279],
[246,274,0,255,258,269,270,272],
[263,278,296,0,290,281,262,274],
[278,272,293,261,0,269,291,262],
[277,271,282,270,282,0,268,269],
[269,271,281,289,260,283,0,268],
[276,272,279,277,289,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,302,301,256,270,273,259],
[287,0,284,284,281,271,291,261],
[249,267,0,261,241,279,285,286],
[250,267,290,0,239,261,260,256],
[295,270,310,312,0,277,266,299],
[281,280,272,290,274,0,294,284],
[278,260,266,291,285,257,0,272],
[292,290,265,295,252,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,252,280,277,266,259,259],
[264,0,245,273,283,272,262,277],
[299,306,0,263,285,269,251,293],
[271,278,288,0,253,284,276,281],
[274,268,266,298,0,266,280,286],
[285,279,282,267,285,0,267,286],
[292,289,300,275,271,284,0,289],
[292,274,258,270,265,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,284,268,282,275,266],
[283,0,250,280,280,286,287,277],
[289,301,0,304,273,304,298,275],
[267,271,247,0,262,270,279,274],
[283,271,278,289,0,303,317,276],
[269,265,247,281,248,0,276,262],
[276,264,253,272,234,275,0,251],
[285,274,276,277,275,289,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,214,211,227,202,187,236],
[341,0,299,319,303,336,271,303],
[337,252,0,274,271,305,253,292],
[340,232,277,0,291,247,265,274],
[324,248,280,260,0,266,256,273],
[349,215,246,304,285,0,285,288],
[364,280,298,286,295,266,0,291],
[315,248,259,277,278,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,286,266,276,261,298],
[278,0,275,290,289,281,277,282],
[271,276,0,295,263,279,273,289],
[265,261,256,0,257,268,246,270],
[285,262,288,294,0,286,274,288],
[275,270,272,283,265,0,263,269],
[290,274,278,305,277,288,0,301],
[253,269,262,281,263,282,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,253,262,259,247,257,279],
[290,0,268,279,290,268,264,274],
[298,283,0,274,282,271,263,262],
[289,272,277,0,276,274,263,284],
[292,261,269,275,0,285,269,282],
[304,283,280,277,266,0,276,290],
[294,287,288,288,282,275,0,289],
[272,277,289,267,269,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,300,273,293,241,230,272],
[303,0,292,273,298,279,288,253],
[251,259,0,277,280,273,244,251],
[278,278,274,0,293,296,293,266],
[258,253,271,258,0,262,267,264],
[310,272,278,255,289,0,268,318],
[321,263,307,258,284,283,0,300],
[279,298,300,285,287,233,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,241,252,263,249,253,247],
[290,0,227,232,270,261,247,266],
[310,324,0,297,304,261,281,278],
[299,319,254,0,277,285,280,299],
[288,281,247,274,0,274,271,280],
[302,290,290,266,277,0,292,303],
[298,304,270,271,280,259,0,267],
[304,285,273,252,271,248,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,297,291,278,292,292],
[279,0,280,291,282,270,290,292],
[266,271,0,303,307,272,292,288],
[254,260,248,0,289,251,278,278],
[260,269,244,262,0,244,273,270],
[273,281,279,300,307,0,301,288],
[259,261,259,273,278,250,0,273],
[259,259,263,273,281,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,265,260,295,282,292,296],
[255,0,257,248,279,269,262,262],
[286,294,0,268,280,290,283,275],
[291,303,283,0,284,287,288,274],
[256,272,271,267,0,267,269,260],
[269,282,261,264,284,0,264,273],
[259,289,268,263,282,287,0,274],
[255,289,276,277,291,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,272,302,277,260,286],
[279,0,294,264,308,296,283,287],
[271,257,0,268,292,272,266,290],
[279,287,283,0,307,269,281,276],
[249,243,259,244,0,252,255,265],
[274,255,279,282,299,0,249,291],
[291,268,285,270,296,302,0,294],
[265,264,261,275,286,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,291,272,284,282,281],
[283,0,292,284,277,290,279,273],
[266,259,0,266,277,298,270,256],
[260,267,285,0,271,289,285,265],
[279,274,274,280,0,286,303,272],
[267,261,253,262,265,0,271,259],
[269,272,281,266,248,280,0,267],
[270,278,295,286,279,292,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,273,277,279,278,278],
[271,0,273,281,289,265,286,272],
[275,278,0,274,290,276,283,270],
[278,270,277,0,298,287,275,288],
[274,262,261,253,0,267,266,258],
[272,286,275,264,284,0,280,274],
[273,265,268,276,285,271,0,262],
[273,279,281,263,293,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,269,300,242,234,261,255],
[300,0,264,329,274,303,246,247],
[282,287,0,316,276,284,258,284],
[251,222,235,0,271,237,220,251],
[309,277,275,280,0,264,235,252],
[317,248,267,314,287,0,253,275],
[290,305,293,331,316,298,0,260],
[296,304,267,300,299,276,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,279,258,268,294,236,264],
[244,0,234,244,222,295,237,253],
[272,317,0,281,269,331,276,278],
[293,307,270,0,275,315,266,343],
[283,329,282,276,0,315,244,274],
[257,256,220,236,236,0,225,245],
[315,314,275,285,307,326,0,325],
[287,298,273,208,277,306,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,285,259,266,274,274,251],
[287,0,277,275,254,272,270,275],
[266,274,0,274,279,247,275,276],
[292,276,277,0,282,288,303,268],
[285,297,272,269,0,281,276,275],
[277,279,304,263,270,0,293,263],
[277,281,276,248,275,258,0,254],
[300,276,275,283,276,288,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,277,277,285,283,270],
[278,0,287,288,275,271,300,271],
[283,264,0,278,263,271,281,289],
[274,263,273,0,261,267,266,263],
[274,276,288,290,0,294,286,277],
[266,280,280,284,257,0,289,270],
[268,251,270,285,265,262,0,256],
[281,280,262,288,274,281,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,357,212,225,188,368,179,275],
[194,0,165,289,196,185,237,414],
[339,386,0,384,261,277,326,327],
[326,262,167,0,186,232,292,322],
[363,355,290,365,0,357,258,354],
[183,366,274,319,194,0,362,363],
[372,314,225,259,293,189,0,373],
[276,137,224,229,197,188,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,274,272,292,276,291],
[272,0,284,253,286,280,291,273],
[267,267,0,259,275,274,277,269],
[277,298,292,0,274,274,283,276],
[279,265,276,277,0,266,282,270],
[259,271,277,277,285,0,294,282],
[275,260,274,268,269,257,0,291],
[260,278,282,275,281,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,283,277,287,268,294,292],
[292,0,314,267,295,274,335,302],
[268,237,0,264,279,259,277,286],
[274,284,287,0,261,277,313,277],
[264,256,272,290,0,258,302,281],
[283,277,292,274,293,0,303,292],
[257,216,274,238,249,248,0,260],
[259,249,265,274,270,259,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,259,280,253,269,258],
[281,0,292,278,279,280,293,273],
[275,259,0,260,299,276,292,268],
[292,273,291,0,309,275,294,287],
[271,272,252,242,0,262,265,245],
[298,271,275,276,289,0,276,269],
[282,258,259,257,286,275,0,257],
[293,278,283,264,306,282,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,237,253,241,293,274,343],
[287,0,291,245,266,260,228,288],
[314,260,0,276,287,310,261,317],
[298,306,275,0,257,270,251,325],
[310,285,264,294,0,272,280,321],
[258,291,241,281,279,0,228,312],
[277,323,290,300,271,323,0,361],
[208,263,234,226,230,239,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,277,265,267,276,277],
[283,0,284,280,266,270,273,298],
[286,267,0,274,267,266,262,278],
[274,271,277,0,274,277,276,282],
[286,285,284,277,0,275,282,284],
[284,281,285,274,276,0,284,285],
[275,278,289,275,269,267,0,281],
[274,253,273,269,267,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,305,294,255,269,291],
[270,0,296,297,295,281,270,270],
[290,255,0,296,298,253,271,267],
[246,254,255,0,241,233,243,265],
[257,256,253,310,0,243,270,268],
[296,270,298,318,308,0,304,294],
[282,281,280,308,281,247,0,260],
[260,281,284,286,283,257,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,266,259,294,258,279,283],
[264,0,263,286,291,266,287,290],
[285,288,0,271,278,288,288,287],
[292,265,280,0,302,280,306,295],
[257,260,273,249,0,253,270,270],
[293,285,263,271,298,0,287,305],
[272,264,263,245,281,264,0,280],
[268,261,264,256,281,246,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,277,272,266,261,264],
[261,0,287,256,277,270,274,276],
[268,264,0,261,284,276,266,257],
[274,295,290,0,296,275,264,264],
[279,274,267,255,0,265,280,249],
[285,281,275,276,286,0,298,275],
[290,277,285,287,271,253,0,263],
[287,275,294,287,302,276,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,256,277,261,273,253],
[254,0,267,240,251,261,231,250],
[275,284,0,256,296,256,261,257],
[295,311,295,0,290,257,278,263],
[274,300,255,261,0,278,289,286],
[290,290,295,294,273,0,280,283],
[278,320,290,273,262,271,0,272],
[298,301,294,288,265,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,296,273,260,283,266],
[281,0,291,290,278,280,296,275],
[274,260,0,281,262,260,256,269],
[255,261,270,0,244,261,264,262],
[278,273,289,307,0,248,260,288],
[291,271,291,290,303,0,297,274],
[268,255,295,287,291,254,0,289],
[285,276,282,289,263,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,263,279,276,271,280],
[284,0,268,273,274,259,285,282],
[264,283,0,259,260,260,278,279],
[288,278,292,0,266,277,284,292],
[272,277,291,285,0,275,283,285],
[275,292,291,274,276,0,290,281],
[280,266,273,267,268,261,0,284],
[271,269,272,259,266,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,252,286,273,294,251,277],
[279,0,262,289,282,291,285,273],
[299,289,0,301,285,303,258,274],
[265,262,250,0,262,278,256,255],
[278,269,266,289,0,286,270,269],
[257,260,248,273,265,0,257,280],
[300,266,293,295,281,294,0,294],
[274,278,277,296,282,271,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,272,246,330,238,274,167],
[297,0,286,250,291,288,231,259],
[279,265,0,277,330,279,353,216],
[305,301,274,0,324,253,312,249],
[221,260,221,227,0,164,303,157],
[313,263,272,298,387,0,335,293],
[277,320,198,239,248,216,0,233],
[384,292,335,302,394,258,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,310,286,290,241,309,280],
[272,0,311,261,270,270,275,264],
[241,240,0,256,242,238,249,259],
[265,290,295,0,289,247,296,275],
[261,281,309,262,0,267,236,241],
[310,281,313,304,284,0,265,260],
[242,276,302,255,315,286,0,300],
[271,287,292,276,310,291,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,287,277,262,253,269],
[271,0,282,285,274,285,274,277],
[266,269,0,270,255,265,281,284],
[264,266,281,0,268,256,277,253],
[274,277,296,283,0,289,291,278],
[289,266,286,295,262,0,280,271],
[298,277,270,274,260,271,0,268],
[282,274,267,298,273,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,273,262,273,268,279],
[283,0,284,276,279,283,275,277],
[287,267,0,290,278,287,276,275],
[278,275,261,0,262,289,275,285],
[289,272,273,289,0,276,279,274],
[278,268,264,262,275,0,267,278],
[283,276,275,276,272,284,0,288],
[272,274,276,266,277,273,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,257,340,270,344,308,344],
[264,0,232,278,209,318,282,216],
[294,319,0,335,290,383,264,284],
[211,273,216,0,222,263,277,222],
[281,342,261,329,0,367,303,313],
[207,233,168,288,184,0,283,206],
[243,269,287,274,248,268,0,235],
[207,335,267,329,238,345,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,287,263,290,249,266],
[282,0,249,292,290,300,260,264],
[287,302,0,302,269,284,300,264],
[264,259,249,0,266,276,231,248],
[288,261,282,285,0,309,263,287],
[261,251,267,275,242,0,254,229],
[302,291,251,320,288,297,0,264],
[285,287,287,303,264,322,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,253,246,272,249,248],
[285,0,270,273,252,268,267,251],
[275,281,0,282,275,263,273,262],
[298,278,269,0,279,284,259,265],
[305,299,276,272,0,284,282,279],
[279,283,288,267,267,0,289,266],
[302,284,278,292,269,262,0,270],
[303,300,289,286,272,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,297,340,275,291,259,282],
[286,0,289,339,275,292,279,295],
[254,262,0,271,282,256,242,266],
[211,212,280,0,251,250,223,258],
[276,276,269,300,0,295,253,269],
[260,259,295,301,256,0,245,274],
[292,272,309,328,298,306,0,305],
[269,256,285,293,282,277,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,270,279,278,279,270],
[281,0,293,270,276,284,301,287],
[279,258,0,282,281,282,292,284],
[281,281,269,0,284,298,274,289],
[272,275,270,267,0,255,282,262],
[273,267,269,253,296,0,282,277],
[272,250,259,277,269,269,0,277],
[281,264,267,262,289,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,304,277,259,287,317,273],
[263,0,272,269,251,265,290,262],
[247,279,0,257,252,280,291,275],
[274,282,294,0,264,274,292,263],
[292,300,299,287,0,265,299,302],
[264,286,271,277,286,0,288,295],
[234,261,260,259,252,263,0,291],
[278,289,276,288,249,256,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,269,263,263,263,278,256],
[309,0,284,310,290,289,267,314],
[282,267,0,251,291,264,281,280],
[288,241,300,0,286,292,293,259],
[288,261,260,265,0,285,276,256],
[288,262,287,259,266,0,266,255],
[273,284,270,258,275,285,0,296],
[295,237,271,292,295,296,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,264,244,280,332,297,293],
[265,0,288,265,275,351,326,294],
[287,263,0,273,244,326,275,270],
[307,286,278,0,257,301,300,321],
[271,276,307,294,0,351,242,293],
[219,200,225,250,200,0,233,219],
[254,225,276,251,309,318,0,305],
[258,257,281,230,258,332,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,256,254,271,282,261],
[281,0,283,271,272,264,296,285],
[275,268,0,268,265,264,274,275],
[295,280,283,0,277,272,289,278],
[297,279,286,274,0,277,297,294],
[280,287,287,279,274,0,281,273],
[269,255,277,262,254,270,0,261],
[290,266,276,273,257,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,264,275,278,294,287,287],
[237,0,220,243,241,238,248,223],
[287,331,0,285,283,286,269,262],
[276,308,266,0,258,289,274,276],
[273,310,268,293,0,300,304,266],
[257,313,265,262,251,0,245,256],
[264,303,282,277,247,306,0,275],
[264,328,289,275,285,295,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,239,277,286,252,265],
[287,0,254,263,272,276,248,266],
[293,297,0,277,287,278,252,261],
[312,288,274,0,287,304,285,265],
[274,279,264,264,0,276,268,272],
[265,275,273,247,275,0,235,272],
[299,303,299,266,283,316,0,280],
[286,285,290,286,279,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,294,289,244,300,268,268],
[288,0,259,236,214,220,170,218],
[257,292,0,269,264,244,259,240],
[262,315,282,0,251,269,314,285],
[307,337,287,300,0,263,305,261],
[251,331,307,282,288,0,312,285],
[283,381,292,237,246,239,0,276],
[283,333,311,266,290,266,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,237,183,218,278,229,221],
[312,0,258,213,274,283,291,228],
[314,293,0,281,318,338,258,254],
[368,338,270,0,323,310,340,288],
[333,277,233,228,0,254,292,283],
[273,268,213,241,297,0,279,226],
[322,260,293,211,259,272,0,315],
[330,323,297,263,268,325,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,289,293,284,296,289,266],
[235,0,265,283,262,279,276,274],
[262,286,0,284,281,270,271,271],
[258,268,267,0,250,273,279,246],
[267,289,270,301,0,279,268,261],
[255,272,281,278,272,0,299,263],
[262,275,280,272,283,252,0,276],
[285,277,280,305,290,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,271,368,291,285,317,294],
[286,0,280,302,269,252,283,243],
[280,271,0,338,312,222,312,235],
[183,249,213,0,231,243,287,194],
[260,282,239,320,0,270,344,245],
[266,299,329,308,281,0,312,261],
[234,268,239,264,207,239,0,226],
[257,308,316,357,306,290,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,314,253,264,264,267,236],
[284,0,346,284,261,278,286,259],
[237,205,0,244,242,216,271,235],
[298,267,307,0,272,284,307,267],
[287,290,309,279,0,284,334,240],
[287,273,335,267,267,0,325,286],
[284,265,280,244,217,226,0,254],
[315,292,316,284,311,265,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,303,225,290,247,271],
[292,0,282,279,291,300,251,288],
[273,269,0,263,297,339,309,241],
[248,272,288,0,271,276,249,263],
[326,260,254,280,0,285,325,324],
[261,251,212,275,266,0,286,297],
[304,300,242,302,226,265,0,281],
[280,263,310,288,227,254,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,187,404,140,187,270,291],
[155,0,208,207,94,102,168,228],
[364,343,0,343,230,80,265,273],
[147,344,208,0,21,187,168,161],
[411,457,321,530,0,232,379,425],
[364,449,471,364,319,0,265,364],
[281,383,286,383,172,286,0,193],
[260,323,278,390,126,187,358,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,265,247,254,272,282],
[295,0,261,283,253,276,256,279],
[285,290,0,278,275,288,285,298],
[286,268,273,0,261,270,265,284],
[304,298,276,290,0,282,271,296],
[297,275,263,281,269,0,255,276],
[279,295,266,286,280,296,0,304],
[269,272,253,267,255,275,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,281,186,351,296,390,389],
[245,0,379,242,312,324,288,274],
[270,172,0,52,302,299,263,111],
[365,309,499,0,418,247,499,319],
[200,239,249,133,0,295,229,192],
[255,227,252,304,256,0,345,360],
[161,263,288,52,322,206,0,111],
[162,277,440,232,359,191,440,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,265,243,272,260,237],
[268,0,279,281,265,266,264,271],
[285,272,0,270,278,294,274,251],
[286,270,281,0,262,287,257,259],
[308,286,273,289,0,294,292,284],
[279,285,257,264,257,0,257,254],
[291,287,277,294,259,294,0,268],
[314,280,300,292,267,297,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,294,288,317,277,300],
[276,0,269,274,264,294,271,271],
[276,282,0,276,262,280,262,274],
[257,277,275,0,260,286,280,274],
[263,287,289,291,0,302,284,276],
[234,257,271,265,249,0,264,261],
[274,280,289,271,267,287,0,298],
[251,280,277,277,275,290,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,247,291,219,274,265,263],
[296,0,303,288,252,312,267,280],
[304,248,0,277,239,276,267,272],
[260,263,274,0,242,288,244,244],
[332,299,312,309,0,305,306,267],
[277,239,275,263,246,0,269,279],
[286,284,284,307,245,282,0,272],
[288,271,279,307,284,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,312,251,298,244,221,237],
[336,0,323,350,312,283,321,254],
[239,228,0,278,278,220,270,214],
[300,201,273,0,298,224,223,219],
[253,239,273,253,0,202,256,237],
[307,268,331,327,349,0,308,295],
[330,230,281,328,295,243,0,271],
[314,297,337,332,314,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,248,272,265,282,252,276],
[288,0,276,283,274,307,298,299],
[303,275,0,281,296,307,271,271],
[279,268,270,0,255,276,276,278],
[286,277,255,296,0,260,273,297],
[269,244,244,275,291,0,269,274],
[299,253,280,275,278,282,0,283],
[275,252,280,273,254,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,290,282,284,263,278,293],
[281,0,280,262,293,278,272,314],
[261,271,0,292,306,288,283,322],
[269,289,259,0,261,267,254,312],
[267,258,245,290,0,263,261,288],
[288,273,263,284,288,0,265,297],
[273,279,268,297,290,286,0,317],
[258,237,229,239,263,254,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,351,291,322,317,320],
[277,0,298,302,257,274,303,299],
[253,253,0,322,264,269,279,281],
[200,249,229,0,232,259,240,236],
[260,294,287,319,0,276,304,294],
[229,277,282,292,275,0,308,302],
[234,248,272,311,247,243,0,297],
[231,252,270,315,257,249,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,302,325,312,352,307,273],
[292,0,320,329,404,323,323,234],
[249,231,0,308,348,236,254,236],
[226,222,243,0,364,312,339,227],
[239,147,203,187,0,177,226,306],
[199,228,315,239,374,0,252,222],
[244,228,297,212,325,299,0,192],
[278,317,315,324,245,329,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,285,292,281,296,280,299],
[286,0,269,276,265,285,269,277],
[266,282,0,287,274,286,264,290],
[259,275,264,0,269,267,252,286],
[270,286,277,282,0,267,267,287],
[255,266,265,284,284,0,230,264],
[271,282,287,299,284,321,0,304],
[252,274,261,265,264,287,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,295,278,279,303,267,279],
[277,0,297,280,268,288,288,289],
[256,254,0,261,256,286,268,282],
[273,271,290,0,250,262,262,282],
[272,283,295,301,0,307,272,304],
[248,263,265,289,244,0,247,273],
[284,263,283,289,279,304,0,293],
[272,262,269,269,247,278,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,232,242,252,254,273,259],
[327,0,276,285,280,265,289,297],
[319,275,0,312,306,278,296,309],
[309,266,239,0,271,260,277,281],
[299,271,245,280,0,245,286,274],
[297,286,273,291,306,0,271,308],
[278,262,255,274,265,280,0,295],
[292,254,242,270,277,243,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,282,296,286,258,290,284],
[278,0,270,296,266,285,285,274],
[269,281,0,291,276,249,258,262],
[255,255,260,0,263,276,246,268],
[265,285,275,288,0,263,254,276],
[293,266,302,275,288,0,275,276],
[261,266,293,305,297,276,0,285],
[267,277,289,283,275,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,247,284,271,269,270,289],
[263,0,282,284,290,280,283,291],
[304,269,0,308,300,284,299,316],
[267,267,243,0,259,249,257,270],
[280,261,251,292,0,276,272,295],
[282,271,267,302,275,0,290,299],
[281,268,252,294,279,261,0,279],
[262,260,235,281,256,252,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,288,275,294,295,279],
[275,0,292,284,297,311,296,306],
[259,259,0,273,271,280,267,282],
[263,267,278,0,286,268,299,274],
[276,254,280,265,0,257,288,290],
[257,240,271,283,294,0,268,292],
[256,255,284,252,263,283,0,271],
[272,245,269,277,261,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,263,252,271,277,307],
[275,0,282,257,243,255,277,302],
[277,269,0,280,249,271,292,289],
[288,294,271,0,285,286,312,303],
[299,308,302,266,0,321,293,312],
[280,296,280,265,230,0,271,284],
[274,274,259,239,258,280,0,280],
[244,249,262,248,239,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,271,308,281,269,299],
[267,0,285,268,298,268,278,298],
[261,266,0,264,269,266,260,289],
[280,283,287,0,282,270,287,277],
[243,253,282,269,0,255,249,279],
[270,283,285,281,296,0,290,303],
[282,273,291,264,302,261,0,287],
[252,253,262,274,272,248,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,251,269,272,279,279],
[275,0,259,256,290,256,273,262],
[283,292,0,275,290,274,301,300],
[300,295,276,0,283,278,289,274],
[282,261,261,268,0,273,275,274],
[279,295,277,273,278,0,272,267],
[272,278,250,262,276,279,0,269],
[272,289,251,277,277,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,295,254,303,271,271,288],
[264,0,255,267,286,259,285,245],
[256,296,0,260,250,254,242,278],
[297,284,291,0,309,284,270,295],
[248,265,301,242,0,263,272,263],
[280,292,297,267,288,0,263,275],
[280,266,309,281,279,288,0,270],
[263,306,273,256,288,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,256,251,267,257,251,261],
[295,0,294,260,285,276,276,279],
[295,257,0,279,273,288,268,267],
[300,291,272,0,283,276,277,274],
[284,266,278,268,0,269,261,263],
[294,275,263,275,282,0,279,272],
[300,275,283,274,290,272,0,272],
[290,272,284,277,288,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,299,273,217,275,322,344],
[318,0,278,231,194,285,232,299],
[252,273,0,289,217,257,272,322],
[278,320,262,0,294,301,262,259],
[334,357,334,257,0,366,364,361],
[276,266,294,250,185,0,294,259],
[229,319,279,289,187,257,0,274],
[207,252,229,292,190,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,292,296,276,304,258,293],
[258,0,236,285,238,294,257,225],
[259,315,0,287,250,285,235,260],
[255,266,264,0,211,277,236,248],
[275,313,301,340,0,311,296,280],
[247,257,266,274,240,0,262,255],
[293,294,316,315,255,289,0,286],
[258,326,291,303,271,296,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,288,266,268,274,273],
[265,0,270,252,291,264,270,301],
[281,281,0,272,258,254,266,268],
[263,299,279,0,283,270,267,280],
[285,260,293,268,0,274,280,287],
[283,287,297,281,277,0,275,277],
[277,281,285,284,271,276,0,274],
[278,250,283,271,264,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,274,269,281,293,304],
[270,0,293,285,270,285,296,271],
[274,258,0,271,280,277,302,303],
[277,266,280,0,275,294,284,265],
[282,281,271,276,0,272,293,268],
[270,266,274,257,279,0,278,277],
[258,255,249,267,258,273,0,249],
[247,280,248,286,283,274,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,281,290,290,287,293,273],
[255,0,258,255,280,263,264,262],
[270,293,0,263,288,287,269,289],
[261,296,288,0,295,288,278,288],
[261,271,263,256,0,275,264,262],
[264,288,264,263,276,0,261,274],
[258,287,282,273,287,290,0,268],
[278,289,262,263,289,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,260,292,262,290,281,294],
[243,0,269,250,264,223,266,267],
[291,282,0,303,286,270,294,274],
[259,301,248,0,273,247,271,275],
[289,287,265,278,0,259,288,278],
[261,328,281,304,292,0,289,274],
[270,285,257,280,263,262,0,301],
[257,284,277,276,273,277,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,291,292,289,267,285],
[274,0,284,275,277,284,271,260],
[262,267,0,286,288,285,272,263],
[260,276,265,0,274,278,259,247],
[259,274,263,277,0,273,264,252],
[262,267,266,273,278,0,257,254],
[284,280,279,292,287,294,0,273],
[266,291,288,304,299,297,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,300,331,256,261,246,229],
[322,0,299,345,255,270,283,275],
[251,252,0,279,199,259,257,277],
[220,206,272,0,170,241,281,260],
[295,296,352,381,0,277,276,234],
[290,281,292,310,274,0,289,292],
[305,268,294,270,275,262,0,285],
[322,276,274,291,317,259,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,251,267,266,272,239],
[285,0,273,245,249,270,251,229],
[289,278,0,267,261,241,268,248],
[300,306,284,0,306,287,283,273],
[284,302,290,245,0,295,290,258],
[285,281,310,264,256,0,304,280],
[279,300,283,268,261,247,0,243],
[312,322,303,278,293,271,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,268,290,331,313,325,277],
[248,0,268,275,292,261,266,256],
[283,283,0,308,322,268,309,275],
[261,276,243,0,311,247,298,258],
[220,259,229,240,0,242,240,247],
[238,290,283,304,309,0,285,263],
[226,285,242,253,311,266,0,254],
[274,295,276,293,304,288,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,241,253,251,219,246,237],
[297,0,260,287,271,232,269,267],
[310,291,0,276,266,277,260,273],
[298,264,275,0,261,238,247,258],
[300,280,285,290,0,275,269,303],
[332,319,274,313,276,0,306,292],
[305,282,291,304,282,245,0,267],
[314,284,278,293,248,259,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,276,247,266,288,283],
[265,0,267,258,272,228,278,266],
[286,284,0,273,301,277,316,310],
[275,293,278,0,273,221,317,293],
[304,279,250,278,0,246,297,300],
[285,323,274,330,305,0,309,309],
[263,273,235,234,254,242,0,291],
[268,285,241,258,251,242,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,270,286,280,286,286,290],
[251,0,277,295,278,257,258,279],
[281,274,0,279,277,274,279,282],
[265,256,272,0,268,246,261,277],
[271,273,274,283,0,271,248,287],
[265,294,277,305,280,0,279,302],
[265,293,272,290,303,272,0,283],
[261,272,269,274,264,249,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,261,267,283,270,269],
[275,0,286,268,276,280,264,275],
[275,265,0,267,257,276,270,271],
[290,283,284,0,292,270,285,285],
[284,275,294,259,0,280,272,287],
[268,271,275,281,271,0,265,263],
[281,287,281,266,279,286,0,287],
[282,276,280,266,264,288,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,261,268,268,297,263],
[265,0,279,245,239,238,265,275],
[274,272,0,260,256,241,279,282],
[290,306,291,0,279,262,285,300],
[283,312,295,272,0,280,305,304],
[283,313,310,289,271,0,318,276],
[254,286,272,266,246,233,0,279],
[288,276,269,251,247,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,260,287,267,263,269],
[268,0,257,262,284,254,269,268],
[281,294,0,270,322,269,276,291],
[291,289,281,0,280,272,283,287],
[264,267,229,271,0,256,255,260],
[284,297,282,279,295,0,279,265],
[288,282,275,268,296,272,0,288],
[282,283,260,264,291,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,294,284,290,289,299,281],
[277,0,288,284,277,278,270,258],
[257,263,0,271,278,279,292,252],
[267,267,280,0,286,298,278,280],
[261,274,273,265,0,260,278,277],
[262,273,272,253,291,0,271,257],
[252,281,259,273,273,280,0,266],
[270,293,299,271,274,294,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,292,275,288,276,256,271],
[262,0,272,281,266,259,253,262],
[259,279,0,281,284,268,255,262],
[276,270,270,0,271,258,249,257],
[263,285,267,280,0,271,258,248],
[275,292,283,293,280,0,276,272],
[295,298,296,302,293,275,0,277],
[280,289,289,294,303,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,281,255,281,289,260],
[274,0,261,273,247,280,275,267],
[289,290,0,293,278,274,301,279],
[270,278,258,0,261,275,277,274],
[296,304,273,290,0,293,279,275],
[270,271,277,276,258,0,284,268],
[262,276,250,274,272,267,0,268],
[291,284,272,277,276,283,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,300,221,276,253,268,242],
[305,0,296,264,231,251,286,227],
[251,255,0,297,256,246,251,260],
[330,287,254,0,240,347,224,276],
[275,320,295,311,0,313,262,261],
[298,300,305,204,238,0,229,184],
[283,265,300,327,289,322,0,263],
[309,324,291,275,290,367,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,313,206,284,234,296,302],
[287,0,323,245,310,248,296,328],
[238,228,0,223,260,225,204,284],
[345,306,328,0,274,298,306,296],
[267,241,291,277,0,256,232,293],
[317,303,326,253,295,0,289,340],
[255,255,347,245,319,262,0,331],
[249,223,267,255,258,211,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,271,262,258,287,206],
[255,0,216,241,205,203,208,190],
[282,335,0,239,248,269,270,244],
[280,310,312,0,255,322,304,287],
[289,346,303,296,0,279,277,267],
[293,348,282,229,272,0,318,262],
[264,343,281,247,274,233,0,261],
[345,361,307,264,284,289,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,286,292,266,278,270],
[268,0,284,274,276,269,258,270],
[265,267,0,267,295,262,267,271],
[265,277,284,0,294,281,271,270],
[259,275,256,257,0,252,274,246],
[285,282,289,270,299,0,273,276],
[273,293,284,280,277,278,0,265],
[281,281,280,281,305,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,246,253,282,261,233,245],
[293,0,280,284,263,259,257,261],
[305,271,0,263,283,279,280,251],
[298,267,288,0,262,272,268,251],
[269,288,268,289,0,269,272,256],
[290,292,272,279,282,0,272,281],
[318,294,271,283,279,279,0,276],
[306,290,300,300,295,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,237,285,258,255,256,308],
[215,0,215,192,194,188,224,244],
[314,336,0,286,254,325,277,331],
[266,359,265,0,257,237,249,300],
[293,357,297,294,0,322,266,314],
[296,363,226,314,229,0,293,322],
[295,327,274,302,285,258,0,278],
[243,307,220,251,237,229,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,280,272,269,270,288,280],
[290,0,286,278,269,269,289,278],
[271,265,0,267,272,261,276,261],
[279,273,284,0,257,262,284,253],
[282,282,279,294,0,286,293,267],
[281,282,290,289,265,0,295,258],
[263,262,275,267,258,256,0,266],
[271,273,290,298,284,293,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,270,281,254,266,280,286],
[282,0,281,288,290,281,287,256],
[281,270,0,307,279,277,269,265],
[270,263,244,0,265,292,282,270],
[297,261,272,286,0,281,290,286],
[285,270,274,259,270,0,290,294],
[271,264,282,269,261,261,0,249],
[265,295,286,281,265,257,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,272,272,265,241,255,287],
[304,0,300,294,275,300,305,309],
[279,251,0,271,261,270,263,285],
[279,257,280,0,248,253,272,279],
[286,276,290,303,0,275,285,297],
[310,251,281,298,276,0,278,296],
[296,246,288,279,266,273,0,270],
[264,242,266,272,254,255,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,254,277,281,268,263],
[277,0,261,263,260,276,262,263],
[285,290,0,279,271,279,288,266],
[297,288,272,0,267,280,257,276],
[274,291,280,284,0,292,280,282],
[270,275,272,271,259,0,253,269],
[283,289,263,294,271,298,0,279],
[288,288,285,275,269,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,273,252,325,259,299,290],
[254,0,260,245,267,239,285,195],
[278,291,0,240,323,271,269,271],
[299,306,311,0,321,286,306,268],
[226,284,228,230,0,218,263,241],
[292,312,280,265,333,0,283,284],
[252,266,282,245,288,268,0,233],
[261,356,280,283,310,267,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,287,285,270,293,283],
[266,0,282,290,290,296,276,281],
[284,269,0,273,282,275,279,260],
[264,261,278,0,282,265,265,263],
[266,261,269,269,0,253,270,275],
[281,255,276,286,298,0,270,272],
[258,275,272,286,281,281,0,275],
[268,270,291,288,276,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,278,272,257,274,284],
[282,0,276,289,288,271,276,286],
[276,275,0,279,265,267,275,265],
[273,262,272,0,264,276,271,286],
[279,263,286,287,0,274,269,276],
[294,280,284,275,277,0,268,283],
[277,275,276,280,282,283,0,284],
[267,265,286,265,275,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,267,261,285,279,258,278],
[312,0,296,270,278,308,263,321],
[284,255,0,281,271,295,259,289],
[290,281,270,0,276,282,279,307],
[266,273,280,275,0,307,273,293],
[272,243,256,269,244,0,238,284],
[293,288,292,272,278,313,0,317],
[273,230,262,244,258,267,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,295,300,279,273,288],
[260,0,268,283,278,273,263,276],
[262,283,0,290,273,288,277,287],
[256,268,261,0,277,262,254,261],
[251,273,278,274,0,256,268,247],
[272,278,263,289,295,0,281,279],
[278,288,274,297,283,270,0,267],
[263,275,264,290,304,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,296,279,285,284,259],
[271,0,285,285,272,300,262,275],
[255,266,0,282,253,276,276,264],
[255,266,269,0,259,286,264,264],
[272,279,298,292,0,299,291,289],
[266,251,275,265,252,0,268,266],
[267,289,275,287,260,283,0,268],
[292,276,287,287,262,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,286,275,272,249,275],
[270,0,280,270,256,274,268,277],
[277,271,0,263,253,285,264,272],
[265,281,288,0,246,257,284,277],
[276,295,298,305,0,272,289,293],
[279,277,266,294,279,0,272,262],
[302,283,287,267,262,279,0,264],
[276,274,279,274,258,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,236,272,310,257,250,194],
[312,0,267,290,354,300,307,279],
[315,284,0,303,364,281,326,262],
[279,261,248,0,321,292,288,298],
[241,197,187,230,0,242,255,215],
[294,251,270,259,309,0,275,257],
[301,244,225,263,296,276,0,213],
[357,272,289,253,336,294,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,288,270,273,292,291],
[272,0,266,272,254,277,279,284],
[277,285,0,299,277,267,294,297],
[263,279,252,0,266,266,291,283],
[281,297,274,285,0,280,295,305],
[278,274,284,285,271,0,286,296],
[259,272,257,260,256,265,0,291],
[260,267,254,268,246,255,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,233,288,257,248,257,256],
[271,0,281,267,258,276,263,226],
[318,270,0,307,271,274,307,257],
[263,284,244,0,283,261,272,271],
[294,293,280,268,0,290,301,276],
[303,275,277,290,261,0,299,256],
[294,288,244,279,250,252,0,255],
[295,325,294,280,275,295,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,275,271,277,283,251],
[275,0,297,278,280,262,272,265],
[259,254,0,238,261,283,227,238],
[276,273,313,0,287,282,285,248],
[280,271,290,264,0,267,264,264],
[274,289,268,269,284,0,279,282],
[268,279,324,266,287,272,0,268],
[300,286,313,303,287,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,268,277,279,267,273],
[269,0,277,284,286,270,277,280],
[263,274,0,273,268,262,262,272],
[283,267,278,0,285,273,269,288],
[274,265,283,266,0,263,272,273],
[272,281,289,278,288,0,286,282],
[284,274,289,282,279,265,0,294],
[278,271,279,263,278,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,286,311,250,234,279,353],
[262,0,309,327,268,322,277,338],
[265,242,0,289,230,279,235,286],
[240,224,262,0,247,291,248,265],
[301,283,321,304,0,269,280,310],
[317,229,272,260,282,0,246,278],
[272,274,316,303,271,305,0,333],
[198,213,265,286,241,273,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,307,304,204,242,285,203],
[314,0,270,290,305,244,271,299],
[244,281,0,265,245,205,270,263],
[247,261,286,0,253,212,253,197],
[347,246,306,298,0,291,346,275],
[309,307,346,339,260,0,346,281],
[266,280,281,298,205,205,0,257],
[348,252,288,354,276,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,278,278,259,289,270],
[263,0,265,274,272,278,283,266],
[267,286,0,282,263,274,279,272],
[273,277,269,0,280,275,293,285],
[273,279,288,271,0,281,281,287],
[292,273,277,276,270,0,281,272],
[262,268,272,258,270,270,0,276],
[281,285,279,266,264,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,232,225,249,279,254,216],
[315,0,288,297,312,281,283,259],
[319,263,0,291,283,257,273,287],
[326,254,260,0,256,288,275,230],
[302,239,268,295,0,302,281,270],
[272,270,294,263,249,0,291,255],
[297,268,278,276,270,260,0,295],
[335,292,264,321,281,296,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,288,285,283,278,270,294],
[268,0,291,286,283,286,282,294],
[263,260,0,257,257,262,276,270],
[266,265,294,0,285,277,279,283],
[268,268,294,266,0,277,280,275],
[273,265,289,274,274,0,276,281],
[281,269,275,272,271,275,0,284],
[257,257,281,268,276,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,306,280,283,271,276,266],
[290,0,317,290,292,283,273,288],
[245,234,0,280,274,264,266,256],
[271,261,271,0,280,276,260,260],
[268,259,277,271,0,263,260,250],
[280,268,287,275,288,0,283,277],
[275,278,285,291,291,268,0,290],
[285,263,295,291,301,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,340,398,314,373,331,415],
[282,0,271,381,230,287,388,295],
[211,280,0,264,347,422,381,264],
[153,170,287,0,275,243,287,237],
[237,321,204,276,0,301,373,297],
[178,264,129,308,250,0,298,231],
[220,163,170,264,178,253,0,197],
[136,256,287,314,254,320,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,257,280,281,272,261,274],
[290,0,299,314,318,288,271,316],
[294,252,0,287,289,239,240,290],
[271,237,264,0,252,283,269,273],
[270,233,262,299,0,262,268,281],
[279,263,312,268,289,0,295,285],
[290,280,311,282,283,256,0,285],
[277,235,261,278,270,266,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,280,272,264,275,272],
[255,0,272,267,258,249,256,275],
[276,279,0,270,280,291,287,271],
[271,284,281,0,261,272,287,284],
[279,293,271,290,0,270,273,267],
[287,302,260,279,281,0,281,290],
[276,295,264,264,278,270,0,264],
[279,276,280,267,284,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,308,307,269,273,284],
[279,0,289,249,290,252,262,305],
[267,262,0,216,286,288,260,205],
[243,302,335,0,265,265,232,273],
[244,261,265,286,0,269,240,232],
[282,299,263,286,282,0,267,294],
[278,289,291,319,311,284,0,269],
[267,246,346,278,319,257,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,251,261,267,256,251,267],
[309,0,267,284,281,279,261,261],
[300,284,0,313,302,299,279,263],
[290,267,238,0,270,264,259,260],
[284,270,249,281,0,261,252,247],
[295,272,252,287,290,0,276,253],
[300,290,272,292,299,275,0,278],
[284,290,288,291,304,298,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,283,276,259,251,249],
[281,0,274,275,301,272,259,273],
[284,277,0,288,287,284,260,289],
[268,276,263,0,281,264,298,286],
[275,250,264,270,0,279,257,277],
[292,279,267,287,272,0,266,259],
[300,292,291,253,294,285,0,282],
[302,278,262,265,274,292,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,331,245,255,301,287],
[272,0,287,328,267,278,350,310],
[275,264,0,319,256,268,295,275],
[220,223,232,0,206,223,264,236],
[306,284,295,345,0,261,315,299],
[296,273,283,328,290,0,342,325],
[250,201,256,287,236,209,0,275],
[264,241,276,315,252,226,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,317,348,244,211,283,244],
[263,0,288,341,292,304,263,302],
[234,263,0,235,257,200,214,186],
[203,210,316,0,297,300,259,229],
[307,259,294,254,0,277,243,286],
[340,247,351,251,274,0,264,267],
[268,288,337,292,308,287,0,227],
[307,249,365,322,265,284,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,288,277,275,280,259],
[288,0,261,270,305,257,258,259],
[283,290,0,309,273,277,298,285],
[263,281,242,0,300,287,273,262],
[274,246,278,251,0,264,283,270],
[276,294,274,264,287,0,298,260],
[271,293,253,278,268,253,0,265],
[292,292,266,289,281,291,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,255,239,252,274,255,264],
[289,0,266,266,275,273,273,255],
[296,285,0,273,279,294,273,301],
[312,285,278,0,288,275,271,279],
[299,276,272,263,0,271,271,264],
[277,278,257,276,280,0,230,273],
[296,278,278,280,280,321,0,269],
[287,296,250,272,287,278,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,273,271,281,273,284],
[263,0,259,256,260,279,268,272],
[276,292,0,274,289,285,277,268],
[278,295,277,0,284,276,271,279],
[280,291,262,267,0,286,275,273],
[270,272,266,275,265,0,256,267],
[278,283,274,280,276,295,0,279],
[267,279,283,272,278,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,262,252,257,253,288],
[285,0,275,283,287,286,246,293],
[279,276,0,242,283,286,284,303],
[289,268,309,0,293,294,279,308],
[299,264,268,258,0,285,275,298],
[294,265,265,257,266,0,266,315],
[298,305,267,272,276,285,0,290],
[263,258,248,243,253,236,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,298,273,257,282,296],
[290,0,284,266,275,275,271,291],
[270,267,0,316,289,284,296,314],
[253,285,235,0,261,271,295,276],
[278,276,262,290,0,277,263,287],
[294,276,267,280,274,0,272,310],
[269,280,255,256,288,279,0,295],
[255,260,237,275,264,241,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,278,292,301,261,290],
[255,0,263,265,268,259,242,281],
[273,288,0,250,287,235,279,263],
[273,286,301,0,279,287,266,286],
[259,283,264,272,0,247,287,260],
[250,292,316,264,304,0,273,286],
[290,309,272,285,264,278,0,304],
[261,270,288,265,291,265,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,289,255,271,269,282],
[288,0,299,277,272,288,281,277],
[285,252,0,298,271,293,279,283],
[262,274,253,0,248,249,258,267],
[296,279,280,303,0,267,272,298],
[280,263,258,302,284,0,283,277],
[282,270,272,293,279,268,0,263],
[269,274,268,284,253,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,226,207,257,252,264],
[285,0,267,221,250,239,216,243],
[283,284,0,258,268,311,281,281],
[325,330,293,0,257,324,291,296],
[344,301,283,294,0,310,263,302],
[294,312,240,227,241,0,260,264],
[299,335,270,260,288,291,0,309],
[287,308,270,255,249,287,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,280,274,271,279,286,273],
[287,0,290,295,297,293,269,281],
[271,261,0,289,286,287,269,283],
[277,256,262,0,265,286,276,264],
[280,254,265,286,0,278,272,267],
[272,258,264,265,273,0,275,274],
[265,282,282,275,279,276,0,276],
[278,270,268,287,284,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,271,286,291,271,266,273],
[299,0,268,289,308,278,289,296],
[280,283,0,284,296,252,276,294],
[265,262,267,0,280,263,287,281],
[260,243,255,271,0,251,260,265],
[280,273,299,288,300,0,282,290],
[285,262,275,264,291,269,0,264],
[278,255,257,270,286,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,313,259,306,272,270,303],
[246,0,275,249,259,251,246,237],
[238,276,0,253,277,270,258,268],
[292,302,298,0,301,281,277,269],
[245,292,274,250,0,288,258,264],
[279,300,281,270,263,0,273,267],
[281,305,293,274,293,278,0,284],
[248,314,283,282,287,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,304,316,301,307,265,287],
[249,0,269,261,251,280,239,272],
[247,282,0,270,258,278,246,263],
[235,290,281,0,265,285,244,268],
[250,300,293,286,0,266,279,283],
[244,271,273,266,285,0,255,277],
[286,312,305,307,272,296,0,290],
[264,279,288,283,268,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,292,239,303,292,270,289],
[221,0,201,206,230,260,298,208],
[259,350,0,319,321,300,303,273],
[312,345,232,0,304,331,274,287],
[248,321,230,247,0,272,267,267],
[259,291,251,220,279,0,292,229],
[281,253,248,277,284,259,0,223],
[262,343,278,264,284,322,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,296,264,297,310,295,314],
[262,0,294,297,309,312,266,302],
[255,257,0,272,268,284,274,278],
[287,254,279,0,324,317,279,298],
[254,242,283,227,0,285,246,253],
[241,239,267,234,266,0,274,293],
[256,285,277,272,305,277,0,288],
[237,249,273,253,298,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,307,277,291,300,338,273],
[264,0,246,288,294,304,299,258],
[244,305,0,291,308,302,312,297],
[274,263,260,0,249,276,268,249],
[260,257,243,302,0,277,276,286],
[251,247,249,275,274,0,241,237],
[213,252,239,283,275,310,0,240],
[278,293,254,302,265,314,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,270,251,265,275,267],
[292,0,284,287,263,272,300,290],
[301,267,0,284,284,264,272,274],
[281,264,267,0,277,293,269,268],
[300,288,267,274,0,279,296,301],
[286,279,287,258,272,0,299,293],
[276,251,279,282,255,252,0,266],
[284,261,277,283,250,258,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,281,305,275,258,269],
[264,0,265,253,262,251,236,248],
[274,286,0,273,299,265,280,277],
[270,298,278,0,275,264,264,267],
[246,289,252,276,0,268,250,262],
[276,300,286,287,283,0,268,297],
[293,315,271,287,301,283,0,292],
[282,303,274,284,289,254,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,317,293,278,283,276,295],
[277,0,290,299,274,271,296,299],
[234,261,0,268,248,247,260,243],
[258,252,283,0,249,261,257,271],
[273,277,303,302,0,282,273,288],
[268,280,304,290,269,0,266,279],
[275,255,291,294,278,285,0,284],
[256,252,308,280,263,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,287,272,274,298,273,300],
[277,0,298,285,254,287,279,297],
[264,253,0,256,248,260,250,268],
[279,266,295,0,273,286,286,294],
[277,297,303,278,0,270,270,292],
[253,264,291,265,281,0,256,304],
[278,272,301,265,281,295,0,291],
[251,254,283,257,259,247,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,249,265,246,252,248,255],
[294,0,252,292,264,285,271,262],
[302,299,0,304,268,269,288,282],
[286,259,247,0,290,248,255,267],
[305,287,283,261,0,273,275,265],
[299,266,282,303,278,0,270,291],
[303,280,263,296,276,281,0,279],
[296,289,269,284,286,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,291,280,280,285,291],
[278,0,277,271,297,267,288,285],
[276,274,0,290,292,278,275,286],
[260,280,261,0,283,254,250,259],
[271,254,259,268,0,257,261,296],
[271,284,273,297,294,0,277,282],
[266,263,276,301,290,274,0,285],
[260,266,265,292,255,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,308,277,276,253,265,302],
[262,0,273,275,264,271,268,266],
[243,278,0,255,275,270,264,277],
[274,276,296,0,286,261,283,281],
[275,287,276,265,0,278,278,273],
[298,280,281,290,273,0,273,317],
[286,283,287,268,273,278,0,287],
[249,285,274,270,278,234,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,263,264,283,255,238,275],
[267,0,275,251,276,256,268,310],
[288,276,0,294,272,241,258,287],
[287,300,257,0,297,276,346,320],
[268,275,279,254,0,294,288,328],
[296,295,310,275,257,0,302,288],
[313,283,293,205,263,249,0,307],
[276,241,264,231,223,263,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,300,277,282,287,282,281],
[300,0,274,276,256,282,273,279],
[251,277,0,299,246,274,246,286],
[274,275,252,0,264,261,244,291],
[269,295,305,287,0,316,291,294],
[264,269,277,290,235,0,251,280],
[269,278,305,307,260,300,0,313],
[270,272,265,260,257,271,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,282,273,283,263,255],
[277,0,255,262,267,272,283,264],
[290,296,0,277,277,271,287,283],
[269,289,274,0,293,286,278,269],
[278,284,274,258,0,277,276,266],
[268,279,280,265,274,0,277,257],
[288,268,264,273,275,274,0,283],
[296,287,268,282,285,294,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,242,255,261,261,270,280],
[298,0,273,288,288,287,288,298],
[309,278,0,275,291,277,283,298],
[296,263,276,0,283,275,279,309],
[290,263,260,268,0,275,274,287],
[290,264,274,276,276,0,289,298],
[281,263,268,272,277,262,0,288],
[271,253,253,242,264,253,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,281,277,273,266,297],
[283,0,277,282,275,258,252,285],
[269,274,0,272,273,264,275,290],
[270,269,279,0,276,286,271,274],
[274,276,278,275,0,274,271,280],
[278,293,287,265,277,0,263,280],
[285,299,276,280,280,288,0,274],
[254,266,261,277,271,271,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,281,276,300,268,311],
[278,0,290,277,263,292,306,308],
[275,261,0,276,284,290,269,298],
[270,274,275,0,278,305,293,318],
[275,288,267,273,0,286,276,290],
[251,259,261,246,265,0,265,272],
[283,245,282,258,275,286,0,290],
[240,243,253,233,261,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,262,272,271,278,262],
[295,0,296,290,266,298,283,288],
[290,255,0,267,292,285,265,263],
[289,261,284,0,274,285,265,275],
[279,285,259,277,0,293,277,265],
[280,253,266,266,258,0,292,272],
[273,268,286,286,274,259,0,263],
[289,263,288,276,286,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,294,267,262,270,284,285],
[256,0,294,277,260,261,270,276],
[257,257,0,276,253,263,274,269],
[284,274,275,0,264,272,251,270],
[289,291,298,287,0,277,274,272],
[281,290,288,279,274,0,287,274],
[267,281,277,300,277,264,0,275],
[266,275,282,281,279,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,269,302,264,291,321,278],
[265,0,280,263,276,284,269,275],
[282,271,0,270,288,296,315,262],
[249,288,281,0,265,290,304,279],
[287,275,263,286,0,285,295,281],
[260,267,255,261,266,0,287,275],
[230,282,236,247,256,264,0,240],
[273,276,289,272,270,276,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,239,251,234,236,272,267],
[324,0,269,262,257,270,318,300],
[312,282,0,274,257,280,299,312],
[300,289,277,0,273,275,326,315],
[317,294,294,278,0,270,302,302],
[315,281,271,276,281,0,313,313],
[279,233,252,225,249,238,0,239],
[284,251,239,236,249,238,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,244,276,276,257,280,267],
[278,0,263,267,281,282,283,304],
[307,288,0,276,264,298,294,271],
[275,284,275,0,264,276,312,327],
[275,270,287,287,0,298,278,316],
[294,269,253,275,253,0,281,280],
[271,268,257,239,273,270,0,289],
[284,247,280,224,235,271,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,262,265,282,274,281],
[277,0,285,295,293,290,269,294],
[276,266,0,266,270,284,287,255],
[289,256,285,0,283,290,279,293],
[286,258,281,268,0,274,276,285],
[269,261,267,261,277,0,290,286],
[277,282,264,272,275,261,0,280],
[270,257,296,258,266,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,245,276,257,259,263,265],
[281,0,244,272,266,276,264,271],
[306,307,0,306,268,326,284,288],
[275,279,245,0,284,275,269,284],
[294,285,283,267,0,264,273,283],
[292,275,225,276,287,0,272,276],
[288,287,267,282,278,279,0,281],
[286,280,263,267,268,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,292,278,283,271,279,284],
[293,0,281,269,253,266,266,277],
[259,270,0,263,238,275,266,287],
[273,282,288,0,261,261,250,263],
[268,298,313,290,0,266,270,309],
[280,285,276,290,285,0,274,282],
[272,285,285,301,281,277,0,294],
[267,274,264,288,242,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,214,192,168,170,300,157],
[353,0,356,364,271,350,290,381],
[337,195,0,285,229,291,210,272],
[359,187,266,0,187,307,294,265],
[383,280,322,364,0,268,356,329],
[381,201,260,244,283,0,340,285],
[251,261,341,257,195,211,0,234],
[394,170,279,286,222,266,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,265,265,285,285,283],
[261,0,297,260,273,275,293,274],
[267,254,0,244,257,262,271,285],
[286,291,307,0,281,276,274,276],
[286,278,294,270,0,287,274,272],
[266,276,289,275,264,0,273,275],
[266,258,280,277,277,278,0,279],
[268,277,266,275,279,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,248,275,223,263,229,251],
[300,0,278,288,256,287,258,274],
[303,273,0,265,275,291,264,275],
[276,263,286,0,280,281,257,273],
[328,295,276,271,0,285,261,290],
[288,264,260,270,266,0,240,262],
[322,293,287,294,290,311,0,275],
[300,277,276,278,261,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,311,333,359,317,319,273],
[223,0,302,289,301,260,281,248],
[240,249,0,279,277,253,249,251],
[218,262,272,0,300,262,257,246],
[192,250,274,251,0,291,246,246],
[234,291,298,289,260,0,285,292],
[232,270,302,294,305,266,0,258],
[278,303,300,305,305,259,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,259,236,267,258,270],
[282,0,262,283,266,270,280,285],
[294,289,0,277,272,258,267,285],
[292,268,274,0,263,278,290,296],
[315,285,279,288,0,270,288,292],
[284,281,293,273,281,0,276,302],
[293,271,284,261,263,275,0,282],
[281,266,266,255,259,249,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,300,260,283,284,270,297],
[283,0,291,269,279,261,272,285],
[251,260,0,255,275,258,259,276],
[291,282,296,0,291,269,270,290],
[268,272,276,260,0,267,259,297],
[267,290,293,282,284,0,277,283],
[281,279,292,281,292,274,0,283],
[254,266,275,261,254,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,277,276,259,283,264],
[288,0,279,275,272,293,285,288],
[281,272,0,269,268,283,272,260],
[274,276,282,0,288,292,287,271],
[275,279,283,263,0,276,279,274],
[292,258,268,259,275,0,277,280],
[268,266,279,264,272,274,0,272],
[287,263,291,280,277,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,278,278,249,282,264,283],
[323,0,266,300,295,291,246,306],
[273,285,0,302,238,288,239,296],
[273,251,249,0,264,244,230,265],
[302,256,313,287,0,312,284,323],
[269,260,263,307,239,0,227,281],
[287,305,312,321,267,324,0,338],
[268,245,255,286,228,270,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,300,291,296,303,299],
[285,0,291,300,277,274,293,297],
[288,260,0,291,277,279,286,289],
[251,251,260,0,271,256,248,281],
[260,274,274,280,0,258,281,294],
[255,277,272,295,293,0,281,287],
[248,258,265,303,270,270,0,277],
[252,254,262,270,257,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,269,284,285,285,289,269],
[272,0,267,267,278,251,273,265],
[282,284,0,277,278,264,272,276],
[267,284,274,0,260,280,286,261],
[266,273,273,291,0,293,279,264],
[266,300,287,271,258,0,277,268],
[262,278,279,265,272,274,0,262],
[282,286,275,290,287,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,250,292,276,291,272,254],
[283,0,278,266,278,296,290,271],
[301,273,0,285,295,301,281,285],
[259,285,266,0,271,270,270,263],
[275,273,256,280,0,293,296,258],
[260,255,250,281,258,0,262,246],
[279,261,270,281,255,289,0,266],
[297,280,266,288,293,305,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,270,265,270,271,281],
[268,0,259,259,253,266,261,273],
[285,292,0,262,264,249,283,274],
[281,292,289,0,263,269,258,266],
[286,298,287,288,0,281,268,272],
[281,285,302,282,270,0,273,279],
[280,290,268,293,283,278,0,282],
[270,278,277,285,279,272,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,278,231,313,247,264,280],
[321,0,237,250,333,278,315,266],
[273,314,0,277,296,287,348,273],
[320,301,274,0,340,276,315,240],
[238,218,255,211,0,232,274,239],
[304,273,264,275,319,0,296,275],
[287,236,203,236,277,255,0,211],
[271,285,278,311,312,276,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,314,289,323,270,245],
[275,0,317,289,291,300,312,292],
[274,234,0,246,246,318,250,234],
[237,262,305,0,302,356,320,307],
[262,260,305,249,0,306,283,262],
[228,251,233,195,245,0,284,252],
[281,239,301,231,268,267,0,237],
[306,259,317,244,289,299,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,266,344,301,235,296,215],
[249,0,325,314,239,226,252,318],
[285,226,0,373,293,294,216,214],
[207,237,178,0,223,204,208,176],
[250,312,258,328,0,258,244,215],
[316,325,257,347,293,0,285,296],
[255,299,335,343,307,266,0,244],
[336,233,337,375,336,255,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,263,284,279,260,269],
[276,0,270,252,253,261,271,256],
[287,281,0,273,296,316,263,279],
[288,299,278,0,292,273,281,266],
[267,298,255,259,0,290,255,262],
[272,290,235,278,261,0,260,275],
[291,280,288,270,296,291,0,269],
[282,295,272,285,289,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,263,287,286,285,303,295],
[260,0,276,277,285,271,291,261],
[288,275,0,304,291,273,299,271],
[264,274,247,0,271,269,288,288],
[265,266,260,280,0,261,277,272],
[266,280,278,282,290,0,314,269],
[248,260,252,263,274,237,0,251],
[256,290,280,263,279,282,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,190,302,270,246,251,194],
[269,0,162,261,247,197,196,162],
[361,389,0,363,262,268,257,316],
[249,290,188,0,238,253,298,224],
[281,304,289,313,0,247,275,345],
[305,354,283,298,304,0,265,339],
[300,355,294,253,276,286,0,244],
[357,389,235,327,206,212,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,307,280,268,281,286,323],
[243,0,223,245,191,205,251,196],
[244,328,0,294,290,270,279,272],
[271,306,257,0,271,289,274,281],
[283,360,261,280,0,295,305,263],
[270,346,281,262,256,0,273,306],
[265,300,272,277,246,278,0,283],
[228,355,279,270,288,245,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,280,295,286,296,272],
[267,0,253,278,291,299,287,281],
[282,298,0,290,292,281,276,275],
[271,273,261,0,287,280,284,264],
[256,260,259,264,0,275,279,252],
[265,252,270,271,276,0,275,263],
[255,264,275,267,272,276,0,270],
[279,270,276,287,299,288,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,361,551,104,294,361,361,551],
[190,0,548,291,291,291,450,551],
[0,3,0,104,294,101,260,450],
[447,260,447,0,551,358,450,450],
[257,260,257,0,0,257,260,260],
[190,260,450,193,294,0,450,450],
[190,101,291,101,291,101,0,548],
[0,0,101,101,291,101,3,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,269,269,251,254,265],
[276,0,268,262,281,265,296,287],
[291,283,0,264,257,250,255,278],
[282,289,287,0,275,297,262,299],
[282,270,294,276,0,294,296,307],
[300,286,301,254,257,0,245,291],
[297,255,296,289,255,306,0,280],
[286,264,273,252,244,260,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,137,118,166,168,129,224],
[405,0,298,257,224,281,250,306],
[414,253,0,236,364,299,282,301],
[433,294,315,0,331,334,251,370],
[385,327,187,220,0,248,293,312],
[383,270,252,217,303,0,219,279],
[422,301,269,300,258,332,0,315],
[327,245,250,181,239,272,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,286,268,286,269,255,272],
[289,0,280,269,284,276,278,294],
[265,271,0,258,299,240,252,276],
[283,282,293,0,298,271,265,292],
[265,267,252,253,0,266,244,255],
[282,275,311,280,285,0,251,281],
[296,273,299,286,307,300,0,300],
[279,257,275,259,296,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,264,256,274,266,271,263],
[291,0,279,268,288,292,280,294],
[287,272,0,279,288,293,279,267],
[295,283,272,0,302,287,267,274],
[277,263,263,249,0,271,255,282],
[285,259,258,264,280,0,283,260],
[280,271,272,284,296,268,0,282],
[288,257,284,277,269,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,312,319,290,259,297,278],
[291,0,314,326,278,251,283,294],
[239,237,0,272,264,229,255,268],
[232,225,279,0,247,244,251,272],
[261,273,287,304,0,278,311,315],
[292,300,322,307,273,0,303,303],
[254,268,296,300,240,248,0,304],
[273,257,283,279,236,248,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,264,259,277,274,272],
[266,0,288,262,252,261,273,260],
[278,263,0,275,271,266,276,266],
[287,289,276,0,274,272,277,275],
[292,299,280,277,0,275,280,280],
[274,290,285,279,276,0,276,280],
[277,278,275,274,271,275,0,277],
[279,291,285,276,271,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,264,253,244,307,254,249],
[302,0,300,258,223,246,241,255],
[287,251,0,276,238,264,258,248],
[298,293,275,0,221,277,291,282],
[307,328,313,330,0,297,264,306],
[244,305,287,274,254,0,291,261],
[297,310,293,260,287,260,0,271],
[302,296,303,269,245,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,270,291,269,272,277],
[281,0,264,248,287,240,285,273],
[269,287,0,264,281,256,291,268],
[281,303,287,0,274,276,281,299],
[260,264,270,277,0,278,295,266],
[282,311,295,275,273,0,301,287],
[279,266,260,270,256,250,0,249],
[274,278,283,252,285,264,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,308,273,290,277,307,266],
[301,0,305,268,277,259,303,302],
[243,246,0,266,285,249,250,263],
[278,283,285,0,279,263,289,279],
[261,274,266,272,0,269,255,260],
[274,292,302,288,282,0,310,306],
[244,248,301,262,296,241,0,282],
[285,249,288,272,291,245,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,287,265,222,254,275],
[292,0,286,284,286,283,286,270],
[263,265,0,308,290,269,274,296],
[264,267,243,0,260,250,259,269],
[286,265,261,291,0,241,259,295],
[329,268,282,301,310,0,275,287],
[297,265,277,292,292,276,0,276],
[276,281,255,282,256,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,267,261,264,271,253,257],
[309,0,302,281,289,295,275,278],
[284,249,0,254,268,264,265,271],
[290,270,297,0,300,291,270,290],
[287,262,283,251,0,273,266,273],
[280,256,287,260,278,0,269,273],
[298,276,286,281,285,282,0,273],
[294,273,280,261,278,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,282,280,285,279,288,262],
[263,0,291,282,281,261,258,280],
[269,260,0,281,269,252,267,264],
[271,269,270,0,284,244,270,248],
[266,270,282,267,0,256,275,243],
[272,290,299,307,295,0,298,282],
[263,293,284,281,276,253,0,290],
[289,271,287,303,308,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,308,324,292,315,274,307],
[269,0,269,208,271,289,274,290],
[243,282,0,242,268,245,293,312],
[227,343,309,0,241,285,294,298],
[259,280,283,310,0,276,294,286],
[236,262,306,266,275,0,272,277],
[277,277,258,257,257,279,0,233],
[244,261,239,253,265,274,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,263,224,274,252,273,261],
[270,0,275,222,305,275,283,247],
[288,276,0,246,263,279,314,282],
[327,329,305,0,273,289,317,280],
[277,246,288,278,0,291,301,240],
[299,276,272,262,260,0,269,260],
[278,268,237,234,250,282,0,229],
[290,304,269,271,311,291,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,284,279,278,284,278],
[277,0,250,272,261,275,279,242],
[281,301,0,277,261,290,281,260],
[267,279,274,0,274,289,291,280],
[272,290,290,277,0,273,269,279],
[273,276,261,262,278,0,261,267],
[267,272,270,260,282,290,0,276],
[273,309,291,271,272,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,198,257,237,260,177,260,219],
[353,0,321,280,286,260,283,288],
[294,230,0,296,244,236,258,267],
[314,271,255,0,295,262,260,308],
[291,265,307,256,0,268,241,276],
[374,291,315,289,283,0,259,303],
[291,268,293,291,310,292,0,325],
[332,263,284,243,275,248,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,292,274,295,312,295,284],
[273,0,284,279,293,312,296,295],
[259,267,0,266,289,278,263,269],
[277,272,285,0,288,303,278,280],
[256,258,262,263,0,278,261,256],
[239,239,273,248,273,0,256,252],
[256,255,288,273,290,295,0,276],
[267,256,282,271,295,299,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,294,290,277,295,268],
[256,0,254,274,276,267,264,260],
[277,297,0,296,272,275,288,274],
[257,277,255,0,261,242,240,274],
[261,275,279,290,0,270,287,275],
[274,284,276,309,281,0,278,288],
[256,287,263,311,264,273,0,264],
[283,291,277,277,276,263,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,287,271,273,257,279],
[282,0,289,286,298,278,272,291],
[278,262,0,289,283,275,271,289],
[264,265,262,0,274,265,261,288],
[280,253,268,277,0,248,243,264],
[278,273,276,286,303,0,282,291],
[294,279,280,290,308,269,0,276],
[272,260,262,263,287,260,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,410,354,287,251,298,326],
[236,0,196,203,148,271,220,127],
[141,355,0,290,134,201,134,63],
[197,348,261,0,270,205,261,163],
[264,403,417,281,0,326,252,289],
[300,280,350,346,225,0,341,275],
[253,331,417,290,299,210,0,367],
[225,424,488,388,262,276,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,270,259,265,245,265],
[289,0,271,269,265,278,264,275],
[287,280,0,300,260,257,258,267],
[281,282,251,0,269,280,264,266],
[292,286,291,282,0,243,266,289],
[286,273,294,271,308,0,286,296],
[306,287,293,287,285,265,0,296],
[286,276,284,285,262,255,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,285,288,264,323,305,277],
[295,0,296,291,238,320,263,290],
[266,255,0,265,224,304,258,249],
[263,260,286,0,210,301,210,261],
[287,313,327,341,0,336,337,271],
[228,231,247,250,215,0,244,238],
[246,288,293,341,214,307,0,244],
[274,261,302,290,280,313,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,297,260,271,270,282],
[265,0,268,288,263,269,271,266],
[266,283,0,275,269,257,256,269],
[254,263,276,0,255,259,250,249],
[291,288,282,296,0,288,271,281],
[280,282,294,292,263,0,269,284],
[281,280,295,301,280,282,0,271],
[269,285,282,302,270,267,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,269,264,284,268,256,257],
[266,0,272,277,276,268,266,279],
[282,279,0,272,287,266,266,272],
[287,274,279,0,279,278,271,266],
[267,275,264,272,0,268,261,269],
[283,283,285,273,283,0,277,271],
[295,285,285,280,290,274,0,285],
[294,272,279,285,282,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,291,311,285,287,318,247],
[254,0,258,247,249,251,287,277],
[260,293,0,245,238,273,262,255],
[240,304,306,0,253,257,255,241],
[266,302,313,298,0,285,273,249],
[264,300,278,294,266,0,280,271],
[233,264,289,296,278,271,0,259],
[304,274,296,310,302,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,309,292,258,284,320,302],
[274,0,333,337,317,317,300,331],
[242,218,0,274,254,175,212,258],
[259,214,277,0,193,208,250,243],
[293,234,297,358,0,271,216,303],
[267,234,376,343,280,0,335,370],
[231,251,339,301,335,216,0,292],
[249,220,293,308,248,181,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,266,254,270,264,276],
[277,0,264,273,261,281,274,248],
[278,287,0,289,276,258,295,268],
[285,278,262,0,259,270,273,252],
[297,290,275,292,0,296,321,275],
[281,270,293,281,255,0,294,285],
[287,277,256,278,230,257,0,249],
[275,303,283,299,276,266,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,285,281,291,267,290],
[281,0,290,282,277,288,292,269],
[297,261,0,255,300,280,243,296],
[266,269,296,0,278,277,247,283],
[270,274,251,273,0,284,259,273],
[260,263,271,274,267,0,288,286],
[284,259,308,304,292,263,0,236],
[261,282,255,268,278,265,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,289,266,272,275,291],
[277,0,275,263,254,270,282,290],
[273,276,0,262,251,267,271,270],
[262,288,289,0,273,281,277,284],
[285,297,300,278,0,279,278,269],
[279,281,284,270,272,0,277,286],
[276,269,280,274,273,274,0,286],
[260,261,281,267,282,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,306,267,330,282,300,357],
[241,0,273,231,280,275,233,316],
[245,278,0,236,251,259,255,289],
[284,320,315,0,329,329,263,361],
[221,271,300,222,0,286,230,325],
[269,276,292,222,265,0,224,334],
[251,318,296,288,321,327,0,342],
[194,235,262,190,226,217,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,252,280,230,250,237,340],
[309,0,332,340,249,331,253,365],
[299,219,0,235,205,253,287,263],
[271,211,316,0,258,181,298,335],
[321,302,346,293,0,324,268,315],
[301,220,298,370,227,0,319,294],
[314,298,264,253,283,232,0,471],
[211,186,288,216,236,257,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,266,295,277,291,302],
[273,0,282,278,289,272,278,281],
[278,269,0,269,276,270,273,275],
[285,273,282,0,288,283,271,299],
[256,262,275,263,0,267,274,265],
[274,279,281,268,284,0,285,286],
[260,273,278,280,277,266,0,271],
[249,270,276,252,286,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,276,298,333,291,252,277],
[319,0,337,324,353,270,324,247],
[275,214,0,257,343,265,298,226],
[253,227,294,0,364,287,263,291],
[218,198,208,187,0,188,193,224],
[260,281,286,264,363,0,267,255],
[299,227,253,288,358,284,0,258],
[274,304,325,260,327,296,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,272,269,254,292,284,274],
[245,0,244,255,237,253,224,252],
[279,307,0,255,301,267,261,295],
[282,296,296,0,259,257,238,274],
[297,314,250,292,0,275,259,265],
[259,298,284,294,276,0,238,271],
[267,327,290,313,292,313,0,284],
[277,299,256,277,286,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,262,272,285,273,261],
[268,0,295,286,286,299,279,275],
[280,256,0,272,264,283,240,259],
[289,265,279,0,262,266,265,262],
[279,265,287,289,0,285,290,278],
[266,252,268,285,266,0,289,264],
[278,272,311,286,261,262,0,263],
[290,276,292,289,273,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,286,275,286,285,280,277],
[269,0,289,272,278,293,275,292],
[265,262,0,279,279,285,270,286],
[276,279,272,0,273,278,257,288],
[265,273,272,278,0,295,280,271],
[266,258,266,273,256,0,258,278],
[271,276,281,294,271,293,0,291],
[274,259,265,263,280,273,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,256,315,286,271,292,284],
[277,0,207,274,229,249,228,248],
[295,344,0,325,272,273,279,287],
[236,277,226,0,270,229,211,261],
[265,322,279,281,0,237,210,240],
[280,302,278,322,314,0,240,240],
[259,323,272,340,341,311,0,301],
[267,303,264,290,311,311,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,238,270,237,221,228,230],
[329,0,315,311,295,278,249,296],
[313,236,0,306,252,254,256,249],
[281,240,245,0,250,243,238,227],
[314,256,299,301,0,279,277,249],
[330,273,297,308,272,0,263,285],
[323,302,295,313,274,288,0,275],
[321,255,302,324,302,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,267,272,268,278,281],
[275,0,278,272,283,273,271,259],
[278,273,0,261,293,267,283,263],
[284,279,290,0,298,280,279,272],
[279,268,258,253,0,251,258,262],
[283,278,284,271,300,0,274,275],
[273,280,268,272,293,277,0,268],
[270,292,288,279,289,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,283,215,258,236,246,285],
[310,0,287,302,273,280,311,266],
[268,264,0,261,264,233,260,263],
[336,249,290,0,306,279,284,320],
[293,278,287,245,0,210,300,307],
[315,271,318,272,341,0,273,336],
[305,240,291,267,251,278,0,278],
[266,285,288,231,244,215,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,297,324,314,315,267,274],
[228,0,274,211,264,242,269,230],
[254,277,0,236,247,279,273,236],
[227,340,315,0,292,309,305,293],
[237,287,304,259,0,302,302,296],
[236,309,272,242,249,0,278,259],
[284,282,278,246,249,273,0,275],
[277,321,315,258,255,292,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,280,267,274,288,275,284],
[265,0,260,255,262,275,284,273],
[271,291,0,266,283,275,284,279],
[284,296,285,0,268,281,271,276],
[277,289,268,283,0,293,299,280],
[263,276,276,270,258,0,256,264],
[276,267,267,280,252,295,0,269],
[267,278,272,275,271,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,281,286,306,249,289,294],
[257,0,273,268,297,255,303,262],
[270,278,0,329,306,285,320,276],
[265,283,222,0,271,238,286,282],
[245,254,245,280,0,256,287,258],
[302,296,266,313,295,0,298,275],
[262,248,231,265,264,253,0,251],
[257,289,275,269,293,276,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,290,289,296,281,293],
[271,0,279,259,279,278,281,296],
[280,272,0,280,286,299,296,295],
[261,292,271,0,282,299,278,287],
[262,272,265,269,0,284,273,281],
[255,273,252,252,267,0,248,269],
[270,270,255,273,278,303,0,286],
[258,255,256,264,270,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,298,280,305,304,320,275],
[248,0,256,269,279,269,264,261],
[253,295,0,274,320,308,291,276],
[271,282,277,0,293,276,290,272],
[246,272,231,258,0,267,285,233],
[247,282,243,275,284,0,258,239],
[231,287,260,261,266,293,0,248],
[276,290,275,279,318,312,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,250,227,223,281,238,267],
[257,0,243,180,213,204,233,242],
[301,308,0,304,241,250,282,331],
[324,371,247,0,279,280,262,304],
[328,338,310,272,0,257,345,273],
[270,347,301,271,294,0,321,270],
[313,318,269,289,206,230,0,257],
[284,309,220,247,278,281,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,278,276,275,294,281,278],
[273,0,275,264,276,282,270,280],
[273,276,0,283,285,275,271,271],
[275,287,268,0,290,283,273,286],
[276,275,266,261,0,282,277,267],
[257,269,276,268,269,0,260,277],
[270,281,280,278,274,291,0,276],
[273,271,280,265,284,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,300,289,323,252,352,304],
[246,0,237,262,270,214,259,222],
[251,314,0,280,331,189,305,284],
[262,289,271,0,316,276,298,282],
[228,281,220,235,0,215,275,226],
[299,337,362,275,336,0,359,275],
[199,292,246,253,276,192,0,275],
[247,329,267,269,325,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,260,265,280,293,269],
[261,0,262,239,276,269,285,243],
[284,289,0,262,288,278,307,283],
[291,312,289,0,305,286,294,269],
[286,275,263,246,0,265,284,272],
[271,282,273,265,286,0,294,275],
[258,266,244,257,267,257,0,267],
[282,308,268,282,279,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,258,260,277,280,268],
[277,0,278,252,257,276,249,261],
[280,273,0,264,276,283,273,260],
[293,299,287,0,265,271,246,264],
[291,294,275,286,0,309,278,284],
[274,275,268,280,242,0,273,249],
[271,302,278,305,273,278,0,277],
[283,290,291,287,267,302,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,267,282,253,319,206,279],
[253,0,266,229,244,271,278,230],
[284,285,0,252,335,308,350,316],
[269,322,299,0,262,294,284,305],
[298,307,216,289,0,277,298,265],
[232,280,243,257,274,0,233,248],
[345,273,201,267,253,318,0,276],
[272,321,235,246,286,303,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,265,258,274,278,283],
[265,0,292,291,243,286,304,270],
[265,259,0,262,249,258,278,250],
[286,260,289,0,265,257,269,268],
[293,308,302,286,0,269,300,263],
[277,265,293,294,282,0,305,258],
[273,247,273,282,251,246,0,258],
[268,281,301,283,288,293,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,275,240,258,251,256,314],
[257,0,243,260,247,244,269,285],
[276,308,0,286,283,301,269,304],
[311,291,265,0,269,271,284,296],
[293,304,268,282,0,296,257,303],
[300,307,250,280,255,0,323,300],
[295,282,282,267,294,228,0,280],
[237,266,247,255,248,251,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,270,302,272,286,283],
[263,0,272,265,298,274,278,273],
[280,279,0,276,304,259,287,277],
[281,286,275,0,307,271,281,282],
[249,253,247,244,0,260,253,259],
[279,277,292,280,291,0,274,295],
[265,273,264,270,298,277,0,274],
[268,278,274,269,292,256,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,294,302,316,295,299,252],
[277,0,287,285,299,269,296,250],
[257,264,0,269,284,256,288,262],
[249,266,282,0,290,252,273,246],
[235,252,267,261,0,270,249,240],
[256,282,295,299,281,0,256,253],
[252,255,263,278,302,295,0,287],
[299,301,289,305,311,298,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,273,272,260,262,284],
[282,0,264,270,271,280,275,283],
[288,287,0,281,272,275,284,274],
[278,281,270,0,280,272,276,293],
[279,280,279,271,0,278,272,289],
[291,271,276,279,273,0,270,282],
[289,276,267,275,279,281,0,283],
[267,268,277,258,262,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,354,320,268,289,285,254],
[266,0,295,349,240,242,210,243],
[197,256,0,288,239,281,241,257],
[231,202,263,0,229,233,212,200],
[283,311,312,322,0,273,302,279],
[262,309,270,318,278,0,251,265],
[266,341,310,339,249,300,0,254],
[297,308,294,351,272,286,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,304,294,285,293,274,288],
[226,0,258,263,262,272,247,241],
[247,293,0,255,310,280,275,257],
[257,288,296,0,273,262,288,258],
[266,289,241,278,0,237,232,250],
[258,279,271,289,314,0,272,255],
[277,304,276,263,319,279,0,250],
[263,310,294,293,301,296,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,305,279,301,303,289,273],
[273,0,335,289,301,291,306,264],
[246,216,0,229,275,238,289,270],
[272,262,322,0,297,280,273,270],
[250,250,276,254,0,277,275,250],
[248,260,313,271,274,0,261,289],
[262,245,262,278,276,290,0,252],
[278,287,281,281,301,262,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,291,261,314,295,281,288],
[268,0,273,246,260,281,266,265],
[260,278,0,244,299,288,271,268],
[290,305,307,0,302,288,282,272],
[237,291,252,249,0,251,250,235],
[256,270,263,263,300,0,269,250],
[270,285,280,269,301,282,0,274],
[263,286,283,279,316,301,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,278,268,275,266,297],
[289,0,279,276,271,279,282,302],
[274,272,0,280,266,271,280,281],
[273,275,271,0,271,268,271,284],
[283,280,285,280,0,271,286,290],
[276,272,280,283,280,0,279,283],
[285,269,271,280,265,272,0,311],
[254,249,270,267,261,268,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,342,267,369,284,307,201],
[277,0,289,219,342,159,305,254],
[209,262,0,198,232,222,228,117],
[284,332,353,0,360,158,354,265],
[182,209,319,191,0,197,254,220],
[267,392,329,393,354,0,379,323],
[244,246,323,197,297,172,0,260],
[350,297,434,286,331,228,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,281,269,269,284,278],
[281,0,288,275,278,264,277,277],
[274,263,0,290,289,279,288,280],
[270,276,261,0,266,261,257,259],
[282,273,262,285,0,263,262,261],
[282,287,272,290,288,0,295,292],
[267,274,263,294,289,256,0,267],
[273,274,271,292,290,259,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,315,295,308,257,257,286],
[222,0,260,198,281,162,213,257],
[236,291,0,273,234,243,252,275],
[256,353,278,0,300,303,268,286],
[243,270,317,251,0,262,234,250],
[294,389,308,248,289,0,275,299],
[294,338,299,283,317,276,0,263],
[265,294,276,265,301,252,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,247,280,312,283,283],
[264,0,265,285,280,322,260,278],
[274,286,0,250,266,301,231,257],
[304,266,301,0,272,283,248,278],
[271,271,285,279,0,263,264,240],
[239,229,250,268,288,0,265,247],
[268,291,320,303,287,286,0,271],
[268,273,294,273,311,304,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,283,298,271,283,285,295],
[251,0,259,274,257,268,271,279],
[268,292,0,284,289,268,305,282],
[253,277,267,0,272,271,284,284],
[280,294,262,279,0,271,289,280],
[268,283,283,280,280,0,290,276],
[266,280,246,267,262,261,0,282],
[256,272,269,267,271,275,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,285,292,303,275,289,271],
[264,0,259,254,292,251,279,283],
[266,292,0,271,280,252,280,252],
[259,297,280,0,285,294,286,283],
[248,259,271,266,0,251,272,267],
[276,300,299,257,300,0,304,291],
[262,272,271,265,279,247,0,274],
[280,268,299,268,284,260,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,328,287,290,296,285,260],
[202,0,275,241,233,258,245,248],
[223,276,0,280,264,253,258,262],
[264,310,271,0,276,277,262,277],
[261,318,287,275,0,297,277,321],
[255,293,298,274,254,0,245,291],
[266,306,293,289,274,306,0,287],
[291,303,289,274,230,260,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,275,254,250,252,225,241],
[336,0,297,277,266,266,288,274],
[276,254,0,256,242,292,251,261],
[297,274,295,0,277,272,258,279],
[301,285,309,274,0,289,286,286],
[299,285,259,279,262,0,272,294],
[326,263,300,293,265,279,0,262],
[310,277,290,272,265,257,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,278,204,283,275,302,291],
[224,0,177,213,245,245,320,234],
[273,374,0,224,261,276,364,253],
[347,338,327,0,277,321,381,267],
[268,306,290,274,0,225,382,270],
[276,306,275,230,326,0,367,282],
[249,231,187,170,169,184,0,237],
[260,317,298,284,281,269,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,273,263,257,262,264],
[293,0,279,266,270,274,275,291],
[279,272,0,272,286,278,277,281],
[278,285,279,0,291,276,267,270],
[288,281,265,260,0,291,274,277],
[294,277,273,275,260,0,265,281],
[289,276,274,284,277,286,0,274],
[287,260,270,281,274,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,256,255,263,279,262],
[279,0,266,247,269,257,273,273],
[285,285,0,281,276,299,273,278],
[295,304,270,0,284,294,280,295],
[296,282,275,267,0,289,299,279],
[288,294,252,257,262,0,282,277],
[272,278,278,271,252,269,0,259],
[289,278,273,256,272,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,275,263,290,263,279],
[263,0,273,277,279,292,263,260],
[279,278,0,269,280,303,271,241],
[276,274,282,0,286,285,291,276],
[288,272,271,265,0,290,253,273],
[261,259,248,266,261,0,263,253],
[288,288,280,260,298,288,0,272],
[272,291,310,275,278,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,292,271,247,261,302,270],
[260,0,276,270,268,279,311,280],
[259,275,0,291,280,293,278,279],
[280,281,260,0,279,268,291,280],
[304,283,271,272,0,262,297,289],
[290,272,258,283,289,0,307,274],
[249,240,273,260,254,244,0,256],
[281,271,272,271,262,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,298,282,286,277,307,306],
[276,0,282,279,274,278,291,279],
[253,269,0,264,293,271,301,276],
[269,272,287,0,313,293,296,298],
[265,277,258,238,0,267,282,266],
[274,273,280,258,284,0,289,274],
[244,260,250,255,269,262,0,276],
[245,272,275,253,285,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,273,283,284,275,295],
[270,0,286,279,291,296,275,295],
[279,265,0,274,283,281,271,275],
[278,272,277,0,295,287,279,285],
[268,260,268,256,0,269,261,288],
[267,255,270,264,282,0,254,274],
[276,276,280,272,290,297,0,291],
[256,256,276,266,263,277,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,293,323,304,290,266],
[270,0,318,272,289,280,268,263],
[264,233,0,267,256,221,234,248],
[258,279,284,0,275,273,278,288],
[228,262,295,276,0,280,253,284],
[247,271,330,278,271,0,264,315],
[261,283,317,273,298,287,0,277],
[285,288,303,263,267,236,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,286,286,295,295,254,317],
[247,0,262,257,219,227,211,269],
[265,289,0,269,254,274,251,283],
[265,294,282,0,255,245,225,296],
[256,332,297,296,0,280,281,312],
[256,324,277,306,271,0,274,279],
[297,340,300,326,270,277,0,323],
[234,282,268,255,239,272,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,304,409,390,239,320,318],
[295,0,231,260,247,267,245,282],
[247,320,0,379,328,248,243,382],
[142,291,172,0,280,200,193,213],
[161,304,223,271,0,192,283,331],
[312,284,303,351,359,0,238,304],
[231,306,308,358,268,313,0,352],
[233,269,169,338,220,247,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,254,281,256,289,275,292],
[265,0,262,305,265,290,265,285],
[297,289,0,302,269,299,282,285],
[270,246,249,0,259,292,264,263],
[295,286,282,292,0,293,269,284],
[262,261,252,259,258,0,264,261],
[276,286,269,287,282,287,0,278],
[259,266,266,288,267,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,280,266,258,269,288],
[284,0,276,279,273,273,290,293],
[283,275,0,273,270,270,288,290],
[271,272,278,0,276,264,281,273],
[285,278,281,275,0,278,283,296],
[293,278,281,287,273,0,295,281],
[282,261,263,270,268,256,0,279],
[263,258,261,278,255,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,272,272,270,286,260],
[278,0,270,282,269,275,280,277],
[272,281,0,281,289,284,273,274],
[279,269,270,0,276,275,280,289],
[279,282,262,275,0,277,277,273],
[281,276,267,276,274,0,289,279],
[265,271,278,271,274,262,0,271],
[291,274,277,262,278,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,262,249,288,253,217,267],
[248,0,246,205,153,232,209,221],
[289,305,0,281,267,343,276,334],
[302,346,270,0,287,305,256,315],
[263,398,284,264,0,308,270,278],
[298,319,208,246,243,0,246,306],
[334,342,275,295,281,305,0,300],
[284,330,217,236,273,245,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,282,259,271,259,280],
[271,0,285,278,269,269,272,280],
[273,266,0,276,257,253,286,273],
[269,273,275,0,262,268,276,265],
[292,282,294,289,0,270,283,282],
[280,282,298,283,281,0,286,269],
[292,279,265,275,268,265,0,283],
[271,271,278,286,269,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,278,271,264,281,260],
[279,0,283,282,282,267,286,277],
[269,268,0,283,286,267,298,272],
[273,269,268,0,269,267,282,260],
[280,269,265,282,0,256,298,271],
[287,284,284,284,295,0,308,272],
[270,265,253,269,253,243,0,262],
[291,274,279,291,280,279,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,245,273,246,254,239],
[274,0,260,259,281,245,263,267],
[289,291,0,268,270,262,277,275],
[306,292,283,0,273,272,282,303],
[278,270,281,278,0,277,288,253],
[305,306,289,279,274,0,272,272],
[297,288,274,269,263,279,0,260],
[312,284,276,248,298,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,218,232,278,219,275,281],
[281,0,215,275,249,261,283,256],
[333,336,0,259,311,245,307,361],
[319,276,292,0,246,273,338,324],
[273,302,240,305,0,288,281,337],
[332,290,306,278,263,0,334,278],
[276,268,244,213,270,217,0,326],
[270,295,190,227,214,273,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,285,281,264,273,262],
[287,0,283,284,272,257,281,295],
[282,268,0,284,271,274,271,284],
[266,267,267,0,264,268,271,273],
[270,279,280,287,0,267,279,283],
[287,294,277,283,284,0,270,277],
[278,270,280,280,272,281,0,273],
[289,256,267,278,268,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,241,278,261,251,258,267],
[286,0,277,271,289,267,266,278],
[310,274,0,283,287,285,262,274],
[273,280,268,0,275,268,271,272],
[290,262,264,276,0,268,275,271],
[300,284,266,283,283,0,281,282],
[293,285,289,280,276,270,0,266],
[284,273,277,279,280,269,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,278,285,275,261,277],
[279,0,291,286,303,271,264,290],
[264,260,0,264,269,253,262,272],
[273,265,287,0,303,289,274,280],
[266,248,282,248,0,257,248,260],
[276,280,298,262,294,0,280,293],
[290,287,289,277,303,271,0,286],
[274,261,279,271,291,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,264,326,301,440,222,296],
[220,0,210,354,340,302,246,195],
[287,341,0,337,289,369,309,253],
[225,197,214,0,209,287,270,141],
[250,211,262,342,0,404,178,249],
[111,249,182,264,147,0,164,120],
[329,305,242,281,373,387,0,248],
[255,356,298,410,302,431,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,291,272,260,270,258,280],
[257,0,266,267,265,250,272,256],
[260,285,0,286,259,263,282,264],
[279,284,265,0,272,263,276,258],
[291,286,292,279,0,279,295,275],
[281,301,288,288,272,0,302,276],
[293,279,269,275,256,249,0,264],
[271,295,287,293,276,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,301,287,280,281,258,292],
[278,0,245,316,226,276,268,234],
[250,306,0,335,257,300,291,256],
[264,235,216,0,240,254,246,221],
[271,325,294,311,0,277,258,262],
[270,275,251,297,274,0,251,255],
[293,283,260,305,293,300,0,262],
[259,317,295,330,289,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,257,276,284,299,296,229],
[255,0,241,272,271,268,233,191],
[294,310,0,304,277,268,256,282],
[275,279,247,0,235,266,248,219],
[267,280,274,316,0,288,280,259],
[252,283,283,285,263,0,264,236],
[255,318,295,303,271,287,0,262],
[322,360,269,332,292,315,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,276,300,274,269,301,309],
[304,0,275,313,287,284,288,303],
[275,276,0,281,277,261,310,279],
[251,238,270,0,236,255,273,264],
[277,264,274,315,0,313,305,289],
[282,267,290,296,238,0,295,274],
[250,263,241,278,246,256,0,276],
[242,248,272,287,262,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,277,303,249,268,276,220],
[290,0,266,317,319,302,299,277],
[274,285,0,286,239,266,289,284],
[248,234,265,0,281,266,272,232],
[302,232,312,270,0,291,288,266],
[283,249,285,285,260,0,279,236],
[275,252,262,279,263,272,0,269],
[331,274,267,319,285,315,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,266,283,269,261,270],
[272,0,257,262,278,278,254,270],
[278,294,0,274,279,279,279,268],
[285,289,277,0,261,269,268,282],
[268,273,272,290,0,275,261,278],
[282,273,272,282,276,0,268,272],
[290,297,272,283,290,283,0,293],
[281,281,283,269,273,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,275,286,282,276,285],
[266,0,278,275,290,268,272,275],
[285,273,0,284,287,302,289,280],
[276,276,267,0,280,286,261,272],
[265,261,264,271,0,280,265,270],
[269,283,249,265,271,0,275,269],
[275,279,262,290,286,276,0,276],
[266,276,271,279,281,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,257,294,289,306,265],
[282,0,274,282,269,348,298,296],
[273,277,0,260,281,297,272,263],
[294,269,291,0,243,317,267,293],
[257,282,270,308,0,308,308,291],
[262,203,254,234,243,0,257,228],
[245,253,279,284,243,294,0,262],
[286,255,288,258,260,323,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,289,284,279,282,301],
[266,0,281,269,296,273,274,271],
[280,270,0,279,291,270,271,264],
[262,282,272,0,275,275,273,276],
[267,255,260,276,0,269,270,275],
[272,278,281,276,282,0,261,268],
[269,277,280,278,281,290,0,278],
[250,280,287,275,276,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,283,266,266,258,243],
[283,0,288,281,282,276,271,279],
[282,263,0,278,270,273,256,255],
[268,270,273,0,263,271,270,251],
[285,269,281,288,0,276,271,258],
[285,275,278,280,275,0,272,264],
[293,280,295,281,280,279,0,256],
[308,272,296,300,293,287,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,269,292,296,297,304,283],
[236,0,243,256,245,239,254,226],
[282,308,0,298,296,268,297,266],
[259,295,253,0,258,266,282,254],
[255,306,255,293,0,261,282,267],
[254,312,283,285,290,0,293,275],
[247,297,254,269,269,258,0,253],
[268,325,285,297,284,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,223,321,313,335,306,304],
[236,0,239,268,271,239,245,292],
[328,312,0,315,336,318,223,306],
[230,283,236,0,316,266,252,268],
[238,280,215,235,0,299,246,303],
[216,312,233,285,252,0,211,271],
[245,306,328,299,305,340,0,336],
[247,259,245,283,248,280,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,297,293,276,302,268],
[269,0,264,280,283,275,298,273],
[263,287,0,287,295,285,294,272],
[254,271,264,0,276,308,281,279],
[258,268,256,275,0,285,266,250],
[275,276,266,243,266,0,269,271],
[249,253,257,270,285,282,0,249],
[283,278,279,272,301,280,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,170,267,239,235,236,205],
[289,0,237,348,333,308,282,315],
[381,314,0,353,346,264,271,264],
[284,203,198,0,234,167,200,276],
[312,218,205,317,0,179,261,294],
[316,243,287,384,372,0,302,260],
[315,269,280,351,290,249,0,290],
[346,236,287,275,257,291,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,330,343,282,270,283,287],
[265,0,292,374,280,278,274,297],
[221,259,0,372,269,176,287,273],
[208,177,179,0,214,141,268,222],
[269,271,282,337,0,215,280,293],
[281,273,375,410,336,0,329,277],
[268,277,264,283,271,222,0,231],
[264,254,278,329,258,274,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,302,310,240,274,300],
[278,0,270,264,309,284,250,290],
[257,281,0,274,308,250,282,301],
[249,287,277,0,316,259,280,281],
[241,242,243,235,0,234,239,236],
[311,267,301,292,317,0,279,299],
[277,301,269,271,312,272,0,280],
[251,261,250,270,315,252,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,260,265,272,276,270],
[276,0,260,267,247,246,258,254],
[278,291,0,279,274,259,278,280],
[291,284,272,0,271,262,289,295],
[286,304,277,280,0,269,273,284],
[279,305,292,289,282,0,297,269],
[275,293,273,262,278,254,0,273],
[281,297,271,256,267,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,262,278,269,261,256,261],
[294,0,257,264,275,255,263,268],
[289,294,0,265,275,264,291,273],
[273,287,286,0,277,282,278,281],
[282,276,276,274,0,265,286,272],
[290,296,287,269,286,0,287,286],
[295,288,260,273,265,264,0,256],
[290,283,278,270,279,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,282,280,292,316,259],
[275,0,275,271,255,302,296,283],
[267,276,0,273,261,286,272,263],
[269,280,278,0,271,300,287,276],
[271,296,290,280,0,284,293,268],
[259,249,265,251,267,0,276,251],
[235,255,279,264,258,275,0,247],
[292,268,288,275,283,300,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,258,253,260,294,263,264],
[298,0,282,276,292,351,263,292],
[293,269,0,292,274,299,220,251],
[298,275,259,0,262,326,252,277],
[291,259,277,289,0,317,247,301],
[257,200,252,225,234,0,219,254],
[288,288,331,299,304,332,0,265],
[287,259,300,274,250,297,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,251,270,263,280,282,280],
[263,0,273,266,255,278,285,273],
[300,278,0,290,275,278,297,289],
[281,285,261,0,278,272,286,279],
[288,296,276,273,0,287,287,276],
[271,273,273,279,264,0,256,284],
[269,266,254,265,264,295,0,268],
[271,278,262,272,275,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,325,311,331,254,276,326],
[217,0,302,302,259,289,223,243],
[226,249,0,285,252,235,265,241],
[240,249,266,0,236,229,238,208],
[220,292,299,315,0,262,266,307],
[297,262,316,322,289,0,306,309],
[275,328,286,313,285,245,0,291],
[225,308,310,343,244,242,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,227,316,270,241,279,274],
[306,0,256,315,275,290,300,300],
[324,295,0,326,279,296,303,267],
[235,236,225,0,258,226,253,256],
[281,276,272,293,0,301,288,253],
[310,261,255,325,250,0,291,260],
[272,251,248,298,263,260,0,282],
[277,251,284,295,298,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,240,272,255,264,233,262],
[296,0,276,300,272,284,263,287],
[311,275,0,305,289,286,285,301],
[279,251,246,0,261,257,266,263],
[296,279,262,290,0,295,268,285],
[287,267,265,294,256,0,246,284],
[318,288,266,285,283,305,0,291],
[289,264,250,288,266,267,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,302,256,258,239,376,315],
[197,0,223,227,205,220,219,233],
[249,328,0,271,283,235,371,277],
[295,324,280,0,263,281,318,281],
[293,346,268,288,0,245,332,259],
[312,331,316,270,306,0,351,319],
[175,332,180,233,219,200,0,200],
[236,318,274,270,292,232,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,300,282,298,306,298],
[276,0,293,296,290,305,274,278],
[261,258,0,282,275,268,262,283],
[251,255,269,0,270,282,287,273],
[269,261,276,281,0,276,263,277],
[253,246,283,269,275,0,264,281],
[245,277,289,264,288,287,0,296],
[253,273,268,278,274,270,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,244,253,270,270,289],
[247,0,251,246,247,252,243,276],
[272,300,0,245,246,265,275,260],
[307,305,306,0,267,287,279,295],
[298,304,305,284,0,280,271,295],
[281,299,286,264,271,0,274,278],
[281,308,276,272,280,277,0,293],
[262,275,291,256,256,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,298,260,263,265,293,290],
[283,0,314,282,309,274,288,279],
[253,237,0,259,264,242,279,248],
[291,269,292,0,273,286,281,271],
[288,242,287,278,0,281,276,265],
[286,277,309,265,270,0,304,267],
[258,263,272,270,275,247,0,276],
[261,272,303,280,286,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,280,261,290,278,259],
[279,0,288,278,267,304,291,294],
[266,263,0,264,250,260,253,252],
[271,273,287,0,279,305,279,283],
[290,284,301,272,0,278,266,282],
[261,247,291,246,273,0,274,278],
[273,260,298,272,285,277,0,266],
[292,257,299,268,269,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,294,315,285,301,307,255],
[281,0,251,286,256,272,328,253],
[257,300,0,283,281,278,322,278],
[236,265,268,0,257,226,303,256],
[266,295,270,294,0,255,294,230],
[250,279,273,325,296,0,298,272],
[244,223,229,248,257,253,0,226],
[296,298,273,295,321,279,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,358,319,253,290,307,213],
[304,0,357,321,382,249,376,328],
[193,194,0,259,230,209,305,207],
[232,230,292,0,284,275,302,304],
[298,169,321,267,0,339,313,207],
[261,302,342,276,212,0,294,240],
[244,175,246,249,238,257,0,190],
[338,223,344,247,344,311,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,280,281,279,275,280],
[280,0,273,287,273,269,274,291],
[281,278,0,260,271,260,258,266],
[271,264,291,0,264,254,265,301],
[270,278,280,287,0,271,276,282],
[272,282,291,297,280,0,280,284],
[276,277,293,286,275,271,0,309],
[271,260,285,250,269,267,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,261,268,270,263,270],
[272,0,275,266,268,268,266,270],
[286,276,0,275,276,272,268,268],
[290,285,276,0,263,278,262,280],
[283,283,275,288,0,275,265,279],
[281,283,279,273,276,0,282,281],
[288,285,283,289,286,269,0,269],
[281,281,283,271,272,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,291,264,274,271,285],
[272,0,289,294,282,273,293,301],
[262,262,0,287,268,270,279,281],
[260,257,264,0,254,253,276,288],
[287,269,283,297,0,290,288,295],
[277,278,281,298,261,0,278,286],
[280,258,272,275,263,273,0,288],
[266,250,270,263,256,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,286,222,260,157,312,155],
[180,0,134,193,240,202,225,162],
[265,417,0,297,320,223,315,318],
[329,358,254,0,328,323,317,355],
[291,311,231,223,0,225,262,194],
[394,349,328,228,326,0,317,259],
[239,326,236,234,289,234,0,235],
[396,389,233,196,357,292,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,304,257,278,321,255,274],
[258,0,311,276,281,325,285,287],
[247,240,0,239,262,288,243,267],
[294,275,312,0,263,324,286,275],
[273,270,289,288,0,330,277,295],
[230,226,263,227,221,0,235,230],
[296,266,308,265,274,316,0,281],
[277,264,284,276,256,321,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,274,242,262,242,270],
[284,0,294,261,290,272,249,320],
[282,257,0,266,270,280,265,284],
[277,290,285,0,257,298,269,304],
[309,261,281,294,0,266,285,315],
[289,279,271,253,285,0,225,311],
[309,302,286,282,266,326,0,330],
[281,231,267,247,236,240,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,259,273,270,283,291,281],
[295,0,308,275,272,298,290,284],
[292,243,0,263,254,290,289,292],
[278,276,288,0,287,270,282,265],
[281,279,297,264,0,296,279,272],
[268,253,261,281,255,0,259,242],
[260,261,262,269,272,292,0,275],
[270,267,259,286,279,309,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,274,282,257,267,271],
[298,0,292,285,298,266,285,273],
[282,259,0,292,288,276,287,295],
[277,266,259,0,252,282,256,289],
[269,253,263,299,0,272,284,279],
[294,285,275,269,279,0,286,277],
[284,266,264,295,267,265,0,305],
[280,278,256,262,272,274,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,275,264,274,273,267],
[289,0,273,267,283,292,269,261],
[291,278,0,271,277,283,275,278],
[276,284,280,0,284,273,275,281],
[287,268,274,267,0,277,278,275],
[277,259,268,278,274,0,276,269],
[278,282,276,276,273,275,0,271],
[284,290,273,270,276,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,274,259,292,281,284,283],
[259,0,252,246,267,275,263,259],
[277,299,0,257,283,294,275,278],
[292,305,294,0,283,295,270,285],
[259,284,268,268,0,279,257,273],
[270,276,257,256,272,0,267,264],
[267,288,276,281,294,284,0,283],
[268,292,273,266,278,287,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,273,275,262,256,260],
[271,0,294,261,285,267,270,253],
[279,257,0,275,275,260,257,273],
[278,290,276,0,278,286,261,285],
[276,266,276,273,0,277,265,267],
[289,284,291,265,274,0,271,280],
[295,281,294,290,286,280,0,267],
[291,298,278,266,284,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,267,281,287,285,301,293],
[254,0,260,264,279,272,273,292],
[284,291,0,273,290,276,270,296],
[270,287,278,0,283,289,274,301],
[264,272,261,268,0,271,273,281],
[266,279,275,262,280,0,271,289],
[250,278,281,277,278,280,0,286],
[258,259,255,250,270,262,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,256,272,281,264,262,260],
[292,0,288,277,271,287,283,274],
[295,263,0,290,278,278,276,283],
[279,274,261,0,286,258,281,266],
[270,280,273,265,0,266,272,273],
[287,264,273,293,285,0,285,276],
[289,268,275,270,279,266,0,271],
[291,277,268,285,278,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,266,277,289,291,284,277],
[243,0,239,250,259,265,232,261],
[285,312,0,260,287,291,291,277],
[274,301,291,0,308,284,300,310],
[262,292,264,243,0,275,278,299],
[260,286,260,267,276,0,273,300],
[267,319,260,251,273,278,0,298],
[274,290,274,241,252,251,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,273,279,295,274,305,289],
[249,0,265,251,288,253,277,255],
[278,286,0,271,289,283,288,268],
[272,300,280,0,327,274,301,302],
[256,263,262,224,0,245,264,217],
[277,298,268,277,306,0,290,278],
[246,274,263,250,287,261,0,262],
[262,296,283,249,334,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,293,297,297,300,278,286],
[276,0,288,289,271,292,267,285],
[258,263,0,268,262,270,251,268],
[254,262,283,0,274,280,253,271],
[254,280,289,277,0,301,267,274],
[251,259,281,271,250,0,258,263],
[273,284,300,298,284,293,0,276],
[265,266,283,280,277,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,257,249,279,310,269,253],
[301,0,286,248,290,314,292,275],
[294,265,0,259,292,311,300,276],
[302,303,292,0,289,316,283,256],
[272,261,259,262,0,287,274,270],
[241,237,240,235,264,0,255,229],
[282,259,251,268,277,296,0,258],
[298,276,275,295,281,322,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,218,264,295,285,281],
[265,0,330,200,289,349,278,309],
[275,221,0,223,309,312,173,226],
[333,351,328,0,322,320,275,304],
[287,262,242,229,0,267,240,238],
[256,202,239,231,284,0,178,252],
[266,273,378,276,311,373,0,284],
[270,242,325,247,313,299,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,305,242,264,294,272,310],
[235,0,265,284,266,304,250,304],
[246,286,0,260,268,284,271,306],
[309,267,291,0,265,304,295,288],
[287,285,283,286,0,319,252,311],
[257,247,267,247,232,0,258,301],
[279,301,280,256,299,293,0,324],
[241,247,245,263,240,250,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,190,300,275,278,407,363],
[319,0,300,377,240,361,326,294],
[361,251,0,309,366,309,346,228],
[251,174,242,0,294,257,329,257],
[276,311,185,257,0,298,342,235],
[273,190,242,294,253,0,303,365],
[144,225,205,222,209,248,0,205],
[188,257,323,294,316,186,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,311,292,269,284,298,272],
[285,0,314,285,284,274,291,282],
[240,237,0,261,257,253,256,245],
[259,266,290,0,261,252,272,245],
[282,267,294,290,0,276,302,271],
[267,277,298,299,275,0,279,262],
[253,260,295,279,249,272,0,258],
[279,269,306,306,280,289,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,192,190,323,273,194,353],
[380,0,249,253,318,275,254,300],
[359,302,0,290,374,273,283,335],
[361,298,261,0,439,303,323,394],
[228,233,177,112,0,239,193,261],
[278,276,278,248,312,0,229,355],
[357,297,268,228,358,322,0,330],
[198,251,216,157,290,196,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,267,248,279,258,230],
[292,0,284,268,271,271,304,279],
[296,267,0,313,284,290,293,262],
[284,283,238,0,278,259,286,248],
[303,280,267,273,0,296,271,283],
[272,280,261,292,255,0,281,238],
[293,247,258,265,280,270,0,263],
[321,272,289,303,268,313,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,130,221,91,91,248,221],
[460,0,195,368,157,173,330,195],
[421,356,0,486,183,356,421,221],
[330,183,65,0,248,356,421,221],
[460,394,368,303,0,173,421,221],
[460,378,195,195,378,0,378,286],
[303,221,130,130,130,173,0,130],
[330,356,330,330,330,265,421,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,291,297,269,319,311,296],
[264,0,274,243,284,285,268,291],
[260,277,0,260,247,282,260,269],
[254,308,291,0,265,286,289,317],
[282,267,304,286,0,304,278,282],
[232,266,269,265,247,0,286,256],
[240,283,291,262,273,265,0,287],
[255,260,282,234,269,295,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,303,271,320,295,289,299],
[269,0,294,230,279,291,258,278],
[248,257,0,264,277,275,278,276],
[280,321,287,0,306,270,277,292],
[231,272,274,245,0,272,236,265],
[256,260,276,281,279,0,246,251],
[262,293,273,274,315,305,0,309],
[252,273,275,259,286,300,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,297,261,265,274,281,260],
[264,0,266,244,259,246,268,269],
[254,285,0,270,284,255,275,277],
[290,307,281,0,280,295,294,263],
[286,292,267,271,0,262,264,254],
[277,305,296,256,289,0,262,271],
[270,283,276,257,287,289,0,258],
[291,282,274,288,297,280,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,255,245,240,259,263,246],
[286,0,281,257,262,279,246,267],
[296,270,0,279,266,282,258,271],
[306,294,272,0,263,280,286,282],
[311,289,285,288,0,274,277,270],
[292,272,269,271,277,0,268,271],
[288,305,293,265,274,283,0,269],
[305,284,280,269,281,280,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,295,275,266,285,286,293],
[256,0,268,277,261,267,279,286],
[256,283,0,291,271,288,287,294],
[276,274,260,0,276,278,281,281],
[285,290,280,275,0,283,293,300],
[266,284,263,273,268,0,289,294],
[265,272,264,270,258,262,0,287],
[258,265,257,270,251,257,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,420,287,290,249,175,301,248],
[131,0,156,342,153,204,218,273],
[264,395,0,244,168,208,260,252],
[261,209,307,0,230,304,290,288],
[302,398,383,321,0,271,413,317],
[376,347,343,247,280,0,296,308],
[250,333,291,261,138,255,0,298],
[303,278,299,263,234,243,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,264,277,266,281,281,262],
[253,0,262,251,254,271,262,265],
[287,289,0,280,279,299,280,274],
[274,300,271,0,258,284,264,284],
[285,297,272,293,0,294,275,285],
[270,280,252,267,257,0,270,267],
[270,289,271,287,276,281,0,289],
[289,286,277,267,266,284,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,276,278,267,273,290],
[270,0,271,248,277,271,257,277],
[280,280,0,265,270,279,281,269],
[275,303,286,0,286,295,287,289],
[273,274,281,265,0,297,274,281],
[284,280,272,256,254,0,264,268],
[278,294,270,264,277,287,0,282],
[261,274,282,262,270,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,275,279,293,279,289],
[262,0,263,281,285,274,281,282],
[274,288,0,274,271,273,286,295],
[276,270,277,0,272,273,260,279],
[272,266,280,279,0,277,268,280],
[258,277,278,278,274,0,276,297],
[272,270,265,291,283,275,0,305],
[262,269,256,272,271,254,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,303,285,284,269,269],
[274,0,295,291,278,272,286,280],
[301,256,0,286,287,280,255,262],
[248,260,265,0,275,273,260,269],
[266,273,264,276,0,248,265,261],
[267,279,271,278,303,0,280,281],
[282,265,296,291,286,271,0,272],
[282,271,289,282,290,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,314,288,292,273,291,293],
[259,0,284,275,280,292,260,301],
[237,267,0,291,262,253,238,278],
[263,276,260,0,260,275,242,279],
[259,271,289,291,0,279,253,300],
[278,259,298,276,272,0,255,296],
[260,291,313,309,298,296,0,312],
[258,250,273,272,251,255,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,283,269,289,282,268,275],
[292,0,289,288,272,293,278,280],
[268,262,0,287,301,268,270,253],
[282,263,264,0,256,272,271,263],
[262,279,250,295,0,262,258,271],
[269,258,283,279,289,0,263,269],
[283,273,281,280,293,288,0,280],
[276,271,298,288,280,282,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,239,297,228,253,323,304],
[234,0,240,203,237,214,285,211],
[312,311,0,257,265,214,304,250],
[254,348,294,0,322,254,330,294],
[323,314,286,229,0,245,308,260],
[298,337,337,297,306,0,323,271],
[228,266,247,221,243,228,0,232],
[247,340,301,257,291,280,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,285,271,274,294,291],
[274,0,257,282,274,257,300,257],
[275,294,0,294,285,295,320,293],
[266,269,257,0,279,260,268,268],
[280,277,266,272,0,263,282,292],
[277,294,256,291,288,0,285,268],
[257,251,231,283,269,266,0,262],
[260,294,258,283,259,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,293,271,280,269,277],
[297,0,303,293,277,280,270,286],
[268,248,0,289,261,282,270,277],
[258,258,262,0,262,270,265,255],
[280,274,290,289,0,294,277,277],
[271,271,269,281,257,0,254,268],
[282,281,281,286,274,297,0,281],
[274,265,274,296,274,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,265,285,267,315,303,283],
[256,0,271,282,249,292,300,269],
[286,280,0,279,285,292,288,275],
[266,269,272,0,246,289,301,275],
[284,302,266,305,0,300,299,278],
[236,259,259,262,251,0,254,261],
[248,251,263,250,252,297,0,269],
[268,282,276,276,273,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,287,242,303,307,264,278],
[275,0,286,296,297,276,271,307],
[264,265,0,254,254,275,269,259],
[309,255,297,0,306,293,293,269],
[248,254,297,245,0,261,231,258],
[244,275,276,258,290,0,257,252],
[287,280,282,258,320,294,0,278],
[273,244,292,282,293,299,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,269,277,294,264,302],
[273,0,264,277,271,288,256,279],
[282,287,0,279,283,281,265,321],
[282,274,272,0,283,284,278,304],
[274,280,268,268,0,283,255,281],
[257,263,270,267,268,0,267,290],
[287,295,286,273,296,284,0,311],
[249,272,230,247,270,261,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,270,273,274,271,279,266],
[266,0,278,297,268,283,284,267],
[281,273,0,282,272,271,289,286],
[278,254,269,0,252,286,284,288],
[277,283,279,299,0,266,274,279],
[280,268,280,265,285,0,269,278],
[272,267,262,267,277,282,0,271],
[285,284,265,263,272,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,252,270,296,276,322],
[269,0,238,278,265,289,259,269],
[281,313,0,286,275,301,266,325],
[299,273,265,0,298,296,266,286],
[281,286,276,253,0,293,298,303],
[255,262,250,255,258,0,248,299],
[275,292,285,285,253,303,0,300],
[229,282,226,265,248,252,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,281,298,282,273,282],
[274,0,274,259,284,273,275,260],
[280,277,0,274,290,281,278,273],
[270,292,277,0,281,277,278,285],
[253,267,261,270,0,264,279,249],
[269,278,270,274,287,0,280,281],
[278,276,273,273,272,271,0,265],
[269,291,278,266,302,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,293,263,282,299,280,256],
[263,0,244,262,274,265,283,279],
[258,307,0,291,312,294,275,264],
[288,289,260,0,297,295,279,251],
[269,277,239,254,0,260,262,242],
[252,286,257,256,291,0,264,261],
[271,268,276,272,289,287,0,265],
[295,272,287,300,309,290,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,291,306,282,289,324],
[284,0,282,274,279,278,277,308],
[278,269,0,283,289,275,281,290],
[260,277,268,0,266,284,291,297],
[245,272,262,285,0,277,260,281],
[269,273,276,267,274,0,268,283],
[262,274,270,260,291,283,0,284],
[227,243,261,254,270,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,282,274,285,272,243,273],
[289,0,260,263,284,266,264,277],
[269,291,0,299,283,289,285,272],
[277,288,252,0,264,259,264,260],
[266,267,268,287,0,263,245,271],
[279,285,262,292,288,0,275,245],
[308,287,266,287,306,276,0,253],
[278,274,279,291,280,306,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,252,274,278,261,290,254],
[257,0,242,271,261,241,274,247],
[299,309,0,283,299,274,298,291],
[277,280,268,0,303,278,279,255],
[273,290,252,248,0,279,294,281],
[290,310,277,273,272,0,282,290],
[261,277,253,272,257,269,0,258],
[297,304,260,296,270,261,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,268,244,270,252,228],
[267,0,260,286,270,279,268,252],
[279,291,0,280,265,254,267,236],
[283,265,271,0,280,265,270,259],
[307,281,286,271,0,276,294,276],
[281,272,297,286,275,0,283,265],
[299,283,284,281,257,268,0,262],
[323,299,315,292,275,286,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,319,311,283,269,314,320],
[255,0,278,276,239,268,265,285],
[232,273,0,281,255,247,252,266],
[240,275,270,0,240,269,266,284],
[268,312,296,311,0,295,301,312],
[282,283,304,282,256,0,276,286],
[237,286,299,285,250,275,0,282],
[231,266,285,267,239,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,262,268,307,294,280,264],
[315,0,287,300,303,270,276,282],
[289,264,0,252,303,275,258,285],
[283,251,299,0,276,255,260,283],
[244,248,248,275,0,257,268,249],
[257,281,276,296,294,0,267,281],
[271,275,293,291,283,284,0,299],
[287,269,266,268,302,270,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,252,230,254,267,236,234],
[306,0,276,255,295,273,286,279],
[299,275,0,254,293,281,286,280],
[321,296,297,0,303,288,265,298],
[297,256,258,248,0,248,248,248],
[284,278,270,263,303,0,274,251],
[315,265,265,286,303,277,0,278],
[317,272,271,253,303,300,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,276,267,285,270,290],
[270,0,300,286,285,335,273,263],
[274,251,0,281,262,285,263,283],
[275,265,270,0,268,281,295,303],
[284,266,289,283,0,296,283,285],
[266,216,266,270,255,0,248,251],
[281,278,288,256,268,303,0,281],
[261,288,268,248,266,300,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,281,251,267,276,259],
[262,0,270,256,247,261,269,240],
[275,281,0,266,240,267,269,256],
[270,295,285,0,277,280,309,290],
[300,304,311,274,0,274,287,272],
[284,290,284,271,277,0,290,283],
[275,282,282,242,264,261,0,251],
[292,311,295,261,279,268,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,267,285,252,272,286],
[279,0,271,276,282,260,283,267],
[277,280,0,248,287,257,282,276],
[284,275,303,0,320,288,302,278],
[266,269,264,231,0,241,263,271],
[299,291,294,263,310,0,286,289],
[279,268,269,249,288,265,0,270],
[265,284,275,273,280,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,248,231,243,241,279,256],
[293,0,251,263,271,248,297,273],
[303,300,0,251,277,293,303,308],
[320,288,300,0,261,265,294,296],
[308,280,274,290,0,283,303,276],
[310,303,258,286,268,0,303,293],
[272,254,248,257,248,248,0,272],
[295,278,243,255,275,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,261,246,281,271,259,283],
[268,0,244,265,243,238,264,273],
[290,307,0,259,279,253,252,284],
[305,286,292,0,286,241,253,259],
[270,308,272,265,0,259,288,303],
[280,313,298,310,292,0,269,296],
[292,287,299,298,263,282,0,294],
[268,278,267,292,248,255,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,289,273,268,267,267],
[291,0,289,302,274,307,276,284],
[279,262,0,286,263,271,263,281],
[262,249,265,0,253,250,260,267],
[278,277,288,298,0,269,274,273],
[283,244,280,301,282,0,260,253],
[284,275,288,291,277,291,0,282],
[284,267,270,284,278,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,282,252,234,258,286],
[305,0,273,300,273,278,293,278],
[302,278,0,275,273,258,289,289],
[269,251,276,0,268,255,265,282],
[299,278,278,283,0,256,291,303],
[317,273,293,296,295,0,312,289],
[293,258,262,286,260,239,0,275],
[265,273,262,269,248,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,254,292,264,258,282,264],
[269,0,291,308,286,279,301,267],
[297,260,0,306,254,258,281,264],
[259,243,245,0,260,245,269,248],
[287,265,297,291,0,283,302,278],
[293,272,293,306,268,0,285,286],
[269,250,270,282,249,266,0,255],
[287,284,287,303,273,265,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,287,287,425,425,161,126],
[287,0,287,287,425,425,161,287],
[264,264,0,425,264,425,425,264],
[264,264,126,0,264,264,161,0],
[126,126,287,287,0,551,161,126],
[126,126,126,287,0,0,161,126],
[390,390,126,390,390,390,0,126],
[425,264,287,551,425,425,425,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,267,246,266,285,292],
[259,0,235,276,253,256,272,263],
[276,316,0,279,265,291,316,297],
[284,275,272,0,250,272,301,295],
[305,298,286,301,0,259,296,311],
[285,295,260,279,292,0,314,296],
[266,279,235,250,255,237,0,269],
[259,288,254,256,240,255,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,333,316,330,218,305,374],
[139,0,184,161,218,143,225,75],
[218,367,0,250,365,253,188,232],
[235,390,301,0,312,307,270,209],
[221,333,186,239,0,237,169,166],
[333,408,298,244,314,0,305,285],
[246,326,363,281,382,246,0,194],
[177,476,319,342,385,266,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,249,255,243,273,263,243],
[302,0,301,276,298,297,302,272],
[302,250,0,257,290,283,282,261],
[296,275,294,0,280,292,288,278],
[308,253,261,271,0,281,288,270],
[278,254,268,259,270,0,241,264],
[288,249,269,263,263,310,0,278],
[308,279,290,273,281,287,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,272,282,279,289,283,278],
[271,0,277,295,294,286,292,280],
[279,274,0,284,287,275,276,259],
[269,256,267,0,275,271,271,270],
[272,257,264,276,0,269,263,277],
[262,265,276,280,282,0,276,280],
[268,259,275,280,288,275,0,252],
[273,271,292,281,274,271,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,308,241,263,241,291,295],
[335,0,289,340,309,257,342,333],
[243,262,0,306,209,199,271,295],
[310,211,245,0,197,254,263,256],
[288,242,342,354,0,266,336,347],
[310,294,352,297,285,0,316,264],
[260,209,280,288,215,235,0,246],
[256,218,256,295,204,287,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,325,271,303,311,282,270],
[259,0,327,267,298,277,262,265],
[226,224,0,244,285,266,217,226],
[280,284,307,0,285,297,257,291],
[248,253,266,266,0,265,236,245],
[240,274,285,254,286,0,254,244],
[269,289,334,294,315,297,0,285],
[281,286,325,260,306,307,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,243,256,244,256,299,251],
[296,0,270,277,272,264,294,284],
[308,281,0,277,256,275,309,270],
[295,274,274,0,263,284,297,275],
[307,279,295,288,0,267,299,278],
[295,287,276,267,284,0,296,250],
[252,257,242,254,252,255,0,265],
[300,267,281,276,273,301,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,260,258,271,288,241],
[265,0,257,270,247,268,293,256],
[281,294,0,286,278,286,289,268],
[291,281,265,0,240,259,270,253],
[293,304,273,311,0,294,283,283],
[280,283,265,292,257,0,294,251],
[263,258,262,281,268,257,0,262],
[310,295,283,298,268,300,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,305,276,270,296,272],
[279,0,264,278,260,250,280,274],
[268,287,0,292,269,269,292,263],
[246,273,259,0,265,277,272,253],
[275,291,282,286,0,289,288,299],
[281,301,282,274,262,0,290,245],
[255,271,259,279,263,261,0,268],
[279,277,288,298,252,306,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,260,259,273,302,263],
[272,0,295,248,254,263,286,284],
[258,256,0,247,211,224,259,251],
[291,303,304,0,252,290,274,304],
[292,297,340,299,0,303,307,266],
[278,288,327,261,248,0,293,275],
[249,265,292,277,244,258,0,253],
[288,267,300,247,285,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,250,254,296,278,242,311],
[298,0,252,281,300,285,274,297],
[301,299,0,266,308,247,279,289],
[297,270,285,0,271,273,261,267],
[255,251,243,280,0,244,256,254],
[273,266,304,278,307,0,279,314],
[309,277,272,290,295,272,0,311],
[240,254,262,284,297,237,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,258,276,276,268,280],
[291,0,271,236,272,299,292,289],
[285,280,0,279,264,276,281,296],
[293,315,272,0,294,327,323,317],
[275,279,287,257,0,296,304,290],
[275,252,275,224,255,0,271,260],
[283,259,270,228,247,280,0,277],
[271,262,255,234,261,291,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,299,280,281,270,292,265],
[246,0,337,274,273,266,266,287],
[252,214,0,252,250,242,259,249],
[271,277,299,0,296,282,280,265],
[270,278,301,255,0,293,292,255],
[281,285,309,269,258,0,279,280],
[259,285,292,271,259,272,0,285],
[286,264,302,286,296,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,295,244,300,270,290,278],
[269,0,249,256,261,273,260,219],
[256,302,0,264,287,282,302,255],
[307,295,287,0,293,264,301,285],
[251,290,264,258,0,248,285,258],
[281,278,269,287,303,0,281,289],
[261,291,249,250,266,270,0,244],
[273,332,296,266,293,262,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,250,272,343,268,279,253],
[272,0,297,304,330,280,281,254],
[301,254,0,303,300,246,285,279],
[279,247,248,0,321,289,268,228],
[208,221,251,230,0,237,242,214],
[283,271,305,262,314,0,259,226],
[272,270,266,283,309,292,0,302],
[298,297,272,323,337,325,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,261,308,299,290,238,343],
[244,0,275,268,238,220,250,286],
[290,276,0,246,294,275,287,268],
[243,283,305,0,264,260,286,275],
[252,313,257,287,0,249,271,314],
[261,331,276,291,302,0,288,278],
[313,301,264,265,280,263,0,283],
[208,265,283,276,237,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,270,280,265,266,282],
[263,0,262,307,269,225,280,263],
[273,289,0,226,334,295,254,299],
[281,244,325,0,283,276,297,326],
[271,282,217,268,0,248,213,280],
[286,326,256,275,303,0,237,316],
[285,271,297,254,338,314,0,324],
[269,288,252,225,271,235,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,290,283,303,275,273],
[299,0,295,280,296,316,285,274],
[277,256,0,262,285,291,281,259],
[261,271,289,0,289,299,272,281],
[268,255,266,262,0,291,289,251],
[248,235,260,252,260,0,260,265],
[276,266,270,279,262,291,0,267],
[278,277,292,270,300,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,309,299,270,280,282,289],
[236,0,238,256,239,243,247,258],
[242,313,0,290,284,283,278,263],
[252,295,261,0,262,274,260,275],
[281,312,267,289,0,277,265,273],
[271,308,268,277,274,0,258,246],
[269,304,273,291,286,293,0,279],
[262,293,288,276,278,305,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,246,257,224,268,273,235],
[286,0,266,261,277,302,332,286],
[305,285,0,266,244,269,310,275],
[294,290,285,0,272,288,294,286],
[327,274,307,279,0,277,326,313],
[283,249,282,263,274,0,270,235],
[278,219,241,257,225,281,0,257],
[316,265,276,265,238,316,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,262,278,243,255,249,268],
[299,0,297,273,284,290,306,311],
[289,254,0,285,256,287,279,259],
[273,278,266,0,271,280,273,256],
[308,267,295,280,0,294,291,284],
[296,261,264,271,257,0,301,292],
[302,245,272,278,260,250,0,264],
[283,240,292,295,267,259,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,274,290,275,251,286,281],
[288,0,254,287,284,274,298,290],
[277,297,0,312,266,282,310,283],
[261,264,239,0,283,277,298,265],
[276,267,285,268,0,261,293,292],
[300,277,269,274,290,0,283,264],
[265,253,241,253,258,268,0,261],
[270,261,268,286,259,287,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,278,293,270,265,278],
[274,0,275,279,279,267,289,274],
[259,276,0,259,261,249,245,250],
[273,272,292,0,283,261,280,271],
[258,272,290,268,0,274,278,265],
[281,284,302,290,277,0,273,284],
[286,262,306,271,273,278,0,265],
[273,277,301,280,286,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,260,256,294,265,284],
[284,0,275,258,273,281,282,279],
[281,276,0,263,248,294,258,279],
[291,293,288,0,276,297,270,278],
[295,278,303,275,0,306,274,288],
[257,270,257,254,245,0,259,265],
[286,269,293,281,277,292,0,281],
[267,272,272,273,263,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,274,268,262,249,272],
[270,0,266,281,285,266,265,287],
[281,285,0,289,283,278,263,286],
[277,270,262,0,271,272,271,282],
[283,266,268,280,0,269,262,287],
[289,285,273,279,282,0,283,302],
[302,286,288,280,289,268,0,296],
[279,264,265,269,264,249,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,287,307,261,274,254,308],
[268,0,323,282,251,272,256,304],
[264,228,0,276,233,267,264,269],
[244,269,275,0,243,275,230,269],
[290,300,318,308,0,264,289,323],
[277,279,284,276,287,0,257,300],
[297,295,287,321,262,294,0,309],
[243,247,282,282,228,251,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,259,272,288,284,279,291],
[274,0,267,266,282,264,273,266],
[292,284,0,267,297,286,285,284],
[279,285,284,0,285,290,273,269],
[263,269,254,266,0,260,254,256],
[267,287,265,261,291,0,262,266],
[272,278,266,278,297,289,0,283],
[260,285,267,282,295,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,301,285,288,275,285,303],
[265,0,298,286,285,277,264,331],
[250,253,0,248,256,272,285,292],
[266,265,303,0,275,283,284,305],
[263,266,295,276,0,288,272,296],
[276,274,279,268,263,0,277,291],
[266,287,266,267,279,274,0,296],
[248,220,259,246,255,260,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,273,277,286,289,300],
[270,0,285,284,290,277,276,265],
[265,266,0,280,279,278,278,274],
[278,267,271,0,275,270,268,276],
[274,261,272,276,0,286,281,278],
[265,274,273,281,265,0,285,291],
[262,275,273,283,270,266,0,283],
[251,286,277,275,273,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,290,287,270,274,286,278],
[241,0,247,264,252,251,257,243],
[261,304,0,296,259,281,270,289],
[264,287,255,0,256,267,267,291],
[281,299,292,295,0,269,288,283],
[277,300,270,284,282,0,260,282],
[265,294,281,284,263,291,0,275],
[273,308,262,260,268,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,269,284,273,273,291],
[282,0,272,267,285,283,268,302],
[260,279,0,285,270,255,271,295],
[282,284,266,0,261,260,261,284],
[267,266,281,290,0,257,277,290],
[278,268,296,291,294,0,280,292],
[278,283,280,290,274,271,0,262],
[260,249,256,267,261,259,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,262,277,254,250,251,285],
[273,0,296,255,273,292,283,293],
[289,255,0,250,256,282,318,265],
[274,296,301,0,285,262,300,303],
[297,278,295,266,0,289,311,286],
[301,259,269,289,262,0,285,284],
[300,268,233,251,240,266,0,265],
[266,258,286,248,265,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,274,283,283,280,298],
[263,0,283,270,266,255,274,266],
[271,268,0,301,269,271,270,281],
[277,281,250,0,269,286,287,285],
[268,285,282,282,0,283,272,287],
[268,296,280,265,268,0,278,278],
[271,277,281,264,279,273,0,271],
[253,285,270,266,264,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,310,300,278,242,298,275],
[298,0,301,268,251,283,275,267],
[241,250,0,255,273,267,256,250],
[251,283,296,0,271,288,291,288],
[273,300,278,280,0,300,281,284],
[309,268,284,263,251,0,266,271],
[253,276,295,260,270,285,0,261],
[276,284,301,263,267,280,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,286,294,275,271,284,284],
[292,0,292,290,269,267,300,290],
[265,259,0,283,255,257,286,296],
[257,261,268,0,284,257,283,291],
[276,282,296,267,0,279,265,308],
[280,284,294,294,272,0,286,288],
[267,251,265,268,286,265,0,299],
[267,261,255,260,243,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,276,271,267,296,308],
[272,0,283,277,278,290,305,297],
[286,268,0,304,302,284,292,297],
[275,274,247,0,229,252,277,263],
[280,273,249,322,0,263,315,293],
[284,261,267,299,288,0,313,307],
[255,246,259,274,236,238,0,255],
[243,254,254,288,258,244,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,286,274,281,284,276,278],
[256,0,252,252,265,259,257,254],
[265,299,0,284,275,276,278,272],
[277,299,267,0,289,259,276,269],
[270,286,276,262,0,273,270,263],
[267,292,275,292,278,0,279,281],
[275,294,273,275,281,272,0,286],
[273,297,279,282,288,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,285,262,270,287,289],
[259,0,268,277,258,254,239,265],
[271,283,0,270,264,254,275,269],
[266,274,281,0,297,276,280,298],
[289,293,287,254,0,263,286,288],
[281,297,297,275,288,0,281,287],
[264,312,276,271,265,270,0,292],
[262,286,282,253,263,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,264,273,279,275,293,268],
[263,0,273,260,263,268,286,267],
[287,278,0,264,277,277,303,280],
[278,291,287,0,272,261,294,279],
[272,288,274,279,0,268,307,278],
[276,283,274,290,283,0,305,286],
[258,265,248,257,244,246,0,246],
[283,284,271,272,273,265,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,281,277,269,282,277],
[278,0,252,296,282,276,261,282],
[275,299,0,291,293,292,277,289],
[270,255,260,0,285,256,281,269],
[274,269,258,266,0,272,281,271],
[282,275,259,295,279,0,269,276],
[269,290,274,270,270,282,0,302],
[274,269,262,282,280,275,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,294,243,220,206,230,324],
[283,0,286,236,340,237,284,390],
[257,265,0,169,271,228,157,278],
[308,315,382,0,316,258,304,397],
[331,211,280,235,0,251,243,316],
[345,314,323,293,300,0,246,346],
[321,267,394,247,308,305,0,399],
[227,161,273,154,235,205,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,277,259,277,195,149,225],
[303,0,196,107,259,143,160,225],
[274,355,0,206,288,206,178,196],
[292,444,345,0,455,292,178,363],
[274,292,263,96,0,125,178,196],
[356,408,345,259,426,0,327,356],
[402,391,373,373,373,224,0,306],
[326,326,355,188,355,195,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,300,295,291,282,265,288],
[293,0,280,284,289,263,261,257],
[251,271,0,275,275,270,282,294],
[256,267,276,0,279,274,253,264],
[260,262,276,272,0,289,271,267],
[269,288,281,277,262,0,252,268],
[286,290,269,298,280,299,0,294],
[263,294,257,287,284,283,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,357,235,297,195,230,225],
[292,0,342,290,219,303,353,231],
[194,209,0,253,259,237,219,236],
[316,261,298,0,323,283,246,236],
[254,332,292,228,0,224,262,266],
[356,248,314,268,327,0,346,319],
[321,198,332,305,289,205,0,331],
[326,320,315,315,285,232,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,302,315,290,292,283,285],
[298,0,296,309,263,282,296,286],
[249,255,0,300,271,288,297,277],
[236,242,251,0,264,258,233,245],
[261,288,280,287,0,288,283,274],
[259,269,263,293,263,0,279,253],
[268,255,254,318,268,272,0,246],
[266,265,274,306,277,298,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,292,291,288,261,287,290],
[281,0,296,276,264,270,283,293],
[259,255,0,270,270,245,275,271],
[260,275,281,0,266,279,271,285],
[263,287,281,285,0,267,294,280],
[290,281,306,272,284,0,302,286],
[264,268,276,280,257,249,0,271],
[261,258,280,266,271,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,234,260,239,264,267,254],
[274,0,258,281,267,271,278,248],
[317,293,0,303,267,285,295,274],
[291,270,248,0,254,261,274,251],
[312,284,284,297,0,308,316,274],
[287,280,266,290,243,0,268,280],
[284,273,256,277,235,283,0,250],
[297,303,277,300,277,271,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,323,244,317,300,282],
[263,0,297,290,316,302,299,357],
[277,254,0,330,293,319,325,290],
[228,261,221,0,270,288,315,330],
[307,235,258,281,0,316,317,321],
[234,249,232,263,235,0,299,304],
[251,252,226,236,234,252,0,298],
[269,194,261,221,230,247,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,285,307,260,283,265],
[247,0,272,261,309,261,269,300],
[272,279,0,276,307,279,252,264],
[266,290,275,0,313,269,298,299],
[244,242,244,238,0,212,262,249],
[291,290,272,282,339,0,281,276],
[268,282,299,253,289,270,0,246],
[286,251,287,252,302,275,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,255,287,262,220,255,303],
[365,0,233,219,209,200,231,236],
[296,318,0,291,324,277,302,249],
[264,332,260,0,349,291,265,231],
[289,342,227,202,0,271,195,279],
[331,351,274,260,280,0,259,252],
[296,320,249,286,356,292,0,344],
[248,315,302,320,272,299,207,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,249,206,245,97,133,178],
[352,0,342,319,394,249,293,301],
[302,209,0,181,287,150,205,254],
[345,232,370,0,292,266,209,310],
[306,157,264,259,0,205,212,223],
[454,302,401,285,346,0,247,403],
[418,258,346,342,339,304,0,353],
[373,250,297,241,328,148,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,281,265,271,289,288],
[261,0,292,268,275,277,281,283],
[261,259,0,256,252,271,282,258],
[270,283,295,0,286,267,290,293],
[286,276,299,265,0,278,281,282],
[280,274,280,284,273,0,279,278],
[262,270,269,261,270,272,0,274],
[263,268,293,258,269,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,268,269,260,258,280],
[276,0,272,282,277,268,271,281],
[271,279,0,294,284,268,269,291],
[283,269,257,0,269,248,267,274],
[282,274,267,282,0,268,285,287],
[291,283,283,303,283,0,269,280],
[293,280,282,284,266,282,0,297],
[271,270,260,277,264,271,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,253,292,272,254,243,282],
[329,0,293,310,321,301,272,308],
[298,258,0,371,312,318,253,284],
[259,241,180,0,258,231,237,278],
[279,230,239,293,0,267,238,316],
[297,250,233,320,284,0,292,275],
[308,279,298,314,313,259,0,317],
[269,243,267,273,235,276,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,277,287,275,295,281],
[263,0,297,277,274,281,297,277],
[270,254,0,274,267,274,290,270],
[274,274,277,0,270,281,297,276],
[264,277,284,281,0,283,281,261],
[276,270,277,270,268,0,286,264],
[256,254,261,254,270,265,0,271],
[270,274,281,275,290,287,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,270,259,274,276,266,274],
[292,0,291,300,306,292,274,280],
[281,260,0,271,277,258,286,268],
[292,251,280,0,305,267,276,284],
[277,245,274,246,0,268,266,248],
[275,259,293,284,283,0,283,263],
[285,277,265,275,285,268,0,270],
[277,271,283,267,303,288,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,299,304,278,277,232,252],
[378,0,246,314,326,369,313,274],
[252,305,0,273,269,248,195,249],
[247,237,278,0,262,344,202,309],
[273,225,282,289,0,208,255,332],
[274,182,303,207,343,0,258,272],
[319,238,356,349,296,293,0,334],
[299,277,302,242,219,279,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,257,265,278,280,278],
[278,0,287,266,263,259,274,277],
[283,264,0,262,279,261,298,273],
[294,285,289,0,285,275,292,277],
[286,288,272,266,0,281,282,286],
[273,292,290,276,270,0,285,287],
[271,277,253,259,269,266,0,279],
[273,274,278,274,265,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,316,293,253,288,283],
[275,0,327,289,315,282,247,268],
[271,224,0,293,287,256,273,239],
[235,262,258,0,257,273,225,234],
[258,236,264,294,0,257,211,278],
[298,269,295,278,294,0,253,255],
[263,304,278,326,340,298,0,265],
[268,283,312,317,273,296,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,248,293,287,309,251],
[276,0,271,229,282,252,299,276],
[260,280,0,226,271,271,331,245],
[303,322,325,0,282,270,343,279],
[258,269,280,269,0,284,331,258],
[264,299,280,281,267,0,310,273],
[242,252,220,208,220,241,0,217],
[300,275,306,272,293,278,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,246,280,273,268,275],
[289,0,288,269,263,297,265,281],
[280,263,0,295,286,292,284,297],
[305,282,256,0,283,287,255,284],
[271,288,265,268,0,265,270,269],
[278,254,259,264,286,0,268,276],
[283,286,267,296,281,283,0,271],
[276,270,254,267,282,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,258,289,239,291,277,251],
[264,0,227,268,231,253,251,271],
[293,324,0,301,279,273,286,297],
[262,283,250,0,283,290,263,256],
[312,320,272,268,0,275,286,297],
[260,298,278,261,276,0,225,265],
[274,300,265,288,265,326,0,303],
[300,280,254,295,254,286,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,264,278,257,251,314,331],
[240,0,217,243,211,274,289,294],
[287,334,0,273,239,315,303,302],
[273,308,278,0,286,280,315,316],
[294,340,312,265,0,308,325,361],
[300,277,236,271,243,0,302,281],
[237,262,248,236,226,249,0,269],
[220,257,249,235,190,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,271,283,244,319,323,284],
[253,0,255,253,292,287,304,270],
[280,296,0,261,241,286,315,272],
[268,298,290,0,272,312,297,292],
[307,259,310,279,0,315,310,281],
[232,264,265,239,236,0,277,272],
[228,247,236,254,241,274,0,248],
[267,281,279,259,270,279,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,316,298,291,303,287,282],
[277,0,268,272,268,257,264,275],
[235,283,0,274,268,261,259,279],
[253,279,277,0,254,264,273,276],
[260,283,283,297,0,272,266,283],
[248,294,290,287,279,0,253,285],
[264,287,292,278,285,298,0,266],
[269,276,272,275,268,266,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,277,255,275,266,264],
[269,0,268,261,268,271,259,253],
[271,283,0,260,260,273,280,255],
[274,290,291,0,282,284,277,263],
[296,283,291,269,0,274,277,266],
[276,280,278,267,277,0,271,265],
[285,292,271,274,274,280,0,283],
[287,298,296,288,285,286,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,300,282,276,285,276,292],
[296,0,302,284,295,291,274,291],
[251,249,0,274,271,278,256,267],
[269,267,277,0,263,281,262,269],
[275,256,280,288,0,276,267,264],
[266,260,273,270,275,0,257,271],
[275,277,295,289,284,294,0,283],
[259,260,284,282,287,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,265,269,278,277,253,273],
[271,0,279,255,279,269,281,254],
[286,272,0,263,274,266,294,250],
[282,296,288,0,275,280,279,281],
[273,272,277,276,0,276,299,267],
[274,282,285,271,275,0,272,266],
[298,270,257,272,252,279,0,271],
[278,297,301,270,284,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,277,281,273,265,261,275],
[267,0,280,278,263,291,272,280],
[274,271,0,254,269,268,266,272],
[270,273,297,0,277,265,254,281],
[278,288,282,274,0,292,277,301],
[286,260,283,286,259,0,269,275],
[290,279,285,297,274,282,0,304],
[276,271,279,270,250,276,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,276,302,296,290,274],
[266,0,264,265,269,275,284,266],
[257,287,0,276,272,273,281,251],
[275,286,275,0,302,280,290,274],
[249,282,279,249,0,264,274,277],
[255,276,278,271,287,0,285,265],
[261,267,270,261,277,266,0,257],
[277,285,300,277,274,286,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,271,260,279,249,270],
[274,0,278,271,280,278,289,275],
[275,273,0,270,277,278,260,256],
[280,280,281,0,270,286,275,290],
[291,271,274,281,0,289,283,279],
[272,273,273,265,262,0,268,269],
[302,262,291,276,268,283,0,276],
[281,276,295,261,272,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,269,288,293,290,288],
[268,0,284,272,271,288,280,276],
[262,267,0,259,266,284,280,265],
[282,279,292,0,265,294,303,287],
[263,280,285,286,0,286,288,297],
[258,263,267,257,265,0,270,277],
[261,271,271,248,263,281,0,277],
[263,275,286,264,254,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,289,281,273,295,292,284],
[265,0,280,261,275,267,274,277],
[262,271,0,272,281,292,296,300],
[270,290,279,0,281,268,270,268],
[278,276,270,270,0,276,282,286],
[256,284,259,283,275,0,269,269],
[259,277,255,281,269,282,0,276],
[267,274,251,283,265,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,287,258,275,269,277,274],
[285,0,279,264,285,278,270,271],
[264,272,0,255,273,267,259,281],
[293,287,296,0,269,278,260,276],
[276,266,278,282,0,278,288,266],
[282,273,284,273,273,0,259,258],
[274,281,292,291,263,292,0,264],
[277,280,270,275,285,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,253,243,261,264,293,259],
[328,0,306,295,303,255,295,275],
[298,245,0,251,300,258,284,278],
[308,256,300,0,324,310,329,281],
[290,248,251,227,0,226,248,272],
[287,296,293,241,325,0,300,318],
[258,256,267,222,303,251,0,269],
[292,276,273,270,279,233,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,276,256,264,255,276,256],
[274,0,264,284,261,255,271,269],
[275,287,0,291,281,256,257,285],
[295,267,260,0,287,256,261,274],
[287,290,270,264,0,273,280,293],
[296,296,295,295,278,0,273,276],
[275,280,294,290,271,278,0,299],
[295,282,266,277,258,275,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,241,296,279,292,260,275],
[270,0,278,275,273,269,250,270],
[310,273,0,307,300,300,260,287],
[255,276,244,0,277,260,259,267],
[272,278,251,274,0,254,263,287],
[259,282,251,291,297,0,279,275],
[291,301,291,292,288,272,0,315],
[276,281,264,284,264,276,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,305,259,251,313,295,225],
[176,0,291,200,210,244,271,225],
[246,260,0,178,233,244,242,180],
[292,351,373,0,303,304,234,241],
[300,341,318,248,0,279,300,212],
[238,307,307,247,272,0,287,211],
[256,280,309,317,251,264,0,282],
[326,326,371,310,339,340,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,299,275,296,265,281,285],
[265,0,274,262,271,250,287,292],
[252,277,0,271,262,274,293,279],
[276,289,280,0,275,267,306,278],
[255,280,289,276,0,270,302,279],
[286,301,277,284,281,0,270,279],
[270,264,258,245,249,281,0,279],
[266,259,272,273,272,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,300,271,264,278,260,286],
[273,0,283,258,276,267,251,254],
[251,268,0,286,275,271,281,290],
[280,293,265,0,293,294,255,295],
[287,275,276,258,0,259,273,264],
[273,284,280,257,292,0,270,262],
[291,300,270,296,278,281,0,303],
[265,297,261,256,287,289,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,309,305,286,276,312,278],
[281,0,276,271,283,274,297,271],
[242,275,0,233,272,254,275,263],
[246,280,318,0,301,280,301,294],
[265,268,279,250,0,281,280,271],
[275,277,297,271,270,0,277,250],
[239,254,276,250,271,274,0,268],
[273,280,288,257,280,301,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,290,296,261,272,292,275],
[250,0,276,321,264,273,270,259],
[261,275,0,298,296,255,292,290],
[255,230,253,0,213,226,248,237],
[290,287,255,338,0,300,302,287],
[279,278,296,325,251,0,269,255],
[259,281,259,303,249,282,0,275],
[276,292,261,314,264,296,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,275,282,257,266,271],
[264,0,240,262,260,262,260,275],
[267,311,0,294,297,282,292,306],
[276,289,257,0,283,283,287,306],
[269,291,254,268,0,274,258,314],
[294,289,269,268,277,0,234,273],
[285,291,259,264,293,317,0,285],
[280,276,245,245,237,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,305,274,289,281,294,290],
[269,0,274,264,303,258,271,278],
[246,277,0,277,271,251,256,264],
[277,287,274,0,292,280,301,282],
[262,248,280,259,0,227,277,277],
[270,293,300,271,324,0,267,296],
[257,280,295,250,274,284,0,285],
[261,273,287,269,274,255,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,249,253,298,176,288,169],
[258,0,318,387,415,172,363,215],
[302,233,0,258,304,192,363,215],
[298,164,293,0,339,104,334,303],
[253,136,247,212,0,190,319,170],
[375,379,359,447,361,0,462,268],
[263,188,188,217,232,89,0,162],
[382,336,336,248,381,283,389,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,236,250,267,223,274,284],
[290,0,265,248,269,247,294,253],
[315,286,0,271,266,280,305,240],
[301,303,280,0,276,285,300,250],
[284,282,285,275,0,264,302,267],
[328,304,271,266,287,0,316,286],
[277,257,246,251,249,235,0,225],
[267,298,311,301,284,265,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,271,256,259,232,267,258],
[297,0,285,272,301,261,297,329],
[280,266,0,275,241,248,274,266],
[295,279,276,0,270,286,278,290],
[292,250,310,281,0,245,270,260],
[319,290,303,265,306,0,297,265],
[284,254,277,273,281,254,0,281],
[293,222,285,261,291,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,259,258,270,253,266,282],
[292,0,292,268,298,273,291,288],
[292,259,0,269,263,259,274,275],
[293,283,282,0,283,281,303,274],
[281,253,288,268,0,249,275,260],
[298,278,292,270,302,0,291,280],
[285,260,277,248,276,260,0,275],
[269,263,276,277,291,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,250,260,263,283,261],
[292,0,306,292,278,285,282,270],
[263,245,0,244,255,261,254,265],
[301,259,307,0,283,292,299,272],
[291,273,296,268,0,261,283,291],
[288,266,290,259,290,0,268,281],
[268,269,297,252,268,283,0,269],
[290,281,286,279,260,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,314,246,248,269,276,327],
[325,0,274,235,272,299,323,327],
[237,277,0,218,258,257,335,263],
[305,316,333,0,230,325,322,319],
[303,279,293,321,0,272,282,296],
[282,252,294,226,279,0,274,276],
[275,228,216,229,269,277,0,300],
[224,224,288,232,255,275,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,256,269,265,253,248,270],
[274,0,248,239,244,238,250,253],
[295,303,0,282,286,276,276,272],
[282,312,269,0,288,270,282,265],
[286,307,265,263,0,277,245,289],
[298,313,275,281,274,0,285,280],
[303,301,275,269,306,266,0,280],
[281,298,279,286,262,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,255,281,281,279,293],
[262,0,253,262,267,257,262,271],
[270,298,0,276,288,289,269,297],
[296,289,275,0,286,286,279,299],
[270,284,263,265,0,278,263,295],
[270,294,262,265,273,0,256,280],
[272,289,282,272,288,295,0,284],
[258,280,254,252,256,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,249,239,251,187,193,246],
[267,0,204,130,154,139,138,292],
[302,347,0,173,255,277,280,349],
[312,421,378,0,325,306,269,427],
[300,397,296,226,0,275,296,356],
[364,412,274,245,276,0,327,401],
[358,413,271,282,255,224,0,368],
[305,259,202,124,195,150,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,278,271,258,239,220,286],
[279,0,275,260,278,228,257,238],
[273,276,0,273,266,282,280,279],
[280,291,278,0,258,266,245,269],
[293,273,285,293,0,252,279,275],
[312,323,269,285,299,0,270,298],
[331,294,271,306,272,281,0,284],
[265,313,272,282,276,253,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,287,246,274,278,334,305],
[287,0,218,275,259,243,304,275],
[264,333,0,281,259,264,316,311],
[305,276,270,0,265,274,336,309],
[277,292,292,286,0,267,283,320],
[273,308,287,277,284,0,342,337],
[217,247,235,215,268,209,0,250],
[246,276,240,242,231,214,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,261,239,290,285,288,289],
[267,0,260,230,245,269,284,239],
[290,291,0,260,284,253,291,248],
[312,321,291,0,298,314,323,260],
[261,306,267,253,0,284,294,252],
[266,282,298,237,267,0,301,280],
[263,267,260,228,257,250,0,246],
[262,312,303,291,299,271,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,270,274,260,277,286],
[273,0,272,302,280,264,288,307],
[274,279,0,295,284,278,275,296],
[281,249,256,0,271,242,256,294],
[277,271,267,280,0,271,283,303],
[291,287,273,309,280,0,310,308],
[274,263,276,295,268,241,0,305],
[265,244,255,257,248,243,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,279,270,256,280,287,269],
[273,0,277,272,284,287,308,284],
[272,274,0,277,267,284,283,255],
[281,279,274,0,271,296,302,276],
[295,267,284,280,0,288,309,284],
[271,264,267,255,263,0,282,255],
[264,243,268,249,242,269,0,271],
[282,267,296,275,267,296,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,373,253,299,274,350,292],
[228,0,218,267,275,283,253,330],
[178,333,0,269,274,259,299,280],
[298,284,282,0,295,352,320,242],
[252,276,277,256,0,264,269,304],
[277,268,292,199,287,0,266,295],
[201,298,252,231,282,285,0,248],
[259,221,271,309,247,256,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,272,301,300,284,292,292],
[247,0,271,264,286,268,271,285],
[279,280,0,277,291,263,273,303],
[250,287,274,0,303,280,290,313],
[251,265,260,248,0,260,252,295],
[267,283,288,271,291,0,277,288],
[259,280,278,261,299,274,0,291],
[259,266,248,238,256,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,287,285,278,277,300,285],
[277,0,292,291,266,254,293,262],
[264,259,0,271,264,277,281,267],
[266,260,280,0,275,265,290,270],
[273,285,287,276,0,276,286,284],
[274,297,274,286,275,0,293,278],
[251,258,270,261,265,258,0,277],
[266,289,284,281,267,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,232,279,267,274,270],
[277,0,271,263,277,283,265,279],
[289,280,0,265,294,279,273,277],
[319,288,286,0,293,288,283,264],
[272,274,257,258,0,281,286,272],
[284,268,272,263,270,0,272,263],
[277,286,278,268,265,279,0,280],
[281,272,274,287,279,288,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,296,318,310,271,285],
[270,0,280,288,311,310,317,277],
[273,271,0,304,326,331,287,318],
[255,263,247,0,275,290,281,251],
[233,240,225,276,0,286,266,244],
[241,241,220,261,265,0,246,251],
[280,234,264,270,285,305,0,257],
[266,274,233,300,307,300,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,274,295,293,254,294,265],
[248,0,272,307,263,261,287,264],
[277,279,0,294,284,251,274,288],
[256,244,257,0,262,259,247,252],
[258,288,267,289,0,271,285,266],
[297,290,300,292,280,0,299,266],
[257,264,277,304,266,252,0,258],
[286,287,263,299,285,285,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,315,267,284,309,300,324],
[241,0,265,246,301,243,250,262],
[236,286,0,271,282,261,291,288],
[284,305,280,0,305,270,318,281],
[267,250,269,246,0,261,293,272],
[242,308,290,281,290,0,281,293],
[251,301,260,233,258,270,0,263],
[227,289,263,270,279,258,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,274,279,266,265,252,266],
[296,0,282,282,271,282,269,276],
[277,269,0,279,273,270,262,274],
[272,269,272,0,268,265,261,269],
[285,280,278,283,0,275,279,276],
[286,269,281,286,276,0,269,290],
[299,282,289,290,272,282,0,281],
[285,275,277,282,275,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,289,286,284,295,278],
[265,0,261,286,246,272,295,262],
[281,290,0,304,271,289,290,281],
[262,265,247,0,250,259,265,241],
[265,305,280,301,0,294,289,300],
[267,279,262,292,257,0,286,270],
[256,256,261,286,262,265,0,264],
[273,289,270,310,251,281,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,304,297,261,257,276,267],
[284,0,301,282,284,278,258,265],
[247,250,0,265,264,255,268,252],
[254,269,286,0,263,267,249,263],
[290,267,287,288,0,283,266,258],
[294,273,296,284,268,0,272,278],
[275,293,283,302,285,279,0,264],
[284,286,299,288,293,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,297,252,247,250,255,237],
[276,0,283,275,284,295,290,273],
[254,268,0,260,240,244,255,233],
[299,276,291,0,268,282,279,269],
[304,267,311,283,0,279,250,239],
[301,256,307,269,272,0,291,279],
[296,261,296,272,301,260,0,275],
[314,278,318,282,312,272,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,295,272,295,271,282],
[261,0,271,278,267,271,264,263],
[265,280,0,298,279,294,293,290],
[256,273,253,0,260,270,256,268],
[279,284,272,291,0,289,274,271],
[256,280,257,281,262,0,253,258],
[280,287,258,295,277,298,0,279],
[269,288,261,283,280,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,255,277,278,276,269],
[257,0,276,266,258,267,258,263],
[263,275,0,259,269,256,256,260],
[296,285,292,0,271,285,288,275],
[274,293,282,280,0,254,276,258],
[273,284,295,266,297,0,274,273],
[275,293,295,263,275,277,0,279],
[282,288,291,276,293,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,261,290,283,283,291,285],
[265,0,266,272,275,266,286,275],
[290,285,0,275,289,288,294,291],
[261,279,276,0,262,269,271,272],
[268,276,262,289,0,274,284,266],
[268,285,263,282,277,0,281,263],
[260,265,257,280,267,270,0,260],
[266,276,260,279,285,288,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,273,284,276,266,267],
[294,0,275,280,288,261,273,280],
[281,276,0,299,301,262,276,284],
[278,271,252,0,289,259,253,272],
[267,263,250,262,0,260,239,258],
[275,290,289,292,291,0,261,289],
[285,278,275,298,312,290,0,290],
[284,271,267,279,293,262,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,288,253,253,277,270],
[278,0,249,284,286,267,281,279],
[279,302,0,294,293,277,274,258],
[263,267,257,0,307,260,282,272],
[298,265,258,244,0,244,279,269],
[298,284,274,291,307,0,289,278],
[274,270,277,269,272,262,0,275],
[281,272,293,279,282,273,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,286,272,286,271,300,306],
[254,0,278,268,288,280,284,293],
[265,273,0,256,264,268,289,281],
[279,283,295,0,293,289,274,301],
[265,263,287,258,0,260,258,283],
[280,271,283,262,291,0,296,283],
[251,267,262,277,293,255,0,268],
[245,258,270,250,268,268,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,298,346,323,310,276,316],
[307,0,254,253,275,296,237,309],
[253,297,0,378,327,302,299,340],
[205,298,173,0,282,268,233,284],
[228,276,224,269,0,266,273,313],
[241,255,249,283,285,0,248,304],
[275,314,252,318,278,303,0,356],
[235,242,211,267,238,247,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,283,300,298,305,266],
[250,0,264,254,263,264,255,257],
[266,287,0,287,279,283,301,249],
[268,297,264,0,290,295,286,285],
[251,288,272,261,0,294,265,264],
[253,287,268,256,257,0,283,275],
[246,296,250,265,286,268,0,255],
[285,294,302,266,287,276,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,267,279,283,289,263,260],
[283,0,299,264,270,314,261,263],
[284,252,0,275,265,289,263,264],
[272,287,276,0,290,275,282,257],
[268,281,286,261,0,291,261,253],
[262,237,262,276,260,0,248,246],
[288,290,288,269,290,303,0,276],
[291,288,287,294,298,305,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,396,335,288,297,344,278,223],
[155,0,285,215,161,198,258,187],
[216,266,0,176,235,256,255,203],
[263,336,375,0,257,299,329,284],
[254,390,316,294,0,247,348,225],
[207,353,295,252,304,0,372,211],
[273,293,296,222,203,179,0,274],
[328,364,348,267,326,340,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,267,292,284,267,278],
[279,0,295,271,290,282,279,267],
[256,256,0,261,261,254,265,265],
[284,280,290,0,287,286,268,274],
[259,261,290,264,0,276,251,258],
[267,269,297,265,275,0,264,261],
[284,272,286,283,300,287,0,277],
[273,284,286,277,293,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,249,243,215,288,210,205],
[267,0,255,212,201,284,252,250],
[302,296,0,306,282,343,265,279],
[308,339,245,0,284,331,255,273],
[336,350,269,267,0,333,280,272],
[263,267,208,220,218,0,212,230],
[341,299,286,296,271,339,0,284],
[346,301,272,278,279,321,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,291,291,289,288,271],
[283,0,268,275,285,265,271,261],
[269,283,0,272,282,266,280,251],
[260,276,279,0,278,263,273,253],
[260,266,269,273,0,281,260,270],
[262,286,285,288,270,0,276,274],
[263,280,271,278,291,275,0,277],
[280,290,300,298,281,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,229,183,341,200,260,196],
[327,0,285,192,262,200,344,233],
[322,266,0,252,344,291,338,238],
[368,359,299,0,336,275,304,289],
[210,289,207,215,0,172,325,272],
[351,351,260,276,379,0,259,369],
[291,207,213,247,226,292,0,219],
[355,318,313,262,279,182,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,366,317,292,181,269,283],
[249,0,373,267,406,296,293,202],
[185,178,0,216,262,236,240,104],
[234,284,335,0,305,269,286,153],
[259,145,289,246,0,247,284,154],
[370,255,315,282,304,0,369,173],
[282,258,311,265,267,182,0,214],
[268,349,447,398,397,378,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,197,261,300,193,239,241],
[278,0,259,251,308,286,265,270],
[354,292,0,252,293,224,253,264],
[290,300,299,0,304,269,329,299],
[251,243,258,247,0,225,266,223],
[358,265,327,282,326,0,340,284],
[312,286,298,222,285,211,0,257],
[310,281,287,252,328,267,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,262,266,272,264,279,232],
[313,0,287,275,281,275,278,278],
[289,264,0,247,258,237,220,236],
[285,276,304,0,276,246,244,247],
[279,270,293,275,0,282,268,198],
[287,276,314,305,269,0,277,235],
[272,273,331,307,283,274,0,270],
[319,273,315,304,353,316,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,279,273,273,266,273],
[290,0,288,279,266,270,278,278],
[270,263,0,271,264,268,260,267],
[272,272,280,0,279,270,271,280],
[278,285,287,272,0,269,254,265],
[278,281,283,281,282,0,272,279],
[285,273,291,280,297,279,0,286],
[278,273,284,271,286,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,275,295,265,268,253,282],
[241,0,242,263,254,265,201,249],
[276,309,0,267,280,277,277,287],
[256,288,284,0,278,269,244,275],
[286,297,271,273,0,264,245,289],
[283,286,274,282,287,0,249,306],
[298,350,274,307,306,302,0,305],
[269,302,264,276,262,245,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,256,271,248,269,276],
[277,0,271,252,262,238,236,256],
[269,280,0,251,238,251,254,283],
[295,299,300,0,285,271,304,303],
[280,289,313,266,0,303,272,315],
[303,313,300,280,248,0,277,311],
[282,315,297,247,279,274,0,300],
[275,295,268,248,236,240,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,265,280,259,270,260,265],
[257,0,249,246,236,229,262,263],
[286,302,0,262,244,273,275,261],
[271,305,289,0,269,282,281,273],
[292,315,307,282,0,274,287,275],
[281,322,278,269,277,0,276,286],
[291,289,276,270,264,275,0,278],
[286,288,290,278,276,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,266,289,281,298,294,267],
[240,0,241,271,259,291,271,235],
[285,310,0,296,280,285,278,271],
[262,280,255,0,258,262,259,262],
[270,292,271,293,0,284,276,280],
[253,260,266,289,267,0,270,281],
[257,280,273,292,275,281,0,282],
[284,316,280,289,271,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,256,237,270,255,267,263],
[305,0,295,251,298,286,288,271],
[295,256,0,226,290,268,245,240],
[314,300,325,0,315,315,272,285],
[281,253,261,236,0,282,273,232],
[296,265,283,236,269,0,269,254],
[284,263,306,279,278,282,0,264],
[288,280,311,266,319,297,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,285,265,266,268,251,272],
[299,0,297,249,285,295,256,265],
[266,254,0,264,267,278,259,267],
[286,302,287,0,270,283,255,317],
[285,266,284,281,0,275,285,251],
[283,256,273,268,276,0,239,283],
[300,295,292,296,266,312,0,284],
[279,286,284,234,300,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,276,266,280,294,295,290],
[231,0,271,266,252,271,286,288],
[275,280,0,262,251,272,245,281],
[285,285,289,0,282,290,275,277],
[271,299,300,269,0,279,280,290],
[257,280,279,261,272,0,273,279],
[256,265,306,276,271,278,0,290],
[261,263,270,274,261,272,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,263,259,266,244,237],
[286,0,223,281,251,266,248,236],
[279,328,0,272,269,300,278,258],
[288,270,279,0,260,262,279,260],
[292,300,282,291,0,287,271,239],
[285,285,251,289,264,0,233,266],
[307,303,273,272,280,318,0,295],
[314,315,293,291,312,285,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,309,313,296,244,248,321],
[270,0,316,313,295,296,303,362],
[242,235,0,281,292,247,182,336],
[238,238,270,0,332,205,265,306],
[255,256,259,219,0,225,214,265],
[307,255,304,346,326,0,223,352],
[303,248,369,286,337,328,0,325],
[230,189,215,245,286,199,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,282,292,301,261,280,287],
[254,0,285,288,269,279,262,261],
[269,266,0,282,277,263,278,275],
[259,263,269,0,275,249,273,267],
[250,282,274,276,0,258,270,271],
[290,272,288,302,293,0,280,271],
[271,289,273,278,281,271,0,273],
[264,290,276,284,280,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,304,256,236,234,260,268],
[346,0,300,289,303,279,292,252],
[247,251,0,266,290,235,224,222],
[295,262,285,0,359,240,253,267],
[315,248,261,192,0,266,229,242],
[317,272,316,311,285,0,279,288],
[291,259,327,298,322,272,0,240],
[283,299,329,284,309,263,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,329,272,286,242,291,317],
[253,0,354,321,306,299,274,317],
[222,197,0,229,259,248,237,276],
[279,230,322,0,320,285,293,320],
[265,245,292,231,0,241,262,305],
[309,252,303,266,310,0,289,291],
[260,277,314,258,289,262,0,277],
[234,234,275,231,246,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,272,241,353,223,210,163],
[345,0,367,227,330,239,276,241],
[279,184,0,286,240,201,245,206],
[310,324,265,0,382,215,303,290],
[198,221,311,169,0,177,239,263],
[328,312,350,336,374,0,306,255],
[341,275,306,248,312,245,0,298],
[388,310,345,261,288,296,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,316,270,286,283,280],
[271,0,281,318,277,257,294,270],
[262,270,0,309,264,276,295,264],
[235,233,242,0,233,273,238,242],
[281,274,287,318,0,280,310,300],
[265,294,275,278,271,0,282,273],
[268,257,256,313,241,269,0,264],
[271,281,287,309,251,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,291,281,275,275,289],
[275,0,284,287,270,274,278,289],
[258,267,0,260,275,249,253,277],
[260,264,291,0,281,278,273,288],
[270,281,276,270,0,285,268,275],
[276,277,302,273,266,0,273,297],
[276,273,298,278,283,278,0,283],
[262,262,274,263,276,254,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,253,270,252,246,244,255],
[299,0,275,283,284,276,282,313],
[298,276,0,301,295,287,262,294],
[281,268,250,0,269,270,224,279],
[299,267,256,282,0,297,250,313],
[305,275,264,281,254,0,250,287],
[307,269,289,327,301,301,0,311],
[296,238,257,272,238,264,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,281,293,293,290,291,271],
[257,0,269,282,269,272,274,283],
[270,282,0,270,279,290,274,265],
[258,269,281,0,270,288,269,281],
[258,282,272,281,0,278,284,271],
[261,279,261,263,273,0,261,262],
[260,277,277,282,267,290,0,269],
[280,268,286,270,280,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,363,229,308,244,277,212,217],
[188,0,199,289,256,350,271,253],
[322,352,0,371,264,344,280,292],
[243,262,180,0,239,284,271,183],
[307,295,287,312,0,225,299,267],
[274,201,207,267,326,0,280,141],
[339,280,271,280,252,271,0,175],
[334,298,259,368,284,410,376,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,293,265,270,287,267,255],
[288,0,269,256,292,290,276,271],
[258,282,0,286,286,292,275,277],
[286,295,265,0,307,321,276,270],
[281,259,265,244,0,278,283,268],
[264,261,259,230,273,0,250,266],
[284,275,276,275,268,301,0,278],
[296,280,274,281,283,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,287,291,290,285,284],
[273,0,281,288,276,291,290,276],
[279,270,0,283,283,271,297,298],
[264,263,268,0,278,279,265,280],
[260,275,268,273,0,289,259,279],
[261,260,280,272,262,0,270,276],
[266,261,254,286,292,281,0,278],
[267,275,253,271,272,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,272,273,269,271,281],
[298,0,299,288,287,299,267,296],
[276,252,0,295,261,248,265,294],
[279,263,256,0,279,259,274,268],
[278,264,290,272,0,293,275,276],
[282,252,303,292,258,0,284,285],
[280,284,286,277,276,267,0,289],
[270,255,257,283,275,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,245,244,256,290,280,212],
[258,0,261,255,227,280,254,270],
[306,290,0,255,281,312,222,265],
[307,296,296,0,302,292,260,305],
[295,324,270,249,0,257,240,235],
[261,271,239,259,294,0,223,218],
[271,297,329,291,311,328,0,230],
[339,281,286,246,316,333,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,279,261,283,287,273,273],
[274,0,259,256,260,260,283,250],
[272,292,0,281,274,281,289,279],
[290,295,270,0,289,283,287,270],
[268,291,277,262,0,277,298,260],
[264,291,270,268,274,0,269,260],
[278,268,262,264,253,282,0,258],
[278,301,272,281,291,291,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,270,340,344,268,209,272],
[282,0,325,388,378,364,271,399],
[281,226,0,303,369,236,176,279],
[211,163,248,0,260,216,258,251],
[207,173,182,291,0,224,233,331],
[283,187,315,335,327,0,305,264],
[342,280,375,293,318,246,0,387],
[279,152,272,300,220,287,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,292,281,262,296,281,257],
[249,0,254,260,253,246,279,263],
[259,297,0,273,264,264,272,277],
[270,291,278,0,286,273,280,276],
[289,298,287,265,0,285,289,293],
[255,305,287,278,266,0,291,275],
[270,272,279,271,262,260,0,278],
[294,288,274,275,258,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,278,281,276,269,278],
[272,0,280,270,276,264,275,266],
[276,271,0,277,279,262,279,273],
[273,281,274,0,274,266,277,276],
[270,275,272,277,0,275,278,284],
[275,287,289,285,276,0,278,284],
[282,276,272,274,273,273,0,268],
[273,285,278,275,267,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,292,292,311,293,299],
[281,0,287,287,293,296,274,297],
[267,264,0,279,279,283,276,271],
[259,264,272,0,283,284,279,289],
[259,258,272,268,0,274,279,284],
[240,255,268,267,277,0,263,263],
[258,277,275,272,272,288,0,279],
[252,254,280,262,267,288,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,320,307,268,294,271,285],
[262,0,287,281,276,309,305,310],
[231,264,0,218,252,294,246,239],
[244,270,333,0,258,271,249,287],
[283,275,299,293,0,297,258,253],
[257,242,257,280,254,0,191,238],
[280,246,305,302,293,360,0,272],
[266,241,312,264,298,313,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,242,257,262,290,270,261],
[311,0,270,286,284,306,287,297],
[309,281,0,283,272,290,281,262],
[294,265,268,0,268,282,284,274],
[289,267,279,283,0,298,281,261],
[261,245,261,269,253,0,260,262],
[281,264,270,267,270,291,0,272],
[290,254,289,277,290,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,249,264,302,272,290,286],
[305,0,278,328,326,257,272,332],
[302,273,0,318,300,329,296,309],
[287,223,233,0,312,332,266,276],
[249,225,251,239,0,287,283,253],
[279,294,222,219,264,0,252,298],
[261,279,255,285,268,299,0,306],
[265,219,242,275,298,253,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,244,246,262,204,266,251],
[272,0,260,251,251,197,283,243],
[307,291,0,289,280,254,307,276],
[305,300,262,0,267,277,282,277],
[289,300,271,284,0,254,283,289],
[347,354,297,274,297,0,316,264],
[285,268,244,269,268,235,0,253],
[300,308,275,274,262,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,269,276,269,265,259],
[283,0,288,258,270,267,269,286],
[278,263,0,257,259,270,275,262],
[282,293,294,0,268,281,295,286],
[275,281,292,283,0,273,290,282],
[282,284,281,270,278,0,274,287],
[286,282,276,256,261,277,0,261],
[292,265,289,265,269,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,301,251,297,276,271,303],
[257,0,310,273,274,281,258,269],
[250,241,0,251,266,261,270,288],
[300,278,300,0,310,294,266,313],
[254,277,285,241,0,274,252,271],
[275,270,290,257,277,0,286,288],
[280,293,281,285,299,265,0,276],
[248,282,263,238,280,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,286,260,277,295,274],
[282,0,295,257,266,286,296,272],
[277,256,0,291,287,269,289,267],
[265,294,260,0,276,256,272,268],
[291,285,264,275,0,292,289,290],
[274,265,282,295,259,0,290,274],
[256,255,262,279,262,261,0,275],
[277,279,284,283,261,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,389,277,284,271,289,329,427],
[162,0,225,198,239,255,171,244],
[274,326,0,276,299,277,318,341],
[267,353,275,0,344,339,386,397],
[280,312,252,207,0,297,260,319],
[262,296,274,212,254,0,264,354],
[222,380,233,165,291,287,0,343],
[124,307,210,154,232,197,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,272,309,302,301,268,290],
[295,0,277,289,271,290,274,278],
[279,274,0,320,307,239,307,314],
[242,262,231,0,264,262,270,289],
[249,280,244,287,0,244,289,278],
[250,261,312,289,307,0,294,298],
[283,277,244,281,262,257,0,254],
[261,273,237,262,273,253,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,257,276,247,252,248,240],
[303,0,307,303,264,243,317,287],
[294,244,0,306,265,282,253,244],
[275,248,245,0,248,281,273,264],
[304,287,286,303,0,268,295,269],
[299,308,269,270,283,0,298,253],
[303,234,298,278,256,253,0,279],
[311,264,307,287,282,298,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,303,280,289,298,274,274],
[278,0,293,277,270,283,266,279],
[248,258,0,268,255,268,264,257],
[271,274,283,0,273,269,269,280],
[262,281,296,278,0,295,289,275],
[253,268,283,282,256,0,288,253],
[277,285,287,282,262,263,0,257],
[277,272,294,271,276,298,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,252,268,230,260,261],
[273,0,282,266,270,262,253,274],
[278,269,0,260,281,270,275,271],
[299,285,291,0,292,271,280,291],
[283,281,270,259,0,265,273,277],
[321,289,281,280,286,0,272,281],
[291,298,276,271,278,279,0,275],
[290,277,280,260,274,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,262,287,287,264,272],
[278,0,248,267,283,265,255,276],
[274,303,0,294,292,274,288,304],
[289,284,257,0,266,272,257,283],
[264,268,259,285,0,264,249,254],
[264,286,277,279,287,0,284,289],
[287,296,263,294,302,267,0,274],
[279,275,247,268,297,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,226,221,212,210,194,198],
[340,0,314,301,289,230,303,234],
[325,237,0,264,365,271,223,274],
[330,250,287,0,293,238,280,211],
[339,262,186,258,0,243,194,197],
[341,321,280,313,308,0,257,226],
[357,248,328,271,357,294,0,277],
[353,317,277,340,354,325,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,265,269,269,266,282,273],
[285,0,242,280,294,277,294,282],
[286,309,0,281,303,301,300,266],
[282,271,270,0,281,266,291,265],
[282,257,248,270,0,258,298,280],
[285,274,250,285,293,0,290,258],
[269,257,251,260,253,261,0,231],
[278,269,285,286,271,293,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,280,287,281,303,272],
[277,0,279,287,287,294,298,273],
[277,272,0,287,291,281,284,290],
[271,264,264,0,289,276,290,279],
[264,264,260,262,0,256,271,271],
[270,257,270,275,295,0,284,273],
[248,253,267,261,280,267,0,274],
[279,278,261,272,280,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,285,290,275,280,292,283],
[285,0,285,303,278,251,285,286],
[266,266,0,285,277,250,289,261],
[261,248,266,0,285,264,257,269],
[276,273,274,266,0,268,282,281],
[271,300,301,287,283,0,281,295],
[259,266,262,294,269,270,0,277],
[268,265,290,282,270,256,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,244,267,274,296,288,262],
[272,0,231,252,272,255,272,244],
[307,320,0,285,313,275,317,295],
[284,299,266,0,306,296,284,273],
[277,279,238,245,0,259,255,250],
[255,296,276,255,292,0,279,285],
[263,279,234,267,296,272,0,275],
[289,307,256,278,301,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,320,302,292,252,320],
[291,0,276,322,291,286,258,306],
[285,275,0,321,277,302,296,285],
[231,229,230,0,265,248,221,264],
[249,260,274,286,0,305,254,295],
[259,265,249,303,246,0,242,282],
[299,293,255,330,297,309,0,305],
[231,245,266,287,256,269,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,266,290,271,256,282],
[279,0,254,260,262,281,291,266],
[289,297,0,288,280,291,270,269],
[285,291,263,0,287,294,283,264],
[261,289,271,264,0,288,267,268],
[280,270,260,257,263,0,278,242],
[295,260,281,268,284,273,0,248],
[269,285,282,287,283,309,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,227,274,229,269,253,302],
[297,0,315,282,285,248,236,294],
[324,236,0,264,245,283,289,300],
[277,269,287,0,266,261,263,316],
[322,266,306,285,0,301,245,298],
[282,303,268,290,250,0,225,279],
[298,315,262,288,306,326,0,311],
[249,257,251,235,253,272,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,267,267,271,253,278],
[282,0,273,272,280,291,276,295],
[278,278,0,262,286,280,268,273],
[284,279,289,0,299,293,272,280],
[284,271,265,252,0,270,260,290],
[280,260,271,258,281,0,260,280],
[298,275,283,279,291,291,0,293],
[273,256,278,271,261,271,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,286,295,299,296,279],
[276,0,273,290,280,266,272,260],
[261,278,0,278,268,265,253,252],
[265,261,273,0,275,269,272,265],
[256,271,283,276,0,269,266,262],
[252,285,286,282,282,0,266,276],
[255,279,298,279,285,285,0,269],
[272,291,299,286,289,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,296,334,300,244,316,199],
[252,0,284,238,284,208,310,192],
[255,267,0,254,268,162,283,228],
[217,313,297,0,240,283,295,276],
[251,267,283,311,0,300,250,296],
[307,343,389,268,251,0,360,378],
[235,241,268,256,301,191,0,201],
[352,359,323,275,255,173,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,279,273,276,281,279],
[275,0,290,291,285,285,275,274],
[271,261,0,258,271,262,281,248],
[272,260,293,0,285,277,287,272],
[278,266,280,266,0,264,288,280],
[275,266,289,274,287,0,285,266],
[270,276,270,264,263,266,0,266],
[272,277,303,279,271,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,301,258,261,275,313],
[262,0,306,252,269,239,270,287],
[277,245,0,265,275,251,263,309],
[250,299,286,0,287,260,266,308],
[293,282,276,264,0,253,278,297],
[290,312,300,291,298,0,267,302],
[276,281,288,285,273,284,0,281],
[238,264,242,243,254,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,276,274,295,261,274],
[268,0,278,269,263,294,248,267],
[259,273,0,270,257,285,238,270],
[275,282,281,0,263,294,263,270],
[277,288,294,288,0,282,271,277],
[256,257,266,257,269,0,262,264],
[290,303,313,288,280,289,0,273],
[277,284,281,281,274,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,273,291,286,284,285],
[259,0,265,253,271,243,260,254],
[276,286,0,276,261,267,289,256],
[278,298,275,0,274,273,285,262],
[260,280,290,277,0,274,285,277],
[265,308,284,278,277,0,275,245],
[267,291,262,266,266,276,0,257],
[266,297,295,289,274,306,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,278,296,270,268,239,284],
[278,0,267,270,280,295,276,287],
[273,284,0,268,272,275,263,271],
[255,281,283,0,298,274,278,311],
[281,271,279,253,0,284,283,285],
[283,256,276,277,267,0,267,285],
[312,275,288,273,268,284,0,303],
[267,264,280,240,266,266,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,257,274,258,267,282,268],
[298,0,278,296,261,267,285,288],
[294,273,0,284,281,282,291,279],
[277,255,267,0,272,283,265,291],
[293,290,270,279,0,283,276,282],
[284,284,269,268,268,0,264,283],
[269,266,260,286,275,287,0,292],
[283,263,272,260,269,268,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,283,282,282,281,288,271],
[284,0,290,271,277,275,284,270],
[268,261,0,260,256,259,259,261],
[269,280,291,0,285,282,290,270],
[269,274,295,266,0,294,285,279],
[270,276,292,269,257,0,286,263],
[263,267,292,261,266,265,0,258],
[280,281,290,281,272,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,286,280,274,270,298],
[267,0,258,263,259,258,275,290],
[283,293,0,284,273,292,284,306],
[265,288,267,0,269,267,269,285],
[271,292,278,282,0,289,271,295],
[277,293,259,284,262,0,264,305],
[281,276,267,282,280,287,0,290],
[253,261,245,266,256,246,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,315,400,288,281,421,262],
[184,0,373,240,279,207,301,285],
[236,178,0,207,238,162,268,280],
[151,311,344,0,179,289,258,358],
[263,272,313,372,0,272,383,321],
[270,344,389,262,279,0,330,294],
[130,250,283,293,168,221,0,335],
[289,266,271,193,230,257,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,290,306,297,298,252,291],
[279,0,269,295,294,304,297,305],
[261,282,0,266,265,264,296,268],
[245,256,285,0,252,260,271,292],
[254,257,286,299,0,279,275,279],
[253,247,287,291,272,0,275,297],
[299,254,255,280,276,276,0,302],
[260,246,283,259,272,254,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,268,260,288,262,271],
[274,0,276,276,277,285,272,263],
[269,275,0,278,280,288,258,286],
[283,275,273,0,304,300,278,279],
[291,274,271,247,0,282,259,274],
[263,266,263,251,269,0,249,264],
[289,279,293,273,292,302,0,280],
[280,288,265,272,277,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,284,272,272,274,252],
[283,0,263,273,275,269,267,259],
[292,288,0,265,271,289,299,279],
[267,278,286,0,265,273,278,254],
[279,276,280,286,0,286,300,273],
[279,282,262,278,265,0,281,258],
[277,284,252,273,251,270,0,270],
[299,292,272,297,278,293,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,263,258,272,253,262,272],
[303,0,273,268,272,273,275,283],
[288,278,0,281,292,265,279,291],
[293,283,270,0,265,257,286,285],
[279,279,259,286,0,252,270,290],
[298,278,286,294,299,0,271,294],
[289,276,272,265,281,280,0,288],
[279,268,260,266,261,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,289,267,278,285,293,289],
[279,0,282,281,279,286,271,297],
[262,269,0,259,275,265,266,283],
[284,270,292,0,294,290,266,289],
[273,272,276,257,0,266,278,292],
[266,265,286,261,285,0,272,294],
[258,280,285,285,273,279,0,288],
[262,254,268,262,259,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,282,257,269,292,311],
[282,0,288,277,284,242,308,333],
[271,263,0,240,255,258,286,312],
[269,274,311,0,251,267,270,314],
[294,267,296,300,0,278,276,320],
[282,309,293,284,273,0,286,280],
[259,243,265,281,275,265,0,286],
[240,218,239,237,231,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,358,362,336,313,239,288],
[348,0,354,342,272,385,232,284],
[193,197,0,334,222,278,144,308],
[189,209,217,0,212,278,127,308],
[215,279,329,339,0,316,293,316],
[238,166,273,273,235,0,137,277],
[312,319,407,424,258,414,0,349],
[263,267,243,243,235,274,202,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,303,277,287,275,279,279],
[271,0,285,283,285,286,274,283],
[248,266,0,287,267,271,265,263],
[274,268,264,0,274,260,269,271],
[264,266,284,277,0,281,273,288],
[276,265,280,291,270,0,286,282],
[272,277,286,282,278,265,0,267],
[272,268,288,280,263,269,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,258,268,275,270,270,263],
[269,0,276,282,279,265,271,279],
[293,275,0,297,285,265,268,287],
[283,269,254,0,281,268,259,274],
[276,272,266,270,0,259,266,264],
[281,286,286,283,292,0,285,271],
[281,280,283,292,285,266,0,291],
[288,272,264,277,287,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,291,248,287,287,301,287],
[248,0,277,258,267,271,282,288],
[260,274,0,272,284,270,276,274],
[303,293,279,0,288,264,288,272],
[264,284,267,263,0,272,280,262],
[264,280,281,287,279,0,276,268],
[250,269,275,263,271,275,0,252],
[264,263,277,279,289,283,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,284,266,276,272,270],
[266,0,259,266,270,259,261,253],
[260,292,0,272,277,254,271,289],
[267,285,279,0,278,247,273,272],
[285,281,274,273,0,267,285,279],
[275,292,297,304,284,0,274,277],
[279,290,280,278,266,277,0,261],
[281,298,262,279,272,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,302,311,306,306,273,280],
[262,0,256,289,264,277,279,250],
[249,295,0,262,271,275,265,239],
[240,262,289,0,249,285,257,245],
[245,287,280,302,0,274,259,235],
[245,274,276,266,277,0,257,268],
[278,272,286,294,292,294,0,253],
[271,301,312,306,316,283,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,259,260,255,276,283],
[276,0,266,283,274,276,251,281],
[280,285,0,271,253,274,280,275],
[292,268,280,0,259,297,263,260],
[291,277,298,292,0,266,281,285],
[296,275,277,254,285,0,290,268],
[275,300,271,288,270,261,0,278],
[268,270,276,291,266,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,290,255,264,263,281],
[284,0,266,269,281,274,261,293],
[277,285,0,279,267,276,276,294],
[261,282,272,0,268,260,267,278],
[296,270,284,283,0,273,285,290],
[287,277,275,291,278,0,290,293],
[288,290,275,284,266,261,0,299],
[270,258,257,273,261,258,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,291,280,284,301,269],
[274,0,270,269,259,298,281,284],
[279,281,0,296,252,266,269,240],
[260,282,255,0,254,256,241,270],
[271,292,299,297,0,266,293,269],
[267,253,285,295,285,0,254,254],
[250,270,282,310,258,297,0,284],
[282,267,311,281,282,297,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,269,224,225,263,216,264],
[311,0,256,302,238,261,318,246],
[282,295,0,273,230,278,256,235],
[327,249,278,0,310,350,259,322],
[326,313,321,241,0,327,234,318],
[288,290,273,201,224,0,278,233],
[335,233,295,292,317,273,0,305],
[287,305,316,229,233,318,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,285,280,275,274,280],
[276,0,279,291,290,259,279,290],
[267,272,0,291,273,274,274,280],
[266,260,260,0,281,255,264,273],
[271,261,278,270,0,256,270,276],
[276,292,277,296,295,0,267,283],
[277,272,277,287,281,284,0,276],
[271,261,271,278,275,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,278,275,308,254,258],
[283,0,283,282,286,308,267,288],
[274,268,0,271,271,277,257,269],
[273,269,280,0,268,288,251,269],
[276,265,280,283,0,296,257,266],
[243,243,274,263,255,0,251,252],
[297,284,294,300,294,300,0,269],
[293,263,282,282,285,299,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,259,275,266,269,260,269],
[289,0,289,308,271,267,286,297],
[292,262,0,278,293,261,267,286],
[276,243,273,0,247,263,272,290],
[285,280,258,304,0,268,252,286],
[282,284,290,288,283,0,272,270],
[291,265,284,279,299,279,0,268],
[282,254,265,261,265,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,223,254,244,320,256],
[281,0,293,292,284,287,340,271],
[283,258,0,288,280,270,313,280],
[328,259,263,0,279,281,313,278],
[297,267,271,272,0,292,307,277],
[307,264,281,270,259,0,342,280],
[231,211,238,238,244,209,0,235],
[295,280,271,273,274,271,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,321,286,331,307,263,287],
[284,0,297,275,304,332,277,284],
[230,254,0,247,280,251,270,257],
[265,276,304,0,280,299,287,285],
[220,247,271,271,0,282,232,281],
[244,219,300,252,269,0,244,256],
[288,274,281,264,319,307,0,276],
[264,267,294,266,270,295,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,255,274,306,265,283,295],
[273,0,287,276,295,298,282,289],
[296,264,0,280,294,293,286,285],
[277,275,271,0,285,288,296,310],
[245,256,257,266,0,267,277,283],
[286,253,258,263,284,0,279,285],
[268,269,265,255,274,272,0,298],
[256,262,266,241,268,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,294,278,274,287,290],
[280,0,277,312,293,291,288,272],
[285,274,0,307,289,282,269,295],
[257,239,244,0,268,259,238,256],
[273,258,262,283,0,265,270,266],
[277,260,269,292,286,0,273,276],
[264,263,282,313,281,278,0,276],
[261,279,256,295,285,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,308,279,266,284,292],
[277,0,279,289,292,259,301,286],
[268,272,0,297,270,265,288,273],
[243,262,254,0,249,246,275,252],
[272,259,281,302,0,289,312,285],
[285,292,286,305,262,0,310,286],
[267,250,263,276,239,241,0,263],
[259,265,278,299,266,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,300,305,276,308,281,288],
[302,0,274,282,291,313,301,306],
[251,277,0,236,299,267,308,261],
[246,269,315,0,282,299,284,260],
[275,260,252,269,0,228,284,295],
[243,238,284,252,323,0,247,245],
[270,250,243,267,267,304,0,270],
[263,245,290,291,256,306,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,272,285,270,257,291],
[274,0,225,251,256,255,260,302],
[288,326,0,300,309,260,308,318],
[279,300,251,0,293,274,245,292],
[266,295,242,258,0,284,270,265],
[281,296,291,277,267,0,287,280],
[294,291,243,306,281,264,0,273],
[260,249,233,259,286,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,252,268,212,246,204],
[281,0,360,292,263,261,255,301],
[265,191,0,297,208,229,225,150],
[299,259,254,0,311,267,287,135],
[283,288,343,240,0,245,291,230],
[339,290,322,284,306,0,361,188],
[305,296,326,264,260,190,0,203],
[347,250,401,416,321,363,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,351,309,276,264,280,275],
[268,0,377,277,271,315,289,286],
[200,174,0,204,248,254,251,250],
[242,274,347,0,256,288,296,262],
[275,280,303,295,0,293,284,278],
[287,236,297,263,258,0,221,256],
[271,262,300,255,267,330,0,260],
[276,265,301,289,273,295,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,330,319,187,253,181,295],
[247,0,232,207,247,184,209,295],
[221,319,0,238,143,144,164,232],
[232,344,313,0,279,216,241,299],
[364,304,408,272,0,282,380,247],
[298,367,407,335,269,0,313,304],
[370,342,387,310,171,238,0,232],
[256,256,319,252,304,247,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,290,285,273,278,292,281],
[260,0,277,267,279,282,276,261],
[261,274,0,258,268,282,276,266],
[266,284,293,0,271,278,287,270],
[278,272,283,280,0,282,267,258],
[273,269,269,273,269,0,275,255],
[259,275,275,264,284,276,0,269],
[270,290,285,281,293,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,274,267,286,286,292],
[270,0,274,248,269,280,276,265],
[284,277,0,259,273,293,272,285],
[277,303,292,0,292,301,284,274],
[284,282,278,259,0,288,285,304],
[265,271,258,250,263,0,264,274],
[265,275,279,267,266,287,0,281],
[259,286,266,277,247,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,261,276,288,296,283,266],
[270,0,242,268,255,273,244,259],
[290,309,0,268,284,313,293,273],
[275,283,283,0,259,305,272,277],
[263,296,267,292,0,298,277,267],
[255,278,238,246,253,0,262,262],
[268,307,258,279,274,289,0,263],
[285,292,278,274,284,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,235,257,250,253,251,281],
[301,0,287,241,237,254,287,307],
[316,264,0,278,293,268,337,319],
[294,310,273,0,261,278,321,308],
[301,314,258,290,0,250,293,296],
[298,297,283,273,301,0,309,322],
[300,264,214,230,258,242,0,228],
[270,244,232,243,255,229,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,281,286,274,280,320,244],
[251,0,228,269,276,282,304,250],
[270,323,0,314,305,299,301,312],
[265,282,237,0,257,267,300,269],
[277,275,246,294,0,264,291,264],
[271,269,252,284,287,0,306,237],
[231,247,250,251,260,245,0,247],
[307,301,239,282,287,314,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,246,242,275,263,324,283],
[301,0,299,301,282,339,245,299],
[305,252,0,265,298,295,282,285],
[309,250,286,0,296,280,298,305],
[276,269,253,255,0,303,275,332],
[288,212,256,271,248,0,270,283],
[227,306,269,253,276,281,0,282],
[268,252,266,246,219,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,275,265,266,264,274,276],
[269,0,278,260,288,256,250,265],
[276,273,0,261,282,267,275,285],
[286,291,290,0,297,264,284,287],
[285,263,269,254,0,256,273,275],
[287,295,284,287,295,0,272,277],
[277,301,276,267,278,279,0,277],
[275,286,266,264,276,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,263,260,273,273,269],
[294,0,288,294,290,276,266,281],
[291,263,0,273,264,275,285,269],
[288,257,278,0,289,257,286,265],
[291,261,287,262,0,279,289,284],
[278,275,276,294,272,0,289,273],
[278,285,266,265,262,262,0,268],
[282,270,282,286,267,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,252,285,281,281,286,277],
[249,0,261,292,254,296,294,305],
[299,290,0,305,281,322,272,294],
[266,259,246,0,255,285,220,298],
[270,297,270,296,0,299,239,291],
[270,255,229,266,252,0,270,276],
[265,257,279,331,312,281,0,278],
[274,246,257,253,260,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,291,272,268,279,272],
[276,0,266,282,283,274,264,263],
[272,285,0,289,286,275,283,268],
[260,269,262,0,283,278,277,271],
[279,268,265,268,0,256,275,267],
[283,277,276,273,295,0,267,279],
[272,287,268,274,276,284,0,272],
[279,288,283,280,284,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,301,286,262,290,302,347],
[309,0,296,276,323,396,257,293],
[250,255,0,249,238,288,278,330],
[265,275,302,0,318,283,243,310],
[289,228,313,233,0,322,281,319],
[261,155,263,268,229,0,198,278],
[249,294,273,308,270,353,0,314],
[204,258,221,241,232,273,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,293,247,322,257,284,299],
[268,0,283,282,309,287,278,292],
[258,268,0,251,325,267,277,272],
[304,269,300,0,347,270,295,284],
[229,242,226,204,0,231,228,255],
[294,264,284,281,320,0,284,277],
[267,273,274,256,323,267,0,278],
[252,259,279,267,296,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,201,288,282,222,352,303],
[253,0,174,208,280,142,191,329],
[350,377,0,325,275,335,360,388],
[263,343,226,0,233,234,281,248],
[269,271,276,318,0,254,329,362],
[329,409,216,317,297,0,280,416],
[199,360,191,270,222,271,0,287],
[248,222,163,303,189,135,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,225,251,227,323,274,320],
[185,0,232,214,249,327,230,281],
[326,319,0,250,287,276,227,278],
[300,337,301,0,222,297,258,284],
[324,302,264,329,0,300,277,297],
[228,224,275,254,251,0,223,281],
[277,321,324,293,274,328,0,266],
[231,270,273,267,254,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,296,280,298,275,297],
[260,0,275,270,263,286,266,275],
[272,276,0,280,258,282,267,282],
[255,281,271,0,256,268,263,275],
[271,288,293,295,0,286,275,297],
[253,265,269,283,265,0,278,290],
[276,285,284,288,276,273,0,295],
[254,276,269,276,254,261,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,301,314,301,304,297,266],
[238,0,278,283,277,289,284,254],
[250,273,0,304,257,272,275,266],
[237,268,247,0,256,271,246,249],
[250,274,294,295,0,273,290,260],
[247,262,279,280,278,0,279,260],
[254,267,276,305,261,272,0,293],
[285,297,285,302,291,291,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,261,234,254,277,267,239],
[309,0,290,261,291,297,269,287],
[290,261,0,274,269,289,290,261],
[317,290,277,0,287,307,275,291],
[297,260,282,264,0,266,266,257],
[274,254,262,244,285,0,253,275],
[284,282,261,276,285,298,0,270],
[312,264,290,260,294,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,301,350,303,268,264,354],
[232,0,242,258,244,225,226,302],
[250,309,0,270,269,260,237,311],
[201,293,281,0,300,287,206,327],
[248,307,282,251,0,274,244,243],
[283,326,291,264,277,0,292,295],
[287,325,314,345,307,259,0,321],
[197,249,240,224,308,256,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,305,246,191,246,243,315],
[284,0,255,249,262,211,236,296],
[246,296,0,289,284,250,261,380],
[305,302,262,0,280,285,243,339],
[360,289,267,271,0,250,237,372],
[305,340,301,266,301,0,280,363],
[308,315,290,308,314,271,0,332],
[236,255,171,212,179,188,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,265,281,246,256,257,290],
[264,0,283,268,261,251,258,279],
[286,268,0,296,284,267,286,291],
[270,283,255,0,256,273,261,263],
[305,290,267,295,0,286,262,304],
[295,300,284,278,265,0,261,283],
[294,293,265,290,289,290,0,301],
[261,272,260,288,247,268,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,278,289,270,255,265,311],
[294,0,276,293,280,276,275,272],
[273,275,0,252,268,264,274,282],
[262,258,299,0,244,286,275,275],
[281,271,283,307,0,277,290,283],
[296,275,287,265,274,0,273,282],
[286,276,277,276,261,278,0,288],
[240,279,269,276,268,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,265,288,293,291,306],
[269,0,294,269,324,305,293,323],
[267,257,0,286,254,319,257,306],
[286,282,265,0,294,288,261,312],
[263,227,297,257,0,259,262,294],
[258,246,232,263,292,0,256,281],
[260,258,294,290,289,295,0,318],
[245,228,245,239,257,270,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,277,273,247,277,301,300],
[342,0,335,293,244,338,329,381],
[274,216,0,317,276,269,302,352],
[278,258,234,0,209,300,285,297],
[304,307,275,342,0,357,304,346],
[274,213,282,251,194,0,265,264],
[250,222,249,266,247,286,0,291],
[251,170,199,254,205,287,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,274,266,271,268,295,316],
[302,0,280,304,275,270,303,299],
[277,271,0,300,301,293,307,323],
[285,247,251,0,270,294,289,290],
[280,276,250,281,0,285,257,286],
[283,281,258,257,266,0,247,315],
[256,248,244,262,294,304,0,319],
[235,252,228,261,265,236,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,279,255,249,264,259,264],
[293,0,288,272,276,267,297,289],
[272,263,0,274,254,265,281,274],
[296,279,277,0,259,271,294,301],
[302,275,297,292,0,287,305,286],
[287,284,286,280,264,0,284,280],
[292,254,270,257,246,267,0,269],
[287,262,277,250,265,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,268,265,254,269,266,250],
[292,0,276,269,279,282,266,276],
[283,275,0,282,265,278,264,257],
[286,282,269,0,270,279,279,263],
[297,272,286,281,0,279,262,248],
[282,269,273,272,272,0,255,268],
[285,285,287,272,289,296,0,273],
[301,275,294,288,303,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,300,278,295,309,279,270],
[243,0,269,217,274,265,271,291],
[251,282,0,271,297,265,286,305],
[273,334,280,0,278,286,269,304],
[256,277,254,273,0,278,289,298],
[242,286,286,265,273,0,296,281],
[272,280,265,282,262,255,0,258],
[281,260,246,247,253,270,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,261,282,269,303,273],
[272,0,300,271,281,298,287,281],
[285,251,0,264,271,268,277,258],
[290,280,287,0,284,274,299,266],
[269,270,280,267,0,261,269,287],
[282,253,283,277,290,0,296,266],
[248,264,274,252,282,255,0,260],
[278,270,293,285,264,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,286,275,269,263,281,253],
[274,0,281,272,265,274,265,257],
[265,270,0,255,268,278,268,276],
[276,279,296,0,288,264,272,252],
[282,286,283,263,0,264,268,248],
[288,277,273,287,287,0,262,238],
[270,286,283,279,283,289,0,246],
[298,294,275,299,303,313,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,289,237,260,234,216,262],
[320,0,297,263,263,245,278,298],
[262,254,0,257,254,252,248,261],
[314,288,294,0,285,275,266,293],
[291,288,297,266,0,241,259,278],
[317,306,299,276,310,0,265,275],
[335,273,303,285,292,286,0,298],
[289,253,290,258,273,276,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,287,278,286,290,273],
[270,0,284,283,267,293,292,277],
[276,267,0,295,264,275,286,265],
[264,268,256,0,266,273,290,296],
[273,284,287,285,0,284,287,289],
[265,258,276,278,267,0,270,263],
[261,259,265,261,264,281,0,273],
[278,274,286,255,262,288,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,289,276,283,264,265],
[279,0,273,287,260,300,311,280],
[279,278,0,301,283,306,274,292],
[262,264,250,0,271,273,281,265],
[275,291,268,280,0,282,264,260],
[268,251,245,278,269,0,285,236],
[287,240,277,270,287,266,0,284],
[286,271,259,286,291,315,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,234,269,272,282,268,244],
[272,0,257,292,267,300,268,260],
[317,294,0,304,272,274,288,276],
[282,259,247,0,263,271,245,263],
[279,284,279,288,0,279,294,260],
[269,251,277,280,272,0,299,292],
[283,283,263,306,257,252,0,259],
[307,291,275,288,291,259,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,309,296,277,271,281,290],
[267,0,288,276,239,275,258,235],
[242,263,0,288,252,256,252,257],
[255,275,263,0,247,275,283,271],
[274,312,299,304,0,287,275,269],
[280,276,295,276,264,0,269,264],
[270,293,299,268,276,282,0,264],
[261,316,294,280,282,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,263,284,249,256,269,269],
[294,0,267,295,271,283,284,288],
[288,284,0,308,279,266,294,302],
[267,256,243,0,244,250,261,278],
[302,280,272,307,0,279,307,291],
[295,268,285,301,272,0,271,282],
[282,267,257,290,244,280,0,280],
[282,263,249,273,260,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,276,302,313,259,270,285],
[258,0,240,194,230,257,231,274],
[275,311,0,322,326,342,348,272],
[249,357,229,0,276,244,297,277],
[238,321,225,275,0,187,276,270],
[292,294,209,307,364,0,361,304],
[281,320,203,254,275,190,0,240],
[266,277,279,274,281,247,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,285,296,265,260,270],
[255,0,281,278,263,253,260,260],
[256,270,0,282,294,255,278,282],
[266,273,269,0,281,266,282,269],
[255,288,257,270,0,269,274,268],
[286,298,296,285,282,0,273,290],
[291,291,273,269,277,278,0,259],
[281,291,269,282,283,261,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,281,304,273,266,250,294],
[257,0,267,287,261,263,267,255],
[270,284,0,295,272,293,257,272],
[247,264,256,0,247,267,264,281],
[278,290,279,304,0,271,293,276],
[285,288,258,284,280,0,282,273],
[301,284,294,287,258,269,0,293],
[257,296,279,270,275,278,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,277,284,298,285,250,282],
[300,0,257,292,316,284,272,260],
[274,294,0,297,306,312,277,297],
[267,259,254,0,269,285,268,241],
[253,235,245,282,0,257,251,259],
[266,267,239,266,294,0,279,225],
[301,279,274,283,300,272,0,293],
[269,291,254,310,292,326,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,243,277,277,268,214,239],
[281,0,267,305,271,259,220,278],
[308,284,0,289,256,303,271,287],
[274,246,262,0,258,273,214,248],
[274,280,295,293,0,269,275,240],
[283,292,248,278,282,0,231,250],
[337,331,280,337,276,320,0,260],
[312,273,264,303,311,301,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,306,265,255,282,246],
[289,0,315,284,292,284,273,288],
[272,236,0,262,279,272,262,277],
[245,267,289,0,278,256,263,271],
[286,259,272,273,0,255,255,274],
[296,267,279,295,296,0,281,270],
[269,278,289,288,296,270,0,282],
[305,263,274,280,277,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,280,272,278,266,278,277],
[287,0,270,275,269,274,286,260],
[271,281,0,281,278,285,286,260],
[279,276,270,0,284,295,285,272],
[273,282,273,267,0,259,285,277],
[285,277,266,256,292,0,287,274],
[273,265,265,266,266,264,0,276],
[274,291,291,279,274,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,291,275,280,278,263,285],
[268,0,261,303,277,282,268,265],
[260,290,0,273,287,285,251,284],
[276,248,278,0,266,274,253,268],
[271,274,264,285,0,260,254,273],
[273,269,266,277,291,0,290,297],
[288,283,300,298,297,261,0,291],
[266,286,267,283,278,254,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,277,320,307,321,280,248],
[300,0,270,335,312,272,262,260],
[274,281,0,301,291,285,239,300],
[231,216,250,0,246,231,229,232],
[244,239,260,305,0,260,217,264],
[230,279,266,320,291,0,248,299],
[271,289,312,322,334,303,0,299],
[303,291,251,319,287,252,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,276,258,284,283,268],
[275,0,265,245,252,256,254,260],
[271,286,0,230,239,255,235,254],
[275,306,321,0,286,289,286,304],
[293,299,312,265,0,276,282,285],
[267,295,296,262,275,0,263,270],
[268,297,316,265,269,288,0,278],
[283,291,297,247,266,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,281,271,272,280,286,310],
[279,0,278,259,313,273,252,294],
[270,273,0,270,290,253,260,307],
[280,292,281,0,278,268,266,297],
[279,238,261,273,0,259,275,279],
[271,278,298,283,292,0,267,286],
[265,299,291,285,276,284,0,309],
[241,257,244,254,272,265,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,342,237,229,265,276,240],
[226,0,443,357,361,232,243,189],
[209,108,0,199,149,38,74,213],
[314,194,352,0,294,229,265,290],
[322,190,402,257,0,169,171,326],
[286,319,513,322,382,0,259,300],
[275,308,477,286,380,292,0,322],
[311,362,338,261,225,251,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,251,271,296,246,249,266],
[270,0,279,286,307,246,269,266],
[300,272,0,274,278,260,268,260],
[280,265,277,0,284,265,287,270],
[255,244,273,267,0,225,242,272],
[305,305,291,286,326,0,268,271],
[302,282,283,264,309,283,0,286],
[285,285,291,281,279,280,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,268,326,274,317,285,283],
[247,0,288,294,263,278,268,256],
[283,263,0,312,269,283,265,276],
[225,257,239,0,233,265,248,255],
[277,288,282,318,0,290,268,297],
[234,273,268,286,261,0,250,249],
[266,283,286,303,283,301,0,297],
[268,295,275,296,254,302,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,280,271,260,262,262],
[286,0,277,295,272,275,278,275],
[287,274,0,283,259,257,267,266],
[271,256,268,0,259,276,265,264],
[280,279,292,292,0,259,275,271],
[291,276,294,275,292,0,267,287],
[289,273,284,286,276,284,0,277],
[289,276,285,287,280,264,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,255,269,263,261,260,260],
[285,0,279,274,268,254,256,266],
[296,272,0,274,300,253,269,259],
[282,277,277,0,274,267,273,271],
[288,283,251,277,0,252,259,254],
[290,297,298,284,299,0,279,270],
[291,295,282,278,292,272,0,277],
[291,285,292,280,297,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,272,272,299,292,295],
[268,0,279,279,274,282,291,268],
[274,272,0,268,256,279,278,261],
[279,272,283,0,281,310,300,284],
[279,277,295,270,0,289,290,277],
[252,269,272,241,262,0,267,256],
[259,260,273,251,261,284,0,277],
[256,283,290,267,274,295,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,274,271,276,264,260,258],
[294,0,277,282,290,279,271,265],
[277,274,0,265,278,260,250,276],
[280,269,286,0,284,270,253,270],
[275,261,273,267,0,270,250,277],
[287,272,291,281,281,0,282,282],
[291,280,301,298,301,269,0,280],
[293,286,275,281,274,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,288,302,263,314,255,304],
[272,0,271,288,288,299,236,264],
[263,280,0,316,272,332,295,306],
[249,263,235,0,241,302,283,267],
[288,263,279,310,0,318,321,331],
[237,252,219,249,233,0,268,286],
[296,315,256,268,230,283,0,313],
[247,287,245,284,220,265,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,269,290,277,272,286],
[278,0,233,247,279,293,249,263],
[263,318,0,267,306,285,273,283],
[282,304,284,0,290,287,280,265],
[261,272,245,261,0,274,264,281],
[274,258,266,264,277,0,245,280],
[279,302,278,271,287,306,0,305],
[265,288,268,286,270,271,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,282,266,291,302,274],
[262,0,260,269,261,276,291,278],
[277,291,0,285,286,297,287,274],
[269,282,266,0,250,287,282,282],
[285,290,265,301,0,291,300,291],
[260,275,254,264,260,0,277,264],
[249,260,264,269,251,274,0,268],
[277,273,277,269,260,287,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,254,277,253,269,288],
[281,0,253,264,302,267,263,288],
[284,298,0,288,307,283,272,296],
[297,287,263,0,295,285,291,312],
[274,249,244,256,0,233,258,284],
[298,284,268,266,318,0,279,294],
[282,288,279,260,293,272,0,294],
[263,263,255,239,267,257,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,288,274,284,270,281,291],
[289,0,320,281,301,295,309,269],
[263,231,0,242,262,259,263,265],
[277,270,309,0,299,270,294,275],
[267,250,289,252,0,274,250,256],
[281,256,292,281,277,0,248,278],
[270,242,288,257,301,303,0,258],
[260,282,286,276,295,273,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,262,316,234,315,297,249],
[257,0,300,259,263,308,260,239],
[289,251,0,292,287,278,274,293],
[235,292,259,0,249,259,269,170],
[317,288,264,302,0,258,327,284],
[236,243,273,292,293,0,300,261],
[254,291,277,282,224,251,0,240],
[302,312,258,381,267,290,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,260,278,267,280,277,258],
[293,0,271,280,289,301,278,264],
[291,280,0,285,272,290,271,275],
[273,271,266,0,268,282,276,257],
[284,262,279,283,0,291,286,278],
[271,250,261,269,260,0,290,261],
[274,273,280,275,265,261,0,266],
[293,287,276,294,273,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,288,293,285,278,278],
[270,0,275,284,276,273,270,267],
[279,276,0,277,289,278,269,279],
[263,267,274,0,293,270,266,263],
[258,275,262,258,0,254,276,270],
[266,278,273,281,297,0,281,283],
[273,281,282,285,275,270,0,283],
[273,284,272,288,281,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,237,285,217,258,260],
[286,0,263,254,281,220,293,296],
[287,288,0,249,266,276,311,303],
[314,297,302,0,305,260,315,323],
[266,270,285,246,0,233,308,269],
[334,331,275,291,318,0,333,335],
[293,258,240,236,243,218,0,261],
[291,255,248,228,282,216,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,301,284,285,295,273,294],
[283,0,279,281,274,286,280,277],
[250,272,0,282,254,258,246,273],
[267,270,269,0,273,260,279,282],
[266,277,297,278,0,269,278,274],
[256,265,293,291,282,0,277,279],
[278,271,305,272,273,274,0,281],
[257,274,278,269,277,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,279,275,281,281,283],
[283,0,316,271,296,278,292,298],
[270,235,0,270,283,262,294,270],
[272,280,281,0,286,275,308,263],
[276,255,268,265,0,260,282,254],
[270,273,289,276,291,0,292,287],
[270,259,257,243,269,259,0,262],
[268,253,281,288,297,264,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,267,273,276,280,274],
[263,0,253,256,249,279,269,270],
[271,298,0,272,276,287,280,297],
[284,295,279,0,262,283,271,291],
[278,302,275,289,0,281,293,288],
[275,272,264,268,270,0,267,268],
[271,282,271,280,258,284,0,280],
[277,281,254,260,263,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,243,245,255,243,261,242],
[253,0,240,237,223,235,259,230],
[308,311,0,298,265,279,296,279],
[306,314,253,0,274,248,282,248],
[296,328,286,277,0,252,283,258],
[308,316,272,303,299,0,285,288],
[290,292,255,269,268,266,0,225],
[309,321,272,303,293,263,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,274,262,260,283,284],
[278,0,276,252,295,272,274,275],
[276,275,0,279,269,282,290,292],
[277,299,272,0,278,271,286,303],
[289,256,282,273,0,276,284,282],
[291,279,269,280,275,0,287,308],
[268,277,261,265,267,264,0,268],
[267,276,259,248,269,243,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,285,283,274,276,273,261],
[276,0,287,274,263,273,271,280],
[266,264,0,270,261,283,268,275],
[268,277,281,0,277,290,274,278],
[277,288,290,274,0,289,279,294],
[275,278,268,261,262,0,264,267],
[278,280,283,277,272,287,0,277],
[290,271,276,273,257,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,245,190,207,239,202,210],
[334,0,343,274,283,295,274,264],
[306,208,0,260,217,265,258,250],
[361,277,291,0,284,302,234,268],
[344,268,334,267,0,319,271,285],
[312,256,286,249,232,0,228,238],
[349,277,293,317,280,323,0,266],
[341,287,301,283,266,313,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,293,294,266,310,294,279],
[244,0,263,270,261,268,270,251],
[258,288,0,280,280,300,268,251],
[257,281,271,0,272,294,265,289],
[285,290,271,279,0,321,294,296],
[241,283,251,257,230,0,243,239],
[257,281,283,286,257,308,0,253],
[272,300,300,262,255,312,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,279,270,280,260,295],
[258,0,280,281,273,272,268,256],
[271,271,0,264,284,294,273,295],
[272,270,287,0,258,297,273,297],
[281,278,267,293,0,285,281,300],
[271,279,257,254,266,0,222,281],
[291,283,278,278,270,329,0,290],
[256,295,256,254,251,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,319,313,336,301,323,273],
[229,0,288,317,276,288,270,345],
[232,263,0,280,282,288,309,249],
[238,234,271,0,311,289,347,327],
[215,275,269,240,0,279,247,280],
[250,263,263,262,272,0,293,231],
[228,281,242,204,304,258,0,239],
[278,206,302,224,271,320,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,235,249,249,273,253,240],
[280,0,260,233,267,240,250,271],
[316,291,0,264,330,288,287,314],
[302,318,287,0,297,247,296,284],
[302,284,221,254,0,228,279,288],
[278,311,263,304,323,0,290,285],
[298,301,264,255,272,261,0,273],
[311,280,237,267,263,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,283,280,280,286,268],
[265,0,270,274,249,281,278,264],
[265,281,0,266,264,284,278,270],
[268,277,285,0,270,277,288,273],
[271,302,287,281,0,279,287,280],
[271,270,267,274,272,0,292,271],
[265,273,273,263,264,259,0,257],
[283,287,281,278,271,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,253,273,261,267,261,255],
[279,0,284,263,282,281,264,268],
[298,267,0,277,287,284,274,274],
[278,288,274,0,276,295,283,281],
[290,269,264,275,0,278,276,254],
[284,270,267,256,273,0,264,262],
[290,287,277,268,275,287,0,267],
[296,283,277,270,297,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,305,287,288,334,287,271],
[255,0,280,301,276,279,261,274],
[246,271,0,288,266,312,238,239],
[264,250,263,0,257,306,265,245],
[263,275,285,294,0,316,272,292],
[217,272,239,245,235,0,267,217],
[264,290,313,286,279,284,0,273],
[280,277,312,306,259,334,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,272,203,286,319,266,286],
[326,0,281,238,275,305,244,227],
[279,270,0,250,275,299,277,297],
[348,313,301,0,325,290,263,315],
[265,276,276,226,0,282,319,289],
[232,246,252,261,269,0,320,244],
[285,307,274,288,232,231,0,232],
[265,324,254,236,262,307,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,280,301,306,314,287,267],
[223,0,239,250,237,267,241,246],
[271,312,0,276,266,315,253,286],
[250,301,275,0,281,307,276,262],
[245,314,285,270,0,300,268,269],
[237,284,236,244,251,0,251,224],
[264,310,298,275,283,300,0,292],
[284,305,265,289,282,327,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,251,255,271,265,286,245],
[256,0,253,241,247,232,248,242],
[300,298,0,285,303,273,284,279],
[296,310,266,0,280,298,286,238],
[280,304,248,271,0,269,242,269],
[286,319,278,253,282,0,277,274],
[265,303,267,265,309,274,0,285],
[306,309,272,313,282,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,292,287,275,292,281],
[271,0,271,252,266,241,249,267],
[262,280,0,279,274,248,269,266],
[259,299,272,0,281,253,274,279],
[264,285,277,270,0,246,278,282],
[276,310,303,298,305,0,273,280],
[259,302,282,277,273,278,0,273],
[270,284,285,272,269,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,255,249,283,263,291,267],
[273,0,282,252,284,255,283,263],
[296,269,0,244,272,256,271,277],
[302,299,307,0,269,283,297,291],
[268,267,279,282,0,261,282,285],
[288,296,295,268,290,0,304,308],
[260,268,280,254,269,247,0,294],
[284,288,274,260,266,243,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,244,275,281,278,258],
[274,0,296,278,265,283,295,287],
[268,255,0,253,263,290,287,276],
[307,273,298,0,274,300,308,279],
[276,286,288,277,0,284,279,267],
[270,268,261,251,267,0,269,269],
[273,256,264,243,272,282,0,257],
[293,264,275,272,284,282,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,270,279,270,265,264],
[281,0,266,267,272,282,267,262],
[289,285,0,271,285,285,280,276],
[281,284,280,0,274,283,269,265],
[272,279,266,277,0,276,276,269],
[281,269,266,268,275,0,272,272],
[286,284,271,282,275,279,0,256],
[287,289,275,286,282,279,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,291,267,274,310,280],
[266,0,271,284,282,286,302,273],
[274,280,0,309,289,263,313,277],
[260,267,242,0,250,236,290,261],
[284,269,262,301,0,272,298,241],
[277,265,288,315,279,0,329,277],
[241,249,238,261,253,222,0,219],
[271,278,274,290,310,274,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,299,241,265,295,248,260],
[312,0,316,275,280,300,310,299],
[252,235,0,261,273,284,269,252],
[310,276,290,0,292,280,279,274],
[286,271,278,259,0,296,274,243],
[256,251,267,271,255,0,261,256],
[303,241,282,272,277,290,0,254],
[291,252,299,277,308,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,281,279,266,341,269,256],
[254,0,303,293,280,325,309,265],
[270,248,0,285,239,272,270,251],
[272,258,266,0,249,303,256,249],
[285,271,312,302,0,305,292,286],
[210,226,279,248,246,0,266,252],
[282,242,281,295,259,285,0,240],
[295,286,300,302,265,299,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,255,331,194,283,297,235],
[262,0,266,334,283,320,306,294],
[296,285,0,336,207,311,286,267],
[220,217,215,0,185,263,257,266],
[357,268,344,366,0,299,314,271],
[268,231,240,288,252,0,258,254],
[254,245,265,294,237,293,0,280],
[316,257,284,285,280,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,291,285,283,261,286,267],
[302,0,291,304,304,293,295,268],
[260,260,0,274,275,253,250,252],
[266,247,277,0,260,261,286,249],
[268,247,276,291,0,273,299,261],
[290,258,298,290,278,0,269,276],
[265,256,301,265,252,282,0,257],
[284,283,299,302,290,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,285,282,291,270,295],
[278,0,294,274,280,295,294,290],
[274,257,0,272,272,275,281,280],
[266,277,279,0,282,295,271,280],
[269,271,279,269,0,283,280,293],
[260,256,276,256,268,0,283,282],
[281,257,270,280,271,268,0,288],
[256,261,271,271,258,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,286,273,282,291,284],
[271,0,294,273,280,258,274,271],
[255,257,0,267,257,230,263,260],
[265,278,284,0,263,265,274,273],
[278,271,294,288,0,268,290,277],
[269,293,321,286,283,0,305,285],
[260,277,288,277,261,246,0,248],
[267,280,291,278,274,266,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,259,268,283,285,276],
[279,0,281,271,271,297,295,272],
[284,270,0,272,280,284,297,274],
[292,280,279,0,275,293,290,280],
[283,280,271,276,0,284,283,280],
[268,254,267,258,267,0,284,265],
[266,256,254,261,268,267,0,270],
[275,279,277,271,271,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,274,312,333,275,275],
[273,0,249,238,272,288,264,264],
[271,302,0,255,284,292,263,251],
[277,313,296,0,297,304,313,274],
[239,279,267,254,0,306,262,257],
[218,263,259,247,245,0,264,247],
[276,287,288,238,289,287,0,279],
[276,287,300,277,294,304,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,295,272,293,305,269],
[248,0,250,290,263,294,268,232],
[271,301,0,318,338,355,274,284],
[256,261,233,0,230,263,259,303],
[279,288,213,321,0,253,270,255],
[258,257,196,288,298,0,245,292],
[246,283,277,292,281,306,0,257],
[282,319,267,248,296,259,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,279,237,276,238,288,339],
[308,0,226,207,266,221,269,277],
[272,325,0,338,322,313,273,317],
[314,344,213,0,244,229,285,355],
[275,285,229,307,0,225,255,339],
[313,330,238,322,326,0,257,334],
[263,282,278,266,296,294,0,307],
[212,274,234,196,212,217,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,287,259,263,262,269],
[284,0,289,272,269,282,275,293],
[271,262,0,263,245,274,254,281],
[264,279,288,0,280,276,269,264],
[292,282,306,271,0,284,281,283],
[288,269,277,275,267,0,266,273],
[289,276,297,282,270,285,0,276],
[282,258,270,287,268,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,299,349,298,323,258,338],
[254,0,309,323,315,310,316,279],
[252,242,0,313,273,243,267,306],
[202,228,238,0,240,214,245,271],
[253,236,278,311,0,243,287,259],
[228,241,308,337,308,0,311,333],
[293,235,284,306,264,240,0,301],
[213,272,245,280,292,218,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,269,272,276,304,266],
[273,0,258,277,275,270,291,273],
[274,293,0,294,279,289,287,289],
[282,274,257,0,283,290,273,276],
[279,276,272,268,0,277,283,270],
[275,281,262,261,274,0,276,276],
[247,260,264,278,268,275,0,251],
[285,278,262,275,281,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,269,280,266,269,278],
[283,0,266,274,263,273,281,283],
[281,285,0,283,266,255,290,279],
[282,277,268,0,284,285,310,278],
[271,288,285,267,0,272,289,270],
[285,278,296,266,279,0,313,292],
[282,270,261,241,262,238,0,272],
[273,268,272,273,281,259,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,365,245,292,371,464,346],
[267,0,379,169,213,336,394,331],
[186,172,0,133,293,299,492,302],
[306,382,418,0,242,319,394,305],
[259,338,258,309,0,407,435,259],
[180,215,252,232,144,0,366,252],
[87,157,59,157,116,185,0,78],
[205,220,249,246,292,299,473,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,273,242,275,260,237,243],
[334,0,321,280,349,254,284,309],
[278,230,0,211,253,226,278,239],
[309,271,340,0,343,285,277,304],
[276,202,298,208,0,261,205,250],
[291,297,325,266,290,0,311,295],
[314,267,273,274,346,240,0,272],
[308,242,312,247,301,256,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,277,257,288,275,274],
[257,0,238,251,253,278,279,269],
[279,313,0,271,299,290,302,295],
[274,300,280,0,276,272,308,274],
[294,298,252,275,0,287,290,275],
[263,273,261,279,264,0,294,274],
[276,272,249,243,261,257,0,289],
[277,282,256,277,276,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,271,265,246,289,236,255],
[310,0,310,270,277,303,266,277],
[280,241,0,283,252,313,280,266],
[286,281,268,0,254,314,205,273],
[305,274,299,297,0,314,288,272],
[262,248,238,237,237,0,243,228],
[315,285,271,346,263,308,0,304],
[296,274,285,278,279,323,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,252,268,274,260,277,268],
[277,0,269,283,279,286,269,301],
[299,282,0,275,302,277,279,298],
[283,268,276,0,279,279,291,293],
[277,272,249,272,0,259,291,272],
[291,265,274,272,292,0,283,262],
[274,282,272,260,260,268,0,269],
[283,250,253,258,279,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,314,264,302,284,295,272],
[269,0,291,257,286,277,276,265],
[237,260,0,231,269,254,267,253],
[287,294,320,0,290,249,306,282],
[249,265,282,261,0,265,267,288],
[267,274,297,302,286,0,287,285],
[256,275,284,245,284,264,0,294],
[279,286,298,269,263,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,236,283,261,254,271,290],
[307,0,274,278,286,283,312,319],
[315,277,0,285,259,268,303,322],
[268,273,266,0,244,279,310,310],
[290,265,292,307,0,272,330,321],
[297,268,283,272,279,0,303,300],
[280,239,248,241,221,248,0,291],
[261,232,229,241,230,251,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,283,295,273,249,280],
[263,0,292,273,309,277,271,270],
[274,259,0,284,312,301,261,291],
[268,278,267,0,322,299,301,283],
[256,242,239,229,0,262,237,245],
[278,274,250,252,289,0,257,299],
[302,280,290,250,314,294,0,275],
[271,281,260,268,306,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,273,273,278,261,273,277],
[298,0,282,288,273,277,283,281],
[278,269,0,254,249,279,254,287],
[278,263,297,0,255,292,276,305],
[273,278,302,296,0,262,273,294],
[290,274,272,259,289,0,266,287],
[278,268,297,275,278,285,0,302],
[274,270,264,246,257,264,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,255,303,283,267,204,296],
[258,0,254,303,278,288,251,272],
[296,297,0,301,276,246,224,253],
[248,248,250,0,206,235,253,200],
[268,273,275,345,0,294,285,248],
[284,263,305,316,257,0,281,288],
[347,300,327,298,266,270,0,259],
[255,279,298,351,303,263,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,301,278,272,271,294],
[283,0,273,302,270,279,271,271],
[271,278,0,295,272,268,279,268],
[250,249,256,0,270,261,251,252],
[273,281,279,281,0,275,265,289],
[279,272,283,290,276,0,264,270],
[280,280,272,300,286,287,0,291],
[257,280,283,299,262,281,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,295,280,276,272,275,262],
[290,0,301,297,281,277,279,264],
[256,250,0,276,273,254,253,257],
[271,254,275,0,281,277,266,271],
[275,270,278,270,0,271,259,265],
[279,274,297,274,280,0,276,263],
[276,272,298,285,292,275,0,282],
[289,287,294,280,286,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,281,295,278,287,308,278],
[306,0,261,302,285,277,308,313],
[270,290,0,305,270,286,285,282],
[256,249,246,0,280,284,299,298],
[273,266,281,271,0,289,287,264],
[264,274,265,267,262,0,272,274],
[243,243,266,252,264,279,0,256],
[273,238,269,253,287,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,287,270,275,269,274],
[273,0,272,281,263,259,261,262],
[267,279,0,276,276,282,277,264],
[264,270,275,0,278,266,262,270],
[281,288,275,273,0,286,273,291],
[276,292,269,285,265,0,282,274],
[282,290,274,289,278,269,0,280],
[277,289,287,281,260,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,255,261,293,296,274,250],
[271,0,260,279,287,289,284,278],
[296,291,0,258,277,296,286,283],
[290,272,293,0,309,312,285,270],
[258,264,274,242,0,283,277,264],
[255,262,255,239,268,0,260,260],
[277,267,265,266,274,291,0,276],
[301,273,268,281,287,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,293,285,289,287,269,273],
[267,0,274,265,268,273,299,266],
[258,277,0,250,246,279,276,255],
[266,286,301,0,278,286,304,258],
[262,283,305,273,0,290,298,277],
[264,278,272,265,261,0,285,260],
[282,252,275,247,253,266,0,253],
[278,285,296,293,274,291,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,198,234,275,193,282,253],
[278,0,227,224,209,170,239,258],
[353,324,0,274,298,284,282,236],
[317,327,277,0,275,284,308,239],
[276,342,253,276,0,176,301,221],
[358,381,267,267,375,0,338,302],
[269,312,269,243,250,213,0,200],
[298,293,315,312,330,249,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,262,271,216,275,278,285],
[313,0,298,304,282,253,299,322],
[289,253,0,296,262,233,307,311],
[280,247,255,0,232,222,261,295],
[335,269,289,319,0,286,290,334],
[276,298,318,329,265,0,313,332],
[273,252,244,290,261,238,0,266],
[266,229,240,256,217,219,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,253,276,265,297,278],
[289,0,274,252,266,259,273,282],
[278,277,0,265,285,273,270,272],
[298,299,286,0,288,275,308,302],
[275,285,266,263,0,257,293,296],
[286,292,278,276,294,0,299,275],
[254,278,281,243,258,252,0,272],
[273,269,279,249,255,276,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,290,276,262,270,282,267],
[288,0,283,259,283,271,297,286],
[261,268,0,265,267,264,267,263],
[275,292,286,0,273,281,275,274],
[289,268,284,278,0,279,287,263],
[281,280,287,270,272,0,259,262],
[269,254,284,276,264,292,0,273],
[284,265,288,277,288,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,294,292,261,248,283],
[280,0,324,301,299,287,275,285],
[270,227,0,287,290,236,253,272],
[257,250,264,0,276,239,243,268],
[259,252,261,275,0,218,235,255],
[290,264,315,312,333,0,295,296],
[303,276,298,308,316,256,0,280],
[268,266,279,283,296,255,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,218,260,324,249,218,170],
[275,0,243,177,359,251,313,170],
[333,308,0,302,438,328,241,285],
[291,374,249,0,363,251,272,284],
[227,192,113,188,0,161,200,126],
[302,300,223,300,390,0,264,238],
[333,238,310,279,351,287,0,230],
[381,381,266,267,425,313,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,251,278,291,238,297,259],
[267,0,264,288,295,259,278,249],
[300,287,0,295,311,291,271,283],
[273,263,256,0,298,265,269,258],
[260,256,240,253,0,238,282,251],
[313,292,260,286,313,0,313,274],
[254,273,280,282,269,238,0,264],
[292,302,268,293,300,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,309,247,243,205,281],
[270,0,245,250,306,259,227,267],
[263,306,0,256,265,286,264,234],
[242,301,295,0,293,299,237,242],
[304,245,286,258,0,305,276,220],
[308,292,265,252,246,0,217,224],
[346,324,287,314,275,334,0,308],
[270,284,317,309,331,327,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,267,281,271,242,275,294],
[255,0,252,242,285,249,274,264],
[284,299,0,270,290,261,260,303],
[270,309,281,0,302,253,310,318],
[280,266,261,249,0,282,272,302],
[309,302,290,298,269,0,310,323],
[276,277,291,241,279,241,0,282],
[257,287,248,233,249,228,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,261,276,280,279,280,306],
[248,0,257,238,276,256,276,246],
[290,294,0,275,283,283,274,293],
[275,313,276,0,288,312,289,288],
[271,275,268,263,0,268,279,277],
[272,295,268,239,283,0,265,281],
[271,275,277,262,272,286,0,289],
[245,305,258,263,274,270,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,275,293,297,258,288],
[277,0,254,275,273,247,260,254],
[267,297,0,268,261,272,274,268],
[276,276,283,0,304,253,308,269],
[258,278,290,247,0,225,270,247],
[254,304,279,298,326,0,311,289],
[293,291,277,243,281,240,0,274],
[263,297,283,282,304,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,294,284,277,316,300,274],
[217,0,283,257,260,291,259,262],
[257,268,0,259,238,271,252,258],
[267,294,292,0,265,291,267,279],
[274,291,313,286,0,300,294,279],
[235,260,280,260,251,0,251,273],
[251,292,299,284,257,300,0,293],
[277,289,293,272,272,278,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,279,286,286,273,282,280],
[299,0,294,275,283,280,293,278],
[272,257,0,266,278,279,272,274],
[265,276,285,0,279,288,295,292],
[265,268,273,272,0,267,266,284],
[278,271,272,263,284,0,293,278],
[269,258,279,256,285,258,0,272],
[271,273,277,259,267,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,291,279,278,273,273],
[291,0,279,293,304,247,276,270],
[286,272,0,296,302,292,307,286],
[260,258,255,0,274,238,288,264],
[272,247,249,277,0,235,268,261],
[273,304,259,313,316,0,306,275],
[278,275,244,263,283,245,0,274],
[278,281,265,287,290,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,290,262,247,280,275,310],
[264,0,252,250,309,264,254,317],
[261,299,0,231,284,236,305,272],
[289,301,320,0,327,259,265,310],
[304,242,267,224,0,216,278,294],
[271,287,315,292,335,0,294,336],
[276,297,246,286,273,257,0,306],
[241,234,279,241,257,215,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,246,248,244,261,262],
[294,0,275,260,266,266,273,287],
[290,276,0,265,257,278,265,274],
[305,291,286,0,276,287,259,303],
[303,285,294,275,0,295,278,292],
[307,285,273,264,256,0,270,279],
[290,278,286,292,273,281,0,281],
[289,264,277,248,259,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,206,192,215,205,194,247],
[358,0,293,297,306,325,322,268],
[345,258,0,245,311,318,265,297],
[359,254,306,0,299,326,264,301],
[336,245,240,252,0,264,285,258],
[346,226,233,225,287,0,248,316],
[357,229,286,287,266,303,0,279],
[304,283,254,250,293,235,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,275,291,295,255,290,292],
[332,0,314,406,324,312,318,252],
[276,237,0,257,297,295,280,286],
[260,145,294,0,279,233,258,246],
[256,227,254,272,0,245,213,266],
[296,239,256,318,306,0,268,216],
[261,233,271,293,338,283,0,222],
[259,299,265,305,285,335,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,282,291,285,293,276],
[271,0,285,270,280,279,286,272],
[280,266,0,272,274,290,303,275],
[269,281,279,0,286,276,291,259],
[260,271,277,265,0,264,259,279],
[266,272,261,275,287,0,275,292],
[258,265,248,260,292,276,0,273],
[275,279,276,292,272,259,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,280,283,283,279,271],
[271,0,276,276,267,283,289,271],
[281,275,0,273,272,288,275,268],
[271,275,278,0,276,282,290,272],
[268,284,279,275,0,286,282,281],
[268,268,263,269,265,0,283,258],
[272,262,276,261,269,268,0,265],
[280,280,283,279,270,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,269,279,258,276,289,273],
[266,0,275,265,274,271,300,248],
[282,276,0,255,283,277,302,262],
[272,286,296,0,259,292,295,267],
[293,277,268,292,0,283,286,289],
[275,280,274,259,268,0,294,278],
[262,251,249,256,265,257,0,241],
[278,303,289,284,262,273,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,267,253,276,261,299],
[279,0,296,292,288,269,272,276],
[282,255,0,263,254,281,270,266],
[284,259,288,0,262,285,281,309],
[298,263,297,289,0,278,270,301],
[275,282,270,266,273,0,302,305],
[290,279,281,270,281,249,0,285],
[252,275,285,242,250,246,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,290,277,280,286,269],
[274,0,280,273,274,289,290,276],
[277,271,0,294,281,292,287,271],
[261,278,257,0,260,280,269,260],
[274,277,270,291,0,295,287,271],
[271,262,259,271,256,0,268,249],
[265,261,264,282,264,283,0,259],
[282,275,280,291,280,302,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,290,299,297,271,252,272],
[292,0,283,277,302,276,275,284],
[261,268,0,260,270,267,256,254],
[252,274,291,0,267,274,260,273],
[254,249,281,284,0,269,257,278],
[280,275,284,277,282,0,276,275],
[299,276,295,291,294,275,0,279],
[279,267,297,278,273,276,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,319,273,288,273,284,253],
[279,0,275,301,267,261,279,272],
[232,276,0,287,283,281,275,259],
[278,250,264,0,263,283,266,262],
[263,284,268,288,0,260,263,274],
[278,290,270,268,291,0,280,255],
[267,272,276,285,288,271,0,291],
[298,279,292,289,277,296,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,250,275,287,274,259,251],
[278,0,273,287,257,273,271,256],
[301,278,0,311,287,288,310,255],
[276,264,240,0,239,252,259,281],
[264,294,264,312,0,268,262,255],
[277,278,263,299,283,0,259,239],
[292,280,241,292,289,292,0,257],
[300,295,296,270,296,312,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,299,267,276,259,280],
[282,0,298,293,282,278,269,294],
[267,253,0,275,269,254,261,275],
[252,258,276,0,266,271,258,282],
[284,269,282,285,0,267,279,293],
[275,273,297,280,284,0,300,297],
[292,282,290,293,272,251,0,296],
[271,257,276,269,258,254,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,266,260,279,276,276,264],
[256,0,239,283,281,256,254,266],
[285,312,0,295,302,290,271,297],
[291,268,256,0,292,273,273,260],
[272,270,249,259,0,267,250,262],
[275,295,261,278,284,0,268,261],
[275,297,280,278,301,283,0,279],
[287,285,254,291,289,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,286,266,283,279,291,265],
[244,0,267,269,282,281,272,255],
[265,284,0,280,286,280,275,274],
[285,282,271,0,303,295,281,274],
[268,269,265,248,0,267,269,271],
[272,270,271,256,284,0,250,253],
[260,279,276,270,282,301,0,281],
[286,296,277,277,280,298,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,286,306,250,289,282,289],
[245,0,271,266,225,257,232,235],
[265,280,0,285,248,281,237,266],
[245,285,266,0,248,237,220,217],
[301,326,303,303,0,301,267,251],
[262,294,270,314,250,0,239,240],
[269,319,314,331,284,312,0,244],
[262,316,285,334,300,311,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,276,257,269,252,205,290],
[312,0,291,259,261,322,251,326],
[275,260,0,281,281,290,237,326],
[294,292,270,0,348,320,296,324],
[282,290,270,203,0,334,265,307],
[299,229,261,231,217,0,231,324],
[346,300,314,255,286,320,0,353],
[261,225,225,227,244,227,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,278,279,293,276,273],
[274,0,307,291,255,297,278,286],
[277,244,0,261,280,271,266,275],
[273,260,290,0,284,281,278,278],
[272,296,271,267,0,293,276,280],
[258,254,280,270,258,0,261,263],
[275,273,285,273,275,290,0,289],
[278,265,276,273,271,288,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,259,251,256,284,282],
[269,0,279,259,271,260,266,282],
[263,272,0,267,261,261,272,281],
[292,292,284,0,270,268,290,265],
[300,280,290,281,0,277,284,275],
[295,291,290,283,274,0,286,292],
[267,285,279,261,267,265,0,267],
[269,269,270,286,276,259,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,289,268,269,293,286,275],
[280,0,271,279,282,294,290,277],
[262,280,0,260,265,300,274,269],
[283,272,291,0,275,278,295,286],
[282,269,286,276,0,286,296,266],
[258,257,251,273,265,0,254,258],
[265,261,277,256,255,297,0,283],
[276,274,282,265,285,293,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,270,294,280,271,296],
[260,0,256,250,278,264,270,282],
[277,295,0,271,296,262,286,266],
[281,301,280,0,279,269,291,285],
[257,273,255,272,0,249,278,268],
[271,287,289,282,302,0,297,278],
[280,281,265,260,273,254,0,258],
[255,269,285,266,283,273,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,275,288,278,278,277],
[278,0,253,281,285,260,267,271],
[287,298,0,288,298,301,282,272],
[276,270,263,0,275,283,281,261],
[263,266,253,276,0,300,284,245],
[273,291,250,268,251,0,277,245],
[273,284,269,270,267,274,0,263],
[274,280,279,290,306,306,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,289,256,266,255,272,273],
[286,0,276,271,294,283,271,279],
[262,275,0,280,293,285,291,277],
[295,280,271,0,272,259,284,296],
[285,257,258,279,0,270,271,269],
[296,268,266,292,281,0,276,289],
[279,280,260,267,280,275,0,286],
[278,272,274,255,282,262,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,323,306,344,327,330],
[273,0,251,306,325,355,367,308],
[285,300,0,254,312,311,358,269],
[228,245,297,0,293,349,310,254],
[245,226,239,258,0,321,309,275],
[207,196,240,202,230,0,253,218],
[224,184,193,241,242,298,0,244],
[221,243,282,297,276,333,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,199,182,232,217,137,168,198],
[352,0,308,350,304,260,269,242],
[369,243,0,257,284,242,236,275],
[319,201,294,0,265,242,200,256],
[334,247,267,286,0,237,255,249],
[414,291,309,309,314,0,260,295],
[383,282,315,351,296,291,0,271],
[353,309,276,295,302,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,287,305,288,309,277],
[273,0,259,286,296,269,292,283],
[278,292,0,273,264,263,288,288],
[264,265,278,0,281,263,306,280],
[246,255,287,270,0,266,290,273],
[263,282,288,288,285,0,283,288],
[242,259,263,245,261,268,0,283],
[274,268,263,271,278,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,267,282,255,257,268,243],
[297,0,248,262,282,279,272,259],
[284,303,0,259,279,282,266,284],
[269,289,292,0,267,276,271,266],
[296,269,272,284,0,281,280,258],
[294,272,269,275,270,0,256,263],
[283,279,285,280,271,295,0,285],
[308,292,267,285,293,288,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,283,254,270,279,274,288],
[290,0,273,267,280,266,284,277],
[268,278,0,282,267,297,280,290],
[297,284,269,0,279,292,290,287],
[281,271,284,272,0,292,265,282],
[272,285,254,259,259,0,250,265],
[277,267,271,261,286,301,0,288],
[263,274,261,264,269,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,295,277,274,256,260],
[295,0,306,284,296,284,257,279],
[285,245,0,299,272,277,279,292],
[256,267,252,0,252,266,272,243],
[274,255,279,299,0,264,271,263],
[277,267,274,285,287,0,295,279],
[295,294,272,279,280,256,0,279],
[291,272,259,308,288,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,239,230,256,247,274,264],
[313,0,265,293,249,254,279,299],
[312,286,0,292,283,267,303,307],
[321,258,259,0,272,278,261,279],
[295,302,268,279,0,262,324,294],
[304,297,284,273,289,0,296,315],
[277,272,248,290,227,255,0,274],
[287,252,244,272,257,236,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,264,252,266,275,284,288],
[253,0,263,259,246,257,268,276],
[287,288,0,281,255,276,288,305],
[299,292,270,0,268,276,267,295],
[285,305,296,283,0,273,290,310],
[276,294,275,275,278,0,274,279],
[267,283,263,284,261,277,0,292],
[263,275,246,256,241,272,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,262,284,243,273,275,276],
[267,0,258,264,250,271,250,260],
[289,293,0,282,282,288,289,275],
[267,287,269,0,254,268,264,281],
[308,301,269,297,0,292,286,286],
[278,280,263,283,259,0,257,291],
[276,301,262,287,265,294,0,255],
[275,291,276,270,265,260,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,278,293,306,276,270],
[276,0,262,271,297,285,263,280],
[262,289,0,259,299,285,264,286],
[273,280,292,0,286,293,270,267],
[258,254,252,265,0,285,248,257],
[245,266,266,258,266,0,262,245],
[275,288,287,281,303,289,0,285],
[281,271,265,284,294,306,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,288,303,248,270,282,270],
[273,0,274,272,259,254,273,294],
[263,277,0,281,265,258,280,258],
[248,279,270,0,271,251,273,264],
[303,292,286,280,0,269,300,274],
[281,297,293,300,282,0,294,266],
[269,278,271,278,251,257,0,264],
[281,257,293,287,277,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,307,268,275,287,272,275],
[255,0,308,263,260,291,293,240],
[244,243,0,256,247,266,246,232],
[283,288,295,0,286,275,299,288],
[276,291,304,265,0,264,284,244],
[264,260,285,276,287,0,272,253],
[279,258,305,252,267,279,0,267],
[276,311,319,263,307,298,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,244,259,288,269,282,297],
[284,0,261,266,281,303,289,297],
[307,290,0,270,307,305,289,323],
[292,285,281,0,276,305,272,269],
[263,270,244,275,0,261,267,265],
[282,248,246,246,290,0,262,275],
[269,262,262,279,284,289,0,267],
[254,254,228,282,286,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,264,225,194,321,296,260],
[257,0,323,201,269,308,331,265],
[287,228,0,144,239,221,305,203],
[326,350,407,0,345,309,374,234],
[357,282,312,206,0,316,365,280],
[230,243,330,242,235,0,238,246],
[255,220,246,177,186,313,0,226],
[291,286,348,317,271,305,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,252,248,164,265,296,225],
[380,0,331,272,271,374,344,331],
[299,220,0,244,199,267,315,260],
[303,279,307,0,235,285,312,234],
[387,280,352,316,0,305,273,285],
[286,177,284,266,246,0,299,234],
[255,207,236,239,278,252,0,253],
[326,220,291,317,266,317,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,281,280,291,278,277,300],
[278,0,289,264,279,289,251,283],
[270,262,0,249,250,251,240,274],
[271,287,302,0,282,260,280,291],
[260,272,301,269,0,263,268,293],
[273,262,300,291,288,0,249,278],
[274,300,311,271,283,302,0,314],
[251,268,277,260,258,273,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,251,282,285,263,310,264],
[271,0,268,279,297,267,301,258],
[300,283,0,320,307,267,338,291],
[269,272,231,0,281,247,294,260],
[266,254,244,270,0,244,298,247],
[288,284,284,304,307,0,310,261],
[241,250,213,257,253,241,0,233],
[287,293,260,291,304,290,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,286,270,304,279,284],
[263,0,257,266,234,270,258,250],
[272,294,0,290,266,310,279,264],
[265,285,261,0,275,297,274,287],
[281,317,285,276,0,304,272,285],
[247,281,241,254,247,0,271,265],
[272,293,272,277,279,280,0,286],
[267,301,287,264,266,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,299,259,356,314,344,276],
[271,0,278,293,318,310,321,277],
[252,273,0,261,288,300,284,266],
[292,258,290,0,266,304,299,271],
[195,233,263,285,0,228,266,247],
[237,241,251,247,323,0,265,231],
[207,230,267,252,285,286,0,212],
[275,274,285,280,304,320,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,284,294,287,309,279,267],
[249,0,286,234,268,293,239,273],
[267,265,0,288,284,325,276,266],
[257,317,263,0,277,292,249,281],
[264,283,267,274,0,342,289,273],
[242,258,226,259,209,0,270,214],
[272,312,275,302,262,281,0,266],
[284,278,285,270,278,337,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,281,290,276,286,271],
[288,0,275,272,306,271,283,292],
[280,276,0,280,279,276,289,270],
[270,279,271,0,291,284,283,278],
[261,245,272,260,0,276,282,277],
[275,280,275,267,275,0,284,282],
[265,268,262,268,269,267,0,265],
[280,259,281,273,274,269,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,236,273,272,264,248,263],
[307,0,294,274,285,274,277,282],
[315,257,0,281,286,274,280,267],
[278,277,270,0,272,269,260,280],
[279,266,265,279,0,266,254,263],
[287,277,277,282,285,0,284,259],
[303,274,271,291,297,267,0,274],
[288,269,284,271,288,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,289,292,265,281,293],
[259,0,276,288,286,265,273,275],
[284,275,0,298,299,275,297,299],
[262,263,253,0,276,277,275,278],
[259,265,252,275,0,265,258,296],
[286,286,276,274,286,0,293,285],
[270,278,254,276,293,258,0,300],
[258,276,252,273,255,266,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,262,308,314,269,273,257],
[252,0,247,285,276,291,276,259],
[289,304,0,317,288,259,271,278],
[243,266,234,0,291,273,279,275],
[237,275,263,260,0,256,265,255],
[282,260,292,278,295,0,275,267],
[278,275,280,272,286,276,0,263],
[294,292,273,276,296,284,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,284,288,264,280,276],
[281,0,277,279,279,277,269,280],
[278,274,0,283,281,285,256,284],
[267,272,268,0,269,258,266,253],
[263,272,270,282,0,263,264,272],
[287,274,266,293,288,0,280,263],
[271,282,295,285,287,271,0,269],
[275,271,267,298,279,288,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,264,296,270,254,299,289],
[260,0,270,259,287,269,261,304],
[287,281,0,271,283,275,278,284],
[255,292,280,0,293,279,269,293],
[281,264,268,258,0,259,279,282],
[297,282,276,272,292,0,294,290],
[252,290,273,282,272,257,0,264],
[262,247,267,258,269,261,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,295,282,263,285,271,274],
[262,0,276,275,262,282,280,278],
[256,275,0,279,278,276,268,272],
[269,276,272,0,268,290,285,283],
[288,289,273,283,0,295,281,285],
[266,269,275,261,256,0,267,262],
[280,271,283,266,270,284,0,280],
[277,273,279,268,266,289,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,304,278,270,293,283,297],
[252,0,272,254,254,278,243,283],
[247,279,0,265,241,257,255,263],
[273,297,286,0,271,282,271,275],
[281,297,310,280,0,303,287,271],
[258,273,294,269,248,0,267,277],
[268,308,296,280,264,284,0,293],
[254,268,288,276,280,274,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,223,287,205,221,220,262],
[270,0,217,250,255,250,230,294],
[328,334,0,355,287,255,290,340],
[264,301,196,0,239,246,177,273],
[346,296,264,312,0,322,324,304],
[330,301,296,305,229,0,227,291],
[331,321,261,374,227,324,0,296],
[289,257,211,278,247,260,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,280,273,295,272,282],
[279,0,272,279,276,276,262,263],
[265,279,0,273,285,258,263,262],
[271,272,278,0,268,281,261,266],
[278,275,266,283,0,278,285,284],
[256,275,293,270,273,0,272,280],
[279,289,288,290,266,279,0,269],
[269,288,289,285,267,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,321,326,299,298,322,292],
[308,0,314,321,293,314,275,309],
[230,237,0,268,297,248,240,257],
[225,230,283,0,271,257,270,282],
[252,258,254,280,0,244,259,260],
[253,237,303,294,307,0,284,288],
[229,276,311,281,292,267,0,277],
[259,242,294,269,291,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,297,279,303,313,308,268],
[261,0,270,285,295,307,276,266],
[254,281,0,260,283,269,263,235],
[272,266,291,0,289,295,275,249],
[248,256,268,262,0,277,245,258],
[238,244,282,256,274,0,276,264],
[243,275,288,276,306,275,0,280],
[283,285,316,302,293,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,273,278,280,280,283],
[268,0,272,283,271,287,291,288],
[265,279,0,264,271,268,288,291],
[278,268,287,0,265,300,294,291],
[273,280,280,286,0,292,296,288],
[271,264,283,251,259,0,271,255],
[271,260,263,257,255,280,0,273],
[268,263,260,260,263,296,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,298,269,310,273,270,279],
[253,0,275,256,282,266,259,257],
[253,276,0,277,277,280,252,271],
[282,295,274,0,290,280,250,261],
[241,269,274,261,0,265,267,260],
[278,285,271,271,286,0,277,268],
[281,292,299,301,284,274,0,281],
[272,294,280,290,291,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,261,262,257,262,249],
[283,0,259,278,260,253,259,268],
[271,292,0,292,276,294,295,293],
[290,273,259,0,265,292,293,251],
[289,291,275,286,0,274,257,276],
[294,298,257,259,277,0,283,275],
[289,292,256,258,294,268,0,242],
[302,283,258,300,275,276,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,256,236,213,257,248,241],
[316,0,292,271,301,280,283,313],
[295,259,0,281,265,255,277,269],
[315,280,270,0,312,284,276,294],
[338,250,286,239,0,273,265,275],
[294,271,296,267,278,0,279,263],
[303,268,274,275,286,272,0,292],
[310,238,282,257,276,288,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,356,307,232,253,275,277],
[288,0,463,231,196,357,264,215],
[195,88,0,190,220,174,143,227],
[244,320,361,0,271,323,294,140],
[319,355,331,280,0,333,268,338],
[298,194,377,228,218,0,171,169],
[276,287,408,257,283,380,0,292],
[274,336,324,411,213,382,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,192,256,252,264,238,235,249],
[359,0,291,277,317,247,296,299],
[295,260,0,289,269,248,231,293],
[299,274,262,0,296,277,260,293],
[287,234,282,255,0,207,291,290],
[313,304,303,274,344,0,264,317],
[316,255,320,291,260,287,0,291],
[302,252,258,258,261,234,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,225,194,233,269,224,165],
[374,0,247,297,262,303,320,318],
[326,304,0,263,229,317,299,301],
[357,254,288,0,248,315,320,310],
[318,289,322,303,0,299,300,264],
[282,248,234,236,252,0,278,259],
[327,231,252,231,251,273,0,246],
[386,233,250,241,287,292,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,314,299,346,339,272,359],
[259,0,243,262,320,256,280,288],
[237,308,0,289,304,322,301,273],
[252,289,262,0,327,289,317,307],
[205,231,247,224,0,252,245,264],
[212,295,229,262,299,0,245,261],
[279,271,250,234,306,306,0,322],
[192,263,278,244,287,290,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,272,281,269,279,275],
[281,0,277,281,278,265,236,280],
[262,274,0,269,273,270,280,268],
[279,270,282,0,289,255,248,252],
[270,273,278,262,0,249,237,254],
[282,286,281,296,302,0,268,258],
[272,315,271,303,314,283,0,293],
[276,271,283,299,297,293,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,297,274,274,257,273,280],
[288,0,290,280,282,272,282,299],
[254,261,0,269,243,258,274,289],
[277,271,282,0,247,267,272,302],
[277,269,308,304,0,280,288,322],
[294,279,293,284,271,0,306,288],
[278,269,277,279,263,245,0,293],
[271,252,262,249,229,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,260,283,257,239,269,264],
[275,0,271,272,264,239,273,258],
[291,280,0,282,285,255,272,272],
[268,279,269,0,271,266,256,269],
[294,287,266,280,0,276,281,297],
[312,312,296,285,275,0,286,301],
[282,278,279,295,270,265,0,298],
[287,293,279,282,254,250,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,295,261,284,282,249,262],
[287,0,280,275,259,290,286,290],
[256,271,0,269,284,250,262,296],
[290,276,282,0,277,263,274,271],
[267,292,267,274,0,320,278,272],
[269,261,301,288,231,0,259,253],
[302,265,289,277,273,292,0,266],
[289,261,255,280,279,298,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,247,266,264,289,277,267],
[273,0,284,274,267,284,258,229],
[304,267,0,283,310,318,289,254],
[285,277,268,0,272,287,264,286],
[287,284,241,279,0,299,275,264],
[262,267,233,264,252,0,253,238],
[274,293,262,287,276,298,0,284],
[284,322,297,265,287,313,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,331,259,222,250,260,318],
[243,0,263,281,251,273,270,333],
[220,288,0,202,174,212,173,277],
[292,270,349,0,281,300,358,264],
[329,300,377,270,0,295,293,370],
[301,278,339,251,256,0,285,248],
[291,281,378,193,258,266,0,268],
[233,218,274,287,181,303,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,278,281,271,276,279],
[282,0,302,299,287,295,295,267],
[264,249,0,266,267,274,280,250],
[273,252,285,0,284,290,287,257],
[270,264,284,267,0,276,271,267],
[280,256,277,261,275,0,265,257],
[275,256,271,264,280,286,0,265],
[272,284,301,294,284,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,299,285,277,261,316,283],
[220,0,273,251,229,248,283,306],
[252,278,0,266,246,249,299,300],
[266,300,285,0,257,242,304,297],
[274,322,305,294,0,284,298,323],
[290,303,302,309,267,0,322,306],
[235,268,252,247,253,229,0,258],
[268,245,251,254,228,245,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,248,280,303,259,296],
[281,0,296,247,258,314,290,293],
[274,255,0,263,272,299,258,320],
[303,304,288,0,271,315,282,304],
[271,293,279,280,0,303,275,317],
[248,237,252,236,248,0,239,273],
[292,261,293,269,276,312,0,339],
[255,258,231,247,234,278,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,283,264,289,266,273],
[286,0,295,285,274,278,283,304],
[264,256,0,256,244,267,247,281],
[268,266,295,0,265,250,271,295],
[287,277,307,286,0,285,275,311],
[262,273,284,301,266,0,284,280],
[285,268,304,280,276,267,0,298],
[278,247,270,256,240,271,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,290,276,293,253,284,318],
[337,0,325,322,270,315,259,324],
[261,226,0,226,274,238,244,286],
[275,229,325,0,313,248,236,286],
[258,281,277,238,0,280,261,321],
[298,236,313,303,271,0,268,301],
[267,292,307,315,290,283,0,314],
[233,227,265,265,230,250,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,278,275,277,281,282],
[275,0,284,274,270,275,276,278],
[265,267,0,285,269,278,271,289],
[273,277,266,0,268,246,277,283],
[276,281,282,283,0,273,281,277],
[274,276,273,305,278,0,280,280],
[270,275,280,274,270,271,0,267],
[269,273,262,268,274,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,259,288,279,269,282,279],
[279,0,284,270,293,297,269,291],
[292,267,0,272,301,282,265,307],
[263,281,279,0,303,289,280,304],
[272,258,250,248,0,293,255,265],
[282,254,269,262,258,0,256,271],
[269,282,286,271,296,295,0,311],
[272,260,244,247,286,280,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,289,283,286,264,279],
[266,0,293,272,270,259,264,305],
[274,258,0,279,247,243,232,274],
[262,279,272,0,280,277,255,270],
[268,281,304,271,0,258,245,263],
[265,292,308,274,293,0,281,322],
[287,287,319,296,306,270,0,286],
[272,246,277,281,288,229,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,253,273,264,275,280,242],
[294,0,272,305,313,306,316,296],
[298,279,0,272,321,261,284,272],
[278,246,279,0,257,247,299,254],
[287,238,230,294,0,248,226,241],
[276,245,290,304,303,0,298,255],
[271,235,267,252,325,253,0,235],
[309,255,279,297,310,296,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,307,281,306,287,277],
[264,0,260,281,280,278,269,274],
[276,291,0,292,270,282,279,283],
[244,270,259,0,259,265,261,274],
[270,271,281,292,0,273,284,286],
[245,273,269,286,278,0,272,265],
[264,282,272,290,267,279,0,270],
[274,277,268,277,265,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,288,276,338,256,277,317],
[268,0,285,240,274,205,272,274],
[263,266,0,255,287,262,267,265],
[275,311,296,0,294,279,307,305],
[213,277,264,257,0,229,249,280],
[295,346,289,272,322,0,326,308],
[274,279,284,244,302,225,0,282],
[234,277,286,246,271,243,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,293,297,321,275,313],
[267,0,293,283,311,305,278,321],
[268,258,0,267,268,275,263,302],
[258,268,284,0,296,323,303,323],
[254,240,283,255,0,292,302,326],
[230,246,276,228,259,0,260,284],
[276,273,288,248,249,291,0,303],
[238,230,249,228,225,267,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,286,249,258,259,264,248],
[278,0,272,267,240,270,269,268],
[265,279,0,276,268,291,274,267],
[302,284,275,0,282,285,288,267],
[293,311,283,269,0,286,289,276],
[292,281,260,266,265,0,270,271],
[287,282,277,263,262,281,0,281],
[303,283,284,284,275,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,263,283,282,285,274,254],
[262,0,243,260,250,284,262,274],
[288,308,0,285,276,294,273,289],
[268,291,266,0,251,296,291,279],
[269,301,275,300,0,274,282,292],
[266,267,257,255,277,0,260,285],
[277,289,278,260,269,291,0,261],
[297,277,262,272,259,266,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,287,287,276,307,299,254],
[286,0,300,306,275,314,320,284],
[264,251,0,278,248,264,269,264],
[264,245,273,0,262,275,272,261],
[275,276,303,289,0,315,291,274],
[244,237,287,276,236,0,262,277],
[252,231,282,279,260,289,0,285],
[297,267,287,290,277,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,256,290,254,267,257,251],
[286,0,250,295,266,282,261,267],
[295,301,0,289,284,286,287,275],
[261,256,262,0,255,269,252,260],
[297,285,267,296,0,298,275,274],
[284,269,265,282,253,0,263,251],
[294,290,264,299,276,288,0,291],
[300,284,276,291,277,300,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,290,287,275,297,277,294],
[252,0,256,289,249,290,252,253],
[261,295,0,285,240,271,257,277],
[264,262,266,0,267,268,248,249],
[276,302,311,284,0,291,270,301],
[254,261,280,283,260,0,241,272],
[274,299,294,303,281,310,0,278],
[257,298,274,302,250,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,212,294,147,217,258,216],
[363,0,333,387,304,274,310,346],
[339,218,0,216,282,289,323,231],
[257,164,335,0,253,256,259,291],
[404,247,269,298,0,267,390,260],
[334,277,262,295,284,0,259,268],
[293,241,228,292,161,292,0,281],
[335,205,320,260,291,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,257,238,196,233,296,216],
[335,0,292,245,277,261,298,264],
[294,259,0,282,269,252,287,273],
[313,306,269,0,253,289,267,265],
[355,274,282,298,0,313,310,293],
[318,290,299,262,238,0,274,260],
[255,253,264,284,241,277,0,238],
[335,287,278,286,258,291,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,297,256,264,263,282,257],
[306,0,306,270,258,274,286,259],
[254,245,0,217,236,238,250,231],
[295,281,334,0,280,274,283,279],
[287,293,315,271,0,283,291,288],
[288,277,313,277,268,0,278,279],
[269,265,301,268,260,273,0,274],
[294,292,320,272,263,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,251,254,281,275,258],
[280,0,290,281,264,285,271,267],
[280,261,0,252,281,288,276,277],
[300,270,299,0,263,296,269,274],
[297,287,270,288,0,309,285,287],
[270,266,263,255,242,0,259,253],
[276,280,275,282,266,292,0,282],
[293,284,274,277,264,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,301,276,277,270,290,318],
[258,0,252,290,232,250,278,319],
[250,299,0,280,261,266,266,331],
[275,261,271,0,266,263,271,277],
[274,319,290,285,0,281,299,316],
[281,301,285,288,270,0,276,318],
[261,273,285,280,252,275,0,278],
[233,232,220,274,235,233,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,270,268,266,262,278,281],
[286,0,288,279,273,292,282,286],
[281,263,0,273,250,247,266,255],
[283,272,278,0,298,289,275,284],
[285,278,301,253,0,284,270,275],
[289,259,304,262,267,0,282,275],
[273,269,285,276,281,269,0,282],
[270,265,296,267,276,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,281,276,292,264,259,315],
[259,0,273,285,290,272,281,257],
[270,278,0,277,254,284,302,277],
[275,266,274,0,264,259,285,285],
[259,261,297,287,0,244,271,265],
[287,279,267,292,307,0,296,305],
[292,270,249,266,280,255,0,282],
[236,294,274,266,286,246,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,50,0,224,384,224,188],
[501,0,274,107,224,501,224,188],
[501,277,0,277,501,501,501,188],
[551,444,274,0,224,501,224,355],
[327,327,50,327,0,434,551,238],
[167,50,50,50,117,0,224,50],
[327,327,50,327,0,327,0,131],
[363,363,363,196,313,501,420,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,258,273,282,266,274,283],
[281,0,274,273,295,298,279,280],
[293,277,0,272,277,283,292,285],
[278,278,279,0,284,289,274,287],
[269,256,274,267,0,266,276,278],
[285,253,268,262,285,0,277,256],
[277,272,259,277,275,274,0,281],
[268,271,266,264,273,295,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,295,282,257,274,283],
[271,0,277,291,280,277,287,275],
[275,274,0,296,275,266,283,298],
[256,260,255,0,265,246,267,265],
[269,271,276,286,0,269,263,274],
[294,274,285,305,282,0,270,301],
[277,264,268,284,288,281,0,283],
[268,276,253,286,277,250,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,255,283,290,285,295,292],
[279,0,297,294,262,380,325,338],
[296,254,0,276,263,350,308,293],
[268,257,275,0,332,296,318,313],
[261,289,288,219,0,246,262,272],
[266,171,201,255,305,0,291,319],
[256,226,243,233,289,260,0,322],
[259,213,258,238,279,232,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,282,248,328,235,392,201],
[396,0,294,189,396,268,336,246],
[269,257,0,264,329,271,255,274],
[303,362,287,0,354,312,266,284],
[223,155,222,197,0,176,233,162],
[316,283,280,239,375,0,288,282],
[159,215,296,285,318,263,0,229],
[350,305,277,267,389,269,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,261,272,273,262,302,273],
[286,0,284,270,296,281,298,304],
[290,267,0,273,286,282,280,277],
[279,281,278,0,289,281,299,271],
[278,255,265,262,0,275,278,272],
[289,270,269,270,276,0,277,287],
[249,253,271,252,273,274,0,267],
[278,247,274,280,279,264,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,265,284,260,277,279,281],
[270,0,257,284,273,260,296,252],
[286,294,0,291,280,294,295,273],
[267,267,260,0,241,254,269,244],
[291,278,271,310,0,281,294,282],
[274,291,257,297,270,0,287,252],
[272,255,256,282,257,264,0,266],
[270,299,278,307,269,299,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,252,249,262,264,272,269],
[308,0,269,273,253,266,266,268],
[299,282,0,288,269,291,272,300],
[302,278,263,0,286,290,293,306],
[289,298,282,265,0,287,268,283],
[287,285,260,261,264,0,246,279],
[279,285,279,258,283,305,0,289],
[282,283,251,245,268,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,308,288,305,268,276,302],
[281,0,282,255,269,266,243,292],
[243,269,0,257,247,260,255,273],
[263,296,294,0,282,288,280,291],
[246,282,304,269,0,296,294,302],
[283,285,291,263,255,0,260,274],
[275,308,296,271,257,291,0,313],
[249,259,278,260,249,277,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,287,286,284,275,273,288],
[269,0,269,271,265,275,265,276],
[264,282,0,283,264,285,257,286],
[265,280,268,0,273,277,274,271],
[267,286,287,278,0,273,282,288],
[276,276,266,274,278,0,268,289],
[278,286,294,277,269,283,0,293],
[263,275,265,280,263,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,350,299,284,319,279,325],
[287,0,299,323,279,245,226,333],
[201,252,0,283,238,267,248,303],
[252,228,268,0,278,214,243,301],
[267,272,313,273,0,278,293,338],
[232,306,284,337,273,0,253,290],
[272,325,303,308,258,298,0,308],
[226,218,248,250,213,261,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,293,292,283,275,272,275],
[261,0,273,266,263,254,269,263],
[258,278,0,284,264,267,282,269],
[259,285,267,0,267,272,276,277],
[268,288,287,284,0,281,278,279],
[276,297,284,279,270,0,275,277],
[279,282,269,275,273,276,0,268],
[276,288,282,274,272,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,259,260,276,274,265,282],
[298,0,276,283,290,296,268,281],
[292,275,0,281,294,303,271,288],
[291,268,270,0,282,279,270,263],
[275,261,257,269,0,282,284,254],
[277,255,248,272,269,0,262,266],
[286,283,280,281,267,289,0,263],
[269,270,263,288,297,285,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,292,271,284,261,288,298],
[256,0,284,262,276,274,287,296],
[259,267,0,263,278,281,285,282],
[280,289,288,0,271,288,287,272],
[267,275,273,280,0,267,290,288],
[290,277,270,263,284,0,281,287],
[263,264,266,264,261,270,0,271],
[253,255,269,279,263,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,305,273,322,317,292,266],
[251,0,295,281,291,292,285,281],
[246,256,0,261,271,294,266,248],
[278,270,290,0,294,305,279,288],
[229,260,280,257,0,270,261,260],
[234,259,257,246,281,0,259,250],
[259,266,285,272,290,292,0,272],
[285,270,303,263,291,301,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,282,269,254,289,265,263],
[253,0,256,263,281,253,262,250],
[269,295,0,281,284,301,301,304],
[282,288,270,0,275,275,293,268],
[297,270,267,276,0,283,265,261],
[262,298,250,276,268,0,265,269],
[286,289,250,258,286,286,0,273],
[288,301,247,283,290,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,287,289,262,284,281,280],
[264,0,265,268,252,276,262,276],
[264,286,0,277,273,266,281,271],
[262,283,274,0,261,289,285,275],
[289,299,278,290,0,285,270,286],
[267,275,285,262,266,0,267,265],
[270,289,270,266,281,284,0,279],
[271,275,280,276,265,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,289,288,270,274,276],
[263,0,265,285,294,279,259,272],
[273,286,0,292,281,281,281,284],
[262,266,259,0,271,265,256,273],
[263,257,270,280,0,271,255,260],
[281,272,270,286,280,0,260,276],
[277,292,270,295,296,291,0,289],
[275,279,267,278,291,275,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,256,255,265,266,259],
[281,0,277,259,271,283,279,255],
[278,274,0,271,279,273,291,270],
[295,292,280,0,287,270,289,273],
[296,280,272,264,0,277,304,256],
[286,268,278,281,274,0,285,258],
[285,272,260,262,247,266,0,277],
[292,296,281,278,295,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,263,283,260,279,276,283],
[259,0,231,264,245,264,264,268],
[288,320,0,269,276,299,276,303],
[268,287,282,0,255,283,284,283],
[291,306,275,296,0,270,308,299],
[272,287,252,268,281,0,264,270],
[275,287,275,267,243,287,0,258],
[268,283,248,268,252,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,270,267,276,284,280],
[283,0,277,272,285,272,292,302],
[281,274,0,289,271,268,283,292],
[281,279,262,0,276,254,284,285],
[284,266,280,275,0,278,275,295],
[275,279,283,297,273,0,288,302],
[267,259,268,267,276,263,0,278],
[271,249,259,266,256,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,265,270,270,287,269],
[266,0,280,266,283,283,291,273],
[260,271,0,260,257,271,272,262],
[286,285,291,0,284,278,297,274],
[281,268,294,267,0,284,292,281],
[281,268,280,273,267,0,280,284],
[264,260,279,254,259,271,0,266],
[282,278,289,277,270,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,290,289,273,264,280,272],
[292,0,293,309,276,277,277,268],
[261,258,0,279,259,262,265,264],
[262,242,272,0,271,255,252,263],
[278,275,292,280,0,277,291,273],
[287,274,289,296,274,0,285,270],
[271,274,286,299,260,266,0,278],
[279,283,287,288,278,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,285,279,302,287,303],
[276,0,280,269,283,273,263,278],
[271,271,0,273,268,258,274,280],
[266,282,278,0,274,277,271,285],
[272,268,283,277,0,277,273,294],
[249,278,293,274,274,0,273,284],
[264,288,277,280,278,278,0,294],
[248,273,271,266,257,267,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,255,249,277,268,252],
[282,0,263,265,267,285,282,253],
[293,288,0,278,266,292,276,267],
[296,286,273,0,274,285,269,281],
[302,284,285,277,0,309,274,286],
[274,266,259,266,242,0,256,257],
[283,269,275,282,277,295,0,245],
[299,298,284,270,265,294,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,266,251,266,252,243],
[270,0,254,247,239,236,253,235],
[271,297,0,296,267,262,251,251],
[285,304,255,0,242,218,256,239],
[300,312,284,309,0,284,292,260],
[285,315,289,333,267,0,283,283],
[299,298,300,295,259,268,0,255],
[308,316,300,312,291,268,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,261,258,262,251,241],
[301,0,261,268,273,278,266,283],
[279,290,0,285,267,244,263,249],
[290,283,266,0,265,273,274,283],
[293,278,284,286,0,254,275,275],
[289,273,307,278,297,0,286,261],
[300,285,288,277,276,265,0,284],
[310,268,302,268,276,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,274,273,282,279,279,303],
[258,0,259,259,275,271,268,275],
[277,292,0,271,271,266,275,294],
[278,292,280,0,275,274,287,299],
[269,276,280,276,0,269,268,284],
[272,280,285,277,282,0,261,294],
[272,283,276,264,283,290,0,286],
[248,276,257,252,267,257,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,266,266,253,250,270,273],
[311,0,282,270,262,278,300,277],
[285,269,0,273,281,283,288,278],
[285,281,278,0,287,267,284,289],
[298,289,270,264,0,268,285,290],
[301,273,268,284,283,0,291,295],
[281,251,263,267,266,260,0,263],
[278,274,273,262,261,256,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,279,259,285,263,272],
[278,0,262,267,245,285,284,264],
[287,289,0,269,295,308,283,262],
[272,284,282,0,271,271,282,267],
[292,306,256,280,0,306,299,270],
[266,266,243,280,245,0,282,244],
[288,267,268,269,252,269,0,287],
[279,287,289,284,281,307,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,300,257,274,285,261,246],
[296,0,322,271,287,333,296,286],
[251,229,0,257,259,264,256,216],
[294,280,294,0,296,295,287,247],
[277,264,292,255,0,290,269,250],
[266,218,287,256,261,0,245,237],
[290,255,295,264,282,306,0,224],
[305,265,335,304,301,314,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,274,253,252,287,274,247],
[319,0,341,303,275,284,312,283],
[277,210,0,208,247,225,243,264],
[298,248,343,0,261,256,269,297],
[299,276,304,290,0,274,310,321],
[264,267,326,295,277,0,317,305],
[277,239,308,282,241,234,0,254],
[304,268,287,254,230,246,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,251,276,254,278,273,282],
[276,0,249,257,247,275,256,284],
[300,302,0,287,269,285,294,308],
[275,294,264,0,235,273,281,272],
[297,304,282,316,0,267,305,293],
[273,276,266,278,284,0,278,290],
[278,295,257,270,246,273,0,286],
[269,267,243,279,258,261,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,260,240,247,286,243,249],
[341,0,271,282,300,302,295,307],
[291,280,0,289,288,281,269,297],
[311,269,262,0,313,333,259,273],
[304,251,263,238,0,306,270,233],
[265,249,270,218,245,0,261,254],
[308,256,282,292,281,290,0,299],
[302,244,254,278,318,297,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,244,262,281,297,312,243],
[302,0,292,298,274,294,306,289],
[307,259,0,289,255,250,267,267],
[289,253,262,0,275,294,292,241],
[270,277,296,276,0,265,329,278],
[254,257,301,257,286,0,303,221],
[239,245,284,259,222,248,0,244],
[308,262,284,310,273,330,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,262,272,257,255,263,258],
[305,0,307,294,291,281,267,296],
[289,244,0,254,252,275,269,261],
[279,257,297,0,255,287,296,271],
[294,260,299,296,0,281,291,275],
[296,270,276,264,270,0,292,252],
[288,284,282,255,260,259,0,261],
[293,255,290,280,276,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,209,225,257,238,193,314],
[275,0,246,335,296,261,250,323],
[342,305,0,299,288,265,316,313],
[326,216,252,0,228,281,181,341],
[294,255,263,323,0,267,250,324],
[313,290,286,270,284,0,256,253],
[358,301,235,370,301,295,0,355],
[237,228,238,210,227,298,196,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,255,254,260,260,232,266],
[293,0,291,283,295,300,258,283],
[296,260,0,289,291,279,277,292],
[297,268,262,0,260,275,249,266],
[291,256,260,291,0,275,269,272],
[291,251,272,276,276,0,244,272],
[319,293,274,302,282,307,0,307],
[285,268,259,285,279,279,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,282,297,291,258,271],
[275,0,288,288,299,288,291,302],
[276,263,0,294,295,280,270,267],
[269,263,257,0,284,271,272,263],
[254,252,256,267,0,272,255,264],
[260,263,271,280,279,0,259,257],
[293,260,281,279,296,292,0,281],
[280,249,284,288,287,294,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,260,268,272,277,291],
[283,0,262,279,290,282,288,283],
[288,289,0,274,280,305,282,292],
[291,272,277,0,283,292,287,296],
[283,261,271,268,0,279,282,286],
[279,269,246,259,272,0,252,277],
[274,263,269,264,269,299,0,292],
[260,268,259,255,265,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,284,298,270,278,258,277],
[289,0,308,272,280,261,266,301],
[267,243,0,310,274,244,272,271],
[253,279,241,0,237,249,243,263],
[281,271,277,314,0,270,285,292],
[273,290,307,302,281,0,303,294],
[293,285,279,308,266,248,0,263],
[274,250,280,288,259,257,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,289,245,268,265,267],
[294,0,289,278,265,297,287,274],
[282,262,0,291,261,275,299,278],
[262,273,260,0,262,258,274,274],
[306,286,290,289,0,274,276,296],
[283,254,276,293,277,0,276,263],
[286,264,252,277,275,275,0,278],
[284,277,273,277,255,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,258,277,277,299,249,287],
[261,0,267,248,275,288,264,309],
[293,284,0,268,276,305,281,290],
[274,303,283,0,297,317,272,288],
[274,276,275,254,0,262,291,336],
[252,263,246,234,289,0,273,278],
[302,287,270,279,260,278,0,303],
[264,242,261,263,215,273,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,276,286,268,265,265],
[287,0,280,285,282,284,269,282],
[282,271,0,278,281,277,276,278],
[275,266,273,0,258,272,265,263],
[265,269,270,293,0,276,284,269],
[283,267,274,279,275,0,261,276],
[286,282,275,286,267,290,0,268],
[286,269,273,288,282,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,284,277,275,282,272],
[299,0,269,299,283,275,296,267],
[277,282,0,281,267,270,281,260],
[267,252,270,0,255,265,279,239],
[274,268,284,296,0,277,270,260],
[276,276,281,286,274,0,267,282],
[269,255,270,272,281,284,0,263],
[279,284,291,312,291,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,284,283,280,287,257],
[275,0,280,271,311,286,301,274],
[268,271,0,262,280,245,267,223],
[267,280,289,0,282,259,304,286],
[268,240,271,269,0,273,305,261],
[271,265,306,292,278,0,295,267],
[264,250,284,247,246,256,0,247],
[294,277,328,265,290,284,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,291,289,285,274,280,247],
[287,0,272,263,257,268,258,246],
[260,279,0,278,265,275,322,303],
[262,288,273,0,276,307,304,313],
[266,294,286,275,0,273,305,276],
[277,283,276,244,278,0,286,257],
[271,293,229,247,246,265,0,268],
[304,305,248,238,275,294,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,278,256,238,234,192,168],
[296,0,340,235,299,300,321,277],
[273,211,0,230,253,295,192,209],
[295,316,321,0,273,209,316,270],
[313,252,298,278,0,276,276,250],
[317,251,256,342,275,0,320,211],
[359,230,359,235,275,231,0,227],
[383,274,342,281,301,340,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,308,281,304,312,273,327],
[260,0,266,277,265,285,253,303],
[243,285,0,277,277,291,274,275],
[270,274,274,0,282,277,295,291],
[247,286,274,269,0,267,271,309],
[239,266,260,274,284,0,268,289],
[278,298,277,256,280,283,0,321],
[224,248,276,260,242,262,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,240,257,276,256,248,260],
[314,0,270,311,309,278,298,293],
[311,281,0,291,304,270,294,307],
[294,240,260,0,298,276,274,281],
[275,242,247,253,0,254,248,286],
[295,273,281,275,297,0,270,284],
[303,253,257,277,303,281,0,296],
[291,258,244,270,265,267,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,227,320,185,230,184,230],
[457,0,321,365,231,230,229,276],
[324,230,0,321,324,279,230,279],
[231,186,230,0,186,232,137,188],
[366,320,227,365,0,276,319,412],
[321,321,272,319,275,0,320,321],
[367,322,321,414,232,231,0,279],
[321,275,272,363,139,230,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,271,279,262,265,294],
[285,0,296,282,287,281,275,281],
[272,255,0,272,296,299,269,274],
[280,269,279,0,278,286,260,263],
[272,264,255,273,0,288,274,279],
[289,270,252,265,263,0,285,277],
[286,276,282,291,277,266,0,277],
[257,270,277,288,272,274,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,282,271,265,277,275,295],
[249,0,257,269,261,258,265,262],
[269,294,0,289,285,276,274,283],
[280,282,262,0,266,264,273,280],
[286,290,266,285,0,285,283,289],
[274,293,275,287,266,0,281,273],
[276,286,277,278,268,270,0,284],
[256,289,268,271,262,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,248,283,281,273,283],
[269,0,273,244,282,281,278,249],
[259,278,0,244,275,286,279,258],
[303,307,307,0,303,311,284,263],
[268,269,276,248,0,263,259,248],
[270,270,265,240,288,0,267,264],
[278,273,272,267,292,284,0,250],
[268,302,293,288,303,287,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,282,284,290,268,296],
[267,0,289,275,280,284,268,285],
[276,262,0,276,292,285,264,284],
[269,276,275,0,280,287,283,288],
[267,271,259,271,0,263,263,275],
[261,267,266,264,288,0,282,278],
[283,283,287,268,288,269,0,294],
[255,266,267,263,276,273,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,276,280,289,275,301],
[268,0,257,244,251,265,261,259],
[279,294,0,268,280,277,264,296],
[275,307,283,0,287,287,271,300],
[271,300,271,264,0,277,278,292],
[262,286,274,264,274,0,272,290],
[276,290,287,280,273,279,0,295],
[250,292,255,251,259,261,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,239,254,266,264,230,253],
[288,0,267,286,271,265,250,268],
[312,284,0,271,256,274,271,276],
[297,265,280,0,266,258,284,277],
[285,280,295,285,0,272,262,276],
[287,286,277,293,279,0,258,263],
[321,301,280,267,289,293,0,301],
[298,283,275,274,275,288,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,281,318,323,258,303,274],
[290,0,249,254,288,263,264,245],
[270,302,0,265,291,247,267,263],
[233,297,286,0,288,244,253,260],
[228,263,260,263,0,249,242,261],
[293,288,304,307,302,0,306,265],
[248,287,284,298,309,245,0,281],
[277,306,288,291,290,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,246,246,241,253,237,225],
[270,0,233,247,240,216,258,268],
[305,318,0,330,266,256,282,308],
[305,304,221,0,273,285,310,313],
[310,311,285,278,0,281,273,275],
[298,335,295,266,270,0,274,290],
[314,293,269,241,278,277,0,265],
[326,283,243,238,276,261,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,279,270,303,283,283,299],
[249,0,274,260,277,262,255,270],
[272,277,0,276,282,269,266,269],
[281,291,275,0,277,265,265,267],
[248,274,269,274,0,262,265,284],
[268,289,282,286,289,0,275,270],
[268,296,285,286,286,276,0,281],
[252,281,282,284,267,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,264,271,287,317,267],
[251,0,240,234,273,262,280,250],
[276,311,0,277,284,289,309,270],
[287,317,274,0,298,283,296,268],
[280,278,267,253,0,275,287,272],
[264,289,262,268,276,0,299,285],
[234,271,242,255,264,252,0,260],
[284,301,281,283,279,266,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,280,274,300,309,280,284],
[257,0,265,238,278,279,253,273],
[271,286,0,281,286,299,265,290],
[277,313,270,0,299,291,273,305],
[251,273,265,252,0,279,241,278],
[242,272,252,260,272,0,241,276],
[271,298,286,278,310,310,0,309],
[267,278,261,246,273,275,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,289,293,286,266,307],
[270,0,238,286,281,297,289,269],
[281,313,0,300,274,322,283,257],
[262,265,251,0,246,262,242,260],
[258,270,277,305,0,296,274,281],
[265,254,229,289,255,0,257,247],
[285,262,268,309,277,294,0,299],
[244,282,294,291,270,304,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,260,304,267,288,288],
[261,0,271,294,260,265,309,267],
[261,280,0,281,267,274,277,275],
[291,257,270,0,286,268,281,271],
[247,291,284,265,0,276,289,273],
[284,286,277,283,275,0,293,280],
[263,242,274,270,262,258,0,243],
[263,284,276,280,278,271,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,311,267,284,265,294],
[272,0,265,294,272,259,261,321],
[269,286,0,302,267,287,271,295],
[240,257,249,0,245,271,265,305],
[284,279,284,306,0,280,250,306],
[267,292,264,280,271,0,281,297],
[286,290,280,286,301,270,0,300],
[257,230,256,246,245,254,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,280,265,286,275,282,270],
[249,0,276,271,307,299,272,291],
[271,275,0,263,268,269,257,248],
[286,280,288,0,273,282,297,255],
[265,244,283,278,0,308,264,284],
[276,252,282,269,243,0,271,269],
[269,279,294,254,287,280,0,292],
[281,260,303,296,267,282,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,236,281,255,237,266,249],
[296,0,288,266,300,289,291,275],
[315,263,0,280,304,269,301,307],
[270,285,271,0,262,270,272,300],
[296,251,247,289,0,227,280,238],
[314,262,282,281,324,0,279,294],
[285,260,250,279,271,272,0,290],
[302,276,244,251,313,257,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,297,279,277,315,322,305],
[276,0,301,315,267,304,310,289],
[254,250,0,258,243,284,283,250],
[272,236,293,0,240,250,241,252],
[274,284,308,311,0,267,313,307],
[236,247,267,301,284,0,303,246],
[229,241,268,310,238,248,0,259],
[246,262,301,299,244,305,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,290,276,273,279,266],
[267,0,295,275,269,257,278,239],
[268,256,0,300,265,270,286,269],
[261,276,251,0,254,283,317,279],
[275,282,286,297,0,287,298,280],
[278,294,281,268,264,0,291,286],
[272,273,265,234,253,260,0,250],
[285,312,282,272,271,265,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,268,286,283,277,288,283],
[274,0,277,271,270,269,299,284],
[283,274,0,276,269,275,288,272],
[265,280,275,0,286,272,290,283],
[268,281,282,265,0,276,283,291],
[274,282,276,279,275,0,280,272],
[263,252,263,261,268,271,0,266],
[268,267,279,268,260,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,294,289,279,284,279,269],
[283,0,283,280,297,284,268,288],
[257,268,0,276,294,268,250,285],
[262,271,275,0,277,250,277,266],
[272,254,257,274,0,265,259,268],
[267,267,283,301,286,0,273,269],
[272,283,301,274,292,278,0,300],
[282,263,266,285,283,282,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,256,287,258,256,283,264],
[290,0,258,290,279,278,285,273],
[295,293,0,296,275,291,283,288],
[264,261,255,0,285,247,263,271],
[293,272,276,266,0,280,270,269],
[295,273,260,304,271,0,285,277],
[268,266,268,288,281,266,0,265],
[287,278,263,280,282,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,257,263,288,266,292,274],
[277,0,270,288,291,289,310,284],
[294,281,0,281,279,268,305,279],
[288,263,270,0,276,260,279,285],
[263,260,272,275,0,258,294,275],
[285,262,283,291,293,0,300,286],
[259,241,246,272,257,251,0,265],
[277,267,272,266,276,265,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,268,305,311,288,305,323],
[255,0,318,318,282,284,241,294],
[283,233,0,317,321,283,311,319],
[246,233,234,0,249,247,265,305],
[240,269,230,302,0,263,263,319],
[263,267,268,304,288,0,249,322],
[246,310,240,286,288,302,0,305],
[228,257,232,246,232,229,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,279,267,276,276,308],
[260,0,259,274,244,256,253,304],
[268,292,0,281,275,262,255,293],
[272,277,270,0,272,266,253,287],
[284,307,276,279,0,270,273,306],
[275,295,289,285,281,0,283,302],
[275,298,296,298,278,268,0,308],
[243,247,258,264,245,249,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,270,262,269,287,253],
[267,0,268,275,253,277,313,275],
[283,283,0,286,270,256,283,265],
[281,276,265,0,281,280,303,269],
[289,298,281,270,0,273,311,287],
[282,274,295,271,278,0,312,260],
[264,238,268,248,240,239,0,245],
[298,276,286,282,264,291,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,270,277,282,265,277],
[283,0,274,284,271,271,279,266],
[283,277,0,273,280,264,277,271],
[281,267,278,0,283,285,269,270],
[274,280,271,268,0,251,261,276],
[269,280,287,266,300,0,271,263],
[286,272,274,282,290,280,0,271],
[274,285,280,281,275,288,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,262,307,286,281,253,298],
[284,0,288,265,263,262,258,285],
[289,263,0,295,279,259,276,305],
[244,286,256,0,257,250,249,298],
[265,288,272,294,0,264,266,290],
[270,289,292,301,287,0,273,318],
[298,293,275,302,285,278,0,314],
[253,266,246,253,261,233,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,264,258,218,231,241,243],
[306,0,313,299,259,275,285,277],
[287,238,0,297,239,253,312,284],
[293,252,254,0,266,250,293,227],
[333,292,312,285,0,260,327,258],
[320,276,298,301,291,0,315,255],
[310,266,239,258,224,236,0,262],
[308,274,267,324,293,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,276,286,281,264,293],
[272,0,280,288,294,268,251,287],
[258,271,0,267,267,267,268,283],
[275,263,284,0,288,283,282,274],
[265,257,284,263,0,277,249,258],
[270,283,284,268,274,0,258,274],
[287,300,283,269,302,293,0,285],
[258,264,268,277,293,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,258,251,333,268,256,253],
[189,0,217,233,136,169,199,158],
[293,334,0,291,284,347,297,224],
[300,318,260,0,287,246,249,248],
[218,415,267,264,0,333,288,312],
[283,382,204,305,218,0,264,273],
[295,352,254,302,263,287,0,235],
[298,393,327,303,239,278,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,290,298,273,282,278,286],
[265,0,288,280,277,271,268,272],
[261,263,0,271,257,265,265,280],
[253,271,280,0,277,270,267,286],
[278,274,294,274,0,267,280,285],
[269,280,286,281,284,0,281,297],
[273,283,286,284,271,270,0,282],
[265,279,271,265,266,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,280,269,286,287,286],
[274,0,268,281,279,266,285,279],
[261,283,0,263,261,272,274,277],
[271,270,288,0,276,280,273,278],
[282,272,290,275,0,293,280,295],
[265,285,279,271,258,0,271,274],
[264,266,277,278,271,280,0,292],
[265,272,274,273,256,277,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,273,288,300,292,280,282],
[260,0,246,262,278,266,257,266],
[278,305,0,288,294,291,272,293],
[263,289,263,0,283,268,259,272],
[251,273,257,268,0,266,250,262],
[259,285,260,283,285,0,280,286],
[271,294,279,292,301,271,0,289],
[269,285,258,279,289,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,293,279,272,248,291,255],
[279,0,296,270,263,272,270,275],
[258,255,0,254,258,240,279,272],
[272,281,297,0,299,284,307,267],
[279,288,293,252,0,278,290,263],
[303,279,311,267,273,0,280,282],
[260,281,272,244,261,271,0,263],
[296,276,279,284,288,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,262,251,286,250,270,237],
[288,0,280,277,309,274,287,278],
[289,271,0,263,302,283,279,264],
[300,274,288,0,300,285,295,297],
[265,242,249,251,0,236,245,252],
[301,277,268,266,315,0,301,264],
[281,264,272,256,306,250,0,266],
[314,273,287,254,299,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,301,267,298,280,273,287],
[282,0,272,271,292,271,283,285],
[250,279,0,265,274,275,284,273],
[284,280,286,0,300,284,275,277],
[253,259,277,251,0,281,256,267],
[271,280,276,267,270,0,280,258],
[278,268,267,276,295,271,0,289],
[264,266,278,274,284,293,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,284,301,319,298,258,277],
[259,0,253,288,273,269,256,259],
[267,298,0,294,290,314,257,298],
[250,263,257,0,277,267,254,272],
[232,278,261,274,0,247,270,248],
[253,282,237,284,304,0,284,289],
[293,295,294,297,281,267,0,272],
[274,292,253,279,303,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,259,264,292,299,302],
[272,0,270,293,294,273,284,289],
[269,281,0,276,307,292,303,291],
[292,258,275,0,282,250,285,295],
[287,257,244,269,0,265,267,298],
[259,278,259,301,286,0,294,320],
[252,267,248,266,284,257,0,304],
[249,262,260,256,253,231,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,246,251,274,290,285],
[278,0,267,233,268,318,313,252],
[281,284,0,238,278,302,326,278],
[305,318,313,0,270,309,333,306],
[300,283,273,281,0,292,320,277],
[277,233,249,242,259,0,291,256],
[261,238,225,218,231,260,0,236],
[266,299,273,245,274,295,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,293,273,282,271,269],
[280,0,273,288,260,275,275,269],
[270,278,0,293,282,278,266,248],
[258,263,258,0,258,272,257,247],
[278,291,269,293,0,273,271,270],
[269,276,273,279,278,0,272,278],
[280,276,285,294,280,279,0,256],
[282,282,303,304,281,273,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,185,258,367,183,293,295],
[403,0,295,332,442,221,439,442],
[366,256,0,369,367,295,328,404],
[293,219,182,0,330,182,330,295],
[184,109,184,221,0,218,256,256],
[368,330,256,369,333,0,330,295],
[258,112,223,221,295,221,0,258],
[256,109,147,256,295,256,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,262,285,265,276,289,268],
[283,0,284,312,277,292,301,271],
[289,267,0,298,284,304,290,271],
[266,239,253,0,268,276,263,265],
[286,274,267,283,0,272,269,276],
[275,259,247,275,279,0,269,263],
[262,250,261,288,282,282,0,278],
[283,280,280,286,275,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,239,250,239,263,259],
[278,0,223,234,239,230,231,241],
[287,328,0,283,284,274,306,277],
[312,317,268,0,268,236,292,269],
[301,312,267,283,0,278,272,307],
[312,321,277,315,273,0,312,281],
[288,320,245,259,279,239,0,269],
[292,310,274,282,244,270,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,284,264,342,248,224,254],
[313,0,326,262,339,244,242,278],
[267,225,0,221,285,226,226,192],
[287,289,330,0,346,250,277,244],
[209,212,266,205,0,184,174,213],
[303,307,325,301,367,0,209,282],
[327,309,325,274,377,342,0,311],
[297,273,359,307,338,269,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,259,251,259,286,285,275],
[286,0,299,335,232,281,316,290],
[292,252,0,305,282,325,301,283],
[300,216,246,0,283,256,276,278],
[292,319,269,268,0,275,310,257],
[265,270,226,295,276,0,298,267],
[266,235,250,275,241,253,0,256],
[276,261,268,273,294,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,275,275,269,271,279],
[262,0,283,277,265,277,267,283],
[275,268,0,281,273,263,275,270],
[276,274,270,0,283,275,262,276],
[276,286,278,268,0,279,280,280],
[282,274,288,276,272,0,281,282],
[280,284,276,289,271,270,0,267],
[272,268,281,275,271,269,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,248,278,267,278,270],
[282,0,280,261,259,250,282,263],
[277,271,0,258,263,265,286,289],
[303,290,293,0,296,263,313,280],
[273,292,288,255,0,286,290,263],
[284,301,286,288,265,0,293,288],
[273,269,265,238,261,258,0,260],
[281,288,262,271,288,263,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,260,299,287,309,297,291],
[261,0,275,266,272,282,280,264],
[291,276,0,268,276,305,308,304],
[252,285,283,0,266,306,294,283],
[264,279,275,285,0,302,302,280],
[242,269,246,245,249,0,250,235],
[254,271,243,257,249,301,0,245],
[260,287,247,268,271,316,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,440,327,249,386,355,249],
[165,0,302,222,277,332,250,192],
[111,249,0,192,195,248,197,219],
[224,329,359,0,222,304,192,276],
[302,274,356,329,0,273,330,245],
[165,219,303,247,278,0,278,220],
[196,301,354,359,221,273,0,218],
[302,359,332,275,306,331,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,269,260,291,272,279],
[273,0,270,277,268,308,287,284],
[274,281,0,274,282,295,274,299],
[282,274,277,0,271,288,294,281],
[291,283,269,280,0,300,302,293],
[260,243,256,263,251,0,259,262],
[279,264,277,257,249,292,0,285],
[272,267,252,270,258,289,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,261,242,301,279,253,276],
[256,0,250,259,278,260,266,244],
[290,301,0,273,295,274,281,274],
[309,292,278,0,274,287,274,283],
[250,273,256,277,0,258,274,271],
[272,291,277,264,293,0,257,291],
[298,285,270,277,277,294,0,288],
[275,307,277,268,280,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,269,292,279,281,252],
[270,0,281,266,277,281,247,264],
[273,270,0,262,271,280,263,259],
[282,285,289,0,280,283,264,277],
[259,274,280,271,0,287,262,262],
[272,270,271,268,264,0,257,257],
[270,304,288,287,289,294,0,262],
[299,287,292,274,289,294,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,283,275,228,275,252,237],
[297,0,298,279,274,305,252,263],
[268,253,0,260,252,292,283,270],
[276,272,291,0,283,294,263,279],
[323,277,299,268,0,297,249,291],
[276,246,259,257,254,0,262,283],
[299,299,268,288,302,289,0,270],
[314,288,281,272,260,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,301,286,282,273,278,276],
[295,0,294,298,293,295,267,310],
[250,257,0,294,275,258,230,270],
[265,253,257,0,248,280,262,266],
[269,258,276,303,0,278,257,291],
[278,256,293,271,273,0,262,271],
[273,284,321,289,294,289,0,285],
[275,241,281,285,260,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,285,277,267,270,270,274],
[278,0,286,268,260,275,281,264],
[266,265,0,263,241,256,263,250],
[274,283,288,0,279,270,286,267],
[284,291,310,272,0,275,281,278],
[281,276,295,281,276,0,284,267],
[281,270,288,265,270,267,0,265],
[277,287,301,284,273,284,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,285,275,254,263,263,274],
[286,0,284,267,262,256,279,277],
[266,267,0,257,262,250,254,285],
[276,284,294,0,268,278,276,287],
[297,289,289,283,0,278,264,296],
[288,295,301,273,273,0,261,290],
[288,272,297,275,287,290,0,279],
[277,274,266,264,255,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,303,266,277,315,289,293],
[265,0,251,268,235,289,256,290],
[248,300,0,280,268,304,274,282],
[285,283,271,0,261,303,280,269],
[274,316,283,290,0,311,285,286],
[236,262,247,248,240,0,241,230],
[262,295,277,271,266,310,0,290],
[258,261,269,282,265,321,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,288,261,252,264,294],
[299,0,277,269,253,280,266,285],
[281,274,0,281,260,279,264,276],
[263,282,270,0,255,276,273,280],
[290,298,291,296,0,272,283,281],
[299,271,272,275,279,0,271,293],
[287,285,287,278,268,280,0,274],
[257,266,275,271,270,258,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,263,277,270,267,260],
[289,0,274,268,267,290,276,270],
[293,277,0,292,258,284,265,285],
[288,283,259,0,286,267,285,275],
[274,284,293,265,0,271,292,278],
[281,261,267,284,280,0,276,275],
[284,275,286,266,259,275,0,285],
[291,281,266,276,273,276,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,310,314,304,281,260,291],
[241,0,298,326,289,283,262,263],
[241,253,0,323,267,264,241,285],
[237,225,228,0,226,217,227,216],
[247,262,284,325,0,243,236,228],
[270,268,287,334,308,0,280,257],
[291,289,310,324,315,271,0,265],
[260,288,266,335,323,294,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,296,260,294,276,296,316],
[244,0,276,258,268,241,269,275],
[255,275,0,255,242,239,276,266],
[291,293,296,0,298,262,311,301],
[257,283,309,253,0,261,291,296],
[275,310,312,289,290,0,292,313],
[255,282,275,240,260,259,0,273],
[235,276,285,250,255,238,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,245,278,255,287,291,255],
[308,0,294,310,276,297,303,271],
[306,257,0,288,285,308,316,272],
[273,241,263,0,279,303,291,247],
[296,275,266,272,0,285,296,279],
[264,254,243,248,266,0,307,238],
[260,248,235,260,255,244,0,244],
[296,280,279,304,272,313,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,268,277,265,272,273],
[265,0,299,282,271,275,300,266],
[273,252,0,276,282,279,280,267],
[283,269,275,0,273,281,263,275],
[274,280,269,278,0,258,261,276],
[286,276,272,270,293,0,268,278],
[279,251,271,288,290,283,0,279],
[278,285,284,276,275,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,294,269,240,275,315,268],
[253,0,270,250,268,276,296,271],
[257,281,0,279,275,292,306,279],
[282,301,272,0,276,274,298,284],
[311,283,276,275,0,315,291,287],
[276,275,259,277,236,0,278,283],
[236,255,245,253,260,273,0,238],
[283,280,272,267,264,268,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,279,274,277,272,277],
[278,0,273,256,266,263,280,269],
[272,278,0,276,262,266,280,285],
[272,295,275,0,257,260,285,281],
[277,285,289,294,0,261,281,277],
[274,288,285,291,290,0,284,287],
[279,271,271,266,270,267,0,276],
[274,282,266,270,274,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,246,268,274,250,265,305],
[315,0,290,294,268,277,286,309],
[305,261,0,297,276,241,262,306],
[283,257,254,0,294,259,245,282],
[277,283,275,257,0,251,260,272],
[301,274,310,292,300,0,269,327],
[286,265,289,306,291,282,0,314],
[246,242,245,269,279,224,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,281,272,260,290,277],
[282,0,284,282,262,280,291,281],
[277,267,0,274,251,274,286,276],
[270,269,277,0,282,269,281,280],
[279,289,300,269,0,264,296,282],
[291,271,277,282,287,0,285,291],
[261,260,265,270,255,266,0,264],
[274,270,275,271,269,260,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,254,247,295,289,278,277],
[258,0,238,235,315,255,255,269],
[297,313,0,297,335,257,262,268],
[304,316,254,0,352,315,282,292],
[256,236,216,199,0,277,212,245],
[262,296,294,236,274,0,235,264],
[273,296,289,269,339,316,0,329],
[274,282,283,259,306,287,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,281,259,297,272,291,244],
[288,0,280,268,252,270,226,267],
[270,271,0,282,271,260,264,285],
[292,283,269,0,300,271,240,246],
[254,299,280,251,0,284,284,275],
[279,281,291,280,267,0,299,316],
[260,325,287,311,267,252,0,292],
[307,284,266,305,276,235,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,276,293,301,284,269],
[257,0,261,247,292,278,267,262],
[279,290,0,267,279,290,287,269],
[275,304,284,0,302,309,274,288],
[258,259,272,249,0,279,289,259],
[250,273,261,242,272,0,246,264],
[267,284,264,277,262,305,0,269],
[282,289,282,263,292,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,259,288,274,272,269,273],
[291,0,273,294,288,304,275,297],
[292,278,0,289,284,301,274,302],
[263,257,262,0,268,277,271,270],
[277,263,267,283,0,283,279,294],
[279,247,250,274,268,0,249,282],
[282,276,277,280,272,302,0,297],
[278,254,249,281,257,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,297,305,274,283,319,255],
[290,0,296,294,274,293,316,284],
[254,255,0,282,270,276,290,269],
[246,257,269,0,257,282,287,267],
[277,277,281,294,0,265,300,276],
[268,258,275,269,286,0,292,255],
[232,235,261,264,251,259,0,233],
[296,267,282,284,275,296,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,265,274,243,292,269],
[293,0,305,261,315,304,320,294],
[279,246,0,262,284,258,277,286],
[286,290,289,0,272,301,297,285],
[277,236,267,279,0,305,264,289],
[308,247,293,250,246,0,281,307],
[259,231,274,254,287,270,0,270],
[282,257,265,266,262,244,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,268,258,286,299,293],
[280,0,275,278,271,282,274,272],
[265,276,0,282,277,276,278,290],
[283,273,269,0,265,277,272,267],
[293,280,274,286,0,279,281,275],
[265,269,275,274,272,0,271,275],
[252,277,273,279,270,280,0,278],
[258,279,261,284,276,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,248,290,253,296,299,282],
[317,0,267,313,321,307,265,304],
[303,284,0,297,273,273,303,297],
[261,238,254,0,238,265,261,238],
[298,230,278,313,0,295,280,295],
[255,244,278,286,256,0,278,259],
[252,286,248,290,271,273,0,218],
[269,247,254,313,256,292,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,265,303,278,295,301],
[260,0,245,239,277,252,284,282],
[277,306,0,279,287,273,316,279],
[286,312,272,0,292,262,294,288],
[248,274,264,259,0,284,290,265],
[273,299,278,289,267,0,305,274],
[256,267,235,257,261,246,0,257],
[250,269,272,263,286,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,291,309,265,294,283,279],
[292,0,285,287,282,298,309,265],
[260,266,0,285,252,289,281,257],
[242,264,266,0,269,276,293,243],
[286,269,299,282,0,295,312,271],
[257,253,262,275,256,0,282,249],
[268,242,270,258,239,269,0,252],
[272,286,294,308,280,302,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,292,310,284,287,274,290],
[252,0,236,272,247,254,269,256],
[259,315,0,304,264,287,292,291],
[241,279,247,0,274,268,253,272],
[267,304,287,277,0,300,274,280],
[264,297,264,283,251,0,295,282],
[277,282,259,298,277,256,0,270],
[261,295,260,279,271,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,301,298,256,264,308,272],
[290,0,302,318,298,274,325,282],
[250,249,0,283,249,248,298,269],
[253,233,268,0,254,237,295,258],
[295,253,302,297,0,285,305,275],
[287,277,303,314,266,0,313,285],
[243,226,253,256,246,238,0,251],
[279,269,282,293,276,266,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,291,273,319,288,290,293],
[260,0,279,261,285,270,270,295],
[260,272,0,282,289,269,275,267],
[278,290,269,0,307,269,313,323],
[232,266,262,244,0,240,243,260],
[263,281,282,282,311,0,295,311],
[261,281,276,238,308,256,0,281],
[258,256,284,228,291,240,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,283,277,269,279,268],
[277,0,265,263,266,261,263,251],
[277,286,0,272,284,285,271,264],
[268,288,279,0,281,272,274,265],
[274,285,267,270,0,286,282,263],
[282,290,266,279,265,0,281,280],
[272,288,280,277,269,270,0,273],
[283,300,287,286,288,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,263,268,291,282,273,252],
[266,0,256,266,279,270,252,245],
[288,295,0,261,285,276,277,290],
[283,285,290,0,277,297,291,270],
[260,272,266,274,0,249,263,243],
[269,281,275,254,302,0,274,260],
[278,299,274,260,288,277,0,272],
[299,306,261,281,308,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,265,259,268,261,245,247],
[271,0,263,267,265,271,290,277],
[286,288,0,262,280,270,267,267],
[292,284,289,0,262,287,300,274],
[283,286,271,289,0,258,282,296],
[290,280,281,264,293,0,262,295],
[306,261,284,251,269,289,0,275],
[304,274,284,277,255,256,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,256,278,269,278,264,259],
[284,0,286,288,274,294,267,264],
[295,265,0,284,282,283,248,280],
[273,263,267,0,260,267,251,266],
[282,277,269,291,0,285,281,279],
[273,257,268,284,266,0,259,246],
[287,284,303,300,270,292,0,284],
[292,287,271,285,272,305,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,288,289,298,287,252,311],
[244,0,290,287,259,283,239,317],
[263,261,0,290,278,297,258,313],
[262,264,261,0,291,264,247,308],
[253,292,273,260,0,297,261,323],
[264,268,254,287,254,0,294,291],
[299,312,293,304,290,257,0,339],
[240,234,238,243,228,260,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,272,282,263,264,279,303],
[226,0,287,305,284,280,307,233],
[279,264,0,265,238,297,300,247],
[269,246,286,0,260,304,289,263],
[288,267,313,291,0,306,295,249],
[287,271,254,247,245,0,274,245],
[272,244,251,262,256,277,0,235],
[248,318,304,288,302,306,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,263,267,268,268,283,269],
[301,0,284,280,286,266,275,283],
[288,267,0,282,279,272,280,267],
[284,271,269,0,268,266,279,273],
[283,265,272,283,0,276,280,272],
[283,285,279,285,275,0,303,283],
[268,276,271,272,271,248,0,262],
[282,268,284,278,279,268,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,313,307,289,326,286,287],
[281,0,287,287,271,326,270,288],
[238,264,0,278,266,301,249,273],
[244,264,273,0,238,300,223,263],
[262,280,285,313,0,322,240,299],
[225,225,250,251,229,0,227,250],
[265,281,302,328,311,324,0,280],
[264,263,278,288,252,301,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,270,265,257,263,306,268],
[268,0,291,286,262,257,297,297],
[281,260,0,271,281,286,295,299],
[286,265,280,0,266,268,283,272],
[294,289,270,285,0,275,306,291],
[288,294,265,283,276,0,297,298],
[245,254,256,268,245,254,0,266],
[283,254,252,279,260,253,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,257,272,275,276,278,307],
[262,0,261,268,259,253,268,282],
[294,290,0,280,273,270,294,285],
[279,283,271,0,279,281,295,313],
[276,292,278,272,0,270,296,301],
[275,298,281,270,281,0,283,305],
[273,283,257,256,255,268,0,293],
[244,269,266,238,250,246,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,298,279,271,301,278,297],
[297,0,293,265,258,294,303,297],
[253,258,0,277,262,267,269,286],
[272,286,274,0,296,284,299,281],
[280,293,289,255,0,304,273,295],
[250,257,284,267,247,0,274,273],
[273,248,282,252,278,277,0,294],
[254,254,265,270,256,278,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,297,263,329,290,304],
[278,0,310,285,259,293,292,269],
[263,241,0,284,260,290,282,294],
[254,266,267,0,229,288,281,279],
[288,292,291,322,0,310,304,257],
[222,258,261,263,241,0,243,238],
[261,259,269,270,247,308,0,271],
[247,282,257,272,294,313,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,291,288,285,295,294,283],
[279,0,254,290,282,292,286,255],
[260,297,0,283,296,305,270,273],
[263,261,268,0,247,284,280,274],
[266,269,255,304,0,304,272,267],
[256,259,246,267,247,0,289,273],
[257,265,281,271,279,262,0,277],
[268,296,278,277,284,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,262,269,275,255,271,263],
[276,0,284,279,259,262,259,269],
[289,267,0,280,265,275,258,279],
[282,272,271,0,263,274,278,266],
[276,292,286,288,0,274,285,282],
[296,289,276,277,277,0,274,288],
[280,292,293,273,266,277,0,288],
[288,282,272,285,269,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,268,265,281,283,264],
[280,0,269,275,268,286,284,272],
[276,282,0,283,273,284,267,260],
[283,276,268,0,296,298,292,289],
[286,283,278,255,0,290,279,274],
[270,265,267,253,261,0,253,254],
[268,267,284,259,272,298,0,264],
[287,279,291,262,277,297,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,274,287,317,287,279,257],
[226,0,263,260,266,245,253,252],
[277,288,0,268,289,281,283,245],
[264,291,283,0,304,264,278,259],
[234,285,262,247,0,250,250,251],
[264,306,270,287,301,0,287,266],
[272,298,268,273,301,264,0,287],
[294,299,306,292,300,285,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,305,275,274,266,269,292],
[283,0,300,291,280,274,269,273],
[246,251,0,261,257,252,267,264],
[276,260,290,0,279,275,250,279],
[277,271,294,272,0,271,275,278],
[285,277,299,276,280,0,264,282],
[282,282,284,301,276,287,0,275],
[259,278,287,272,273,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,266,273,279,287,294,278],
[259,0,263,266,263,244,278,265],
[285,288,0,266,273,262,275,260],
[278,285,285,0,271,297,278,290],
[272,288,278,280,0,272,284,277],
[264,307,289,254,279,0,287,294],
[257,273,276,273,267,264,0,251],
[273,286,291,261,274,257,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,290,266,284,257,284,273],
[237,0,253,210,199,258,260,270],
[261,298,0,259,245,230,219,249],
[285,341,292,0,277,299,292,263],
[267,352,306,274,0,276,281,305],
[294,293,321,252,275,0,284,268],
[267,291,332,259,270,267,0,271],
[278,281,302,288,246,283,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,273,276,262,279,285],
[262,0,270,271,281,281,275,276],
[277,281,0,275,278,262,270,284],
[278,280,276,0,284,269,274,287],
[275,270,273,267,0,269,266,287],
[289,270,289,282,282,0,271,293],
[272,276,281,277,285,280,0,287],
[266,275,267,264,264,258,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,279,294,283,302,287,265],
[280,0,288,281,264,298,269,275],
[272,263,0,291,279,282,262,264],
[257,270,260,0,270,296,269,278],
[268,287,272,281,0,284,274,265],
[249,253,269,255,267,0,253,254],
[264,282,289,282,277,298,0,281],
[286,276,287,273,286,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,281,277,291,278,290],
[279,0,279,273,298,284,283,283],
[267,272,0,266,277,293,261,265],
[270,278,285,0,271,288,279,274],
[274,253,274,280,0,301,271,272],
[260,267,258,263,250,0,260,272],
[273,268,290,272,280,291,0,281],
[261,268,286,277,279,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,266,273,283,245,260],
[297,0,272,272,300,289,280,268],
[303,279,0,270,302,271,290,293],
[285,279,281,0,294,278,271,272],
[278,251,249,257,0,266,249,246],
[268,262,280,273,285,0,271,288],
[306,271,261,280,302,280,0,283],
[291,283,258,279,305,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,274,291,296,298,298],
[276,0,266,286,277,295,311,305],
[269,285,0,270,286,311,303,259],
[277,265,281,0,284,300,310,286],
[260,274,265,267,0,262,298,266],
[255,256,240,251,289,0,284,286],
[253,240,248,241,253,267,0,271],
[253,246,292,265,285,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,265,261,267,268,259,259],
[294,0,273,281,277,286,287,291],
[286,278,0,283,272,280,283,276],
[290,270,268,0,254,268,268,259],
[284,274,279,297,0,299,286,274],
[283,265,271,283,252,0,265,262],
[292,264,268,283,265,286,0,261],
[292,260,275,292,277,289,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,225,281,198,250,276,280],
[189,0,277,305,303,276,304,331],
[326,274,0,359,330,304,329,361],
[270,246,192,0,193,247,301,277],
[353,248,221,358,0,302,303,304],
[301,275,247,304,249,0,302,277],
[275,247,222,250,248,249,0,276],
[271,220,190,274,247,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,299,292,262,281,292],
[266,0,270,288,287,288,285,294],
[287,281,0,303,280,284,263,270],
[252,263,248,0,258,247,257,264],
[259,264,271,293,0,259,263,277],
[289,263,267,304,292,0,266,280],
[270,266,288,294,288,285,0,277],
[259,257,281,287,274,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,263,259,304,252,282,299],
[309,0,288,266,313,278,307,314],
[288,263,0,280,298,290,272,281],
[292,285,271,0,290,275,284,258],
[247,238,253,261,0,259,283,276],
[299,273,261,276,292,0,270,289],
[269,244,279,267,268,281,0,281],
[252,237,270,293,275,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,232,254,138,231,301,206],
[343,0,254,323,274,300,302,251],
[319,297,0,367,295,271,322,250],
[297,228,184,0,206,205,277,204],
[413,277,256,345,0,368,370,298],
[320,251,280,346,183,0,349,253],
[250,249,229,274,181,202,0,158],
[345,300,301,347,253,298,393,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,275,282,304,278,285,283],
[243,0,265,248,256,268,247,264],
[276,286,0,272,274,268,268,258],
[269,303,279,0,299,289,301,306],
[247,295,277,252,0,290,253,281],
[273,283,283,262,261,0,256,277],
[266,304,283,250,298,295,0,255],
[268,287,293,245,270,274,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,267,293,276,280,282],
[276,0,284,275,283,283,256,274],
[270,267,0,255,275,269,268,268],
[284,276,296,0,298,281,272,291],
[258,268,276,253,0,288,261,269],
[275,268,282,270,263,0,278,278],
[271,295,283,279,290,273,0,286],
[269,277,283,260,282,273,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,256,278,261,271,309],
[261,0,278,293,273,244,296,315],
[256,273,0,261,244,255,266,289],
[295,258,290,0,282,279,261,297],
[273,278,307,269,0,236,264,294],
[290,307,296,272,315,0,282,311],
[280,255,285,290,287,269,0,292],
[242,236,262,254,257,240,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,314,299,271,280,280],
[278,0,269,270,266,280,270,256],
[263,282,0,305,289,269,273,268],
[237,281,246,0,260,261,264,261],
[252,285,262,291,0,279,273,283],
[280,271,282,290,272,0,265,286],
[271,281,278,287,278,286,0,285],
[271,295,283,290,268,265,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,277,274,271,277,278],
[292,0,291,275,298,276,271,304],
[280,260,0,294,269,261,263,295],
[274,276,257,0,273,273,260,265],
[277,253,282,278,0,286,280,286],
[280,275,290,278,265,0,291,293],
[274,280,288,291,271,260,0,288],
[273,247,256,286,265,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,298,266,262,281,258,260],
[293,0,272,275,289,256,274,256],
[253,279,0,252,262,280,266,271],
[285,276,299,0,287,273,290,307],
[289,262,289,264,0,282,278,268],
[270,295,271,278,269,0,291,275],
[293,277,285,261,273,260,0,247],
[291,295,280,244,283,276,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,241,257,291,268,272,255],
[282,0,289,257,260,270,252,258],
[310,262,0,273,268,260,280,251],
[294,294,278,0,267,291,282,278],
[260,291,283,284,0,289,259,282],
[283,281,291,260,262,0,266,254],
[279,299,271,269,292,285,0,286],
[296,293,300,273,269,297,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,313,245,314,335,315,241],
[286,0,311,289,436,240,243,335],
[238,240,0,289,289,216,193,240],
[306,262,262,0,361,334,292,286],
[237,115,262,190,0,262,218,236],
[216,311,335,217,289,0,242,214],
[236,308,358,259,333,309,0,187],
[310,216,311,265,315,337,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,312,310,286,300,349,268],
[244,0,305,258,258,234,309,261],
[239,246,0,229,222,209,260,204],
[241,293,322,0,239,247,332,271],
[265,293,329,312,0,260,334,289],
[251,317,342,304,291,0,345,276],
[202,242,291,219,217,206,0,241],
[283,290,347,280,262,275,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,280,278,291,271,282,289],
[291,0,271,265,289,287,281,290],
[271,280,0,275,288,277,284,306],
[273,286,276,0,269,287,265,315],
[260,262,263,282,0,266,282,275],
[280,264,274,264,285,0,281,284],
[269,270,267,286,269,270,0,290],
[262,261,245,236,276,267,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,279,259,273,280,268],
[275,0,260,276,257,277,280,252],
[278,291,0,295,268,280,282,283],
[272,275,256,0,262,266,256,249],
[292,294,283,289,0,286,293,268],
[278,274,271,285,265,0,278,265],
[271,271,269,295,258,273,0,274],
[283,299,268,302,283,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,289,268,295,300,292,294],
[272,0,303,274,279,286,266,275],
[262,248,0,261,267,264,248,250],
[283,277,290,0,273,261,272,266],
[256,272,284,278,0,264,262,260],
[251,265,287,290,287,0,286,267],
[259,285,303,279,289,265,0,283],
[257,276,301,285,291,284,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,268,359,305,297,266,298],
[292,0,278,344,261,273,241,270],
[283,273,0,370,311,317,288,301],
[192,207,181,0,209,226,219,252],
[246,290,240,342,0,297,249,281],
[254,278,234,325,254,0,227,263],
[285,310,263,332,302,324,0,294],
[253,281,250,299,270,288,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,266,275,262,270,284,289],
[285,0,274,279,268,282,275,283],
[285,277,0,259,263,275,298,284],
[276,272,292,0,272,275,280,292],
[289,283,288,279,0,270,282,306],
[281,269,276,276,281,0,286,294],
[267,276,253,271,269,265,0,266],
[262,268,267,259,245,257,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,288,282,299,265,288],
[276,0,277,267,275,266,261,294],
[284,274,0,287,300,300,292,293],
[263,284,264,0,305,282,286,290],
[269,276,251,246,0,263,271,279],
[252,285,251,269,288,0,268,275],
[286,290,259,265,280,283,0,299],
[263,257,258,261,272,276,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,278,278,271,306,320],
[275,0,285,241,279,277,286,273],
[267,266,0,246,240,262,286,274],
[273,310,305,0,289,293,322,282],
[273,272,311,262,0,258,288,299],
[280,274,289,258,293,0,288,327],
[245,265,265,229,263,263,0,280],
[231,278,277,269,252,224,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,249,244,278,275,258,253],
[313,0,289,272,300,298,284,288],
[302,262,0,274,292,277,267,262],
[307,279,277,0,285,271,274,287],
[273,251,259,266,0,266,250,262],
[276,253,274,280,285,0,241,272],
[293,267,284,277,301,310,0,293],
[298,263,289,264,289,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,394,275,394,311,393,311],
[157,0,234,235,275,274,353,313],
[157,317,0,235,318,235,275,274],
[276,316,316,0,316,274,273,352],
[157,276,233,235,0,274,236,274],
[240,277,316,277,277,0,317,433],
[158,198,276,278,315,234,0,275],
[240,238,277,199,277,118,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,292,256,279,260,277],
[269,0,271,270,252,282,278,270],
[279,280,0,245,255,282,259,278],
[259,281,306,0,268,268,250,285],
[295,299,296,283,0,303,279,273],
[272,269,269,283,248,0,247,288],
[291,273,292,301,272,304,0,291],
[274,281,273,266,278,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,252,269,270,257,304],
[277,0,250,224,252,258,257,223],
[267,301,0,317,284,289,271,241],
[299,327,234,0,270,256,287,255],
[282,299,267,281,0,242,327,299],
[281,293,262,295,309,0,342,322],
[294,294,280,264,224,209,0,244],
[247,328,310,296,252,229,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,308,232,295,288,277,240],
[294,0,265,244,278,307,264,241],
[243,286,0,223,268,302,253,257],
[319,307,328,0,344,343,247,273],
[256,273,283,207,0,295,236,199],
[263,244,249,208,256,0,230,307],
[274,287,298,304,315,321,0,274],
[311,310,294,278,352,244,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,271,302,270,295,284,287],
[242,0,260,255,266,287,245,246],
[280,291,0,291,252,309,280,289],
[249,296,260,0,279,308,262,272],
[281,285,299,272,0,309,292,257],
[256,264,242,243,242,0,260,250],
[267,306,271,289,259,291,0,267],
[264,305,262,279,294,301,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,292,313,297,272,257,291],
[284,0,285,304,286,288,257,308],
[259,266,0,326,306,281,275,290],
[238,247,225,0,288,247,257,250],
[254,265,245,263,0,238,242,257],
[279,263,270,304,313,0,276,305],
[294,294,276,294,309,275,0,287],
[260,243,261,301,294,246,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,290,300,267,272,278,303],
[265,0,252,274,232,259,239,278],
[261,299,0,278,245,262,246,272],
[251,277,273,0,228,241,213,276],
[284,319,306,323,0,308,265,302],
[279,292,289,310,243,0,233,275],
[273,312,305,338,286,318,0,300],
[248,273,279,275,249,276,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,284,286,293,282,281],
[270,0,263,270,280,280,275,261],
[277,288,0,272,273,288,281,277],
[267,281,279,0,285,284,273,271],
[265,271,278,266,0,297,279,281],
[258,271,263,267,254,0,275,275],
[269,276,270,278,272,276,0,269],
[270,290,274,280,270,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,276,279,271,282,276],
[273,0,278,277,289,275,281,279],
[266,273,0,275,282,273,272,267],
[275,274,276,0,276,285,265,279],
[272,262,269,275,0,276,269,258],
[280,276,278,266,275,0,267,270],
[269,270,279,286,282,284,0,279],
[275,272,284,272,293,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,298,266,293,295,282,272],
[248,0,263,242,246,291,249,285],
[253,288,0,262,248,298,288,234],
[285,309,289,0,304,286,297,272],
[258,305,303,247,0,280,267,266],
[256,260,253,265,271,0,244,270],
[269,302,263,254,284,307,0,276],
[279,266,317,279,285,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,287,290,296,278,298,285],
[281,0,290,279,296,279,268,280],
[264,261,0,294,259,249,271,297],
[261,272,257,0,277,252,260,301],
[255,255,292,274,0,282,268,270],
[273,272,302,299,269,0,291,299],
[253,283,280,291,283,260,0,280],
[266,271,254,250,281,252,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,302,302,269,291,286,277],
[261,0,303,314,269,285,289,274],
[249,248,0,270,263,259,283,248],
[249,237,281,0,267,261,282,249],
[282,282,288,284,0,296,294,248],
[260,266,292,290,255,0,279,266],
[265,262,268,269,257,272,0,229],
[274,277,303,302,303,285,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,257,288,279,270,281],
[274,0,277,276,298,290,305,287],
[252,274,0,268,258,283,288,255],
[294,275,283,0,287,306,299,284],
[263,253,293,264,0,299,305,271],
[272,261,268,245,252,0,297,278],
[281,246,263,252,246,254,0,226],
[270,264,296,267,280,273,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,272,291,302,276,285,252],
[256,0,285,284,287,281,240,239],
[279,266,0,281,302,299,254,271],
[260,267,270,0,294,264,226,272],
[249,264,249,257,0,291,240,246],
[275,270,252,287,260,0,234,247],
[266,311,297,325,311,317,0,279],
[299,312,280,279,305,304,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,268,271,341,282,315,274],
[258,0,266,272,338,264,282,247],
[283,285,0,319,333,290,353,261],
[280,279,232,0,298,278,306,283],
[210,213,218,253,0,214,217,209],
[269,287,261,273,337,0,298,265],
[236,269,198,245,334,253,0,238],
[277,304,290,268,342,286,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,292,290,274,294,298,272],
[251,0,263,273,256,281,291,271],
[259,288,0,317,293,295,301,296],
[261,278,234,0,265,286,280,278],
[277,295,258,286,0,303,286,290],
[257,270,256,265,248,0,262,261],
[253,260,250,271,265,289,0,258],
[279,280,255,273,261,290,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,294,279,281,256,284,313],
[250,0,256,264,240,242,268,296],
[257,295,0,235,241,248,292,273],
[272,287,316,0,271,278,311,299],
[270,311,310,280,0,274,306,285],
[295,309,303,273,277,0,275,300],
[267,283,259,240,245,276,0,293],
[238,255,278,252,266,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,271,265,230,243,313,305],
[315,0,291,271,269,286,284,292],
[280,260,0,283,306,295,299,275],
[286,280,268,0,289,288,269,290],
[321,282,245,262,0,289,318,300],
[308,265,256,263,262,0,308,287],
[238,267,252,282,233,243,0,276],
[246,259,276,261,251,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,266,293,297,271,331,273],
[305,0,302,318,319,275,379,285],
[285,249,0,311,320,260,350,323],
[258,233,240,0,247,284,302,245],
[254,232,231,304,0,227,344,273],
[280,276,291,267,324,0,319,290],
[220,172,201,249,207,232,0,253],
[278,266,228,306,278,261,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,296,306,301,271,266,275],
[269,0,264,284,290,283,278,285],
[255,287,0,287,271,280,296,273],
[245,267,264,0,245,252,263,266],
[250,261,280,306,0,267,271,283],
[280,268,271,299,284,0,278,293],
[285,273,255,288,280,273,0,291],
[276,266,278,285,268,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,250,268,272,252,264,281],
[262,0,266,270,281,255,267,260],
[301,285,0,288,306,287,279,270],
[283,281,263,0,293,265,269,251],
[279,270,245,258,0,287,267,253],
[299,296,264,286,264,0,278,273],
[287,284,272,282,284,273,0,271],
[270,291,281,300,298,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,269,294,277,284,272,275],
[252,0,251,264,257,260,243,251],
[282,300,0,286,279,290,278,274],
[257,287,265,0,266,270,253,280],
[274,294,272,285,0,259,254,263],
[267,291,261,281,292,0,266,268],
[279,308,273,298,297,285,0,280],
[276,300,277,271,288,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,269,268,256,244,236,268],
[316,0,298,256,270,289,301,296],
[282,253,0,255,265,258,284,276],
[283,295,296,0,262,269,295,300],
[295,281,286,289,0,271,283,279],
[307,262,293,282,280,0,293,306],
[315,250,267,256,268,258,0,266],
[283,255,275,251,272,245,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,273,281,256,236,276,276],
[308,0,270,271,285,256,272,256],
[278,281,0,278,256,246,274,254],
[270,280,273,0,270,259,279,251],
[295,266,295,281,0,267,293,280],
[315,295,305,292,284,0,274,307],
[275,279,277,272,258,277,0,278],
[275,295,297,300,271,244,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,270,255,270,283,281],
[279,0,286,258,277,282,292,284],
[267,265,0,260,253,281,276,268],
[281,293,291,0,272,284,289,293],
[296,274,298,279,0,295,292,297],
[281,269,270,267,256,0,270,257],
[268,259,275,262,259,281,0,260],
[270,267,283,258,254,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,299,287,269,269,285,274],
[260,0,283,272,259,265,273,276],
[252,268,0,273,258,263,257,273],
[264,279,278,0,252,277,274,258],
[282,292,293,299,0,284,289,267],
[282,286,288,274,267,0,277,274],
[266,278,294,277,262,274,0,270],
[277,275,278,293,284,277,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,275,281,281,287,288],
[268,0,272,274,274,272,283,267],
[257,279,0,282,278,252,271,261],
[276,277,269,0,284,262,279,255],
[270,277,273,267,0,265,290,263],
[270,279,299,289,286,0,299,276],
[264,268,280,272,261,252,0,260],
[263,284,290,296,288,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,245,249,258,255,260,265],
[305,0,281,257,282,281,304,309],
[306,270,0,267,309,268,288,289],
[302,294,284,0,281,272,286,298],
[293,269,242,270,0,263,265,267],
[296,270,283,279,288,0,311,305],
[291,247,263,265,286,240,0,278],
[286,242,262,253,284,246,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,286,262,245,264,253,270],
[290,0,297,247,233,265,267,278],
[265,254,0,254,251,261,246,267],
[289,304,297,0,279,259,269,290],
[306,318,300,272,0,277,274,292],
[287,286,290,292,274,0,286,317],
[298,284,305,282,277,265,0,293],
[281,273,284,261,259,234,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,299,286,309,274,302],
[281,0,261,280,287,297,284,303],
[272,290,0,273,254,288,272,280],
[252,271,278,0,284,308,289,284],
[265,264,297,267,0,296,266,293],
[242,254,263,243,255,0,247,273],
[277,267,279,262,285,304,0,315],
[249,248,271,267,258,278,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,289,244,341,323,307,277],
[295,0,251,267,337,312,311,268],
[262,300,0,271,351,337,299,270],
[307,284,280,0,329,310,314,261],
[210,214,200,222,0,257,245,254],
[228,239,214,241,294,0,239,241],
[244,240,252,237,306,312,0,254],
[274,283,281,290,297,310,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,269,238,285,262,237,249],
[302,0,268,279,280,303,268,253],
[282,283,0,270,294,280,287,253],
[313,272,281,0,296,301,275,280],
[266,271,257,255,0,263,273,243],
[289,248,271,250,288,0,245,246],
[314,283,264,276,278,306,0,244],
[302,298,298,271,308,305,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,287,257,268,296,278,276],
[222,0,227,254,246,251,256,278],
[264,324,0,297,256,282,244,274],
[294,297,254,0,251,288,264,296],
[283,305,295,300,0,299,261,301],
[255,300,269,263,252,0,274,285],
[273,295,307,287,290,277,0,298],
[275,273,277,255,250,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,296,284,277,290,274],
[250,0,268,278,261,272,270,268],
[278,283,0,292,262,290,285,291],
[255,273,259,0,259,258,252,257],
[267,290,289,292,0,280,275,289],
[274,279,261,293,271,0,264,277],
[261,281,266,299,276,287,0,276],
[277,283,260,294,262,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,224,228,194,247,196,211],
[306,0,210,274,247,262,288,211],
[327,341,0,279,295,265,308,311],
[323,277,272,0,260,227,212,212],
[357,304,256,291,0,262,258,275],
[304,289,286,324,289,0,223,257],
[355,263,243,339,293,328,0,242],
[340,340,240,339,276,294,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,266,260,264,278,283,270],
[270,0,284,272,277,276,258,283],
[285,267,0,282,257,266,251,262],
[291,279,269,0,256,268,257,269],
[287,274,294,295,0,293,269,283],
[273,275,285,283,258,0,245,260],
[268,293,300,294,282,306,0,298],
[281,268,289,282,268,291,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,259,262,268,264,246,267],
[302,0,257,271,298,286,283,289],
[292,294,0,267,300,263,249,299],
[289,280,284,0,308,274,267,293],
[283,253,251,243,0,260,272,277],
[287,265,288,277,291,0,261,274],
[305,268,302,284,279,290,0,301],
[284,262,252,258,274,277,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,296,284,282,278,279],
[264,0,275,294,283,291,292,260],
[283,276,0,285,281,289,284,271],
[255,257,266,0,273,270,258,269],
[267,268,270,278,0,298,284,271],
[269,260,262,281,253,0,277,256],
[273,259,267,293,267,274,0,278],
[272,291,280,282,280,295,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,256,210,171,128,168,253],
[341,0,298,255,256,256,299,299],
[295,253,0,211,215,214,212,421],
[341,296,340,0,258,215,297,340],
[380,295,336,293,0,259,254,379],
[423,295,337,336,292,0,249,423],
[383,252,339,254,297,302,0,465],
[298,252,130,211,172,128,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,240,193,298,328,247,190],
[295,0,251,296,309,265,284,204],
[311,300,0,237,370,313,256,249],
[358,255,314,0,341,315,260,278],
[253,242,181,210,0,256,230,177],
[223,286,238,236,295,0,215,180],
[304,267,295,291,321,336,0,307],
[361,347,302,273,374,371,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,296,287,306,288,277,292],
[279,0,272,286,280,284,280,282],
[255,279,0,288,292,287,264,272],
[264,265,263,0,262,254,270,288],
[245,271,259,289,0,264,281,270],
[263,267,264,297,287,0,278,269],
[274,271,287,281,270,273,0,273],
[259,269,279,263,281,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,255,246,277,250,241,251],
[313,0,288,262,287,302,293,293],
[296,263,0,239,281,281,297,267],
[305,289,312,0,306,284,295,271],
[274,264,270,245,0,267,279,259],
[301,249,270,267,284,0,270,257],
[310,258,254,256,272,281,0,257],
[300,258,284,280,292,294,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,257,246,257,243,253,276],
[310,0,268,293,291,278,288,250],
[294,283,0,281,276,258,270,271],
[305,258,270,0,274,291,275,269],
[294,260,275,277,0,278,268,280],
[308,273,293,260,273,0,270,282],
[298,263,281,276,283,281,0,291],
[275,301,280,282,271,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,248,275,246,273,248,273],
[296,0,292,272,285,279,267,254],
[303,259,0,293,272,293,259,286],
[276,279,258,0,270,261,228,267],
[305,266,279,281,0,295,281,280],
[278,272,258,290,256,0,286,252],
[303,284,292,323,270,265,0,269],
[278,297,265,284,271,299,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,272,257,281,274,263],
[286,0,281,274,278,262,268,289],
[271,270,0,272,259,266,270,266],
[279,277,279,0,281,278,275,281],
[294,273,292,270,0,278,285,280],
[270,289,285,273,273,0,279,292],
[277,283,281,276,266,272,0,281],
[288,262,285,270,271,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,298,157,252,228,299,231],
[366,0,364,248,294,250,458,250],
[253,187,0,225,301,251,392,256],
[394,303,326,0,371,232,418,281],
[299,257,250,180,0,276,438,230],
[323,301,300,319,275,0,413,209],
[252,93,159,133,113,138,0,139],
[320,301,295,270,321,342,412,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,303,303,273,292,345,294],
[242,0,232,258,233,266,300,207],
[248,319,0,266,299,283,313,266],
[248,293,285,0,261,302,319,321],
[278,318,252,290,0,299,330,270],
[259,285,268,249,252,0,266,217],
[206,251,238,232,221,285,0,217],
[257,344,285,230,281,334,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,268,274,266,275,274],
[283,0,284,281,264,288,276,290],
[282,267,0,254,259,276,266,280],
[283,270,297,0,280,267,274,271],
[277,287,292,271,0,286,270,270],
[285,263,275,284,265,0,276,279],
[276,275,285,277,281,275,0,295],
[277,261,271,280,281,272,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,271,256,252,277,301],
[278,0,252,273,285,257,283,271],
[267,299,0,254,308,250,283,292],
[280,278,297,0,278,275,308,257],
[295,266,243,273,0,270,280,260],
[299,294,301,276,281,0,270,299],
[274,268,268,243,271,281,0,288],
[250,280,259,294,291,252,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,299,285,276,297,280],
[299,0,278,318,277,259,299,260],
[286,273,0,284,285,266,334,279],
[252,233,267,0,244,240,264,240],
[266,274,266,307,0,265,285,270],
[275,292,285,311,286,0,273,278],
[254,252,217,287,266,278,0,239],
[271,291,272,311,281,273,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,301,275,288,283,292,271],
[284,0,287,282,265,300,280,270],
[250,264,0,260,270,265,259,251],
[276,269,291,0,267,256,290,269],
[263,286,281,284,0,281,279,276],
[268,251,286,295,270,0,281,261],
[259,271,292,261,272,270,0,269],
[280,281,300,282,275,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,267,268,284,283,263,262],
[298,0,286,273,296,287,293,299],
[284,265,0,246,291,282,258,257],
[283,278,305,0,317,305,270,274],
[267,255,260,234,0,244,265,258],
[268,264,269,246,307,0,268,250],
[288,258,293,281,286,283,0,278],
[289,252,294,277,293,301,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,326,302,268,340,270,307],
[223,0,266,282,253,325,232,240],
[225,285,0,246,196,301,284,318],
[249,269,305,0,281,281,246,256],
[283,298,355,270,0,379,284,364],
[211,226,250,270,172,0,236,236],
[281,319,267,305,267,315,0,264],
[244,311,233,295,187,315,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,263,315,259,291,273,234],
[238,0,227,295,276,259,279,255],
[288,324,0,292,268,286,296,267],
[236,256,259,0,187,279,255,226],
[292,275,283,364,0,269,285,283],
[260,292,265,272,282,0,271,297],
[278,272,255,296,266,280,0,279],
[317,296,284,325,268,254,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,278,296,303,283,302,308],
[305,0,363,329,265,252,318,336],
[273,188,0,305,230,209,245,274],
[255,222,246,0,302,220,279,315],
[248,286,321,249,0,272,243,292],
[268,299,342,331,279,0,309,352],
[249,233,306,272,308,242,0,304],
[243,215,277,236,259,199,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,265,282,276,286,271],
[283,0,281,284,273,295,294,271],
[266,270,0,289,275,281,269,270],
[286,267,262,0,270,276,295,277],
[269,278,276,281,0,282,299,262],
[275,256,270,275,269,0,276,265],
[265,257,282,256,252,275,0,273],
[280,280,281,274,289,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,286,259,246,267,246,260],
[291,0,283,271,277,276,246,284],
[265,268,0,249,247,270,271,255],
[292,280,302,0,275,267,267,298],
[305,274,304,276,0,283,286,294],
[284,275,281,284,268,0,255,264],
[305,305,280,284,265,296,0,278],
[291,267,296,253,257,287,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,282,260,259,298,289],
[283,0,290,304,270,285,296,296],
[287,261,0,277,276,274,270,262],
[269,247,274,0,259,241,283,260],
[291,281,275,292,0,266,299,282],
[292,266,277,310,285,0,285,294],
[253,255,281,268,252,266,0,281],
[262,255,289,291,269,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,261,265,272,245,261],
[294,0,292,272,271,293,277,290],
[270,259,0,268,238,233,260,268],
[290,279,283,0,291,283,283,272],
[286,280,313,260,0,280,268,294],
[279,258,318,268,271,0,271,263],
[306,274,291,268,283,280,0,292],
[290,261,283,279,257,288,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,276,278,272,292,293,288],
[263,0,293,268,287,297,295,287],
[275,258,0,283,292,270,297,291],
[273,283,268,0,278,266,291,268],
[279,264,259,273,0,273,285,291],
[259,254,281,285,278,0,289,277],
[258,256,254,260,266,262,0,261],
[263,264,260,283,260,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,265,289,278,264,285],
[272,0,264,286,269,289,256,262],
[275,287,0,256,294,286,276,303],
[286,265,295,0,301,280,283,282],
[262,282,257,250,0,269,249,275],
[273,262,265,271,282,0,267,273],
[287,295,275,268,302,284,0,300],
[266,289,248,269,276,278,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,253,253,264,261,253,251],
[295,0,292,288,274,281,280,290],
[298,259,0,271,257,285,270,260],
[298,263,280,0,260,297,268,248],
[287,277,294,291,0,285,288,273],
[290,270,266,254,266,0,267,261],
[298,271,281,283,263,284,0,276],
[300,261,291,303,278,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,294,275,279,259,281,289],
[265,0,277,284,281,257,264,277],
[257,274,0,262,250,244,269,266],
[276,267,289,0,257,255,276,272],
[272,270,301,294,0,271,291,282],
[292,294,307,296,280,0,271,284],
[270,287,282,275,260,280,0,277],
[262,274,285,279,269,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,274,291,291,256,268],
[283,0,293,269,293,280,288,267],
[278,258,0,262,281,278,255,272],
[277,282,289,0,284,271,286,318],
[260,258,270,267,0,284,253,255],
[260,271,273,280,267,0,254,274],
[295,263,296,265,298,297,0,272],
[283,284,279,233,296,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,259,266,229,245,263,275],
[297,0,277,304,274,305,282,296],
[292,274,0,284,249,288,306,306],
[285,247,267,0,269,285,285,289],
[322,277,302,282,0,267,275,300],
[306,246,263,266,284,0,287,308],
[288,269,245,266,276,264,0,297],
[276,255,245,262,251,243,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,293,267,314,304,251,276],
[257,0,266,254,299,281,241,245],
[258,285,0,258,291,279,264,269],
[284,297,293,0,264,295,282,252],
[237,252,260,287,0,248,228,249],
[247,270,272,256,303,0,278,270],
[300,310,287,269,323,273,0,272],
[275,306,282,299,302,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,271,269,269,262,295],
[260,0,271,270,267,278,272,271],
[272,280,0,274,274,274,258,280],
[280,281,277,0,272,262,273,270],
[282,284,277,279,0,266,264,283],
[282,273,277,289,285,0,276,285],
[289,279,293,278,287,275,0,295],
[256,280,271,281,268,266,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,293,279,270,272,276,255],
[272,0,278,267,257,274,275,256],
[258,273,0,271,258,251,273,272],
[272,284,280,0,274,272,277,269],
[281,294,293,277,0,286,275,276],
[279,277,300,279,265,0,290,273],
[275,276,278,274,276,261,0,272],
[296,295,279,282,275,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,285,287,300,258,273],
[279,0,280,286,289,268,277,266],
[289,271,0,290,280,298,281,278],
[266,265,261,0,274,277,257,280],
[264,262,271,277,0,272,262,266],
[251,283,253,274,279,0,250,263],
[293,274,270,294,289,301,0,277],
[278,285,273,271,285,288,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,288,303,274,272,275,310],
[198,0,243,251,277,211,229,260],
[263,308,0,267,301,282,313,306],
[248,300,284,0,297,250,292,288],
[277,274,250,254,0,240,299,305],
[279,340,269,301,311,0,306,312],
[276,322,238,259,252,245,0,313],
[241,291,245,263,246,239,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,271,321,266,249,304],
[279,0,267,269,276,276,273,290],
[287,284,0,289,318,266,282,313],
[280,282,262,0,296,256,261,276],
[230,275,233,255,0,257,247,272],
[285,275,285,295,294,0,262,316],
[302,278,269,290,304,289,0,304],
[247,261,238,275,279,235,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,236,256,263,245,276,251],
[283,0,273,254,271,275,264,274],
[315,278,0,263,288,256,269,266],
[295,297,288,0,290,281,278,254],
[288,280,263,261,0,281,297,275],
[306,276,295,270,270,0,288,284],
[275,287,282,273,254,263,0,229],
[300,277,285,297,276,267,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,297,285,289,274,293,295],
[299,0,288,268,280,287,301,305],
[254,263,0,275,272,280,267,258],
[266,283,276,0,281,268,293,283],
[262,271,279,270,0,260,289,281],
[277,264,271,283,291,0,266,296],
[258,250,284,258,262,285,0,284],
[256,246,293,268,270,255,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,257,277,278,287,283,280],
[283,0,284,284,259,291,281,303],
[294,267,0,282,294,303,299,283],
[274,267,269,0,302,281,298,275],
[273,292,257,249,0,265,280,273],
[264,260,248,270,286,0,289,276],
[268,270,252,253,271,262,0,275],
[271,248,268,276,278,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,246,266,279,239,250,251],
[299,0,267,283,293,288,268,252],
[305,284,0,299,305,291,273,296],
[285,268,252,0,266,272,256,257],
[272,258,246,285,0,274,269,282],
[312,263,260,279,277,0,286,276],
[301,283,278,295,282,265,0,282],
[300,299,255,294,269,275,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,296,284,297,271,288,262],
[281,0,294,272,286,272,301,282],
[255,257,0,285,285,272,275,265],
[267,279,266,0,281,278,288,252],
[254,265,266,270,0,250,266,234],
[280,279,279,273,301,0,297,251],
[263,250,276,263,285,254,0,258],
[289,269,286,299,317,300,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,283,276,294,277,303,268],
[260,0,259,269,282,269,289,262],
[268,292,0,278,295,275,270,277],
[275,282,273,0,291,283,296,280],
[257,269,256,260,0,262,283,252],
[274,282,276,268,289,0,286,264],
[248,262,281,255,268,265,0,256],
[283,289,274,271,299,287,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,284,273,260,248,298,266],
[257,0,284,281,281,268,289,284],
[267,267,0,278,276,250,277,244],
[278,270,273,0,270,254,264,259],
[291,270,275,281,0,256,276,257],
[303,283,301,297,295,0,278,275],
[253,262,274,287,275,273,0,254],
[285,267,307,292,294,276,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,304,297,268,280,310,278],
[269,0,305,288,286,272,264,277],
[247,246,0,250,251,260,277,265],
[254,263,301,0,253,264,272,263],
[283,265,300,298,0,275,286,299],
[271,279,291,287,276,0,276,290],
[241,287,274,279,265,275,0,273],
[273,274,286,288,252,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,248,286,306,274,297,315],
[264,0,245,305,318,273,281,311],
[303,306,0,275,301,306,265,312],
[265,246,276,0,275,259,266,324],
[245,233,250,276,0,264,300,299],
[277,278,245,292,287,0,307,327],
[254,270,286,285,251,244,0,282],
[236,240,239,227,252,224,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,264,266,277,285,279,294],
[301,0,289,289,288,266,296,287],
[287,262,0,264,295,284,293,274],
[285,262,287,0,298,278,304,301],
[274,263,256,253,0,271,271,287],
[266,285,267,273,280,0,292,303],
[272,255,258,247,280,259,0,277],
[257,264,277,250,264,248,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,252,287,264,263,281],
[288,0,292,278,287,273,271,281],
[282,259,0,261,281,283,264,250],
[299,273,290,0,279,275,300,258],
[264,264,270,272,0,270,265,274],
[287,278,268,276,281,0,279,277],
[288,280,287,251,286,272,0,266],
[270,270,301,293,277,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,259,273,272,279,238,286],
[281,0,285,269,273,286,317,300],
[292,266,0,276,264,287,260,315],
[278,282,275,0,263,286,254,292],
[279,278,287,288,0,275,271,305],
[272,265,264,265,276,0,279,284],
[313,234,291,297,280,272,0,297],
[265,251,236,259,246,267,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,271,285,270,255,260,252],
[308,0,251,290,258,294,294,287],
[280,300,0,285,286,258,280,304],
[266,261,266,0,241,258,282,258],
[281,293,265,310,0,244,240,271],
[296,257,293,293,307,0,288,279],
[291,257,271,269,311,263,0,299],
[299,264,247,293,280,272,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,290,281,279,289,268],
[265,0,274,277,273,260,279,262],
[274,277,0,298,268,276,288,270],
[261,274,253,0,265,257,275,256],
[270,278,283,286,0,285,294,276],
[272,291,275,294,266,0,278,265],
[262,272,263,276,257,273,0,258],
[283,289,281,295,275,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,251,280,263,257,295,284],
[300,0,285,297,284,272,272,282],
[300,266,0,308,278,282,301,306],
[271,254,243,0,252,247,268,271],
[288,267,273,299,0,264,282,293],
[294,279,269,304,287,0,287,299],
[256,279,250,283,269,264,0,277],
[267,269,245,280,258,252,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,245,251,262,260,250,246],
[294,0,299,283,290,287,303,273],
[306,252,0,282,300,288,251,237],
[300,268,269,0,270,300,271,269],
[289,261,251,281,0,262,269,265],
[291,264,263,251,289,0,250,258],
[301,248,300,280,282,301,0,277],
[305,278,314,282,286,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,295,269,277,280,281,300],
[299,0,296,274,283,278,298,301],
[256,255,0,264,261,268,256,272],
[282,277,287,0,284,286,271,306],
[274,268,290,267,0,287,280,301],
[271,273,283,265,264,0,275,298],
[270,253,295,280,271,276,0,294],
[251,250,279,245,250,253,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,286,287,268,293,287,277],
[291,0,290,275,269,286,297,291],
[265,261,0,280,267,287,273,283],
[264,276,271,0,295,285,298,293],
[283,282,284,256,0,298,290,300],
[258,265,264,266,253,0,278,272],
[264,254,278,253,261,273,0,272],
[274,260,268,258,251,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,277,276,278,279,272,278],
[248,0,242,239,252,247,259,279],
[274,309,0,272,287,274,286,294],
[275,312,279,0,275,262,262,299],
[273,299,264,276,0,276,302,283],
[272,304,277,289,275,0,293,290],
[279,292,265,289,249,258,0,283],
[273,272,257,252,268,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,244,277,259,266,274,250],
[303,0,282,292,266,292,313,321],
[307,269,0,268,299,279,297,287],
[274,259,283,0,268,280,277,268],
[292,285,252,283,0,273,307,286],
[285,259,272,271,278,0,272,281],
[277,238,254,274,244,279,0,275],
[301,230,264,283,265,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,295,254,270,278,267,286],
[290,0,272,255,286,263,255,288],
[256,279,0,260,264,275,251,274],
[297,296,291,0,273,284,279,302],
[281,265,287,278,0,275,264,283],
[273,288,276,267,276,0,268,293],
[284,296,300,272,287,283,0,281],
[265,263,277,249,268,258,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,261,280,279,280,273,282],
[269,0,263,266,261,275,265,267],
[290,288,0,279,266,291,283,287],
[271,285,272,0,288,272,281,299],
[272,290,285,263,0,278,283,265],
[271,276,260,279,273,0,280,277],
[278,286,268,270,268,271,0,281],
[269,284,264,252,286,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,271,283,265,287,290],
[264,0,264,272,279,258,276,271],
[267,287,0,271,271,276,279,264],
[280,279,280,0,281,266,277,281],
[268,272,280,270,0,268,271,278],
[286,293,275,285,283,0,289,291],
[264,275,272,274,280,262,0,265],
[261,280,287,270,273,260,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,233,230,246,254,294,182],
[316,0,252,218,278,260,277,225],
[318,299,0,278,278,283,310,268],
[321,333,273,0,308,303,301,298],
[305,273,273,243,0,263,289,241],
[297,291,268,248,288,0,303,228],
[257,274,241,250,262,248,0,227],
[369,326,283,253,310,323,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,274,268,308,291,271],
[271,0,277,277,268,308,275,268],
[277,274,0,289,280,294,289,273],
[277,274,262,0,271,302,281,275],
[283,283,271,280,0,308,299,288],
[243,243,257,249,243,0,256,256],
[260,276,262,270,252,295,0,265],
[280,283,278,276,263,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,258,272,270,268,291],
[271,0,278,267,259,257,259,282],
[264,273,0,263,252,246,265,272],
[293,284,288,0,254,242,297,289],
[279,292,299,297,0,267,294,283],
[281,294,305,309,284,0,255,287],
[283,292,286,254,257,296,0,292],
[260,269,279,262,268,264,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,284,271,302,286,290,261],
[293,0,289,245,305,285,273,277],
[267,262,0,267,278,271,261,270],
[280,306,284,0,296,283,306,268],
[249,246,273,255,0,279,265,271],
[265,266,280,268,272,0,266,271],
[261,278,290,245,286,285,0,275],
[290,274,281,283,280,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,351,312,282,361,264,227],
[321,0,317,301,203,312,266,264],
[200,234,0,278,223,301,186,184],
[239,250,273,0,204,282,252,232],
[269,348,328,347,0,345,331,261],
[190,239,250,269,206,0,220,221],
[287,285,365,299,220,331,0,282],
[324,287,367,319,290,330,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,288,271,272,296,291],
[279,0,268,285,266,267,285,286],
[286,283,0,302,266,305,305,300],
[263,266,249,0,255,270,282,297],
[280,285,285,296,0,265,294,286],
[279,284,246,281,286,0,275,304],
[255,266,246,269,257,276,0,275],
[260,265,251,254,265,247,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,274,254,274,279,277],
[276,0,299,280,250,281,296,290],
[280,252,0,269,279,261,290,290],
[277,271,282,0,295,277,284,287],
[297,301,272,256,0,285,295,293],
[277,270,290,274,266,0,269,270],
[272,255,261,267,256,282,0,281],
[274,261,261,264,258,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,258,268,276,259,276,283],
[296,0,272,285,277,302,281,323],
[293,279,0,264,261,270,313,291],
[283,266,287,0,298,284,301,288],
[275,274,290,253,0,278,297,295],
[292,249,281,267,273,0,283,297],
[275,270,238,250,254,268,0,275],
[268,228,260,263,256,254,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,274,284,272,277,256],
[261,0,285,261,275,257,272,258],
[265,266,0,283,273,266,265,273],
[277,290,268,0,293,262,261,273],
[267,276,278,258,0,256,267,257],
[279,294,285,289,295,0,272,285],
[274,279,286,290,284,279,0,286],
[295,293,278,278,294,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,291,311,252,306,260],
[275,0,291,280,236,241,252,217],
[267,260,0,270,278,267,267,241],
[260,271,281,0,263,254,278,222],
[240,315,273,288,0,287,271,263],
[299,310,284,297,264,0,306,283],
[245,299,284,273,280,245,0,262],
[291,334,310,329,288,268,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,226,257,286,286,299],
[287,0,267,281,310,303,286,291],
[289,284,0,243,298,318,288,276],
[325,270,308,0,327,309,327,308],
[294,241,253,224,0,284,260,271],
[265,248,233,242,267,0,287,275],
[265,265,263,224,291,264,0,270],
[252,260,275,243,280,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,248,263,282,241,238,251],
[290,0,268,268,290,259,280,273],
[303,283,0,292,298,271,286,279],
[288,283,259,0,289,246,251,282],
[269,261,253,262,0,230,258,271],
[310,292,280,305,321,0,266,301],
[313,271,265,300,293,285,0,285],
[300,278,272,269,280,250,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,295,273,294,298,272],
[264,0,278,292,286,283,319,291],
[265,273,0,281,294,282,280,282],
[256,259,270,0,247,280,290,268],
[278,265,257,304,0,321,296,273],
[257,268,269,271,230,0,268,247],
[253,232,271,261,255,283,0,253],
[279,260,269,283,278,304,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,293,281,271,294,311,280],
[266,0,265,259,258,290,299,266],
[258,286,0,264,257,276,283,285],
[270,292,287,0,281,285,305,285],
[280,293,294,270,0,286,307,286],
[257,261,275,266,265,0,287,275],
[240,252,268,246,244,264,0,269],
[271,285,266,266,265,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,301,286,287,279,268],
[261,0,257,272,260,289,224,244],
[280,294,0,273,262,280,257,268],
[250,279,278,0,251,278,258,287],
[265,291,289,300,0,276,267,268],
[264,262,271,273,275,0,259,288],
[272,327,294,293,284,292,0,287],
[283,307,283,264,283,263,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,298,295,281,276,277],
[276,0,275,289,263,268,290,266],
[264,276,0,297,289,283,297,281],
[253,262,254,0,279,277,278,255],
[256,288,262,272,0,287,263,275],
[270,283,268,274,264,0,286,266],
[275,261,254,273,288,265,0,273],
[274,285,270,296,276,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,304,303,318,338,279,273],
[269,0,306,287,273,336,271,279],
[247,245,0,276,282,305,250,259],
[248,264,275,0,278,296,246,248],
[233,278,269,273,0,276,259,243],
[213,215,246,255,275,0,206,222],
[272,280,301,305,292,345,0,263],
[278,272,292,303,308,329,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,285,261,299,295,265],
[264,0,240,264,253,260,262,244],
[283,311,0,266,269,295,289,275],
[266,287,285,0,267,282,291,280],
[290,298,282,284,0,284,295,270],
[252,291,256,269,267,0,263,256],
[256,289,262,260,256,288,0,269],
[286,307,276,271,281,295,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,257,244,250,253,262,275],
[283,0,282,262,263,255,281,279],
[294,269,0,268,263,253,268,279],
[307,289,283,0,279,274,288,287],
[301,288,288,272,0,282,288,304],
[298,296,298,277,269,0,286,303],
[289,270,283,263,263,265,0,292],
[276,272,272,264,247,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,274,289,265,283,284,285],
[254,0,263,279,254,272,277,285],
[277,288,0,276,277,269,260,302],
[262,272,275,0,254,279,268,281],
[286,297,274,297,0,308,304,307],
[268,279,282,272,243,0,261,268],
[267,274,291,283,247,290,0,269],
[266,266,249,270,244,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,265,286,281,294,274,284],
[269,0,249,271,270,270,265,281],
[286,302,0,275,279,271,300,289],
[265,280,276,0,284,278,285,289],
[270,281,272,267,0,277,261,275],
[257,281,280,273,274,0,267,273],
[277,286,251,266,290,284,0,288],
[267,270,262,262,276,278,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,319,348,271,310,278,273],
[298,0,337,346,295,306,315,273],
[232,214,0,340,221,287,230,225],
[203,205,211,0,227,261,250,249],
[280,256,330,324,0,338,290,278],
[241,245,264,290,213,0,229,245],
[273,236,321,301,261,322,0,288],
[278,278,326,302,273,306,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,270,282,260,263,291,275],
[302,0,290,276,270,268,281,288],
[281,261,0,270,267,253,265,270],
[269,275,281,0,258,264,281,269],
[291,281,284,293,0,266,304,286],
[288,283,298,287,285,0,288,275],
[260,270,286,270,247,263,0,266],
[276,263,281,282,265,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,245,251,270,249,265],
[286,0,287,287,285,267,268,299],
[289,264,0,268,254,273,264,291],
[306,264,283,0,270,280,275,267],
[300,266,297,281,0,274,308,285],
[281,284,278,271,277,0,291,299],
[302,283,287,276,243,260,0,276],
[286,252,260,284,266,252,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,237,241,233,287,246,270],
[304,0,277,240,240,295,272,271],
[314,274,0,281,279,322,291,287],
[310,311,270,0,291,317,273,288],
[318,311,272,260,0,310,295,305],
[264,256,229,234,241,0,271,258],
[305,279,260,278,256,280,0,290],
[281,280,264,263,246,293,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,250,278,267,242,274,265],
[293,0,270,285,266,289,282,280],
[301,281,0,283,277,268,266,262],
[273,266,268,0,266,263,273,249],
[284,285,274,285,0,281,291,264],
[309,262,283,288,270,0,287,277],
[277,269,285,278,260,264,0,245],
[286,271,289,302,287,274,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,277,272,293,282,283],
[265,0,261,292,259,274,279,258],
[281,290,0,297,288,300,280,271],
[274,259,254,0,284,297,269,238],
[279,292,263,267,0,300,260,277],
[258,277,251,254,251,0,253,281],
[269,272,271,282,291,298,0,253],
[268,293,280,313,274,270,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,249,272,229,252,254,243],
[309,0,278,277,265,254,269,273],
[302,273,0,267,280,276,259,279],
[279,274,284,0,252,260,260,261],
[322,286,271,299,0,268,272,275],
[299,297,275,291,283,0,290,263],
[297,282,292,291,279,261,0,271],
[308,278,272,290,276,288,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,275,277,271,273,272],
[277,0,292,279,282,267,282,268],
[283,259,0,277,279,274,262,280],
[276,272,274,0,267,272,266,285],
[274,269,272,284,0,269,258,270],
[280,284,277,279,282,0,272,270],
[278,269,289,285,293,279,0,277],
[279,283,271,266,281,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,280,293,287,263,266],
[269,0,266,271,274,248,271,266],
[259,285,0,285,279,268,262,278],
[271,280,266,0,270,255,263,255],
[258,277,272,281,0,265,268,252],
[264,303,283,296,286,0,286,259],
[288,280,289,288,283,265,0,261],
[285,285,273,296,299,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,265,263,278,282,281,279],
[284,0,265,292,282,256,288,266],
[286,286,0,275,306,282,297,280],
[288,259,276,0,280,258,268,271],
[273,269,245,271,0,250,254,253],
[269,295,269,293,301,0,282,278],
[270,263,254,283,297,269,0,270],
[272,285,271,280,298,273,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,262,270,270,267,260,283],
[271,0,258,267,277,268,263,269],
[289,293,0,270,299,273,286,275],
[281,284,281,0,285,285,272,276],
[281,274,252,266,0,278,269,285],
[284,283,278,266,273,0,272,273],
[291,288,265,279,282,279,0,287],
[268,282,276,275,266,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,277,300,298,279,283],
[259,0,263,271,278,256,271,256],
[278,288,0,276,291,269,286,288],
[274,280,275,0,284,290,284,275],
[251,273,260,267,0,254,273,265],
[253,295,282,261,297,0,275,284],
[272,280,265,267,278,276,0,277],
[268,295,263,276,286,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,280,291,291,304,291],
[274,0,289,262,271,277,291,284],
[281,262,0,262,256,283,274,288],
[271,289,289,0,280,274,279,283],
[260,280,295,271,0,269,290,284],
[260,274,268,277,282,0,292,296],
[247,260,277,272,261,259,0,268],
[260,267,263,268,267,255,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,287,271,275,260,294,274],
[277,0,277,275,279,284,277,272],
[264,274,0,257,270,262,263,271],
[280,276,294,0,301,290,262,271],
[276,272,281,250,0,263,271,252],
[291,267,289,261,288,0,283,299],
[257,274,288,289,280,268,0,275],
[277,279,280,280,299,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,278,286,277,269,274],
[276,0,278,272,262,257,267,277],
[283,273,0,280,264,266,264,290],
[273,279,271,0,257,272,258,265],
[265,289,287,294,0,283,279,286],
[274,294,285,279,268,0,267,285],
[282,284,287,293,272,284,0,289],
[277,274,261,286,265,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,263,304,274,285,275,276],
[309,0,268,295,278,258,282,279],
[288,283,0,312,260,279,283,290],
[247,256,239,0,262,230,283,244],
[277,273,291,289,0,286,310,297],
[266,293,272,321,265,0,299,255],
[276,269,268,268,241,252,0,254],
[275,272,261,307,254,296,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,263,262,299,262,325,284],
[246,0,309,274,290,286,302,235],
[288,242,0,288,292,308,267,249],
[289,277,263,0,281,237,275,234],
[252,261,259,270,0,279,291,236],
[289,265,243,314,272,0,306,240],
[226,249,284,276,260,245,0,210],
[267,316,302,317,315,311,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,250,286,250,273,284,268],
[275,0,258,271,267,284,273,272],
[301,293,0,286,282,275,285,278],
[265,280,265,0,260,268,239,266],
[301,284,269,291,0,290,283,281],
[278,267,276,283,261,0,268,282],
[267,278,266,312,268,283,0,268],
[283,279,273,285,270,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,278,270,257,284,283],
[250,0,312,320,272,283,296,250],
[266,239,0,251,259,243,295,272],
[273,231,300,0,251,251,298,234],
[281,279,292,300,0,271,288,276],
[294,268,308,300,280,0,307,297],
[267,255,256,253,263,244,0,270],
[268,301,279,317,275,254,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,274,279,269,263,267],
[283,0,267,291,276,276,278,267],
[282,284,0,283,277,273,254,279],
[277,260,268,0,266,271,256,259],
[272,275,274,285,0,285,260,269],
[282,275,278,280,266,0,272,257],
[288,273,297,295,291,279,0,277],
[284,284,272,292,282,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,273,299,284,289,288,282],
[288,0,275,286,280,281,288,277],
[278,276,0,287,272,288,269,284],
[252,265,264,0,262,272,263,262],
[267,271,279,289,0,292,284,288],
[262,270,263,279,259,0,263,279],
[263,263,282,288,267,288,0,278],
[269,274,267,289,263,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,283,289,292,288,278],
[284,0,298,267,255,293,273,280],
[266,253,0,270,254,279,251,262],
[268,284,281,0,270,271,274,276],
[262,296,297,281,0,286,276,278],
[259,258,272,280,265,0,265,266],
[263,278,300,277,275,286,0,274],
[273,271,289,275,273,285,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,287,285,290,277,290,274],
[259,0,258,272,260,265,260,254],
[264,293,0,257,275,279,271,273],
[266,279,294,0,286,280,262,270],
[261,291,276,265,0,264,245,266],
[274,286,272,271,287,0,262,269],
[261,291,280,289,306,289,0,281],
[277,297,278,281,285,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,278,254,284,273,248,255],
[309,0,308,288,315,315,300,271],
[273,243,0,269,268,290,273,218],
[297,263,282,0,279,274,232,229],
[267,236,283,272,0,282,229,297],
[278,236,261,277,269,0,259,253],
[303,251,278,319,322,292,0,266],
[296,280,333,322,254,298,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,266,276,289,302,303,288],
[271,0,273,243,272,271,268,281],
[285,278,0,271,283,290,273,294],
[275,308,280,0,298,298,293,296],
[262,279,268,253,0,270,268,262],
[249,280,261,253,281,0,273,253],
[248,283,278,258,283,278,0,291],
[263,270,257,255,289,298,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,289,291,267,302,287,305],
[279,0,291,287,263,311,281,271],
[262,260,0,283,260,272,265,268],
[260,264,268,0,260,277,286,303],
[284,288,291,291,0,280,274,293],
[249,240,279,274,271,0,256,280],
[264,270,286,265,277,295,0,277],
[246,280,283,248,258,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,279,285,258,266,287],
[291,0,283,280,287,281,277,267],
[298,268,0,277,284,262,266,288],
[272,271,274,0,277,261,250,261],
[266,264,267,274,0,261,264,291],
[293,270,289,290,290,0,286,286],
[285,274,285,301,287,265,0,279],
[264,284,263,290,260,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,268,290,281,271,256,248],
[270,0,273,276,271,273,277,263],
[283,278,0,284,271,272,242,272],
[261,275,267,0,274,287,246,268],
[270,280,280,277,0,291,280,272],
[280,278,279,264,260,0,254,264],
[295,274,309,305,271,297,0,290],
[303,288,279,283,279,287,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,280,272,278,270,272],
[268,0,268,262,276,274,284,271],
[282,283,0,280,279,280,266,285],
[271,289,271,0,279,278,278,280],
[279,275,272,272,0,275,275,289],
[273,277,271,273,276,0,273,271],
[281,267,285,273,276,278,0,271],
[279,280,266,271,262,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,260,254,277,260,268],
[285,0,264,251,245,263,273,264],
[274,287,0,285,293,299,268,280],
[291,300,266,0,286,285,277,292],
[297,306,258,265,0,285,260,285],
[274,288,252,266,266,0,271,284],
[291,278,283,274,291,280,0,284],
[283,287,271,259,266,267,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,272,283,282,267,256],
[282,0,265,281,294,278,292,286],
[277,286,0,273,276,278,271,281],
[279,270,278,0,298,286,300,286],
[268,257,275,253,0,275,270,258],
[269,273,273,265,276,0,291,275],
[284,259,280,251,281,260,0,271],
[295,265,270,265,293,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,285,295,280,277,308,278],
[282,0,289,302,275,271,277,253],
[266,262,0,269,264,240,270,282],
[256,249,282,0,243,259,287,273],
[271,276,287,308,0,285,305,288],
[274,280,311,292,266,0,320,254],
[243,274,281,264,246,231,0,237],
[273,298,269,278,263,297,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,278,278,271,270,283,273],
[244,0,264,249,259,252,258,260],
[273,287,0,274,286,276,265,291],
[273,302,277,0,282,258,269,276],
[280,292,265,269,0,247,266,271],
[281,299,275,293,304,0,258,288],
[268,293,286,282,285,293,0,266],
[278,291,260,275,280,263,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,231,246,274,270,227,237],
[317,0,271,293,274,296,283,263],
[320,280,0,256,294,298,252,266],
[305,258,295,0,263,294,242,254],
[277,277,257,288,0,280,221,270],
[281,255,253,257,271,0,263,244],
[324,268,299,309,330,288,0,284],
[314,288,285,297,281,307,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,271,294,280,296,304,297],
[269,0,286,285,278,299,277,311],
[280,265,0,275,293,290,266,284],
[257,266,276,0,290,295,266,295],
[271,273,258,261,0,288,296,277],
[255,252,261,256,263,0,263,289],
[247,274,285,285,255,288,0,292],
[254,240,267,256,274,262,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,296,296,276,275,268],
[275,0,253,289,300,276,270,274],
[274,298,0,282,289,265,280,264],
[255,262,269,0,284,284,264,281],
[255,251,262,267,0,256,264,258],
[275,275,286,267,295,0,280,276],
[276,281,271,287,287,271,0,284],
[283,277,287,270,293,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,259,276,291,263,274],
[293,0,299,280,304,297,289,264],
[270,252,0,261,269,267,254,252],
[292,271,290,0,275,282,241,279],
[275,247,282,276,0,261,253,243],
[260,254,284,269,290,0,265,264],
[288,262,297,310,298,286,0,277],
[277,287,299,272,308,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,271,275,272,262,272,255],
[284,0,268,265,274,282,272,251],
[280,283,0,266,273,287,274,246],
[276,286,285,0,267,282,277,287],
[279,277,278,284,0,268,282,273],
[289,269,264,269,283,0,282,268],
[279,279,277,274,269,269,0,283],
[296,300,305,264,278,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,239,310,162,309,291,274],
[333,0,277,259,220,311,346,331],
[312,274,0,332,201,274,257,312],
[241,292,219,0,292,291,256,275],
[389,331,350,259,0,366,313,370],
[242,240,277,260,185,0,310,277],
[260,205,294,295,238,241,0,332],
[277,220,239,276,181,274,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,259,258,268,257,264,268],
[274,0,264,262,266,272,259,295],
[292,287,0,285,279,284,273,287],
[293,289,266,0,281,276,274,290],
[283,285,272,270,0,273,278,286],
[294,279,267,275,278,0,273,282],
[287,292,278,277,273,278,0,296],
[283,256,264,261,265,269,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,260,274,244,255,247,273],
[310,0,282,267,277,251,264,264],
[291,269,0,295,286,252,258,269],
[277,284,256,0,277,273,283,263],
[307,274,265,274,0,277,272,297],
[296,300,299,278,274,0,266,281],
[304,287,293,268,279,285,0,268],
[278,287,282,288,254,270,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,261,251,301,255,270,348],
[215,0,196,212,216,167,237,266],
[290,355,0,287,305,285,275,367],
[300,339,264,0,326,290,296,339],
[250,335,246,225,0,300,239,278],
[296,384,266,261,251,0,294,294],
[281,314,276,255,312,257,0,333],
[203,285,184,212,273,257,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,294,285,281,295,258,282],
[282,0,305,300,267,281,288,297],
[257,246,0,276,249,268,263,270],
[266,251,275,0,252,270,267,307],
[270,284,302,299,0,300,273,287],
[256,270,283,281,251,0,278,279],
[293,263,288,284,278,273,0,304],
[269,254,281,244,264,272,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,289,288,272,289,285,284],
[266,0,262,267,261,278,278,268],
[262,289,0,285,276,274,285,291],
[263,284,266,0,269,270,288,260],
[279,290,275,282,0,289,277,263],
[262,273,277,281,262,0,279,263],
[266,273,266,263,274,272,0,266],
[267,283,260,291,288,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,287,290,282,282,277],
[275,0,269,267,291,272,266,274],
[278,282,0,283,282,270,272,277],
[264,284,268,0,271,273,271,269],
[261,260,269,280,0,251,256,285],
[269,279,281,278,300,0,285,279],
[269,285,279,280,295,266,0,286],
[274,277,274,282,266,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,252,248,244,254,247,270],
[309,0,276,272,283,287,278,282],
[299,275,0,270,274,270,284,292],
[303,279,281,0,272,293,263,283],
[307,268,277,279,0,284,284,293],
[297,264,281,258,267,0,280,288],
[304,273,267,288,267,271,0,283],
[281,269,259,268,258,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,266,271,254,282,278],
[282,0,265,266,278,265,285,277],
[293,286,0,292,273,273,275,276],
[285,285,259,0,269,261,273,275],
[280,273,278,282,0,257,294,268],
[297,286,278,290,294,0,299,266],
[269,266,276,278,257,252,0,274],
[273,274,275,276,283,285,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,271,262,255,245,277,255],
[304,0,280,254,266,297,301,292],
[280,271,0,260,224,257,289,256],
[289,297,291,0,291,306,311,270],
[296,285,327,260,0,305,314,270],
[306,254,294,245,246,0,300,273],
[274,250,262,240,237,251,0,265],
[296,259,295,281,281,278,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,270,280,276,270,282],
[281,0,296,273,281,292,271,287],
[266,255,0,270,265,249,269,276],
[281,278,281,0,284,271,272,292],
[271,270,286,267,0,269,276,292],
[275,259,302,280,282,0,274,293],
[281,280,282,279,275,277,0,290],
[269,264,275,259,259,258,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,253,273,260,264,260,255],
[284,0,239,268,268,287,266,269],
[298,312,0,312,301,330,279,267],
[278,283,239,0,270,279,260,259],
[291,283,250,281,0,273,258,266],
[287,264,221,272,278,0,248,255],
[291,285,272,291,293,303,0,282],
[296,282,284,292,285,296,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,322,257,265,261,258],
[281,0,277,296,277,276,283,263],
[296,274,0,295,243,281,272,281],
[229,255,256,0,260,246,254,272],
[294,274,308,291,0,291,275,281],
[286,275,270,305,260,0,259,270],
[290,268,279,297,276,292,0,274],
[293,288,270,279,270,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,349,221,272,345,299,315],
[268,0,299,304,363,281,286,317],
[202,252,0,206,221,185,271,234],
[330,247,345,0,346,281,297,313],
[279,188,330,205,0,294,284,264],
[206,270,366,270,257,0,255,304],
[252,265,280,254,267,296,0,315],
[236,234,317,238,287,247,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,269,261,235,243,257],
[281,0,257,267,288,240,265,265],
[283,294,0,297,284,287,257,254],
[282,284,254,0,283,239,250,249],
[290,263,267,268,0,253,246,249],
[316,311,264,312,298,0,284,266],
[308,286,294,301,305,267,0,278],
[294,286,297,302,302,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,290,285,270,291,283,272],
[284,0,273,288,277,283,296,283],
[261,278,0,276,268,273,276,274],
[266,263,275,0,274,271,275,273],
[281,274,283,277,0,266,297,273],
[260,268,278,280,285,0,267,272],
[268,255,275,276,254,284,0,279],
[279,268,277,278,278,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,290,268,283,279,263],
[263,0,282,286,259,266,259,258],
[264,269,0,278,272,266,251,261],
[261,265,273,0,272,263,263,252],
[283,292,279,279,0,276,256,263],
[268,285,285,288,275,0,275,280],
[272,292,300,288,295,276,0,276],
[288,293,290,299,288,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,255,280,274,283,283],
[273,0,277,282,275,268,291,278],
[269,274,0,258,263,264,276,277],
[296,269,293,0,285,278,296,291],
[271,276,288,266,0,272,292,290],
[277,283,287,273,279,0,281,294],
[268,260,275,255,259,270,0,271],
[268,273,274,260,261,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,262,276,282,278,274],
[278,0,269,263,277,289,280,267],
[268,282,0,260,281,280,280,280],
[289,288,291,0,280,281,284,275],
[275,274,270,271,0,277,270,270],
[269,262,271,270,274,0,272,258],
[273,271,271,267,281,279,0,287],
[277,284,271,276,281,293,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,313,247,330,267,277,271],
[266,0,293,293,307,246,277,262],
[238,258,0,243,277,280,237,239],
[304,258,308,0,259,282,275,265],
[221,244,274,292,0,236,270,253],
[284,305,271,269,315,0,295,279],
[274,274,314,276,281,256,0,251],
[280,289,312,286,298,272,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,257,287,269,247,247,295],
[292,0,269,289,281,264,251,275],
[294,282,0,317,280,249,256,291],
[264,262,234,0,272,238,190,230],
[282,270,271,279,0,257,247,288],
[304,287,302,313,294,0,272,300],
[304,300,295,361,304,279,0,269],
[256,276,260,321,263,251,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,261,274,298,269,282],
[280,0,285,291,269,289,268,292],
[270,266,0,266,267,293,276,280],
[290,260,285,0,266,291,272,290],
[277,282,284,285,0,274,269,271],
[253,262,258,260,277,0,256,266],
[282,283,275,279,282,295,0,296],
[269,259,271,261,280,285,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,250,257,280,275,275,254],
[279,0,257,253,265,230,293,242],
[301,294,0,302,280,320,270,281],
[294,298,249,0,277,284,279,304],
[271,286,271,274,0,280,218,239],
[276,321,231,267,271,0,276,264],
[276,258,281,272,333,275,0,273],
[297,309,270,247,312,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,271,267,276,272,280],
[268,0,248,269,267,264,291,275],
[280,303,0,264,263,298,304,243],
[280,282,287,0,282,286,311,266],
[284,284,288,269,0,268,307,276],
[275,287,253,265,283,0,282,257],
[279,260,247,240,244,269,0,233],
[271,276,308,285,275,294,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,279,259,324,288,325,326],
[281,0,272,289,293,253,290,314],
[272,279,0,274,339,280,347,287],
[292,262,277,0,268,271,369,269],
[227,258,212,283,0,279,263,243],
[263,298,271,280,272,0,293,248],
[226,261,204,182,288,258,0,266],
[225,237,264,282,308,303,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,288,225,260,280,268,262],
[293,0,255,250,269,303,283,259],
[263,296,0,232,247,284,278,283],
[326,301,319,0,277,306,273,360],
[291,282,304,274,0,301,274,278],
[271,248,267,245,250,0,213,245],
[283,268,273,278,277,338,0,335],
[289,292,268,191,273,306,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,281,263,256,264,284,305],
[264,0,283,283,271,288,251,296],
[270,268,0,272,257,272,285,287],
[288,268,279,0,249,288,281,311],
[295,280,294,302,0,273,266,313],
[287,263,279,263,278,0,250,271],
[267,300,266,270,285,301,0,291],
[246,255,264,240,238,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,290,273,276,277,263,284],
[288,0,278,268,292,270,278,283],
[261,273,0,256,270,271,258,260],
[278,283,295,0,283,283,275,284],
[275,259,281,268,0,294,270,298],
[274,281,280,268,257,0,256,265],
[288,273,293,276,281,295,0,270],
[267,268,291,267,253,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,299,271,303,298,300],
[277,0,298,299,273,283,260,301],
[265,253,0,293,273,282,262,274],
[252,252,258,0,268,283,254,273],
[280,278,278,283,0,278,262,290],
[248,268,269,268,273,0,263,275],
[253,291,289,297,289,288,0,297],
[251,250,277,278,261,276,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,286,271,290,294,283,272],
[251,0,275,282,285,274,252,287],
[265,276,0,278,302,264,265,275],
[280,269,273,0,298,272,244,274],
[261,266,249,253,0,240,253,257],
[257,277,287,279,311,0,281,267],
[268,299,286,307,298,270,0,308],
[279,264,276,277,294,284,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,260,285,276,285,253,267],
[282,0,273,279,271,266,251,281],
[291,278,0,274,272,283,264,273],
[266,272,277,0,276,267,271,255],
[275,280,279,275,0,283,279,277],
[266,285,268,284,268,0,262,273],
[298,300,287,280,272,289,0,277],
[284,270,278,296,274,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,274,292,290,287,268,276],
[258,0,268,273,272,266,255,263],
[277,283,0,278,309,274,271,270],
[259,278,273,0,270,263,245,267],
[261,279,242,281,0,287,267,253],
[264,285,277,288,264,0,282,284],
[283,296,280,306,284,269,0,305],
[275,288,281,284,298,267,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,268,280,311,278,286],
[279,0,266,273,278,293,272,275],
[282,285,0,272,271,295,255,282],
[283,278,279,0,280,296,269,283],
[271,273,280,271,0,278,253,282],
[240,258,256,255,273,0,252,266],
[273,279,296,282,298,299,0,294],
[265,276,269,268,269,285,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,303,275,299,288,302,270],
[206,0,268,244,277,265,278,242],
[248,283,0,249,254,281,265,250],
[276,307,302,0,320,285,285,264],
[252,274,297,231,0,272,298,277],
[263,286,270,266,279,0,266,273],
[249,273,286,266,253,285,0,255],
[281,309,301,287,274,278,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,322,271,311,298,277,295],
[278,0,316,294,272,287,272,283],
[229,235,0,250,250,256,253,251],
[280,257,301,0,259,280,285,298],
[240,279,301,292,0,275,256,262],
[253,264,295,271,276,0,268,266],
[274,279,298,266,295,283,0,266],
[256,268,300,253,289,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,255,251,250,239,273,330],
[279,0,260,261,278,267,274,311],
[296,291,0,276,263,265,252,312],
[300,290,275,0,284,288,287,313],
[301,273,288,267,0,293,267,316],
[312,284,286,263,258,0,268,296],
[278,277,299,264,284,283,0,304],
[221,240,239,238,235,255,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,278,284,265,322,291,279],
[325,0,257,276,336,271,286,298],
[273,294,0,311,312,327,319,308],
[267,275,240,0,297,275,251,229],
[286,215,239,254,0,279,280,241],
[229,280,224,276,272,0,261,233],
[260,265,232,300,271,290,0,244],
[272,253,243,322,310,318,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,294,280,272,281,299,278],
[261,0,277,276,262,272,258,263],
[257,274,0,279,252,272,265,241],
[271,275,272,0,264,263,272,262],
[279,289,299,287,0,276,287,252],
[270,279,279,288,275,0,284,282],
[252,293,286,279,264,267,0,274],
[273,288,310,289,299,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,262,253,268,270,251],
[286,0,279,262,289,280,268,253],
[283,272,0,248,283,262,265,239],
[289,289,303,0,308,273,289,285],
[298,262,268,243,0,251,259,249],
[283,271,289,278,300,0,289,272],
[281,283,286,262,292,262,0,253],
[300,298,312,266,302,279,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,281,266,276,282,275],
[278,0,282,275,287,296,284,286],
[281,269,0,275,277,280,269,263],
[270,276,276,0,259,284,277,256],
[285,264,274,292,0,277,281,275],
[275,255,271,267,274,0,259,267],
[269,267,282,274,270,292,0,285],
[276,265,288,295,276,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,311,280,295,280,311],
[276,0,278,297,258,302,313,310],
[265,273,0,303,276,293,311,297],
[240,254,248,0,247,296,278,262],
[271,293,275,304,0,293,287,289],
[256,249,258,255,258,0,263,273],
[271,238,240,273,264,288,0,285],
[240,241,254,289,262,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,253,292,263,267,252,257],
[292,0,268,280,292,283,277,278],
[298,283,0,301,289,303,289,273],
[259,271,250,0,275,280,269,262],
[288,259,262,276,0,282,267,251],
[284,268,248,271,269,0,274,264],
[299,274,262,282,284,277,0,264],
[294,273,278,289,300,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,252,270,292,267,303,274],
[262,0,281,273,289,282,295,240],
[299,270,0,286,302,295,302,289],
[281,278,265,0,302,288,275,264],
[259,262,249,249,0,269,269,255],
[284,269,256,263,282,0,296,252],
[248,256,249,276,282,255,0,261],
[277,311,262,287,296,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,300,290,271,270,276,308],
[273,0,273,283,280,278,281,291],
[251,278,0,276,268,258,267,285],
[261,268,275,0,264,253,258,290],
[280,271,283,287,0,286,272,274],
[281,273,293,298,265,0,278,300],
[275,270,284,293,279,273,0,294],
[243,260,266,261,277,251,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,257,259,270,255,276,259],
[276,0,271,263,270,273,270,266],
[294,280,0,266,273,270,275,272],
[292,288,285,0,262,281,268,294],
[281,281,278,289,0,261,274,272],
[296,278,281,270,290,0,273,273],
[275,281,276,283,277,278,0,277],
[292,285,279,257,279,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,263,258,289,268,280,292],
[295,0,280,278,286,244,298,274],
[288,271,0,290,298,285,318,292],
[293,273,261,0,290,270,294,277],
[262,265,253,261,0,260,281,300],
[283,307,266,281,291,0,302,284],
[271,253,233,257,270,249,0,288],
[259,277,259,274,251,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,285,319,303,274,301,279],
[252,0,230,259,283,271,307,243],
[266,321,0,275,330,302,354,307],
[232,292,276,0,316,289,305,271],
[248,268,221,235,0,283,230,201],
[277,280,249,262,268,0,272,232],
[250,244,197,246,321,279,0,237],
[272,308,244,280,350,319,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,288,259,271,278,279],
[277,0,262,272,270,273,268,259],
[271,289,0,276,272,247,275,276],
[263,279,275,0,272,270,278,271],
[292,281,279,279,0,270,290,248],
[280,278,304,281,281,0,291,270],
[273,283,276,273,261,260,0,254],
[272,292,275,280,303,281,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,250,234,220,216,284,250],
[270,0,282,313,235,283,269,233],
[301,269,0,265,281,315,329,289],
[317,238,286,0,208,285,313,268],
[331,316,270,343,0,347,346,283],
[335,268,236,266,204,0,283,271],
[267,282,222,238,205,268,0,253],
[301,318,262,283,268,280,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,278,285,265,274,269],
[275,0,272,276,288,276,271,270],
[285,279,0,277,281,292,269,284],
[273,275,274,0,287,277,278,277],
[266,263,270,264,0,269,262,261],
[286,275,259,274,282,0,265,267],
[277,280,282,273,289,286,0,268],
[282,281,267,274,290,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,260,282,282,275,269,307],
[281,0,283,269,268,281,293,284],
[291,268,0,272,283,286,288,278],
[269,282,279,0,285,276,299,278],
[269,283,268,266,0,270,282,280],
[276,270,265,275,281,0,287,282],
[282,258,263,252,269,264,0,283],
[244,267,273,273,271,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,295,265,283,289,308],
[274,0,255,271,284,265,281,284],
[266,296,0,291,277,259,293,260],
[256,280,260,0,276,241,317,271],
[286,267,274,275,0,252,285,273],
[268,286,292,310,299,0,299,276],
[262,270,258,234,266,252,0,251],
[243,267,291,280,278,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,288,288,293,284,269],
[264,0,290,294,273,272,288,267],
[267,261,0,289,264,251,264,260],
[263,257,262,0,242,243,282,233],
[263,278,287,309,0,287,291,309],
[258,279,300,308,264,0,310,286],
[267,263,287,269,260,241,0,243],
[282,284,291,318,242,265,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,233,270,258,264,287,258],
[240,0,247,275,265,229,259,255],
[318,304,0,227,325,286,314,297],
[281,276,324,0,324,256,314,284],
[293,286,226,227,0,199,264,260],
[287,322,265,295,352,0,320,269],
[264,292,237,237,287,231,0,249],
[293,296,254,267,291,282,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,295,307,236,316,283,317],
[245,0,267,300,256,272,285,242],
[256,284,0,304,277,327,304,283],
[244,251,247,0,230,283,267,246],
[315,295,274,321,0,302,310,290],
[235,279,224,268,249,0,274,261],
[268,266,247,284,241,277,0,260],
[234,309,268,305,261,290,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,353,299,253,300,350,249],
[300,0,402,200,252,350,350,200],
[198,149,0,198,303,300,350,149],
[252,351,353,0,303,351,300,199],
[298,299,248,248,0,298,297,297],
[251,201,251,200,253,0,349,201],
[201,201,201,251,254,202,0,100],
[302,351,402,352,254,350,451,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,240,289,261,251,279,255],
[295,0,263,298,282,267,283,268],
[311,288,0,268,263,280,288,281],
[262,253,283,0,249,257,281,269],
[290,269,288,302,0,282,298,281],
[300,284,271,294,269,0,289,253],
[272,268,263,270,253,262,0,250],
[296,283,270,282,270,298,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,254,298,291,271,257],
[286,0,290,268,295,297,280,271],
[273,261,0,266,279,285,262,263],
[297,283,285,0,305,305,289,274],
[253,256,272,246,0,288,267,247],
[260,254,266,246,263,0,253,264],
[280,271,289,262,284,298,0,277],
[294,280,288,277,304,287,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,238,273,240,245,245,247],
[286,0,259,297,254,311,257,290],
[313,292,0,279,267,255,275,259],
[278,254,272,0,221,253,279,275],
[311,297,284,330,0,263,302,279],
[306,240,296,298,288,0,284,260],
[306,294,276,272,249,267,0,254],
[304,261,292,276,272,291,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,271,278,303,270,273,256],
[253,0,269,257,267,280,261,258],
[280,282,0,261,294,294,272,276],
[273,294,290,0,303,259,284,271],
[248,284,257,248,0,262,244,253],
[281,271,257,292,289,0,285,276],
[278,290,279,267,307,266,0,280],
[295,293,275,280,298,275,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,240,271,267,255,257,248],
[302,0,261,298,288,290,277,255],
[311,290,0,302,298,307,271,276],
[280,253,249,0,270,264,251,259],
[284,263,253,281,0,285,277,261],
[296,261,244,287,266,0,275,284],
[294,274,280,300,274,276,0,282],
[303,296,275,292,290,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,297,281,261,258,279,297],
[317,0,318,286,259,272,317,290],
[254,233,0,244,234,248,259,255],
[270,265,307,0,264,285,279,288],
[290,292,317,287,0,265,305,302],
[293,279,303,266,286,0,297,283],
[272,234,292,272,246,254,0,251],
[254,261,296,263,249,268,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,255,261,264,254,279,238],
[295,0,279,277,265,268,287,276],
[296,272,0,273,290,264,281,238],
[290,274,278,0,271,263,275,260],
[287,286,261,280,0,264,243,236],
[297,283,287,288,287,0,280,243],
[272,264,270,276,308,271,0,251],
[313,275,313,291,315,308,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,259,294,270,285,283,277],
[272,0,269,273,269,277,272,256],
[292,282,0,283,273,279,279,275],
[257,278,268,0,259,287,284,266],
[281,282,278,292,0,292,291,270],
[266,274,272,264,259,0,264,265],
[268,279,272,267,260,287,0,276],
[274,295,276,285,281,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,261,258,280,278,259],
[285,0,255,254,266,266,281,278],
[295,296,0,255,256,277,268,263],
[290,297,296,0,275,305,282,274],
[293,285,295,276,0,270,309,267],
[271,285,274,246,281,0,279,255],
[273,270,283,269,242,272,0,263],
[292,273,288,277,284,296,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,246,277,227,260,279],
[290,0,301,283,297,268,283,316],
[279,250,0,259,272,260,260,285],
[305,268,292,0,288,276,262,299],
[274,254,279,263,0,256,277,280],
[324,283,291,275,295,0,286,303],
[291,268,291,289,274,265,0,299],
[272,235,266,252,271,248,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,297,291,295,258,281,259],
[314,0,334,336,320,289,310,275],
[254,217,0,274,261,230,219,256],
[260,215,277,0,314,239,247,270],
[256,231,290,237,0,223,295,268],
[293,262,321,312,328,0,313,287],
[270,241,332,304,256,238,0,246],
[292,276,295,281,283,264,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,246,281,307,271,270],
[264,0,309,305,261,331,280,278],
[274,242,0,250,274,294,251,251],
[305,246,301,0,284,291,283,259],
[270,290,277,267,0,314,261,272],
[244,220,257,260,237,0,223,220],
[280,271,300,268,290,328,0,289],
[281,273,300,292,279,331,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,277,289,284,277,291,284],
[292,0,291,304,286,278,301,274],
[274,260,0,289,286,263,285,280],
[262,247,262,0,282,247,267,283],
[267,265,265,269,0,252,293,265],
[274,273,288,304,299,0,311,302],
[260,250,266,284,258,240,0,277],
[267,277,271,268,286,249,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,242,291,243,238,250,259],
[302,0,284,274,259,240,284,272],
[309,267,0,304,275,272,306,267],
[260,277,247,0,259,265,298,273],
[308,292,276,292,0,286,313,274],
[313,311,279,286,265,0,305,290],
[301,267,245,253,238,246,0,265],
[292,279,284,278,277,261,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,290,294,278,260,247],
[273,0,283,260,284,237,283,288],
[274,268,0,277,291,270,289,244],
[261,291,274,0,278,251,261,272],
[257,267,260,273,0,251,290,242],
[273,314,281,300,300,0,288,295],
[291,268,262,290,261,263,0,264],
[304,263,307,279,309,256,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,296,301,273,279,301,336],
[261,0,254,257,261,245,265,290],
[255,297,0,275,271,278,298,306],
[250,294,276,0,249,256,285,291],
[278,290,280,302,0,251,294,295],
[272,306,273,295,300,0,324,309],
[250,286,253,266,257,227,0,277],
[215,261,245,260,256,242,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,286,335,336,283,319,264],
[251,0,293,294,303,279,293,270],
[265,258,0,249,284,273,287,293],
[216,257,302,0,302,252,282,247],
[215,248,267,249,0,265,246,208],
[268,272,278,299,286,0,276,261],
[232,258,264,269,305,275,0,236],
[287,281,258,304,343,290,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,267,293,264,301,279],
[278,0,269,286,274,259,271,268],
[267,282,0,280,274,278,292,289],
[284,265,271,0,279,255,282,274],
[258,277,277,272,0,253,272,268],
[287,292,273,296,298,0,292,282],
[250,280,259,269,279,259,0,260],
[272,283,262,277,283,269,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,284,269,281,288,287],
[272,0,268,272,268,258,263,268],
[273,283,0,273,274,267,271,283],
[267,279,278,0,278,291,278,276],
[282,283,277,273,0,280,286,308],
[270,293,284,260,271,0,281,285],
[263,288,280,273,265,270,0,284],
[264,283,268,275,243,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,244,207,173,276,170,208],
[307,0,240,345,239,206,205,244],
[307,311,0,272,344,275,309,313],
[344,206,279,0,277,275,311,347],
[378,312,207,274,0,240,240,279],
[275,345,276,276,311,0,240,311],
[381,346,242,240,311,311,0,243],
[343,307,238,204,272,240,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,281,278,350,282,251,291],
[222,0,291,298,309,287,258,300],
[270,260,0,278,292,281,247,311],
[273,253,273,0,341,254,250,257],
[201,242,259,210,0,232,199,282],
[269,264,270,297,319,0,250,341],
[300,293,304,301,352,301,0,269],
[260,251,240,294,269,210,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,294,299,318,246,277,259],
[250,0,234,267,281,262,293,279],
[257,317,0,290,284,279,318,293],
[252,284,261,0,269,236,295,289],
[233,270,267,282,0,253,310,265],
[305,289,272,315,298,0,297,306],
[274,258,233,256,241,254,0,287],
[292,272,258,262,286,245,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,283,269,275,282,293],
[266,0,261,254,270,268,255,276],
[274,290,0,268,279,266,258,281],
[268,297,283,0,274,280,283,298],
[282,281,272,277,0,271,262,278],
[276,283,285,271,280,0,275,292],
[269,296,293,268,289,276,0,291],
[258,275,270,253,273,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,278,283,266,267,287,298],
[261,0,271,272,273,270,268,293],
[273,280,0,299,284,283,293,300],
[268,279,252,0,242,252,277,279],
[285,278,267,309,0,279,285,302],
[284,281,268,299,272,0,280,299],
[264,283,258,274,266,271,0,289],
[253,258,251,272,249,252,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,279,277,250,275,259],
[289,0,285,285,272,272,292,288],
[284,266,0,275,259,263,276,260],
[272,266,276,0,273,268,267,256],
[274,279,292,278,0,279,280,273],
[301,279,288,283,272,0,296,287],
[276,259,275,284,271,255,0,269],
[292,263,291,295,278,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,253,266,251,262,274],
[267,0,268,256,274,265,266,261],
[277,283,0,263,277,267,268,277],
[298,295,288,0,285,284,288,274],
[285,277,274,266,0,240,282,277],
[300,286,284,267,311,0,292,279],
[289,285,283,263,269,259,0,259],
[277,290,274,277,274,272,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,271,281,277,267,262,275],
[284,0,278,270,257,281,254,262],
[280,273,0,266,265,268,259,265],
[270,281,285,0,277,263,251,285],
[274,294,286,274,0,268,277,279],
[284,270,283,288,283,0,262,263],
[289,297,292,300,274,289,0,286],
[276,289,286,266,272,288,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,260,299,265,281,282],
[276,0,291,278,286,283,271,286],
[260,260,0,264,261,267,267,284],
[291,273,287,0,281,283,277,303],
[252,265,290,270,0,263,271,287],
[286,268,284,268,288,0,275,288],
[270,280,284,274,280,276,0,284],
[269,265,267,248,264,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,270,266,277,277,290,287],
[298,0,288,292,282,273,304,308],
[281,263,0,282,257,276,276,298],
[285,259,269,0,259,280,303,281],
[274,269,294,292,0,286,304,293],
[274,278,275,271,265,0,295,276],
[261,247,275,248,247,256,0,269],
[264,243,253,270,258,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,249,276,294,256,269,271],
[298,0,278,274,288,290,270,287],
[302,273,0,282,285,282,282,298],
[275,277,269,0,305,267,274,289],
[257,263,266,246,0,295,250,258],
[295,261,269,284,256,0,266,281],
[282,281,269,277,301,285,0,297],
[280,264,253,262,293,270,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,290,275,262,269,273,284],
[284,0,279,273,281,273,272,277],
[261,272,0,275,262,269,274,276],
[276,278,276,0,278,289,283,273],
[289,270,289,273,0,289,292,295],
[282,278,282,262,262,0,286,270],
[278,279,277,268,259,265,0,288],
[267,274,275,278,256,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,282,310,292,290,295,275],
[306,0,279,271,315,288,294,280],
[269,272,0,253,299,291,280,249],
[241,280,298,0,286,264,295,262],
[259,236,252,265,0,295,293,276],
[261,263,260,287,256,0,295,267],
[256,257,271,256,258,256,0,275],
[276,271,302,289,275,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,308,301,269,291,279,246],
[286,0,294,297,227,277,250,275],
[243,257,0,230,262,278,225,264],
[250,254,321,0,231,266,243,255],
[282,324,289,320,0,294,297,274],
[260,274,273,285,257,0,241,288],
[272,301,326,308,254,310,0,291],
[305,276,287,296,277,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,241,287,278,253,276,259],
[309,0,300,332,270,335,308,307],
[310,251,0,307,260,275,295,286],
[264,219,244,0,217,286,273,250],
[273,281,291,334,0,293,328,298],
[298,216,276,265,258,0,302,285],
[275,243,256,278,223,249,0,270],
[292,244,265,301,253,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,254,268,263,301,270,296],
[279,0,253,277,251,281,280,290],
[297,298,0,281,265,291,308,310],
[283,274,270,0,304,285,297,314],
[288,300,286,247,0,298,288,308],
[250,270,260,266,253,0,275,285],
[281,271,243,254,263,276,0,278],
[255,261,241,237,243,266,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,225,324,172,148,346,299],
[348,0,293,349,241,223,323,299],
[326,258,0,354,302,281,401,302],
[227,202,197,0,222,201,328,251],
[379,310,249,329,0,279,328,355],
[403,328,270,350,272,0,396,298],
[205,228,150,223,223,155,0,150],
[252,252,249,300,196,253,401,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,285,304,272,279,283],
[261,0,281,284,302,275,288,273],
[265,270,0,277,305,281,272,291],
[266,267,274,0,316,265,282,304],
[247,249,246,235,0,218,232,242],
[279,276,270,286,333,0,283,291],
[272,263,279,269,319,268,0,279],
[268,278,260,247,309,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,248,284,253,242,252,268],
[275,0,260,259,255,264,254,268],
[303,291,0,271,250,285,284,291],
[267,292,280,0,266,254,287,268],
[298,296,301,285,0,263,282,276],
[309,287,266,297,288,0,283,284],
[299,297,267,264,269,268,0,287],
[283,283,260,283,275,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,257,266,277,276,277,281],
[275,0,270,247,269,282,284,283],
[294,281,0,290,284,274,288,270],
[285,304,261,0,286,278,296,285],
[274,282,267,265,0,259,267,262],
[275,269,277,273,292,0,280,272],
[274,267,263,255,284,271,0,272],
[270,268,281,266,289,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,302,286,281,276,285,274],
[229,0,260,257,243,273,271,265],
[249,291,0,280,241,258,285,269],
[265,294,271,0,244,296,283,241],
[270,308,310,307,0,309,309,282],
[275,278,293,255,242,0,273,275],
[266,280,266,268,242,278,0,237],
[277,286,282,310,269,276,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,282,297,246,259,271],
[278,0,268,267,270,243,273,272],
[287,283,0,275,298,264,277,283],
[269,284,276,0,284,285,284,274],
[254,281,253,267,0,245,281,258],
[305,308,287,266,306,0,306,282],
[292,278,274,267,270,245,0,270],
[280,279,268,277,293,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,289,278,269,275,289,280],
[264,0,284,273,277,276,308,286],
[262,267,0,266,284,278,288,280],
[273,278,285,0,274,285,318,295],
[282,274,267,277,0,265,289,272],
[276,275,273,266,286,0,314,288],
[262,243,263,233,262,237,0,272],
[271,265,271,256,279,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,347,293,302,264,254,306,289],
[204,0,214,214,224,227,273,206],
[258,337,0,272,266,316,304,284],
[249,337,279,0,276,265,290,273],
[287,327,285,275,0,297,325,272],
[297,324,235,286,254,0,296,263],
[245,278,247,261,226,255,0,266],
[262,345,267,278,279,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,286,274,264,279,282,317],
[272,0,282,288,269,256,259,294],
[265,269,0,259,265,237,281,282],
[277,263,292,0,275,245,279,302],
[287,282,286,276,0,269,278,295],
[272,295,314,306,282,0,289,320],
[269,292,270,272,273,262,0,305],
[234,257,269,249,256,231,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,265,274,288,248,297],
[273,0,269,287,275,285,251,273],
[279,282,0,279,261,281,240,257],
[286,264,272,0,267,296,238,271],
[277,276,290,284,0,268,276,294],
[263,266,270,255,283,0,245,285],
[303,300,311,313,275,306,0,298],
[254,278,294,280,257,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,254,266,292,264,278,259],
[301,0,290,347,311,247,269,293],
[297,261,0,277,331,278,257,249],
[285,204,274,0,272,260,269,247],
[259,240,220,279,0,269,232,271],
[287,304,273,291,282,0,228,266],
[273,282,294,282,319,323,0,272],
[292,258,302,304,280,285,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,306,282,288,267,256,306],
[281,0,283,297,266,286,274,284],
[245,268,0,286,266,252,255,284],
[269,254,265,0,250,243,272,264],
[263,285,285,301,0,224,265,275],
[284,265,299,308,327,0,299,317],
[295,277,296,279,286,252,0,299],
[245,267,267,287,276,234,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,284,294,288,269,272,290],
[260,0,269,271,276,266,267,267],
[267,282,0,263,281,275,274,279],
[257,280,288,0,265,292,282,279],
[263,275,270,286,0,263,287,285],
[282,285,276,259,288,0,282,265],
[279,284,277,269,264,269,0,271],
[261,284,272,272,266,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,291,278,267,263,236,299],
[239,0,279,259,251,284,264,264],
[260,272,0,255,275,289,268,272],
[273,292,296,0,287,244,291,237],
[284,300,276,264,0,249,289,286],
[288,267,262,307,302,0,321,288],
[315,287,283,260,262,230,0,268],
[252,287,279,314,265,263,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,286,297,284,285,272],
[267,0,285,304,287,278,293,285],
[261,266,0,274,287,278,273,291],
[265,247,277,0,278,291,282,287],
[254,264,264,273,0,258,270,277],
[267,273,273,260,293,0,287,287],
[266,258,278,269,281,264,0,257],
[279,266,260,264,274,264,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,245,284,263,279,267,278],
[269,0,251,269,278,271,252,264],
[306,300,0,274,278,284,287,286],
[267,282,277,0,255,275,251,284],
[288,273,273,296,0,275,261,297],
[272,280,267,276,276,0,284,280],
[284,299,264,300,290,267,0,294],
[273,287,265,267,254,271,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,297,345,309,305,268,236],
[278,0,273,366,297,325,254,287],
[254,278,0,338,321,335,243,262],
[206,185,213,0,240,231,217,199],
[242,254,230,311,0,295,249,225],
[246,226,216,320,256,0,205,170],
[283,297,308,334,302,346,0,264],
[315,264,289,352,326,381,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,293,270,301,290,305,260],
[261,0,241,275,261,291,272,265],
[258,310,0,277,289,307,305,265],
[281,276,274,0,279,292,299,277],
[250,290,262,272,0,285,274,245],
[261,260,244,259,266,0,260,266],
[246,279,246,252,277,291,0,240],
[291,286,286,274,306,285,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,286,304,311,278,279,284],
[283,0,291,306,295,246,288,296],
[265,260,0,268,299,252,256,298],
[247,245,283,0,282,261,252,289],
[240,256,252,269,0,250,260,261],
[273,305,299,290,301,0,285,292],
[272,263,295,299,291,266,0,300],
[267,255,253,262,290,259,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,277,266,273,251,259,274],
[263,0,265,251,260,256,274,275],
[274,286,0,277,268,289,267,303],
[285,300,274,0,279,287,291,302],
[278,291,283,272,0,280,284,303],
[300,295,262,264,271,0,272,282],
[292,277,284,260,267,279,0,288],
[277,276,248,249,248,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,297,295,288,286,273],
[260,0,274,280,262,263,281,287],
[290,277,0,291,271,281,280,278],
[254,271,260,0,258,250,275,263],
[256,289,280,293,0,267,281,268],
[263,288,270,301,284,0,284,281],
[265,270,271,276,270,267,0,282],
[278,264,273,288,283,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,264,268,281,274,277,266],
[279,0,272,280,295,279,270,276],
[287,279,0,280,290,272,267,284],
[283,271,271,0,281,282,272,282],
[270,256,261,270,0,246,268,267],
[277,272,279,269,305,0,283,280],
[274,281,284,279,283,268,0,280],
[285,275,267,269,284,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,289,262,262,282,261],
[279,0,269,278,282,270,288,259],
[271,282,0,260,283,274,283,267],
[262,273,291,0,268,275,288,260],
[289,269,268,283,0,266,277,286],
[289,281,277,276,285,0,287,270],
[269,263,268,263,274,264,0,260],
[290,292,284,291,265,281,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,238,200,159,159,277,157],
[472,0,317,237,199,276,356,194],
[313,234,0,197,237,158,237,272],
[351,314,354,0,197,235,393,234],
[392,352,314,354,0,315,355,274],
[392,275,393,316,236,0,392,313],
[274,195,314,158,196,159,0,155],
[394,357,279,317,277,238,396,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,296,274,303,282,280],
[260,0,278,269,282,279,269,282],
[272,273,0,273,271,300,275,262],
[255,282,278,0,262,291,266,280],
[277,269,280,289,0,306,296,265],
[248,272,251,260,245,0,250,255],
[269,282,276,285,255,301,0,291],
[271,269,289,271,286,296,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,257,280,287,269,276],
[283,0,284,285,279,273,285,270],
[282,267,0,301,277,280,273,281],
[294,266,250,0,264,282,265,286],
[271,272,274,287,0,281,286,295],
[264,278,271,269,270,0,287,273],
[282,266,278,286,265,264,0,263],
[275,281,270,265,256,278,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,285,271,274,271,270,289],
[290,0,306,281,263,305,280,305],
[266,245,0,266,280,291,258,272],
[280,270,285,0,275,280,259,298],
[277,288,271,276,0,287,266,295],
[280,246,260,271,264,0,258,318],
[281,271,293,292,285,293,0,292],
[262,246,279,253,256,233,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,261,252,271,286,265,265],
[273,0,259,264,264,288,258,267],
[290,292,0,282,280,288,275,278],
[299,287,269,0,281,304,288,281],
[280,287,271,270,0,280,272,277],
[265,263,263,247,271,0,263,268],
[286,293,276,263,279,288,0,286],
[286,284,273,270,274,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,276,230,231,294,279,294],
[226,0,262,247,247,215,249,249],
[275,289,0,241,200,232,246,217],
[321,304,310,0,277,281,262,294],
[320,304,351,274,0,248,291,351],
[257,336,319,270,303,0,290,288],
[272,302,305,289,260,261,0,262],
[257,302,334,257,200,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,296,286,291,276,292,271],
[256,0,297,273,271,265,273,282],
[255,254,0,271,272,258,272,253],
[265,278,280,0,281,264,263,254],
[260,280,279,270,0,259,276,257],
[275,286,293,287,292,0,270,269],
[259,278,279,288,275,281,0,264],
[280,269,298,297,294,282,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,268,272,269,301,278],
[285,0,288,279,273,245,285,295],
[275,263,0,284,283,241,292,299],
[283,272,267,0,295,277,295,272],
[279,278,268,256,0,266,294,288],
[282,306,310,274,285,0,325,287],
[250,266,259,256,257,226,0,287],
[273,256,252,279,263,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,295,269,270,262,267,273],
[294,0,284,273,271,271,287,279],
[256,267,0,249,255,251,275,257],
[282,278,302,0,286,273,281,303],
[281,280,296,265,0,280,285,289],
[289,280,300,278,271,0,286,303],
[284,264,276,270,266,265,0,277],
[278,272,294,248,262,248,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,283,274,288,301,271,271],
[267,0,270,268,270,281,263,269],
[268,281,0,272,283,288,282,273],
[277,283,279,0,266,294,269,284],
[263,281,268,285,0,292,269,268],
[250,270,263,257,259,0,254,252],
[280,288,269,282,282,297,0,281],
[280,282,278,267,283,299,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,250,265,286,263,264,266],
[284,0,290,267,278,282,266,300],
[301,261,0,286,254,271,268,298],
[286,284,265,0,288,297,281,303],
[265,273,297,263,0,271,291,273],
[288,269,280,254,280,0,270,253],
[287,285,283,270,260,281,0,289],
[285,251,253,248,278,298,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,281,262,268,286,255],
[274,0,299,281,285,282,283,280],
[271,252,0,277,284,273,273,276],
[270,270,274,0,269,274,292,263],
[289,266,267,282,0,281,276,270],
[283,269,278,277,270,0,277,262],
[265,268,278,259,275,274,0,266],
[296,271,275,288,281,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,255,284,291,261,270,256],
[265,0,269,298,286,261,267,257],
[296,282,0,283,288,272,282,291],
[267,253,268,0,265,259,253,243],
[260,265,263,286,0,249,265,239],
[290,290,279,292,302,0,266,267],
[281,284,269,298,286,285,0,283],
[295,294,260,308,312,284,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,283,278,275,266,318],
[285,0,278,305,268,267,271,290],
[297,273,0,298,310,299,291,316],
[268,246,253,0,275,243,263,262],
[273,283,241,276,0,285,261,277],
[276,284,252,308,266,0,270,301],
[285,280,260,288,290,281,0,299],
[233,261,235,289,274,250,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,271,261,286,260,286,262],
[287,0,258,301,323,269,311,288],
[280,293,0,277,262,252,291,248],
[290,250,274,0,281,272,309,278],
[265,228,289,270,0,276,265,263],
[291,282,299,279,275,0,308,273],
[265,240,260,242,286,243,0,277],
[289,263,303,273,288,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,313,265,284,269,290,289],
[263,0,278,271,262,278,263,270],
[238,273,0,237,281,262,261,266],
[286,280,314,0,292,268,286,256],
[267,289,270,259,0,261,269,265],
[282,273,289,283,290,0,285,311],
[261,288,290,265,282,266,0,280],
[262,281,285,295,286,240,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,350,255,288,271,238],
[270,0,303,309,249,270,250,199],
[258,248,0,346,276,265,274,254],
[201,242,205,0,194,239,241,211],
[296,302,275,357,0,317,261,292],
[263,281,286,312,234,0,238,243],
[280,301,277,310,290,313,0,252],
[313,352,297,340,259,308,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,267,270,282,272,277,255],
[259,0,253,254,249,278,259,271],
[284,298,0,275,284,303,284,292],
[281,297,276,0,288,304,289,271],
[269,302,267,263,0,290,282,260],
[279,273,248,247,261,0,261,249],
[274,292,267,262,269,290,0,252],
[296,280,259,280,291,302,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,249,277,309,264,301,251],
[236,0,232,249,265,224,247,221],
[302,319,0,280,281,275,313,278],
[274,302,271,0,305,306,294,234],
[242,286,270,246,0,267,256,269],
[287,327,276,245,284,0,282,244],
[250,304,238,257,295,269,0,244],
[300,330,273,317,282,307,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,349,307,302,326,308,253],
[288,0,289,292,249,299,292,307],
[202,262,0,263,206,310,252,266],
[244,259,288,0,217,293,276,247],
[249,302,345,334,0,312,300,281],
[225,252,241,258,239,0,281,278],
[243,259,299,275,251,270,0,249],
[298,244,285,304,270,273,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,274,260,253,255,281,287],
[288,0,277,279,279,259,290,262],
[277,274,0,279,270,281,275,280],
[291,272,272,0,288,284,275,277],
[298,272,281,263,0,271,282,268],
[296,292,270,267,280,0,308,281],
[270,261,276,276,269,243,0,274],
[264,289,271,274,283,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,269,300,273,298,295,305],
[249,0,260,254,256,262,291,295],
[282,291,0,292,272,293,303,325],
[251,297,259,0,277,296,291,318],
[278,295,279,274,0,297,282,301],
[253,289,258,255,254,0,272,280],
[256,260,248,260,269,279,0,296],
[246,256,226,233,250,271,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,286,287,283,275,285],
[273,0,274,272,265,275,268,267],
[257,277,0,281,277,279,281,276],
[265,279,270,0,267,279,278,274],
[264,286,274,284,0,277,272,265],
[268,276,272,272,274,0,257,268],
[276,283,270,273,279,294,0,267],
[266,284,275,277,286,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,261,266,267,259,286],
[285,0,264,270,286,300,283,287],
[288,287,0,266,292,282,281,274],
[290,281,285,0,285,269,259,287],
[285,265,259,266,0,276,247,285],
[284,251,269,282,275,0,264,278],
[292,268,270,292,304,287,0,301],
[265,264,277,264,266,273,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,302,303,260,275,242,287],
[233,0,273,251,234,267,262,255],
[249,278,0,258,261,257,267,239],
[248,300,293,0,263,266,237,252],
[291,317,290,288,0,261,263,253],
[276,284,294,285,290,0,254,267],
[309,289,284,314,288,297,0,270],
[264,296,312,299,298,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,244,270,252,273,269],
[280,0,280,249,262,275,285,266],
[266,271,0,259,258,262,284,252],
[307,302,292,0,280,265,295,285],
[281,289,293,271,0,277,307,260],
[299,276,289,286,274,0,309,285],
[278,266,267,256,244,242,0,260],
[282,285,299,266,291,266,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,294,274,265,281,281,260],
[273,0,291,289,263,288,312,277],
[257,260,0,273,262,263,296,261],
[277,262,278,0,270,268,281,271],
[286,288,289,281,0,266,289,272],
[270,263,288,283,285,0,285,282],
[270,239,255,270,262,266,0,248],
[291,274,290,280,279,269,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,280,275,303,316,271,274],
[293,0,274,288,319,323,265,313],
[271,277,0,266,267,308,289,231],
[276,263,285,0,292,309,287,267],
[248,232,284,259,0,286,268,265],
[235,228,243,242,265,0,253,258],
[280,286,262,264,283,298,0,264],
[277,238,320,284,286,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,268,265,275,250,296,258],
[262,0,267,238,272,249,290,262],
[283,284,0,264,299,294,305,287],
[286,313,287,0,273,271,292,266],
[276,279,252,278,0,251,280,276],
[301,302,257,280,300,0,298,285],
[255,261,246,259,271,253,0,258],
[293,289,264,285,275,266,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,268,258,274,278,258],
[279,0,274,277,252,284,289,277],
[256,277,0,277,250,289,285,276],
[283,274,274,0,248,278,288,278],
[293,299,301,303,0,309,297,270],
[277,267,262,273,242,0,277,244],
[273,262,266,263,254,274,0,260],
[293,274,275,273,281,307,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,258,274,261,278,260,266],
[302,0,268,291,293,298,275,283],
[293,283,0,296,268,282,265,294],
[277,260,255,0,258,265,268,258],
[290,258,283,293,0,304,294,302],
[273,253,269,286,247,0,259,263],
[291,276,286,283,257,292,0,288],
[285,268,257,293,249,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,266,277,297,256,255,290],
[282,0,286,292,315,293,270,328],
[285,265,0,274,280,274,258,293],
[274,259,277,0,283,264,242,288],
[254,236,271,268,0,280,256,284],
[295,258,277,287,271,0,279,282],
[296,281,293,309,295,272,0,313],
[261,223,258,263,267,269,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,295,293,275,279,298],
[271,0,274,255,268,283,275,254],
[257,277,0,264,267,305,264,312],
[256,296,287,0,275,295,283,294],
[258,283,284,276,0,259,281,315],
[276,268,246,256,292,0,274,295],
[272,276,287,268,270,277,0,290],
[253,297,239,257,236,256,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,293,276,270,286,289,286],
[262,0,282,263,269,263,281,268],
[258,269,0,262,265,262,263,271],
[275,288,289,0,275,281,286,292],
[281,282,286,276,0,268,298,278],
[265,288,289,270,283,0,292,283],
[262,270,288,265,253,259,0,261],
[265,283,280,259,273,268,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,211,223,262,288,275,213],
[336,0,242,350,297,337,314,351],
[340,309,0,251,318,300,315,271],
[328,201,300,0,299,299,306,251],
[289,254,233,252,0,281,305,265],
[263,214,251,252,270,0,255,254],
[276,237,236,245,246,296,0,310],
[338,200,280,300,286,297,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,244,273,280,278,260,258],
[287,0,278,293,292,260,268,273],
[307,273,0,278,299,277,281,256],
[278,258,273,0,277,272,283,276],
[271,259,252,274,0,249,278,262],
[273,291,274,279,302,0,293,282],
[291,283,270,268,273,258,0,278],
[293,278,295,275,289,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,271,228,283,236,251,299],
[267,0,296,313,288,309,287,254],
[280,255,0,267,283,289,252,266],
[323,238,284,0,264,321,247,275],
[268,263,268,287,0,292,271,283],
[315,242,262,230,259,0,255,230],
[300,264,299,304,280,296,0,277],
[252,297,285,276,268,321,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,276,308,262,278,300,281],
[236,0,270,282,234,242,274,275],
[275,281,0,289,284,272,303,287],
[243,269,262,0,237,292,291,245],
[289,317,267,314,0,257,282,303],
[273,309,279,259,294,0,294,265],
[251,277,248,260,269,257,0,269],
[270,276,264,306,248,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,246,279,262,250,273],
[284,0,274,275,281,267,262,273],
[282,277,0,250,274,251,232,272],
[305,276,301,0,292,273,262,276],
[272,270,277,259,0,271,252,265],
[289,284,300,278,280,0,282,275],
[301,289,319,289,299,269,0,304],
[278,278,279,275,286,276,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,275,282,267,293,287],
[278,0,278,252,279,258,286,253],
[277,273,0,262,276,269,280,269],
[276,299,289,0,298,277,302,272],
[269,272,275,253,0,265,291,279],
[284,293,282,274,286,0,283,271],
[258,265,271,249,260,268,0,253],
[264,298,282,279,272,280,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,309,280,264,279,324,270],
[289,0,307,290,273,272,286,290],
[242,244,0,233,236,249,265,224],
[271,261,318,0,262,277,288,283],
[287,278,315,289,0,259,283,274],
[272,279,302,274,292,0,287,284],
[227,265,286,263,268,264,0,269],
[281,261,327,268,277,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,315,245,267,254,266,275],
[251,0,293,237,260,247,238,265],
[236,258,0,225,265,241,196,218],
[306,314,326,0,289,281,268,281],
[284,291,286,262,0,265,264,242],
[297,304,310,270,286,0,288,318],
[285,313,355,283,287,263,0,257],
[276,286,333,270,309,233,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,281,263,273,276,282,269],
[280,0,286,270,272,299,292,285],
[270,265,0,262,268,287,283,261],
[288,281,289,0,286,280,287,271],
[278,279,283,265,0,275,283,280],
[275,252,264,271,276,0,287,262],
[269,259,268,264,268,264,0,251],
[282,266,290,280,271,289,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,267,278,292,264,263],
[267,0,268,265,266,269,270,278],
[277,283,0,272,258,274,281,261],
[284,286,279,0,277,281,272,262],
[273,285,293,274,0,288,256,273],
[259,282,277,270,263,0,273,264],
[287,281,270,279,295,278,0,276],
[288,273,290,289,278,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,244,278,245,254,248,261],
[291,0,278,311,277,291,259,287],
[307,273,0,285,234,260,255,250],
[273,240,266,0,267,275,223,241],
[306,274,317,284,0,257,289,291],
[297,260,291,276,294,0,265,303],
[303,292,296,328,262,286,0,277],
[290,264,301,310,260,248,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,281,298,318,273,290,279],
[261,0,273,271,333,280,269,261],
[270,278,0,319,325,262,303,269],
[253,280,232,0,317,239,296,246],
[233,218,226,234,0,195,252,230],
[278,271,289,312,356,0,289,272],
[261,282,248,255,299,262,0,255],
[272,290,282,305,321,279,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,272,273,257,273,239],
[262,0,293,276,283,296,275,253],
[275,258,0,276,267,307,286,252],
[279,275,275,0,269,262,282,261],
[278,268,284,282,0,293,290,288],
[294,255,244,289,258,0,273,252],
[278,276,265,269,261,278,0,267],
[312,298,299,290,263,299,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,208,237,199,233,223,213],
[341,0,260,262,265,292,253,235],
[343,291,0,213,285,288,236,276],
[314,289,338,0,273,296,312,235],
[352,286,266,278,0,313,263,263],
[318,259,263,255,238,0,250,187],
[328,298,315,239,288,301,0,188],
[338,316,275,316,288,364,363,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,291,289,279,286,277,326],
[333,0,305,335,298,273,310,327],
[260,246,0,292,269,275,309,323],
[262,216,259,0,278,275,273,313],
[272,253,282,273,0,273,260,255],
[265,278,276,276,278,0,260,282],
[274,241,242,278,291,291,0,330],
[225,224,228,238,296,269,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,248,252,264,238,242,264],
[293,0,302,261,253,313,284,281],
[303,249,0,293,266,254,249,302],
[299,290,258,0,263,265,256,222],
[287,298,285,288,0,308,248,263],
[313,238,297,286,243,0,275,260],
[309,267,302,295,303,276,0,257],
[287,270,249,329,288,291,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,229,260,239,314,261,185],
[237,0,257,260,290,397,264,292],
[322,294,0,323,268,372,321,321],
[291,291,228,0,292,448,288,318],
[312,261,283,259,0,390,287,261],
[237,154,179,103,161,0,183,156],
[290,287,230,263,264,368,0,260],
[366,259,230,233,290,395,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,283,273,274,277,278,274],
[250,0,227,254,250,273,261,274],
[268,324,0,288,281,309,302,294],
[278,297,263,0,277,257,279,273],
[277,301,270,274,0,283,274,292],
[274,278,242,294,268,0,284,294],
[273,290,249,272,277,267,0,282],
[277,277,257,278,259,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,254,249,266,279,265],
[273,0,251,254,270,275,286,275],
[280,300,0,280,277,276,282,257],
[297,297,271,0,297,268,287,276],
[302,281,274,254,0,272,287,304],
[285,276,275,283,279,0,270,288],
[272,265,269,264,264,281,0,258],
[286,276,294,275,247,263,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,262,263,256,271,266],
[262,0,256,266,261,271,268,256],
[267,295,0,274,275,273,266,290],
[289,285,277,0,265,281,251,268],
[288,290,276,286,0,271,266,261],
[295,280,278,270,280,0,273,262],
[280,283,285,300,285,278,0,272],
[285,295,261,283,290,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,283,291,292,290,323],
[267,0,272,279,269,272,267,297],
[276,279,0,288,283,277,267,308],
[268,272,263,0,260,279,264,276],
[260,282,268,291,0,278,252,306],
[259,279,274,272,273,0,264,297],
[261,284,284,287,299,287,0,299],
[228,254,243,275,245,254,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,278,252,276,277,278],
[282,0,311,288,277,266,307,302],
[260,240,0,263,247,243,263,279],
[273,263,288,0,263,259,259,284],
[299,274,304,288,0,293,291,310],
[275,285,308,292,258,0,288,277],
[274,244,288,292,260,263,0,288],
[273,249,272,267,241,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,300,301,288,274,300,285],
[261,0,281,301,287,284,309,271],
[251,270,0,279,280,269,280,275],
[250,250,272,0,269,277,294,254],
[263,264,271,282,0,283,310,295],
[277,267,282,274,268,0,300,285],
[251,242,271,257,241,251,0,256],
[266,280,276,297,256,266,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,277,255,242,267,275],
[289,0,286,266,275,270,267,265],
[261,265,0,268,262,227,258,268],
[274,285,283,0,258,248,255,280],
[296,276,289,293,0,265,274,284],
[309,281,324,303,286,0,275,250],
[284,284,293,296,277,276,0,274],
[276,286,283,271,267,301,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,278,295,262,299,268],
[293,0,267,279,304,291,295,293],
[279,284,0,267,309,285,295,291],
[273,272,284,0,285,258,292,265],
[256,247,242,266,0,260,276,255],
[289,260,266,293,291,0,295,273],
[252,256,256,259,275,256,0,258],
[283,258,260,286,296,278,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,335,312,296,290,229,278],
[297,0,325,277,285,297,272,256],
[216,226,0,263,255,250,211,199],
[239,274,288,0,299,245,231,240],
[255,266,296,252,0,254,244,241],
[261,254,301,306,297,0,258,239],
[322,279,340,320,307,293,0,259],
[273,295,352,311,310,312,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,295,266,288,285,270],
[263,0,267,292,257,272,273,256],
[279,284,0,281,273,289,278,283],
[256,259,270,0,275,276,261,278],
[285,294,278,276,0,255,261,288],
[263,279,262,275,296,0,245,272],
[266,278,273,290,290,306,0,277],
[281,295,268,273,263,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,279,270,279,264,270,269],
[287,0,282,265,287,274,266,255],
[272,269,0,250,263,258,269,272],
[281,286,301,0,297,271,287,282],
[272,264,288,254,0,275,268,255],
[287,277,293,280,276,0,266,265],
[281,285,282,264,283,285,0,279],
[282,296,279,269,296,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,275,290,284,266,272],
[282,0,282,277,285,276,264,275],
[276,269,0,266,296,281,276,279],
[276,274,285,0,293,270,276,286],
[261,266,255,258,0,269,274,261],
[267,275,270,281,282,0,288,276],
[285,287,275,275,277,263,0,276],
[279,276,272,265,290,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,280,296,243,289,251,268],
[244,0,242,243,245,276,222,244],
[271,309,0,274,270,262,281,293],
[255,308,277,0,252,281,251,249],
[308,306,281,299,0,307,272,295],
[262,275,289,270,244,0,252,258],
[300,329,270,300,279,299,0,270],
[283,307,258,302,256,293,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,276,287,297,267,255,237],
[251,0,258,290,266,309,239,278],
[275,293,0,288,292,319,284,290],
[264,261,263,0,282,253,227,282],
[254,285,259,269,0,265,270,255],
[284,242,232,298,286,0,268,246],
[296,312,267,324,281,283,0,279],
[314,273,261,269,296,305,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,264,254,269,279,252],
[294,0,285,256,253,277,299,275],
[281,266,0,298,276,284,289,288],
[287,295,253,0,265,263,290,268],
[297,298,275,286,0,268,296,287],
[282,274,267,288,283,0,284,281],
[272,252,262,261,255,267,0,273],
[299,276,263,283,264,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,291,278,276,265,276,270],
[285,0,283,293,286,291,278,272],
[260,268,0,273,260,241,260,256],
[273,258,278,0,266,261,260,273],
[275,265,291,285,0,274,260,270],
[286,260,310,290,277,0,255,283],
[275,273,291,291,291,296,0,284],
[281,279,295,278,281,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,137,275,412,205,69,137],
[345,0,208,345,481,344,276,208],
[414,343,0,414,482,343,207,345],
[276,206,137,0,482,206,70,138],
[139,70,69,69,0,137,69,69],
[346,207,208,345,414,0,277,208],
[482,275,344,481,482,274,0,275],
[414,343,206,413,482,343,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,293,270,284,306,290,305],
[260,0,276,264,270,286,271,279],
[258,275,0,263,281,282,281,289],
[281,287,288,0,271,294,276,286],
[267,281,270,280,0,288,270,288],
[245,265,269,257,263,0,260,267],
[261,280,270,275,281,291,0,272],
[246,272,262,265,263,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,313,292,331,318,274,321],
[267,0,275,244,312,289,273,307],
[238,276,0,229,281,266,240,276],
[259,307,322,0,320,329,308,327],
[220,239,270,231,0,275,256,304],
[233,262,285,222,276,0,241,295],
[277,278,311,243,295,310,0,280],
[230,244,275,224,247,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,239,264,251,250,257,261],
[302,0,274,284,286,299,287,295],
[312,277,0,266,265,286,278,282],
[287,267,285,0,272,265,290,288],
[300,265,286,279,0,272,282,293],
[301,252,265,286,279,0,270,279],
[294,264,273,261,269,281,0,293],
[290,256,269,263,258,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,283,284,294,289,313,275],
[263,0,278,284,278,282,270,276],
[268,273,0,267,284,271,297,291],
[267,267,284,0,284,287,290,274],
[257,273,267,267,0,270,279,277],
[262,269,280,264,281,0,305,292],
[238,281,254,261,272,246,0,261],
[276,275,260,277,274,259,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,280,282,275,291,302],
[271,0,258,262,258,261,281,257],
[272,293,0,290,290,293,294,283],
[271,289,261,0,292,300,289,291],
[269,293,261,259,0,276,291,273],
[276,290,258,251,275,0,288,284],
[260,270,257,262,260,263,0,282],
[249,294,268,260,278,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,294,281,317,306,301,274],
[247,0,268,251,259,264,287,262],
[257,283,0,269,266,251,292,253],
[270,300,282,0,278,283,312,271],
[234,292,285,273,0,275,270,291],
[245,287,300,268,276,0,275,257],
[250,264,259,239,281,276,0,273],
[277,289,298,280,260,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,280,290,276,284,275,252],
[296,0,270,316,279,287,289,277],
[271,281,0,295,267,266,290,257],
[261,235,256,0,273,268,277,246],
[275,272,284,278,0,280,285,269],
[267,264,285,283,271,0,280,245],
[276,262,261,274,266,271,0,243],
[299,274,294,305,282,306,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,274,282,301,303,288],
[277,0,272,267,283,292,269,286],
[269,279,0,278,263,285,282,267],
[277,284,273,0,291,283,291,283],
[269,268,288,260,0,293,279,261],
[250,259,266,268,258,0,276,272],
[248,282,269,260,272,275,0,265],
[263,265,284,268,290,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,321,236,282,284,313,308],
[272,0,268,269,269,273,286,289],
[230,283,0,243,265,257,233,294],
[315,282,308,0,322,314,275,323],
[269,282,286,229,0,260,291,301],
[267,278,294,237,291,0,279,318],
[238,265,318,276,260,272,0,304],
[243,262,257,228,250,233,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,240,249,272,261,272,280],
[284,0,305,299,274,277,289,310],
[311,246,0,251,222,272,260,296],
[302,252,300,0,264,271,236,259],
[279,277,329,287,0,260,276,295],
[290,274,279,280,291,0,293,286],
[279,262,291,315,275,258,0,261],
[271,241,255,292,256,265,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,307,283,289,295,270],
[272,0,301,293,290,296,300,279],
[264,250,0,281,258,280,287,246],
[244,258,270,0,277,270,294,242],
[268,261,293,274,0,288,284,263],
[262,255,271,281,263,0,269,251],
[256,251,264,257,267,282,0,252],
[281,272,305,309,288,300,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,294,281,282,280,279,283],
[279,0,298,269,289,270,251,269],
[257,253,0,253,268,270,234,237],
[270,282,298,0,281,284,248,247],
[269,262,283,270,0,294,246,261],
[271,281,281,267,257,0,239,259],
[272,300,317,303,305,312,0,295],
[268,282,314,304,290,292,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,272,294,270,261,255,255],
[304,0,290,289,270,289,299,284],
[279,261,0,290,280,276,261,268],
[257,262,261,0,263,269,279,246],
[281,281,271,288,0,291,270,262],
[290,262,275,282,260,0,275,277],
[296,252,290,272,281,276,0,267],
[296,267,283,305,289,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,273,274,278,288,286,271],
[291,0,304,288,278,296,292,245],
[278,247,0,277,238,263,262,252],
[277,263,274,0,270,294,287,239],
[273,273,313,281,0,308,309,281],
[263,255,288,257,243,0,294,251],
[265,259,289,264,242,257,0,233],
[280,306,299,312,270,300,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,273,276,275,265,281],
[265,0,265,272,277,268,257,270],
[272,286,0,290,265,266,262,282],
[278,279,261,0,280,244,267,265],
[275,274,286,271,0,292,282,272],
[276,283,285,307,259,0,262,282],
[286,294,289,284,269,289,0,290],
[270,281,269,286,279,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,259,324,290,284,264,298],
[271,0,313,331,319,306,316,299],
[292,238,0,345,336,270,294,302],
[227,220,206,0,246,258,257,253],
[261,232,215,305,0,230,252,209],
[267,245,281,293,321,0,221,232],
[287,235,257,294,299,330,0,234],
[253,252,249,298,342,319,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,270,267,264,261,266,286],
[294,0,269,287,291,282,255,274],
[281,282,0,259,259,271,251,288],
[284,264,292,0,268,271,260,310],
[287,260,292,283,0,294,276,277],
[290,269,280,280,257,0,261,306],
[285,296,300,291,275,290,0,316],
[265,277,263,241,274,245,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,301,289,279,305,279,263],
[277,0,255,277,301,311,308,293],
[250,296,0,289,244,287,274,272],
[262,274,262,0,261,300,270,281],
[272,250,307,290,0,302,312,290],
[246,240,264,251,249,0,285,267],
[272,243,277,281,239,266,0,258],
[288,258,279,270,261,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,260,258,243,266,268],
[288,0,240,250,268,245,265,265],
[283,311,0,271,286,276,297,286],
[291,301,280,0,280,274,293,292],
[293,283,265,271,0,265,281,274],
[308,306,275,277,286,0,298,294],
[285,286,254,258,270,253,0,281],
[283,286,265,259,277,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,293,275,289,257,300,274],
[238,0,276,256,288,258,293,260],
[258,275,0,263,263,250,265,266],
[276,295,288,0,294,268,296,286],
[262,263,288,257,0,249,287,259],
[294,293,301,283,302,0,301,275],
[251,258,286,255,264,250,0,273],
[277,291,285,265,292,276,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,286,285,266,294,295,264],
[271,0,275,279,261,264,274,268],
[265,276,0,288,269,282,271,274],
[266,272,263,0,259,255,262,264],
[285,290,282,292,0,279,272,281],
[257,287,269,296,272,0,284,280],
[256,277,280,289,279,267,0,275],
[287,283,277,287,270,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,243,274,233,270,257,245],
[300,0,312,274,305,325,304,271],
[308,239,0,285,329,310,313,289],
[277,277,266,0,248,280,273,238],
[318,246,222,303,0,299,289,285],
[281,226,241,271,252,0,219,245],
[294,247,238,278,262,332,0,262],
[306,280,262,313,266,306,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,235,284,273,259,279,259],
[258,0,259,295,260,245,262,243],
[316,292,0,307,285,283,288,275],
[267,256,244,0,274,257,277,235],
[278,291,266,277,0,261,289,283],
[292,306,268,294,290,0,289,279],
[272,289,263,274,262,262,0,246],
[292,308,276,316,268,272,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,276,287,284,282,287],
[272,0,278,272,270,278,274,286],
[289,273,0,270,290,274,279,291],
[275,279,281,0,304,271,288,289],
[264,281,261,247,0,273,257,278],
[267,273,277,280,278,0,281,290],
[269,277,272,263,294,270,0,289],
[264,265,260,262,273,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,271,294,279,259,269],
[282,0,281,264,285,298,285,275],
[282,270,0,271,280,259,266,277],
[280,287,280,0,299,263,260,275],
[257,266,271,252,0,269,250,287],
[272,253,292,288,282,0,267,265],
[292,266,285,291,301,284,0,267],
[282,276,274,276,264,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,294,277,283,297,300,286],
[276,0,293,290,285,286,288,261],
[257,258,0,265,276,275,274,270],
[274,261,286,0,281,300,296,273],
[268,266,275,270,0,288,271,271],
[254,265,276,251,263,0,266,257],
[251,263,277,255,280,285,0,257],
[265,290,281,278,280,294,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,257,281,260,279,250],
[269,0,271,271,276,262,284,261],
[282,280,0,297,286,266,293,281],
[294,280,254,0,281,290,281,281],
[270,275,265,270,0,309,287,271],
[291,289,285,261,242,0,286,286],
[272,267,258,270,264,265,0,303],
[301,290,270,270,280,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,288,285,279,265,282],
[274,0,276,285,281,267,265,282],
[268,275,0,292,281,280,275,267],
[263,266,259,0,287,265,269,279],
[266,270,270,264,0,269,266,274],
[272,284,271,286,282,0,276,284],
[286,286,276,282,285,275,0,264],
[269,269,284,272,277,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,279,245,264,272,266],
[285,0,299,294,271,275,279,279],
[278,252,0,291,267,260,277,243],
[272,257,260,0,263,277,279,257],
[306,280,284,288,0,268,285,267],
[287,276,291,274,283,0,287,262],
[279,272,274,272,266,264,0,283],
[285,272,308,294,284,289,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,262,277,292,268,273],
[289,0,303,294,290,273,301,287],
[266,248,0,270,264,270,289,280],
[289,257,281,0,283,306,297,291],
[274,261,287,268,0,292,279,287],
[259,278,281,245,259,0,273,275],
[283,250,262,254,272,278,0,254],
[278,264,271,260,264,276,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,274,254,270,280,278,263],
[289,0,289,288,270,281,278,275],
[277,262,0,259,266,274,267,276],
[297,263,292,0,279,283,270,275],
[281,281,285,272,0,283,284,283],
[271,270,277,268,268,0,263,253],
[273,273,284,281,267,288,0,271],
[288,276,275,276,268,298,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,283,291,267,255,271,260],
[304,0,297,277,267,256,266,287],
[268,254,0,279,259,286,254,295],
[260,274,272,0,269,278,290,299],
[284,284,292,282,0,256,280,269],
[296,295,265,273,295,0,274,285],
[280,285,297,261,271,277,0,267],
[291,264,256,252,282,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,284,280,289,285,323],
[280,0,264,266,286,278,256,289],
[267,287,0,267,288,273,270,303],
[267,285,284,0,309,285,265,313],
[271,265,263,242,0,273,255,289],
[262,273,278,266,278,0,270,298],
[266,295,281,286,296,281,0,317],
[228,262,248,238,262,253,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,280,278,266,260,279,276],
[261,0,296,285,274,272,274,279],
[271,255,0,263,272,259,263,271],
[273,266,288,0,269,266,275,276],
[285,277,279,282,0,272,260,263],
[291,279,292,285,279,0,268,291],
[272,277,288,276,291,283,0,278],
[275,272,280,275,288,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,269,287,286,276,303,275],
[292,0,290,273,282,287,293,279],
[282,261,0,289,274,275,280,305],
[264,278,262,0,277,281,278,289],
[265,269,277,274,0,272,283,288],
[275,264,276,270,279,0,279,284],
[248,258,271,273,268,272,0,272],
[276,272,246,262,263,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,263,264,279,265,266,300],
[273,0,270,269,299,286,280,288],
[288,281,0,271,296,310,307,304],
[287,282,280,0,297,278,275,305],
[272,252,255,254,0,268,264,289],
[286,265,241,273,283,0,279,293],
[285,271,244,276,287,272,0,306],
[251,263,247,246,262,258,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,279,290,280,291,298,285],
[290,0,282,293,261,293,282,289],
[272,269,0,282,263,288,260,268],
[261,258,269,0,267,280,246,264],
[271,290,288,284,0,306,269,288],
[260,258,263,271,245,0,263,268],
[253,269,291,305,282,288,0,281],
[266,262,283,287,263,283,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,245,255,265,279,246,269],
[275,0,280,291,278,294,269,272],
[306,271,0,245,278,281,258,266],
[296,260,306,0,312,304,288,276],
[286,273,273,239,0,269,271,259],
[272,257,270,247,282,0,272,250],
[305,282,293,263,280,279,0,294],
[282,279,285,275,292,301,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,262,288,285,281,269],
[275,0,277,240,279,263,260,259],
[259,274,0,266,286,264,255,251],
[289,311,285,0,275,278,268,300],
[263,272,265,276,0,267,263,272],
[266,288,287,273,284,0,259,261],
[270,291,296,283,288,292,0,278],
[282,292,300,251,279,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,222,223,255,234,230,234],
[370,0,301,296,362,311,265,301],
[329,250,0,256,285,260,255,245],
[328,255,295,0,311,327,294,269],
[296,189,266,240,0,240,242,203],
[317,240,291,224,311,0,266,220],
[321,286,296,257,309,285,0,227],
[317,250,306,282,348,331,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,349,251,253,202,301,201],
[299,0,400,300,400,351,300,251],
[202,151,0,150,203,151,250,201],
[300,251,401,0,401,302,251,301],
[298,151,348,150,0,151,300,251],
[349,200,400,249,400,0,250,251],
[250,251,301,300,251,301,0,301],
[350,300,350,250,300,300,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,262,270,251,263,264],
[275,0,263,269,273,264,252,263],
[272,288,0,270,271,279,264,255],
[289,282,281,0,261,267,254,246],
[281,278,280,290,0,254,277,266],
[300,287,272,284,297,0,263,283],
[288,299,287,297,274,288,0,261],
[287,288,296,305,285,268,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,280,272,263,266,270],
[291,0,283,296,324,261,279,284],
[269,268,0,272,267,277,279,285],
[271,255,279,0,284,276,260,278],
[279,227,284,267,0,256,266,268],
[288,290,274,275,295,0,282,267],
[285,272,272,291,285,269,0,274],
[281,267,266,273,283,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,306,292,301,311,293],
[261,0,254,277,265,267,273,296],
[284,297,0,281,261,312,310,300],
[245,274,270,0,267,268,267,290],
[259,286,290,284,0,311,300,311],
[250,284,239,283,240,0,215,246],
[240,278,241,284,251,336,0,279],
[258,255,251,261,240,305,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,265,249,278,259,262,286],
[298,0,247,274,303,272,275,268],
[286,304,0,264,302,287,276,287],
[302,277,287,0,330,264,305,307],
[273,248,249,221,0,256,255,265],
[292,279,264,287,295,0,281,283],
[289,276,275,246,296,270,0,281],
[265,283,264,244,286,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,280,247,262,255,271],
[285,0,275,278,265,293,292,273],
[295,276,0,283,274,283,280,263],
[271,273,268,0,254,261,267,259],
[304,286,277,297,0,288,285,267],
[289,258,268,290,263,0,267,269],
[296,259,271,284,266,284,0,280],
[280,278,288,292,284,282,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,279,283,272,273,303],
[282,0,282,238,282,272,269,262],
[288,269,0,252,257,280,262,295],
[272,313,299,0,338,292,294,297],
[268,269,294,213,0,273,251,267],
[279,279,271,259,278,0,253,292],
[278,282,289,257,300,298,0,279],
[248,289,256,254,284,259,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,261,261,261,279,241,268],
[278,0,263,278,276,275,259,296],
[290,288,0,306,301,298,253,294],
[290,273,245,0,280,235,235,265],
[290,275,250,271,0,238,281,302],
[272,276,253,316,313,0,289,301],
[310,292,298,316,270,262,0,284],
[283,255,257,286,249,250,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,281,285,267,277,273],
[272,0,257,261,278,266,245,254],
[284,294,0,274,286,275,254,276],
[270,290,277,0,297,272,264,284],
[266,273,265,254,0,261,265,270],
[284,285,276,279,290,0,263,266],
[274,306,297,287,286,288,0,276],
[278,297,275,267,281,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,274,286,292,298,299,298],
[243,0,236,251,270,249,279,232],
[277,315,0,303,313,267,284,263],
[265,300,248,0,277,282,288,252],
[259,281,238,274,0,251,261,243],
[253,302,284,269,300,0,324,278],
[252,272,267,263,290,227,0,225],
[253,319,288,299,308,273,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,301,274,291,333,287],
[255,0,235,278,241,273,286,265],
[273,316,0,283,263,271,305,261],
[250,273,268,0,247,237,284,234],
[277,310,288,304,0,275,313,274],
[260,278,280,314,276,0,294,297],
[218,265,246,267,238,257,0,248],
[264,286,290,317,277,254,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,296,262,288,273,284],
[288,0,273,300,286,278,269,270],
[282,278,0,303,293,284,273,287],
[255,251,248,0,272,266,256,269],
[289,265,258,279,0,278,294,284],
[263,273,267,285,273,0,299,278],
[278,282,278,295,257,252,0,273],
[267,281,264,282,267,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,271,271,289,283,276],
[275,0,259,262,270,277,268,282],
[283,292,0,261,276,299,269,264],
[280,289,290,0,289,297,267,280],
[280,281,275,262,0,310,274,285],
[262,274,252,254,241,0,252,260],
[268,283,282,284,277,299,0,293],
[275,269,287,271,266,291,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,302,251,302,203,302,401],
[301,0,401,248,300,352,300,400],
[249,150,0,249,249,201,248,301],
[300,303,302,0,402,253,253,352],
[249,251,302,149,0,303,250,300],
[348,199,350,298,248,0,297,348],
[249,251,303,298,301,254,0,352],
[150,151,250,199,251,203,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,262,262,280,264,305,240],
[302,0,307,298,301,293,328,268],
[289,244,0,280,281,285,297,276],
[289,253,271,0,287,319,298,285],
[271,250,270,264,0,296,268,261],
[287,258,266,232,255,0,267,299],
[246,223,254,253,283,284,0,259],
[311,283,275,266,290,252,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,270,271,279,281,265],
[255,0,293,272,272,270,278,260],
[276,258,0,267,262,252,258,255],
[281,279,284,0,278,269,267,288],
[280,279,289,273,0,268,271,274],
[272,281,299,282,283,0,280,283],
[270,273,293,284,280,271,0,266],
[286,291,296,263,277,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,313,258,286,261,277],
[270,0,289,295,268,279,267,266],
[262,262,0,273,256,269,267,264],
[238,256,278,0,237,260,253,256],
[293,283,295,314,0,285,280,273],
[265,272,282,291,266,0,270,274],
[290,284,284,298,271,281,0,274],
[274,285,287,295,278,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,155,211,235,312,209,232],
[291,0,291,266,291,317,343,290],
[396,260,0,291,314,365,286,286],
[340,285,260,0,286,338,288,234],
[316,260,237,265,0,289,209,314],
[239,234,186,213,262,0,212,184],
[342,208,265,263,342,339,0,289],
[319,261,265,317,237,367,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,301,324,379,248,248,325],
[274,0,297,398,301,322,324,400],
[250,254,0,174,226,223,225,226],
[227,153,377,0,331,299,229,255],
[172,250,325,220,0,196,223,225],
[303,229,328,252,355,0,279,254],
[303,227,326,322,328,272,0,301],
[226,151,325,296,326,297,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,239,300,258,258,225,244],
[297,0,317,285,278,289,273,279],
[312,234,0,303,249,277,281,302],
[251,266,248,0,255,236,182,204],
[293,273,302,296,0,300,276,307],
[293,262,274,315,251,0,275,280],
[326,278,270,369,275,276,0,284],
[307,272,249,347,244,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,248,246,277,253,276],
[297,0,294,275,271,306,283,299],
[303,257,0,266,280,305,258,290],
[303,276,285,0,271,308,261,295],
[305,280,271,280,0,290,265,294],
[274,245,246,243,261,0,247,277],
[298,268,293,290,286,304,0,289],
[275,252,261,256,257,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,253,265,258,268,275],
[274,0,291,266,290,283,295,276],
[289,260,0,260,241,277,280,276],
[298,285,291,0,275,282,288,278],
[286,261,310,276,0,293,289,290],
[293,268,274,269,258,0,276,273],
[283,256,271,263,262,275,0,288],
[276,275,275,273,261,278,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,311,263,266,256,267,225],
[301,0,307,238,266,294,256,268],
[240,244,0,249,270,219,218,220],
[288,313,302,0,277,249,262,233],
[285,285,281,274,0,260,258,239],
[295,257,332,302,291,0,283,296],
[284,295,333,289,293,268,0,244],
[326,283,331,318,312,255,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,292,273,274,299,267],
[266,0,239,243,264,246,289,256],
[272,312,0,307,284,279,330,298],
[259,308,244,0,263,262,310,247],
[278,287,267,288,0,270,326,277],
[277,305,272,289,281,0,298,267],
[252,262,221,241,225,253,0,237],
[284,295,253,304,274,284,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,292,293,281,238,247,245],
[309,0,316,294,323,302,268,217],
[259,235,0,274,281,265,263,230],
[258,257,277,0,286,243,237,223],
[270,228,270,265,0,247,280,216],
[313,249,286,308,304,0,288,249],
[304,283,288,314,271,263,0,286],
[306,334,321,328,335,302,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,273,277,267,278,266],
[276,0,277,260,267,280,264,251],
[280,274,0,288,269,259,268,280],
[278,291,263,0,281,267,262,258],
[274,284,282,270,0,259,257,249],
[284,271,292,284,292,0,252,256],
[273,287,283,289,294,299,0,265],
[285,300,271,293,302,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,257,287,281,264,274,299],
[261,0,259,263,291,277,254,306],
[294,292,0,264,308,288,286,319],
[264,288,287,0,295,301,304,332],
[270,260,243,256,0,251,265,289],
[287,274,263,250,300,0,274,299],
[277,297,265,247,286,277,0,301],
[252,245,232,219,262,252,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,298,281,284,289,263,290],
[285,0,288,266,288,314,278,276],
[253,263,0,255,279,303,250,268],
[270,285,296,0,281,288,277,280],
[267,263,272,270,0,284,260,278],
[262,237,248,263,267,0,239,259],
[288,273,301,274,291,312,0,285],
[261,275,283,271,273,292,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,275,255,299,286,288,279],
[257,0,266,258,268,264,267,268],
[276,285,0,259,278,271,259,257],
[296,293,292,0,295,274,295,284],
[252,283,273,256,0,272,278,266],
[265,287,280,277,279,0,295,282],
[263,284,292,256,273,256,0,280],
[272,283,294,267,285,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,268,292,302,279,290],
[269,0,295,263,275,272,269,277],
[262,256,0,261,275,268,269,255],
[283,288,290,0,285,294,283,272],
[259,276,276,266,0,283,281,287],
[249,279,283,257,268,0,262,269],
[272,282,282,268,270,289,0,275],
[261,274,296,279,264,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,281,296,299,294,285],
[266,0,290,273,298,296,283,285],
[280,261,0,276,292,251,270,278],
[270,278,275,0,278,249,269,257],
[255,253,259,273,0,254,255,243],
[252,255,300,302,297,0,278,254],
[257,268,281,282,296,273,0,280],
[266,266,273,294,308,297,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,283,297,292,271,289,301],
[254,0,256,267,276,271,267,271],
[268,295,0,277,266,261,276,281],
[254,284,274,0,250,292,266,288],
[259,275,285,301,0,285,258,280],
[280,280,290,259,266,0,251,278],
[262,284,275,285,293,300,0,311],
[250,280,270,263,271,273,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,255,252,270,270,266,286],
[272,0,265,282,288,282,272,282],
[296,286,0,289,287,272,265,284],
[299,269,262,0,263,279,291,282],
[281,263,264,288,0,287,291,282],
[281,269,279,272,264,0,291,272],
[285,279,286,260,260,260,0,264],
[265,269,267,269,269,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,288,287,285,283,265],
[279,0,268,279,279,271,267,268],
[285,283,0,293,285,270,286,273],
[263,272,258,0,272,252,275,256],
[264,272,266,279,0,273,269,262],
[266,280,281,299,278,0,284,279],
[268,284,265,276,282,267,0,261],
[286,283,278,295,289,272,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,272,275,274,277,271,283],
[296,0,273,266,278,286,273,274],
[279,278,0,278,284,286,256,262],
[276,285,273,0,288,286,297,275],
[277,273,267,263,0,262,260,258],
[274,265,265,265,289,0,265,269],
[280,278,295,254,291,286,0,282],
[268,277,289,276,293,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,295,282,268,296,270,263],
[253,0,289,272,272,279,267,273],
[256,262,0,276,250,284,243,265],
[269,279,275,0,244,279,249,254],
[283,279,301,307,0,286,247,277],
[255,272,267,272,265,0,248,241],
[281,284,308,302,304,303,0,271],
[288,278,286,297,274,310,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,256,268,245,270,273],
[275,0,280,280,279,259,276,270],
[275,271,0,247,264,249,269,269],
[295,271,304,0,273,261,280,288],
[283,272,287,278,0,277,271,265],
[306,292,302,290,274,0,293,286],
[281,275,282,271,280,258,0,270],
[278,281,282,263,286,265,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,291,288,283,274,289],
[277,0,280,289,278,275,277,281],
[274,271,0,299,291,271,292,280],
[260,262,252,0,290,274,258,261],
[263,273,260,261,0,267,280,274],
[268,276,280,277,284,0,271,277],
[277,274,259,293,271,280,0,276],
[262,270,271,290,277,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,277,273,262,288,267,284],
[294,0,271,272,266,287,275,280],
[274,280,0,280,273,302,290,297],
[278,279,271,0,267,283,276,277],
[289,285,278,284,0,288,261,291],
[263,264,249,268,263,0,266,276],
[284,276,261,275,290,285,0,271],
[267,271,254,274,260,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,258,260,267,248,256,282],
[301,0,281,268,274,268,288,297],
[293,270,0,285,275,273,287,287],
[291,283,266,0,293,276,279,291],
[284,277,276,258,0,270,252,286],
[303,283,278,275,281,0,280,289],
[295,263,264,272,299,271,0,298],
[269,254,264,260,265,262,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,271,299,302,298,275,320],
[328,0,282,310,334,249,292,334],
[280,269,0,306,312,308,297,290],
[252,241,245,0,298,228,246,216],
[249,217,239,253,0,327,217,282],
[253,302,243,323,224,0,243,287],
[276,259,254,305,334,308,0,315],
[231,217,261,335,269,264,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,254,231,285,249,257,264],
[290,0,281,262,291,254,249,272],
[297,270,0,251,304,271,261,283],
[320,289,300,0,310,262,274,280],
[266,260,247,241,0,246,253,249],
[302,297,280,289,305,0,269,277],
[294,302,290,277,298,282,0,264],
[287,279,268,271,302,274,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,227,275,323,321,347,342],
[254,0,301,296,319,276,348,298],
[324,250,0,298,320,301,297,323],
[276,255,253,0,205,301,320,252],
[228,232,231,346,0,303,349,209],
[230,275,250,250,248,0,297,271],
[204,203,254,231,202,254,0,205],
[209,253,228,299,342,280,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,239,264,253,251,269,258],
[296,0,291,289,259,274,279,277],
[312,260,0,264,251,286,306,293],
[287,262,287,0,280,300,270,280],
[298,292,300,271,0,288,318,294],
[300,277,265,251,263,0,281,300],
[282,272,245,281,233,270,0,257],
[293,274,258,271,257,251,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,251,269,273,269,282],
[286,0,284,260,271,291,268,279],
[289,267,0,275,276,294,251,284],
[300,291,276,0,273,296,276,279],
[282,280,275,278,0,300,275,277],
[278,260,257,255,251,0,244,251],
[282,283,300,275,276,307,0,286],
[269,272,267,272,274,300,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,366,366,275,458,368,183],
[184,0,276,367,368,367,367,276],
[185,275,0,274,369,459,276,275],
[185,184,277,0,369,369,460,275],
[276,183,182,182,0,366,184,91],
[93,184,92,182,185,0,276,91],
[183,184,275,91,367,275,0,183],
[368,275,276,276,460,460,368,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,265,296,259,301,259,290],
[253,0,258,265,275,259,276,267],
[286,293,0,269,283,282,275,299],
[255,286,282,0,270,295,264,282],
[292,276,268,281,0,264,272,277],
[250,292,269,256,287,0,255,270],
[292,275,276,287,279,296,0,276],
[261,284,252,269,274,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,298,308,302,294,288],
[255,0,256,281,294,280,263,274],
[276,295,0,282,281,298,274,273],
[253,270,269,0,279,278,273,251],
[243,257,270,272,0,280,268,273],
[249,271,253,273,271,0,268,256],
[257,288,277,278,283,283,0,254],
[263,277,278,300,278,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,286,297,284,266,289,273],
[286,0,281,291,282,279,299,274],
[265,270,0,268,273,263,272,274],
[254,260,283,0,272,262,277,281],
[267,269,278,279,0,255,276,277],
[285,272,288,289,296,0,302,272],
[262,252,279,274,275,249,0,263],
[278,277,277,270,274,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,272,309,308,303,281],
[273,0,263,262,279,265,273,271],
[269,288,0,244,298,280,263,239],
[279,289,307,0,287,320,251,255],
[242,272,253,264,0,277,250,241],
[243,286,271,231,274,0,278,268],
[248,278,288,300,301,273,0,251],
[270,280,312,296,310,283,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,261,272,256,283,289,298],
[297,0,276,264,268,293,299,281],
[290,275,0,282,257,290,276,305],
[279,287,269,0,276,309,288,292],
[295,283,294,275,0,296,284,291],
[268,258,261,242,255,0,253,266],
[262,252,275,263,267,298,0,268],
[253,270,246,259,260,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,270,288,256,286,261],
[275,0,276,262,288,286,269,269],
[278,275,0,263,264,275,280,252],
[281,289,288,0,276,272,294,301],
[263,263,287,275,0,280,290,279],
[295,265,276,279,271,0,300,265],
[265,282,271,257,261,251,0,260],
[290,282,299,250,272,286,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,280,279,279,279,258,288],
[271,0,268,277,293,263,257,279],
[271,283,0,276,274,264,257,278],
[272,274,275,0,282,258,265,285],
[272,258,277,269,0,265,257,269],
[272,288,287,293,286,0,291,301],
[293,294,294,286,294,260,0,300],
[263,272,273,266,282,250,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,286,291,282,279,271],
[268,0,270,267,304,277,287,283],
[289,281,0,266,303,299,283,277],
[265,284,285,0,300,288,300,285],
[260,247,248,251,0,254,243,272],
[269,274,252,263,297,0,249,258],
[272,264,268,251,308,302,0,274],
[280,268,274,266,279,293,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,295,290,256,332,220,255],
[260,0,298,295,330,336,331,371],
[256,253,0,181,295,291,217,294],
[261,256,370,0,329,259,257,257],
[295,221,256,222,0,331,221,220],
[219,215,260,292,220,0,184,219],
[331,220,334,294,330,367,0,329],
[296,180,257,294,331,332,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,267,249,270,270,274],
[277,0,287,290,270,280,281,277],
[279,264,0,273,292,267,268,269],
[284,261,278,0,269,259,276,264],
[302,281,259,282,0,290,259,280],
[281,271,284,292,261,0,262,263],
[281,270,283,275,292,289,0,302],
[277,274,282,287,271,288,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,301,284,308,300,255,267],
[244,0,279,210,253,298,246,279],
[250,272,0,301,291,300,268,335],
[267,341,250,0,289,282,297,314],
[243,298,260,262,0,261,282,335],
[251,253,251,269,290,0,268,273],
[296,305,283,254,269,283,0,305],
[284,272,216,237,216,278,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,300,289,291,286,291,274],
[256,0,273,269,272,260,292,220],
[251,278,0,271,260,284,299,269],
[262,282,280,0,257,283,297,255],
[260,279,291,294,0,286,274,286],
[265,291,267,268,265,0,281,264],
[260,259,252,254,277,270,0,252],
[277,331,282,296,265,287,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,239,281,293,264,282,275],
[298,0,293,281,335,299,293,261],
[312,258,0,293,302,283,295,275],
[270,270,258,0,325,280,316,267],
[258,216,249,226,0,255,217,233],
[287,252,268,271,296,0,253,224],
[269,258,256,235,334,298,0,278],
[276,290,276,284,318,327,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,283,273,281,281,268,270],
[282,0,263,271,278,279,262,266],
[268,288,0,269,261,269,286,263],
[278,280,282,0,283,279,275,288],
[270,273,290,268,0,263,275,267],
[270,272,282,272,288,0,281,277],
[283,289,265,276,276,270,0,271],
[281,285,288,263,284,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,289,252,300,262,260,274],
[261,0,264,245,276,256,252,270],
[262,287,0,252,293,256,270,293],
[299,306,299,0,315,272,292,301],
[251,275,258,236,0,269,263,246],
[289,295,295,279,282,0,268,283],
[291,299,281,259,288,283,0,298],
[277,281,258,250,305,268,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,302,278,286,290,298],
[270,0,257,254,274,288,287,271],
[281,294,0,275,293,299,274,272],
[249,297,276,0,256,262,287,282],
[273,277,258,295,0,278,269,264],
[265,263,252,289,273,0,272,281],
[261,264,277,264,282,279,0,264],
[253,280,279,269,287,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,272,279,293,288,290],
[278,0,258,253,280,283,284,274],
[282,293,0,283,290,288,267,297],
[279,298,268,0,269,265,281,281],
[272,271,261,282,0,290,277,289],
[258,268,263,286,261,0,278,312],
[263,267,284,270,274,273,0,284],
[261,277,254,270,262,239,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,267,299,281,287,286,253],
[230,0,274,257,260,284,262,282],
[284,277,0,264,249,266,277,277],
[252,294,287,0,271,258,260,282],
[270,291,302,280,0,274,282,299],
[264,267,285,293,277,0,267,273],
[265,289,274,291,269,284,0,292],
[298,269,274,269,252,278,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,271,302,274,287,291,284],
[262,0,255,280,279,271,270,267],
[280,296,0,290,274,291,282,272],
[249,271,261,0,258,248,255,257],
[277,272,277,293,0,285,273,268],
[264,280,260,303,266,0,272,251],
[260,281,269,296,278,279,0,265],
[267,284,279,294,283,300,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,298,278,274,282,287,269],
[285,0,308,269,281,300,279,274],
[253,243,0,253,233,271,253,267],
[273,282,298,0,258,301,293,282],
[277,270,318,293,0,288,294,295],
[269,251,280,250,263,0,278,274],
[264,272,298,258,257,273,0,280],
[282,277,284,269,256,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,262,283,266,318,262,290],
[300,0,275,281,269,322,270,295],
[289,276,0,281,277,318,283,275],
[268,270,270,0,230,322,243,281],
[285,282,274,321,0,319,261,301],
[233,229,233,229,232,0,203,223],
[289,281,268,308,290,348,0,282],
[261,256,276,270,250,328,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,285,279,272,302,266],
[276,0,264,261,263,276,281,281],
[271,287,0,272,288,296,287,282],
[266,290,279,0,287,283,292,270],
[272,288,263,264,0,275,285,271],
[279,275,255,268,276,0,290,274],
[249,270,264,259,266,261,0,256],
[285,270,269,281,280,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,270,287,292,278,271],
[270,0,251,245,269,280,293,263],
[278,300,0,269,270,288,277,264],
[281,306,282,0,284,299,281,272],
[264,282,281,267,0,280,280,276],
[259,271,263,252,271,0,271,273],
[273,258,274,270,271,280,0,264],
[280,288,287,279,275,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,302,270,270,284,304,266],
[264,0,277,283,271,313,314,286],
[249,274,0,279,256,305,287,241],
[281,268,272,0,246,303,275,261],
[281,280,295,305,0,328,332,267],
[267,238,246,248,223,0,288,249],
[247,237,264,276,219,263,0,234],
[285,265,310,290,284,302,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,317,279,265,278,329,314],
[301,0,364,268,379,247,312,329],
[234,187,0,246,190,202,282,189],
[272,283,305,0,241,296,334,318],
[286,172,361,310,0,247,315,284],
[273,304,349,255,304,0,284,349],
[222,239,269,217,236,267,0,220],
[237,222,362,233,267,202,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,268,279,267,270,271],
[277,0,255,276,265,267,266,265],
[279,296,0,276,276,271,266,278],
[283,275,275,0,272,288,263,254],
[272,286,275,279,0,261,279,258],
[284,284,280,263,290,0,271,272],
[281,285,285,288,272,280,0,272],
[280,286,273,297,293,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,257,263,277,291,257,294],
[296,0,309,300,270,294,285,292],
[294,242,0,271,285,301,271,263],
[288,251,280,0,257,287,266,295],
[274,281,266,294,0,293,267,287],
[260,257,250,264,258,0,237,255],
[294,266,280,285,284,314,0,301],
[257,259,288,256,264,296,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,262,321,282,284,270,282],
[252,0,251,279,230,251,237,231],
[289,300,0,293,259,272,275,281],
[230,272,258,0,229,227,235,259],
[269,321,292,322,0,255,271,278],
[267,300,279,324,296,0,301,275],
[281,314,276,316,280,250,0,289],
[269,320,270,292,273,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,298,233,298,261,255,291],
[286,0,292,258,283,252,247,268],
[253,259,0,243,266,242,263,286],
[318,293,308,0,308,270,289,305],
[253,268,285,243,0,272,243,281],
[290,299,309,281,279,0,274,292],
[296,304,288,262,308,277,0,300],
[260,283,265,246,270,259,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,248,255,265,257,260,268],
[310,0,275,285,292,291,278,295],
[303,276,0,293,272,285,290,298],
[296,266,258,0,276,282,290,291],
[286,259,279,275,0,281,276,280],
[294,260,266,269,270,0,266,293],
[291,273,261,261,275,285,0,295],
[283,256,253,260,271,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,263,271,276,269,291],
[271,0,267,281,272,269,292,283],
[275,284,0,282,287,270,288,294],
[288,270,269,0,271,282,269,300],
[280,279,264,280,0,264,268,292],
[275,282,281,269,287,0,277,274],
[282,259,263,282,283,274,0,276],
[260,268,257,251,259,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,275,270,263,251,280,272],
[293,0,292,272,272,276,281,291],
[276,259,0,283,270,278,297,290],
[281,279,268,0,272,281,298,301],
[288,279,281,279,0,272,282,292],
[300,275,273,270,279,0,286,296],
[271,270,254,253,269,265,0,281],
[279,260,261,250,259,255,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,284,291,288,296,288,272],
[262,0,303,281,291,293,296,289],
[267,248,0,241,267,256,284,266],
[260,270,310,0,291,284,295,272],
[263,260,284,260,0,268,280,265],
[255,258,295,267,283,0,271,274],
[263,255,267,256,271,280,0,295],
[279,262,285,279,286,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,266,280,291,281,285],
[280,0,292,271,292,283,289,282],
[275,259,0,239,268,272,279,271],
[285,280,312,0,275,281,294,301],
[271,259,283,276,0,274,281,273],
[260,268,279,270,277,0,281,282],
[270,262,272,257,270,270,0,273],
[266,269,280,250,278,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,283,210,271,252,280,267],
[187,0,263,269,229,228,260,268],
[268,288,0,248,196,235,262,232],
[341,282,303,0,255,313,352,287],
[280,322,355,296,0,298,353,255],
[299,323,316,238,253,0,341,282],
[271,291,289,199,198,210,0,272],
[284,283,319,264,296,269,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,288,286,263,274,308,279],
[254,0,273,253,274,257,267,254],
[263,278,0,254,276,282,270,272],
[265,298,297,0,272,284,261,265],
[288,277,275,279,0,289,267,261],
[277,294,269,267,262,0,275,260],
[243,284,281,290,284,276,0,270],
[272,297,279,286,290,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,256,270,266,275,275,259],
[273,0,264,269,268,269,268,262],
[295,287,0,287,280,281,284,272],
[281,282,264,0,268,293,261,283],
[285,283,271,283,0,288,288,270],
[276,282,270,258,263,0,273,269],
[276,283,267,290,263,278,0,272],
[292,289,279,268,281,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,269,269,268,269,289,278],
[252,0,263,260,262,263,276,251],
[282,288,0,278,270,271,264,265],
[282,291,273,0,269,270,292,260],
[283,289,281,282,0,285,283,254],
[282,288,280,281,266,0,298,259],
[262,275,287,259,268,253,0,248],
[273,300,286,291,297,292,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,317,292,252,258,215,368],
[313,0,281,267,215,289,275,276],
[234,270,0,242,215,277,236,288],
[259,284,309,0,246,249,233,340],
[299,336,336,305,0,291,269,380],
[293,262,274,302,260,0,281,345],
[336,276,315,318,282,270,0,345],
[183,275,263,211,171,206,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,319,265,285,277,257,298],
[273,0,284,272,283,287,283,292],
[232,267,0,267,274,279,273,286],
[286,279,284,0,280,267,265,290],
[266,268,277,271,0,283,268,289],
[274,264,272,284,268,0,282,289],
[294,268,278,286,283,269,0,293],
[253,259,265,261,262,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,261,275,268,287,292],
[280,0,269,272,283,290,295,301],
[269,282,0,287,263,294,286,303],
[290,279,264,0,290,291,294,300],
[276,268,288,261,0,284,268,289],
[283,261,257,260,267,0,288,291],
[264,256,265,257,283,263,0,282],
[259,250,248,251,262,260,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,307,269,279,292,276,263],
[269,0,288,276,258,300,273,254],
[244,263,0,264,250,249,254,254],
[282,275,287,0,267,284,258,280],
[272,293,301,284,0,276,295,274],
[259,251,302,267,275,0,283,268],
[275,278,297,293,256,268,0,267],
[288,297,297,271,277,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,270,287,287,281,279],
[279,0,287,276,292,312,307,259],
[283,264,0,270,270,276,287,233],
[281,275,281,0,275,318,300,263],
[264,259,281,276,0,293,286,247],
[264,239,275,233,258,0,260,235],
[270,244,264,251,265,291,0,253],
[272,292,318,288,304,316,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,299,287,261,294,296,293],
[243,0,272,264,259,274,263,257],
[252,279,0,277,265,287,296,281],
[264,287,274,0,252,284,279,274],
[290,292,286,299,0,297,263,282],
[257,277,264,267,254,0,279,263],
[255,288,255,272,288,272,0,258],
[258,294,270,277,269,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,282,274,267,305,276,282],
[290,0,293,279,282,312,275,275],
[269,258,0,283,267,281,271,267],
[277,272,268,0,252,282,242,271],
[284,269,284,299,0,302,268,304],
[246,239,270,269,249,0,248,279],
[275,276,280,309,283,303,0,287],
[269,276,284,280,247,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,272,272,262,277,284],
[274,0,279,278,266,278,262,280],
[268,272,0,267,268,264,260,271],
[279,273,284,0,277,273,272,281],
[279,285,283,274,0,272,282,293],
[289,273,287,278,279,0,281,279],
[274,289,291,279,269,270,0,285],
[267,271,280,270,258,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,262,248,223,277,267,271],
[306,0,267,271,253,276,301,259],
[289,284,0,277,274,270,294,251],
[303,280,274,0,284,288,286,275],
[328,298,277,267,0,274,284,281],
[274,275,281,263,277,0,278,275],
[284,250,257,265,267,273,0,257],
[280,292,300,276,270,276,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,279,265,281,274,269],
[289,0,282,284,269,296,278,290],
[280,269,0,278,262,272,290,295],
[272,267,273,0,286,283,271,293],
[286,282,289,265,0,278,279,288],
[270,255,279,268,273,0,270,288],
[277,273,261,280,272,281,0,292],
[282,261,256,258,263,263,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,262,264,271,275,257],
[281,0,281,291,263,270,270,280],
[303,270,0,307,279,297,310,280],
[289,260,244,0,262,284,274,253],
[287,288,272,289,0,298,289,252],
[280,281,254,267,253,0,284,241],
[276,281,241,277,262,267,0,264],
[294,271,271,298,299,310,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,271,286,303,286,280],
[275,0,269,274,301,289,278,280],
[275,282,0,289,280,279,268,297],
[280,277,262,0,275,286,301,276],
[265,250,271,276,0,274,267,258],
[248,262,272,265,277,0,262,274],
[265,273,283,250,284,289,0,266],
[271,271,254,275,293,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,284,278,288,272,281],
[277,0,274,272,285,301,270,274],
[269,277,0,284,280,295,277,281],
[267,279,267,0,277,286,267,258],
[273,266,271,274,0,283,258,272],
[263,250,256,265,268,0,256,264],
[279,281,274,284,293,295,0,280],
[270,277,270,293,279,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,275,266,268,277,244,267],
[291,0,270,263,299,295,275,275],
[276,281,0,268,275,273,264,282],
[285,288,283,0,287,291,266,285],
[283,252,276,264,0,275,274,272],
[274,256,278,260,276,0,262,268],
[307,276,287,285,277,289,0,265],
[284,276,269,266,279,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,275,263,264,281,307,270],
[236,0,293,253,274,245,246,239],
[276,258,0,230,290,234,237,249],
[288,298,321,0,291,279,327,269],
[287,277,261,260,0,266,299,269],
[270,306,317,272,285,0,290,267],
[244,305,314,224,252,261,0,295],
[281,312,302,282,282,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,265,193,212,298,298,301],
[324,0,303,235,321,317,248,288],
[286,248,0,178,247,263,284,301],
[358,316,373,0,262,354,354,391],
[339,230,304,289,0,302,376,321],
[253,234,288,197,249,0,253,269],
[253,303,267,197,175,298,0,338],
[250,263,250,160,230,282,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,266,278,273,285,278,266],
[286,0,278,285,273,297,275,284],
[285,273,0,280,283,274,284,275],
[273,266,271,0,271,276,272,262],
[278,278,268,280,0,284,282,277],
[266,254,277,275,267,0,254,281],
[273,276,267,279,269,297,0,274],
[285,267,276,289,274,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,274,272,276,261,266,238],
[266,0,271,275,287,277,282,278],
[277,280,0,274,274,279,259,256],
[279,276,277,0,269,272,251,254],
[275,264,277,282,0,268,266,264],
[290,274,272,279,283,0,266,265],
[285,269,292,300,285,285,0,270],
[313,273,295,297,287,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,296,277,262,277,284,286],
[284,0,291,305,257,272,279,285],
[255,260,0,266,238,251,252,258],
[274,246,285,0,247,275,272,272],
[289,294,313,304,0,290,254,288],
[274,279,300,276,261,0,272,286],
[267,272,299,279,297,279,0,292],
[265,266,293,279,263,265,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,269,288,286,293,290,262],
[242,0,264,257,283,279,251,255],
[282,287,0,262,275,293,268,260],
[263,294,289,0,277,276,262,276],
[265,268,276,274,0,279,269,248],
[258,272,258,275,272,0,257,265],
[261,300,283,289,282,294,0,265],
[289,296,291,275,303,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,286,283,270,291,291],
[289,0,267,313,289,308,306,296],
[266,284,0,295,299,293,296,286],
[265,238,256,0,299,311,283,290],
[268,262,252,252,0,283,291,292],
[281,243,258,240,268,0,282,269],
[260,245,255,268,260,269,0,266],
[260,255,265,261,259,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,303,267,256,246,234,271],
[236,0,235,232,238,185,217,247],
[248,316,0,256,301,246,233,281],
[284,319,295,0,279,262,329,273],
[295,313,250,272,0,258,276,250],
[305,366,305,289,293,0,275,281],
[317,334,318,222,275,276,0,276],
[280,304,270,278,301,270,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,261,251,279,272,281],
[290,0,276,280,266,276,270,274],
[282,275,0,266,280,289,281,295],
[290,271,285,0,278,278,279,287],
[300,285,271,273,0,284,274,280],
[272,275,262,273,267,0,263,293],
[279,281,270,272,277,288,0,284],
[270,277,256,264,271,258,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,261,283,293,285,269],
[270,0,285,276,275,302,303,304],
[270,266,0,258,283,288,283,273],
[290,275,293,0,281,301,293,285],
[268,276,268,270,0,268,279,285],
[258,249,263,250,283,0,290,272],
[266,248,268,258,272,261,0,261],
[282,247,278,266,266,279,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,280,269,282,274,273],
[286,0,289,288,261,277,264,270],
[272,262,0,275,283,306,265,278],
[271,263,276,0,285,284,290,286],
[282,290,268,266,0,290,256,263],
[269,274,245,267,261,0,258,267],
[277,287,286,261,295,293,0,269],
[278,281,273,265,288,284,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,223,253,236,282,307,269],
[267,0,246,229,271,330,264,353],
[328,305,0,262,249,292,297,292],
[298,322,289,0,299,335,262,346],
[315,280,302,252,0,304,303,267],
[269,221,259,216,247,0,293,283],
[244,287,254,289,248,258,0,312],
[282,198,259,205,284,268,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,262,247,256,280,258,236],
[266,0,269,245,256,268,249,237],
[289,282,0,256,280,271,250,246],
[304,306,295,0,280,306,282,248],
[295,295,271,271,0,298,251,261],
[271,283,280,245,253,0,239,254],
[293,302,301,269,300,312,0,277],
[315,314,305,303,290,297,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,265,289,332,268,261,290],
[307,0,265,327,373,268,279,334],
[286,286,0,293,335,284,222,268],
[262,224,258,0,321,251,240,246],
[219,178,216,230,0,207,182,244],
[283,283,267,300,344,0,252,290],
[290,272,329,311,369,299,0,313],
[261,217,283,305,307,261,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,256,254,282,269,298,238],
[300,0,274,256,309,281,306,274],
[295,277,0,262,300,287,309,276],
[297,295,289,0,296,291,315,264],
[269,242,251,255,0,248,304,238],
[282,270,264,260,303,0,303,255],
[253,245,242,236,247,248,0,219],
[313,277,275,287,313,296,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,235,273,286,308,270,276],
[276,0,291,269,248,264,263,252],
[316,260,0,260,264,273,315,281],
[278,282,291,0,267,307,312,292],
[265,303,287,284,0,304,343,301],
[243,287,278,244,247,0,285,292],
[281,288,236,239,208,266,0,258],
[275,299,270,259,250,259,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,286,291,273,289,265],
[289,0,276,278,289,281,275,292],
[271,275,0,290,263,257,262,275],
[265,273,261,0,282,262,276,267],
[260,262,288,269,0,258,265,269],
[278,270,294,289,293,0,287,279],
[262,276,289,275,286,264,0,273],
[286,259,276,284,282,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,273,254,281,279,284],
[290,0,262,269,259,268,266,279],
[282,289,0,275,266,275,275,286],
[278,282,276,0,274,276,286,304],
[297,292,285,277,0,280,274,284],
[270,283,276,275,271,0,283,283],
[272,285,276,265,277,268,0,288],
[267,272,265,247,267,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,265,238,265,261,265,232],
[303,0,286,288,293,286,279,265],
[286,265,0,263,262,288,282,262],
[313,263,288,0,293,305,282,290],
[286,258,289,258,0,287,272,271],
[290,265,263,246,264,0,262,263],
[286,272,269,269,279,289,0,262],
[319,286,289,261,280,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,262,296,287,279,276,275],
[273,0,270,276,278,277,269,280],
[289,281,0,284,293,283,284,274],
[255,275,267,0,274,273,257,268],
[264,273,258,277,0,277,265,272],
[272,274,268,278,274,0,271,268],
[275,282,267,294,286,280,0,278],
[276,271,277,283,279,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,276,275,276,290,259],
[273,0,280,286,274,262,301,267],
[280,271,0,274,266,275,267,249],
[275,265,277,0,246,240,259,251],
[276,277,285,305,0,267,266,272],
[275,289,276,311,284,0,289,278],
[261,250,284,292,285,262,0,260],
[292,284,302,300,279,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,274,245,295,280,282],
[294,0,232,273,270,298,290,288],
[287,319,0,286,278,336,294,271],
[277,278,265,0,235,291,265,245],
[306,281,273,316,0,335,289,279],
[256,253,215,260,216,0,241,276],
[271,261,257,286,262,310,0,273],
[269,263,280,306,272,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,292,282,257,262,275,273],
[283,0,294,296,285,279,262,284],
[259,257,0,282,256,240,253,279],
[269,255,269,0,239,246,248,250],
[294,266,295,312,0,289,254,296],
[289,272,311,305,262,0,286,268],
[276,289,298,303,297,265,0,277],
[278,267,272,301,255,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,270,264,266,296,264],
[263,0,248,279,244,260,292,285],
[278,303,0,270,276,286,309,289],
[281,272,281,0,271,276,288,281],
[287,307,275,280,0,289,313,290],
[285,291,265,275,262,0,317,293],
[255,259,242,263,238,234,0,277],
[287,266,262,270,261,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,286,279,308,284,284,280],
[278,0,284,267,280,258,268,287],
[265,267,0,267,287,273,274,279],
[272,284,284,0,308,293,274,300],
[243,271,264,243,0,273,249,263],
[267,293,278,258,278,0,285,301],
[267,283,277,277,302,266,0,288],
[271,264,272,251,288,250,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,264,290,290,287,297,255],
[287,0,274,291,299,296,279,274],
[287,277,0,312,287,268,290,277],
[261,260,239,0,284,267,294,256],
[261,252,264,267,0,266,277,234],
[264,255,283,284,285,0,287,250],
[254,272,261,257,274,264,0,283],
[296,277,274,295,317,301,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,253,269,270,226,287,273],
[273,0,268,254,290,240,295,271],
[298,283,0,264,307,252,282,292],
[282,297,287,0,298,287,327,267],
[281,261,244,253,0,251,271,258],
[325,311,299,264,300,0,304,261],
[264,256,269,224,280,247,0,249],
[278,280,259,284,293,290,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,275,253,262,277,266],
[267,0,278,281,266,273,280,271],
[264,273,0,277,254,257,270,261],
[276,270,274,0,274,272,266,289],
[298,285,297,277,0,281,275,296],
[289,278,294,279,270,0,278,261],
[274,271,281,285,276,273,0,267],
[285,280,290,262,255,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,286,290,261,279,284],
[292,0,268,286,288,274,288,289],
[287,283,0,291,300,277,292,268],
[265,265,260,0,278,271,256,280],
[261,263,251,273,0,273,273,289],
[290,277,274,280,278,0,305,302],
[272,263,259,295,278,246,0,280],
[267,262,283,271,262,249,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,274,286,278,284,304,279],
[283,0,275,294,256,262,322,277],
[277,276,0,293,266,263,290,288],
[265,257,258,0,265,268,291,267],
[273,295,285,286,0,274,325,276],
[267,289,288,283,277,0,321,288],
[247,229,261,260,226,230,0,265],
[272,274,263,284,275,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,287,273,293,286,278],
[265,0,293,296,288,289,286,266],
[286,258,0,290,288,300,270,267],
[264,255,261,0,277,271,245,262],
[278,263,263,274,0,290,266,282],
[258,262,251,280,261,0,267,255],
[265,265,281,306,285,284,0,270],
[273,285,284,289,269,296,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,256,281,232,288,321,258],
[292,0,312,257,299,276,320,300],
[295,239,0,284,269,275,320,285],
[270,294,267,0,232,282,294,271],
[319,252,282,319,0,327,360,336],
[263,275,276,269,224,0,312,243],
[230,231,231,257,191,239,0,234],
[293,251,266,280,215,308,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,267,227,243,285,229,243],
[329,0,268,302,255,234,271,273],
[284,283,0,220,257,285,271,272],
[324,249,331,0,284,310,280,280],
[308,296,294,267,0,273,263,263],
[266,317,266,241,278,0,228,250],
[322,280,280,271,288,323,0,253],
[308,278,279,271,288,301,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,279,267,283,272,278],
[276,0,286,266,272,268,298,281],
[263,265,0,258,258,279,283,251],
[272,285,293,0,283,276,294,271],
[284,279,293,268,0,298,294,279],
[268,283,272,275,253,0,280,274],
[279,253,268,257,257,271,0,266],
[273,270,300,280,272,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,304,275,286,280,283,281],
[283,0,300,274,288,276,284,269],
[247,251,0,260,266,233,245,240],
[276,277,291,0,285,277,292,252],
[265,263,285,266,0,261,282,260],
[271,275,318,274,290,0,292,287],
[268,267,306,259,269,259,0,271],
[270,282,311,299,291,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,267,294,289,272,287],
[263,0,266,268,276,282,285,283],
[261,285,0,277,290,284,292,278],
[284,283,274,0,299,295,304,272],
[257,275,261,252,0,275,278,263],
[262,269,267,256,276,0,267,254],
[279,266,259,247,273,284,0,269],
[264,268,273,279,288,297,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,196,234,226,232,279,271],
[290,0,269,273,303,290,339,269],
[355,282,0,306,284,270,354,341],
[317,278,245,0,210,230,277,321],
[325,248,267,341,0,252,322,252],
[319,261,281,321,299,0,333,306],
[272,212,197,274,229,218,0,272],
[280,282,210,230,299,245,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,276,262,260,236,239,225],
[307,0,273,255,267,220,271,226],
[275,278,0,278,248,324,273,247],
[289,296,273,0,283,298,288,249],
[291,284,303,268,0,299,295,293],
[315,331,227,253,252,0,268,244],
[312,280,278,263,256,283,0,244],
[326,325,304,302,258,307,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,276,274,269,293,290,260],
[288,0,279,280,276,288,287,266],
[275,272,0,281,279,295,315,279],
[277,271,270,0,282,295,295,268],
[282,275,272,269,0,288,286,273],
[258,263,256,256,263,0,296,254],
[261,264,236,256,265,255,0,247],
[291,285,272,283,278,297,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,279,282,277,262,270],
[277,0,279,291,268,260,274,264],
[278,272,0,280,270,263,269,284],
[272,260,271,0,251,269,261,257],
[269,283,281,300,0,275,285,280],
[274,291,288,282,276,0,277,278],
[289,277,282,290,266,274,0,276],
[281,287,267,294,271,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,268,273,280,281,276,275],
[281,0,296,280,290,271,281,261],
[283,255,0,287,285,273,282,268],
[278,271,264,0,272,269,258,277],
[271,261,266,279,0,265,269,270],
[270,280,278,282,286,0,280,274],
[275,270,269,293,282,271,0,279],
[276,290,283,274,281,277,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,295,259,257,257,279,249],
[246,0,295,270,264,280,250,248],
[256,256,0,225,235,230,224,210],
[292,281,326,0,260,291,282,259],
[294,287,316,291,0,296,270,277],
[294,271,321,260,255,0,307,255],
[272,301,327,269,281,244,0,258],
[302,303,341,292,274,296,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,289,298,282,267,268],
[273,0,278,274,287,286,271,300],
[282,273,0,285,293,301,286,277],
[262,277,266,0,262,290,262,266],
[253,264,258,289,0,291,259,262],
[269,265,250,261,260,0,255,252],
[284,280,265,289,292,296,0,293],
[283,251,274,285,289,299,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,269,240,264,275,299],
[285,0,235,265,283,243,274,270],
[274,316,0,284,285,261,280,292],
[282,286,267,0,236,244,264,267],
[311,268,266,315,0,270,266,286],
[287,308,290,307,281,0,262,299],
[276,277,271,287,285,289,0,300],
[252,281,259,284,265,252,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,250,284,277,243,264],
[282,0,290,273,273,284,268,264],
[294,261,0,278,301,299,275,279],
[301,278,273,0,299,308,284,269],
[267,278,250,252,0,273,266,255],
[274,267,252,243,278,0,244,261],
[308,283,276,267,285,307,0,283],
[287,287,272,282,296,290,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,299,291,301,303,292,280],
[290,0,299,286,298,292,283,272],
[252,252,0,256,247,247,266,251],
[260,265,295,0,280,281,268,268],
[250,253,304,271,0,277,277,253],
[248,259,304,270,274,0,282,266],
[259,268,285,283,274,269,0,259],
[271,279,300,283,298,285,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,261,263,273,277,270,303],
[263,0,263,278,275,309,283,293],
[290,288,0,287,276,293,264,308],
[288,273,264,0,272,285,283,330],
[278,276,275,279,0,277,290,303],
[274,242,258,266,274,0,260,291],
[281,268,287,268,261,291,0,322],
[248,258,243,221,248,260,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,296,286,253,307,330,303],
[222,0,204,234,238,211,234,242],
[255,347,0,225,233,230,288,275],
[265,317,326,0,283,236,269,275],
[298,313,318,268,0,302,259,267],
[244,340,321,315,249,0,292,288],
[221,317,263,282,292,259,0,320],
[248,309,276,276,284,263,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,265,270,276,282,299],
[278,0,283,295,263,248,302,286],
[260,268,0,293,261,263,277,305],
[286,256,258,0,277,282,288,297],
[281,288,290,274,0,285,300,316],
[275,303,288,269,266,0,296,305],
[269,249,274,263,251,255,0,269],
[252,265,246,254,235,246,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,278,237,305,253,249],
[292,0,280,271,260,304,296,249],
[280,271,0,275,264,293,247,268],
[273,280,276,0,253,286,243,282],
[314,291,287,298,0,288,259,298],
[246,247,258,265,263,0,261,226],
[298,255,304,308,292,290,0,265],
[302,302,283,269,253,325,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,249,257,282,256,260,273],
[280,0,262,280,267,261,258,266],
[302,289,0,300,275,284,283,287],
[294,271,251,0,279,261,279,280],
[269,284,276,272,0,279,258,275],
[295,290,267,290,272,0,280,262],
[291,293,268,272,293,271,0,273],
[278,285,264,271,276,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,302,262,259,281,281,268],
[284,0,287,254,257,277,317,264],
[249,264,0,266,278,285,326,255],
[289,297,285,0,269,214,283,226],
[292,294,273,282,0,280,303,227],
[270,274,266,337,271,0,336,280],
[270,234,225,268,248,215,0,226],
[283,287,296,325,324,271,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,241,271,312,287,284,288],
[287,0,250,290,280,266,256,287],
[310,301,0,291,282,290,270,268],
[280,261,260,0,268,270,279,270],
[239,271,269,283,0,268,265,274],
[264,285,261,281,283,0,279,268],
[267,295,281,272,286,272,0,287],
[263,264,283,281,277,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,265,255,283,252,281,258],
[245,0,250,239,269,257,275,242],
[286,301,0,262,283,270,278,279],
[296,312,289,0,269,282,300,293],
[268,282,268,282,0,279,286,223],
[299,294,281,269,272,0,285,265],
[270,276,273,251,265,266,0,263],
[293,309,272,258,328,286,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,259,266,271,315,227,268],
[283,0,298,288,265,296,272,275],
[292,253,0,278,259,339,271,249],
[285,263,273,0,249,337,262,260],
[280,286,292,302,0,304,260,293],
[236,255,212,214,247,0,268,268],
[324,279,280,289,291,283,0,246],
[283,276,302,291,258,283,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,309,284,286,265,286,280],
[287,0,309,264,267,266,295,265],
[242,242,0,238,247,237,245,276],
[267,287,313,0,288,265,259,255],
[265,284,304,263,0,262,262,258],
[286,285,314,286,289,0,276,274],
[265,256,306,292,289,275,0,240],
[271,286,275,296,293,277,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,252,276,257,285,249,269],
[287,0,264,294,272,283,269,269],
[299,287,0,291,278,291,282,275],
[275,257,260,0,252,272,266,253],
[294,279,273,299,0,291,276,284],
[266,268,260,279,260,0,264,262],
[302,282,269,285,275,287,0,279],
[282,282,276,298,267,289,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,279,255,270,287,269],
[275,0,265,275,267,266,288,280],
[275,286,0,277,287,280,295,285],
[272,276,274,0,268,261,287,296],
[296,284,264,283,0,274,288,276],
[281,285,271,290,277,0,275,268],
[264,263,256,264,263,276,0,277],
[282,271,266,255,275,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,303,261,290,285,287,290],
[259,0,273,249,276,265,278,274],
[248,278,0,278,282,257,254,268],
[290,302,273,0,302,277,287,292],
[261,275,269,249,0,261,265,275],
[266,286,294,274,290,0,269,281],
[264,273,297,264,286,282,0,287],
[261,277,283,259,276,270,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,307,284,282,287,293,283],
[293,0,283,263,279,289,280,284],
[244,268,0,250,259,267,279,271],
[267,288,301,0,276,258,291,276],
[269,272,292,275,0,273,282,280],
[264,262,284,293,278,0,281,280],
[258,271,272,260,269,270,0,264],
[268,267,280,275,271,271,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,277,287,272,280,280,289],
[265,0,270,256,269,278,267,277],
[274,281,0,269,278,286,284,288],
[264,295,282,0,294,272,273,280],
[279,282,273,257,0,262,258,284],
[271,273,265,279,289,0,287,284],
[271,284,267,278,293,264,0,268],
[262,274,263,271,267,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,351,150,300,300,397,299],
[202,0,349,202,352,250,247,250],
[200,202,0,152,351,201,399,151],
[401,349,399,0,352,250,397,251],
[251,199,200,199,0,151,297,99],
[251,301,350,301,400,0,398,149],
[154,304,152,154,254,153,0,101],
[252,301,400,300,452,402,450,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,294,286,297,264,282],
[280,0,268,287,277,267,275,273],
[264,283,0,251,263,278,278,259],
[257,264,300,0,279,280,281,278],
[265,274,288,272,0,280,283,277],
[254,284,273,271,271,0,270,266],
[287,276,273,270,268,281,0,278],
[269,278,292,273,274,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,282,291,283,303,293,272],
[255,0,271,273,257,297,270,266],
[269,280,0,294,271,309,282,278],
[260,278,257,0,275,294,279,275],
[268,294,280,276,0,287,299,291],
[248,254,242,257,264,0,267,258],
[258,281,269,272,252,284,0,267],
[279,285,273,276,260,293,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,302,273,289,276,283,289],
[256,0,266,246,251,248,257,268],
[249,285,0,270,269,260,279,286],
[278,305,281,0,280,266,278,277],
[262,300,282,271,0,261,279,280],
[275,303,291,285,290,0,301,306],
[268,294,272,273,272,250,0,283],
[262,283,265,274,271,245,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,274,333,278,281,308,267],
[244,0,308,327,283,306,321,282],
[277,243,0,304,278,307,309,301],
[218,224,247,0,239,273,279,252],
[273,268,273,312,0,315,298,291],
[270,245,244,278,236,0,310,322],
[243,230,242,272,253,241,0,243],
[284,269,250,299,260,229,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,283,288,287,286,275,296],
[268,0,271,269,277,261,270,281],
[268,280,0,273,264,275,290,293],
[263,282,278,0,282,276,273,291],
[264,274,287,269,0,254,262,285],
[265,290,276,275,297,0,288,295],
[276,281,261,278,289,263,0,293],
[255,270,258,260,266,256,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,243,273,256,262,271,260],
[297,0,281,280,293,295,274,281],
[308,270,0,277,294,307,296,288],
[278,271,274,0,265,281,292,267],
[295,258,257,286,0,287,278,277],
[289,256,244,270,264,0,279,251],
[280,277,255,259,273,272,0,276],
[291,270,263,284,274,300,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,280,284,290,279,292,274],
[256,0,275,263,283,257,267,286],
[271,276,0,246,267,259,284,255],
[267,288,305,0,274,287,295,258],
[261,268,284,277,0,272,282,270],
[272,294,292,264,279,0,276,287],
[259,284,267,256,269,275,0,261],
[277,265,296,293,281,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,254,273,267,249,276,263],
[296,0,274,294,283,284,297,281],
[297,277,0,294,290,263,285,283],
[278,257,257,0,282,277,286,284],
[284,268,261,269,0,279,298,296],
[302,267,288,274,272,0,309,299],
[275,254,266,265,253,242,0,272],
[288,270,268,267,255,252,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,268,281,260,278,254,254],
[288,0,280,279,258,295,267,280],
[283,271,0,288,272,305,262,276],
[270,272,263,0,259,289,259,272],
[291,293,279,292,0,303,293,274],
[273,256,246,262,248,0,246,241],
[297,284,289,292,258,305,0,282],
[297,271,275,279,277,310,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,310,277,250,253,264,213],
[342,0,330,296,265,299,306,219],
[241,221,0,233,200,212,202,175],
[274,255,318,0,257,222,301,268],
[301,286,351,294,0,287,252,230],
[298,252,339,329,264,0,308,286],
[287,245,349,250,299,243,0,241],
[338,332,376,283,321,265,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,273,270,312,270,280,264],
[251,0,235,225,259,206,237,232],
[278,316,0,297,305,260,269,278],
[281,326,254,0,320,279,268,258],
[239,292,246,231,0,244,242,266],
[281,345,291,272,307,0,281,309],
[271,314,282,283,309,270,0,276],
[287,319,273,293,285,242,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,298,295,297,281,272,286],
[267,0,274,288,302,269,269,270],
[253,277,0,261,290,276,286,271],
[256,263,290,0,288,271,278,267],
[254,249,261,263,0,267,258,254],
[270,282,275,280,284,0,251,268],
[279,282,265,273,293,300,0,259],
[265,281,280,284,297,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,296,315,303,266,267,296],
[221,0,249,326,275,286,269,298],
[255,302,0,329,234,218,228,271],
[236,225,222,0,216,215,229,218],
[248,276,317,335,0,251,333,289],
[285,265,333,336,300,0,287,321],
[284,282,323,322,218,264,0,198],
[255,253,280,333,262,230,353,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,284,279,311,301,286,293],
[281,0,250,292,287,267,299,280],
[267,301,0,303,281,283,291,297],
[272,259,248,0,279,293,274,243],
[240,264,270,272,0,295,296,260],
[250,284,268,258,256,0,300,277],
[265,252,260,277,255,251,0,280],
[258,271,254,308,291,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,278,249,263,299,248,228],
[306,0,289,254,293,330,289,293],
[273,262,0,259,286,316,288,259],
[302,297,292,0,287,342,265,282],
[288,258,265,264,0,331,286,246],
[252,221,235,209,220,0,251,227],
[303,262,263,286,265,300,0,250],
[323,258,292,269,305,324,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,263,279,264,266,277,280],
[254,0,235,250,272,230,247,259],
[288,316,0,297,302,269,279,297],
[272,301,254,0,285,276,282,294],
[287,279,249,266,0,247,238,259],
[285,321,282,275,304,0,272,249],
[274,304,272,269,313,279,0,288],
[271,292,254,257,292,302,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,286,296,287,265,294,269],
[259,0,255,301,285,266,299,261],
[265,296,0,276,289,284,290,288],
[255,250,275,0,266,261,297,260],
[264,266,262,285,0,271,285,258],
[286,285,267,290,280,0,287,284],
[257,252,261,254,266,264,0,264],
[282,290,263,291,293,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,247,249,253,241,247],
[282,0,254,263,270,257,244,242],
[287,297,0,262,260,276,250,262],
[304,288,289,0,284,282,280,272],
[302,281,291,267,0,284,276,267],
[298,294,275,269,267,0,265,262],
[310,307,301,271,275,286,0,282],
[304,309,289,279,284,289,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,260,280,256,269,278,302],
[285,0,264,286,272,281,281,283],
[291,287,0,294,278,262,266,286],
[271,265,257,0,261,262,263,290],
[295,279,273,290,0,272,271,289],
[282,270,289,289,279,0,262,282],
[273,270,285,288,280,289,0,293],
[249,268,265,261,262,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,279,283,258,274,287,252],
[303,0,303,317,268,303,288,294],
[272,248,0,264,263,271,261,244],
[268,234,287,0,260,279,279,241],
[293,283,288,291,0,294,294,274],
[277,248,280,272,257,0,248,266],
[264,263,290,272,257,303,0,291],
[299,257,307,310,277,285,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,262,271,290,294,277],
[263,0,261,257,266,270,266,270],
[276,290,0,274,279,267,288,283],
[289,294,277,0,275,283,295,280],
[280,285,272,276,0,308,293,287],
[261,281,284,268,243,0,289,276],
[257,285,263,256,258,262,0,272],
[274,281,268,271,264,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,366,276,279,275,298,339],
[253,0,344,274,254,277,298,338],
[185,207,0,227,231,205,212,273],
[275,277,324,0,277,274,185,366],
[272,297,320,274,0,319,248,384],
[276,274,346,277,232,0,253,365],
[253,253,339,366,303,298,0,361],
[212,213,278,185,167,186,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,264,222,250,266,261,276],
[288,0,235,245,263,232,258,252],
[287,316,0,278,296,239,283,294],
[329,306,273,0,299,267,305,296],
[301,288,255,252,0,280,283,290],
[285,319,312,284,271,0,293,290],
[290,293,268,246,268,258,0,300],
[275,299,257,255,261,261,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,288,279,280,273,276],
[270,0,262,281,274,280,279,256],
[275,289,0,280,281,283,292,281],
[263,270,271,0,273,286,256,256],
[272,277,270,278,0,288,283,254],
[271,271,268,265,263,0,281,274],
[278,272,259,295,268,270,0,269],
[275,295,270,295,297,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,274,287,265,279,281],
[273,0,299,296,298,283,280,291],
[269,252,0,277,282,266,283,281],
[277,255,274,0,267,250,270,267],
[264,253,269,284,0,248,260,264],
[286,268,285,301,303,0,285,270],
[272,271,268,281,291,266,0,263],
[270,260,270,284,287,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,442,331,110,220,110,331,330],
[109,0,0,0,110,0,110,220],
[220,551,0,330,440,221,440,330],
[441,551,221,0,441,332,551,441],
[331,441,111,110,0,221,551,330],
[441,551,330,219,330,0,441,330],
[220,441,111,0,0,110,0,220],
[221,331,221,110,221,221,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,280,308,287,280,310],
[276,0,250,225,281,257,260,294],
[276,301,0,252,298,268,255,251],
[271,326,299,0,297,289,298,312],
[243,270,253,254,0,254,257,279],
[264,294,283,262,297,0,311,321],
[271,291,296,253,294,240,0,294],
[241,257,300,239,272,230,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,242,244,301,266,284,277],
[286,0,265,270,285,290,272,283],
[309,286,0,251,312,300,319,291],
[307,281,300,0,319,313,316,271],
[250,266,239,232,0,258,287,250],
[285,261,251,238,293,0,291,263],
[267,279,232,235,264,260,0,262],
[274,268,260,280,301,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,224,225,216,219,247,267],
[350,0,254,259,297,268,289,293],
[327,297,0,296,301,262,288,315],
[326,292,255,0,283,294,290,291],
[335,254,250,268,0,274,260,282],
[332,283,289,257,277,0,291,288],
[304,262,263,261,291,260,0,299],
[284,258,236,260,269,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,272,254,265,294,268,257],
[322,0,311,302,276,286,279,271],
[279,240,0,247,274,264,246,257],
[297,249,304,0,284,258,247,260],
[286,275,277,267,0,271,259,270],
[257,265,287,293,280,0,251,265],
[283,272,305,304,292,300,0,301],
[294,280,294,291,281,286,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,247,285,295,295,301,298],
[276,0,265,245,239,267,304,289],
[304,286,0,307,288,281,281,256],
[266,306,244,0,295,282,272,309],
[256,312,263,256,0,301,273,288],
[256,284,270,269,250,0,275,302],
[250,247,270,279,278,276,0,270],
[253,262,295,242,263,249,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,330,276,496,331,276],
[275,0,274,274,330,329,330,329],
[277,277,0,331,277,332,221,221],
[221,277,220,0,333,277,166,221],
[275,221,274,218,0,495,330,330],
[55,222,219,274,56,0,274,55],
[220,221,330,385,221,277,0,221],
[275,222,330,330,221,496,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,286,272,310,327,343,285],
[217,0,283,285,269,286,267,271],
[265,268,0,279,309,272,286,298],
[279,266,272,0,266,320,301,248],
[241,282,242,285,0,314,293,308],
[224,265,279,231,237,0,276,257],
[208,284,265,250,258,275,0,296],
[266,280,253,303,243,294,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,298,280,279,311,263,275],
[271,0,301,294,270,308,292,302],
[253,250,0,269,257,279,262,262],
[271,257,282,0,259,300,278,296],
[272,281,294,292,0,309,296,284],
[240,243,272,251,242,0,242,258],
[288,259,289,273,255,309,0,285],
[276,249,289,255,267,293,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,253,257,271,272,243,269],
[269,0,255,239,241,283,276,257],
[298,296,0,279,273,299,266,295],
[294,312,272,0,282,328,257,300],
[280,310,278,269,0,292,240,307],
[279,268,252,223,259,0,259,267],
[308,275,285,294,311,292,0,294],
[282,294,256,251,244,284,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,269,266,269,297,283],
[266,0,261,248,250,265,265,274],
[274,290,0,262,278,297,282,291],
[282,303,289,0,266,295,293,284],
[285,301,273,285,0,285,290,302],
[282,286,254,256,266,0,285,277],
[254,286,269,258,261,266,0,275],
[268,277,260,267,249,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,298,272,292,284,316,310],
[263,0,286,260,277,265,275,283],
[253,265,0,248,266,248,292,274],
[279,291,303,0,299,274,303,298],
[259,274,285,252,0,258,288,293],
[267,286,303,277,293,0,296,302],
[235,276,259,248,263,255,0,278],
[241,268,277,253,258,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,277,295,266,263,286,267],
[296,0,292,328,298,288,297,274],
[274,259,0,285,275,270,288,261],
[256,223,266,0,246,254,267,245],
[285,253,276,305,0,263,267,253],
[288,263,281,297,288,0,324,284],
[265,254,263,284,284,227,0,239],
[284,277,290,306,298,267,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,280,270,260,255,292,283],
[262,0,264,265,250,281,263,244],
[271,287,0,266,272,252,278,283],
[281,286,285,0,253,268,266,264],
[291,301,279,298,0,275,314,297],
[296,270,299,283,276,0,332,277],
[259,288,273,285,237,219,0,266],
[268,307,268,287,254,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,331,209,264,262,279],
[252,0,311,303,189,249,277,261],
[279,240,0,298,224,279,257,246],
[220,248,253,0,217,252,244,219],
[342,362,327,334,0,314,353,258],
[287,302,272,299,237,0,264,279],
[289,274,294,307,198,287,0,269],
[272,290,305,332,293,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,270,286,281,268,272],
[268,0,292,294,291,265,307,255],
[272,259,0,290,287,301,297,289],
[281,257,261,0,279,277,273,261],
[265,260,264,272,0,293,285,267],
[270,286,250,274,258,0,281,244],
[283,244,254,278,266,270,0,283],
[279,296,262,290,284,307,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,267,279,272,279,280],
[267,0,256,287,285,284,259,286],
[261,295,0,274,283,283,266,285],
[284,264,277,0,262,259,269,298],
[272,266,268,289,0,278,261,264],
[279,267,268,292,273,0,265,283],
[272,292,285,282,290,286,0,287],
[271,265,266,253,287,268,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,273,292,288,267,262,271],
[291,0,277,281,299,267,283,288],
[278,274,0,281,294,264,283,282],
[259,270,270,0,270,261,276,267],
[263,252,257,281,0,256,266,249],
[284,284,287,290,295,0,266,282],
[289,268,268,275,285,285,0,264],
[280,263,269,284,302,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,298,294,274,290,292],
[265,0,282,278,288,284,272,279],
[265,269,0,272,278,271,269,281],
[253,273,279,0,303,279,276,267],
[257,263,273,248,0,260,271,270],
[277,267,280,272,291,0,284,286],
[261,279,282,275,280,267,0,268],
[259,272,270,284,281,265,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,283,277,274,258,265,267],
[248,0,239,248,248,253,253,247],
[268,312,0,285,269,276,289,275],
[274,303,266,0,256,275,251,272],
[277,303,282,295,0,265,267,281],
[293,298,275,276,286,0,270,280],
[286,298,262,300,284,281,0,277],
[284,304,276,279,270,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,273,279,293,283,280,275],
[272,0,275,281,315,275,274,275],
[278,276,0,297,285,275,305,287],
[272,270,254,0,271,259,269,277],
[258,236,266,280,0,243,269,279],
[268,276,276,292,308,0,292,271],
[271,277,246,282,282,259,0,258],
[276,276,264,274,272,280,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,258,244,280,258,260,264],
[292,0,294,275,289,283,281,276],
[293,257,0,271,285,252,270,258],
[307,276,280,0,296,271,293,280],
[271,262,266,255,0,256,273,259],
[293,268,299,280,295,0,280,268],
[291,270,281,258,278,271,0,267],
[287,275,293,271,292,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,263,290,288,290,271],
[281,0,269,263,280,274,291,259],
[284,282,0,263,275,288,289,280],
[288,288,288,0,300,266,295,275],
[261,271,276,251,0,270,303,268],
[263,277,263,285,281,0,289,269],
[261,260,262,256,248,262,0,250],
[280,292,271,276,283,282,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,350,372,287,288,376,289],
[307,0,308,328,284,263,353,330],
[201,243,0,265,265,246,310,286],
[179,223,286,0,199,290,287,222],
[264,267,286,352,0,266,354,332],
[263,288,305,261,285,0,376,242],
[175,198,241,264,197,175,0,266],
[262,221,265,329,219,309,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,271,328,280,285,276,272],
[214,0,248,287,241,223,250,261],
[280,303,0,311,279,282,286,268],
[223,264,240,0,268,242,253,226],
[271,310,272,283,0,264,294,308],
[266,328,269,309,287,0,316,280],
[275,301,265,298,257,235,0,275],
[279,290,283,325,243,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,270,292,296,272,265,316],
[229,0,253,246,268,248,236,291],
[281,298,0,264,304,295,259,306],
[259,305,287,0,297,293,283,328],
[255,283,247,254,0,265,227,293],
[279,303,256,258,286,0,271,310],
[286,315,292,268,324,280,0,309],
[235,260,245,223,258,241,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,259,312,270,279,272,286],
[267,0,237,271,256,264,255,275],
[292,314,0,284,270,267,284,307],
[239,280,267,0,281,257,267,267],
[281,295,281,270,0,249,271,293],
[272,287,284,294,302,0,277,294],
[279,296,267,284,280,274,0,294],
[265,276,244,284,258,257,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,262,262,271,287,281,271],
[295,0,270,267,263,275,258,256],
[289,281,0,281,271,269,276,268],
[289,284,270,0,270,287,276,283],
[280,288,280,281,0,291,286,269],
[264,276,282,264,260,0,271,254],
[270,293,275,275,265,280,0,273],
[280,295,283,268,282,297,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,261,278,272,281,254],
[281,0,283,285,291,297,265,271],
[276,268,0,274,277,285,279,268],
[290,266,277,0,275,288,298,277],
[273,260,274,276,0,285,278,254],
[279,254,266,263,266,0,283,254],
[270,286,272,253,273,268,0,267],
[297,280,283,274,297,297,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,290,279,284,264,260,264],
[287,0,291,283,270,294,264,251],
[261,260,0,247,267,269,245,239],
[272,268,304,0,286,280,266,265],
[267,281,284,265,0,271,259,251],
[287,257,282,271,280,0,259,277],
[291,287,306,285,292,292,0,256],
[287,300,312,286,300,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,276,270,267,276,274],
[268,0,271,290,255,262,275,276],
[276,280,0,264,263,263,265,279],
[275,261,287,0,281,259,260,262],
[281,296,288,270,0,273,253,260],
[284,289,288,292,278,0,273,267],
[275,276,286,291,298,278,0,268],
[277,275,272,289,291,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,317,353,268,314,334,373],
[230,0,319,301,252,319,266,263],
[234,232,0,341,288,284,250,271],
[198,250,210,0,282,299,298,352],
[283,299,263,269,0,299,285,265],
[237,232,267,252,252,0,283,218],
[217,285,301,253,266,268,0,269],
[178,288,280,199,286,333,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,323,241,331,285,310,266],
[273,0,283,255,264,252,284,245],
[228,268,0,221,251,274,270,249],
[310,296,330,0,319,302,311,274],
[220,287,300,232,0,271,287,251],
[266,299,277,249,280,0,293,277],
[241,267,281,240,264,258,0,240],
[285,306,302,277,300,274,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,281,307,301,293,330],
[282,0,254,253,292,279,249,298],
[288,297,0,245,318,278,294,334],
[270,298,306,0,318,298,250,311],
[244,259,233,233,0,278,257,304],
[250,272,273,253,273,0,275,303],
[258,302,257,301,294,276,0,293],
[221,253,217,240,247,248,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,296,261,266,279,268,299],
[250,0,280,270,250,266,255,251],
[255,271,0,258,286,259,247,259],
[290,281,293,0,266,276,283,279],
[285,301,265,285,0,287,262,285],
[272,285,292,275,264,0,251,279],
[283,296,304,268,289,300,0,297],
[252,300,292,272,266,272,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,259,264,250,257,269,265],
[273,0,266,264,260,284,273,278],
[292,285,0,279,271,290,278,295],
[287,287,272,0,262,275,281,276],
[301,291,280,289,0,324,273,297],
[294,267,261,276,227,0,278,289],
[282,278,273,270,278,273,0,299],
[286,273,256,275,254,262,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,299,273,259,258,259,260],
[300,0,299,286,257,283,293,307],
[252,252,0,243,250,240,266,264],
[278,265,308,0,292,289,303,304],
[292,294,301,259,0,277,284,311],
[293,268,311,262,274,0,291,310],
[292,258,285,248,267,260,0,278],
[291,244,287,247,240,241,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,274,268,278,278,281],
[274,0,284,273,282,283,281,290],
[270,267,0,261,271,274,260,260],
[277,278,290,0,265,280,270,282],
[283,269,280,286,0,295,269,279],
[273,268,277,271,256,0,261,281],
[273,270,291,281,282,290,0,291],
[270,261,291,269,272,270,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,291,292,302,268,297,286],
[250,0,267,280,274,257,267,279],
[260,284,0,281,268,271,295,274],
[259,271,270,0,275,268,288,276],
[249,277,283,276,0,276,272,287],
[283,294,280,283,275,0,303,289],
[254,284,256,263,279,248,0,263],
[265,272,277,275,264,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,290,289,291,278,284],
[260,0,280,274,271,276,269,242],
[283,271,0,286,269,281,297,290],
[261,277,265,0,265,285,283,269],
[262,280,282,286,0,299,283,285],
[260,275,270,266,252,0,258,247],
[273,282,254,268,268,293,0,291],
[267,309,261,282,266,304,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,298,294,322,308,303],
[286,0,284,294,272,294,298,329],
[275,267,0,286,275,289,317,276],
[253,257,265,0,254,289,295,283],
[257,279,276,297,0,275,292,309],
[229,257,262,262,276,0,286,255],
[243,253,234,256,259,265,0,278],
[248,222,275,268,242,296,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,235,274,267,249,278,260],
[275,0,294,297,287,278,280,269],
[316,257,0,297,282,273,279,264],
[277,254,254,0,252,254,251,260],
[284,264,269,299,0,278,289,275],
[302,273,278,297,273,0,253,287],
[273,271,272,300,262,298,0,269],
[291,282,287,291,276,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,273,302,277,279,283],
[271,0,288,279,292,269,281,276],
[273,263,0,281,284,275,267,275],
[278,272,270,0,291,279,276,264],
[249,259,267,260,0,262,260,254],
[274,282,276,272,289,0,281,269],
[272,270,284,275,291,270,0,279],
[268,275,276,287,297,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,270,277,291,255,281,252],
[270,0,272,271,284,265,264,275],
[281,279,0,281,285,266,282,292],
[274,280,270,0,297,275,266,274],
[260,267,266,254,0,281,271,264],
[296,286,285,276,270,0,287,264],
[270,287,269,285,280,264,0,272],
[299,276,259,277,287,287,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,291,272,275,271,259],
[273,0,267,276,250,285,258,261],
[282,284,0,295,281,292,272,276],
[260,275,256,0,245,271,252,270],
[279,301,270,306,0,302,278,283],
[276,266,259,280,249,0,270,256],
[280,293,279,299,273,281,0,279],
[292,290,275,281,268,295,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,272,264,282,274,272,283],
[304,0,275,265,275,290,277,294],
[279,276,0,269,301,278,292,283],
[287,286,282,0,295,277,259,257],
[269,276,250,256,0,277,272,270],
[277,261,273,274,274,0,275,260],
[279,274,259,292,279,276,0,280],
[268,257,268,294,281,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,278,281,272,252,279],
[286,0,267,284,254,271,261,268],
[284,284,0,284,275,300,259,291],
[273,267,267,0,261,282,266,284],
[270,297,276,290,0,289,276,276],
[279,280,251,269,262,0,243,274],
[299,290,292,285,275,308,0,289],
[272,283,260,267,275,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,317,270,282,288,258,278],
[269,0,288,269,260,264,277,275],
[234,263,0,262,269,272,252,266],
[281,282,289,0,285,257,278,269],
[269,291,282,266,0,290,276,285],
[263,287,279,294,261,0,306,273],
[293,274,299,273,275,245,0,268],
[273,276,285,282,266,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,288,270,285,284,280],
[277,0,271,286,269,280,289,277],
[274,280,0,295,276,286,276,275],
[263,265,256,0,274,278,268,259],
[281,282,275,277,0,282,273,281],
[266,271,265,273,269,0,267,256],
[267,262,275,283,278,284,0,275],
[271,274,276,292,270,295,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,254,261,273,264,271,270],
[277,0,284,278,272,286,272,279],
[297,267,0,280,271,294,293,273],
[290,273,271,0,272,285,282,288],
[278,279,280,279,0,274,280,263],
[287,265,257,266,277,0,270,273],
[280,279,258,269,271,281,0,273],
[281,272,278,263,288,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,268,253,235,233,232],
[297,0,264,271,254,262,255,242],
[303,287,0,255,242,261,287,278],
[283,280,296,0,279,232,261,266],
[298,297,309,272,0,264,274,272],
[316,289,290,319,287,0,256,289],
[318,296,264,290,277,295,0,270],
[319,309,273,285,279,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,301,300,252,295,241,232],
[309,0,356,285,270,317,276,239],
[250,195,0,213,220,252,211,229],
[251,266,338,0,234,268,208,258],
[299,281,331,317,0,337,259,302],
[256,234,299,283,214,0,234,233],
[310,275,340,343,292,317,0,279],
[319,312,322,293,249,318,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,218,73,146,258,146,146],
[440,0,294,147,219,330,220,221],
[333,257,0,184,222,331,184,257],
[478,404,367,0,328,328,223,290],
[405,332,329,223,0,257,296,221],
[293,221,220,223,294,0,295,259],
[405,331,367,328,255,256,0,256],
[405,330,294,261,330,292,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,219,289,233,246,277,259],
[269,0,231,240,227,216,279,246],
[332,320,0,290,268,291,282,279],
[262,311,261,0,245,253,286,267],
[318,324,283,306,0,255,282,288],
[305,335,260,298,296,0,305,307],
[274,272,269,265,269,246,0,289],
[292,305,272,284,263,244,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,410,367,299,322,275,298],
[206,0,319,297,230,251,248,278],
[141,232,0,278,210,208,230,164],
[184,254,273,0,184,252,155,142],
[252,321,341,367,0,297,318,299],
[229,300,343,299,254,0,205,185],
[276,303,321,396,233,346,0,235],
[253,273,387,409,252,366,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,247,253,266,260,251,260],
[287,0,253,256,279,243,264,260],
[304,298,0,279,294,274,274,267],
[298,295,272,0,301,284,304,277],
[285,272,257,250,0,242,269,262],
[291,308,277,267,309,0,284,275],
[300,287,277,247,282,267,0,266],
[291,291,284,274,289,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,289,274,293,281,270],
[259,0,242,268,267,278,253,275],
[271,309,0,286,276,280,285,274],
[262,283,265,0,274,283,272,276],
[277,284,275,277,0,278,270,272],
[258,273,271,268,273,0,274,270],
[270,298,266,279,281,277,0,278],
[281,276,277,275,279,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,276,281,276,287,273],
[268,0,248,271,258,261,271,262],
[277,303,0,282,268,259,279,257],
[275,280,269,0,278,276,273,260],
[270,293,283,273,0,277,270,245],
[275,290,292,275,274,0,290,277],
[264,280,272,278,281,261,0,273],
[278,289,294,291,306,274,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,286,304,291,303,278],
[271,0,289,272,281,274,301,275],
[281,262,0,277,292,284,298,259],
[265,279,274,0,289,275,302,266],
[247,270,259,262,0,268,297,255],
[260,277,267,276,283,0,293,264],
[248,250,253,249,254,258,0,243],
[273,276,292,285,296,287,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,310,284,294,276,268,294],
[241,0,267,257,289,264,252,262],
[241,284,0,231,250,266,263,245],
[267,294,320,0,263,291,286,262],
[257,262,301,288,0,267,291,287],
[275,287,285,260,284,0,304,284],
[283,299,288,265,260,247,0,279],
[257,289,306,289,264,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,295,297,282,282,275,305],
[258,0,267,270,253,270,263,260],
[256,284,0,280,283,264,270,281],
[254,281,271,0,272,285,248,274],
[269,298,268,279,0,291,287,295],
[269,281,287,266,260,0,263,286],
[276,288,281,303,264,288,0,288],
[246,291,270,277,256,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,280,261,268,280,262],
[285,0,260,269,264,265,279,282],
[287,291,0,301,252,280,283,273],
[271,282,250,0,271,253,272,276],
[290,287,299,280,0,271,311,262],
[283,286,271,298,280,0,292,271],
[271,272,268,279,240,259,0,265],
[289,269,278,275,289,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,297,290,283,275,287,280],
[279,0,276,271,269,272,253,289],
[254,275,0,271,291,277,253,265],
[261,280,280,0,266,267,264,280],
[268,282,260,285,0,249,241,256],
[276,279,274,284,302,0,281,272],
[264,298,298,287,310,270,0,284],
[271,262,286,271,295,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,251,257,227,287,259],
[281,0,277,282,265,229,266,266],
[281,274,0,286,250,239,261,259],
[300,269,265,0,242,250,265,296],
[294,286,301,309,0,286,274,293],
[324,322,312,301,265,0,287,296],
[264,285,290,286,277,264,0,268],
[292,285,292,255,258,255,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,269,270,293,286,267,278],
[272,0,255,228,286,244,250,255],
[282,296,0,255,284,273,280,258],
[281,323,296,0,322,299,241,262],
[258,265,267,229,0,252,277,238],
[265,307,278,252,299,0,282,283],
[284,301,271,310,274,269,0,291],
[273,296,293,289,313,268,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,283,279,281,286,276],
[274,0,298,286,303,282,288,283],
[279,253,0,286,284,286,290,283],
[268,265,265,0,278,274,273,281],
[272,248,267,273,0,274,275,269],
[270,269,265,277,277,0,277,269],
[265,263,261,278,276,274,0,272],
[275,268,268,270,282,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,273,273,222,256,229,244],
[304,0,296,307,293,269,256,260],
[278,255,0,292,260,276,250,307],
[278,244,259,0,233,254,235,253],
[329,258,291,318,0,259,289,289],
[295,282,275,297,292,0,254,261],
[322,295,301,316,262,297,0,277],
[307,291,244,298,262,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,275,262,278,273,263],
[260,0,272,259,278,255,267,260],
[285,279,0,303,272,271,255,264],
[276,292,248,0,291,275,279,278],
[289,273,279,260,0,286,264,285],
[273,296,280,276,265,0,295,268],
[278,284,296,272,287,256,0,286],
[288,291,287,273,266,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,245,230,278,270,218,248],
[290,0,290,295,280,286,238,278],
[306,261,0,298,283,310,278,286],
[321,256,253,0,307,294,277,284],
[273,271,268,244,0,289,250,276],
[281,265,241,257,262,0,250,217],
[333,313,273,274,301,301,0,275],
[303,273,265,267,275,334,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,279,314,317,281,267,292],
[253,0,258,288,253,256,271,305],
[272,293,0,301,310,268,291,293],
[237,263,250,0,279,258,251,282],
[234,298,241,272,0,271,267,284],
[270,295,283,293,280,0,296,317],
[284,280,260,300,284,255,0,258],
[259,246,258,269,267,234,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,261,283,260,299,300],
[281,0,266,281,293,272,289,289],
[279,285,0,271,296,282,299,288],
[290,270,280,0,291,261,295,283],
[268,258,255,260,0,254,282,277],
[291,279,269,290,297,0,288,290],
[252,262,252,256,269,263,0,267],
[251,262,263,268,274,261,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,315,316,279,241,305,270],
[276,0,355,309,296,287,300,231],
[236,196,0,259,284,249,252,233],
[235,242,292,0,296,271,259,241],
[272,255,267,255,0,252,259,243],
[310,264,302,280,299,0,301,273],
[246,251,299,292,292,250,0,276],
[281,320,318,310,308,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,250,277,313,333,282,274],
[274,0,248,278,321,298,276,255],
[301,303,0,291,350,323,246,305],
[274,273,260,0,292,314,262,312],
[238,230,201,259,0,279,233,240],
[218,253,228,237,272,0,237,230],
[269,275,305,289,318,314,0,264],
[277,296,246,239,311,321,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,279,271,264,269,267,283],
[292,0,282,269,282,296,266,286],
[272,269,0,277,267,284,270,275],
[280,282,274,0,266,274,281,301],
[287,269,284,285,0,291,286,288],
[282,255,267,277,260,0,269,269],
[284,285,281,270,265,282,0,285],
[268,265,276,250,263,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,291,280,285,262,269,264],
[294,0,280,311,295,278,273,272],
[260,271,0,284,300,248,295,294],
[271,240,267,0,264,254,262,255],
[266,256,251,287,0,263,268,291],
[289,273,303,297,288,0,271,299],
[282,278,256,289,283,280,0,269],
[287,279,257,296,260,252,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,258,287,265,286,278,309],
[270,0,269,296,275,273,254,294],
[293,282,0,313,293,297,272,297],
[264,255,238,0,238,280,271,266],
[286,276,258,313,0,303,261,260],
[265,278,254,271,248,0,261,284],
[273,297,279,280,290,290,0,294],
[242,257,254,285,291,267,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,260,263,253,299,270],
[282,0,256,263,259,250,284,260],
[265,295,0,296,290,286,266,279],
[291,288,255,0,263,239,278,264],
[288,292,261,288,0,267,276,271],
[298,301,265,312,284,0,305,293],
[252,267,285,273,275,246,0,277],
[281,291,272,287,280,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,292,260,270,289,263,273],
[272,0,269,253,268,295,274,269],
[259,282,0,268,264,287,274,266],
[291,298,283,0,283,286,277,274],
[281,283,287,268,0,286,276,288],
[262,256,264,265,265,0,254,258],
[288,277,277,274,275,297,0,267],
[278,282,285,277,263,293,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,292,305,277,295,257,271],
[275,0,293,249,288,268,252,277],
[259,258,0,255,256,264,232,255],
[246,302,296,0,298,269,259,293],
[274,263,295,253,0,252,280,266],
[256,283,287,282,299,0,256,293],
[294,299,319,292,271,295,0,300],
[280,274,296,258,285,258,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,250,274,273,278,309],
[272,0,284,256,255,256,271,264],
[277,267,0,291,256,272,290,309],
[301,295,260,0,278,292,295,292],
[277,296,295,273,0,287,274,304],
[278,295,279,259,264,0,286,316],
[273,280,261,256,277,265,0,274],
[242,287,242,259,247,235,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,285,281,274,288,277,293],
[260,0,267,264,271,247,248,266],
[266,284,0,271,282,279,276,301],
[270,287,280,0,271,282,284,276],
[277,280,269,280,0,275,290,290],
[263,304,272,269,276,0,266,292],
[274,303,275,267,261,285,0,310],
[258,285,250,275,261,259,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,271,308,291,294,295,259],
[262,0,272,303,258,289,278,279],
[280,279,0,276,264,282,258,266],
[243,248,275,0,231,271,254,246],
[260,293,287,320,0,281,284,280],
[257,262,269,280,270,0,267,257],
[256,273,293,297,267,284,0,255],
[292,272,285,305,271,294,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,293,300,286,264,275],
[268,0,270,274,282,263,257,261],
[261,281,0,258,297,266,260,238],
[258,277,293,0,281,269,279,278],
[251,269,254,270,0,257,233,241],
[265,288,285,282,294,0,281,274],
[287,294,291,272,318,270,0,275],
[276,290,313,273,310,277,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,294,297,282,279,298,279],
[287,0,284,281,264,287,285,279],
[257,267,0,292,256,276,269,256],
[254,270,259,0,283,273,261,271],
[269,287,295,268,0,273,307,272],
[272,264,275,278,278,0,273,265],
[253,266,282,290,244,278,0,253],
[272,272,295,280,279,286,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,305,282,284,277,295],
[273,0,289,291,278,283,268,300],
[276,262,0,292,267,273,264,287],
[246,260,259,0,258,261,245,264],
[269,273,284,293,0,268,271,290],
[267,268,278,290,283,0,279,282],
[274,283,287,306,280,272,0,268],
[256,251,264,287,261,269,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,274,299,312,296,296,309],
[295,0,295,280,310,273,283,284],
[277,256,0,261,316,237,245,262],
[252,271,290,0,346,263,254,280],
[239,241,235,205,0,228,246,241],
[255,278,314,288,323,0,284,305],
[255,268,306,297,305,267,0,264],
[242,267,289,271,310,246,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,298,283,272,285,290],
[272,0,251,252,261,253,247,259],
[276,300,0,281,287,274,280,311],
[253,299,270,0,277,260,272,255],
[268,290,264,274,0,270,261,273],
[279,298,277,291,281,0,272,307],
[266,304,271,279,290,279,0,287],
[261,292,240,296,278,244,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,265,285,262,272,260],
[276,0,285,271,285,271,288,267],
[262,266,0,256,285,273,275,271],
[286,280,295,0,312,274,295,302],
[266,266,266,239,0,260,271,264],
[289,280,278,277,291,0,291,266],
[279,263,276,256,280,260,0,256],
[291,284,280,249,287,285,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,252,277,276,265,296,273],
[311,0,282,253,311,251,290,277],
[299,269,0,248,310,302,242,299],
[274,298,303,0,308,271,286,307],
[275,240,241,243,0,270,232,233],
[286,300,249,280,281,0,254,288],
[255,261,309,265,319,297,0,304],
[278,274,252,244,318,263,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,277,271,280,251,262],
[280,0,269,273,254,268,301,265],
[295,282,0,281,276,292,262,264],
[274,278,270,0,271,282,240,260],
[280,297,275,280,0,279,273,261],
[271,283,259,269,272,0,255,276],
[300,250,289,311,278,296,0,294],
[289,286,287,291,290,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,261,252,252,216,271,254],
[295,0,277,276,273,248,293,268],
[290,274,0,297,256,289,274,316],
[299,275,254,0,245,256,289,297],
[299,278,295,306,0,284,264,301],
[335,303,262,295,267,0,326,329],
[280,258,277,262,287,225,0,324],
[297,283,235,254,250,222,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,262,275,259,256,254],
[283,0,267,260,278,265,274,264],
[275,284,0,258,282,258,262,267],
[289,291,293,0,279,269,276,279],
[276,273,269,272,0,277,260,257],
[292,286,293,282,274,0,291,277],
[295,277,289,275,291,260,0,254],
[297,287,284,272,294,274,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,259,254,254,270,253,260],
[305,0,267,286,279,281,263,277],
[292,284,0,295,292,292,267,274],
[297,265,256,0,291,271,277,271],
[297,272,259,260,0,280,261,264],
[281,270,259,280,271,0,257,255],
[298,288,284,274,290,294,0,297],
[291,274,277,280,287,296,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,307,301,265,268,277,289],
[297,0,310,298,292,294,269,279],
[244,241,0,269,244,266,227,272],
[250,253,282,0,256,272,254,272],
[286,259,307,295,0,291,256,292],
[283,257,285,279,260,0,238,276],
[274,282,324,297,295,313,0,286],
[262,272,279,279,259,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,269,276,268,253,281],
[280,0,288,278,272,284,277,289],
[280,263,0,269,269,271,260,287],
[282,273,282,0,267,280,278,288],
[275,279,282,284,0,281,273,287],
[283,267,280,271,270,0,273,280],
[298,274,291,273,278,278,0,299],
[270,262,264,263,264,271,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,321,275,281,332,298,279],
[228,0,253,268,297,290,265,254],
[230,298,0,295,284,315,284,291],
[276,283,256,0,332,303,326,287],
[270,254,267,219,0,302,311,284],
[219,261,236,248,249,0,255,224],
[253,286,267,225,240,296,0,254],
[272,297,260,264,267,327,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,332,327,295,267,249],
[283,0,256,321,295,297,248,274],
[266,295,0,299,294,324,242,280],
[219,230,252,0,288,254,229,218],
[224,256,257,263,0,295,229,243],
[256,254,227,297,256,0,256,247],
[284,303,309,322,322,295,0,274],
[302,277,271,333,308,304,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,262,280,263,277,270],
[277,0,263,284,296,274,285,263],
[292,288,0,288,306,280,292,274],
[289,267,263,0,298,276,268,284],
[271,255,245,253,0,256,267,241],
[288,277,271,275,295,0,279,261],
[274,266,259,283,284,272,0,263],
[281,288,277,267,310,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,289,260,276,278,294],
[263,0,288,255,267,263,286,270],
[254,263,0,261,276,278,275,262],
[262,296,290,0,266,251,268,272],
[291,284,275,285,0,276,273,277],
[275,288,273,300,275,0,285,274],
[273,265,276,283,278,266,0,241],
[257,281,289,279,274,277,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,283,278,290,273,301],
[291,0,272,277,287,297,284,297],
[286,279,0,271,284,292,268,296],
[268,274,280,0,280,293,271,279],
[273,264,267,271,0,275,264,275],
[261,254,259,258,276,0,258,278],
[278,267,283,280,287,293,0,288],
[250,254,255,272,276,273,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,279,281,276,285,286],
[285,0,280,278,293,288,289,273],
[272,271,0,261,273,281,283,272],
[272,273,290,0,276,292,280,275],
[270,258,278,275,0,281,276,262],
[275,263,270,259,270,0,281,268],
[266,262,268,271,275,270,0,270],
[265,278,279,276,289,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,298,299,316,297,273,295],
[297,0,295,332,312,285,331,275],
[253,256,0,276,292,298,257,261],
[252,219,275,0,300,293,294,274],
[235,239,259,251,0,235,247,238],
[254,266,253,258,316,0,274,265],
[278,220,294,257,304,277,0,231],
[256,276,290,277,313,286,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,272,262,265,271,260],
[283,0,260,271,269,277,274,268],
[291,291,0,267,281,285,277,281],
[279,280,284,0,272,277,271,282],
[289,282,270,279,0,281,274,273],
[286,274,266,274,270,0,275,271],
[280,277,274,280,277,276,0,290],
[291,283,270,269,278,280,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,226,205,208,231,231,225],
[300,0,265,277,239,255,287,259],
[325,286,0,281,253,290,294,288],
[346,274,270,0,260,278,265,253],
[343,312,298,291,0,293,293,264],
[320,296,261,273,258,0,290,276],
[320,264,257,286,258,261,0,264],
[326,292,263,298,287,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,221,243,230,237,229,233],
[330,0,313,273,250,295,253,296],
[330,238,0,241,249,269,251,273],
[308,278,310,0,280,267,273,293],
[321,301,302,271,0,285,287,306],
[314,256,282,284,266,0,261,300],
[322,298,300,278,264,290,0,277],
[318,255,278,258,245,251,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,260,263,262,269,256,256],
[237,0,250,283,268,264,252,257],
[291,301,0,290,268,275,265,290],
[288,268,261,0,271,260,274,276],
[289,283,283,280,0,303,273,279],
[282,287,276,291,248,0,255,266],
[295,299,286,277,278,296,0,271],
[295,294,261,275,272,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,276,278,292,301,269,275],
[257,0,279,263,269,295,258,272],
[275,272,0,283,280,301,288,286],
[273,288,268,0,281,288,272,280],
[259,282,271,270,0,283,282,271],
[250,256,250,263,268,0,254,253],
[282,293,263,279,269,297,0,293],
[276,279,265,271,280,298,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,287,254,270,282,284,277],
[255,0,289,249,232,270,284,274],
[264,262,0,290,254,237,257,251],
[297,302,261,0,254,284,280,313],
[281,319,297,297,0,303,308,266],
[269,281,314,267,248,0,300,310],
[267,267,294,271,243,251,0,281],
[274,277,300,238,285,241,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,263,262,274,278,259],
[289,0,279,268,254,277,286,279],
[276,272,0,264,279,279,264,276],
[288,283,287,0,282,276,292,263],
[289,297,272,269,0,265,297,264],
[277,274,272,275,286,0,286,269],
[273,265,287,259,254,265,0,272],
[292,272,275,288,287,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,249,273,249,259,287,278],
[281,0,246,290,270,265,287,278],
[302,305,0,305,278,265,285,300],
[278,261,246,0,249,251,286,252],
[302,281,273,302,0,294,301,274],
[292,286,286,300,257,0,286,289],
[264,264,266,265,250,265,0,259],
[273,273,251,299,277,262,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,298,263,287,274,298],
[263,0,290,295,267,288,266,276],
[259,261,0,283,247,272,261,267],
[253,256,268,0,252,266,279,272],
[288,284,304,299,0,275,294,289],
[264,263,279,285,276,0,275,276],
[277,285,290,272,257,276,0,285],
[253,275,284,279,262,275,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,254,269,262,224,211],
[288,0,251,288,261,286,283,250],
[285,300,0,269,287,273,257,257],
[297,263,282,0,269,280,256,273],
[282,290,264,282,0,290,262,248],
[289,265,278,271,261,0,260,277],
[327,268,294,295,289,291,0,294],
[340,301,294,278,303,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,259,236,268,291,264,285],
[292,0,256,264,282,307,306,299],
[292,295,0,277,277,289,271,310],
[315,287,274,0,292,303,259,336],
[283,269,274,259,0,309,284,310],
[260,244,262,248,242,0,242,293],
[287,245,280,292,267,309,0,322],
[266,252,241,215,241,258,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,264,254,274,305,259,272],
[299,0,286,258,282,274,275,279],
[287,265,0,280,274,267,259,285],
[297,293,271,0,266,281,256,273],
[277,269,277,285,0,288,294,280],
[246,277,284,270,263,0,277,260],
[292,276,292,295,257,274,0,305],
[279,272,266,278,271,291,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,275,279,289,270,283],
[263,0,294,266,273,301,272,274],
[272,257,0,271,262,267,262,262],
[276,285,280,0,263,295,271,280],
[272,278,289,288,0,274,273,294],
[262,250,284,256,277,0,264,281],
[281,279,289,280,278,287,0,273],
[268,277,289,271,257,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,289,319,318,317,287,316],
[318,0,320,348,347,260,315,316],
[262,231,0,347,287,317,372,314],
[232,203,204,0,291,260,285,171],
[233,204,264,260,0,262,289,347],
[234,291,234,291,289,0,344,288],
[264,236,179,266,262,207,0,261],
[235,235,237,380,204,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,279,283,287,278,277],
[268,0,258,253,281,287,280,273],
[279,293,0,265,270,292,272,276],
[272,298,286,0,287,299,284,283],
[268,270,281,264,0,277,260,267],
[264,264,259,252,274,0,274,256],
[273,271,279,267,291,277,0,277],
[274,278,275,268,284,295,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,293,285,275,285,272,257],
[291,0,299,298,280,275,276,278],
[258,252,0,280,255,270,257,286],
[266,253,271,0,270,264,269,276],
[276,271,296,281,0,265,281,283],
[266,276,281,287,286,0,278,271],
[279,275,294,282,270,273,0,285],
[294,273,265,275,268,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,286,299,269,297,280],
[275,0,283,273,292,281,289,267],
[272,268,0,271,280,278,289,267],
[265,278,280,0,285,278,291,280],
[252,259,271,266,0,269,271,258],
[282,270,273,273,282,0,293,264],
[254,262,262,260,280,258,0,258],
[271,284,284,271,293,287,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,290,260,297,283,293],
[271,0,277,263,281,277,277,265],
[274,274,0,280,273,289,282,279],
[261,288,271,0,267,290,282,281],
[291,270,278,284,0,320,291,285],
[254,274,262,261,231,0,276,256],
[268,274,269,269,260,275,0,274],
[258,286,272,270,266,295,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,246,384,262,265,312,291],
[285,0,338,432,336,264,360,311],
[305,213,0,333,306,258,284,308],
[167,119,218,0,188,189,212,214],
[289,215,245,363,0,335,311,338],
[286,287,293,362,216,0,262,217],
[239,191,267,339,240,289,0,264],
[260,240,243,337,213,334,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,269,257,322,298,283],
[270,0,282,260,277,291,288,278],
[264,269,0,264,228,317,276,272],
[282,291,287,0,257,301,301,278],
[294,274,323,294,0,318,282,320],
[229,260,234,250,233,0,235,260],
[253,263,275,250,269,316,0,273],
[268,273,279,273,231,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,263,252,239,279,254,243],
[330,0,315,313,274,299,313,301],
[288,236,0,260,253,258,293,243],
[299,238,291,0,242,263,275,275],
[312,277,298,309,0,259,335,273],
[272,252,293,288,292,0,293,264],
[297,238,258,276,216,258,0,257],
[308,250,308,276,278,287,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,305,291,293,322,278,263],
[257,0,302,293,288,328,272,249],
[246,249,0,245,283,277,243,240],
[260,258,306,0,300,333,279,304],
[258,263,268,251,0,300,260,217],
[229,223,274,218,251,0,232,189],
[273,279,308,272,291,319,0,285],
[288,302,311,247,334,362,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,286,287,279,279,272],
[273,0,286,292,316,283,276,291],
[282,265,0,290,288,285,279,291],
[265,259,261,0,278,279,268,269],
[264,235,263,273,0,273,258,281],
[272,268,266,272,278,0,269,261],
[272,275,272,283,293,282,0,284],
[279,260,260,282,270,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,292,279,235,325,271,269],
[269,0,297,266,242,302,267,288],
[259,254,0,228,238,281,292,251],
[272,285,323,0,259,307,292,273],
[316,309,313,292,0,307,265,297],
[226,249,270,244,244,0,240,256],
[280,284,259,259,286,311,0,273],
[282,263,300,278,254,295,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,293,287,273,292,272,276],
[261,0,288,252,274,265,275,255],
[258,263,0,250,257,263,260,260],
[264,299,301,0,271,280,267,281],
[278,277,294,280,0,275,278,257],
[259,286,288,271,276,0,279,273],
[279,276,291,284,273,272,0,256],
[275,296,291,270,294,278,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,307,269,273,301,296,275],
[272,0,276,272,287,295,271,278],
[244,275,0,283,272,280,264,265],
[282,279,268,0,269,310,269,268],
[278,264,279,282,0,299,279,271],
[250,256,271,241,252,0,248,270],
[255,280,287,282,272,303,0,278],
[276,273,286,283,280,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,328,298,272,292,291,306],
[295,0,284,277,266,269,256,270],
[223,267,0,256,230,240,251,274],
[253,274,295,0,263,304,286,272],
[279,285,321,288,0,290,272,295],
[259,282,311,247,261,0,288,294],
[260,295,300,265,279,263,0,291],
[245,281,277,279,256,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,267,258,284,274,278],
[284,0,262,275,279,287,278,301],
[281,289,0,272,274,287,265,268],
[284,276,279,0,258,279,275,284],
[293,272,277,293,0,299,271,275],
[267,264,264,272,252,0,274,277],
[277,273,286,276,280,277,0,288],
[273,250,283,267,276,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,225,268,265,247,251,271],
[315,0,273,298,303,271,292,293],
[326,278,0,283,293,281,263,259],
[283,253,268,0,272,262,258,247],
[286,248,258,279,0,291,276,254],
[304,280,270,289,260,0,278,268],
[300,259,288,293,275,273,0,246],
[280,258,292,304,297,283,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,280,274,266,278,303,275],
[291,0,266,290,282,292,302,294],
[271,285,0,300,267,266,321,283],
[277,261,251,0,259,261,277,260],
[285,269,284,292,0,287,296,280],
[273,259,285,290,264,0,278,281],
[248,249,230,274,255,273,0,247],
[276,257,268,291,271,270,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,236,277,354,236,312,198],
[235,0,274,355,273,234,273,160],
[315,277,0,275,276,314,234,199],
[274,196,276,0,274,234,155,158],
[197,278,275,277,0,275,234,238],
[315,317,237,317,276,0,196,317],
[239,278,317,396,317,355,0,239],
[353,391,352,393,313,234,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,251,270,237,303,239,227],
[323,0,307,303,300,323,272,327],
[300,244,0,271,325,321,313,279],
[281,248,280,0,279,293,291,293],
[314,251,226,272,0,282,279,227],
[248,228,230,258,269,0,263,284],
[312,279,238,260,272,288,0,264],
[324,224,272,258,324,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,277,261,272,258,263,266],
[303,0,296,280,290,277,266,286],
[274,255,0,261,281,267,273,299],
[290,271,290,0,269,273,271,293],
[279,261,270,282,0,275,276,277],
[293,274,284,278,276,0,274,289],
[288,285,278,280,275,277,0,291],
[285,265,252,258,274,262,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,272,305,256,245,258,262],
[216,0,274,274,243,211,288,233],
[279,277,0,282,300,292,292,263],
[246,277,269,0,289,271,292,274],
[295,308,251,262,0,270,269,266],
[306,340,259,280,281,0,308,279],
[293,263,259,259,282,243,0,273],
[289,318,288,277,285,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,264,287,288,262,283,289],
[272,0,277,300,286,271,289,273],
[287,274,0,302,277,265,291,288],
[264,251,249,0,267,253,272,256],
[263,265,274,284,0,284,289,260],
[289,280,286,298,267,0,294,272],
[268,262,260,279,262,257,0,264],
[262,278,263,295,291,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,323,237,287,256,278,265],
[284,0,299,268,265,277,278,271],
[228,252,0,226,259,231,255,222],
[314,283,325,0,273,256,286,284],
[264,286,292,278,0,239,281,279],
[295,274,320,295,312,0,312,283],
[273,273,296,265,270,239,0,246],
[286,280,329,267,272,268,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,244,272,261,273,283,283],
[251,0,252,244,242,255,249,258],
[307,299,0,291,268,275,289,286],
[279,307,260,0,270,287,273,275],
[290,309,283,281,0,265,269,268],
[278,296,276,264,286,0,293,280],
[268,302,262,278,282,258,0,268],
[268,293,265,276,283,271,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,259,288,280,286,298,263],
[254,0,283,304,283,277,274,276],
[292,268,0,275,277,281,277,264],
[263,247,276,0,275,256,285,293],
[271,268,274,276,0,275,268,280],
[265,274,270,295,276,0,288,271],
[253,277,274,266,283,263,0,268],
[288,275,287,258,271,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,226,226,283,224,258,219],
[279,0,279,260,318,261,267,265],
[325,272,0,282,290,274,278,266],
[325,291,269,0,295,287,300,280],
[268,233,261,256,0,252,265,225],
[327,290,277,264,299,0,314,261],
[293,284,273,251,286,237,0,235],
[332,286,285,271,326,290,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,295,285,257,287,301,279],
[242,0,265,271,250,283,288,238],
[256,286,0,274,285,296,296,279],
[266,280,277,0,269,292,282,281],
[294,301,266,282,0,290,303,290],
[264,268,255,259,261,0,270,255],
[250,263,255,269,248,281,0,261],
[272,313,272,270,261,296,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,295,243,300,278,277,281],
[249,0,287,267,273,268,231,264],
[256,264,0,262,271,264,262,241],
[308,284,289,0,284,262,265,278],
[251,278,280,267,0,263,256,257],
[273,283,287,289,288,0,261,256],
[274,320,289,286,295,290,0,263],
[270,287,310,273,294,295,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,246,63,243,248,429,126],
[425,0,244,246,366,370,489,430],
[305,307,0,246,427,307,429,309],
[488,305,305,0,366,368,426,246],
[308,185,124,185,0,247,366,186],
[303,181,244,183,304,0,304,183],
[122,62,122,125,185,247,0,125],
[425,121,242,305,365,368,426,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,263,273,299,283,285,282],
[251,0,266,281,281,254,273,272],
[288,285,0,297,285,271,273,279],
[278,270,254,0,283,267,277,285],
[252,270,266,268,0,230,287,274],
[268,297,280,284,321,0,296,291],
[266,278,278,274,264,255,0,260],
[269,279,272,266,277,260,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,276,284,285,272,291,281],
[263,0,265,270,280,273,292,287],
[275,286,0,293,258,270,277,286],
[267,281,258,0,290,284,277,271],
[266,271,293,261,0,285,272,265],
[279,278,281,267,266,0,293,293],
[260,259,274,274,279,258,0,278],
[270,264,265,280,286,258,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,261,274,263,254,275],
[268,0,269,281,290,287,271,278],
[278,282,0,263,282,271,264,291],
[290,270,288,0,295,271,255,294],
[277,261,269,256,0,278,276,292],
[288,264,280,280,273,0,286,284],
[297,280,287,296,275,265,0,313],
[276,273,260,257,259,267,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,306,251,355,268,269,288],
[206,0,263,282,350,247,303,229],
[245,288,0,268,302,212,271,252],
[300,269,283,0,243,230,252,192],
[196,201,249,308,0,197,233,200],
[283,304,339,321,354,0,321,218],
[282,248,280,299,318,230,0,267],
[263,322,299,359,351,333,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,292,280,251,244,230,232],
[276,0,259,247,264,251,242,245],
[259,292,0,259,272,241,238,263],
[271,304,292,0,278,284,247,227],
[300,287,279,273,0,284,286,274],
[307,300,310,267,267,0,296,274],
[321,309,313,304,265,255,0,295],
[319,306,288,324,277,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,275,267,282,274,256],
[274,0,298,263,257,285,296,284],
[285,253,0,261,256,252,277,242],
[276,288,290,0,258,300,286,261],
[284,294,295,293,0,287,272,275],
[269,266,299,251,264,0,279,267],
[277,255,274,265,279,272,0,280],
[295,267,309,290,276,284,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,250,277,273,259,274],
[265,0,272,279,265,253,260,294],
[277,279,0,273,273,281,294,291],
[301,272,278,0,266,252,277,274],
[274,286,278,285,0,273,279,270],
[278,298,270,299,278,0,286,288],
[292,291,257,274,272,265,0,276],
[277,257,260,277,281,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,262,275,252,268,253,279],
[302,0,279,292,265,270,275,283],
[289,272,0,288,283,286,288,292],
[276,259,263,0,270,256,273,263],
[299,286,268,281,0,257,263,288],
[283,281,265,295,294,0,287,279],
[298,276,263,278,288,264,0,269],
[272,268,259,288,263,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,273,282,303,276,270,272],
[259,0,255,266,257,249,252,269],
[278,296,0,284,290,277,273,269],
[269,285,267,0,286,259,263,254],
[248,294,261,265,0,256,263,260],
[275,302,274,292,295,0,280,298],
[281,299,278,288,288,271,0,284],
[279,282,282,297,291,253,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,300,282,286,294,277,284],
[279,0,283,275,270,248,259,268],
[251,268,0,263,295,250,270,283],
[269,276,288,0,268,263,271,265],
[265,281,256,283,0,262,282,271],
[257,303,301,288,289,0,300,298],
[274,292,281,280,269,251,0,280],
[267,283,268,286,280,253,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,282,277,305,265,278,293],
[256,0,269,284,310,265,277,303],
[269,282,0,279,288,254,280,295],
[274,267,272,0,275,253,279,274],
[246,241,263,276,0,253,270,257],
[286,286,297,298,298,0,263,289],
[273,274,271,272,281,288,0,273],
[258,248,256,277,294,262,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,311,268,290,299,266,282],
[256,0,284,281,306,287,266,284],
[240,267,0,264,284,258,266,262],
[283,270,287,0,293,259,250,260],
[261,245,267,258,0,264,277,275],
[252,264,293,292,287,0,265,285],
[285,285,285,301,274,286,0,290],
[269,267,289,291,276,266,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,283,253,270,279,283],
[279,0,275,274,271,281,279,282],
[282,276,0,279,269,274,283,278],
[268,277,272,0,277,271,267,291],
[298,280,282,274,0,279,286,287],
[281,270,277,280,272,0,292,278],
[272,272,268,284,265,259,0,278],
[268,269,273,260,264,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,277,278,271,284,289],
[264,0,270,273,278,268,278,267],
[283,281,0,273,271,270,278,281],
[274,278,278,0,279,277,273,263],
[273,273,280,272,0,270,287,282],
[280,283,281,274,281,0,289,289],
[267,273,273,278,264,262,0,277],
[262,284,270,288,269,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,225,228,245,257,235,246],
[268,0,245,280,263,263,255,270],
[326,306,0,286,292,278,291,273],
[323,271,265,0,269,272,259,279],
[306,288,259,282,0,262,276,256],
[294,288,273,279,289,0,310,303],
[316,296,260,292,275,241,0,273],
[305,281,278,272,295,248,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,286,280,257,273,270],
[276,0,270,279,271,278,270,246],
[275,281,0,309,276,266,265,247],
[265,272,242,0,284,260,280,231],
[271,280,275,267,0,247,244,285],
[294,273,285,291,304,0,285,280],
[278,281,286,271,307,266,0,261],
[281,305,304,320,266,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,269,277,301,268,281,283],
[286,0,270,267,296,256,264,288],
[282,281,0,277,276,256,272,272],
[274,284,274,0,303,300,274,259],
[250,255,275,248,0,284,272,275],
[283,295,295,251,267,0,262,266],
[270,287,279,277,279,289,0,288],
[268,263,279,292,276,285,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,368,184,370,93,93,183],
[366,0,459,278,369,278,275,274],
[183,92,0,183,183,92,184,274],
[367,273,368,0,461,370,274,274],
[181,182,368,90,0,93,274,183],
[458,273,459,181,458,0,365,274],
[458,276,367,277,277,186,0,276],
[368,277,277,277,368,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,282,268,277,303,294,280],
[278,0,267,247,275,290,284,265],
[269,284,0,261,290,286,292,272],
[283,304,290,0,292,306,295,275],
[274,276,261,259,0,300,281,253],
[248,261,265,245,251,0,272,254],
[257,267,259,256,270,279,0,264],
[271,286,279,276,298,297,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,267,291,285,273,273,283],
[258,0,282,314,276,285,311,279],
[284,269,0,302,295,294,283,278],
[260,237,249,0,256,278,260,255],
[266,275,256,295,0,275,282,285],
[278,266,257,273,276,0,275,271],
[278,240,268,291,269,276,0,275],
[268,272,273,296,266,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,269,289,279,266,296,286],
[296,0,274,284,278,278,289,260],
[282,277,0,290,262,271,256,259],
[262,267,261,0,252,227,251,260],
[272,273,289,299,0,275,271,254],
[285,273,280,324,276,0,265,275],
[255,262,295,300,280,286,0,277],
[265,291,292,291,297,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,274,265,264,277,288,269],
[307,0,288,286,273,297,295,292],
[277,263,0,275,278,276,304,298],
[286,265,276,0,282,290,311,271],
[287,278,273,269,0,306,305,292],
[274,254,275,261,245,0,291,289],
[263,256,247,240,246,260,0,264],
[282,259,253,280,259,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,251,306,295,291,276],
[258,0,283,273,291,280,275,288],
[261,268,0,273,275,276,275,283],
[300,278,278,0,269,282,268,292],
[245,260,276,282,0,236,275,267],
[256,271,275,269,315,0,286,282],
[260,276,276,283,276,265,0,273],
[275,263,268,259,284,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,295,278,268,273,298,280],
[256,0,275,256,271,264,274,262],
[256,276,0,289,274,253,270,278],
[273,295,262,0,277,264,266,272],
[283,280,277,274,0,280,280,288],
[278,287,298,287,271,0,292,296],
[253,277,281,285,271,259,0,284],
[271,289,273,279,263,255,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,363,298,249,299,272,338],
[260,0,320,234,372,274,286,375],
[188,231,0,221,225,224,251,276],
[253,317,330,0,331,313,252,392],
[302,179,326,220,0,212,261,316],
[252,277,327,238,339,0,303,380],
[279,265,300,299,290,248,0,329],
[213,176,275,159,235,171,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,251,245,253,261,264,269],
[305,0,303,262,296,280,278,321],
[300,248,0,273,265,277,273,261],
[306,289,278,0,278,300,271,262],
[298,255,286,273,0,294,275,273],
[290,271,274,251,257,0,303,272],
[287,273,278,280,276,248,0,293],
[282,230,290,289,278,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,284,268,304,269,281,247],
[299,0,306,322,336,311,273,280],
[267,245,0,284,289,259,279,247],
[283,229,267,0,260,262,241,244],
[247,215,262,291,0,256,267,229],
[282,240,292,289,295,0,260,270],
[270,278,272,310,284,291,0,273],
[304,271,304,307,322,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,284,270,237,270,287,255],
[315,0,296,298,358,357,343,268],
[267,255,0,180,271,273,256,246],
[281,253,371,0,295,297,293,256],
[314,193,280,256,0,302,343,288],
[281,194,278,254,249,0,325,224],
[264,208,295,258,208,226,0,290],
[296,283,305,295,263,327,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,266,300,275,285,277,292],
[267,0,263,287,274,305,282,294],
[285,288,0,298,275,290,287,286],
[251,264,253,0,260,268,276,298],
[276,277,276,291,0,305,283,275],
[266,246,261,283,246,0,262,266],
[274,269,264,275,268,289,0,256],
[259,257,265,253,276,285,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,276,231,252,279,236,260],
[297,0,278,241,245,305,251,296],
[275,273,0,268,255,281,247,282],
[320,310,283,0,268,286,289,295],
[299,306,296,283,0,299,253,292],
[272,246,270,265,252,0,245,267],
[315,300,304,262,298,306,0,338],
[291,255,269,256,259,284,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,336,311,302,273,305,313],
[270,0,293,265,271,260,284,315],
[215,258,0,239,257,244,260,280],
[240,286,312,0,248,253,276,324],
[249,280,294,303,0,279,296,310],
[278,291,307,298,272,0,290,354],
[246,267,291,275,255,261,0,305],
[238,236,271,227,241,197,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,440,440,220,441,440,330,330],
[111,0,442,111,221,332,332,111],
[111,109,0,109,111,221,0,0],
[331,440,442,0,332,442,221,221],
[110,330,440,219,0,221,221,221],
[111,219,330,109,330,0,219,109],
[221,219,551,330,330,332,0,110],
[221,440,551,330,330,442,441,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,282,328,330,297,232],
[282,0,237,265,324,300,264,280],
[282,314,0,296,261,363,295,343],
[269,286,255,0,331,289,304,318],
[223,227,290,220,0,257,243,271],
[221,251,188,262,294,0,267,235],
[254,287,256,247,308,284,0,249],
[319,271,208,233,280,316,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,253,275,277,262,260,295],
[305,0,268,250,309,301,295,285],
[298,283,0,283,310,242,261,284],
[276,301,268,0,284,298,276,304],
[274,242,241,267,0,256,266,277],
[289,250,309,253,295,0,269,284],
[291,256,290,275,285,282,0,309],
[256,266,267,247,274,267,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,310,283,273,329,291,310],
[231,0,270,254,248,290,268,285],
[241,281,0,249,256,276,245,289],
[268,297,302,0,281,310,293,300],
[278,303,295,270,0,302,280,296],
[222,261,275,241,249,0,255,270],
[260,283,306,258,271,296,0,301],
[241,266,262,251,255,281,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,270,279,280,284,291,281],
[271,0,273,296,293,269,301,301],
[281,278,0,292,272,280,302,270],
[272,255,259,0,260,274,268,283],
[271,258,279,291,0,282,282,280],
[267,282,271,277,269,0,291,284],
[260,250,249,283,269,260,0,275],
[270,250,281,268,271,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,305,269,305,245,312,252],
[292,0,344,286,287,263,357,304],
[246,207,0,233,271,222,282,259],
[282,265,318,0,285,259,370,264],
[246,264,280,266,0,279,290,278],
[306,288,329,292,272,0,334,267],
[239,194,269,181,261,217,0,236],
[299,247,292,287,273,284,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,271,259,271,290,268],
[283,0,284,277,264,268,280,263],
[276,267,0,272,267,273,276,262],
[280,274,279,0,273,270,280,254],
[292,287,284,278,0,268,293,272],
[280,283,278,281,283,0,265,269],
[261,271,275,271,258,286,0,278],
[283,288,289,297,279,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,282,277,259,293,286],
[267,0,272,272,266,268,289,281],
[264,279,0,275,284,267,282,288],
[269,279,276,0,289,284,290,276],
[274,285,267,262,0,271,287,280],
[292,283,284,267,280,0,282,290],
[258,262,269,261,264,269,0,273],
[265,270,263,275,271,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,196,262,228,298,228,263],
[319,0,255,354,286,291,289,224],
[355,296,0,261,259,327,323,256],
[289,197,290,0,228,357,291,293],
[323,265,292,323,0,392,324,257],
[253,260,224,194,159,0,289,224],
[323,262,228,260,227,262,0,292],
[288,327,295,258,294,327,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,282,283,287,273,298,277],
[260,0,259,264,272,268,266,263],
[269,292,0,281,266,288,287,275],
[268,287,270,0,270,259,274,265],
[264,279,285,281,0,263,273,269],
[278,283,263,292,288,0,296,277],
[253,285,264,277,278,255,0,260],
[274,288,276,286,282,274,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,278,274,268,257,263],
[281,0,276,283,275,292,268,277],
[278,275,0,272,282,281,275,278],
[273,268,279,0,280,280,269,275],
[277,276,269,271,0,278,276,271],
[283,259,270,271,273,0,267,270],
[294,283,276,282,275,284,0,270],
[288,274,273,276,280,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,265,225,198,263,241,284],
[331,0,306,267,282,262,174,330],
[286,245,0,226,262,289,220,309],
[326,284,325,0,303,326,258,350],
[353,269,289,248,0,333,290,354],
[288,289,262,225,218,0,194,265],
[310,377,331,293,261,357,0,331],
[267,221,242,201,197,286,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,295,285,294,267,289,260],
[280,0,272,291,314,281,264,277],
[256,279,0,291,296,254,261,239],
[266,260,260,0,271,256,307,228],
[257,237,255,280,0,249,246,228],
[284,270,297,295,302,0,276,263],
[262,287,290,244,305,275,0,261],
[291,274,312,323,323,288,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,256,302,289,267,275,288],
[267,0,270,297,265,277,277,283],
[295,281,0,311,290,272,300,300],
[249,254,240,0,252,236,272,259],
[262,286,261,299,0,265,302,278],
[284,274,279,315,286,0,295,287],
[276,274,251,279,249,256,0,272],
[263,268,251,292,273,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,278,259,262,280,249,269],
[295,0,295,272,282,290,277,273],
[273,256,0,276,287,282,266,277],
[292,279,275,0,286,300,269,270],
[289,269,264,265,0,294,263,267],
[271,261,269,251,257,0,267,266],
[302,274,285,282,288,284,0,270],
[282,278,274,281,284,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,269,283,288,284,275,298],
[268,0,250,271,254,279,254,277],
[282,301,0,275,272,279,266,284],
[268,280,276,0,277,282,270,265],
[263,297,279,274,0,278,255,267],
[267,272,272,269,273,0,276,261],
[276,297,285,281,296,275,0,279],
[253,274,267,286,284,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,289,291,289,278,280,265],
[301,0,292,307,307,272,313,290],
[262,259,0,301,286,284,277,261],
[260,244,250,0,266,255,292,239],
[262,244,265,285,0,265,280,256],
[273,279,267,296,286,0,281,276],
[271,238,274,259,271,270,0,249],
[286,261,290,312,295,275,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,249,246,260,293,249,298],
[266,0,215,232,213,228,215,249],
[302,336,0,291,255,286,294,293],
[305,319,260,0,257,277,268,252],
[291,338,296,294,0,311,296,259],
[258,323,265,274,240,0,238,249],
[302,336,257,283,255,313,0,312],
[253,302,258,299,292,302,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,242,242,293,244,272,260],
[301,0,307,281,290,266,291,299],
[309,244,0,279,273,250,282,264],
[309,270,272,0,293,276,261,292],
[258,261,278,258,0,247,274,302],
[307,285,301,275,304,0,280,279],
[279,260,269,290,277,271,0,262],
[291,252,287,259,249,272,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,269,296,251,285,278],
[276,0,250,278,273,242,263,275],
[261,301,0,256,272,248,272,263],
[282,273,295,0,262,282,284,276],
[255,278,279,289,0,272,271,254],
[300,309,303,269,279,0,294,293],
[266,288,279,267,280,257,0,263],
[273,276,288,275,297,258,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,273,271,253,280,291],
[278,0,277,286,282,283,273,283],
[282,274,0,282,288,271,284,281],
[278,265,269,0,278,294,283,290],
[280,269,263,273,0,281,280,283],
[298,268,280,257,270,0,265,275],
[271,278,267,268,271,286,0,291],
[260,268,270,261,268,276,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,263,283,272,263,286,268],
[268,0,258,284,250,261,262,262],
[288,293,0,292,284,267,281,294],
[268,267,259,0,275,263,273,267],
[279,301,267,276,0,279,297,291],
[288,290,284,288,272,0,282,290],
[265,289,270,278,254,269,0,266],
[283,289,257,284,260,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,291,310,288,286,266,322],
[270,0,281,266,281,297,278,307],
[260,270,0,290,282,279,274,289],
[241,285,261,0,298,281,280,295],
[263,270,269,253,0,281,252,262],
[265,254,272,270,270,0,262,298],
[285,273,277,271,299,289,0,295],
[229,244,262,256,289,253,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,267,320,292,291,303,282],
[262,0,277,286,271,295,290,277],
[284,274,0,304,291,293,287,291],
[231,265,247,0,245,268,262,267],
[259,280,260,306,0,280,277,289],
[260,256,258,283,271,0,281,273],
[248,261,264,289,274,270,0,279],
[269,274,260,284,262,278,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,251,270,265,287,265,273],
[284,0,263,290,265,284,274,261],
[300,288,0,285,276,291,295,271],
[281,261,266,0,264,282,264,262],
[286,286,275,287,0,289,267,269],
[264,267,260,269,262,0,248,255],
[286,277,256,287,284,303,0,276],
[278,290,280,289,282,296,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,289,297,280,283,285,271],
[252,0,245,256,234,265,271,251],
[262,306,0,291,271,299,281,285],
[254,295,260,0,275,288,269,265],
[271,317,280,276,0,287,278,270],
[268,286,252,263,264,0,276,281],
[266,280,270,282,273,275,0,266],
[280,300,266,286,281,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,286,270,334,265,271,253],
[249,0,325,255,296,232,255,208],
[265,226,0,199,246,217,211,257],
[281,296,352,0,350,273,294,278],
[217,255,305,201,0,227,216,269],
[286,319,334,278,324,0,275,286],
[280,296,340,257,335,276,0,266],
[298,343,294,273,282,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,253,257,254,255,274],
[296,0,282,269,275,295,260,294],
[272,269,0,247,284,268,273,293],
[298,282,304,0,267,270,286,307],
[294,276,267,284,0,283,271,280],
[297,256,283,281,268,0,270,307],
[296,291,278,265,280,281,0,322],
[277,257,258,244,271,244,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,264,264,276,261,274],
[274,0,294,292,292,292,299,296],
[269,257,0,269,272,282,261,294],
[287,259,282,0,282,291,259,274],
[287,259,279,269,0,284,275,276],
[275,259,269,260,267,0,272,274],
[290,252,290,292,276,279,0,284],
[277,255,257,277,275,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,257,259,245,248,266,246],
[305,0,279,273,275,270,285,283],
[294,272,0,300,266,276,290,257],
[292,278,251,0,260,266,272,273],
[306,276,285,291,0,278,296,257],
[303,281,275,285,273,0,284,281],
[285,266,261,279,255,267,0,258],
[305,268,294,278,294,270,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,279,293,297,295,284,262],
[235,0,275,254,269,237,247,275],
[272,276,0,266,289,296,308,267],
[258,297,285,0,325,288,284,275],
[254,282,262,226,0,265,243,244],
[256,314,255,263,286,0,261,279],
[267,304,243,267,308,290,0,284],
[289,276,284,276,307,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,297,272,280,299,292,285],
[276,0,279,266,270,282,275,274],
[254,272,0,245,255,267,267,284],
[279,285,306,0,265,274,293,276],
[271,281,296,286,0,293,278,277],
[252,269,284,277,258,0,268,262],
[259,276,284,258,273,283,0,281],
[266,277,267,275,274,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,266,281,282,241,304],
[285,0,275,277,298,283,257,283],
[269,276,0,285,278,271,278,311],
[285,274,266,0,291,262,261,285],
[270,253,273,260,0,253,240,261],
[269,268,280,289,298,0,238,310],
[310,294,273,290,311,313,0,320],
[247,268,240,266,290,241,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,394,316,473,316,393,394,236],
[157,0,237,237,315,236,237,157],
[235,314,0,394,235,314,393,234],
[78,314,157,0,156,157,235,235],
[235,236,316,395,0,235,316,236],
[158,315,237,394,316,0,315,157],
[157,314,158,316,235,236,0,314],
[315,394,317,316,315,394,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,291,269,265,288,269],
[265,0,267,266,277,278,258,273],
[272,284,0,282,272,283,273,284],
[260,285,269,0,278,277,277,294],
[282,274,279,273,0,302,284,287],
[286,273,268,274,249,0,288,261],
[263,293,278,274,267,263,0,268],
[282,278,267,257,264,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,296,281,277,273,275],
[274,0,287,291,279,289,282,272],
[268,264,0,283,274,282,277,258],
[255,260,268,0,249,262,264,269],
[270,272,277,302,0,277,272,271],
[274,262,269,289,274,0,287,278],
[278,269,274,287,279,264,0,261],
[276,279,293,282,280,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,273,361,309,286,256],
[278,0,292,260,345,343,310,323],
[277,259,0,294,280,380,255,257],
[278,291,257,0,293,291,275,292],
[190,206,271,258,0,271,236,253],
[242,208,171,260,280,0,219,271],
[265,241,296,276,315,332,0,278],
[295,228,294,259,298,280,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,168,333,331,276,330,332,276],
[383,0,384,328,273,217,328,219],
[218,167,0,163,219,163,165,110],
[220,223,388,0,220,217,275,275],
[275,278,332,331,0,329,275,275],
[221,334,388,334,222,0,331,332],
[219,223,386,276,276,220,0,222],
[275,332,441,276,276,219,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,293,317,301,277,296],
[253,0,277,270,309,282,297,283],
[279,274,0,267,317,279,277,252],
[258,281,284,0,294,296,289,284],
[234,242,234,257,0,242,253,273],
[250,269,272,255,309,0,282,289],
[274,254,274,262,298,269,0,268],
[255,268,299,267,278,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,273,275,260,281,275],
[289,0,279,292,304,279,258,292],
[270,272,0,276,285,273,258,295],
[278,259,275,0,292,262,286,316],
[276,247,266,259,0,262,249,278],
[291,272,278,289,289,0,286,303],
[270,293,293,265,302,265,0,291],
[276,259,256,235,273,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,282,267,289,279,278],
[282,0,280,283,255,274,285,286],
[269,271,0,308,282,291,268,295],
[269,268,243,0,249,276,290,276],
[284,296,269,302,0,274,289,300],
[262,277,260,275,277,0,278,294],
[272,266,283,261,262,273,0,271],
[273,265,256,275,251,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,288,278,291,296,285,263],
[282,0,308,267,300,292,310,281],
[263,243,0,272,269,268,257,232],
[273,284,279,0,293,285,283,259],
[260,251,282,258,0,282,283,258],
[255,259,283,266,269,0,269,251],
[266,241,294,268,268,282,0,246],
[288,270,319,292,293,300,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,274,263,279,276,254,262],
[264,0,271,258,260,247,250,263],
[277,280,0,257,261,273,251,271],
[288,293,294,0,277,272,267,285],
[272,291,290,274,0,280,261,284],
[275,304,278,279,271,0,282,281],
[297,301,300,284,290,269,0,281],
[289,288,280,266,267,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,260,305,279,274,246,281],
[325,0,285,307,263,305,265,304],
[291,266,0,330,297,288,296,286],
[246,244,221,0,240,253,253,249],
[272,288,254,311,0,299,279,311],
[277,246,263,298,252,0,291,282],
[305,286,255,298,272,260,0,293],
[270,247,265,302,240,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,300,302,285,292,280],
[282,0,261,280,283,279,279,270],
[254,290,0,268,267,284,299,284],
[251,271,283,0,283,273,295,277],
[249,268,284,268,0,283,284,276],
[266,272,267,278,268,0,280,278],
[259,272,252,256,267,271,0,277],
[271,281,267,274,275,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,274,276,267,279,281,277],
[251,0,252,272,269,301,275,269],
[277,299,0,285,266,286,284,275],
[275,279,266,0,286,278,294,282],
[284,282,285,265,0,280,287,274],
[272,250,265,273,271,0,289,277],
[270,276,267,257,264,262,0,267],
[274,282,276,269,277,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,286,278,283,276,258,267],
[292,0,291,303,276,281,275,286],
[265,260,0,256,270,254,247,269],
[273,248,295,0,254,253,263,263],
[268,275,281,297,0,284,260,282],
[275,270,297,298,267,0,261,284],
[293,276,304,288,291,290,0,274],
[284,265,282,288,269,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,237,220,241,232,215,277],
[254,0,225,191,286,236,283,326],
[314,326,0,264,314,242,327,330],
[331,360,287,0,329,293,252,295],
[310,265,237,222,0,248,235,266],
[319,315,309,258,303,0,290,330],
[336,268,224,299,316,261,0,297],
[274,225,221,256,285,221,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,269,262,279,274,273,271],
[275,0,261,253,286,251,261,258],
[282,290,0,271,288,246,282,277],
[289,298,280,0,287,265,279,279],
[272,265,263,264,0,257,264,256],
[277,300,305,286,294,0,274,274],
[278,290,269,272,287,277,0,277],
[280,293,274,272,295,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,278,284,283,280,263],
[273,0,288,275,291,310,300,288],
[266,263,0,284,282,301,287,276],
[273,276,267,0,264,289,295,269],
[267,260,269,287,0,298,309,292],
[268,241,250,262,253,0,284,283],
[271,251,264,256,242,267,0,264],
[288,263,275,282,259,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,298,274,284,266,280],
[267,0,277,288,267,279,268,284],
[287,274,0,304,286,270,280,268],
[253,263,247,0,265,257,265,267],
[277,284,265,286,0,275,271,296],
[267,272,281,294,276,0,282,268],
[285,283,271,286,280,269,0,285],
[271,267,283,284,255,283,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,288,307,301,296,274,279],
[261,0,282,297,291,287,257,268],
[263,269,0,283,287,261,253,263],
[244,254,268,0,236,277,251,252],
[250,260,264,315,0,290,265,243],
[255,264,290,274,261,0,283,241],
[277,294,298,300,286,268,0,294],
[272,283,288,299,308,310,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,273,319,304,327,283,318],
[254,0,261,271,246,289,255,261],
[278,290,0,290,264,290,264,301],
[232,280,261,0,268,289,275,281],
[247,305,287,283,0,308,290,313],
[224,262,261,262,243,0,254,274],
[268,296,287,276,261,297,0,284],
[233,290,250,270,238,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,285,268,282,277,295,276],
[293,0,285,278,294,288,308,271],
[266,266,0,279,297,302,310,257],
[283,273,272,0,281,296,305,276],
[269,257,254,270,0,293,291,258],
[274,263,249,255,258,0,280,258],
[256,243,241,246,260,271,0,237],
[275,280,294,275,293,293,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,296,276,263,274,281,285],
[263,0,289,283,266,281,300,273],
[255,262,0,257,257,238,250,261],
[275,268,294,0,290,282,297,284],
[288,285,294,261,0,275,288,285],
[277,270,313,269,276,0,303,297],
[270,251,301,254,263,248,0,282],
[266,278,290,267,266,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,293,284,264,280,289,279],
[256,0,297,273,269,288,296,280],
[258,254,0,262,254,271,280,272],
[267,278,289,0,271,272,268,276],
[287,282,297,280,0,280,298,273],
[271,263,280,279,271,0,291,281],
[262,255,271,283,253,260,0,261],
[272,271,279,275,278,270,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,242,245,256,253,232,255],
[281,0,262,259,261,269,242,264],
[309,289,0,288,295,294,266,287],
[306,292,263,0,275,284,274,293],
[295,290,256,276,0,279,273,281],
[298,282,257,267,272,0,290,275],
[319,309,285,277,278,261,0,293],
[296,287,264,258,270,276,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,286,281,307,273,281,272],
[293,0,279,253,316,282,275,261],
[265,272,0,276,316,276,281,271],
[270,298,275,0,307,275,279,273],
[244,235,235,244,0,270,265,250],
[278,269,275,276,281,0,293,280],
[270,276,270,272,286,258,0,269],
[279,290,280,278,301,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,300,269,281,302,317,294],
[254,0,293,279,273,294,293,288],
[251,258,0,286,274,297,280,285],
[282,272,265,0,257,278,283,275],
[270,278,277,294,0,275,282,306],
[249,257,254,273,276,0,270,283],
[234,258,271,268,269,281,0,274],
[257,263,266,276,245,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,268,267,268,291,269],
[280,0,268,248,257,267,276,275],
[283,283,0,276,271,284,267,281],
[283,303,275,0,273,274,268,281],
[284,294,280,278,0,303,300,273],
[283,284,267,277,248,0,280,267],
[260,275,284,283,251,271,0,257],
[282,276,270,270,278,284,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,255,245,289,232,267],
[289,0,273,256,287,287,242,328],
[279,278,0,251,295,302,242,283],
[296,295,300,0,281,273,255,304],
[306,264,256,270,0,304,261,304],
[262,264,249,278,247,0,271,303],
[319,309,309,296,290,280,0,258],
[284,223,268,247,247,248,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,255,244,252,295,290],
[283,0,276,279,260,245,293,294],
[287,275,0,249,259,280,265,301],
[296,272,302,0,291,288,321,308],
[307,291,292,260,0,282,283,336],
[299,306,271,263,269,0,264,315],
[256,258,286,230,268,287,0,267],
[261,257,250,243,215,236,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,264,245,272,263,274,262],
[305,0,298,253,300,285,310,260],
[287,253,0,247,287,286,291,269],
[306,298,304,0,306,319,270,285],
[279,251,264,245,0,244,284,243],
[288,266,265,232,307,0,278,256],
[277,241,260,281,267,273,0,247],
[289,291,282,266,308,295,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,269,262,274,267,283,270],
[271,0,271,275,268,273,292,275],
[282,280,0,277,272,276,272,266],
[289,276,274,0,278,299,289,277],
[277,283,279,273,0,280,295,271],
[284,278,275,252,271,0,295,267],
[268,259,279,262,256,256,0,259],
[281,276,285,274,280,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,260,288,303,268,300,289],
[282,0,263,304,290,262,260,303],
[291,288,0,273,294,285,306,329],
[263,247,278,0,268,302,277,323],
[248,261,257,283,0,282,271,295],
[283,289,266,249,269,0,263,324],
[251,291,245,274,280,288,0,301],
[262,248,222,228,256,227,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,347,295,235,360,268,277],
[253,0,310,233,281,333,260,246],
[204,241,0,270,245,306,242,253],
[256,318,281,0,295,283,266,308],
[316,270,306,256,0,294,343,341],
[191,218,245,268,257,0,220,241],
[283,291,309,285,208,331,0,303],
[274,305,298,243,210,310,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,262,285,273,255,280,263],
[294,0,292,257,267,261,266,269],
[289,259,0,275,269,283,286,284],
[266,294,276,0,268,275,275,273],
[278,284,282,283,0,269,281,285],
[296,290,268,276,282,0,279,267],
[271,285,265,276,270,272,0,275],
[288,282,267,278,266,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,294,257,270,268,265],
[274,0,274,299,287,286,272,277],
[288,277,0,291,282,289,269,275],
[257,252,260,0,266,247,256,259],
[294,264,269,285,0,265,269,259],
[281,265,262,304,286,0,278,264],
[283,279,282,295,282,273,0,284],
[286,274,276,292,292,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,277,279,258,277,247],
[282,0,274,283,245,238,275,276],
[277,277,0,268,288,268,281,268],
[274,268,283,0,276,276,261,260],
[272,306,263,275,0,278,286,268],
[293,313,283,275,273,0,296,258],
[274,276,270,290,265,255,0,261],
[304,275,283,291,283,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,261,271,296,295,295],
[262,0,259,246,245,253,269,236],
[276,292,0,277,290,300,292,273],
[290,305,274,0,280,306,320,273],
[280,306,261,271,0,293,259,277],
[255,298,251,245,258,0,293,263],
[256,282,259,231,292,258,0,251],
[256,315,278,278,274,288,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,275,258,271,277,276,279],
[274,0,269,258,274,265,257,275],
[276,282,0,258,282,265,255,275],
[293,293,293,0,302,284,267,302],
[280,277,269,249,0,267,263,272],
[274,286,286,267,284,0,274,276],
[275,294,296,284,288,277,0,297],
[272,276,276,249,279,275,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,276,272,274,267,259,277],
[283,0,277,273,282,271,282,288],
[275,274,0,285,270,278,277,291],
[279,278,266,0,267,271,268,289],
[277,269,281,284,0,280,273,296],
[284,280,273,280,271,0,278,288],
[292,269,274,283,278,273,0,279],
[274,263,260,262,255,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,255,258,249,254,286,284],
[291,0,298,279,266,261,289,281],
[296,253,0,273,263,265,286,247],
[293,272,278,0,284,287,282,306],
[302,285,288,267,0,276,307,323],
[297,290,286,264,275,0,291,319],
[265,262,265,269,244,260,0,271],
[267,270,304,245,228,232,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,283,293,305,269,289,311],
[282,0,278,273,270,288,279,294],
[268,273,0,279,294,263,239,308],
[258,278,272,0,266,267,250,290],
[246,281,257,285,0,281,276,317],
[282,263,288,284,270,0,287,324],
[262,272,312,301,275,264,0,324],
[240,257,243,261,234,227,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,265,267,273,285,284,286],
[276,0,312,273,307,302,309,297],
[286,239,0,279,290,283,266,271],
[284,278,272,0,271,289,283,294],
[278,244,261,280,0,289,255,268],
[266,249,268,262,262,0,261,291],
[267,242,285,268,296,290,0,262],
[265,254,280,257,283,260,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,282,281,278,278,267,280],
[242,0,243,255,251,263,254,270],
[269,308,0,271,274,271,269,296],
[270,296,280,0,272,278,273,284],
[273,300,277,279,0,274,273,290],
[273,288,280,273,277,0,280,286],
[284,297,282,278,278,271,0,279],
[271,281,255,267,261,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,273,278,284,261,266],
[282,0,271,286,269,266,269,280],
[284,280,0,276,269,269,271,274],
[278,265,275,0,273,271,280,271],
[273,282,282,278,0,295,280,271],
[267,285,282,280,256,0,271,279],
[290,282,280,271,271,280,0,273],
[285,271,277,280,280,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,290,269,289,281,279],
[268,0,279,256,267,301,269,269],
[275,272,0,263,277,289,270,280],
[261,295,288,0,259,288,275,274],
[282,284,274,292,0,308,292,291],
[262,250,262,263,243,0,257,264],
[270,282,281,276,259,294,0,291],
[272,282,271,277,260,287,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,273,301,278,272,293],
[272,0,266,280,288,257,279,294],
[277,285,0,274,275,271,287,305],
[278,271,277,0,282,243,269,293],
[250,263,276,269,0,262,267,297],
[273,294,280,308,289,0,301,313],
[279,272,264,282,284,250,0,282],
[258,257,246,258,254,238,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,256,266,252,276,269,266],
[305,0,282,293,272,287,307,276],
[295,269,0,302,276,291,283,258],
[285,258,249,0,263,270,280,268],
[299,279,275,288,0,274,269,257],
[275,264,260,281,277,0,301,263],
[282,244,268,271,282,250,0,258],
[285,275,293,283,294,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,267,249,258,301,267],
[281,0,263,263,260,274,283,273],
[282,288,0,264,267,253,282,263],
[284,288,287,0,274,286,308,312],
[302,291,284,277,0,271,285,284],
[293,277,298,265,280,0,293,276],
[250,268,269,243,266,258,0,244],
[284,278,288,239,267,275,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,257,283,285,297,289,307],
[261,0,259,285,287,281,270,286],
[294,292,0,296,293,270,292,306],
[268,266,255,0,278,260,276,290],
[266,264,258,273,0,261,269,288],
[254,270,281,291,290,0,278,285],
[262,281,259,275,282,273,0,293],
[244,265,245,261,263,266,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,264,259,287,283,279],
[291,0,295,281,271,310,294,275],
[279,256,0,261,241,281,266,267],
[287,270,290,0,258,301,284,277],
[292,280,310,293,0,313,282,266],
[264,241,270,250,238,0,282,252],
[268,257,285,267,269,269,0,278],
[272,276,284,274,285,299,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,319,273,292,307,276,275],
[285,0,328,312,305,326,254,252],
[232,223,0,214,277,263,248,285],
[278,239,337,0,287,281,254,264],
[259,246,274,264,0,318,177,212],
[244,225,288,270,233,0,243,255],
[275,297,303,297,374,308,0,305],
[276,299,266,287,339,296,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,250,228,224,253,288],
[276,0,246,250,267,247,288,282],
[282,305,0,280,258,282,311,280],
[301,301,271,0,267,259,307,300],
[323,284,293,284,0,255,335,323],
[327,304,269,292,296,0,320,313],
[298,263,240,244,216,231,0,293],
[263,269,271,251,228,238,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,278,277,256,245,282],
[274,0,261,288,289,274,265,277],
[277,290,0,284,281,296,269,289],
[273,263,267,0,294,265,260,245],
[274,262,270,257,0,266,255,286],
[295,277,255,286,285,0,261,264],
[306,286,282,291,296,290,0,275],
[269,274,262,306,265,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,251,256,272,246,292,276],
[291,0,285,271,277,282,295,280],
[300,266,0,281,285,290,301,284],
[295,280,270,0,293,305,292,309],
[279,274,266,258,0,279,277,275],
[305,269,261,246,272,0,290,274],
[259,256,250,259,274,261,0,280],
[275,271,267,242,276,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,275,267,296,264,285],
[281,0,277,274,264,283,281,282],
[286,274,0,265,272,292,262,293],
[276,277,286,0,278,293,266,283],
[284,287,279,273,0,305,282,286],
[255,268,259,258,246,0,251,258],
[287,270,289,285,269,300,0,292],
[266,269,258,268,265,293,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,306,306,307,270,298,277],
[254,0,279,269,269,273,276,276],
[245,272,0,262,274,253,263,277],
[245,282,289,0,298,280,280,295],
[244,282,277,253,0,269,259,263],
[281,278,298,271,282,0,292,286],
[253,275,288,271,292,259,0,289],
[274,275,274,256,288,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,263,247,254,267,262],
[268,0,258,255,240,262,261,262],
[280,293,0,263,256,277,283,272],
[288,296,288,0,260,271,268,268],
[304,311,295,291,0,290,271,293],
[297,289,274,280,261,0,267,282],
[284,290,268,283,280,284,0,297],
[289,289,279,283,258,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,293,277,272,278,278],
[269,0,278,251,265,269,268,256],
[266,273,0,285,273,284,271,266],
[258,300,266,0,269,270,272,270],
[274,286,278,282,0,274,268,274],
[279,282,267,281,277,0,259,261],
[273,283,280,279,283,292,0,263],
[273,295,285,281,277,290,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,300,287,275,318,264,297],
[237,0,281,258,282,272,259,280],
[251,270,0,270,257,273,246,284],
[264,293,281,0,256,299,259,277],
[276,269,294,295,0,285,302,308],
[233,279,278,252,266,0,257,269],
[287,292,305,292,249,294,0,303],
[254,271,267,274,243,282,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,250,251,253,350,299,299],
[249,0,198,299,248,249,298,248],
[301,353,0,303,352,301,299,149],
[300,252,248,0,300,299,249,199],
[298,303,199,251,0,350,299,149],
[201,302,250,252,201,0,351,197],
[252,253,252,302,252,200,0,248],
[252,303,402,352,402,354,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,276,270,272,252,272,249],
[291,0,292,287,289,283,286,248],
[275,259,0,279,285,276,299,243],
[281,264,272,0,266,245,272,237],
[279,262,266,285,0,248,273,241],
[299,268,275,306,303,0,296,281],
[279,265,252,279,278,255,0,252],
[302,303,308,314,310,270,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,272,280,256,353,277,293],
[218,0,213,236,179,276,238,276],
[279,338,0,241,221,297,222,281],
[271,315,310,0,313,334,258,311],
[295,372,330,238,0,355,280,275],
[198,275,254,217,196,0,214,238],
[274,313,329,293,271,337,0,316],
[258,275,270,240,276,313,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,261,270,275,256,270,257],
[271,0,244,255,257,255,260,270],
[290,307,0,282,286,283,282,272],
[281,296,269,0,279,287,262,279],
[276,294,265,272,0,275,277,273],
[295,296,268,264,276,0,271,278],
[281,291,269,289,274,280,0,274],
[294,281,279,272,278,273,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,362,331,330,278,305,195,306],
[189,0,331,411,220,273,302,250],
[220,220,0,329,220,276,222,249],
[221,140,222,0,225,250,196,226],
[273,331,331,326,0,274,277,278],
[246,278,275,301,277,0,249,248],
[356,249,329,355,274,302,0,222],
[245,301,302,325,273,303,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,395,314,337,315,185,289,317],
[156,0,238,234,264,129,156,210],
[237,313,0,365,290,261,238,210],
[214,317,186,0,213,213,238,213],
[236,287,261,338,0,262,236,210],
[366,422,290,338,289,0,340,265],
[262,395,313,313,315,211,0,371],
[234,341,341,338,341,286,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,265,298,274,300,296,267],
[261,0,294,296,256,283,279,236],
[286,257,0,312,311,311,360,301],
[253,255,239,0,269,289,325,268],
[277,295,240,282,0,283,312,245],
[251,268,240,262,268,0,312,240],
[255,272,191,226,239,239,0,257],
[284,315,250,283,306,311,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,272,252,265,266,265,258],
[300,0,271,277,287,271,282,261],
[279,280,0,287,272,252,265,270],
[299,274,264,0,281,280,268,258],
[286,264,279,270,0,272,270,254],
[285,280,299,271,279,0,278,272],
[286,269,286,283,281,273,0,278],
[293,290,281,293,297,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,272,261,277,268,270,286],
[261,0,269,267,266,275,264,289],
[279,282,0,267,264,273,278,311],
[290,284,284,0,276,273,280,286],
[274,285,287,275,0,276,290,291],
[283,276,278,278,275,0,268,300],
[281,287,273,271,261,283,0,292],
[265,262,240,265,260,251,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,301,274,270,273,280,283],
[261,0,281,282,245,255,258,261],
[250,270,0,261,257,253,270,254],
[277,269,290,0,259,257,265,266],
[281,306,294,292,0,259,289,278],
[278,296,298,294,292,0,285,272],
[271,293,281,286,262,266,0,265],
[268,290,297,285,273,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,245,249,235,226,316,270],
[278,0,292,268,306,283,361,301],
[306,259,0,301,272,249,294,294],
[302,283,250,0,277,280,335,289],
[316,245,279,274,0,255,347,299],
[325,268,302,271,296,0,324,336],
[235,190,257,216,204,227,0,201],
[281,250,257,262,252,215,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,228,261,246,263,252,243],
[307,0,244,253,262,282,275,245],
[323,307,0,297,283,256,267,309],
[290,298,254,0,283,292,282,263],
[305,289,268,268,0,287,277,274],
[288,269,295,259,264,0,241,260],
[299,276,284,269,274,310,0,280],
[308,306,242,288,277,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,299,292,303,241,273,314],
[296,0,307,293,299,286,314,261],
[252,244,0,219,242,239,222,253],
[259,258,332,0,319,267,304,278],
[248,252,309,232,0,259,258,291],
[310,265,312,284,292,0,262,262],
[278,237,329,247,293,289,0,276],
[237,290,298,273,260,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,299,264,278,276,298,280],
[260,0,274,256,285,309,298,265],
[252,277,0,294,313,287,284,247],
[287,295,257,0,274,319,347,258],
[273,266,238,277,0,295,269,224],
[275,242,264,232,256,0,294,258],
[253,253,267,204,282,257,0,261],
[271,286,304,293,327,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,282,303,264,278,279,331],
[280,0,237,275,267,327,334,326],
[269,314,0,311,278,346,337,327],
[248,276,240,0,242,277,272,235],
[287,284,273,309,0,337,352,320],
[273,224,205,274,214,0,286,294],
[272,217,214,279,199,265,0,259],
[220,225,224,316,231,257,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 551, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_551.csv", index=False, header=False)
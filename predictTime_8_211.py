
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,108,114,102,122,90,118,116],
[103,0,100,93,110,82,96,113],
[97,111,0,108,129,117,105,111],
[109,118,103,0,122,104,110,130],
[89,101,82,89,0,94,103,117],
[121,129,94,107,117,0,120,127],
[93,115,106,101,108,91,0,116],
[95,98,100,81,94,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,121,114,119,100,112,102],
[121,0,114,111,104,99,113,102],
[90,97,0,99,101,88,93,88],
[97,100,112,0,115,106,108,100],
[92,107,110,96,0,94,112,91],
[111,112,123,105,117,0,104,107],
[99,98,118,103,99,107,0,108],
[109,109,123,111,120,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,100,124,99,116,87],
[101,0,115,101,115,106,98,108],
[97,96,0,95,112,106,96,107],
[111,110,116,0,111,111,106,99],
[87,96,99,100,0,96,97,92],
[112,105,105,100,115,0,98,91],
[95,113,115,105,114,113,0,102],
[124,103,104,112,119,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,95,119,147,106,120,120],
[87,0,92,112,119,77,108,103],
[116,119,0,128,141,103,116,129],
[92,99,83,0,131,79,107,101],
[64,92,70,80,0,63,78,79],
[105,134,108,132,148,0,110,127],
[91,103,95,104,133,101,0,91],
[91,108,82,110,132,84,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,105,104,111,107,94],
[123,0,120,116,109,120,106,95],
[103,91,0,105,88,113,87,88],
[106,95,106,0,105,111,107,79],
[107,102,123,106,0,127,106,102],
[100,91,98,100,84,0,86,99],
[104,105,124,104,105,125,0,109],
[117,116,123,132,109,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,97,73,120,127,100],
[97,0,108,100,112,153,115,108],
[96,103,0,96,81,114,103,121],
[114,111,115,0,82,124,123,106],
[138,99,130,129,0,135,141,127],
[91,58,97,87,76,0,94,90],
[84,96,108,88,70,117,0,114],
[111,103,90,105,84,121,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,104,109,94,98,87],
[116,0,105,126,92,92,108,120],
[115,106,0,130,100,102,113,106],
[107,85,81,0,89,89,107,95],
[102,119,111,122,0,107,112,135],
[117,119,109,122,104,0,120,110],
[113,103,98,104,99,91,0,113],
[124,91,105,116,76,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,105,104,106,96,104],
[109,0,119,112,101,112,111,113],
[105,92,0,111,92,92,102,100],
[106,99,100,0,95,115,100,96],
[107,110,119,116,0,115,113,105],
[105,99,119,96,96,0,99,108],
[115,100,109,111,98,112,0,104],
[107,98,111,115,106,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,107,103,105,103,114],
[99,0,108,111,110,101,105,98],
[102,103,0,106,102,110,97,104],
[104,100,105,0,99,92,101,98],
[108,101,109,112,0,109,110,101],
[106,110,101,119,102,0,114,107],
[108,106,114,110,101,97,0,113],
[97,113,107,113,110,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,110,112,123,101,109],
[98,0,91,100,114,104,110,89],
[102,120,0,109,124,110,107,110],
[101,111,102,0,104,120,111,93],
[99,97,87,107,0,115,98,92],
[88,107,101,91,96,0,101,96],
[110,101,104,100,113,110,0,103],
[102,122,101,118,119,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,119,127,101,107,113],
[100,0,132,112,104,108,120,111],
[110,79,0,101,107,110,124,96],
[92,99,110,0,99,85,114,85],
[84,107,104,112,0,101,98,95],
[110,103,101,126,110,0,94,96],
[104,91,87,97,113,117,0,82],
[98,100,115,126,116,115,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,92,101,106,98,102],
[119,0,122,116,100,115,106,106],
[101,89,0,99,109,99,93,97],
[119,95,112,0,98,107,100,110],
[110,111,102,113,0,112,92,97],
[105,96,112,104,99,0,86,107],
[113,105,118,111,119,125,0,115],
[109,105,114,101,114,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,100,110,115,118,106,117],
[86,0,101,92,94,95,96,102],
[111,110,0,100,112,103,100,109],
[101,119,111,0,111,115,95,116],
[96,117,99,100,0,96,91,105],
[93,116,108,96,115,0,86,98],
[105,115,111,116,120,125,0,123],
[94,109,102,95,106,113,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,116,92,113,102,87],
[113,0,91,96,93,101,95,94],
[109,120,0,117,111,113,105,106],
[95,115,94,0,97,120,103,107],
[119,118,100,114,0,123,104,100],
[98,110,98,91,88,0,80,87],
[109,116,106,108,107,131,0,97],
[124,117,105,104,111,124,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,93,91,98,119,71],
[113,0,121,113,116,118,109,87],
[106,90,0,100,85,86,112,66],
[118,98,111,0,84,110,133,78],
[120,95,126,127,0,108,145,123],
[113,93,125,101,103,0,128,85],
[92,102,99,78,66,83,0,50],
[140,124,145,133,88,126,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,78,100,111,94,102,97],
[108,0,98,85,102,87,104,80],
[133,113,0,124,141,111,101,125],
[111,126,87,0,110,95,106,95],
[100,109,70,101,0,85,84,81],
[117,124,100,116,126,0,103,112],
[109,107,110,105,127,108,0,104],
[114,131,86,116,130,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,112,103,112,108,107],
[96,0,94,92,96,97,98,103],
[104,117,0,98,111,110,103,103],
[99,119,113,0,103,113,106,108],
[108,115,100,108,0,109,102,105],
[99,114,101,98,102,0,103,108],
[103,113,108,105,109,108,0,114],
[104,108,108,103,106,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,101,130,156,129,142,131],
[69,0,52,101,134,118,124,98],
[110,159,0,132,158,100,152,115],
[81,110,79,0,125,104,106,116],
[55,77,53,86,0,100,112,109],
[82,93,111,107,111,0,105,96],
[69,87,59,105,99,106,0,121],
[80,113,96,95,102,115,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,99,108,112,109,111],
[108,0,113,106,112,110,109,105],
[107,98,0,103,106,102,103,104],
[112,105,108,0,106,108,112,105],
[103,99,105,105,0,102,100,103],
[99,101,109,103,109,0,112,106],
[102,102,108,99,111,99,0,101],
[100,106,107,106,108,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,122,102,112,99,125],
[113,0,108,123,107,117,99,110],
[95,103,0,129,79,91,97,98],
[89,88,82,0,83,88,103,101],
[109,104,132,128,0,113,113,111],
[99,94,120,123,98,0,96,101],
[112,112,114,108,98,115,0,120],
[86,101,113,110,100,110,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,92,98,96,87,111],
[123,0,113,99,133,105,101,117],
[117,98,0,93,113,101,94,116],
[119,112,118,0,121,111,102,118],
[113,78,98,90,0,92,87,101],
[115,106,110,100,119,0,113,131],
[124,110,117,109,124,98,0,129],
[100,94,95,93,110,80,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,96,116,108,117,119,111],
[91,0,96,103,124,113,126,113],
[115,115,0,105,112,129,110,116],
[95,108,106,0,108,100,105,105],
[103,87,99,103,0,92,107,110],
[94,98,82,111,119,0,109,111],
[92,85,101,106,104,102,0,96],
[100,98,95,106,101,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,111,108,107,113,99],
[115,0,112,112,107,112,108,104],
[100,99,0,100,107,104,112,96],
[100,99,111,0,110,103,121,106],
[103,104,104,101,0,111,115,96],
[104,99,107,108,100,0,119,101],
[98,103,99,90,96,92,0,91],
[112,107,115,105,115,110,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,128,105,119,128,115,123],
[100,0,114,102,121,126,104,108],
[83,97,0,87,106,101,88,110],
[106,109,124,0,115,123,95,122],
[92,90,105,96,0,97,93,94],
[83,85,110,88,114,0,92,102],
[96,107,123,116,118,119,0,119],
[88,103,101,89,117,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,125,102,120,99,107,89],
[95,0,109,111,104,112,118,84],
[86,102,0,108,102,102,103,99],
[109,100,103,0,106,93,107,92],
[91,107,109,105,0,108,100,98],
[112,99,109,118,103,0,104,101],
[104,93,108,104,111,107,0,107],
[122,127,112,119,113,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,86,116,106,104,116,97],
[107,0,104,113,97,106,103,98],
[125,107,0,129,103,125,116,111],
[95,98,82,0,100,104,90,92],
[105,114,108,111,0,103,99,110],
[107,105,86,107,108,0,107,103],
[95,108,95,121,112,104,0,102],
[114,113,100,119,101,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,94,103,89,96,91],
[108,0,94,107,103,98,98,99],
[118,117,0,113,115,118,112,99],
[117,104,98,0,106,96,110,108],
[108,108,96,105,0,94,106,110],
[122,113,93,115,117,0,109,112],
[115,113,99,101,105,102,0,92],
[120,112,112,103,101,99,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,56,69,49,53,82],
[109,0,151,116,71,49,71,95],
[116,60,0,123,33,36,40,40],
[155,95,88,0,53,88,79,75],
[142,140,178,158,0,140,95,111],
[162,162,175,123,71,0,111,75],
[158,140,171,132,116,100,0,91],
[129,116,171,136,100,136,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,113,105,94,105,90],
[109,0,119,116,115,109,103,115],
[116,92,0,104,99,92,105,110],
[98,95,107,0,108,103,98,103],
[106,96,112,103,0,95,104,101],
[117,102,119,108,116,0,106,111],
[106,108,106,113,107,105,0,118],
[121,96,101,108,110,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,103,102,100,104,108],
[104,0,102,104,100,99,108,110],
[112,109,0,111,100,101,111,105],
[108,107,100,0,98,97,104,102],
[109,111,111,113,0,100,103,111],
[111,112,110,114,111,0,117,101],
[107,103,100,107,108,94,0,113],
[103,101,106,109,100,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,102,116,112,97,110],
[101,0,101,108,105,109,98,112],
[106,110,0,101,103,117,106,105],
[109,103,110,0,118,122,122,114],
[95,106,108,93,0,116,93,100],
[99,102,94,89,95,0,99,96],
[114,113,105,89,118,112,0,109],
[101,99,106,97,111,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,91,96,91,85,86,104],
[101,0,93,105,105,97,93,106],
[120,118,0,107,124,105,116,128],
[115,106,104,0,111,116,107,114],
[120,106,87,100,0,104,108,100],
[126,114,106,95,107,0,104,126],
[125,118,95,104,103,107,0,123],
[107,105,83,97,111,85,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,116,101,124,130,107],
[101,0,84,97,96,106,123,101],
[101,127,0,104,105,122,123,115],
[95,114,107,0,109,125,137,116],
[110,115,106,102,0,129,128,110],
[87,105,89,86,82,0,104,97],
[81,88,88,74,83,107,0,89],
[104,110,96,95,101,114,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,120,90,95,120,100],
[115,0,133,125,112,114,120,100],
[100,78,0,93,87,92,84,99],
[91,86,118,0,102,79,109,86],
[121,99,124,109,0,93,101,106],
[116,97,119,132,118,0,110,119],
[91,91,127,102,110,101,0,110],
[111,111,112,125,105,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,115,103,107,113,118],
[106,0,97,96,108,102,107,123],
[102,114,0,103,102,105,110,118],
[96,115,108,0,105,113,100,94],
[108,103,109,106,0,96,97,114],
[104,109,106,98,115,0,115,112],
[98,104,101,111,114,96,0,113],
[93,88,93,117,97,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,94,124,122,117,105,116],
[101,0,105,117,103,116,113,115],
[117,106,0,112,103,120,98,103],
[87,94,99,0,97,110,99,99],
[89,108,108,114,0,117,97,101],
[94,95,91,101,94,0,74,103],
[106,98,113,112,114,137,0,112],
[95,96,108,112,110,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,94,81,85,89,87,87],
[124,0,119,108,120,123,104,114],
[117,92,0,94,117,111,104,99],
[130,103,117,0,121,111,103,110],
[126,91,94,90,0,100,94,98],
[122,88,100,100,111,0,103,90],
[124,107,107,108,117,108,0,101],
[124,97,112,101,113,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,106,111,105,109,114],
[106,0,113,105,115,106,112,108],
[98,98,0,100,109,88,103,102],
[105,106,111,0,106,99,115,109],
[100,96,102,105,0,98,106,99],
[106,105,123,112,113,0,111,113],
[102,99,108,96,105,100,0,108],
[97,103,109,102,112,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,118,110,107,123,125,105],
[88,0,136,87,118,101,136,126],
[93,75,0,70,93,72,125,103],
[101,124,141,0,127,155,144,124],
[104,93,118,84,0,93,140,96],
[88,110,139,56,118,0,131,78],
[86,75,86,67,71,80,0,86],
[106,85,108,87,115,133,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,100,115,115,109,107],
[103,0,110,105,109,110,101,112],
[104,101,0,89,106,103,106,108],
[111,106,122,0,112,114,103,116],
[96,102,105,99,0,103,90,99],
[96,101,108,97,108,0,96,107],
[102,110,105,108,121,115,0,116],
[104,99,103,95,112,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,99,92,95,85,96],
[116,0,109,90,119,119,102,121],
[106,102,0,104,91,93,95,117],
[112,121,107,0,102,99,103,111],
[119,92,120,109,0,112,108,113],
[116,92,118,112,99,0,111,120],
[126,109,116,108,103,100,0,116],
[115,90,94,100,98,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,78,102,134,100,87,120],
[97,0,131,93,138,148,126,122],
[133,80,0,108,121,100,118,101],
[109,118,103,0,136,99,129,92],
[77,73,90,75,0,84,85,90],
[111,63,111,112,127,0,107,101],
[124,85,93,82,126,104,0,119],
[91,89,110,119,121,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,82,92,103,97,117,76],
[138,0,112,89,91,79,143,82],
[129,99,0,95,132,114,123,99],
[119,122,116,0,120,57,98,110],
[108,120,79,91,0,78,125,80],
[114,132,97,154,133,0,140,86],
[94,68,88,113,86,71,0,91],
[135,129,112,101,131,125,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,109,130,95,124,92],
[94,0,126,88,100,133,118,112],
[99,85,0,97,109,109,95,78],
[102,123,114,0,109,109,132,120],
[81,111,102,102,0,123,105,108],
[116,78,102,102,88,0,97,83],
[87,93,116,79,106,114,0,107],
[119,99,133,91,103,128,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,111,107,112,109,102],
[89,0,94,77,85,66,78,92],
[102,117,0,119,100,87,90,99],
[100,134,92,0,80,99,96,112],
[104,126,111,131,0,76,98,100],
[99,145,124,112,135,0,108,114],
[102,133,121,115,113,103,0,120],
[109,119,112,99,111,97,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,112,102,101,112,102,111],
[113,0,110,105,110,99,102,107],
[99,101,0,95,107,104,104,99],
[109,106,116,0,108,105,108,108],
[110,101,104,103,0,102,103,110],
[99,112,107,106,109,0,100,107],
[109,109,107,103,108,111,0,123],
[100,104,112,103,101,104,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,98,95,109,101,93],
[94,0,106,97,90,108,96,97],
[104,105,0,104,106,115,106,94],
[113,114,107,0,107,104,113,99],
[116,121,105,104,0,114,112,106],
[102,103,96,107,97,0,107,91],
[110,115,105,98,99,104,0,103],
[118,114,117,112,105,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,103,119,110,109,109],
[102,0,107,101,106,104,111,100],
[109,104,0,116,109,106,105,107],
[108,110,95,0,120,110,101,107],
[92,105,102,91,0,103,108,96],
[101,107,105,101,108,0,107,100],
[102,100,106,110,103,104,0,112],
[102,111,104,104,115,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,111,109,109,101,119],
[96,0,105,108,108,103,95,110],
[104,106,0,109,112,112,107,109],
[100,103,102,0,92,110,101,98],
[102,103,99,119,0,103,97,106],
[102,108,99,101,108,0,102,102],
[110,116,104,110,114,109,0,107],
[92,101,102,113,105,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,118,134,125,120,111],
[116,0,101,120,116,101,114,86],
[103,110,0,95,99,118,99,78],
[93,91,116,0,126,104,111,92],
[77,95,112,85,0,96,92,104],
[86,110,93,107,115,0,107,89],
[91,97,112,100,119,104,0,96],
[100,125,133,119,107,122,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,110,103,98,101,106],
[113,0,108,103,114,112,117,120],
[111,103,0,110,116,109,110,110],
[101,108,101,0,105,101,101,106],
[108,97,95,106,0,110,102,105],
[113,99,102,110,101,0,110,115],
[110,94,101,110,109,101,0,111],
[105,91,101,105,106,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,95,105,93,114,113],
[109,0,107,111,114,99,134,125],
[110,104,0,102,126,99,124,121],
[116,100,109,0,106,110,114,125],
[106,97,85,105,0,88,104,114],
[118,112,112,101,123,0,126,132],
[97,77,87,97,107,85,0,103],
[98,86,90,86,97,79,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,111,113,110,109,106],
[109,0,112,110,117,101,116,102],
[91,99,0,96,103,104,100,83],
[100,101,115,0,96,98,106,102],
[98,94,108,115,0,103,116,108],
[101,110,107,113,108,0,105,94],
[102,95,111,105,95,106,0,104],
[105,109,128,109,103,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,133,119,98,114,124],
[103,0,121,113,98,74,114,124],
[88,90,0,105,89,75,90,108],
[78,98,106,0,66,98,87,99],
[92,113,122,145,0,113,119,112],
[113,137,136,113,98,0,131,106],
[97,97,121,124,92,80,0,114],
[87,87,103,112,99,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,107,118,124,99,130],
[117,0,110,99,130,126,107,126],
[96,101,0,93,119,120,98,117],
[104,112,118,0,126,127,122,124],
[93,81,92,85,0,113,104,114],
[87,85,91,84,98,0,93,118],
[112,104,113,89,107,118,0,125],
[81,85,94,87,97,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,91,115,91,135,123],
[102,0,93,79,67,74,150,102],
[97,118,0,95,98,100,122,103],
[120,132,116,0,99,117,157,108],
[96,144,113,112,0,98,150,133],
[120,137,111,94,113,0,139,109],
[76,61,89,54,61,72,0,87],
[88,109,108,103,78,102,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,99,109,100,113,123],
[95,0,96,85,86,91,104,117],
[113,115,0,103,117,112,113,123],
[112,126,108,0,120,101,118,114],
[102,125,94,91,0,101,101,109],
[111,120,99,110,110,0,104,109],
[98,107,98,93,110,107,0,112],
[88,94,88,97,102,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,117,92,112,109,107],
[106,0,111,119,121,104,100,112],
[108,100,0,97,96,104,101,100],
[94,92,114,0,94,114,101,109],
[119,90,115,117,0,112,101,101],
[99,107,107,97,99,0,79,85],
[102,111,110,110,110,132,0,117],
[104,99,111,102,110,126,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,86,113,113,141,112,125],
[90,0,98,142,151,148,139,124],
[125,113,0,109,77,133,122,101],
[98,69,102,0,98,89,114,75],
[98,60,134,113,0,145,129,100],
[70,63,78,122,66,0,133,101],
[99,72,89,97,82,78,0,95],
[86,87,110,136,111,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,103,107,122,128,96,139],
[75,0,81,62,95,106,96,117],
[108,130,0,90,141,120,113,108],
[104,149,121,0,115,151,123,158],
[89,116,70,96,0,136,109,103],
[83,105,91,60,75,0,65,118],
[115,115,98,88,102,146,0,133],
[72,94,103,53,108,93,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,106,187,125,145,60,94],
[74,0,118,210,82,175,113,117],
[105,93,0,187,137,106,51,121],
[24,1,24,0,32,43,52,1],
[86,129,74,179,0,121,82,74],
[66,36,105,168,90,0,105,105],
[151,98,160,159,129,106,0,129],
[117,94,90,210,137,106,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,83,98,89,90,103,105],
[121,0,91,109,102,100,102,87],
[128,120,0,102,109,111,115,114],
[113,102,109,0,101,104,114,96],
[122,109,102,110,0,111,105,120],
[121,111,100,107,100,0,104,114],
[108,109,96,97,106,107,0,102],
[106,124,97,115,91,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,83,126,110,112,91,111],
[121,0,90,122,99,100,90,93],
[128,121,0,119,114,126,98,121],
[85,89,92,0,123,101,95,80],
[101,112,97,88,0,100,109,100],
[99,111,85,110,111,0,95,96],
[120,121,113,116,102,116,0,116],
[100,118,90,131,111,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,112,108,105,111,121],
[98,0,114,115,99,110,105,119],
[97,97,0,104,92,105,102,105],
[99,96,107,0,97,115,96,104],
[103,112,119,114,0,122,107,113],
[106,101,106,96,89,0,100,105],
[100,106,109,115,104,111,0,108],
[90,92,106,107,98,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,49,63,28,48,49,30],
[133,0,106,113,58,109,77,98],
[162,105,0,109,83,102,116,76],
[148,98,102,0,83,84,70,90],
[183,153,128,128,0,108,95,93],
[163,102,109,127,103,0,61,92],
[162,134,95,141,116,150,0,120],
[181,113,135,121,118,119,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,98,110,113,112,115],
[94,0,107,115,108,117,111,116],
[98,104,0,108,104,110,113,112],
[113,96,103,0,102,104,103,102],
[101,103,107,109,0,103,99,101],
[98,94,101,107,108,0,110,101],
[99,100,98,108,112,101,0,102],
[96,95,99,109,110,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,97,83,139,104,126,113],
[91,0,90,72,132,85,113,104],
[114,121,0,115,149,99,119,106],
[128,139,96,0,157,126,110,121],
[72,79,62,54,0,71,71,107],
[107,126,112,85,140,0,97,106],
[85,98,92,101,140,114,0,100],
[98,107,105,90,104,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,128,111,116,99,116],
[96,0,104,114,102,96,92,112],
[100,107,0,116,105,102,87,101],
[83,97,95,0,93,91,103,107],
[100,109,106,118,0,102,108,116],
[95,115,109,120,109,0,121,102],
[112,119,124,108,103,90,0,112],
[95,99,110,104,95,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,109,122,120,107,92],
[105,0,119,82,90,106,102,117],
[101,92,0,86,112,112,98,100],
[102,129,125,0,129,115,121,98],
[89,121,99,82,0,90,107,89],
[91,105,99,96,121,0,100,85],
[104,109,113,90,104,111,0,113],
[119,94,111,113,122,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,118,108,110,106,108],
[119,0,132,130,105,122,124,113],
[108,79,0,107,92,101,109,93],
[93,81,104,0,85,82,105,87],
[103,106,119,126,0,99,109,96],
[101,89,110,129,112,0,109,107],
[105,87,102,106,102,102,0,100],
[103,98,118,124,115,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,104,133,111,94,112],
[103,0,121,93,118,116,110,129],
[95,90,0,92,93,83,101,108],
[107,118,119,0,98,108,90,104],
[78,93,118,113,0,106,95,125],
[100,95,128,103,105,0,97,94],
[117,101,110,121,116,114,0,126],
[99,82,103,107,86,117,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,99,93,98,109,104],
[108,0,106,111,94,116,108,100],
[107,105,0,105,114,115,99,104],
[112,100,106,0,116,92,111,113],
[118,117,97,95,0,101,96,103],
[113,95,96,119,110,0,103,96],
[102,103,112,100,115,108,0,108],
[107,111,107,98,108,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,103,114,121,107,118],
[87,0,103,95,96,92,99,108],
[106,108,0,87,83,91,81,118],
[108,116,124,0,109,117,104,117],
[97,115,128,102,0,105,87,112],
[90,119,120,94,106,0,97,118],
[104,112,130,107,124,114,0,118],
[93,103,93,94,99,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,100,87,99,119,111],
[112,0,115,106,109,103,90,102],
[104,96,0,94,112,87,119,91],
[111,105,117,0,98,106,116,118],
[124,102,99,113,0,100,106,109],
[112,108,124,105,111,0,113,101],
[92,121,92,95,105,98,0,94],
[100,109,120,93,102,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,101,117,116,111,119],
[108,0,121,98,109,122,105,103],
[113,90,0,93,107,118,94,104],
[110,113,118,0,105,130,107,115],
[94,102,104,106,0,113,97,108],
[95,89,93,81,98,0,83,91],
[100,106,117,104,114,128,0,113],
[92,108,107,96,103,120,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,109,105,113,111,111],
[105,0,106,116,105,118,113,111],
[105,105,0,98,105,110,104,109],
[102,95,113,0,111,118,113,114],
[106,106,106,100,0,108,109,113],
[98,93,101,93,103,0,95,99],
[100,98,107,98,102,116,0,109],
[100,100,102,97,98,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,119,118,103,101,114],
[104,0,106,106,105,104,111,105],
[109,105,0,113,112,111,101,103],
[92,105,98,0,106,100,104,101],
[93,106,99,105,0,102,97,101],
[108,107,100,111,109,0,103,103],
[110,100,110,107,114,108,0,110],
[97,106,108,110,110,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,100,98,104,101,114],
[104,0,106,106,114,113,104,117],
[106,105,0,105,98,113,103,118],
[111,105,106,0,117,102,103,135],
[113,97,113,94,0,96,109,118],
[107,98,98,109,115,0,105,118],
[110,107,108,108,102,106,0,126],
[97,94,93,76,93,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,116,104,112,96,98],
[94,0,102,100,97,96,103,102],
[104,109,0,117,104,108,107,111],
[95,111,94,0,100,96,101,101],
[107,114,107,111,0,109,104,104],
[99,115,103,115,102,0,100,100],
[115,108,104,110,107,111,0,114],
[113,109,100,110,107,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,117,107,97,117,94,111],
[120,0,120,102,92,117,107,101],
[94,91,0,86,101,99,89,102],
[104,109,125,0,102,102,104,101],
[114,119,110,109,0,116,104,119],
[94,94,112,109,95,0,94,114],
[117,104,122,107,107,117,0,125],
[100,110,109,110,92,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,101,103,113,99,94],
[109,0,109,111,120,119,108,101],
[103,102,0,95,104,108,99,96],
[110,100,116,0,122,116,106,114],
[108,91,107,89,0,104,85,94],
[98,92,103,95,107,0,97,88],
[112,103,112,105,126,114,0,98],
[117,110,115,97,117,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,91,95,92,104,92],
[104,0,94,111,89,113,103,101],
[114,117,0,109,89,117,120,91],
[120,100,102,0,111,112,120,107],
[116,122,122,100,0,103,113,120],
[119,98,94,99,108,0,115,97],
[107,108,91,91,98,96,0,95],
[119,110,120,104,91,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,101,86,91,113,92],
[103,0,104,96,109,94,113,93],
[116,107,0,107,95,97,112,97],
[110,115,104,0,108,106,120,99],
[125,102,116,103,0,101,111,96],
[120,117,114,105,110,0,118,107],
[98,98,99,91,100,93,0,84],
[119,118,114,112,115,104,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,112,107,122,116,105],
[89,0,84,101,98,94,106,90],
[104,127,0,110,97,110,117,100],
[99,110,101,0,105,105,110,99],
[104,113,114,106,0,107,114,107],
[89,117,101,106,104,0,110,103],
[95,105,94,101,97,101,0,98],
[106,121,111,112,104,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,101,109,105,95,96],
[105,0,105,113,101,110,110,95],
[101,106,0,98,106,101,94,95],
[110,98,113,0,118,112,106,98],
[102,110,105,93,0,111,95,101],
[106,101,110,99,100,0,101,97],
[116,101,117,105,116,110,0,106],
[115,116,116,113,110,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,103,95,104,103,99],
[100,0,108,98,107,109,111,108],
[100,103,0,104,107,106,108,101],
[108,113,107,0,111,104,107,107],
[116,104,104,100,0,112,109,102],
[107,102,105,107,99,0,113,104],
[108,100,103,104,102,98,0,106],
[112,103,110,104,109,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,93,94,109,116,97,111],
[81,0,85,87,96,95,93,100],
[118,126,0,111,99,120,111,103],
[117,124,100,0,131,120,130,109],
[102,115,112,80,0,117,103,92],
[95,116,91,91,94,0,98,106],
[114,118,100,81,108,113,0,116],
[100,111,108,102,119,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,125,108,109,105,107],
[102,0,95,107,107,97,99,116],
[101,116,0,118,108,120,107,116],
[86,104,93,0,101,110,92,103],
[103,104,103,110,0,104,104,109],
[102,114,91,101,107,0,103,115],
[106,112,104,119,107,108,0,121],
[104,95,95,108,102,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,103,115,117,130,108],
[99,0,103,107,106,107,112,115],
[95,108,0,106,106,112,117,114],
[108,104,105,0,109,110,116,115],
[96,105,105,102,0,117,111,99],
[94,104,99,101,94,0,108,109],
[81,99,94,95,100,103,0,99],
[103,96,97,96,112,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,95,101,121,106,98],
[104,0,122,100,117,120,109,98],
[96,89,0,80,98,99,91,102],
[116,111,131,0,103,114,120,111],
[110,94,113,108,0,109,91,105],
[90,91,112,97,102,0,99,98],
[105,102,120,91,120,112,0,117],
[113,113,109,100,106,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,134,111,118,107,105,93],
[117,0,139,101,118,129,120,95],
[77,72,0,77,94,87,81,78],
[100,110,134,0,130,106,118,124],
[93,93,117,81,0,86,94,90],
[104,82,124,105,125,0,119,101],
[106,91,130,93,117,92,0,96],
[118,116,133,87,121,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,114,117,104,109,82],
[108,0,119,111,88,115,134,102],
[98,92,0,96,113,109,129,94],
[97,100,115,0,64,120,100,69],
[94,123,98,147,0,133,137,133],
[107,96,102,91,78,0,143,75],
[102,77,82,111,74,68,0,93],
[129,109,117,142,78,136,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,83,98,101,94,91],
[116,0,117,95,121,98,101,110],
[102,94,0,102,114,113,100,108],
[128,116,109,0,123,113,111,101],
[113,90,97,88,0,98,94,88],
[110,113,98,98,113,0,111,101],
[117,110,111,100,117,100,0,99],
[120,101,103,110,123,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,105,111,101,112,110],
[106,0,106,113,115,111,104,106],
[113,105,0,106,119,107,87,101],
[106,98,105,0,113,100,100,94],
[100,96,92,98,0,102,95,93],
[110,100,104,111,109,0,106,118],
[99,107,124,111,116,105,0,97],
[101,105,110,117,118,93,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,102,97,110,92,116,104],
[98,0,101,92,96,93,96,102],
[109,110,0,93,109,109,104,114],
[114,119,118,0,107,100,102,123],
[101,115,102,104,0,96,109,106],
[119,118,102,111,115,0,104,122],
[95,115,107,109,102,107,0,117],
[107,109,97,88,105,89,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,86,93,94,83,87],
[123,0,118,127,125,114,114,103],
[105,93,0,98,119,101,104,120],
[125,84,113,0,115,97,107,113],
[118,86,92,96,0,106,116,103],
[117,97,110,114,105,0,108,108],
[128,97,107,104,95,103,0,103],
[124,108,91,98,108,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,86,80,80,95,87,75],
[108,0,90,95,113,95,97,96],
[125,121,0,101,111,118,104,102],
[131,116,110,0,119,103,92,100],
[131,98,100,92,0,99,103,82],
[116,116,93,108,112,0,106,75],
[124,114,107,119,108,105,0,108],
[136,115,109,111,129,136,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,118,94,108,112,112],
[89,0,107,102,89,112,106,93],
[94,104,0,115,97,112,95,103],
[93,109,96,0,88,92,107,91],
[117,122,114,123,0,126,121,100],
[103,99,99,119,85,0,101,103],
[99,105,116,104,90,110,0,110],
[99,118,108,120,111,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,106,112,116,94,96],
[98,0,99,84,99,102,98,94],
[114,112,0,105,116,101,105,90],
[105,127,106,0,119,116,103,108],
[99,112,95,92,0,100,109,102],
[95,109,110,95,111,0,99,100],
[117,113,106,108,102,112,0,97],
[115,117,121,103,109,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,111,108,114,108,103,115],
[88,0,106,101,105,107,102,99],
[100,105,0,102,93,104,93,104],
[103,110,109,0,110,106,108,105],
[97,106,118,101,0,103,101,96],
[103,104,107,105,108,0,103,106],
[108,109,118,103,110,108,0,105],
[96,112,107,106,115,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,116,103,87,98,95,91],
[111,0,105,107,99,116,110,109],
[95,106,0,101,109,97,92,106],
[108,104,110,0,100,107,95,113],
[124,112,102,111,0,114,109,113],
[113,95,114,104,97,0,99,111],
[116,101,119,116,102,112,0,116],
[120,102,105,98,98,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,99,100,108,120,120],
[104,0,97,101,98,96,111,107],
[97,114,0,103,109,110,121,113],
[112,110,108,0,109,103,116,123],
[111,113,102,102,0,106,116,114],
[103,115,101,108,105,0,115,111],
[91,100,90,95,95,96,0,109],
[91,104,98,88,97,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,94,104,112,93,96],
[112,0,116,94,108,117,107,102],
[92,95,0,86,96,106,100,92],
[117,117,125,0,112,118,101,108],
[107,103,115,99,0,114,110,95],
[99,94,105,93,97,0,87,90],
[118,104,111,110,101,124,0,115],
[115,109,119,103,116,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,103,100,86,102,127],
[112,0,102,115,90,89,75,117],
[103,109,0,107,101,105,66,109],
[108,96,104,0,98,85,65,120],
[111,121,110,113,0,111,90,125],
[125,122,106,126,100,0,108,147],
[109,136,145,146,121,103,0,150],
[84,94,102,91,86,64,61,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,102,112,103,113,97],
[104,0,100,100,115,96,124,106],
[111,111,0,102,110,109,117,117],
[109,111,109,0,105,103,111,102],
[99,96,101,106,0,91,103,101],
[108,115,102,108,120,0,130,103],
[98,87,94,100,108,81,0,92],
[114,105,94,109,110,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,101,96,100,107,94],
[111,0,98,109,118,107,98,107],
[119,113,0,109,113,105,119,111],
[110,102,102,0,95,96,100,111],
[115,93,98,116,0,101,99,113],
[111,104,106,115,110,0,111,114],
[104,113,92,111,112,100,0,106],
[117,104,100,100,98,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,119,120,107,113,114],
[103,0,113,119,100,100,121,107],
[111,98,0,94,110,119,92,96],
[92,92,117,0,80,88,99,136],
[91,111,101,131,0,112,96,106],
[104,111,92,123,99,0,112,107],
[98,90,119,112,115,99,0,101],
[97,104,115,75,105,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,108,105,107,127,90],
[93,0,104,107,98,103,110,99],
[108,107,0,89,101,106,127,104],
[103,104,122,0,100,110,97,113],
[106,113,110,111,0,113,99,111],
[104,108,105,101,98,0,93,106],
[84,101,84,114,112,118,0,113],
[121,112,107,98,100,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,96,98,99,109,111,88],
[125,0,121,110,82,79,79,103],
[115,90,0,116,95,117,137,84],
[113,101,95,0,97,68,122,93],
[112,129,116,114,0,87,123,107],
[102,132,94,143,124,0,140,108],
[100,132,74,89,88,71,0,83],
[123,108,127,118,104,103,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,112,107,100,111,111],
[87,0,90,94,89,87,89,98],
[106,121,0,118,103,102,109,114],
[99,117,93,0,98,94,101,105],
[104,122,108,113,0,104,110,107],
[111,124,109,117,107,0,104,112],
[100,122,102,110,101,107,0,101],
[100,113,97,106,104,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,105,111,109,105,116],
[94,0,107,97,103,105,105,104],
[98,104,0,101,93,101,94,104],
[106,114,110,0,108,99,103,109],
[100,108,118,103,0,106,112,103],
[102,106,110,112,105,0,113,111],
[106,106,117,108,99,98,0,103],
[95,107,107,102,108,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,101,120,96,103,98],
[98,0,109,87,105,93,88,93],
[95,102,0,96,112,83,104,99],
[110,124,115,0,132,113,103,102],
[91,106,99,79,0,88,88,97],
[115,118,128,98,123,0,118,114],
[108,123,107,108,123,93,0,103],
[113,118,112,109,114,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,95,78,96,102,92,109],
[119,0,104,115,112,132,129,118],
[116,107,0,112,86,85,103,100],
[133,96,99,0,101,94,115,94],
[115,99,125,110,0,111,128,106],
[109,79,126,117,100,0,119,102],
[119,82,108,96,83,92,0,99],
[102,93,111,117,105,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,108,133,95,130,111,134],
[84,0,100,100,81,82,72,118],
[103,111,0,139,86,140,78,139],
[78,111,72,0,78,100,82,108],
[116,130,125,133,0,95,126,126],
[81,129,71,111,116,0,94,98],
[100,139,133,129,85,117,0,128],
[77,93,72,103,85,113,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,56,79,99,54,107,97,92],
[155,0,142,168,102,137,121,98],
[132,69,0,99,68,126,112,96],
[112,43,112,0,79,109,87,75],
[157,109,143,132,0,132,98,104],
[104,74,85,102,79,0,65,79],
[114,90,99,124,113,146,0,107],
[119,113,115,136,107,132,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,104,98,87,92,111],
[95,0,107,109,95,101,102,124],
[105,104,0,119,98,113,126,102],
[107,102,92,0,96,80,86,97],
[113,116,113,115,0,96,98,124],
[124,110,98,131,115,0,104,121],
[119,109,85,125,113,107,0,129],
[100,87,109,114,87,90,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,106,96,99,99,96],
[96,0,96,97,90,106,89,93],
[109,115,0,98,100,105,100,103],
[105,114,113,0,102,108,107,99],
[115,121,111,109,0,115,104,104],
[112,105,106,103,96,0,104,105],
[112,122,111,104,107,107,0,106],
[115,118,108,112,107,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,110,102,108,112,106],
[119,0,118,114,110,103,114,101],
[110,93,0,107,109,110,118,103],
[101,97,104,0,103,101,107,98],
[109,101,102,108,0,92,111,111],
[103,108,101,110,119,0,113,109],
[99,97,93,104,100,98,0,97],
[105,110,108,113,100,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,108,114,108,113,101],
[112,0,93,110,114,102,109,105],
[116,118,0,108,110,111,124,105],
[103,101,103,0,113,109,103,108],
[97,97,101,98,0,108,108,104],
[103,109,100,102,103,0,109,97],
[98,102,87,108,103,102,0,99],
[110,106,106,103,107,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,81,101,103,105,82],
[113,0,105,95,115,95,116,112],
[114,106,0,91,98,102,106,115],
[130,116,120,0,105,126,100,111],
[110,96,113,106,0,110,102,106],
[108,116,109,85,101,0,97,98],
[106,95,105,111,109,114,0,105],
[129,99,96,100,105,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,113,120,112,103,106],
[108,0,103,101,105,97,103,105],
[104,108,0,95,116,108,98,92],
[98,110,116,0,106,112,93,105],
[91,106,95,105,0,97,99,102],
[99,114,103,99,114,0,112,112],
[108,108,113,118,112,99,0,116],
[105,106,119,106,109,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,102,105,103,90,110],
[110,0,104,102,103,98,86,89],
[107,107,0,106,107,90,95,102],
[109,109,105,0,110,96,108,98],
[106,108,104,101,0,94,88,95],
[108,113,121,115,117,0,89,110],
[121,125,116,103,123,122,0,118],
[101,122,109,113,116,101,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,92,96,101,108,106,99],
[108,0,102,108,111,109,113,99],
[119,109,0,100,106,112,123,107],
[115,103,111,0,117,111,110,95],
[110,100,105,94,0,110,110,94],
[103,102,99,100,101,0,99,98],
[105,98,88,101,101,112,0,99],
[112,112,104,116,117,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,67,131,168,131,115,115],
[143,0,90,90,143,143,90,90],
[144,121,0,158,126,142,91,126],
[80,121,53,0,78,78,53,78],
[43,68,85,133,0,106,133,133],
[80,68,69,133,105,0,75,100],
[96,121,120,158,78,136,0,78],
[96,121,85,133,78,111,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,102,110,121,103,114],
[104,0,118,106,120,110,100,126],
[98,93,0,91,104,102,94,90],
[109,105,120,0,94,114,111,104],
[101,91,107,117,0,119,108,117],
[90,101,109,97,92,0,99,105],
[108,111,117,100,103,112,0,118],
[97,85,121,107,94,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,71,125,88,85,113],
[98,0,161,98,157,177,131,97],
[114,50,0,71,162,85,82,50],
[140,113,140,0,142,177,85,99],
[86,54,49,69,0,86,85,79],
[123,34,126,34,125,0,45,59],
[126,80,129,126,126,166,0,102],
[98,114,161,112,132,152,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,96,112,106,93,103],
[110,0,114,111,132,113,92,114],
[105,97,0,97,108,103,92,108],
[115,100,114,0,117,110,98,119],
[99,79,103,94,0,100,86,97],
[105,98,108,101,111,0,106,105],
[118,119,119,113,125,105,0,110],
[108,97,103,92,114,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,105,108,109,94,102],
[111,0,115,110,116,116,103,106],
[114,96,0,106,111,113,103,101],
[106,101,105,0,114,112,105,102],
[103,95,100,97,0,103,109,100],
[102,95,98,99,108,0,100,97],
[117,108,108,106,102,111,0,108],
[109,105,110,109,111,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,108,108,211,102,143,143],
[0,0,0,41,35,35,0,0],
[103,211,0,41,103,103,170,170],
[103,170,170,0,170,170,170,170],
[0,176,108,41,0,67,108,108],
[109,176,108,41,144,0,108,108],
[68,211,41,41,103,103,0,0],
[68,211,41,41,103,103,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,107,110,106,106,99],
[96,0,107,104,100,103,101,89],
[98,104,0,107,97,103,98,108],
[104,107,104,0,111,109,101,106],
[101,111,114,100,0,100,104,110],
[105,108,108,102,111,0,103,106],
[105,110,113,110,107,108,0,104],
[112,122,103,105,101,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,84,88,120,98,114,112],
[121,0,105,104,114,115,112,122],
[127,106,0,106,128,100,113,123],
[123,107,105,0,127,102,119,115],
[91,97,83,84,0,94,77,103],
[113,96,111,109,117,0,110,110],
[97,99,98,92,134,101,0,111],
[99,89,88,96,108,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,87,121,108,112,87],
[121,0,107,93,124,115,117,102],
[111,104,0,93,98,111,116,107],
[124,118,118,0,109,116,108,94],
[90,87,113,102,0,114,97,130],
[103,96,100,95,97,0,111,99],
[99,94,95,103,114,100,0,100],
[124,109,104,117,81,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,98,93,113,104,99],
[104,0,93,94,91,115,101,86],
[107,118,0,115,108,111,105,111],
[113,117,96,0,100,106,106,96],
[118,120,103,111,0,112,105,101],
[98,96,100,105,99,0,92,100],
[107,110,106,105,106,119,0,94],
[112,125,100,115,110,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,111,61,55,93,92],
[121,0,138,128,107,108,83,114],
[111,73,0,74,68,94,98,112],
[100,83,137,0,97,90,103,114],
[150,104,143,114,0,92,66,102],
[156,103,117,121,119,0,113,124],
[118,128,113,108,145,98,0,124],
[119,97,99,97,109,87,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,59,70,96,74,76],
[116,0,95,90,88,95,79,97],
[113,116,0,97,84,100,80,92],
[152,121,114,0,118,112,86,105],
[141,123,127,93,0,131,99,117],
[115,116,111,99,80,0,82,92],
[137,132,131,125,112,129,0,104],
[135,114,119,106,94,119,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,107,108,107,111,108],
[106,0,105,100,113,109,109,111],
[88,106,0,99,103,102,104,100],
[104,111,112,0,112,112,109,117],
[103,98,108,99,0,98,100,98],
[104,102,109,99,113,0,107,105],
[100,102,107,102,111,104,0,113],
[103,100,111,94,113,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,121,127,137,102,124],
[96,0,109,61,97,108,72,102],
[90,102,0,116,117,133,81,101],
[90,150,95,0,137,112,109,105],
[84,114,94,74,0,76,47,42],
[74,103,78,99,135,0,47,57],
[109,139,130,102,164,164,0,117],
[87,109,110,106,169,154,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,107,110,110,110,112],
[116,0,103,116,116,102,116,101],
[102,108,0,110,104,96,105,101],
[104,95,101,0,112,96,99,100],
[101,95,107,99,0,93,105,119],
[101,109,115,115,118,0,98,120],
[101,95,106,112,106,113,0,106],
[99,110,110,111,92,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,88,96,99,105,75,84],
[103,0,104,89,112,97,82,105],
[123,107,0,99,111,128,108,103],
[115,122,112,0,121,132,95,105],
[112,99,100,90,0,105,105,108],
[106,114,83,79,106,0,94,106],
[136,129,103,116,106,117,0,123],
[127,106,108,106,103,105,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,106,107,132,117,115,87],
[87,0,92,81,105,87,92,78],
[105,119,0,90,125,96,113,108],
[104,130,121,0,128,94,114,107],
[79,106,86,83,0,93,89,96],
[94,124,115,117,118,0,113,98],
[96,119,98,97,122,98,0,112],
[124,133,103,104,115,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,92,98,99,109,110,94],
[125,0,100,92,108,118,113,115],
[119,111,0,106,105,103,115,104],
[113,119,105,0,97,109,101,103],
[112,103,106,114,0,117,117,115],
[102,93,108,102,94,0,113,96],
[101,98,96,110,94,98,0,90],
[117,96,107,108,96,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,109,117,91,109,93],
[119,0,105,95,105,106,120,107],
[111,106,0,98,114,103,110,108],
[102,116,113,0,102,100,120,111],
[94,106,97,109,0,96,109,95],
[120,105,108,111,115,0,116,92],
[102,91,101,91,102,95,0,85],
[118,104,103,100,116,119,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,130,104,93,115,90,97],
[95,0,143,127,103,119,103,115],
[81,68,0,85,84,90,80,84],
[107,84,126,0,80,94,95,82],
[118,108,127,131,0,112,91,99],
[96,92,121,117,99,0,87,94],
[121,108,131,116,120,124,0,103],
[114,96,127,129,112,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,114,141,123,107,103,106],
[86,0,113,123,104,115,113,85],
[97,98,0,122,90,111,107,110],
[70,88,89,0,87,88,83,80],
[88,107,121,124,0,113,101,124],
[104,96,100,123,98,0,98,97],
[108,98,104,128,110,113,0,106],
[105,126,101,131,87,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,101,106,98,103,102,110],
[89,0,106,101,93,106,108,96],
[110,105,0,109,99,119,101,110],
[105,110,102,0,109,98,98,107],
[113,118,112,102,0,107,95,110],
[108,105,92,113,104,0,105,105],
[109,103,110,113,116,106,0,102],
[101,115,101,104,101,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,73,107,99,110,76,89],
[138,0,94,136,111,123,109,121],
[138,117,0,127,114,144,104,119],
[104,75,84,0,96,113,92,95],
[112,100,97,115,0,139,89,100],
[101,88,67,98,72,0,90,93],
[135,102,107,119,122,121,0,109],
[122,90,92,116,111,118,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,106,100,97,90,107],
[102,0,86,99,99,94,99,85],
[120,125,0,113,105,98,95,92],
[105,112,98,0,103,101,105,97],
[111,112,106,108,0,92,104,86],
[114,117,113,110,119,0,101,104],
[121,112,116,106,107,110,0,95],
[104,126,119,114,125,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,97,119,113,118,105,124],
[85,0,97,100,93,103,94,105],
[114,114,0,106,105,106,111,123],
[92,111,105,0,117,115,115,123],
[98,118,106,94,0,99,86,104],
[93,108,105,96,112,0,87,128],
[106,117,100,96,125,124,0,116],
[87,106,88,88,107,83,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,118,109,115,127,110],
[98,0,125,115,107,126,127,125],
[108,86,0,113,98,89,133,103],
[93,96,98,0,98,103,111,98],
[102,104,113,113,0,113,107,98],
[96,85,122,108,98,0,116,108],
[84,84,78,100,104,95,0,89],
[101,86,108,113,113,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,109,103,107,121,119],
[105,0,106,107,101,103,115,117],
[101,105,0,99,111,104,104,115],
[102,104,112,0,103,103,114,125],
[108,110,100,108,0,102,102,119],
[104,108,107,108,109,0,107,120],
[90,96,107,97,109,104,0,120],
[92,94,96,86,92,91,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,125,111,75,109,105,141],
[74,0,121,137,73,117,107,96],
[86,90,0,98,71,126,85,138],
[100,74,113,0,60,74,90,90],
[136,138,140,151,0,96,167,156],
[102,94,85,137,115,0,101,93],
[106,104,126,121,44,110,0,170],
[70,115,73,121,55,118,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,103,114,115,102,100],
[103,0,113,112,98,120,106,117],
[97,98,0,104,100,103,99,108],
[108,99,107,0,97,103,105,101],
[97,113,111,114,0,120,108,115],
[96,91,108,108,91,0,114,105],
[109,105,112,106,103,97,0,108],
[111,94,103,110,96,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,114,102,72,113,91],
[109,0,135,131,105,137,100,95],
[113,76,0,122,114,66,110,68],
[97,80,89,0,122,87,77,83],
[109,106,97,89,0,76,116,75],
[139,74,145,124,135,0,83,108],
[98,111,101,134,95,128,0,88],
[120,116,143,128,136,103,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,123,107,95,114,110,95],
[119,0,115,109,107,99,112,105],
[88,96,0,102,100,100,106,107],
[104,102,109,0,104,94,102,109],
[116,104,111,107,0,116,110,113],
[97,112,111,117,95,0,113,108],
[101,99,105,109,101,98,0,106],
[116,106,104,102,98,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,109,91,118,102,89],
[122,0,110,103,90,121,97,115],
[117,101,0,91,98,129,96,102],
[102,108,120,0,88,112,91,98],
[120,121,113,123,0,109,94,109],
[93,90,82,99,102,0,90,80],
[109,114,115,120,117,121,0,99],
[122,96,109,113,102,131,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,203,159,134,88,134,52,128],
[8,0,167,134,90,136,54,134],
[52,44,0,52,6,50,50,50],
[77,77,159,0,165,159,77,159],
[123,121,205,46,0,205,123,203],
[77,75,161,52,6,0,129,203],
[159,157,161,134,88,82,0,126],
[83,77,161,52,8,8,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,108,111,104,120,116],
[95,0,118,109,98,106,114,104],
[84,93,0,86,96,86,89,86],
[103,102,125,0,111,108,116,111],
[100,113,115,100,0,98,108,110],
[107,105,125,103,113,0,111,110],
[91,97,122,95,103,100,0,101],
[95,107,125,100,101,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,108,102,103,110,112],
[104,0,116,100,101,113,105,112],
[102,95,0,103,106,109,101,104],
[103,111,108,0,108,119,102,103],
[109,110,105,103,0,109,112,102],
[108,98,102,92,102,0,104,100],
[101,106,110,109,99,107,0,108],
[99,99,107,108,109,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,104,102,102,72,76],
[105,0,108,115,91,102,91,104],
[111,103,0,108,85,94,90,96],
[107,96,103,0,92,99,83,93],
[109,120,126,119,0,104,109,113],
[109,109,117,112,107,0,97,119],
[139,120,121,128,102,114,0,109],
[135,107,115,118,98,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,91,103,93,108,105,104],
[94,0,102,100,94,111,102,102],
[120,109,0,104,113,113,110,104],
[108,111,107,0,103,110,105,101],
[118,117,98,108,0,106,97,111],
[103,100,98,101,105,0,106,105],
[106,109,101,106,114,105,0,104],
[107,109,107,110,100,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,96,121,128,113,103,111],
[91,0,85,94,106,104,102,95],
[115,126,0,113,109,94,105,97],
[90,117,98,0,119,121,104,104],
[83,105,102,92,0,101,91,99],
[98,107,117,90,110,0,104,97],
[108,109,106,107,120,107,0,90],
[100,116,114,107,112,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,97,114,108,115,117],
[103,0,103,106,129,80,114,99],
[105,108,0,111,130,97,107,109],
[114,105,100,0,134,122,126,126],
[97,82,81,77,0,77,88,93],
[103,131,114,89,134,0,92,105],
[96,97,104,85,123,119,0,108],
[94,112,102,85,118,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,96,83,119,93,93,88],
[126,0,86,101,126,114,107,105],
[115,125,0,91,120,114,139,111],
[128,110,120,0,133,105,121,117],
[92,85,91,78,0,92,93,85],
[118,97,97,106,119,0,115,99],
[118,104,72,90,118,96,0,90],
[123,106,100,94,126,112,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,82,85,75,94,105],
[104,0,108,107,99,110,106,98],
[108,103,0,106,105,99,95,99],
[129,104,105,0,104,106,102,121],
[126,112,106,107,0,94,101,129],
[136,101,112,105,117,0,111,125],
[117,105,116,109,110,100,0,107],
[106,113,112,90,82,86,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,111,115,103,104,106],
[104,0,109,110,112,111,109,111],
[110,102,0,118,118,110,108,111],
[100,101,93,0,97,93,96,99],
[96,99,93,114,0,89,108,103],
[108,100,101,118,122,0,113,103],
[107,102,103,115,103,98,0,105],
[105,100,100,112,108,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,95,114,92,96,100],
[99,0,104,100,120,98,95,111],
[96,107,0,93,118,96,91,108],
[116,111,118,0,113,105,108,117],
[97,91,93,98,0,89,87,110],
[119,113,115,106,122,0,101,106],
[115,116,120,103,124,110,0,119],
[111,100,103,94,101,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,109,106,109,99,119],
[109,0,121,116,100,113,114,116],
[92,90,0,103,103,101,99,103],
[102,95,108,0,105,98,97,105],
[105,111,108,106,0,111,100,122],
[102,98,110,113,100,0,111,113],
[112,97,112,114,111,100,0,119],
[92,95,108,106,89,98,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,77,104,103,91,83,101],
[137,0,97,116,107,107,106,110],
[134,114,0,103,125,130,119,135],
[107,95,108,0,109,105,107,109],
[108,104,86,102,0,99,97,103],
[120,104,81,106,112,0,113,89],
[128,105,92,104,114,98,0,97],
[110,101,76,102,108,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,108,101,106,110,113],
[108,0,108,102,96,112,97,103],
[110,103,0,97,97,111,99,107],
[103,109,114,0,106,114,93,108],
[110,115,114,105,0,104,102,107],
[105,99,100,97,107,0,101,98],
[101,114,112,118,109,110,0,112],
[98,108,104,103,104,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,100,97,102,95,94,88],
[126,0,119,104,103,94,101,107],
[111,92,0,115,104,102,93,94],
[114,107,96,0,102,97,91,95],
[109,108,107,109,0,103,90,105],
[116,117,109,114,108,0,109,100],
[117,110,118,120,121,102,0,101],
[123,104,117,116,106,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,111,103,110,120,108],
[106,0,97,102,109,100,104,103],
[94,114,0,113,103,94,110,107],
[100,109,98,0,109,103,102,101],
[108,102,108,102,0,101,107,122],
[101,111,117,108,110,0,128,115],
[91,107,101,109,104,83,0,114],
[103,108,104,110,89,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,88,124,98,89,128,115],
[138,0,143,127,103,76,114,144],
[123,68,0,128,93,74,84,113],
[87,84,83,0,101,67,76,114],
[113,108,118,110,0,83,89,125],
[122,135,137,144,128,0,105,136],
[83,97,127,135,122,106,0,144],
[96,67,98,97,86,75,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,107,95,98,123,98,105],
[117,0,107,106,104,116,105,115],
[104,104,0,111,116,122,112,114],
[116,105,100,0,117,115,108,117],
[113,107,95,94,0,111,113,96],
[88,95,89,96,100,0,101,99],
[113,106,99,103,98,110,0,106],
[106,96,97,94,115,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,76,77,80,67,79,73],
[137,0,87,108,108,97,115,97],
[135,124,0,103,111,97,102,91],
[134,103,108,0,103,103,126,89],
[131,103,100,108,0,92,112,112],
[144,114,114,108,119,0,113,94],
[132,96,109,85,99,98,0,82],
[138,114,120,122,99,117,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,94,114,122,102,100,103],
[89,0,93,109,108,109,88,95],
[117,118,0,128,132,115,105,116],
[97,102,83,0,100,96,90,109],
[89,103,79,111,0,123,78,92],
[109,102,96,115,88,0,85,98],
[111,123,106,121,133,126,0,102],
[108,116,95,102,119,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,85,127,114,88,93,109],
[116,0,92,134,123,100,113,93],
[126,119,0,133,112,129,100,120],
[84,77,78,0,98,67,78,103],
[97,88,99,113,0,115,85,108],
[123,111,82,144,96,0,110,123],
[118,98,111,133,126,101,0,105],
[102,118,91,108,103,88,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,124,99,105,106,103,110],
[93,0,101,90,96,86,88,95],
[87,110,0,99,94,87,99,100],
[112,121,112,0,104,105,105,108],
[106,115,117,107,0,93,106,109],
[105,125,124,106,118,0,117,113],
[108,123,112,106,105,94,0,105],
[101,116,111,103,102,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,99,112,107,91,105],
[99,0,93,98,102,109,92,100],
[105,118,0,103,114,109,107,113],
[112,113,108,0,118,113,105,108],
[99,109,97,93,0,113,102,106],
[104,102,102,98,98,0,103,110],
[120,119,104,106,109,108,0,113],
[106,111,98,103,105,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,111,110,129,14,100,76],
[126,0,124,158,156,14,100,118],
[100,87,0,114,74,14,100,114],
[101,53,97,0,111,14,42,133],
[82,55,137,100,0,14,82,158],
[197,197,197,197,197,0,100,173],
[111,111,111,169,129,111,0,91],
[135,93,97,78,53,38,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,110,101,103,116,120],
[103,0,104,93,99,108,91,113],
[94,107,0,108,119,101,88,119],
[101,118,103,0,118,99,105,108],
[110,112,92,93,0,103,105,115],
[108,103,110,112,108,0,113,120],
[95,120,123,106,106,98,0,116],
[91,98,92,103,96,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,98,125,106,110,137],
[109,0,98,118,125,118,108,134],
[119,113,0,126,123,113,101,132],
[113,93,85,0,102,98,112,127],
[86,86,88,109,0,81,108,127],
[105,93,98,113,130,0,113,127],
[101,103,110,99,103,98,0,100],
[74,77,79,84,84,84,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,111,117,111,124,98],
[95,0,97,96,103,109,93,91],
[97,114,0,94,100,117,103,97],
[100,115,117,0,104,115,111,108],
[94,108,111,107,0,114,99,115],
[100,102,94,96,97,0,106,95],
[87,118,108,100,112,105,0,113],
[113,120,114,103,96,116,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,87,80,85,75,73,90],
[126,0,90,97,90,76,96,119],
[124,121,0,98,82,112,99,101],
[131,114,113,0,100,113,93,96],
[126,121,129,111,0,124,111,105],
[136,135,99,98,87,0,103,122],
[138,115,112,118,100,108,0,118],
[121,92,110,115,106,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,95,105,100,96,93],
[119,0,104,111,115,118,113,106],
[121,107,0,116,120,103,123,115],
[116,100,95,0,101,100,109,95],
[106,96,91,110,0,104,112,105],
[111,93,108,111,107,0,102,104],
[115,98,88,102,99,109,0,103],
[118,105,96,116,106,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,99,103,101,107,89],
[119,0,111,107,103,111,104,99],
[108,100,0,96,109,110,96,100],
[112,104,115,0,116,113,118,106],
[108,108,102,95,0,105,93,102],
[110,100,101,98,106,0,107,96],
[104,107,115,93,118,104,0,109],
[122,112,111,105,109,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,93,96,96,106,95],
[117,0,103,105,109,102,107,108],
[120,108,0,103,104,112,111,110],
[118,106,108,0,92,97,110,93],
[115,102,107,119,0,97,116,97],
[115,109,99,114,114,0,113,99],
[105,104,100,101,95,98,0,94],
[116,103,101,118,114,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,148,134,78,120,118,88],
[134,0,126,139,112,102,149,125],
[63,85,0,127,84,113,111,83],
[77,72,84,0,82,97,108,71],
[133,99,127,129,0,131,135,107],
[91,109,98,114,80,0,156,107],
[93,62,100,103,76,55,0,92],
[123,86,128,140,104,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,101,95,116,102,103],
[111,0,106,104,100,106,115,115],
[104,105,0,97,107,104,106,95],
[110,107,114,0,98,122,109,104],
[116,111,104,113,0,123,104,102],
[95,105,107,89,88,0,108,108],
[109,96,105,102,107,103,0,98],
[108,96,116,107,109,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,111,104,129,108,103],
[91,0,90,94,105,106,98,109],
[99,121,0,100,104,126,101,97],
[100,117,111,0,101,134,104,115],
[107,106,107,110,0,123,112,105],
[82,105,85,77,88,0,95,84],
[103,113,110,107,99,116,0,110],
[108,102,114,96,106,127,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,105,108,104,107,110],
[115,0,106,103,101,111,96,106],
[99,105,0,110,106,99,104,104],
[106,108,101,0,102,112,105,100],
[103,110,105,109,0,107,93,110],
[107,100,112,99,104,0,103,96],
[104,115,107,106,118,108,0,114],
[101,105,107,111,101,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,112,102,112,108,130],
[110,0,103,124,113,114,125,116],
[97,108,0,107,111,110,112,117],
[99,87,104,0,103,99,105,109],
[109,98,100,108,0,105,115,118],
[99,97,101,112,106,0,110,108],
[103,86,99,106,96,101,0,109],
[81,95,94,102,93,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,110,102,100,113,106],
[112,0,106,105,113,100,101,104],
[113,105,0,108,111,104,111,110],
[101,106,103,0,89,109,108,109],
[109,98,100,122,0,106,118,115],
[111,111,107,102,105,0,112,120],
[98,110,100,103,93,99,0,107],
[105,107,101,102,96,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,108,110,119,106,129],
[110,0,102,88,103,103,111,127],
[103,109,0,115,112,102,114,121],
[103,123,96,0,86,103,112,129],
[101,108,99,125,0,114,121,121],
[92,108,109,108,97,0,102,114],
[105,100,97,99,90,109,0,110],
[82,84,90,82,90,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,92,97,94,98,103],
[107,0,111,90,98,105,103,93],
[97,100,0,91,100,103,99,101],
[119,121,120,0,112,104,118,107],
[114,113,111,99,0,108,115,116],
[117,106,108,107,103,0,107,102],
[113,108,112,93,96,104,0,101],
[108,118,110,104,95,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,105,105,108,101,103],
[99,0,112,113,100,100,98,108],
[95,99,0,123,101,100,104,99],
[106,98,88,0,92,85,89,87],
[106,111,110,119,0,105,98,98],
[103,111,111,126,106,0,108,98],
[110,113,107,122,113,103,0,107],
[108,103,112,124,113,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,101,94,94,99,97,100],
[128,0,115,112,111,118,105,128],
[110,96,0,115,99,110,116,106],
[117,99,96,0,89,98,111,98],
[117,100,112,122,0,105,105,116],
[112,93,101,113,106,0,116,110],
[114,106,95,100,106,95,0,113],
[111,83,105,113,95,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,105,138,119,119,124,116],
[78,0,98,76,103,97,97,103],
[106,113,0,104,113,100,115,147],
[73,135,107,0,112,100,100,114],
[92,108,98,99,0,84,112,106],
[92,114,111,111,127,0,115,114],
[87,114,96,111,99,96,0,105],
[95,108,64,97,105,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,164,127,121,152,106,139],
[108,0,117,119,132,122,128,97],
[47,94,0,105,113,136,94,98],
[84,92,106,0,124,105,87,93],
[90,79,98,87,0,130,112,124],
[59,89,75,106,81,0,48,109],
[105,83,117,124,99,163,0,127],
[72,114,113,118,87,102,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,87,96,115,116,100],
[108,0,99,106,105,111,114,116],
[114,112,0,110,111,111,105,113],
[124,105,101,0,109,105,114,125],
[115,106,100,102,0,117,122,123],
[96,100,100,106,94,0,125,114],
[95,97,106,97,89,86,0,107],
[111,95,98,86,88,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,80,105,115,62,108,117],
[98,0,73,106,110,114,59,151],
[131,138,0,132,119,116,88,165],
[106,105,79,0,109,101,96,107],
[96,101,92,102,0,83,84,108],
[149,97,95,110,128,0,94,84],
[103,152,123,115,127,117,0,144],
[94,60,46,104,103,127,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,120,130,115,103,115,105],
[105,0,113,124,117,97,102,98],
[91,98,0,104,98,100,103,105],
[81,87,107,0,102,94,93,92],
[96,94,113,109,0,105,102,100],
[108,114,111,117,106,0,99,101],
[96,109,108,118,109,112,0,111],
[106,113,106,119,111,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,100,107,95,100,100],
[113,0,104,111,117,111,115,111],
[104,107,0,110,107,108,109,103],
[111,100,101,0,103,96,106,102],
[104,94,104,108,0,98,126,95],
[116,100,103,115,113,0,101,97],
[111,96,102,105,85,110,0,100],
[111,100,108,109,116,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,88,93,75,87,96,74],
[135,0,120,116,106,105,111,116],
[123,91,0,107,79,91,120,106],
[118,95,104,0,100,115,119,112],
[136,105,132,111,0,116,126,124],
[124,106,120,96,95,0,115,106],
[115,100,91,92,85,96,0,104],
[137,95,105,99,87,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,117,111,111,114,105],
[106,0,104,117,109,113,107,103],
[99,107,0,111,103,89,96,107],
[94,94,100,0,95,103,105,101],
[100,102,108,116,0,107,110,105],
[100,98,122,108,104,0,109,103],
[97,104,115,106,101,102,0,98],
[106,108,104,110,106,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,74,91,96,89,92,108],
[147,0,90,147,133,133,123,124],
[137,121,0,150,124,128,101,138],
[120,64,61,0,96,112,87,95],
[115,78,87,115,0,95,81,96],
[122,78,83,99,116,0,107,97],
[119,88,110,124,130,104,0,109],
[103,87,73,116,115,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,97,123,100,108,103,109],
[86,0,100,103,96,106,88,107],
[114,111,0,120,116,109,114,103],
[88,108,91,0,91,104,92,94],
[111,115,95,120,0,108,111,102],
[103,105,102,107,103,0,109,105],
[108,123,97,119,100,102,0,111],
[102,104,108,117,109,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,110,108,114,100,102],
[99,0,96,109,93,100,104,92],
[94,115,0,97,83,98,99,108],
[101,102,114,0,107,104,93,101],
[103,118,128,104,0,116,111,109],
[97,111,113,107,95,0,120,96],
[111,107,112,118,100,91,0,109],
[109,119,103,110,102,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,114,105,112,108,105],
[94,0,111,117,115,113,119,127],
[102,100,0,113,108,110,102,122],
[97,94,98,0,107,115,113,110],
[106,96,103,104,0,107,104,106],
[99,98,101,96,104,0,100,120],
[103,92,109,98,107,111,0,110],
[106,84,89,101,105,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,100,89,105,140,94],
[110,0,103,79,102,97,122,101],
[101,108,0,100,93,99,132,91],
[111,132,111,0,94,100,152,116],
[122,109,118,117,0,108,133,85],
[106,114,112,111,103,0,120,109],
[71,89,79,59,78,91,0,87],
[117,110,120,95,126,102,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,124,79,115,74,108,91],
[112,0,109,109,95,48,48,115],
[87,102,0,131,131,89,100,77],
[132,102,80,0,144,102,150,120],
[96,116,80,67,0,63,74,102],
[137,163,122,109,148,0,132,78],
[103,163,111,61,137,79,0,120],
[120,96,134,91,109,133,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,124,112,112,110,127],
[109,0,110,110,95,99,110,106],
[103,101,0,107,119,111,124,114],
[87,101,104,0,98,91,94,90],
[99,116,92,113,0,102,106,102],
[99,112,100,120,109,0,108,107],
[101,101,87,117,105,103,0,110],
[84,105,97,121,109,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,112,119,111,113,120],
[104,0,116,92,110,108,106,111],
[108,95,0,89,101,103,106,95],
[99,119,122,0,123,111,127,125],
[92,101,110,88,0,115,88,116],
[100,103,108,100,96,0,96,114],
[98,105,105,84,123,115,0,106],
[91,100,116,86,95,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,96,116,99,78,80,90],
[78,0,85,80,66,41,77,52],
[115,126,0,102,133,97,89,101],
[95,131,109,0,129,74,110,111],
[112,145,78,82,0,82,99,110],
[133,170,114,137,129,0,126,99],
[131,134,122,101,112,85,0,109],
[121,159,110,100,101,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,105,98,106,108,96],
[115,0,98,102,104,99,112,108],
[114,113,0,97,103,108,120,97],
[106,109,114,0,116,105,122,106],
[113,107,108,95,0,112,109,108],
[105,112,103,106,99,0,110,108],
[103,99,91,89,102,101,0,94],
[115,103,114,105,103,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,84,94,100,104,70,98],
[130,0,93,115,120,124,116,101],
[127,118,0,107,105,103,105,90],
[117,96,104,0,135,109,91,114],
[111,91,106,76,0,92,58,94],
[107,87,108,102,119,0,112,105],
[141,95,106,120,153,99,0,105],
[113,110,121,97,117,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,104,112,87,96,106],
[108,0,115,115,114,95,112,96],
[106,96,0,111,99,82,91,95],
[107,96,100,0,97,85,107,102],
[99,97,112,114,0,84,92,93],
[124,116,129,126,127,0,100,106],
[115,99,120,104,119,111,0,97],
[105,115,116,109,118,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,118,115,105,112,118],
[103,0,112,109,112,108,104,108],
[104,99,0,122,108,107,105,115],
[93,102,89,0,108,103,98,112],
[96,99,103,103,0,92,97,98],
[106,103,104,108,119,0,93,112],
[99,107,106,113,114,118,0,122],
[93,103,96,99,113,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,107,103,117,104,99,98],
[116,0,111,124,124,105,109,116],
[104,100,0,108,117,113,106,106],
[108,87,103,0,108,103,108,105],
[94,87,94,103,0,116,94,106],
[107,106,98,108,95,0,102,116],
[112,102,105,103,117,109,0,116],
[113,95,105,106,105,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,88,95,88,93,107],
[103,0,102,92,93,103,108,106],
[103,109,0,121,92,96,101,115],
[123,119,90,0,92,105,106,94],
[116,118,119,119,0,115,125,100],
[123,108,115,106,96,0,111,118],
[118,103,110,105,86,100,0,107],
[104,105,96,117,111,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,127,133,96,114,158,118],
[98,0,101,136,89,89,127,84],
[84,110,0,108,91,84,110,107],
[78,75,103,0,79,63,130,89],
[115,122,120,132,0,97,115,110],
[97,122,127,148,114,0,136,105],
[53,84,101,81,96,75,0,65],
[93,127,104,122,101,106,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,107,113,105,95,100,98],
[80,0,95,102,90,84,94,81],
[104,116,0,96,112,102,102,97],
[98,109,115,0,123,95,96,89],
[106,121,99,88,0,96,96,107],
[116,127,109,116,115,0,101,113],
[111,117,109,115,115,110,0,95],
[113,130,114,122,104,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,126,115,103,110,107],
[94,0,97,101,96,108,93,95],
[101,114,0,111,111,116,110,117],
[85,110,100,0,105,98,104,101],
[96,115,100,106,0,98,112,115],
[108,103,95,113,113,0,108,110],
[101,118,101,107,99,103,0,113],
[104,116,94,110,96,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,96,111,119,109,106,112],
[94,0,100,106,111,104,100,96],
[115,111,0,115,119,109,104,108],
[100,105,96,0,105,98,103,99],
[92,100,92,106,0,98,96,95],
[102,107,102,113,113,0,106,96],
[105,111,107,108,115,105,0,112],
[99,115,103,112,116,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,104,96,103,95,97],
[102,0,95,102,94,96,97,96],
[113,116,0,117,105,107,109,104],
[107,109,94,0,101,107,106,103],
[115,117,106,110,0,113,102,108],
[108,115,104,104,98,0,105,99],
[116,114,102,105,109,106,0,113],
[114,115,107,108,103,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,107,106,103,117,100],
[96,0,104,100,93,93,100,86],
[99,107,0,99,102,102,108,107],
[104,111,112,0,97,101,130,88],
[105,118,109,114,0,103,112,89],
[108,118,109,110,108,0,122,103],
[94,111,103,81,99,89,0,92],
[111,125,104,123,122,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,97,101,104,102,109],
[104,0,119,115,121,101,104,105],
[101,92,0,121,108,99,109,104],
[114,96,90,0,100,112,101,95],
[110,90,103,111,0,108,99,97],
[107,110,112,99,103,0,95,101],
[109,107,102,110,112,116,0,108],
[102,106,107,116,114,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,110,110,107,107,117],
[103,0,109,101,95,94,116,110],
[106,102,0,106,95,120,98,122],
[101,110,105,0,115,110,111,122],
[101,116,116,96,0,112,112,119],
[104,117,91,101,99,0,104,113],
[104,95,113,100,99,107,0,113],
[94,101,89,89,92,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,94,111,113,101,109,112],
[71,0,102,108,94,100,81,116],
[117,109,0,102,125,120,102,115],
[100,103,109,0,109,122,113,126],
[98,117,86,102,0,84,77,133],
[110,111,91,89,127,0,124,128],
[102,130,109,98,134,87,0,117],
[99,95,96,85,78,83,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,98,119,95,96,109],
[100,0,115,110,116,111,107,112],
[93,96,0,105,92,97,103,89],
[113,101,106,0,114,93,109,94],
[92,95,119,97,0,93,92,89],
[116,100,114,118,118,0,110,102],
[115,104,108,102,119,101,0,110],
[102,99,122,117,122,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,88,98,102,105,110,100],
[98,0,91,102,108,100,108,106],
[123,120,0,112,105,122,112,117],
[113,109,99,0,102,111,116,108],
[109,103,106,109,0,115,108,107],
[106,111,89,100,96,0,111,104],
[101,103,99,95,103,100,0,101],
[111,105,94,103,104,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,103,116,116,118,107],
[96,0,113,107,112,105,115,104],
[92,98,0,84,100,95,97,101],
[108,104,127,0,113,110,112,117],
[95,99,111,98,0,108,111,94],
[95,106,116,101,103,0,109,101],
[93,96,114,99,100,102,0,95],
[104,107,110,94,117,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,122,105,98,99,98,103],
[94,0,103,106,104,97,100,95],
[89,108,0,98,98,104,108,103],
[106,105,113,0,107,100,112,107],
[113,107,113,104,0,114,106,102],
[112,114,107,111,97,0,111,109],
[113,111,103,99,105,100,0,102],
[108,116,108,104,109,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,106,107,112,114,100],
[94,0,94,95,97,98,88,107],
[103,117,0,120,100,103,104,99],
[105,116,91,0,105,93,120,98],
[104,114,111,106,0,112,111,112],
[99,113,108,118,99,0,105,111],
[97,123,107,91,100,106,0,101],
[111,104,112,113,99,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,104,129,103,119,107],
[110,0,102,120,139,117,110,110],
[103,109,0,102,113,89,134,85],
[107,91,109,0,116,98,100,91],
[82,72,98,95,0,67,83,97],
[108,94,122,113,144,0,129,97],
[92,101,77,111,128,82,0,90],
[104,101,126,120,114,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,107,119,123,121,112],
[95,0,95,97,106,108,102,93],
[106,116,0,104,106,108,104,94],
[104,114,107,0,106,119,106,92],
[92,105,105,105,0,116,106,99],
[88,103,103,92,95,0,105,87],
[90,109,107,105,105,106,0,92],
[99,118,117,119,112,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,114,114,106,104,105],
[112,0,93,106,106,97,102,102],
[105,118,0,112,110,109,105,107],
[97,105,99,0,112,104,96,100],
[97,105,101,99,0,102,97,98],
[105,114,102,107,109,0,106,106],
[107,109,106,115,114,105,0,107],
[106,109,104,111,113,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,88,90,91,97,112],
[105,0,98,86,107,93,84,104],
[98,113,0,97,111,93,103,117],
[123,125,114,0,109,112,103,115],
[121,104,100,102,0,109,103,123],
[120,118,118,99,102,0,98,110],
[114,127,108,108,108,113,0,95],
[99,107,94,96,88,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,145,121,66,88,81,97],
[126,0,130,108,125,119,95,123],
[66,81,0,137,84,103,66,107],
[90,103,74,0,87,84,81,82],
[145,86,127,124,0,124,119,95],
[123,92,108,127,87,0,118,92],
[130,116,145,130,92,93,0,119],
[114,88,104,129,116,119,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,77,73,88,81,84,76],
[100,0,82,80,76,93,84,86],
[134,129,0,108,115,101,100,96],
[138,131,103,0,121,113,102,123],
[123,135,96,90,0,87,102,109],
[130,118,110,98,124,0,109,109],
[127,127,111,109,109,102,0,96],
[135,125,115,88,102,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,98,104,99,116,102],
[113,0,106,104,122,105,108,114],
[110,105,0,106,116,109,120,112],
[113,107,105,0,116,102,114,117],
[107,89,95,95,0,89,105,97],
[112,106,102,109,122,0,114,114],
[95,103,91,97,106,97,0,102],
[109,97,99,94,114,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,106,107,102,96,112],
[121,0,109,115,101,110,104,115],
[111,102,0,103,99,97,104,109],
[105,96,108,0,100,98,101,107],
[104,110,112,111,0,108,106,113],
[109,101,114,113,103,0,115,108],
[115,107,107,110,105,96,0,109],
[99,96,102,104,98,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,84,69,42,72,47,73],
[160,0,73,153,106,112,129,114],
[127,138,0,154,89,93,107,120],
[142,58,57,0,68,71,86,115],
[169,105,122,143,0,113,131,117],
[139,99,118,140,98,0,111,132],
[164,82,104,125,80,100,0,141],
[138,97,91,96,94,79,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,137,111,97,144,138,134],
[102,0,114,101,119,107,123,153],
[74,97,0,94,104,97,97,103],
[100,110,117,0,130,114,136,127],
[114,92,107,81,0,113,106,108],
[67,104,114,97,98,0,105,131],
[73,88,114,75,105,106,0,110],
[77,58,108,84,103,80,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,89,73,86,71,99,102],
[117,0,132,98,104,121,104,109],
[122,79,0,110,109,96,108,100],
[138,113,101,0,123,112,111,114],
[125,107,102,88,0,111,115,102],
[140,90,115,99,100,0,111,105],
[112,107,103,100,96,100,0,111],
[109,102,111,97,109,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,121,112,139,111,127,98],
[121,0,125,102,124,120,106,122],
[90,86,0,110,100,116,100,76],
[99,109,101,0,125,132,118,105],
[72,87,111,86,0,112,82,99],
[100,91,95,79,99,0,97,110],
[84,105,111,93,129,114,0,94],
[113,89,135,106,112,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,104,116,112,94,101],
[88,0,78,86,104,66,72,74],
[105,133,0,95,135,107,86,103],
[107,125,116,0,128,107,104,109],
[95,107,76,83,0,100,77,87],
[99,145,104,104,111,0,110,120],
[117,139,125,107,134,101,0,122],
[110,137,108,102,124,91,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,106,96,106,104,117],
[104,0,102,111,84,91,91,99],
[106,109,0,114,94,87,105,107],
[105,100,97,0,81,95,96,92],
[115,127,117,130,0,94,127,128],
[105,120,124,116,117,0,114,131],
[107,120,106,115,84,97,0,118],
[94,112,104,119,83,80,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,108,116,106,107,101],
[105,0,103,110,111,118,105,110],
[111,108,0,116,105,101,109,110],
[103,101,95,0,105,99,111,103],
[95,100,106,106,0,105,95,101],
[105,93,110,112,106,0,110,117],
[104,106,102,100,116,101,0,100],
[110,101,101,108,110,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,90,101,113,110,96],
[105,0,110,90,104,108,105,103],
[102,101,0,100,104,116,113,109],
[121,121,111,0,109,130,123,103],
[110,107,107,102,0,111,124,120],
[98,103,95,81,100,0,111,95],
[101,106,98,88,87,100,0,90],
[115,108,102,108,91,116,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,94,104,97,109,102],
[121,0,116,106,115,119,126,100],
[105,95,0,98,103,104,107,102],
[117,105,113,0,111,118,106,107],
[107,96,108,100,0,98,104,99],
[114,92,107,93,113,0,113,107],
[102,85,104,105,107,98,0,92],
[109,111,109,104,112,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,99,113,108,88,106],
[103,0,99,107,103,92,91,100],
[102,112,0,96,131,88,101,107],
[112,104,115,0,109,106,84,97],
[98,108,80,102,0,91,98,105],
[103,119,123,105,120,0,117,111],
[123,120,110,127,113,94,0,109],
[105,111,104,114,106,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,107,110,105,99,96],
[113,0,112,122,114,116,105,115],
[102,99,0,116,106,103,107,99],
[104,89,95,0,103,93,97,98],
[101,97,105,108,0,94,105,100],
[106,95,108,118,117,0,114,107],
[112,106,104,114,106,97,0,108],
[115,96,112,113,111,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,112,110,97,112,126],
[109,0,105,122,111,109,99,128],
[97,106,0,100,115,109,99,123],
[99,89,111,0,104,108,95,111],
[101,100,96,107,0,107,113,117],
[114,102,102,103,104,0,111,131],
[99,112,112,116,98,100,0,123],
[85,83,88,100,94,80,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,101,104,103,106,104],
[102,0,98,111,94,112,93,93],
[109,113,0,103,113,115,111,110],
[110,100,108,0,104,115,110,109],
[107,117,98,107,0,119,103,115],
[108,99,96,96,92,0,93,99],
[105,118,100,101,108,118,0,96],
[107,118,101,102,96,112,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,85,90,98,91,93,116],
[112,0,93,104,88,79,88,104],
[126,118,0,108,99,99,97,117],
[121,107,103,0,104,103,102,110],
[113,123,112,107,0,107,107,103],
[120,132,112,108,104,0,113,123],
[118,123,114,109,104,98,0,118],
[95,107,94,101,108,88,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,116,108,119,140,130],
[108,0,105,107,108,134,130,118],
[98,106,0,97,102,108,120,121],
[95,104,114,0,108,123,136,128],
[103,103,109,103,0,123,115,111],
[92,77,103,88,88,0,119,110],
[71,81,91,75,96,92,0,113],
[81,93,90,83,100,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,113,115,119,104,112],
[99,0,110,112,110,103,88,124],
[93,101,0,116,104,108,100,116],
[98,99,95,0,103,100,94,98],
[96,101,107,108,0,113,108,101],
[92,108,103,111,98,0,93,104],
[107,123,111,117,103,118,0,125],
[99,87,95,113,110,107,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,110,98,98,100,94],
[116,0,119,106,100,92,104,91],
[121,92,0,111,96,95,105,92],
[101,105,100,0,112,108,118,99],
[113,111,115,99,0,91,103,111],
[113,119,116,103,120,0,107,97],
[111,107,106,93,108,104,0,116],
[117,120,119,112,100,114,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,119,116,114,109,100,111],
[95,0,107,102,93,100,107,108],
[92,104,0,100,96,103,103,104],
[95,109,111,0,105,109,110,107],
[97,118,115,106,0,108,105,114],
[102,111,108,102,103,0,99,110],
[111,104,108,101,106,112,0,109],
[100,103,107,104,97,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,102,101,94,94,103],
[111,0,113,98,102,93,111,106],
[94,98,0,97,97,80,100,107],
[109,113,114,0,102,100,122,111],
[110,109,114,109,0,110,103,108],
[117,118,131,111,101,0,106,106],
[117,100,111,89,108,105,0,118],
[108,105,104,100,103,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,113,105,112,173,152,138],
[34,0,70,110,48,97,137,128],
[98,141,0,84,49,149,119,129],
[106,101,127,0,40,106,115,77],
[99,163,162,171,0,166,158,158],
[38,114,62,105,45,0,102,127],
[59,74,92,96,53,109,0,88],
[73,83,82,134,53,84,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,111,109,94,99,94],
[112,0,106,112,93,98,100,106],
[118,105,0,118,111,115,111,98],
[100,99,93,0,94,94,92,98],
[102,118,100,117,0,110,105,102],
[117,113,96,117,101,0,100,108],
[112,111,100,119,106,111,0,101],
[117,105,113,113,109,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,99,99,101,100,111],
[99,0,102,114,95,111,92,99],
[97,109,0,82,95,93,97,92],
[112,97,129,0,104,115,101,95],
[112,116,116,107,0,93,107,101],
[110,100,118,96,118,0,107,101],
[111,119,114,110,104,104,0,108],
[100,112,119,116,110,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,118,126,118,103,109],
[105,0,115,122,126,107,106,115],
[93,96,0,101,112,107,94,94],
[93,89,110,0,113,109,100,115],
[85,85,99,98,0,95,94,102],
[93,104,104,102,116,0,97,108],
[108,105,117,111,117,114,0,121],
[102,96,117,96,109,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,104,106,109,121,132],
[100,0,93,110,107,111,117,130],
[104,118,0,126,105,126,117,136],
[107,101,85,0,103,120,132,129],
[105,104,106,108,0,117,113,131],
[102,100,85,91,94,0,111,109],
[90,94,94,79,98,100,0,119],
[79,81,75,82,80,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,118,112,109,99,111],
[113,0,104,104,114,110,110,109],
[113,107,0,110,109,114,113,104],
[93,107,101,0,113,111,102,98],
[99,97,102,98,0,98,90,102],
[102,101,97,100,113,0,91,94],
[112,101,98,109,121,120,0,112],
[100,102,107,113,109,117,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,92,93,82,92,104],
[108,0,114,109,103,88,100,108],
[113,97,0,88,90,91,86,106],
[119,102,123,0,96,94,109,101],
[118,108,121,115,0,106,103,114],
[129,123,120,117,105,0,107,123],
[119,111,125,102,108,104,0,115],
[107,103,105,110,97,88,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,115,107,103,104,106],
[102,0,114,115,100,104,108,87],
[97,97,0,102,106,104,104,95],
[96,96,109,0,97,114,112,96],
[104,111,105,114,0,116,109,96],
[108,107,107,97,95,0,93,100],
[107,103,107,99,102,118,0,94],
[105,124,116,115,115,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,99,114,96,109,96],
[113,0,110,114,107,99,103,103],
[98,101,0,96,100,101,104,101],
[112,97,115,0,107,107,97,114],
[97,104,111,104,0,104,95,104],
[115,112,110,104,107,0,110,111],
[102,108,107,114,116,101,0,102],
[115,108,110,97,107,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,104,94,97,107,98],
[108,0,117,94,109,109,125,112],
[101,94,0,88,91,95,116,100],
[107,117,123,0,105,112,116,126],
[117,102,120,106,0,109,117,105],
[114,102,116,99,102,0,106,107],
[104,86,95,95,94,105,0,105],
[113,99,111,85,106,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,110,118,110,109,105],
[97,0,111,96,112,94,106,106],
[103,100,0,104,105,96,103,103],
[101,115,107,0,114,99,109,113],
[93,99,106,97,0,98,94,88],
[101,117,115,112,113,0,113,114],
[102,105,108,102,117,98,0,103],
[106,105,108,98,123,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,100,122,112,133,120],
[116,0,102,110,122,98,139,105],
[103,109,0,91,119,106,117,129],
[111,101,120,0,129,119,139,135],
[89,89,92,82,0,114,119,84],
[99,113,105,92,97,0,127,102],
[78,72,94,72,92,84,0,77],
[91,106,82,76,127,109,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,95,88,91,91,98,84],
[124,0,109,102,112,107,99,100],
[116,102,0,91,86,96,127,108],
[123,109,120,0,97,112,123,113],
[120,99,125,114,0,121,135,103],
[120,104,115,99,90,0,114,100],
[113,112,84,88,76,97,0,86],
[127,111,103,98,108,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,89,88,95,96,104,93],
[113,0,78,89,103,102,97,107],
[122,133,0,103,112,106,119,104],
[123,122,108,0,112,92,106,91],
[116,108,99,99,0,113,115,105],
[115,109,105,119,98,0,106,101],
[107,114,92,105,96,105,0,94],
[118,104,107,120,106,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,116,104,105,106,103],
[101,0,106,123,105,101,117,114],
[91,105,0,111,97,110,104,104],
[95,88,100,0,92,96,95,88],
[107,106,114,119,0,106,120,99],
[106,110,101,115,105,0,107,103],
[105,94,107,116,91,104,0,101],
[108,97,107,123,112,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,110,104,112,92,109],
[102,0,112,116,97,119,93,106],
[111,99,0,113,103,107,109,110],
[101,95,98,0,101,110,99,105],
[107,114,108,110,0,109,94,108],
[99,92,104,101,102,0,103,90],
[119,118,102,112,117,108,0,113],
[102,105,101,106,103,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,128,140,108,104,122],
[112,0,59,83,109,73,109,104],
[93,152,0,139,179,138,140,135],
[83,128,72,0,127,120,122,122],
[71,102,32,84,0,115,81,126],
[103,138,73,91,96,0,61,87],
[107,102,71,89,130,150,0,108],
[89,107,76,89,85,124,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,113,122,105,95,113],
[103,0,108,116,114,112,105,123],
[101,103,0,110,111,107,107,113],
[98,95,101,0,111,111,93,105],
[89,97,100,100,0,98,101,107],
[106,99,104,100,113,0,104,108],
[116,106,104,118,110,107,0,123],
[98,88,98,106,104,103,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,90,142,119,108,111,87],
[95,0,72,90,73,82,90,84],
[121,139,0,111,83,106,113,95],
[69,121,100,0,108,81,82,103],
[92,138,128,103,0,101,111,122],
[103,129,105,130,110,0,106,106],
[100,121,98,129,100,105,0,106],
[124,127,116,108,89,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,131,109,122,102,116,92],
[97,0,131,123,105,129,104,108],
[80,80,0,88,91,73,81,88],
[102,88,123,0,97,99,92,98],
[89,106,120,114,0,113,110,101],
[109,82,138,112,98,0,116,98],
[95,107,130,119,101,95,0,108],
[119,103,123,113,110,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,95,109,102,111,100,114],
[86,0,93,89,92,93,83,101],
[116,118,0,117,115,102,105,119],
[102,122,94,0,111,108,113,123],
[109,119,96,100,0,114,115,100],
[100,118,109,103,97,0,104,105],
[111,128,106,98,96,107,0,111],
[97,110,92,88,111,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,91,108,107,112,116],
[95,0,114,105,109,105,112,113],
[107,97,0,112,101,108,79,107],
[120,106,99,0,101,95,113,112],
[103,102,110,110,0,103,100,107],
[104,106,103,116,108,0,106,107],
[99,99,132,98,111,105,0,105],
[95,98,104,99,104,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,99,98,104,107,91],
[113,0,100,103,112,105,115,101],
[109,111,0,103,102,103,113,110],
[112,108,108,0,105,106,112,98],
[113,99,109,106,0,113,111,105],
[107,106,108,105,98,0,100,96],
[104,96,98,99,100,111,0,93],
[120,110,101,113,106,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,103,101,103,103,107],
[109,0,100,105,104,93,104,100],
[116,111,0,109,119,109,106,104],
[108,106,102,0,109,101,103,93],
[110,107,92,102,0,100,100,98],
[108,118,102,110,111,0,113,105],
[108,107,105,108,111,98,0,108],
[104,111,107,118,113,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,110,106,111,104,120],
[100,0,99,101,96,95,92,103],
[114,112,0,95,110,115,98,113],
[101,110,116,0,103,114,115,105],
[105,115,101,108,0,118,97,113],
[100,116,96,97,93,0,102,101],
[107,119,113,96,114,109,0,109],
[91,108,98,106,98,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,114,114,143,94,103,103],
[82,0,91,113,107,100,112,116],
[97,120,0,77,109,97,120,118],
[97,98,134,0,120,69,102,98],
[68,104,102,91,0,89,79,117],
[117,111,114,142,122,0,119,99],
[108,99,91,109,132,92,0,129],
[108,95,93,113,94,112,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,120,75,112,102,112,108],
[111,0,107,113,112,100,123,98],
[91,104,0,97,107,112,113,112],
[136,98,114,0,116,98,116,117],
[99,99,104,95,0,103,106,111],
[109,111,99,113,108,0,107,95],
[99,88,98,95,105,104,0,97],
[103,113,99,94,100,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,66,107,107,43,77,75],
[137,0,76,120,140,62,69,116],
[145,135,0,149,141,107,148,104],
[104,91,62,0,105,100,127,83],
[104,71,70,106,0,100,101,140],
[168,149,104,111,111,0,107,147],
[134,142,63,84,110,104,0,97],
[136,95,107,128,71,64,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,96,133,156,99,91,111],
[97,0,29,130,133,74,109,126],
[115,182,0,171,163,174,98,148],
[78,81,40,0,56,63,51,71],
[55,78,48,155,0,63,37,37],
[112,137,37,148,148,0,73,134],
[120,102,113,160,174,138,0,72],
[100,85,63,140,174,77,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,98,115,101,94,103],
[102,0,125,125,113,97,106,126],
[120,86,0,108,109,100,99,111],
[113,86,103,0,99,92,95,119],
[96,98,102,112,0,92,89,100],
[110,114,111,119,119,0,90,114],
[117,105,112,116,122,121,0,132],
[108,85,100,92,111,97,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,114,103,102,90,102,96],
[134,0,134,138,123,103,122,128],
[97,77,0,100,107,96,88,96],
[108,73,111,0,95,84,98,88],
[109,88,104,116,0,99,99,107],
[121,108,115,127,112,0,105,113],
[109,89,123,113,112,106,0,113],
[115,83,115,123,104,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,65,84,101,82,100,85],
[131,0,101,89,118,128,112,105],
[146,110,0,123,125,118,121,91],
[127,122,88,0,120,109,136,114],
[110,93,86,91,0,108,117,104],
[129,83,93,102,103,0,130,117],
[111,99,90,75,94,81,0,100],
[126,106,120,97,107,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,103,109,115,107,110],
[97,0,106,91,105,108,116,109],
[104,105,0,108,110,106,110,119],
[108,120,103,0,105,115,113,111],
[102,106,101,106,0,112,108,111],
[96,103,105,96,99,0,108,105],
[104,95,101,98,103,103,0,107],
[101,102,92,100,100,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,89,87,103,98,102],
[114,0,107,99,101,104,100,121],
[108,104,0,98,111,105,107,111],
[122,112,113,0,100,116,109,123],
[124,110,100,111,0,114,104,128],
[108,107,106,95,97,0,99,117],
[113,111,104,102,107,112,0,117],
[109,90,100,88,83,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,114,94,117,105,121],
[102,0,112,113,100,116,113,111],
[108,99,0,107,106,111,102,119],
[97,98,104,0,84,109,106,114],
[117,111,105,127,0,109,114,121],
[94,95,100,102,102,0,105,111],
[106,98,109,105,97,106,0,109],
[90,100,92,97,90,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,115,119,138,97,108,106],
[84,0,101,108,113,101,99,112],
[96,110,0,113,118,98,103,105],
[92,103,98,0,112,90,88,98],
[73,98,93,99,0,91,102,87],
[114,110,113,121,120,0,103,109],
[103,112,108,123,109,108,0,103],
[105,99,106,113,124,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,89,86,97,112,84,82],
[103,0,107,79,87,99,97,95],
[122,104,0,84,93,106,100,84],
[125,132,127,0,105,114,109,101],
[114,124,118,106,0,102,104,86],
[99,112,105,97,109,0,105,73],
[127,114,111,102,107,106,0,126],
[129,116,127,110,125,138,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,57,83,113,54,69,141,100],
[154,0,153,98,124,131,146,118],
[128,58,0,114,81,88,117,161],
[98,113,97,0,123,41,102,114],
[157,87,130,88,0,44,117,106],
[142,80,123,170,167,0,102,157],
[70,65,94,109,94,109,0,85],
[111,93,50,97,105,54,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,87,100,88,179,81,101],
[100,0,70,114,79,138,99,91],
[124,141,0,107,133,124,97,130],
[111,97,104,0,143,126,115,127],
[123,132,78,68,0,122,101,155],
[32,73,87,85,89,0,74,101],
[130,112,114,96,110,137,0,123],
[110,120,81,84,56,110,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,100,102,98,102,102],
[110,0,113,100,107,101,101,108],
[103,98,0,103,114,103,108,116],
[111,111,108,0,106,99,96,109],
[109,104,97,105,0,104,96,110],
[113,110,108,112,107,0,93,111],
[109,110,103,115,115,118,0,101],
[109,103,95,102,101,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,77,91,92,74,100,94],
[136,0,121,120,106,105,114,116],
[134,90,0,100,115,102,112,87],
[120,91,111,0,108,95,114,92],
[119,105,96,103,0,110,125,84],
[137,106,109,116,101,0,114,109],
[111,97,99,97,86,97,0,87],
[117,95,124,119,127,102,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,106,118,108,105,99],
[101,0,104,93,107,102,103,96],
[109,107,0,103,106,97,97,109],
[105,118,108,0,120,111,109,97],
[93,104,105,91,0,97,101,92],
[103,109,114,100,114,0,102,95],
[106,108,114,102,110,109,0,111],
[112,115,102,114,119,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,99,107,116,117,122],
[113,0,110,99,109,122,104,103],
[108,101,0,101,102,117,112,107],
[112,112,110,0,103,116,115,110],
[104,102,109,108,0,112,117,109],
[95,89,94,95,99,0,105,109],
[94,107,99,96,94,106,0,97],
[89,108,104,101,102,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,94,92,99,96,96],
[115,0,111,106,100,110,104,117],
[113,100,0,103,101,102,101,106],
[117,105,108,0,100,96,108,104],
[119,111,110,111,0,105,105,112],
[112,101,109,115,106,0,104,110],
[115,107,110,103,106,107,0,117],
[115,94,105,107,99,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,96,95,90,108,85,109],
[125,0,99,100,103,108,105,120],
[115,112,0,103,102,128,100,128],
[116,111,108,0,110,121,105,127],
[121,108,109,101,0,116,109,114],
[103,103,83,90,95,0,80,119],
[126,106,111,106,102,131,0,125],
[102,91,83,84,97,92,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,124,116,107,112,97],
[99,0,106,109,110,105,114,103],
[96,105,0,118,104,107,119,99],
[87,102,93,0,95,94,104,88],
[95,101,107,116,0,108,106,99],
[104,106,104,117,103,0,120,108],
[99,97,92,107,105,91,0,89],
[114,108,112,123,112,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,117,108,99,114,102],
[101,0,124,117,100,114,113,128],
[102,87,0,108,104,117,101,131],
[94,94,103,0,90,120,107,126],
[103,111,107,121,0,125,109,129],
[112,97,94,91,86,0,86,111],
[97,98,110,104,102,125,0,120],
[109,83,80,85,82,100,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,109,91,121,101,119],
[111,0,111,110,103,115,103,116],
[118,100,0,96,88,104,115,123],
[102,101,115,0,106,133,98,129],
[120,108,123,105,0,114,112,111],
[90,96,107,78,97,0,98,111],
[110,108,96,113,99,113,0,114],
[92,95,88,82,100,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,120,156,129,67,81],
[102,0,157,105,123,145,132,111],
[99,54,0,97,110,96,125,82],
[91,106,114,0,132,93,105,82],
[55,88,101,79,0,91,76,60],
[82,66,115,118,120,0,89,63],
[144,79,86,106,135,122,0,98],
[130,100,129,129,151,148,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,118,112,118,115,93],
[113,0,137,139,111,121,92,117],
[93,74,0,91,84,104,95,87],
[93,72,120,0,96,106,116,76],
[99,100,127,115,0,120,116,109],
[93,90,107,105,91,0,89,107],
[96,119,116,95,95,122,0,102],
[118,94,124,135,102,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,99,89,91,105,101,110],
[125,0,106,85,106,100,108,87],
[112,105,0,97,90,111,112,91],
[122,126,114,0,83,115,107,113],
[120,105,121,128,0,124,108,116],
[106,111,100,96,87,0,94,100],
[110,103,99,104,103,117,0,110],
[101,124,120,98,95,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,113,125,113,106,104],
[95,0,128,106,120,103,117,105],
[83,83,0,106,120,92,97,77],
[98,105,105,0,113,106,107,103],
[86,91,91,98,0,80,83,86],
[98,108,119,105,131,0,104,91],
[105,94,114,104,128,107,0,108],
[107,106,134,108,125,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,107,108,109,104,103],
[102,0,113,101,97,106,109,105],
[102,98,0,103,86,107,104,98],
[104,110,108,0,99,106,109,105],
[103,114,125,112,0,121,125,113],
[102,105,104,105,90,0,114,106],
[107,102,107,102,86,97,0,104],
[108,106,113,106,98,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,108,106,100,101,86],
[100,0,113,92,107,103,102,98],
[103,98,0,102,96,101,100,101],
[103,119,109,0,105,103,107,104],
[105,104,115,106,0,106,105,98],
[111,108,110,108,105,0,112,107],
[110,109,111,104,106,99,0,109],
[125,113,110,107,113,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,101,100,101,101,96],
[110,0,96,102,100,107,101,107],
[116,115,0,113,109,106,101,102],
[110,109,98,0,103,100,102,101],
[111,111,102,108,0,113,106,100],
[110,104,105,111,98,0,112,106],
[110,110,110,109,105,99,0,101],
[115,104,109,110,111,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,82,102,100,64,84,93],
[128,0,97,121,120,101,97,110],
[129,114,0,121,126,108,105,113],
[109,90,90,0,105,90,86,89],
[111,91,85,106,0,95,90,101],
[147,110,103,121,116,0,108,100],
[127,114,106,125,121,103,0,127],
[118,101,98,122,110,111,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,88,101,97,106,87],
[108,0,95,96,95,117,121,107],
[107,116,0,91,104,120,116,95],
[123,115,120,0,111,113,106,87],
[110,116,107,100,0,99,115,84],
[114,94,91,98,112,0,108,87],
[105,90,95,105,96,103,0,83],
[124,104,116,124,127,124,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,115,104,104,113,114,109],
[94,0,115,103,95,97,99,86],
[96,96,0,105,95,95,101,93],
[107,108,106,0,106,101,103,96],
[107,116,116,105,0,115,105,106],
[98,114,116,110,96,0,111,99],
[97,112,110,108,106,100,0,104],
[102,125,118,115,105,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,114,104,97,110,110,106],
[122,0,114,120,97,115,126,111],
[97,97,0,112,106,98,94,97],
[107,91,99,0,91,89,102,101],
[114,114,105,120,0,111,108,96],
[101,96,113,122,100,0,93,104],
[101,85,117,109,103,118,0,96],
[105,100,114,110,115,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,103,104,96,87,104],
[103,0,108,94,102,104,107,119],
[119,103,0,100,113,121,103,110],
[108,117,111,0,110,126,105,118],
[107,109,98,101,0,116,98,112],
[115,107,90,85,95,0,89,115],
[124,104,108,106,113,122,0,118],
[107,92,101,93,99,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,90,97,115,121,100],
[103,0,106,93,108,95,114,112],
[101,105,0,110,84,96,105,114],
[121,118,101,0,101,95,113,114],
[114,103,127,110,0,112,122,99],
[96,116,115,116,99,0,100,112],
[90,97,106,98,89,111,0,115],
[111,99,97,97,112,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,131,120,86,92,104],
[117,0,91,126,104,86,82,103],
[106,120,0,119,85,101,112,103],
[80,85,92,0,95,80,90,101],
[91,107,126,116,0,109,133,124],
[125,125,110,131,102,0,112,122],
[119,129,99,121,78,99,0,113],
[107,108,108,110,87,89,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,105,104,102,89,100],
[98,0,109,97,101,103,97,103],
[104,102,0,95,91,95,85,96],
[106,114,116,0,99,112,109,112],
[107,110,120,112,0,102,107,102],
[109,108,116,99,109,0,100,105],
[122,114,126,102,104,111,0,121],
[111,108,115,99,109,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,86,69,103,88,106,149],
[97,0,81,97,71,80,120,73],
[125,130,0,81,111,106,140,124],
[142,114,130,0,98,145,107,97],
[108,140,100,113,0,103,123,110],
[123,131,105,66,108,0,125,132],
[105,91,71,104,88,86,0,92],
[62,138,87,114,101,79,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,84,101,99,92,104,93],
[118,0,101,88,114,103,97,103],
[127,110,0,110,113,107,104,126],
[110,123,101,0,115,104,116,118],
[112,97,98,96,0,84,97,101],
[119,108,104,107,127,0,106,116],
[107,114,107,95,114,105,0,110],
[118,108,85,93,110,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,128,104,112,124,121,125],
[94,0,141,128,120,116,113,138],
[83,70,0,73,103,84,99,121],
[107,83,138,0,112,117,111,139],
[99,91,108,99,0,105,122,123],
[87,95,127,94,106,0,122,134],
[90,98,112,100,89,89,0,109],
[86,73,90,72,88,77,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,93,97,100,107,91],
[110,0,109,106,96,106,115,103],
[108,102,0,94,96,98,105,94],
[118,105,117,0,107,107,118,104],
[114,115,115,104,0,114,118,100],
[111,105,113,104,97,0,117,106],
[104,96,106,93,93,94,0,95],
[120,108,117,107,111,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,148,63,108,103,97,77],
[69,0,108,55,82,115,89,81],
[63,103,0,60,67,105,111,87],
[148,156,151,0,97,144,155,164],
[103,129,144,114,0,140,159,108],
[108,96,106,67,71,0,138,108],
[114,122,100,56,52,73,0,86],
[134,130,124,47,103,103,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,107,97,92,100,97],
[111,0,112,116,101,111,110,116],
[109,99,0,107,91,94,93,102],
[104,95,104,0,95,88,107,98],
[114,110,120,116,0,98,108,102],
[119,100,117,123,113,0,116,115],
[111,101,118,104,103,95,0,97],
[114,95,109,113,109,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,109,116,112,105,103],
[121,0,117,115,135,114,116,105],
[104,94,0,111,110,113,98,97],
[102,96,100,0,115,101,98,104],
[95,76,101,96,0,95,102,92],
[99,97,98,110,116,0,103,99],
[106,95,113,113,109,108,0,112],
[108,106,114,107,119,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,103,109,103,110,108],
[101,0,112,97,100,98,108,100],
[96,99,0,94,86,84,111,108],
[108,114,117,0,99,107,110,111],
[102,111,125,112,0,110,106,112],
[108,113,127,104,101,0,116,118],
[101,103,100,101,105,95,0,107],
[103,111,103,100,99,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,95,107,115,88,101],
[105,0,108,107,103,123,104,118],
[115,103,0,106,101,112,94,111],
[116,104,105,0,113,121,101,112],
[104,108,110,98,0,123,108,118],
[96,88,99,90,88,0,90,102],
[123,107,117,110,103,121,0,115],
[110,93,100,99,93,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,100,110,112,111,120],
[96,0,98,103,82,106,99,117],
[105,113,0,104,91,113,96,124],
[111,108,107,0,110,110,98,103],
[101,129,120,101,0,120,100,123],
[99,105,98,101,91,0,91,122],
[100,112,115,113,111,120,0,123],
[91,94,87,108,88,89,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,115,103,111,111,100],
[103,0,112,105,105,100,112,98],
[99,99,0,108,107,103,99,97],
[96,106,103,0,105,101,99,99],
[108,106,104,106,0,104,103,108],
[100,111,108,110,107,0,102,111],
[100,99,112,112,108,109,0,109],
[111,113,114,112,103,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,105,107,97,91,101],
[107,0,108,98,102,94,94,92],
[112,103,0,106,101,87,102,111],
[106,113,105,0,118,109,110,109],
[104,109,110,93,0,93,99,106],
[114,117,124,102,118,0,120,116],
[120,117,109,101,112,91,0,109],
[110,119,100,102,105,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,98,103,98,112,100],
[105,0,109,90,100,90,108,95],
[108,102,0,94,100,87,96,106],
[113,121,117,0,107,104,116,122],
[108,111,111,104,0,98,112,114],
[113,121,124,107,113,0,109,101],
[99,103,115,95,99,102,0,105],
[111,116,105,89,97,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,106,124,104,100,127],
[96,0,105,92,110,111,109,106],
[101,106,0,92,114,120,108,104],
[105,119,119,0,125,104,114,105],
[87,101,97,86,0,89,84,85],
[107,100,91,107,122,0,93,102],
[111,102,103,97,127,118,0,102],
[84,105,107,106,126,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,111,110,114,107,102],
[113,0,110,110,106,131,120,102],
[102,101,0,97,103,111,111,101],
[100,101,114,0,115,117,110,114],
[101,105,108,96,0,108,113,93],
[97,80,100,94,103,0,108,91],
[104,91,100,101,98,103,0,91],
[109,109,110,97,118,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,111,107,108,106,106],
[104,0,106,108,97,108,107,94],
[107,105,0,122,108,102,115,98],
[100,103,89,0,95,104,100,86],
[104,114,103,116,0,106,100,124],
[103,103,109,107,105,0,101,93],
[105,104,96,111,111,110,0,110],
[105,117,113,125,87,118,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,97,98,83,101,98,107],
[123,0,111,113,104,102,100,109],
[114,100,0,117,98,103,106,102],
[113,98,94,0,97,92,102,103],
[128,107,113,114,0,110,95,111],
[110,109,108,119,101,0,104,107],
[113,111,105,109,116,107,0,106],
[104,102,109,108,100,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,104,102,121,105,98],
[100,0,100,90,87,114,107,92],
[105,111,0,102,107,121,102,97],
[107,121,109,0,105,126,99,103],
[109,124,104,106,0,113,103,102],
[90,97,90,85,98,0,89,94],
[106,104,109,112,108,122,0,110],
[113,119,114,108,109,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,106,114,127,120,105],
[113,0,121,121,116,111,104,114],
[102,90,0,106,112,96,95,82],
[105,90,105,0,112,119,114,101],
[97,95,99,99,0,114,97,92],
[84,100,115,92,97,0,99,109],
[91,107,116,97,114,112,0,114],
[106,97,129,110,119,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,138,117,105,106,97,94],
[111,0,126,115,107,102,91,106],
[73,85,0,74,79,86,75,82],
[94,96,137,0,93,110,86,104],
[106,104,132,118,0,90,103,107],
[105,109,125,101,121,0,88,100],
[114,120,136,125,108,123,0,105],
[117,105,129,107,104,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,95,108,97,113,118],
[100,0,87,93,94,98,105,103],
[105,124,0,107,107,102,115,121],
[116,118,104,0,111,115,131,120],
[103,117,104,100,0,104,123,118],
[114,113,109,96,107,0,111,112],
[98,106,96,80,88,100,0,104],
[93,108,90,91,93,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,112,107,100,112,107],
[95,0,114,107,101,90,95,106],
[107,97,0,118,109,102,81,110],
[99,104,93,0,99,95,95,95],
[104,110,102,112,0,109,98,102],
[111,121,109,116,102,0,98,116],
[99,116,130,116,113,113,0,109],
[104,105,101,116,109,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,103,110,134,106,82],
[109,0,86,131,117,126,114,91],
[98,125,0,115,123,129,138,119],
[108,80,96,0,131,90,115,78],
[101,94,88,80,0,105,101,66],
[77,85,82,121,106,0,115,76],
[105,97,73,96,110,96,0,108],
[129,120,92,133,145,135,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,105,99,102,109,107],
[106,0,118,104,109,108,102,111],
[106,93,0,108,103,97,106,107],
[106,107,103,0,93,111,104,118],
[112,102,108,118,0,106,111,123],
[109,103,114,100,105,0,113,119],
[102,109,105,107,100,98,0,114],
[104,100,104,93,88,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,60,94,121,88,119,96,139],
[151,0,99,130,115,140,132,167],
[117,112,0,139,150,135,95,141],
[90,81,72,0,81,99,88,109],
[123,96,61,130,0,83,85,127],
[92,71,76,112,128,0,69,94],
[115,79,116,123,126,142,0,130],
[72,44,70,102,84,117,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,123,102,117,117,118],
[100,0,79,118,100,109,100,119],
[115,132,0,117,120,108,112,105],
[88,93,94,0,100,109,101,96],
[109,111,91,111,0,107,102,99],
[94,102,103,102,104,0,103,93],
[94,111,99,110,109,108,0,96],
[93,92,106,115,112,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,105,125,92,132,113],
[103,0,113,104,100,102,142,102],
[103,98,0,113,89,96,146,93],
[106,107,98,0,97,98,141,107],
[86,111,122,114,0,110,138,116],
[119,109,115,113,101,0,113,116],
[79,69,65,70,73,98,0,80],
[98,109,118,104,95,95,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,115,103,97,109,109],
[93,0,96,104,90,97,110,86],
[100,115,0,119,102,97,115,109],
[96,107,92,0,92,94,106,91],
[108,121,109,119,0,106,103,111],
[114,114,114,117,105,0,123,109],
[102,101,96,105,108,88,0,104],
[102,125,102,120,100,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,120,152,94,95,110],
[101,0,115,143,122,130,116,138],
[115,96,0,126,163,119,121,125],
[91,68,85,0,120,119,85,90],
[59,89,48,91,0,77,72,71],
[117,81,92,92,134,0,83,120],
[116,95,90,126,139,128,0,104],
[101,73,86,121,140,91,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,110,93,108,99,99],
[107,0,110,110,113,107,110,103],
[106,101,0,100,103,108,109,98],
[101,101,111,0,99,103,94,98],
[118,98,108,112,0,111,108,110],
[103,104,103,108,100,0,100,97],
[112,101,102,117,103,111,0,98],
[112,108,113,113,101,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,109,100,90,115,107],
[101,0,98,110,115,101,100,109],
[110,113,0,124,111,108,116,105],
[102,101,87,0,106,106,103,101],
[111,96,100,105,0,104,115,110],
[121,110,103,105,107,0,118,114],
[96,111,95,108,96,93,0,109],
[104,102,106,110,101,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,120,113,101,116,110],
[97,0,91,103,92,90,106,108],
[101,120,0,124,101,122,120,97],
[91,108,87,0,102,99,109,89],
[98,119,110,109,0,111,109,116],
[110,121,89,112,100,0,110,101],
[95,105,91,102,102,101,0,100],
[101,103,114,122,95,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,108,96,103,99,95],
[113,0,122,117,127,112,109,100],
[105,89,0,94,115,99,101,97],
[103,94,117,0,116,95,106,98],
[115,84,96,95,0,95,94,97],
[108,99,112,116,116,0,109,109],
[112,102,110,105,117,102,0,104],
[116,111,114,113,114,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,93,111,102,118,111,120],
[81,0,75,77,59,85,82,60],
[118,136,0,103,126,165,118,79],
[100,134,108,0,120,139,111,123],
[109,152,85,91,0,137,126,83],
[93,126,46,72,74,0,122,93],
[100,129,93,100,85,89,0,68],
[91,151,132,88,128,118,143,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,121,132,127,100,107,124],
[86,0,127,131,122,112,116,129],
[90,84,0,111,108,118,89,107],
[79,80,100,0,99,105,84,120],
[84,89,103,112,0,103,87,111],
[111,99,93,106,108,0,94,123],
[104,95,122,127,124,117,0,119],
[87,82,104,91,100,88,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,92,97,93,83,99],
[113,0,105,113,110,96,100,116],
[113,106,0,96,100,104,93,110],
[119,98,115,0,99,116,106,117],
[114,101,111,112,0,107,106,108],
[118,115,107,95,104,0,109,113],
[128,111,118,105,105,102,0,122],
[112,95,101,94,103,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,130,124,108,88,111,112],
[126,0,92,101,119,109,93,150],
[81,119,0,108,117,83,113,110],
[87,110,103,0,107,84,82,113],
[103,92,94,104,0,89,104,109],
[123,102,128,127,122,0,109,125],
[100,118,98,129,107,102,0,128],
[99,61,101,98,102,86,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,122,130,129,129,116],
[89,0,88,81,96,110,86,100],
[106,123,0,106,96,103,104,107],
[89,130,105,0,111,123,126,123],
[81,115,115,100,0,101,112,91],
[82,101,108,88,110,0,101,102],
[82,125,107,85,99,110,0,116],
[95,111,104,88,120,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,83,99,88,93,99],
[112,0,126,98,94,109,94,104],
[95,85,0,81,74,88,94,89],
[128,113,130,0,97,116,114,125],
[112,117,137,114,0,104,117,125],
[123,102,123,95,107,0,111,112],
[118,117,117,97,94,100,0,106],
[112,107,122,86,86,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,104,101,99,93,104],
[111,0,116,119,93,107,110,108],
[100,95,0,117,92,98,105,98],
[107,92,94,0,86,84,97,98],
[110,118,119,125,0,110,97,111],
[112,104,113,127,101,0,105,121],
[118,101,106,114,114,106,0,114],
[107,103,113,113,100,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,84,116,113,108,77,108],
[117,0,95,119,88,102,93,113],
[127,116,0,125,115,116,100,120],
[95,92,86,0,87,91,96,99],
[98,123,96,124,0,109,101,119],
[103,109,95,120,102,0,111,126],
[134,118,111,115,110,100,0,146],
[103,98,91,112,92,85,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,118,108,135,123,111,105],
[96,0,105,118,121,108,88,90],
[93,106,0,102,124,103,84,92],
[103,93,109,0,129,117,78,87],
[76,90,87,82,0,83,78,87],
[88,103,108,94,128,0,94,89],
[100,123,127,133,133,117,0,118],
[106,121,119,124,124,122,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,98,114,109,105,115],
[123,0,105,129,127,122,121,120],
[111,106,0,103,111,114,111,120],
[113,82,108,0,105,104,103,105],
[97,84,100,106,0,104,95,103],
[102,89,97,107,107,0,99,93],
[106,90,100,108,116,112,0,115],
[96,91,91,106,108,118,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,98,105,114,103,106],
[103,0,102,105,103,101,94,103],
[105,109,0,93,115,105,104,101],
[113,106,118,0,98,111,110,109],
[106,108,96,113,0,98,100,106],
[97,110,106,100,113,0,106,105],
[108,117,107,101,111,105,0,110],
[105,108,110,102,105,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,142,143,127,133,136,124],
[120,0,117,128,111,121,109,99],
[69,94,0,88,110,98,109,104],
[68,83,123,0,145,91,89,110],
[84,100,101,66,0,90,106,109],
[78,90,113,120,121,0,103,126],
[75,102,102,122,105,108,0,108],
[87,112,107,101,102,85,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,108,102,101,100,99],
[104,0,109,99,111,103,107,103],
[114,102,0,104,105,104,105,108],
[103,112,107,0,108,106,104,99],
[109,100,106,103,0,104,95,110],
[110,108,107,105,107,0,101,106],
[111,104,106,107,116,110,0,102],
[112,108,103,112,101,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,123,78,93,62,94,87],
[131,0,146,128,168,72,167,122],
[88,65,0,67,107,61,78,80],
[133,83,144,0,131,112,122,98],
[118,43,104,80,0,94,133,106],
[149,139,150,99,117,0,139,112],
[117,44,133,89,78,72,0,78],
[124,89,131,113,105,99,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,95,102,106,111,102],
[109,0,104,97,107,108,111,99],
[103,107,0,91,99,104,94,96],
[116,114,120,0,122,132,104,110],
[109,104,112,89,0,111,101,101],
[105,103,107,79,100,0,104,92],
[100,100,117,107,110,107,0,103],
[109,112,115,101,110,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,105,111,115,107,106],
[108,0,95,103,99,105,107,101],
[117,116,0,111,111,110,115,102],
[106,108,100,0,103,104,100,102],
[100,112,100,108,0,113,104,113],
[96,106,101,107,98,0,101,101],
[104,104,96,111,107,110,0,113],
[105,110,109,109,98,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,88,121,99,104,114,110],
[99,0,96,120,106,104,117,109],
[123,115,0,119,97,96,110,94],
[90,91,92,0,87,93,109,92],
[112,105,114,124,0,108,109,107],
[107,107,115,118,103,0,111,95],
[97,94,101,102,102,100,0,110],
[101,102,117,119,104,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,119,95,111,122,106],
[104,0,115,120,106,115,123,113],
[100,96,0,101,88,102,109,100],
[92,91,110,0,91,104,104,91],
[116,105,123,120,0,121,115,117],
[100,96,109,107,90,0,104,102],
[89,88,102,107,96,107,0,102],
[105,98,111,120,94,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,119,102,104,114,107],
[104,0,116,112,110,111,121,113],
[114,95,0,106,104,98,101,115],
[92,99,105,0,93,107,95,103],
[109,101,107,118,0,108,101,114],
[107,100,113,104,103,0,111,111],
[97,90,110,116,110,100,0,102],
[104,98,96,108,97,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,105,118,117,119,106,106],
[81,0,94,96,99,105,98,94],
[106,117,0,107,103,118,111,100],
[93,115,104,0,118,118,110,94],
[94,112,108,93,0,101,96,88],
[92,106,93,93,110,0,91,94],
[105,113,100,101,115,120,0,99],
[105,117,111,117,123,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,103,100,100,106,109],
[105,0,97,100,108,98,100,118],
[115,114,0,104,116,109,109,114],
[108,111,107,0,109,101,98,112],
[111,103,95,102,0,95,96,108],
[111,113,102,110,116,0,100,107],
[105,111,102,113,115,111,0,107],
[102,93,97,99,103,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,82,96,68,89,89,103],
[126,0,80,110,81,102,97,119],
[129,131,0,121,106,129,104,126],
[115,101,90,0,86,99,113,115],
[143,130,105,125,0,121,111,134],
[122,109,82,112,90,0,86,106],
[122,114,107,98,100,125,0,118],
[108,92,85,96,77,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,117,111,99,113,112],
[108,0,90,111,117,123,95,125],
[112,121,0,120,120,112,104,119],
[94,100,91,0,105,100,109,111],
[100,94,91,106,0,94,110,95],
[112,88,99,111,117,0,101,103],
[98,116,107,102,101,110,0,112],
[99,86,92,100,116,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,83,104,105,100,100,93],
[117,0,111,130,119,131,117,104],
[128,100,0,120,113,123,111,117],
[107,81,91,0,92,105,97,97],
[106,92,98,119,0,128,93,98],
[111,80,88,106,83,0,88,100],
[111,94,100,114,118,123,0,101],
[118,107,94,114,113,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,101,107,99,97,101],
[110,0,102,109,114,104,106,96],
[99,109,0,105,108,97,85,101],
[110,102,106,0,108,100,106,99],
[104,97,103,103,0,97,105,104],
[112,107,114,111,114,0,96,116],
[114,105,126,105,106,115,0,100],
[110,115,110,112,107,95,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,120,107,99,106,133,100],
[90,0,95,79,112,111,91,103],
[91,116,0,89,98,108,113,85],
[104,132,122,0,104,123,148,105],
[112,99,113,107,0,99,108,113],
[105,100,103,88,112,0,110,101],
[78,120,98,63,103,101,0,72],
[111,108,126,106,98,110,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,87,41,143,32,62,66],
[123,0,55,34,145,89,89,148],
[124,156,0,124,179,124,90,93],
[170,177,87,0,170,114,55,114],
[68,66,32,41,0,7,41,100],
[179,122,87,97,204,0,152,148],
[149,122,121,156,170,59,0,59],
[145,63,118,97,111,63,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,106,98,102,117,112],
[104,0,101,93,89,99,101,103],
[105,110,0,96,99,102,115,96],
[105,118,115,0,106,113,112,110],
[113,122,112,105,0,114,118,109],
[109,112,109,98,97,0,104,97],
[94,110,96,99,93,107,0,109],
[99,108,115,101,102,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,109,112,111,107,103],
[100,0,116,94,109,103,110,111],
[102,95,0,92,98,94,97,89],
[102,117,119,0,110,98,100,106],
[99,102,113,101,0,101,102,108],
[100,108,117,113,110,0,107,113],
[104,101,114,111,109,104,0,101],
[108,100,122,105,103,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,130,131,96,109,125],
[92,0,120,114,136,133,77,131],
[111,91,0,112,94,80,74,108],
[81,97,99,0,92,87,67,109],
[80,75,117,119,0,97,67,123],
[115,78,131,124,114,0,66,116],
[102,134,137,144,144,145,0,143],
[86,80,103,102,88,95,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,123,123,93,109,118,117],
[108,0,95,114,105,97,102,109],
[88,116,0,120,106,79,120,121],
[88,97,91,0,107,74,98,102],
[118,106,105,104,0,116,106,125],
[102,114,132,137,95,0,125,121],
[93,109,91,113,105,86,0,117],
[94,102,90,109,86,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,108,106,95,107,93,106],
[90,0,102,97,98,98,97,96],
[103,109,0,94,110,108,101,79],
[105,114,117,0,102,111,107,98],
[116,113,101,109,0,103,116,103],
[104,113,103,100,108,0,99,82],
[118,114,110,104,95,112,0,98],
[105,115,132,113,108,129,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,131,116,125,143,93,127],
[76,0,109,103,98,86,81,70],
[80,102,0,115,57,86,85,91],
[95,108,96,0,97,95,106,106],
[86,113,154,114,0,116,115,111],
[68,125,125,116,95,0,119,105],
[118,130,126,105,96,92,0,110],
[84,141,120,105,100,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,99,89,91,94,91],
[117,0,95,110,113,103,120,110],
[120,116,0,127,103,115,107,108],
[112,101,84,0,99,93,99,83],
[122,98,108,112,0,105,131,97],
[120,108,96,118,106,0,112,99],
[117,91,104,112,80,99,0,84],
[120,101,103,128,114,112,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,102,107,107,123,109],
[96,0,113,99,104,95,115,113],
[103,98,0,110,109,96,113,102],
[109,112,101,0,111,101,118,113],
[104,107,102,100,0,92,104,93],
[104,116,115,110,119,0,110,109],
[88,96,98,93,107,101,0,106],
[102,98,109,98,118,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,97,130,85,178,128,135],
[81,0,140,88,128,93,95,156],
[114,71,0,63,119,114,106,114],
[81,123,148,0,128,211,133,211],
[126,83,92,83,0,126,173,126],
[33,118,97,0,85,0,90,71],
[83,116,105,78,38,121,0,121],
[76,55,97,0,85,140,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,109,114,91,139,137],
[99,0,74,92,101,92,122,124],
[106,137,0,119,146,95,119,142],
[102,119,92,0,146,114,107,119],
[97,110,65,65,0,85,84,120],
[120,119,116,97,126,0,112,127],
[72,89,92,104,127,99,0,114],
[74,87,69,92,91,84,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,92,100,89,79,129],
[121,0,110,115,97,119,110,113],
[115,101,0,98,107,122,108,116],
[119,96,113,0,108,109,107,125],
[111,114,104,103,0,114,109,120],
[122,92,89,102,97,0,103,120],
[132,101,103,104,102,108,0,122],
[82,98,95,86,91,91,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,99,104,102,114,111],
[104,0,122,118,117,120,108,127],
[110,89,0,107,93,110,109,110],
[112,93,104,0,94,90,94,93],
[107,94,118,117,0,111,110,116],
[109,91,101,121,100,0,87,112],
[97,103,102,117,101,124,0,109],
[100,84,101,118,95,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,60,90,61,71,30,82],
[123,0,107,149,141,119,77,132],
[151,104,0,152,148,123,115,109],
[121,62,59,0,121,67,84,119],
[150,70,63,90,0,55,60,103],
[140,92,88,144,156,0,126,103],
[181,134,96,127,151,85,0,124],
[129,79,102,92,108,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,130,111,102,116,112,118],
[83,0,89,86,92,116,92,105],
[81,122,0,93,100,124,108,115],
[100,125,118,0,106,100,119,111],
[109,119,111,105,0,117,112,122],
[95,95,87,111,94,0,96,105],
[99,119,103,92,99,115,0,94],
[93,106,96,100,89,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,114,99,105,110,109],
[105,0,109,116,109,108,111,110],
[101,102,0,108,100,90,96,108],
[97,95,103,0,85,94,96,102],
[112,102,111,126,0,104,105,115],
[106,103,121,117,107,0,104,112],
[101,100,115,115,106,107,0,116],
[102,101,103,109,96,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,107,98,113,124,97],
[96,0,101,94,102,94,110,100],
[100,110,0,102,108,101,113,104],
[104,117,109,0,109,115,110,106],
[113,109,103,102,0,112,115,89],
[98,117,110,96,99,0,113,106],
[87,101,98,101,96,98,0,102],
[114,111,107,105,122,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,103,101,111,102,110],
[109,0,108,104,98,109,98,101],
[100,103,0,106,112,107,109,118],
[108,107,105,0,107,110,96,113],
[110,113,99,104,0,113,108,111],
[100,102,104,101,98,0,95,103],
[109,113,102,115,103,116,0,122],
[101,110,93,98,100,108,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,91,91,84,105,105],
[114,0,117,111,107,93,110,116],
[106,94,0,93,97,82,106,105],
[120,100,118,0,106,106,124,111],
[120,104,114,105,0,99,110,120],
[127,118,129,105,112,0,125,123],
[106,101,105,87,101,86,0,106],
[106,95,106,100,91,88,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,103,99,93,84,102],
[115,0,112,124,111,100,104,111],
[112,99,0,104,112,94,90,102],
[108,87,107,0,100,93,112,114],
[112,100,99,111,0,96,108,98],
[118,111,117,118,115,0,99,111],
[127,107,121,99,103,112,0,122],
[109,100,109,97,113,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,115,112,121,96,112],
[98,0,108,112,111,105,99,112],
[105,103,0,105,97,107,95,102],
[96,99,106,0,104,108,89,107],
[99,100,114,107,0,102,102,99],
[90,106,104,103,109,0,106,101],
[115,112,116,122,109,105,0,112],
[99,99,109,104,112,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,111,73,101,104,99,99],
[129,0,115,91,100,84,131,111],
[100,96,0,89,103,112,104,101],
[138,120,122,0,127,105,112,125],
[110,111,108,84,0,110,126,102],
[107,127,99,106,101,0,121,100],
[112,80,107,99,85,90,0,92],
[112,100,110,86,109,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,88,98,104,75,56,90],
[130,0,125,116,102,116,100,109],
[123,86,0,96,101,108,64,86],
[113,95,115,0,132,103,109,93],
[107,109,110,79,0,83,85,75],
[136,95,103,108,128,0,79,70],
[155,111,147,102,126,132,0,115],
[121,102,125,118,136,141,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,91,113,84,106,105,115],
[127,0,91,124,97,101,119,119],
[120,120,0,137,73,109,137,132],
[98,87,74,0,92,107,101,104],
[127,114,138,119,0,103,108,144],
[105,110,102,104,108,0,97,126],
[106,92,74,110,103,114,0,117],
[96,92,79,107,67,85,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,114,100,117,123,106],
[113,0,104,106,109,113,105,106],
[98,107,0,108,104,120,103,110],
[97,105,103,0,105,118,111,114],
[111,102,107,106,0,124,107,105],
[94,98,91,93,87,0,104,96],
[88,106,108,100,104,107,0,97],
[105,105,101,97,106,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,125,116,122,113,99,105],
[90,0,131,121,112,103,108,107],
[86,80,0,93,84,99,94,100],
[95,90,118,0,99,93,99,96],
[89,99,127,112,0,93,104,110],
[98,108,112,118,118,0,102,119],
[112,103,117,112,107,109,0,97],
[106,104,111,115,101,92,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,104,113,98,125,108],
[99,0,103,110,109,92,105,95],
[99,108,0,110,120,105,119,104],
[107,101,101,0,108,104,115,104],
[98,102,91,103,0,87,103,91],
[113,119,106,107,124,0,121,103],
[86,106,92,96,108,90,0,96],
[103,116,107,107,120,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,99,119,100,102,99],
[101,0,105,100,98,109,103,112],
[103,106,0,105,98,90,100,106],
[112,111,106,0,115,105,101,90],
[92,113,113,96,0,96,109,96],
[111,102,121,106,115,0,116,125],
[109,108,111,110,102,95,0,105],
[112,99,105,121,115,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,109,89,109,113,116,114],
[84,0,86,93,101,101,115,124],
[102,125,0,131,112,131,122,122],
[122,118,80,0,114,87,124,118],
[102,110,99,97,0,99,134,131],
[98,110,80,124,112,0,138,108],
[95,96,89,87,77,73,0,106],
[97,87,89,93,80,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,106,108,133,114,109],
[101,0,78,93,102,112,91,84],
[107,133,0,126,114,137,88,113],
[105,118,85,0,93,114,89,96],
[103,109,97,118,0,104,90,105],
[78,99,74,97,107,0,99,104],
[97,120,123,122,121,112,0,117],
[102,127,98,115,106,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,103,106,111,114,107],
[99,0,97,103,102,95,113,106],
[101,114,0,109,116,94,108,116],
[108,108,102,0,98,96,115,99],
[105,109,95,113,0,111,105,103],
[100,116,117,115,100,0,116,110],
[97,98,103,96,106,95,0,101],
[104,105,95,112,108,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,105,111,112,104,114,95],
[129,0,130,132,128,104,111,110],
[106,81,0,121,119,98,90,100],
[100,79,90,0,95,104,93,81],
[99,83,92,116,0,102,99,84],
[107,107,113,107,109,0,100,115],
[97,100,121,118,112,111,0,100],
[116,101,111,130,127,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,92,102,98,93,81,86],
[127,0,100,120,120,106,114,111],
[119,111,0,115,98,105,114,101],
[109,91,96,0,95,103,106,101],
[113,91,113,116,0,108,94,99],
[118,105,106,108,103,0,108,102],
[130,97,97,105,117,103,0,119],
[125,100,110,110,112,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,94,92,91,76,88,99],
[124,0,112,102,113,97,102,122],
[117,99,0,107,106,96,103,115],
[119,109,104,0,114,108,96,107],
[120,98,105,97,0,88,106,125],
[135,114,115,103,123,0,108,128],
[123,109,108,115,105,103,0,125],
[112,89,96,104,86,83,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,97,118,100,108,105,105],
[128,0,102,96,112,115,109,115],
[114,109,0,104,98,92,109,103],
[93,115,107,0,108,106,100,93],
[111,99,113,103,0,114,100,111],
[103,96,119,105,97,0,105,85],
[106,102,102,111,111,106,0,95],
[106,96,108,118,100,126,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,140,83,84,135,119],
[105,0,114,161,89,133,135,110],
[110,97,0,142,110,141,147,151],
[71,50,69,0,83,87,94,90],
[128,122,101,128,0,148,134,152],
[127,78,70,124,63,0,111,102],
[76,76,64,117,77,100,0,102],
[92,101,60,121,59,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,111,113,92,105,77,105],
[124,0,126,132,113,110,95,110],
[100,85,0,106,75,94,74,92],
[98,79,105,0,98,85,84,65],
[119,98,136,113,0,116,74,89],
[106,101,117,126,95,0,98,128],
[134,116,137,127,137,113,0,100],
[106,101,119,146,122,83,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,143,125,113,109,102,118],
[89,0,123,99,93,100,92,104],
[68,88,0,88,87,77,79,100],
[86,112,123,0,91,93,100,101],
[98,118,124,120,0,93,111,123],
[102,111,134,118,118,0,124,125],
[109,119,132,111,100,87,0,117],
[93,107,111,110,88,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,126,105,93,118,93,106],
[125,0,121,97,106,106,112,121],
[85,90,0,73,107,70,96,76],
[106,114,138,0,96,93,126,122],
[118,105,104,115,0,107,120,111],
[93,105,141,118,104,0,116,91],
[118,99,115,85,91,95,0,116],
[105,90,135,89,100,120,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,108,112,115,108,104],
[83,0,87,86,89,90,100,88],
[98,124,0,91,106,102,111,105],
[103,125,120,0,112,118,113,113],
[99,122,105,99,0,108,95,95],
[96,121,109,93,103,0,110,104],
[103,111,100,98,116,101,0,102],
[107,123,106,98,116,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,111,104,114,113,91],
[96,0,94,113,88,92,89,72],
[110,117,0,120,112,85,97,87],
[100,98,91,0,100,94,86,94],
[107,123,99,111,0,110,99,103],
[97,119,126,117,101,0,111,113],
[98,122,114,125,112,100,0,110],
[120,139,124,117,108,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,113,110,112,93,106,109],
[115,0,114,114,129,116,104,111],
[98,97,0,103,115,103,96,103],
[101,97,108,0,113,101,107,105],
[99,82,96,98,0,92,98,113],
[118,95,108,110,119,0,107,114],
[105,107,115,104,113,104,0,122],
[102,100,108,106,98,97,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,106,105,103,97,115],
[118,0,109,97,109,108,102,118],
[109,102,0,96,103,92,100,104],
[105,114,115,0,109,104,115,119],
[106,102,108,102,0,105,108,114],
[108,103,119,107,106,0,116,124],
[114,109,111,96,103,95,0,114],
[96,93,107,92,97,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,118,108,102,116,112],
[106,0,104,114,117,107,117,112],
[101,107,0,123,118,117,111,108],
[93,97,88,0,106,90,98,98],
[103,94,93,105,0,95,112,114],
[109,104,94,121,116,0,112,114],
[95,94,100,113,99,99,0,107],
[99,99,103,113,97,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,117,104,107,109,106],
[102,0,108,112,110,109,102,109],
[98,103,0,110,103,102,101,113],
[94,99,101,0,112,103,111,112],
[107,101,108,99,0,102,102,104],
[104,102,109,108,109,0,108,109],
[102,109,110,100,109,103,0,107],
[105,102,98,99,107,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,101,112,99,109,104],
[98,0,109,109,108,104,105,111],
[112,102,0,108,110,105,113,113],
[110,102,103,0,111,104,109,91],
[99,103,101,100,0,109,121,103],
[112,107,106,107,102,0,117,108],
[102,106,98,102,90,94,0,106],
[107,100,98,120,108,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,93,99,116,108,123],
[102,0,102,98,82,125,116,100],
[106,109,0,85,83,112,113,131],
[118,113,126,0,101,128,112,122],
[112,129,128,110,0,104,120,129],
[95,86,99,83,107,0,103,104],
[103,95,98,99,91,108,0,114],
[88,111,80,89,82,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,91,100,96,96,97],
[122,0,118,111,119,102,96,116],
[124,93,0,100,109,97,105,113],
[120,100,111,0,112,104,115,113],
[111,92,102,99,0,111,93,90],
[115,109,114,107,100,0,113,112],
[115,115,106,96,118,98,0,110],
[114,95,98,98,121,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,98,126,78,87,100,136],
[65,0,79,100,65,63,82,70],
[113,132,0,122,85,86,110,166],
[85,111,89,0,62,79,89,122],
[133,146,126,149,0,115,104,156],
[124,148,125,132,96,0,131,113],
[111,129,101,122,107,80,0,140],
[75,141,45,89,55,98,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,90,83,118,112,112],
[112,0,94,103,107,141,113,104],
[97,117,0,110,99,121,96,92],
[121,108,101,0,107,128,114,94],
[128,104,112,104,0,130,122,112],
[93,70,90,83,81,0,91,79],
[99,98,115,97,89,120,0,95],
[99,107,119,117,99,132,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,90,92,113,89,119,95],
[100,0,85,95,96,102,99,104],
[121,126,0,109,101,120,127,100],
[119,116,102,0,119,97,119,102],
[98,115,110,92,0,107,88,100],
[122,109,91,114,104,0,118,127],
[92,112,84,92,123,93,0,107],
[116,107,111,109,111,84,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,73,86,55,84,81,110],
[101,0,101,78,99,113,102,120],
[138,110,0,145,120,120,104,123],
[125,133,66,0,70,114,92,124],
[156,112,91,141,0,115,113,112],
[127,98,91,97,96,0,71,106],
[130,109,107,119,98,140,0,129],
[101,91,88,87,99,105,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,87,99,105,86,107],
[111,0,114,111,106,109,103,115],
[106,97,0,93,105,116,109,121],
[124,100,118,0,109,123,108,128],
[112,105,106,102,0,114,108,104],
[106,102,95,88,97,0,74,95],
[125,108,102,103,103,137,0,120],
[104,96,90,83,107,116,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,144,68,144,52,86,117],
[67,0,49,49,116,49,18,49],
[67,162,0,135,162,101,86,52],
[143,162,76,0,195,125,94,76],
[67,95,49,16,0,0,18,0],
[159,162,110,86,211,0,61,65],
[125,193,125,117,193,150,0,49],
[94,162,159,135,211,146,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,100,111,112,96,105],
[101,0,86,96,93,83,85,82],
[95,125,0,100,113,107,98,123],
[111,115,111,0,109,107,104,115],
[100,118,98,102,0,101,94,106],
[99,128,104,104,110,0,107,126],
[115,126,113,107,117,104,0,128],
[106,129,88,96,105,85,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,89,109,109,110,106],
[102,0,82,107,111,97,99,103],
[101,129,0,92,126,108,126,113],
[122,104,119,0,118,105,121,111],
[102,100,85,93,0,97,90,102],
[102,114,103,106,114,0,128,117],
[101,112,85,90,121,83,0,112],
[105,108,98,100,109,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,127,107,113,125,121,102],
[90,0,101,103,106,110,107,84],
[84,110,0,110,107,118,104,98],
[104,108,101,0,103,107,110,106],
[98,105,104,108,0,103,90,110],
[86,101,93,104,108,0,120,95],
[90,104,107,101,121,91,0,115],
[109,127,113,105,101,116,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,121,100,120,106,101],
[116,0,123,105,99,126,118,116],
[100,88,0,110,98,118,95,89],
[90,106,101,0,97,110,80,87],
[111,112,113,114,0,123,115,105],
[91,85,93,101,88,0,101,87],
[105,93,116,131,96,110,0,92],
[110,95,122,124,106,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,96,99,102,89,93,104],
[132,0,111,116,116,102,111,117],
[115,100,0,104,104,100,100,106],
[112,95,107,0,111,88,100,115],
[109,95,107,100,0,93,111,115],
[122,109,111,123,118,0,99,109],
[118,100,111,111,100,112,0,114],
[107,94,105,96,96,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,113,108,102,112,111],
[104,0,121,110,105,117,114,105],
[97,90,0,97,96,99,108,100],
[98,101,114,0,101,111,117,109],
[103,106,115,110,0,113,117,114],
[109,94,112,100,98,0,115,112],
[99,97,103,94,94,96,0,96],
[100,106,111,102,97,99,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,109,106,127,122,104],
[102,0,103,103,113,115,107,119],
[104,108,0,112,113,113,119,104],
[102,108,99,0,110,122,114,106],
[105,98,98,101,0,111,105,103],
[84,96,98,89,100,0,98,94],
[89,104,92,97,106,113,0,105],
[107,92,107,105,108,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,109,109,109,98,97],
[103,0,95,109,92,96,99,100],
[99,116,0,113,98,102,97,90],
[102,102,98,0,109,106,104,88],
[102,119,113,102,0,98,96,92],
[102,115,109,105,113,0,116,110],
[113,112,114,107,115,95,0,90],
[114,111,121,123,119,101,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,101,105,100,121,110],
[97,0,110,106,107,100,102,116],
[99,101,0,106,100,106,107,108],
[110,105,105,0,97,96,105,113],
[106,104,111,114,0,100,108,120],
[111,111,105,115,111,0,121,113],
[90,109,104,106,103,90,0,100],
[101,95,103,98,91,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,75,125,137,83,77],
[114,0,93,106,89,98,88,82],
[118,118,0,93,112,124,122,100],
[136,105,118,0,106,138,140,111],
[86,122,99,105,0,131,78,76],
[74,113,87,73,80,0,71,80],
[128,123,89,71,133,140,0,85],
[134,129,111,100,135,131,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,103,106,116,94,116],
[112,0,103,113,122,129,100,108],
[98,108,0,107,100,115,100,108],
[108,98,104,0,97,124,106,124],
[105,89,111,114,0,101,94,111],
[95,82,96,87,110,0,95,100],
[117,111,111,105,117,116,0,130],
[95,103,103,87,100,111,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,117,122,112,114,120,99],
[89,0,105,107,107,103,99,103],
[94,106,0,100,82,92,105,103],
[89,104,111,0,108,103,99,103],
[99,104,129,103,0,119,125,120],
[97,108,119,108,92,0,95,89],
[91,112,106,112,86,116,0,82],
[112,108,108,108,91,122,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,94,89,104,97,84,93],
[129,0,111,108,107,117,107,102],
[117,100,0,110,114,111,100,100],
[122,103,101,0,113,109,108,111],
[107,104,97,98,0,110,100,93],
[114,94,100,102,101,0,99,89],
[127,104,111,103,111,112,0,109],
[118,109,111,100,118,122,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,74,88,95,80,63,83],
[82,0,76,79,123,100,60,90],
[137,135,0,110,120,114,91,111],
[123,132,101,0,105,104,95,127],
[116,88,91,106,0,81,85,91],
[131,111,97,107,130,0,106,117],
[148,151,120,116,126,105,0,95],
[128,121,100,84,120,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,90,106,112,116,86],
[90,0,100,96,98,95,101,89],
[101,111,0,98,118,102,103,99],
[121,115,113,0,108,113,118,104],
[105,113,93,103,0,101,92,96],
[99,116,109,98,110,0,104,95],
[95,110,108,93,119,107,0,107],
[125,122,112,107,115,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,120,122,94,109,107],
[97,0,108,117,116,98,107,100],
[101,103,0,120,108,105,106,97],
[91,94,91,0,103,83,100,79],
[89,95,103,108,0,96,98,102],
[117,113,106,128,115,0,108,94],
[102,104,105,111,113,103,0,100],
[104,111,114,132,109,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,102,111,133,123,113],
[97,0,110,100,104,118,116,91],
[87,101,0,91,91,106,96,89],
[109,111,120,0,111,115,126,101],
[100,107,120,100,0,109,112,81],
[78,93,105,96,102,0,103,86],
[88,95,115,85,99,108,0,85],
[98,120,122,110,130,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,72,118,97,116,103,97],
[144,0,82,96,116,130,104,122],
[139,129,0,125,118,98,109,95],
[93,115,86,0,121,86,92,103],
[114,95,93,90,0,107,91,94],
[95,81,113,125,104,0,80,116],
[108,107,102,119,120,131,0,101],
[114,89,116,108,117,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,136,145,135,122,148,102],
[78,0,94,130,125,105,147,82],
[75,117,0,117,146,95,145,119],
[66,81,94,0,123,104,115,84],
[76,86,65,88,0,60,89,85],
[89,106,116,107,151,0,160,100],
[63,64,66,96,122,51,0,75],
[109,129,92,127,126,111,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,97,95,109,100,100,101],
[100,0,100,97,107,104,97,96],
[114,111,0,101,110,113,100,109],
[116,114,110,0,107,105,100,99],
[102,104,101,104,0,103,89,100],
[111,107,98,106,108,0,109,104],
[111,114,111,111,122,102,0,106],
[110,115,102,112,111,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,87,100,114,96,104,139],
[95,0,100,96,105,95,111,138],
[124,111,0,116,111,93,77,114],
[111,115,95,0,133,130,109,140],
[97,106,100,78,0,89,111,117],
[115,116,118,81,122,0,96,119],
[107,100,134,102,100,115,0,129],
[72,73,97,71,94,92,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,107,101,111,115,104],
[102,0,91,114,102,124,108,102],
[110,120,0,122,104,111,115,108],
[104,97,89,0,90,98,103,93],
[110,109,107,121,0,112,122,101],
[100,87,100,113,99,0,102,104],
[96,103,96,108,89,109,0,104],
[107,109,103,118,110,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,95,95,124,75,128,108],
[139,0,127,126,142,86,138,117],
[116,84,0,115,143,87,127,91],
[116,85,96,0,107,114,134,98],
[87,69,68,104,0,59,88,90],
[136,125,124,97,152,0,133,123],
[83,73,84,77,123,78,0,100],
[103,94,120,113,121,88,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,108,113,100,104,107,108],
[81,0,92,105,90,90,92,87],
[103,119,0,108,100,104,106,105],
[98,106,103,0,101,100,98,105],
[111,121,111,110,0,103,104,115],
[107,121,107,111,108,0,105,104],
[104,119,105,113,107,106,0,100],
[103,124,106,106,96,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,108,88,102,117,110],
[99,0,113,98,101,114,97,107],
[110,98,0,119,108,114,120,101],
[103,113,92,0,114,106,94,92],
[123,110,103,97,0,118,88,107],
[109,97,97,105,93,0,93,87],
[94,114,91,117,123,118,0,92],
[101,104,110,119,104,124,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,29,90,116,35,79,18,58],
[182,0,94,117,70,119,96,116],
[121,117,0,96,100,125,84,99],
[95,94,115,0,94,101,83,59],
[176,141,111,117,0,151,113,99],
[132,92,86,110,60,0,99,108],
[193,115,127,128,98,112,0,127],
[153,95,112,152,112,103,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,99,95,106,100,92],
[115,0,113,100,109,117,104,106],
[105,98,0,96,101,100,107,80],
[112,111,115,0,101,109,117,100],
[116,102,110,110,0,112,110,96],
[105,94,111,102,99,0,107,91],
[111,107,104,94,101,104,0,91],
[119,105,131,111,115,120,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,117,161,67,138,98,157],
[77,0,84,174,110,98,71,113],
[94,127,0,127,90,85,94,121],
[50,37,84,0,0,98,21,113],
[144,101,121,211,0,142,151,150],
[73,113,126,113,69,0,73,150],
[113,140,117,190,60,138,0,113],
[54,98,90,98,61,61,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,103,121,112,107,121],
[110,0,98,92,111,110,110,102],
[105,113,0,108,113,103,111,113],
[108,119,103,0,108,102,114,110],
[90,100,98,103,0,100,103,107],
[99,101,108,109,111,0,118,106],
[104,101,100,97,108,93,0,103],
[90,109,98,101,104,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,66,102,92,68,69,65],
[147,0,123,129,135,112,107,87],
[145,88,0,126,114,87,96,79],
[109,82,85,0,102,86,82,91],
[119,76,97,109,0,81,89,59],
[143,99,124,125,130,0,100,85],
[142,104,115,129,122,111,0,109],
[146,124,132,120,152,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,93,91,125,136,101],
[116,0,124,104,73,152,141,104],
[99,87,0,102,114,117,144,112],
[118,107,109,0,101,124,159,130],
[120,138,97,110,0,152,132,113],
[86,59,94,87,59,0,113,95],
[75,70,67,52,79,98,0,60],
[110,107,99,81,98,116,151,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,85,112,83,117,100,114],
[91,0,90,90,92,99,99,104],
[126,121,0,125,79,116,120,109],
[99,121,86,0,113,113,102,122],
[128,119,132,98,0,141,119,127],
[94,112,95,98,70,0,128,110],
[111,112,91,109,92,83,0,111],
[97,107,102,89,84,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,108,110,104,120,115],
[99,0,113,98,100,99,109,101],
[107,98,0,112,106,109,122,108],
[103,113,99,0,110,110,121,114],
[101,111,105,101,0,103,115,102],
[107,112,102,101,108,0,122,109],
[91,102,89,90,96,89,0,101],
[96,110,103,97,109,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,113,103,103,124,127,97],
[85,0,95,109,91,109,120,98],
[98,116,0,109,97,109,107,87],
[108,102,102,0,126,112,110,130],
[108,120,114,85,0,125,103,114],
[87,102,102,99,86,0,94,85],
[84,91,104,101,108,117,0,108],
[114,113,124,81,97,126,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,102,105,128,107,112],
[105,0,118,90,95,118,104,107],
[109,93,0,110,113,114,107,115],
[109,121,101,0,105,120,114,116],
[106,116,98,106,0,121,120,118],
[83,93,97,91,90,0,97,103],
[104,107,104,97,91,114,0,107],
[99,104,96,95,93,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,105,102,98,105,91],
[110,0,100,101,121,94,112,108],
[105,111,0,110,101,115,111,92],
[106,110,101,0,113,105,107,92],
[109,90,110,98,0,104,110,87],
[113,117,96,106,107,0,108,103],
[106,99,100,104,101,103,0,91],
[120,103,119,119,124,108,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,127,115,121,101,111,115],
[97,0,124,119,111,104,108,111],
[84,87,0,92,89,95,95,105],
[96,92,119,0,103,95,91,111],
[90,100,122,108,0,109,106,116],
[110,107,116,116,102,0,101,118],
[100,103,116,120,105,110,0,116],
[96,100,106,100,95,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,125,98,118,115,99,93],
[102,0,126,113,115,122,128,120],
[86,85,0,72,92,87,101,99],
[113,98,139,0,113,130,119,94],
[93,96,119,98,0,124,132,94],
[96,89,124,81,87,0,120,82],
[112,83,110,92,79,91,0,95],
[118,91,112,117,117,129,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,107,90,95,96,99,104],
[126,0,112,100,109,108,111,123],
[104,99,0,83,124,110,112,123],
[121,111,128,0,127,111,102,118],
[116,102,87,84,0,100,97,119],
[115,103,101,100,111,0,104,102],
[112,100,99,109,114,107,0,112],
[107,88,88,93,92,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,105,95,98,95,110],
[113,0,100,117,107,98,100,113],
[119,111,0,120,105,100,107,113],
[106,94,91,0,100,87,95,113],
[116,104,106,111,0,97,112,109],
[113,113,111,124,114,0,98,106],
[116,111,104,116,99,113,0,115],
[101,98,98,98,102,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,105,105,111,92,105],
[96,0,95,111,116,108,102,114],
[99,116,0,103,117,121,117,114],
[106,100,108,0,110,104,112,117],
[106,95,94,101,0,98,108,105],
[100,103,90,107,113,0,100,105],
[119,109,94,99,103,111,0,116],
[106,97,97,94,106,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,124,138,103,117,118],
[106,0,92,110,118,101,97,97],
[112,119,0,122,123,106,118,102],
[87,101,89,0,135,108,104,104],
[73,93,88,76,0,92,93,82],
[108,110,105,103,119,0,114,100],
[94,114,93,107,118,97,0,108],
[93,114,109,107,129,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,98,100,87,97,98],
[120,0,117,96,124,119,110,113],
[111,94,0,103,103,103,111,104],
[113,115,108,0,103,97,111,113],
[111,87,108,108,0,97,94,98],
[124,92,108,114,114,0,109,111],
[114,101,100,100,117,102,0,119],
[113,98,107,98,113,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,104,111,94,84,109],
[105,0,109,111,124,94,101,106],
[107,102,0,124,107,112,105,124],
[107,100,87,0,97,97,96,92],
[100,87,104,114,0,94,99,101],
[117,117,99,114,117,0,108,105],
[127,110,106,115,112,103,0,115],
[102,105,87,119,110,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,100,123,102,101,106],
[111,0,102,103,118,103,102,111],
[112,109,0,105,112,98,114,103],
[111,108,106,0,114,105,108,98],
[88,93,99,97,0,86,87,93],
[109,108,113,106,125,0,108,104],
[110,109,97,103,124,103,0,106],
[105,100,108,113,118,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,121,132,113,117,129,105],
[99,0,113,114,109,100,125,112],
[90,98,0,146,92,94,119,111],
[79,97,65,0,100,91,96,93],
[98,102,119,111,0,114,114,103],
[94,111,117,120,97,0,99,102],
[82,86,92,115,97,112,0,102],
[106,99,100,118,108,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,116,75,108,81,109,91],
[135,0,128,116,149,99,138,135],
[95,83,0,91,76,61,85,79],
[136,95,120,0,117,114,88,90],
[103,62,135,94,0,73,103,97],
[130,112,150,97,138,0,126,136],
[102,73,126,123,108,85,0,94],
[120,76,132,121,114,75,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,121,126,126,132,127,180],
[132,0,141,163,84,121,124,138],
[90,70,0,118,42,95,90,82],
[85,48,93,0,70,62,116,96],
[85,127,169,141,0,172,147,144],
[79,90,116,149,39,0,74,115],
[84,87,121,95,64,137,0,135],
[31,73,129,115,67,96,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,102,107,106,96,100],
[119,0,103,110,100,107,112,99],
[110,108,0,95,107,100,107,91],
[109,101,116,0,110,122,114,107],
[104,111,104,101,0,96,97,102],
[105,104,111,89,115,0,98,102],
[115,99,104,97,114,113,0,107],
[111,112,120,104,109,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,114,170,149,101,211,122],
[83,0,135,170,62,87,108,145],
[97,76,0,159,76,163,97,159],
[41,41,52,0,27,66,41,103],
[62,149,135,184,0,103,87,149],
[110,124,48,145,108,0,124,172],
[0,103,114,170,124,87,0,83],
[89,66,52,108,62,39,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,143,126,131,119,125,98],
[103,0,134,141,124,122,119,109],
[68,77,0,98,83,87,94,86],
[85,70,113,0,114,118,97,86],
[80,87,128,97,0,115,111,73],
[92,89,124,93,96,0,101,89],
[86,92,117,114,100,110,0,94],
[113,102,125,125,138,122,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,120,97,103,98,99,97],
[98,0,110,100,110,108,103,101],
[91,101,0,82,90,107,101,84],
[114,111,129,0,105,115,121,112],
[108,101,121,106,0,120,112,115],
[113,103,104,96,91,0,110,93],
[112,108,110,90,99,101,0,99],
[114,110,127,99,96,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,101,102,101,108,90],
[119,0,113,114,100,111,109,103],
[112,98,0,119,97,104,105,110],
[110,97,92,0,104,105,116,103],
[109,111,114,107,0,114,114,102],
[110,100,107,106,97,0,104,100],
[103,102,106,95,97,107,0,95],
[121,108,101,108,109,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,88,73,82,106,85,112],
[108,0,69,73,98,97,81,96],
[123,142,0,107,97,124,103,122],
[138,138,104,0,124,100,125,115],
[129,113,114,87,0,137,93,119],
[105,114,87,111,74,0,88,108],
[126,130,108,86,118,123,0,111],
[99,115,89,96,92,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,114,107,116,125,126],
[106,0,113,115,100,115,120,128],
[89,98,0,106,95,91,117,127],
[97,96,105,0,108,98,116,114],
[104,111,116,103,0,107,122,126],
[95,96,120,113,104,0,129,122],
[86,91,94,95,89,82,0,118],
[85,83,84,97,85,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,116,93,116,114,111],
[100,0,102,117,101,104,110,115],
[97,109,0,107,95,112,102,110],
[95,94,104,0,94,97,108,110],
[118,110,116,117,0,105,109,124],
[95,107,99,114,106,0,106,107],
[97,101,109,103,102,105,0,104],
[100,96,101,101,87,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,119,105,106,113,116],
[99,0,106,92,98,86,84,100],
[96,105,0,97,106,89,96,103],
[92,119,114,0,92,96,103,104],
[106,113,105,119,0,98,106,107],
[105,125,122,115,113,0,111,108],
[98,127,115,108,105,100,0,108],
[95,111,108,107,104,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,96,111,94,103,95],
[106,0,105,107,108,102,111,115],
[111,106,0,98,120,108,111,92],
[115,104,113,0,127,113,110,101],
[100,103,91,84,0,104,110,90],
[117,109,103,98,107,0,117,107],
[108,100,100,101,101,94,0,90],
[116,96,119,110,121,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,114,108,106,108,93],
[106,0,115,115,106,104,107,101],
[108,96,0,112,107,105,101,99],
[97,96,99,0,96,99,92,100],
[103,105,104,115,0,108,106,98],
[105,107,106,112,103,0,102,109],
[103,104,110,119,105,109,0,108],
[118,110,112,111,113,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,116,109,110,128,117],
[102,0,102,118,97,102,111,118],
[110,109,0,121,105,108,112,117],
[95,93,90,0,87,104,102,108],
[102,114,106,124,0,120,111,110],
[101,109,103,107,91,0,112,124],
[83,100,99,109,100,99,0,96],
[94,93,94,103,101,87,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,113,113,110,120,102],
[95,0,108,107,115,97,112,106],
[110,103,0,106,107,104,107,101],
[98,104,105,0,102,105,102,94],
[98,96,104,109,0,87,101,96],
[101,114,107,106,124,0,122,104],
[91,99,104,109,110,89,0,101],
[109,105,110,117,115,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,102,102,92,97,107],
[117,0,118,102,117,105,110,104],
[103,93,0,93,99,86,100,94],
[109,109,118,0,105,107,109,106],
[109,94,112,106,0,101,97,107],
[119,106,125,104,110,0,107,113],
[114,101,111,102,114,104,0,111],
[104,107,117,105,104,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,119,104,114,108,112],
[102,0,108,105,111,115,123,104],
[91,103,0,100,95,104,94,96],
[92,106,111,0,95,112,100,94],
[107,100,116,116,0,113,114,102],
[97,96,107,99,98,0,96,87],
[103,88,117,111,97,115,0,110],
[99,107,115,117,109,124,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,93,95,97,88,91],
[121,0,116,101,101,94,109,103],
[113,95,0,97,108,113,111,110],
[118,110,114,0,103,101,110,106],
[116,110,103,108,0,102,96,99],
[114,117,98,110,109,0,104,105],
[123,102,100,101,115,107,0,94],
[120,108,101,105,112,106,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,120,107,104,95,98,126],
[118,0,156,144,117,116,96,100],
[91,55,0,71,81,58,51,68],
[104,67,140,0,124,102,105,115],
[107,94,130,87,0,87,106,106],
[116,95,153,109,124,0,100,111],
[113,115,160,106,105,111,0,146],
[85,111,143,96,105,100,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,86,89,104,106,117,94],
[111,0,102,97,115,129,102,108],
[125,109,0,131,118,146,88,95],
[122,114,80,0,123,113,93,100],
[107,96,93,88,0,123,106,84],
[105,82,65,98,88,0,76,76],
[94,109,123,118,105,135,0,95],
[117,103,116,111,127,135,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,77,71,109,84,117,89],
[136,0,142,99,130,119,133,107],
[134,69,0,93,108,131,138,75],
[140,112,118,0,141,85,138,106],
[102,81,103,70,0,109,118,75],
[127,92,80,126,102,0,109,113],
[94,78,73,73,93,102,0,84],
[122,104,136,105,136,98,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,100,118,110,104,107],
[104,0,97,111,106,114,117,101],
[109,114,0,111,104,108,119,112],
[111,100,100,0,108,103,117,100],
[93,105,107,103,0,78,100,90],
[101,97,103,108,133,0,115,106],
[107,94,92,94,111,96,0,116],
[104,110,99,111,121,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,99,93,91,89,112],
[112,0,102,117,122,106,113,104],
[110,109,0,98,98,112,107,93],
[112,94,113,0,116,107,112,127],
[118,89,113,95,0,100,107,95],
[120,105,99,104,111,0,105,110],
[122,98,104,99,104,106,0,110],
[99,107,118,84,116,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,132,105,111,104,117,109],
[99,0,134,109,97,103,76,129],
[79,77,0,74,102,95,74,93],
[106,102,137,0,118,100,104,122],
[100,114,109,93,0,79,106,134],
[107,108,116,111,132,0,94,112],
[94,135,137,107,105,117,0,137],
[102,82,118,89,77,99,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,99,106,100,112,137],
[111,0,118,90,117,114,89,136],
[105,93,0,74,114,106,83,118],
[112,121,137,0,122,142,105,129],
[105,94,97,89,0,102,76,106],
[111,97,105,69,109,0,81,107],
[99,122,128,106,135,130,0,139],
[74,75,93,82,105,104,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,99,99,96,114,103],
[102,0,101,90,93,95,107,101],
[110,110,0,112,111,103,119,121],
[112,121,99,0,110,113,122,119],
[112,118,100,101,0,100,114,114],
[115,116,108,98,111,0,121,116],
[97,104,92,89,97,90,0,103],
[108,110,90,92,97,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,107,109,91,101,94],
[109,0,109,108,104,101,111,109],
[112,102,0,104,102,102,109,106],
[104,103,107,0,103,100,109,104],
[102,107,109,108,0,108,109,110],
[120,110,109,111,103,0,113,105],
[110,100,102,102,102,98,0,97],
[117,102,105,107,101,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,111,118,100,116,111],
[103,0,106,112,114,103,117,117],
[99,105,0,101,105,91,98,104],
[100,99,110,0,108,102,111,109],
[93,97,106,103,0,98,104,98],
[111,108,120,109,113,0,105,113],
[95,94,113,100,107,106,0,106],
[100,94,107,102,113,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,95,102,102,114,91],
[100,0,93,92,91,97,88,97],
[103,118,0,94,102,112,98,107],
[116,119,117,0,98,107,97,104],
[109,120,109,113,0,110,123,100],
[109,114,99,104,101,0,90,105],
[97,123,113,114,88,121,0,114],
[120,114,104,107,111,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,101,123,114,114,96],
[103,0,105,106,110,116,109,94],
[97,106,0,95,115,115,98,92],
[110,105,116,0,115,104,103,89],
[88,101,96,96,0,94,84,66],
[97,95,96,107,117,0,109,89],
[97,102,113,108,127,102,0,107],
[115,117,119,122,145,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,105,115,111,114,111],
[105,0,118,111,108,114,115,109],
[98,93,0,104,112,106,107,102],
[106,100,107,0,108,113,108,113],
[96,103,99,103,0,99,112,112],
[100,97,105,98,112,0,111,109],
[97,96,104,103,99,100,0,101],
[100,102,109,98,99,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,93,133,109,118,136,104],
[85,0,100,108,108,111,116,118],
[118,111,0,121,93,94,108,112],
[78,103,90,0,75,89,106,92],
[102,103,118,136,0,137,132,102],
[93,100,117,122,74,0,99,88],
[75,95,103,105,79,112,0,93],
[107,93,99,119,109,123,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,107,105,99,107,109],
[104,0,118,108,115,106,106,113],
[104,93,0,92,100,95,111,108],
[104,103,119,0,116,101,114,111],
[106,96,111,95,0,92,99,98],
[112,105,116,110,119,0,120,118],
[104,105,100,97,112,91,0,114],
[102,98,103,100,113,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,76,83,123,123,123,146],
[80,0,29,83,76,76,76,134],
[135,182,0,106,157,157,99,204],
[128,128,105,0,128,128,128,182],
[88,135,54,83,0,182,101,182],
[88,135,54,83,29,0,69,204],
[88,135,112,83,110,142,0,189],
[65,77,7,29,29,7,22,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,92,86,101,92,96],
[120,0,102,104,108,100,113,99],
[110,109,0,96,101,108,98,92],
[119,107,115,0,101,116,98,99],
[125,103,110,110,0,109,112,100],
[110,111,103,95,102,0,104,97],
[119,98,113,113,99,107,0,110],
[115,112,119,112,111,114,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,105,94,97,98,103],
[106,0,102,109,108,102,105,99],
[111,109,0,103,106,103,104,106],
[106,102,108,0,101,98,111,97],
[117,103,105,110,0,97,102,105],
[114,109,108,113,114,0,107,104],
[113,106,107,100,109,104,0,117],
[108,112,105,114,106,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,100,89,114,122,122],
[103,0,82,81,82,95,98,108],
[97,129,0,94,92,113,109,111],
[111,130,117,0,97,118,115,129],
[122,129,119,114,0,112,103,132],
[97,116,98,93,99,0,105,121],
[89,113,102,96,108,106,0,127],
[89,103,100,82,79,90,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,132,120,143,117,101,106],
[101,0,121,112,115,116,115,115],
[79,90,0,99,101,78,82,88],
[91,99,112,0,115,113,115,92],
[68,96,110,96,0,95,103,98],
[94,95,133,98,116,0,109,90],
[110,96,129,96,108,102,0,104],
[105,96,123,119,113,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,98,106,109,111,104],
[105,0,97,95,98,100,100,95],
[98,114,0,101,102,102,111,99],
[113,116,110,0,110,110,112,102],
[105,113,109,101,0,105,111,97],
[102,111,109,101,106,0,101,100],
[100,111,100,99,100,110,0,108],
[107,116,112,109,114,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,107,115,99,111,101],
[101,0,112,89,105,102,110,105],
[108,99,0,111,113,102,106,96],
[104,122,100,0,107,106,106,111],
[96,106,98,104,0,94,98,101],
[112,109,109,105,117,0,112,104],
[100,101,105,105,113,99,0,102],
[110,106,115,100,110,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,95,105,119,127,117],
[112,0,98,110,107,120,136,116],
[103,113,0,86,112,103,108,106],
[116,101,125,0,81,122,150,104],
[106,104,99,130,0,120,121,110],
[92,91,108,89,91,0,95,114],
[84,75,103,61,90,116,0,82],
[94,95,105,107,101,97,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,109,107,102,110,105],
[103,0,116,111,112,112,111,101],
[100,95,0,105,117,102,108,113],
[102,100,106,0,106,104,104,108],
[104,99,94,105,0,104,101,111],
[109,99,109,107,107,0,106,106],
[101,100,103,107,110,105,0,113],
[106,110,98,103,100,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,90,101,97,91,99],
[117,0,108,101,102,102,91,103],
[111,103,0,88,87,84,88,97],
[121,110,123,0,103,114,97,117],
[110,109,124,108,0,104,110,112],
[114,109,127,97,107,0,109,118],
[120,120,123,114,101,102,0,118],
[112,108,114,94,99,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,90,89,86,93,93],
[108,0,97,88,98,104,98,106],
[112,114,0,107,90,94,102,107],
[121,123,104,0,100,108,111,103],
[122,113,121,111,0,114,105,108],
[125,107,117,103,97,0,106,112],
[118,113,109,100,106,105,0,112],
[118,105,104,108,103,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,100,78,93,113,91],
[116,0,81,103,106,87,103,91],
[115,130,0,149,139,102,152,118],
[111,108,62,0,102,116,121,127],
[133,105,72,109,0,99,139,108],
[118,124,109,95,112,0,106,119],
[98,108,59,90,72,105,0,84],
[120,120,93,84,103,92,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,124,135,122,103,126],
[94,0,113,130,116,115,99,115],
[101,98,0,109,109,104,106,112],
[87,81,102,0,108,107,84,99],
[76,95,102,103,0,101,112,95],
[89,96,107,104,110,0,96,128],
[108,112,105,127,99,115,0,124],
[85,96,99,112,116,83,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,99,109,108,115,113],
[112,0,108,102,114,105,105,106],
[93,103,0,96,95,109,103,86],
[112,109,115,0,114,91,94,85],
[102,97,116,97,0,88,95,92],
[103,106,102,120,123,0,103,104],
[96,106,108,117,116,108,0,98],
[98,105,125,126,119,107,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,94,116,119,108,103,108],
[85,0,89,103,95,98,88,91],
[117,122,0,107,97,106,96,93],
[95,108,104,0,113,109,110,93],
[92,116,114,98,0,99,90,116],
[103,113,105,102,112,0,89,108],
[108,123,115,101,121,122,0,120],
[103,120,118,118,95,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,80,100,92,69,78,114],
[72,0,96,106,102,112,130,116],
[131,115,0,101,136,90,93,135],
[111,105,110,0,88,91,92,100],
[119,109,75,123,0,96,103,94],
[142,99,121,120,115,0,119,146],
[133,81,118,119,108,92,0,113],
[97,95,76,111,117,65,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,104,131,96,98,109],
[115,0,111,113,126,108,124,105],
[116,100,0,96,122,97,97,100],
[107,98,115,0,117,96,84,101],
[80,85,89,94,0,91,86,82],
[115,103,114,115,120,0,104,106],
[113,87,114,127,125,107,0,111],
[102,106,111,110,129,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,85,89,90,88,93,98],
[122,0,110,101,100,109,108,105],
[126,101,0,106,109,107,124,113],
[122,110,105,0,103,105,108,100],
[121,111,102,108,0,93,113,107],
[123,102,104,106,118,0,123,94],
[118,103,87,103,98,88,0,98],
[113,106,98,111,104,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,71,79,74,69,69,73],
[129,0,97,118,94,92,100,89],
[140,114,0,135,94,121,91,117],
[132,93,76,0,83,87,92,94],
[137,117,117,128,0,112,91,111],
[142,119,90,124,99,0,120,117],
[142,111,120,119,120,91,0,96],
[138,122,94,117,100,94,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,87,107,87,102,108],
[106,0,107,96,111,102,117,116],
[112,104,0,106,106,97,118,112],
[124,115,105,0,114,109,118,124],
[104,100,105,97,0,113,106,105],
[124,109,114,102,98,0,122,114],
[109,94,93,93,105,89,0,108],
[103,95,99,87,106,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,96,102,119,101,108,101],
[87,0,89,90,103,97,100,107],
[115,122,0,103,119,113,121,108],
[109,121,108,0,125,100,118,109],
[92,108,92,86,0,79,85,106],
[110,114,98,111,132,0,111,110],
[103,111,90,93,126,100,0,97],
[110,104,103,102,105,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,92,107,109,103,102],
[112,0,101,109,104,114,119,107],
[100,110,0,96,103,115,113,102],
[119,102,115,0,115,112,112,116],
[104,107,108,96,0,121,101,108],
[102,97,96,99,90,0,107,94],
[108,92,98,99,110,104,0,114],
[109,104,109,95,103,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,86,107,104,89,113,113],
[114,0,103,107,100,111,92,93],
[125,108,0,123,122,126,102,115],
[104,104,88,0,116,99,70,109],
[107,111,89,95,0,108,94,84],
[122,100,85,112,103,0,85,108],
[98,119,109,141,117,126,0,100],
[98,118,96,102,127,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,110,111,100,109,106],
[89,0,100,100,96,91,81,98],
[100,111,0,106,117,96,104,103],
[101,111,105,0,107,97,104,102],
[100,115,94,104,0,101,98,100],
[111,120,115,114,110,0,102,111],
[102,130,107,107,113,109,0,114],
[105,113,108,109,111,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,123,109,110,101,123],
[94,0,104,102,107,85,97,102],
[109,107,0,115,90,99,82,121],
[88,109,96,0,97,95,91,121],
[102,104,121,114,0,106,93,118],
[101,126,112,116,105,0,107,131],
[110,114,129,120,118,104,0,131],
[88,109,90,90,93,80,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,99,94,100,101,130],
[107,0,113,102,95,108,102,124],
[101,98,0,102,104,108,114,110],
[112,109,109,0,103,112,109,123],
[117,116,107,108,0,108,92,114],
[111,103,103,99,103,0,103,121],
[110,109,97,102,119,108,0,117],
[81,87,101,88,97,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,99,112,106,105,107],
[114,0,104,97,111,100,106,108],
[110,107,0,104,119,101,109,113],
[112,114,107,0,121,105,104,106],
[99,100,92,90,0,88,101,110],
[105,111,110,106,123,0,109,113],
[106,105,102,107,110,102,0,111],
[104,103,98,105,101,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,107,84,125,128,117],
[110,0,94,135,103,95,134,111],
[99,117,0,121,116,127,129,145],
[104,76,90,0,83,96,119,83],
[127,108,95,128,0,131,129,110],
[86,116,84,115,80,0,154,108],
[83,77,82,92,82,57,0,77],
[94,100,66,128,101,103,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,115,101,89,112,117],
[102,0,111,120,116,110,121,111],
[98,100,0,107,104,96,117,111],
[96,91,104,0,102,109,109,104],
[110,95,107,109,0,94,105,111],
[122,101,115,102,117,0,118,122],
[99,90,94,102,106,93,0,99],
[94,100,100,107,100,89,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,108,110,88,99,99],
[114,0,110,114,113,99,106,109],
[103,101,0,117,106,94,108,110],
[103,97,94,0,102,87,95,83],
[101,98,105,109,0,88,100,97],
[123,112,117,124,123,0,108,105],
[112,105,103,116,111,103,0,99],
[112,102,101,128,114,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,94,103,110,116,100,114],
[84,0,101,107,116,105,116,114],
[117,110,0,106,115,102,104,104],
[108,104,105,0,108,114,102,102],
[101,95,96,103,0,106,104,93],
[95,106,109,97,105,0,111,86],
[111,95,107,109,107,100,0,102],
[97,97,107,109,118,125,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,104,110,104,106,113],
[114,0,116,120,126,107,103,121],
[104,95,0,104,113,108,105,106],
[107,91,107,0,110,101,95,102],
[101,85,98,101,0,99,84,99],
[107,104,103,110,112,0,99,117],
[105,108,106,116,127,112,0,121],
[98,90,105,109,112,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,114,99,105,105,100,97],
[96,0,101,101,94,105,94,96],
[97,110,0,99,90,99,101,111],
[112,110,112,0,98,111,103,106],
[106,117,121,113,0,115,108,104],
[106,106,112,100,96,0,97,102],
[111,117,110,108,103,114,0,114],
[114,115,100,105,107,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,152,199,199,100,110,211],
[0,0,100,101,98,46,110,112],
[59,111,0,47,99,0,64,111],
[12,110,164,0,98,46,110,164],
[12,113,112,113,0,112,12,159],
[111,165,211,165,99,0,111,165],
[101,101,147,101,199,100,0,147],
[0,99,100,47,52,46,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,101,106,103,97,105],
[109,0,113,108,117,112,101,98],
[102,98,0,108,111,109,99,107],
[110,103,103,0,113,109,98,100],
[105,94,100,98,0,101,99,104],
[108,99,102,102,110,0,107,101],
[114,110,112,113,112,104,0,112],
[106,113,104,111,107,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,126,135,109,100,87,122],
[104,0,129,124,81,88,103,123],
[85,82,0,108,66,74,75,106],
[76,87,103,0,71,68,90,103],
[102,130,145,140,0,118,105,134],
[111,123,137,143,93,0,106,141],
[124,108,136,121,106,105,0,119],
[89,88,105,108,77,70,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,71,87,105,95,90,78],
[128,0,87,104,131,89,80,102],
[140,124,0,118,140,120,95,98],
[124,107,93,0,139,115,124,100],
[106,80,71,72,0,85,89,78],
[116,122,91,96,126,0,106,103],
[121,131,116,87,122,105,0,109],
[133,109,113,111,133,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,111,113,107,114,108],
[104,0,110,114,103,116,112,116],
[108,101,0,101,99,106,96,98],
[100,97,110,0,115,115,106,111],
[98,108,112,96,0,112,120,111],
[104,95,105,96,99,0,114,104],
[97,99,115,105,91,97,0,104],
[103,95,113,100,100,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,104,108,107,106,101],
[110,0,117,106,117,104,112,112],
[107,94,0,99,110,98,107,105],
[107,105,112,0,106,107,109,103],
[103,94,101,105,0,105,102,98],
[104,107,113,104,106,0,114,102],
[105,99,104,102,109,97,0,100],
[110,99,106,108,113,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,92,94,98,101,111,104],
[112,0,98,106,100,100,114,107],
[119,113,0,106,104,112,118,125],
[117,105,105,0,105,102,110,112],
[113,111,107,106,0,103,118,119],
[110,111,99,109,108,0,118,109],
[100,97,93,101,93,93,0,96],
[107,104,86,99,92,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,99,98,106,96,108],
[110,0,105,115,102,113,108,106],
[101,106,0,103,102,108,107,108],
[112,96,108,0,106,108,107,104],
[113,109,109,105,0,105,105,106],
[105,98,103,103,106,0,93,103],
[115,103,104,104,106,118,0,103],
[103,105,103,107,105,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,105,102,109,113,107],
[108,0,108,106,115,121,110,102],
[118,103,0,113,115,110,116,111],
[106,105,98,0,111,111,106,109],
[109,96,96,100,0,119,110,115],
[102,90,101,100,92,0,103,105],
[98,101,95,105,101,108,0,113],
[104,109,100,102,96,106,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,98,96,95,94,101],
[113,0,93,117,116,83,91,112],
[114,118,0,104,116,104,104,104],
[113,94,107,0,108,100,112,101],
[115,95,95,103,0,95,79,101],
[116,128,107,111,116,0,110,102],
[117,120,107,99,132,101,0,115],
[110,99,107,110,110,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,102,106,96,103,89],
[102,0,112,102,97,99,97,101],
[104,99,0,101,90,89,97,93],
[109,109,110,0,104,95,101,101],
[105,114,121,107,0,103,103,100],
[115,112,122,116,108,0,109,99],
[108,114,114,110,108,102,0,110],
[122,110,118,110,111,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,106,112,105,89,106],
[104,0,108,110,120,112,104,106],
[111,103,0,107,114,110,108,101],
[105,101,104,0,121,108,98,108],
[99,91,97,90,0,110,89,99],
[106,99,101,103,101,0,98,115],
[122,107,103,113,122,113,0,116],
[105,105,110,103,112,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,105,125,135,128,129,125],
[66,0,50,69,93,104,47,115],
[106,161,0,138,82,104,125,137],
[86,142,73,0,29,66,56,81],
[76,118,129,182,0,101,47,118],
[83,107,107,145,110,0,123,139],
[82,164,86,155,164,88,0,151],
[86,96,74,130,93,72,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,112,91,118,98,111,128],
[80,0,107,86,125,127,114,123],
[99,104,0,100,116,130,126,112],
[120,125,111,0,119,91,80,161],
[93,86,95,92,0,82,115,92],
[113,84,81,120,129,0,129,129],
[100,97,85,131,96,82,0,113],
[83,88,99,50,119,82,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,43,109,80,103,116,126],
[123,0,99,116,106,68,114,110],
[168,112,0,153,93,108,121,105],
[102,95,58,0,64,79,123,96],
[131,105,118,147,0,112,148,126],
[108,143,103,132,99,0,130,112],
[95,97,90,88,63,81,0,83],
[85,101,106,115,85,99,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,98,120,110,101,120],
[102,0,95,100,109,98,103,109],
[108,116,0,90,115,128,115,116],
[113,111,121,0,118,105,113,136],
[91,102,96,93,0,83,102,110],
[101,113,83,106,128,0,103,131],
[110,108,96,98,109,108,0,112],
[91,102,95,75,101,80,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,92,105,98,98,103],
[115,0,124,110,111,114,105,106],
[109,87,0,84,113,106,91,106],
[119,101,127,0,117,105,111,99],
[106,100,98,94,0,99,103,93],
[113,97,105,106,112,0,98,101],
[113,106,120,100,108,113,0,103],
[108,105,105,112,118,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,102,108,104,96,106],
[106,0,100,106,111,90,98,95],
[102,111,0,102,115,92,98,101],
[109,105,109,0,100,96,103,90],
[103,100,96,111,0,101,91,101],
[107,121,119,115,110,0,109,105],
[115,113,113,108,120,102,0,100],
[105,116,110,121,110,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,130,117,145,113,105,128],
[104,0,99,106,125,122,113,111],
[81,112,0,110,119,122,117,110],
[94,105,101,0,110,97,91,99],
[66,86,92,101,0,96,101,103],
[98,89,89,114,115,0,87,96],
[106,98,94,120,110,124,0,131],
[83,100,101,112,108,115,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,96,108,115,107,108],
[101,0,93,107,108,100,101,117],
[106,118,0,111,105,98,107,117],
[115,104,100,0,103,114,95,111],
[103,103,106,108,0,105,104,104],
[96,111,113,97,106,0,104,100],
[104,110,104,116,107,107,0,109],
[103,94,94,100,107,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,115,109,103,113,108],
[98,0,105,107,104,100,97,104],
[96,106,0,103,104,96,102,92],
[96,104,108,0,97,97,107,104],
[102,107,107,114,0,109,102,101],
[108,111,115,114,102,0,104,113],
[98,114,109,104,109,107,0,102],
[103,107,119,107,110,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,96,110,98,103,113,116],
[93,0,95,95,103,98,89,103],
[115,116,0,122,105,101,103,122],
[101,116,89,0,110,98,95,107],
[113,108,106,101,0,97,98,107],
[108,113,110,113,114,0,98,112],
[98,122,108,116,113,113,0,126],
[95,108,89,104,104,99,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,91,97,105,98,85,90],
[124,0,101,96,108,105,92,101],
[120,110,0,104,112,112,109,100],
[114,115,107,0,109,117,114,105],
[106,103,99,102,0,115,104,106],
[113,106,99,94,96,0,107,102],
[126,119,102,97,107,104,0,94],
[121,110,111,106,105,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,86,110,109,109,99,107],
[95,0,108,114,101,118,102,113],
[125,103,0,121,109,120,108,129],
[101,97,90,0,89,100,114,120],
[102,110,102,122,0,112,92,98],
[102,93,91,111,99,0,98,96],
[112,109,103,97,119,113,0,115],
[104,98,82,91,113,115,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,89,95,105,102,108,97],
[107,0,88,106,99,84,93,94],
[122,123,0,119,117,110,116,104],
[116,105,92,0,112,92,107,105],
[106,112,94,99,0,96,101,95],
[109,127,101,119,115,0,115,111],
[103,118,95,104,110,96,0,108],
[114,117,107,106,116,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,118,97,106,92,108,113],
[112,0,107,98,113,110,109,122],
[93,104,0,97,99,105,93,112],
[114,113,114,0,119,107,94,128],
[105,98,112,92,0,96,115,110],
[119,101,106,104,115,0,103,125],
[103,102,118,117,96,108,0,119],
[98,89,99,83,101,86,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,117,115,114,122,104],
[103,0,98,101,100,97,103,98],
[95,113,0,107,110,101,113,107],
[94,110,104,0,110,96,119,104],
[96,111,101,101,0,97,120,99],
[97,114,110,115,114,0,121,102],
[89,108,98,92,91,90,0,94],
[107,113,104,107,112,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,120,112,115,100,108],
[94,0,91,99,101,101,90,93],
[105,120,0,106,113,114,102,109],
[91,112,105,0,100,95,104,111],
[99,110,98,111,0,100,96,101],
[96,110,97,116,111,0,101,100],
[111,121,109,107,115,110,0,103],
[103,118,102,100,110,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,117,94,100,112,105],
[103,0,104,102,97,97,110,101],
[99,107,0,99,95,94,110,104],
[94,109,112,0,86,91,110,100],
[117,114,116,125,0,110,104,112],
[111,114,117,120,101,0,122,118],
[99,101,101,101,107,89,0,98],
[106,110,107,111,99,93,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,101,95,87,100,100,90],
[127,0,123,94,106,124,115,112],
[110,88,0,86,96,116,91,88],
[116,117,125,0,123,119,115,103],
[124,105,115,88,0,127,112,100],
[111,87,95,92,84,0,113,82],
[111,96,120,96,99,98,0,100],
[121,99,123,108,111,129,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,92,88,99,101,101],
[117,0,99,105,90,92,100,98],
[112,112,0,109,96,113,110,112],
[119,106,102,0,92,96,107,108],
[123,121,115,119,0,105,107,109],
[112,119,98,115,106,0,112,101],
[110,111,101,104,104,99,0,99],
[110,113,99,103,102,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,109,105,118,114,118],
[99,0,103,105,103,119,107,107],
[107,108,0,109,114,115,101,118],
[102,106,102,0,107,112,116,114],
[106,108,97,104,0,122,117,106],
[93,92,96,99,89,0,104,107],
[97,104,110,95,94,107,0,97],
[93,104,93,97,105,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,103,101,95,105,106],
[100,0,102,103,104,107,104,114],
[100,109,0,95,107,103,108,109],
[108,108,116,0,108,105,103,113],
[110,107,104,103,0,115,113,120],
[116,104,108,106,96,0,114,101],
[106,107,103,108,98,97,0,111],
[105,97,102,98,91,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,109,93,108,110,126],
[102,0,111,107,109,111,118,118],
[105,100,0,96,94,115,114,120],
[102,104,115,0,101,114,113,119],
[118,102,117,110,0,119,112,127],
[103,100,96,97,92,0,104,105],
[101,93,97,98,99,107,0,119],
[85,93,91,92,84,106,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,89,100,98,124,113],
[105,0,106,86,101,112,108,106],
[107,105,0,92,102,103,114,100],
[122,125,119,0,104,120,128,124],
[111,110,109,107,0,113,116,103],
[113,99,108,91,98,0,118,96],
[87,103,97,83,95,93,0,90],
[98,105,111,87,108,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,110,114,108,105,101],
[109,0,104,105,116,110,105,113],
[110,107,0,93,111,106,93,100],
[101,106,118,0,97,111,105,107],
[97,95,100,114,0,105,107,107],
[103,101,105,100,106,0,100,100],
[106,106,118,106,104,111,0,110],
[110,98,111,104,104,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,115,93,91,105,111],
[109,0,99,104,107,100,112,111],
[108,112,0,106,97,103,116,114],
[96,107,105,0,91,87,96,102],
[118,104,114,120,0,107,117,123],
[120,111,108,124,104,0,111,111],
[106,99,95,115,94,100,0,108],
[100,100,97,109,88,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,107,107,111,102,102],
[108,0,98,118,106,106,115,106],
[109,113,0,126,101,114,116,107],
[104,93,85,0,99,101,106,99],
[104,105,110,112,0,106,122,99],
[100,105,97,110,105,0,103,99],
[109,96,95,105,89,108,0,101],
[109,105,104,112,112,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,145,85,94,126,149,114],
[66,0,119,66,43,152,144,95],
[66,92,0,62,43,99,88,34],
[126,145,149,0,94,177,149,94],
[117,168,168,117,0,168,140,85],
[85,59,112,34,43,0,144,85],
[62,67,123,62,71,67,0,62],
[97,116,177,117,126,126,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,94,147,109,122,170,134],
[122,0,105,210,120,178,154,186],
[117,106,0,135,64,98,137,123],
[64,1,76,0,40,68,96,105],
[102,91,147,171,0,136,111,134],
[89,33,113,143,75,0,107,116],
[41,57,74,115,100,104,0,140],
[77,25,88,106,77,95,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,136,140,116,76,83,108],
[90,0,92,106,76,84,91,97],
[75,119,0,130,99,112,74,130],
[71,105,81,0,102,92,54,125],
[95,135,112,109,0,92,100,139],
[135,127,99,119,119,0,111,114],
[128,120,137,157,111,100,0,117],
[103,114,81,86,72,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,154,123,122,142,114,140],
[111,0,138,126,93,146,125,118],
[57,73,0,69,68,83,104,108],
[88,85,142,0,97,119,126,120],
[89,118,143,114,0,102,102,138],
[69,65,128,92,109,0,73,107],
[97,86,107,85,109,138,0,105],
[71,93,103,91,73,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,70,77,81,110,103,91],
[123,0,105,121,121,108,106,112],
[141,106,0,114,110,104,115,101],
[134,90,97,0,102,108,97,104],
[130,90,101,109,0,105,92,96],
[101,103,107,103,106,0,95,91],
[108,105,96,114,119,116,0,92],
[120,99,110,107,115,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,90,103,97,109,97,89],
[106,0,97,95,90,104,106,100],
[121,114,0,111,109,120,125,104],
[108,116,100,0,99,113,106,98],
[114,121,102,112,0,114,113,114],
[102,107,91,98,97,0,100,85],
[114,105,86,105,98,111,0,96],
[122,111,107,113,97,126,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,108,128,133,71,105,131],
[71,0,111,85,94,65,86,126],
[103,100,0,114,125,71,106,113],
[83,126,97,0,108,106,107,108],
[78,117,86,103,0,65,95,106],
[140,146,140,105,146,0,97,90],
[106,125,105,104,116,114,0,125],
[80,85,98,103,105,121,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,116,83,103,114,100],
[107,0,84,123,107,107,104,110],
[121,127,0,128,105,117,107,113],
[95,88,83,0,92,97,85,101],
[128,104,106,119,0,131,104,117],
[108,104,94,114,80,0,95,99],
[97,107,104,126,107,116,0,107],
[111,101,98,110,94,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,100,108,107,108,109],
[105,0,110,114,120,118,107,113],
[113,101,0,98,123,109,105,108],
[111,97,113,0,114,117,101,108],
[103,91,88,97,0,117,89,107],
[104,93,102,94,94,0,90,96],
[103,104,106,110,122,121,0,111],
[102,98,103,103,104,115,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,110,92,86,93,89,104],
[127,0,103,106,108,103,104,106],
[101,108,0,104,108,115,97,88],
[119,105,107,0,97,95,103,106],
[125,103,103,114,0,102,114,118],
[118,108,96,116,109,0,107,117],
[122,107,114,108,97,104,0,115],
[107,105,123,105,93,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,104,89,129,103,111],
[116,0,108,105,105,103,98,117],
[101,103,0,105,99,118,99,95],
[107,106,106,0,91,101,109,114],
[122,106,112,120,0,104,118,96],
[82,108,93,110,107,0,105,120],
[108,113,112,102,93,106,0,102],
[100,94,116,97,115,91,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,111,101,105,113,107],
[100,0,123,120,109,116,116,116],
[102,88,0,110,112,106,103,112],
[100,91,101,0,94,115,112,113],
[110,102,99,117,0,114,109,114],
[106,95,105,96,97,0,99,104],
[98,95,108,99,102,112,0,106],
[104,95,99,98,97,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,114,107,112,113,95],
[106,0,95,120,118,99,96,104],
[99,116,0,117,98,104,102,92],
[97,91,94,0,97,106,96,92],
[104,93,113,114,0,113,110,108],
[99,112,107,105,98,0,110,103],
[98,115,109,115,101,101,0,88],
[116,107,119,119,103,108,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,112,91,113,106,101],
[98,0,108,106,106,112,96,92],
[111,103,0,111,103,115,117,115],
[99,105,100,0,99,100,104,98],
[120,105,108,112,0,120,113,112],
[98,99,96,111,91,0,98,99],
[105,115,94,107,98,113,0,111],
[110,119,96,113,99,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,121,90,106,113,112],
[108,0,114,99,96,109,103,107],
[100,97,0,119,108,111,112,99],
[90,112,92,0,93,110,112,100],
[121,115,103,118,0,117,110,108],
[105,102,100,101,94,0,106,105],
[98,108,99,99,101,105,0,109],
[99,104,112,111,103,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,97,105,134,100,89],
[109,0,110,105,104,113,104,106],
[102,101,0,116,87,122,117,102],
[114,106,95,0,103,121,107,95],
[106,107,124,108,0,124,134,89],
[77,98,89,90,87,0,103,75],
[111,107,94,104,77,108,0,92],
[122,105,109,116,122,136,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,92,96,95,89,100],
[117,0,118,96,117,113,98,112],
[102,93,0,90,98,98,92,106],
[119,115,121,0,101,116,115,109],
[115,94,113,110,0,109,109,113],
[116,98,113,95,102,0,102,113],
[122,113,119,96,102,109,0,127],
[111,99,105,102,98,98,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,106,112,109,104,113],
[102,0,108,104,101,95,107,111],
[108,103,0,113,112,92,109,100],
[105,107,98,0,103,101,105,103],
[99,110,99,108,0,96,111,109],
[102,116,119,110,115,0,110,115],
[107,104,102,106,100,101,0,96],
[98,100,111,108,102,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,93,95,97,90,94],
[105,0,108,88,99,96,94,107],
[117,103,0,108,98,108,108,108],
[118,123,103,0,105,109,113,111],
[116,112,113,106,0,96,100,109],
[114,115,103,102,115,0,94,112],
[121,117,103,98,111,117,0,116],
[117,104,103,100,102,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,105,132,98,104,103],
[105,0,109,115,140,125,122,127],
[107,102,0,110,117,106,105,118],
[106,96,101,0,118,106,112,115],
[79,71,94,93,0,89,77,92],
[113,86,105,105,122,0,90,107],
[107,89,106,99,134,121,0,103],
[108,84,93,96,119,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,121,99,126,111,119],
[99,0,104,111,111,123,104,108],
[109,107,0,106,110,117,98,112],
[90,100,105,0,99,98,91,101],
[112,100,101,112,0,125,95,116],
[85,88,94,113,86,0,88,97],
[100,107,113,120,116,123,0,111],
[92,103,99,110,95,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,105,112,117,122,115],
[104,0,104,98,113,106,103,103],
[105,107,0,107,116,111,115,116],
[106,113,104,0,114,117,115,120],
[99,98,95,97,0,111,94,101],
[94,105,100,94,100,0,102,104],
[89,108,96,96,117,109,0,101],
[96,108,95,91,110,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,111,97,108,114,111],
[105,0,105,102,95,112,117,106],
[104,106,0,100,106,116,115,95],
[100,109,111,0,98,113,118,104],
[114,116,105,113,0,122,118,111],
[103,99,95,98,89,0,104,106],
[97,94,96,93,93,107,0,86],
[100,105,116,107,100,105,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,113,124,102,115,108,109],
[92,0,104,117,90,104,101,105],
[98,107,0,108,112,116,94,100],
[87,94,103,0,95,108,99,99],
[109,121,99,116,0,113,104,106],
[96,107,95,103,98,0,95,98],
[103,110,117,112,107,116,0,106],
[102,106,111,112,105,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,92,106,101,99,114],
[104,0,105,114,116,109,112,108],
[112,106,0,103,107,104,105,108],
[119,97,108,0,107,115,113,117],
[105,95,104,104,0,111,106,108],
[110,102,107,96,100,0,98,112],
[112,99,106,98,105,113,0,100],
[97,103,103,94,103,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,94,91,115,87,120],
[109,0,114,93,79,100,76,107],
[113,97,0,104,108,87,98,107],
[117,118,107,0,112,99,102,133],
[120,132,103,99,0,111,98,113],
[96,111,124,112,100,0,109,121],
[124,135,113,109,113,102,0,121],
[91,104,104,78,98,90,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,96,120,88,97,111],
[122,0,104,131,113,109,109,108],
[105,107,0,117,115,88,104,111],
[115,80,94,0,117,108,86,99],
[91,98,96,94,0,92,87,110],
[123,102,123,103,119,0,97,115],
[114,102,107,125,124,114,0,106],
[100,103,100,112,101,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,107,123,106,97,95],
[96,0,120,103,107,114,99,106],
[100,91,0,108,102,106,92,95],
[104,108,103,0,109,113,98,109],
[88,104,109,102,0,112,109,107],
[105,97,105,98,99,0,97,103],
[114,112,119,113,102,114,0,104],
[116,105,116,102,104,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,103,95,109,103,113],
[106,0,105,114,114,107,110,112],
[98,106,0,113,109,103,115,100],
[108,97,98,0,105,102,103,103],
[116,97,102,106,0,98,108,118],
[102,104,108,109,113,0,111,117],
[108,101,96,108,103,100,0,112],
[98,99,111,108,93,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,106,98,111,99,108],
[105,0,96,103,97,100,102,99],
[105,115,0,103,98,99,98,105],
[105,108,108,0,106,106,106,97],
[113,114,113,105,0,116,107,106],
[100,111,112,105,95,0,102,107],
[112,109,113,105,104,109,0,111],
[103,112,106,114,105,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,96,105,104,118,130,145],
[122,0,104,141,104,121,137,136],
[115,107,0,108,93,108,114,110],
[106,70,103,0,108,89,127,107],
[107,107,118,103,0,114,113,131],
[93,90,103,122,97,0,137,126],
[81,74,97,84,98,74,0,115],
[66,75,101,104,80,85,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,90,117,107,114,99],
[100,0,116,110,109,110,114,117],
[117,95,0,103,107,94,118,106],
[121,101,108,0,100,113,136,110],
[94,102,104,111,0,96,112,96],
[104,101,117,98,115,0,114,112],
[97,97,93,75,99,97,0,85],
[112,94,105,101,115,99,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,120,114,114,106,114],
[109,0,109,114,102,107,102,108],
[101,102,0,108,110,94,98,105],
[91,97,103,0,112,101,102,100],
[97,109,101,99,0,97,99,87],
[97,104,117,110,114,0,105,106],
[105,109,113,109,112,106,0,107],
[97,103,106,111,124,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,100,97,110,106,106],
[115,0,110,111,97,105,106,98],
[108,101,0,113,108,107,99,111],
[111,100,98,0,94,103,97,97],
[114,114,103,117,0,117,114,122],
[101,106,104,108,94,0,104,109],
[105,105,112,114,97,107,0,107],
[105,113,100,114,89,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,108,101,126,104,107],
[95,0,106,110,112,111,92,112],
[107,105,0,99,100,109,103,99],
[103,101,112,0,109,118,104,95],
[110,99,111,102,0,113,102,93],
[85,100,102,93,98,0,107,98],
[107,119,108,107,109,104,0,104],
[104,99,112,116,118,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,126,107,112,107,110],
[107,0,110,109,96,114,104,113],
[88,101,0,109,95,113,106,108],
[85,102,102,0,98,101,103,105],
[104,115,116,113,0,114,112,113],
[99,97,98,110,97,0,104,101],
[104,107,105,108,99,107,0,116],
[101,98,103,106,98,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,101,94,108,100,98],
[114,0,118,112,94,108,102,111],
[115,93,0,106,101,107,111,120],
[110,99,105,0,98,115,110,105],
[117,117,110,113,0,99,106,108],
[103,103,104,96,112,0,100,112],
[111,109,100,101,105,111,0,113],
[113,100,91,106,103,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,98,108,101,100,99],
[104,0,90,93,98,87,97,113],
[99,121,0,109,114,95,107,100],
[113,118,102,0,117,110,118,101],
[103,113,97,94,0,99,97,96],
[110,124,116,101,112,0,117,106],
[111,114,104,93,114,94,0,101],
[112,98,111,110,115,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,108,106,99,103,100],
[100,0,105,95,109,111,107,96],
[103,106,0,99,110,112,107,101],
[103,116,112,0,114,114,106,106],
[105,102,101,97,0,112,110,103],
[112,100,99,97,99,0,99,102],
[108,104,104,105,101,112,0,102],
[111,115,110,105,108,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,111,150,131,127,99,111],
[80,0,79,100,124,105,93,88],
[100,132,0,117,106,107,89,102],
[61,111,94,0,110,110,77,105],
[80,87,105,101,0,97,88,112],
[84,106,104,101,114,0,69,76],
[112,118,122,134,123,142,0,105],
[100,123,109,106,99,135,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,57,107,56,57,107,79],
[103,0,56,210,56,56,56,126],
[154,155,0,155,73,177,96,177],
[104,1,56,0,56,56,56,126],
[155,155,138,155,0,105,142,161],
[154,155,34,155,106,0,130,211],
[104,155,115,155,69,81,0,160],
[132,85,34,85,50,0,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,87,100,87,87,105,85],
[118,0,113,121,99,100,114,106],
[124,98,0,117,98,90,98,94],
[111,90,94,0,91,91,99,104],
[124,112,113,120,0,104,121,112],
[124,111,121,120,107,0,105,110],
[106,97,113,112,90,106,0,109],
[126,105,117,107,99,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,111,110,104,107,117],
[98,0,103,119,108,89,109,106],
[112,108,0,114,104,111,105,115],
[100,92,97,0,96,93,94,101],
[101,103,107,115,0,103,101,111],
[107,122,100,118,108,0,115,122],
[104,102,106,117,110,96,0,115],
[94,105,96,110,100,89,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,100,92,93,96,110],
[102,0,97,90,94,94,101,106],
[118,114,0,101,109,111,101,118],
[111,121,110,0,101,98,115,112],
[119,117,102,110,0,109,106,105],
[118,117,100,113,102,0,118,111],
[115,110,110,96,105,93,0,114],
[101,105,93,99,106,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,92,75,104,113,92],
[119,0,98,90,110,111,126,95],
[114,113,0,96,95,95,125,122],
[119,121,115,0,128,116,124,104],
[136,101,116,83,0,104,139,109],
[107,100,116,95,107,0,125,116],
[98,85,86,87,72,86,0,96],
[119,116,89,107,102,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,91,120,90,111,100,113],
[106,0,117,108,99,101,110,102],
[120,94,0,118,96,107,126,125],
[91,103,93,0,87,92,99,112],
[121,112,115,124,0,93,117,119],
[100,110,104,119,118,0,109,129],
[111,101,85,112,94,102,0,115],
[98,109,86,99,92,82,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,113,121,97,121,163,56],
[90,0,101,48,75,82,136,138],
[98,110,0,118,94,110,122,96],
[90,163,93,0,79,93,179,138],
[114,136,117,132,0,136,152,98],
[90,129,101,118,75,0,160,134],
[48,75,89,32,59,51,0,96],
[155,73,115,73,113,77,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,87,101,107,98,94],
[110,0,108,88,99,99,125,103],
[122,103,0,111,119,112,121,111],
[124,123,100,0,96,120,121,109],
[110,112,92,115,0,112,124,98],
[104,112,99,91,99,0,112,110],
[113,86,90,90,87,99,0,97],
[117,108,100,102,113,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,110,115,84,107,118,116],
[127,0,93,105,116,116,120,116],
[101,118,0,119,122,126,115,128],
[96,106,92,0,77,108,111,103],
[127,95,89,134,0,97,115,126],
[104,95,85,103,114,0,104,128],
[93,91,96,100,96,107,0,113],
[95,95,83,108,85,83,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,98,101,119,101,106],
[107,0,104,102,100,107,100,104],
[118,107,0,111,116,123,103,99],
[113,109,100,0,103,117,105,98],
[110,111,95,108,0,120,111,97],
[92,104,88,94,91,0,85,94],
[110,111,108,106,100,126,0,101],
[105,107,112,113,114,117,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,125,99,113,131,123],
[101,0,99,109,88,75,98,94],
[95,112,0,114,97,100,110,126],
[86,102,97,0,86,89,107,119],
[112,123,114,125,0,99,125,132],
[98,136,111,122,112,0,128,130],
[80,113,101,104,86,83,0,108],
[88,117,85,92,79,81,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,110,108,112,114,107],
[110,0,110,110,110,103,105,113],
[109,101,0,114,98,103,109,105],
[101,101,97,0,102,106,104,106],
[103,101,113,109,0,106,106,103],
[99,108,108,105,105,0,109,106],
[97,106,102,107,105,102,0,100],
[104,98,106,105,108,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,98,115,99,103,105],
[105,0,105,111,103,106,118,107],
[109,106,0,120,117,97,103,103],
[113,100,91,0,112,100,103,106],
[96,108,94,99,0,90,97,90],
[112,105,114,111,121,0,118,108],
[108,93,108,108,114,93,0,100],
[106,104,108,105,121,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,136,128,112,112,121],
[107,0,112,136,119,103,106,113],
[104,99,0,135,120,107,118,97],
[75,75,76,0,92,87,108,89],
[83,92,91,119,0,104,114,104],
[99,108,104,124,107,0,116,97],
[99,105,93,103,97,95,0,94],
[90,98,114,122,107,114,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,113,96,102,126,117],
[93,0,107,116,102,106,112,97],
[106,104,0,119,106,108,111,106],
[98,95,92,0,85,90,93,82],
[115,109,105,126,0,113,122,98],
[109,105,103,121,98,0,109,109],
[85,99,100,118,89,102,0,91],
[94,114,105,129,113,102,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,113,105,112,100,117],
[106,0,122,103,113,107,104,109],
[104,89,0,95,95,99,102,100],
[98,108,116,0,98,106,95,114],
[106,98,116,113,0,109,110,112],
[99,104,112,105,102,0,102,104],
[111,107,109,116,101,109,0,110],
[94,102,111,97,99,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,123,139,106,96,122,82],
[112,0,118,135,111,112,108,95],
[88,93,0,121,117,85,89,107],
[72,76,90,0,87,79,62,88],
[105,100,94,124,0,81,94,113],
[115,99,126,132,130,0,118,126],
[89,103,122,149,117,93,0,112],
[129,116,104,123,98,85,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,86,79,83,106,100,86],
[136,0,91,98,88,126,98,86],
[125,120,0,115,121,131,111,97],
[132,113,96,0,126,122,106,110],
[128,123,90,85,0,102,85,96],
[105,85,80,89,109,0,92,67],
[111,113,100,105,126,119,0,100],
[125,125,114,101,115,144,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,128,100,119,149,120,108],
[109,0,120,123,117,96,139,119],
[83,91,0,68,118,123,114,105],
[111,88,143,0,109,103,113,123],
[92,94,93,102,0,87,99,99],
[62,115,88,108,124,0,88,88],
[91,72,97,98,112,123,0,91],
[103,92,106,88,112,123,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,119,156,138,108,113,103],
[63,0,68,101,106,71,93,62],
[92,143,0,123,105,108,119,94],
[55,110,88,0,94,71,113,105],
[73,105,106,117,0,63,114,66],
[103,140,103,140,148,0,121,132],
[98,118,92,98,97,90,0,83],
[108,149,117,106,145,79,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,109,98,134,109,115,112],
[88,0,98,99,120,93,104,96],
[102,113,0,92,117,102,106,110],
[113,112,119,0,125,103,114,109],
[77,91,94,86,0,88,103,96],
[102,118,109,108,123,0,110,113],
[96,107,105,97,108,101,0,107],
[99,115,101,102,115,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,60,93,120,102,80],
[103,0,130,81,100,109,99,103],
[92,81,0,77,66,101,86,98],
[151,130,134,0,124,124,141,103],
[118,111,145,87,0,121,119,109],
[91,102,110,87,90,0,102,83],
[109,112,125,70,92,109,0,93],
[131,108,113,108,102,128,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,89,95,109,87,106,104],
[121,0,115,84,104,92,105,115],
[122,96,0,115,117,106,125,115],
[116,127,96,0,122,98,120,115],
[102,107,94,89,0,84,108,97],
[124,119,105,113,127,0,121,130],
[105,106,86,91,103,90,0,116],
[107,96,96,96,114,81,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,117,113,100,114,137,110],
[88,0,93,104,105,101,105,99],
[94,118,0,107,108,118,117,114],
[98,107,104,0,97,114,108,108],
[111,106,103,114,0,138,122,118],
[97,110,93,97,73,0,118,109],
[74,106,94,103,89,93,0,101],
[101,112,97,103,93,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,112,103,105,110,106,100],
[121,0,124,106,104,105,108,116],
[99,87,0,95,91,85,104,98],
[108,105,116,0,118,109,120,114],
[106,107,120,93,0,98,113,110],
[101,106,126,102,113,0,116,103],
[105,103,107,91,98,95,0,113],
[111,95,113,97,101,108,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,81,96,93,101,96,105],
[127,0,104,109,106,115,115,112],
[130,107,0,112,103,114,106,106],
[115,102,99,0,99,117,98,114],
[118,105,108,112,0,121,109,108],
[110,96,97,94,90,0,100,94],
[115,96,105,113,102,111,0,108],
[106,99,105,97,103,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,132,78,85,95,110,106],
[112,0,116,95,94,118,94,137],
[79,95,0,94,96,82,64,109],
[133,116,117,0,92,119,107,131],
[126,117,115,119,0,103,101,145],
[116,93,129,92,108,0,92,147],
[101,117,147,104,110,119,0,135],
[105,74,102,80,66,64,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,135,99,109,111,123,119],
[104,0,130,93,110,113,99,106],
[76,81,0,70,86,64,85,73],
[112,118,141,0,120,115,116,101],
[102,101,125,91,0,96,108,81],
[100,98,147,96,115,0,129,105],
[88,112,126,95,103,82,0,117],
[92,105,138,110,130,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,97,107,96,106,105],
[96,0,99,90,96,102,93,99],
[107,112,0,96,112,95,99,104],
[114,121,115,0,111,104,107,107],
[104,115,99,100,0,107,110,109],
[115,109,116,107,104,0,105,112],
[105,118,112,104,101,106,0,102],
[106,112,107,104,102,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,103,100,103,95,122],
[112,0,100,108,106,96,108,111],
[109,111,0,97,100,100,105,110],
[108,103,114,0,93,96,99,107],
[111,105,111,118,0,109,114,121],
[108,115,111,115,102,0,109,125],
[116,103,106,112,97,102,0,118],
[89,100,101,104,90,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,110,96,101,95,121],
[102,0,99,108,112,111,105,130],
[115,112,0,122,121,123,102,120],
[101,103,89,0,102,99,97,109],
[115,99,90,109,0,110,107,115],
[110,100,88,112,101,0,95,120],
[116,106,109,114,104,116,0,125],
[90,81,91,102,96,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,92,93,112,105,109,96],
[114,0,95,103,113,112,112,89],
[119,116,0,109,105,115,115,105],
[118,108,102,0,100,108,104,99],
[99,98,106,111,0,111,109,102],
[106,99,96,103,100,0,97,101],
[102,99,96,107,102,114,0,106],
[115,122,106,112,109,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,103,96,112,110,71],
[114,0,129,125,91,138,103,84],
[104,82,0,129,87,127,92,109],
[108,86,82,0,76,68,74,72],
[115,120,124,135,0,122,113,90],
[99,73,84,143,89,0,80,64],
[101,108,119,137,98,131,0,99],
[140,127,102,139,121,147,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,116,63,71,48,110],
[95,0,107,118,81,72,60,113],
[101,104,0,89,58,74,61,93],
[95,93,122,0,71,68,65,80],
[148,130,153,140,0,111,95,149],
[140,139,137,143,100,0,109,135],
[163,151,150,146,116,102,0,131],
[101,98,118,131,62,76,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,60,80,68,84,70,77],
[130,0,81,101,80,98,91,116],
[151,130,0,134,100,96,122,130],
[131,110,77,0,91,109,94,124],
[143,131,111,120,0,117,102,136],
[127,113,115,102,94,0,116,113],
[141,120,89,117,109,95,0,125],
[134,95,81,87,75,98,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,103,102,113,98,105],
[102,0,106,106,101,101,88,102],
[97,105,0,95,101,100,93,99],
[108,105,116,0,110,114,110,107],
[109,110,110,101,0,112,95,110],
[98,110,111,97,99,0,91,103],
[113,123,118,101,116,120,0,119],
[106,109,112,104,101,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,123,107,94,121,112,113],
[95,0,98,92,93,108,94,106],
[88,113,0,92,99,104,100,96],
[104,119,119,0,84,102,107,109],
[117,118,112,127,0,118,104,125],
[90,103,107,109,93,0,107,104],
[99,117,111,104,107,104,0,107],
[98,105,115,102,86,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,113,105,119,112,122],
[103,0,117,119,108,107,103,123],
[107,94,0,113,106,103,116,107],
[98,92,98,0,86,111,94,106],
[106,103,105,125,0,125,120,121],
[92,104,108,100,86,0,97,110],
[99,108,95,117,91,114,0,117],
[89,88,104,105,90,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,89,85,96,93,91,96],
[123,0,99,104,109,100,96,109],
[122,112,0,114,112,112,100,108],
[126,107,97,0,108,100,87,111],
[115,102,99,103,0,103,113,98],
[118,111,99,111,108,0,104,112],
[120,115,111,124,98,107,0,110],
[115,102,103,100,113,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,114,106,110,108,103],
[93,0,96,102,93,102,104,104],
[98,115,0,107,96,110,116,100],
[97,109,104,0,94,105,101,109],
[105,118,115,117,0,109,110,107],
[101,109,101,106,102,0,104,101],
[103,107,95,110,101,107,0,109],
[108,107,111,102,104,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,93,100,97,108,96,108],
[114,0,105,102,105,109,95,116],
[118,106,0,115,100,113,107,120],
[111,109,96,0,105,116,112,108],
[114,106,111,106,0,109,115,105],
[103,102,98,95,102,0,101,100],
[115,116,104,99,96,110,0,85],
[103,95,91,103,106,111,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,114,108,108,90,116,109],
[116,0,120,110,111,108,107,105],
[97,91,0,103,103,90,100,107],
[103,101,108,0,96,91,108,105],
[103,100,108,115,0,101,101,98],
[121,103,121,120,110,0,105,118],
[95,104,111,103,110,106,0,113],
[102,106,104,106,113,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,105,117,96,93,97],
[107,0,105,104,112,106,99,109],
[107,106,0,106,108,105,105,123],
[106,107,105,0,108,95,109,98],
[94,99,103,103,0,112,102,106],
[115,105,106,116,99,0,103,110],
[118,112,106,102,109,108,0,112],
[114,102,88,113,105,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,109,100,113,120,101],
[98,0,96,82,77,92,106,82],
[114,115,0,91,100,85,107,101],
[102,129,120,0,106,109,116,114],
[111,134,111,105,0,100,109,114],
[98,119,126,102,111,0,130,111],
[91,105,104,95,102,81,0,107],
[110,129,110,97,97,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,93,105,72,87,107,110],
[140,0,104,128,123,118,122,147],
[118,107,0,107,94,93,120,110],
[106,83,104,0,110,89,113,119],
[139,88,117,101,0,115,100,119],
[124,93,118,122,96,0,117,122],
[104,89,91,98,111,94,0,118],
[101,64,101,92,92,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,79,98,92,109,99,83],
[108,0,114,105,109,126,114,120],
[132,97,0,99,106,114,106,85],
[113,106,112,0,105,120,107,103],
[119,102,105,106,0,131,118,96],
[102,85,97,91,80,0,95,88],
[112,97,105,104,93,116,0,102],
[128,91,126,108,115,123,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,101,88,94,96,89],
[109,0,121,105,116,109,110,98],
[98,90,0,97,95,100,98,79],
[110,106,114,0,93,114,108,118],
[123,95,116,118,0,113,108,108],
[117,102,111,97,98,0,101,102],
[115,101,113,103,103,110,0,105],
[122,113,132,93,103,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,104,140,107,95,126],
[107,0,105,104,129,105,95,106],
[97,106,0,92,129,106,113,128],
[107,107,119,0,140,91,109,99],
[71,82,82,71,0,86,98,104],
[104,106,105,120,125,0,105,106],
[116,116,98,102,113,106,0,121],
[85,105,83,112,107,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,102,100,111,109,103,123],
[94,0,106,96,107,107,100,111],
[109,105,0,112,126,126,101,129],
[111,115,99,0,113,123,112,122],
[100,104,85,98,0,95,94,110],
[102,104,85,88,116,0,97,111],
[108,111,110,99,117,114,0,121],
[88,100,82,89,101,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,123,109,154,92,86],
[92,0,86,74,123,125,114,105],
[94,125,0,133,105,158,105,81],
[88,137,78,0,124,138,107,102],
[102,88,106,87,0,121,70,85],
[57,86,53,73,90,0,86,78],
[119,97,106,104,141,125,0,121],
[125,106,130,109,126,133,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,94,112,118,115,126],
[95,0,115,107,102,115,116,115],
[94,96,0,82,79,106,99,115],
[117,104,129,0,114,110,119,117],
[99,109,132,97,0,128,112,128],
[93,96,105,101,83,0,113,112],
[96,95,112,92,99,98,0,112],
[85,96,96,94,83,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,99,95,100,95,92],
[96,0,104,99,90,97,94,93],
[101,107,0,92,103,107,98,93],
[112,112,119,0,106,102,97,103],
[116,121,108,105,0,116,105,107],
[111,114,104,109,95,0,96,99],
[116,117,113,114,106,115,0,98],
[119,118,118,108,104,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,90,78,96,101,101,94],
[109,0,102,83,106,108,94,85],
[121,109,0,114,103,128,103,107],
[133,128,97,0,106,122,107,106],
[115,105,108,105,0,119,110,97],
[110,103,83,89,92,0,102,100],
[110,117,108,104,101,109,0,93],
[117,126,104,105,114,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,116,106,107,104,104],
[109,0,115,114,109,106,124,102],
[104,96,0,108,99,105,111,105],
[95,97,103,0,105,104,105,110],
[105,102,112,106,0,107,109,103],
[104,105,106,107,104,0,113,104],
[107,87,100,106,102,98,0,101],
[107,109,106,101,108,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,117,136,142,124,127,104],
[98,0,83,108,105,107,97,88],
[94,128,0,124,106,127,105,108],
[75,103,87,0,92,90,76,77],
[69,106,105,119,0,117,108,94],
[87,104,84,121,94,0,83,86],
[84,114,106,135,103,128,0,105],
[107,123,103,134,117,125,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,117,95,140,98,93],
[93,0,90,132,70,118,82,86],
[110,121,0,122,121,142,111,97],
[94,79,89,0,77,108,96,58],
[116,141,90,134,0,114,116,99],
[71,93,69,103,97,0,81,66],
[113,129,100,115,95,130,0,119],
[118,125,114,153,112,145,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,109,97,114,96,106],
[106,0,102,118,111,115,103,105],
[105,109,0,112,107,122,113,104],
[102,93,99,0,104,108,94,103],
[114,100,104,107,0,119,104,114],
[97,96,89,103,92,0,95,93],
[115,108,98,117,107,116,0,104],
[105,106,107,108,97,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,84,166,118,102,132,84],
[119,0,84,190,81,129,132,84],
[127,127,0,127,103,103,130,109],
[45,21,84,0,55,68,153,84],
[93,130,108,156,0,116,156,108],
[109,82,108,143,95,0,156,108],
[79,79,81,58,55,55,0,105],
[127,127,102,127,103,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,87,115,100,100,103,111],
[118,0,99,113,114,100,99,112],
[124,112,0,121,114,118,124,105],
[96,98,90,0,104,106,98,107],
[111,97,97,107,0,111,114,104],
[111,111,93,105,100,0,116,99],
[108,112,87,113,97,95,0,115],
[100,99,106,104,107,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,110,135,126,103,104],
[112,0,116,100,126,136,124,124],
[94,95,0,99,146,121,123,96],
[101,111,112,0,123,128,98,115],
[76,85,65,88,0,105,90,85],
[85,75,90,83,106,0,102,97],
[108,87,88,113,121,109,0,108],
[107,87,115,96,126,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,115,98,114,108,98],
[113,0,97,101,88,109,100,90],
[111,114,0,98,108,101,119,99],
[96,110,113,0,123,96,115,108],
[113,123,103,88,0,99,121,114],
[97,102,110,115,112,0,124,112],
[103,111,92,96,90,87,0,107],
[113,121,112,103,97,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,112,108,117,97,123],
[100,0,103,110,104,106,104,105],
[96,108,0,119,102,110,115,113],
[99,101,92,0,93,107,95,107],
[103,107,109,118,0,115,112,111],
[94,105,101,104,96,0,87,108],
[114,107,96,116,99,124,0,120],
[88,106,98,104,100,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,105,109,106,93,107],
[97,0,101,109,111,105,115,99],
[112,110,0,102,108,106,99,107],
[106,102,109,0,116,115,103,103],
[102,100,103,95,0,118,95,105],
[105,106,105,96,93,0,93,85],
[118,96,112,108,116,118,0,109],
[104,112,104,108,106,126,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,119,117,104,110,102,107],
[97,0,117,97,97,84,99,110],
[92,94,0,109,88,94,100,104],
[94,114,102,0,101,105,107,102],
[107,114,123,110,0,106,99,108],
[101,127,117,106,105,0,120,110],
[109,112,111,104,112,91,0,105],
[104,101,107,109,103,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,103,102,109,112,104],
[99,0,97,98,111,111,114,107],
[100,114,0,101,109,120,109,120],
[108,113,110,0,105,111,101,100],
[109,100,102,106,0,111,120,110],
[102,100,91,100,100,0,106,107],
[99,97,102,110,91,105,0,115],
[107,104,91,111,101,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,14,16,43,93,49,71],
[130,0,70,59,59,70,24,59],
[197,141,0,153,105,150,91,126],
[195,152,58,0,129,150,86,137],
[168,152,106,82,0,125,81,97],
[118,141,61,61,86,0,47,52],
[162,187,120,125,130,164,0,105],
[140,152,85,74,114,159,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,74,105,78,119,111],
[104,0,129,90,134,80,127,137],
[90,82,0,83,123,117,79,102],
[137,121,128,0,155,107,117,92],
[106,77,88,56,0,80,77,101],
[133,131,94,104,131,0,122,140],
[92,84,132,94,134,89,0,85],
[100,74,109,119,110,71,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,94,120,99,115,122],
[106,0,101,88,104,72,98,115],
[91,110,0,71,100,77,98,100],
[117,123,140,0,120,87,98,131],
[91,107,111,91,0,67,97,93],
[112,139,134,124,144,0,101,137],
[96,113,113,113,114,110,0,113],
[89,96,111,80,118,74,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,105,117,109,113,131,114],
[86,0,87,105,102,93,111,97],
[106,124,0,105,117,116,134,126],
[94,106,106,0,101,110,109,101],
[102,109,94,110,0,103,117,121],
[98,118,95,101,108,0,118,116],
[80,100,77,102,94,93,0,110],
[97,114,85,110,90,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,104,101,114,102,109],
[112,0,109,112,114,116,119,104],
[109,102,0,115,105,112,116,106],
[107,99,96,0,111,107,100,94],
[110,97,106,100,0,106,104,98],
[97,95,99,104,105,0,106,100],
[109,92,95,111,107,105,0,96],
[102,107,105,117,113,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,79,77,87,92,94],
[101,0,104,80,101,93,109,92],
[113,107,0,88,105,114,116,101],
[132,131,123,0,117,97,119,108],
[134,110,106,94,0,114,117,103],
[124,118,97,114,97,0,108,120],
[119,102,95,92,94,103,0,103],
[117,119,110,103,108,91,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,125,123,127,105,109,119],
[105,0,101,102,106,92,89,106],
[86,110,0,102,102,101,92,104],
[88,109,109,0,99,91,91,102],
[84,105,109,112,0,90,93,97],
[106,119,110,120,121,0,103,111],
[102,122,119,120,118,108,0,115],
[92,105,107,109,114,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,102,108,112,109,100],
[111,0,106,112,105,115,111,107],
[108,105,0,121,107,103,108,108],
[109,99,90,0,103,105,103,104],
[103,106,104,108,0,103,107,114],
[99,96,108,106,108,0,103,100],
[102,100,103,108,104,108,0,107],
[111,104,103,107,97,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,102,105,108,110,96],
[111,0,102,108,100,97,91,101],
[112,109,0,99,105,112,91,121],
[109,103,112,0,100,113,100,89],
[106,111,106,111,0,101,95,102],
[103,114,99,98,110,0,98,91],
[101,120,120,111,116,113,0,122],
[115,110,90,122,109,120,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,125,117,120,123,87],
[96,0,107,107,116,103,102,99],
[109,104,0,121,131,138,124,109],
[86,104,90,0,90,98,89,84],
[94,95,80,121,0,115,112,112],
[91,108,73,113,96,0,89,86],
[88,109,87,122,99,122,0,85],
[124,112,102,127,99,125,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,115,98,98,96,91],
[106,0,101,101,92,99,98,86],
[110,110,0,105,90,101,102,110],
[96,110,106,0,87,101,88,103],
[113,119,121,124,0,117,120,105],
[113,112,110,110,94,0,92,98],
[115,113,109,123,91,119,0,100],
[120,125,101,108,106,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,73,47,64,142,119,101],
[104,0,59,110,121,124,108,113],
[138,152,0,61,109,134,103,144],
[164,101,150,0,102,137,144,121],
[147,90,102,109,0,147,89,110],
[69,87,77,74,64,0,81,110],
[92,103,108,67,122,130,0,108],
[110,98,67,90,101,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,101,108,103,114,112,108],
[90,0,85,89,92,93,101,86],
[110,126,0,109,109,118,106,99],
[103,122,102,0,105,112,108,111],
[108,119,102,106,0,116,115,104],
[97,118,93,99,95,0,94,99],
[99,110,105,103,96,117,0,106],
[103,125,112,100,107,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,18,82,14,68,0,0],
[143,0,147,173,52,50,54,75],
[193,64,0,136,52,50,0,14],
[129,38,75,0,52,88,38,38],
[197,159,159,159,0,105,122,105],
[143,161,161,123,106,0,106,89],
[211,157,211,173,89,105,0,157],
[211,136,197,173,106,122,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,102,142,104,137,144,102],
[66,0,77,112,75,98,103,99],
[109,134,0,143,96,131,127,91],
[69,99,68,0,111,95,96,104],
[107,136,115,100,0,108,108,106],
[74,113,80,116,103,0,84,105],
[67,108,84,115,103,127,0,107],
[109,112,120,107,105,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,116,93,110,102,123,107],
[110,0,120,99,102,111,111,120],
[95,91,0,89,105,95,104,97],
[118,112,122,0,114,97,119,130],
[101,109,106,97,0,104,109,117],
[109,100,116,114,107,0,113,108],
[88,100,107,92,102,98,0,108],
[104,91,114,81,94,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,103,154,134,134,161,109],
[82,0,159,147,142,105,102,107],
[108,52,0,138,130,131,119,109],
[57,64,73,0,53,80,55,30],
[77,69,81,158,0,54,38,119],
[77,106,80,131,157,0,87,129],
[50,109,92,156,173,124,0,125],
[102,104,102,181,92,82,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,103,112,108,109,115],
[97,0,112,102,94,102,101,115],
[102,99,0,108,96,98,94,109],
[108,109,103,0,107,95,93,117],
[99,117,115,104,0,99,102,114],
[103,109,113,116,112,0,112,122],
[102,110,117,118,109,99,0,118],
[96,96,102,94,97,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,71,105,95,135,100],
[101,0,112,111,120,120,128,118],
[98,99,0,100,99,99,124,99],
[140,100,111,0,112,127,157,116],
[106,91,112,99,0,83,96,93],
[116,91,112,84,128,0,136,108],
[76,83,87,54,115,75,0,85],
[111,93,112,95,118,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,84,121,95,109,98],
[108,0,105,112,126,125,127,116],
[103,106,0,99,130,117,113,119],
[127,99,112,0,140,129,118,119],
[90,85,81,71,0,97,103,107],
[116,86,94,82,114,0,130,99],
[102,84,98,93,108,81,0,111],
[113,95,92,92,104,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,114,109,105,109,109],
[100,0,111,116,114,110,95,101],
[94,100,0,114,107,109,103,99],
[97,95,97,0,94,99,99,90],
[102,97,104,117,0,106,101,103],
[106,101,102,112,105,0,104,98],
[102,116,108,112,110,107,0,102],
[102,110,112,121,108,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,93,109,91,98,104],
[102,0,109,103,114,105,110,113],
[107,102,0,99,118,115,108,112],
[118,108,112,0,118,98,123,114],
[102,97,93,93,0,87,101,103],
[120,106,96,113,124,0,117,111],
[113,101,103,88,110,94,0,95],
[107,98,99,97,108,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,96,103,95,96,94],
[105,0,102,100,103,102,97,92],
[102,109,0,99,110,109,101,96],
[115,111,112,0,128,103,107,107],
[108,108,101,83,0,98,105,88],
[116,109,102,108,113,0,91,93],
[115,114,110,104,106,120,0,106],
[117,119,115,104,123,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,107,117,124,115,116],
[106,0,107,115,105,115,122,98],
[106,104,0,117,114,124,119,113],
[104,96,94,0,98,105,96,95],
[94,106,97,113,0,102,107,118],
[87,96,87,106,109,0,126,112],
[96,89,92,115,104,85,0,107],
[95,113,98,116,93,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,118,107,107,118,107],
[107,0,106,102,102,108,110,95],
[100,105,0,115,103,112,107,99],
[93,109,96,0,106,107,110,100],
[104,109,108,105,0,91,116,91],
[104,103,99,104,120,0,119,105],
[93,101,104,101,95,92,0,97],
[104,116,112,111,120,106,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,103,110,104,108,94],
[105,0,100,89,103,99,96,99],
[112,111,0,101,109,111,93,94],
[108,122,110,0,114,117,94,105],
[101,108,102,97,0,105,102,95],
[107,112,100,94,106,0,104,98],
[103,115,118,117,109,107,0,108],
[117,112,117,106,116,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,140,146,105,128,107,106],
[75,0,112,104,96,133,87,104],
[71,99,0,106,104,104,89,92],
[65,107,105,0,84,88,88,89],
[106,115,107,127,0,98,118,119],
[83,78,107,123,113,0,106,103],
[104,124,122,123,93,105,0,90],
[105,107,119,122,92,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,163,121,103,92,113,81],
[107,0,121,112,101,69,76,78],
[48,90,0,78,96,82,89,54],
[90,99,133,0,106,91,105,91],
[108,110,115,105,0,106,100,64],
[119,142,129,120,105,0,127,108],
[98,135,122,106,111,84,0,109],
[130,133,157,120,147,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,127,75,112,106,88,101],
[101,0,116,72,122,84,65,76],
[84,95,0,110,156,119,76,115],
[136,139,101,0,161,127,80,131],
[99,89,55,50,0,107,87,109],
[105,127,92,84,104,0,113,53],
[123,146,135,131,124,98,0,127],
[110,135,96,80,102,158,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,110,137,178,95,194,78],
[114,0,78,151,137,98,116,121],
[101,133,0,104,133,97,119,68],
[74,60,107,0,123,107,92,73],
[33,74,78,88,0,95,92,41],
[116,113,114,104,116,0,118,86],
[17,95,92,119,119,93,0,62],
[133,90,143,138,170,125,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,106,92,101,100,83,111],
[122,0,116,103,107,102,94,120],
[105,95,0,111,130,110,110,119],
[119,108,100,0,116,100,90,112],
[110,104,81,95,0,88,100,105],
[111,109,101,111,123,0,96,117],
[128,117,101,121,111,115,0,117],
[100,91,92,99,106,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,83,112,106,93,107],
[113,0,148,134,83,99,118,126],
[117,63,0,52,89,74,45,80],
[128,77,159,0,116,85,119,113],
[99,128,122,95,0,107,100,130],
[105,112,137,126,104,0,105,102],
[118,93,166,92,111,106,0,86],
[104,85,131,98,81,109,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,136,90,91,104,126,115],
[106,0,124,118,107,90,90,116],
[75,87,0,103,85,72,96,108],
[121,93,108,0,106,106,73,89],
[120,104,126,105,0,110,90,127],
[107,121,139,105,101,0,98,100],
[85,121,115,138,121,113,0,126],
[96,95,103,122,84,111,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,111,121,115,120,104,106],
[85,0,92,110,95,121,114,107],
[100,119,0,122,121,109,111,118],
[90,101,89,0,109,105,96,100],
[96,116,90,102,0,106,94,96],
[91,90,102,106,105,0,102,110],
[107,97,100,115,117,109,0,121],
[105,104,93,111,115,101,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,109,95,117,98,98],
[103,0,108,108,105,116,110,109],
[104,103,0,100,102,96,100,93],
[102,103,111,0,104,118,107,102],
[116,106,109,107,0,110,99,115],
[94,95,115,93,101,0,113,120],
[113,101,111,104,112,98,0,111],
[113,102,118,109,96,91,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,113,129,147,142,111,100],
[83,0,112,96,102,149,118,90],
[98,99,0,123,99,150,96,91],
[82,115,88,0,108,142,122,100],
[64,109,112,103,0,130,109,109],
[69,62,61,69,81,0,91,94],
[100,93,115,89,102,120,0,109],
[111,121,120,111,102,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,106,109,124,99,118],
[101,0,96,114,101,118,90,102],
[104,115,0,114,120,116,113,119],
[105,97,97,0,106,105,100,106],
[102,110,91,105,0,104,97,110],
[87,93,95,106,107,0,98,103],
[112,121,98,111,114,113,0,124],
[93,109,92,105,101,108,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,112,105,101,99,113],
[105,0,109,111,84,92,101,103],
[101,102,0,102,112,96,105,117],
[99,100,109,0,96,108,109,113],
[106,127,99,115,0,93,94,112],
[110,119,115,103,118,0,103,109],
[112,110,106,102,117,108,0,110],
[98,108,94,98,99,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,100,106,113,120,118],
[103,0,105,103,96,101,104,116],
[112,106,0,114,104,118,119,118],
[111,108,97,0,102,115,115,108],
[105,115,107,109,0,110,118,107],
[98,110,93,96,101,0,105,108],
[91,107,92,96,93,106,0,98],
[93,95,93,103,104,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,107,121,113,111,93,120],
[137,0,106,127,95,113,112,113],
[104,105,0,107,127,116,110,113],
[90,84,104,0,99,100,115,111],
[98,116,84,112,0,110,90,114],
[100,98,95,111,101,0,114,100],
[118,99,101,96,121,97,0,113],
[91,98,98,100,97,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,114,104,122,119,117],
[103,0,107,108,83,92,137,101],
[119,104,0,125,107,108,140,103],
[97,103,86,0,101,93,133,92],
[107,128,104,110,0,119,126,100],
[89,119,103,118,92,0,129,121],
[92,74,71,78,85,82,0,81],
[94,110,108,119,111,90,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,129,113,141,135,101,110],
[98,0,96,100,126,110,100,89],
[82,115,0,104,123,135,96,90],
[98,111,107,0,117,128,106,100],
[70,85,88,94,0,107,92,108],
[76,101,76,83,104,0,74,78],
[110,111,115,105,119,137,0,113],
[101,122,121,111,103,133,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,95,92,101,108,117],
[106,0,100,99,97,112,103,105],
[107,111,0,115,102,116,111,108],
[116,112,96,0,109,110,109,122],
[119,114,109,102,0,109,101,112],
[110,99,95,101,102,0,101,104],
[103,108,100,102,110,110,0,111],
[94,106,103,89,99,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,131,108,136,126,113,115],
[114,0,130,105,125,122,108,120],
[80,81,0,103,93,82,85,92],
[103,106,108,0,110,99,106,123],
[75,86,118,101,0,91,88,112],
[85,89,129,112,120,0,111,103],
[98,103,126,105,123,100,0,110],
[96,91,119,88,99,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,101,108,111,100,104],
[99,0,103,106,106,99,104,108],
[100,108,0,111,109,104,99,104],
[110,105,100,0,102,104,97,107],
[103,105,102,109,0,109,110,108],
[100,112,107,107,102,0,99,103],
[111,107,112,114,101,112,0,103],
[107,103,107,104,103,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,95,101,99,101,102],
[105,0,88,84,106,92,109,98],
[117,123,0,111,121,107,99,127],
[116,127,100,0,110,98,104,112],
[110,105,90,101,0,101,104,117],
[112,119,104,113,110,0,117,112],
[110,102,112,107,107,94,0,118],
[109,113,84,99,94,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,106,110,105,113,111],
[100,0,99,102,109,103,104,110],
[109,112,0,108,120,103,114,116],
[105,109,103,0,116,109,107,111],
[101,102,91,95,0,100,95,97],
[106,108,108,102,111,0,100,109],
[98,107,97,104,116,111,0,104],
[100,101,95,100,114,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,102,103,108,106,91],
[103,0,108,109,102,106,107,107],
[102,103,0,104,110,116,105,99],
[109,102,107,0,103,109,96,102],
[108,109,101,108,0,108,113,112],
[103,105,95,102,103,0,97,95],
[105,104,106,115,98,114,0,108],
[120,104,112,109,99,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,105,95,116,86,109],
[103,0,100,95,77,111,81,90],
[101,111,0,119,84,108,119,97],
[106,116,92,0,86,95,81,98],
[116,134,127,125,0,130,102,107],
[95,100,103,116,81,0,85,97],
[125,130,92,130,109,126,0,97],
[102,121,114,113,104,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,98,93,113,103,110],
[106,0,103,97,96,105,95,103],
[110,108,0,97,107,108,107,107],
[113,114,114,0,99,116,104,108],
[118,115,104,112,0,122,98,115],
[98,106,103,95,89,0,90,92],
[108,116,104,107,113,121,0,119],
[101,108,104,103,96,119,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,115,119,121,99,108],
[101,0,101,93,99,113,102,98],
[105,110,0,110,117,105,100,99],
[96,118,101,0,98,122,114,103],
[92,112,94,113,0,109,106,96],
[90,98,106,89,102,0,101,94],
[112,109,111,97,105,110,0,99],
[103,113,112,108,115,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,116,108,105,120,80,152],
[118,0,100,90,115,129,94,143],
[95,111,0,121,99,120,106,142],
[103,121,90,0,106,108,101,123],
[106,96,112,105,0,105,88,118],
[91,82,91,103,106,0,82,126],
[131,117,105,110,123,129,0,142],
[59,68,69,88,93,85,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,98,99,106,109,103],
[100,0,104,77,96,98,108,102],
[102,107,0,94,91,99,109,106],
[113,134,117,0,103,109,115,133],
[112,115,120,108,0,95,112,129],
[105,113,112,102,116,0,112,121],
[102,103,102,96,99,99,0,111],
[108,109,105,78,82,90,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,117,96,110,113,113],
[118,0,87,122,109,122,125,126],
[118,124,0,94,115,128,120,141],
[94,89,117,0,95,119,107,113],
[115,102,96,116,0,120,121,131],
[101,89,83,92,91,0,101,124],
[98,86,91,104,90,110,0,120],
[98,85,70,98,80,87,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,102,96,102,121,108,113],
[85,0,104,98,116,101,94,100],
[109,107,0,98,125,105,90,111],
[115,113,113,0,108,116,98,119],
[109,95,86,103,0,106,93,101],
[90,110,106,95,105,0,97,100],
[103,117,121,113,118,114,0,115],
[98,111,100,92,110,111,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,108,111,105,119,123],
[100,0,109,106,98,121,114,106],
[99,102,0,104,108,117,119,107],
[103,105,107,0,108,105,128,118],
[100,113,103,103,0,106,118,102],
[106,90,94,106,105,0,109,102],
[92,97,92,83,93,102,0,88],
[88,105,104,93,109,109,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,96,106,107,93,113],
[121,0,108,104,101,122,99,109],
[112,103,0,113,98,118,107,103],
[115,107,98,0,117,114,117,119],
[105,110,113,94,0,115,105,124],
[104,89,93,97,96,0,110,100],
[118,112,104,94,106,101,0,119],
[98,102,108,92,87,111,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,118,112,107,110,103,109],
[105,0,113,101,102,114,105,107],
[93,98,0,108,100,95,106,99],
[99,110,103,0,102,108,104,99],
[104,109,111,109,0,110,115,110],
[101,97,116,103,101,0,102,104],
[108,106,105,107,96,109,0,104],
[102,104,112,112,101,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,125,112,111,115,98],
[108,0,91,100,102,85,101,98],
[105,120,0,116,117,108,109,115],
[86,111,95,0,104,87,108,100],
[99,109,94,107,0,83,109,100],
[100,126,103,124,128,0,106,114],
[96,110,102,103,102,105,0,106],
[113,113,96,111,111,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,111,108,111,104,100],
[106,0,110,115,92,113,99,106],
[103,101,0,112,101,103,94,101],
[100,96,99,0,96,109,105,93],
[103,119,110,115,0,111,104,108],
[100,98,108,102,100,0,103,98],
[107,112,117,106,107,108,0,104],
[111,105,110,118,103,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,104,108,104,96,105],
[110,0,98,96,103,97,90,85],
[111,113,0,99,105,105,110,99],
[107,115,112,0,106,101,102,102],
[103,108,106,105,0,111,100,90],
[107,114,106,110,100,0,104,106],
[115,121,101,109,111,107,0,107],
[106,126,112,109,121,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,104,99,109,122,113,121],
[92,0,121,91,92,109,105,111],
[107,90,0,99,87,107,107,103],
[112,120,112,0,101,113,110,110],
[102,119,124,110,0,126,105,106],
[89,102,104,98,85,0,103,106],
[98,106,104,101,106,108,0,98],
[90,100,108,101,105,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,94,106,102,107,101],
[100,0,114,93,102,100,86,93],
[98,97,0,99,104,111,102,94],
[117,118,112,0,110,122,103,114],
[105,109,107,101,0,112,89,102],
[109,111,100,89,99,0,85,101],
[104,125,109,108,122,126,0,105],
[110,118,117,97,109,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,118,104,106,101,99],
[102,0,100,108,95,98,109,108],
[103,111,0,112,107,108,105,116],
[93,103,99,0,95,94,99,112],
[107,116,104,116,0,97,114,110],
[105,113,103,117,114,0,114,115],
[110,102,106,112,97,97,0,105],
[112,103,95,99,101,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,108,104,104,104,102],
[115,0,97,106,110,102,114,99],
[103,114,0,110,97,102,108,92],
[103,105,101,0,98,105,108,103],
[107,101,114,113,0,109,118,110],
[107,109,109,106,102,0,109,103],
[107,97,103,103,93,102,0,97],
[109,112,119,108,101,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,126,107,122,103,123,147],
[112,0,123,83,91,97,139,130],
[85,88,0,102,107,62,116,124],
[104,128,109,0,112,92,128,141],
[89,120,104,99,0,60,97,120],
[108,114,149,119,151,0,104,152],
[88,72,95,83,114,107,0,151],
[64,81,87,70,91,59,60,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,83,88,103,133,79,107],
[73,0,86,63,99,94,81,83],
[128,125,0,110,143,129,118,105],
[123,148,101,0,125,128,127,144],
[108,112,68,86,0,98,111,70],
[78,117,82,83,113,0,104,63],
[132,130,93,84,100,107,0,98],
[104,128,106,67,141,148,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,102,141,119,131,130,116],
[90,0,88,116,92,115,111,108],
[109,123,0,132,113,123,127,97],
[70,95,79,0,95,105,91,82],
[92,119,98,116,0,118,128,106],
[80,96,88,106,93,0,115,87],
[81,100,84,120,83,96,0,108],
[95,103,114,129,105,124,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,106,99,93,108,96],
[111,0,121,121,106,113,98,100],
[113,90,0,114,109,104,110,104],
[105,90,97,0,89,90,87,89],
[112,105,102,122,0,111,109,106],
[118,98,107,121,100,0,109,104],
[103,113,101,124,102,102,0,102],
[115,111,107,122,105,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,115,105,134,122,145,114],
[71,0,95,86,134,118,112,71],
[96,116,0,105,112,116,126,86],
[106,125,106,0,134,131,130,84],
[77,77,99,77,0,116,107,86],
[89,93,95,80,95,0,104,60],
[66,99,85,81,104,107,0,73],
[97,140,125,127,125,151,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,118,138,92,126,87,107],
[65,0,105,70,71,97,87,43],
[93,106,0,104,89,85,90,72],
[73,141,107,0,102,101,106,48],
[119,140,122,109,0,91,108,102],
[85,114,126,110,120,0,52,107],
[124,124,121,105,103,159,0,104],
[104,168,139,163,109,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,125,99,94,108,114,119],
[88,0,109,102,96,108,110,111],
[86,102,0,96,111,104,86,119],
[112,109,115,0,107,101,116,98],
[117,115,100,104,0,102,107,100],
[103,103,107,110,109,0,102,112],
[97,101,125,95,104,109,0,107],
[92,100,92,113,111,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,167,150,119,94,128,116],
[122,0,122,94,122,84,79,122],
[44,89,0,44,50,44,44,114],
[61,117,167,0,137,94,93,88],
[92,89,161,74,0,91,122,145],
[117,127,167,117,120,0,83,71],
[83,132,167,118,89,128,0,71],
[95,89,97,123,66,140,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,97,114,100,110,110],
[108,0,121,105,119,106,116,121],
[94,90,0,95,103,97,87,109],
[114,106,116,0,121,103,112,116],
[97,92,108,90,0,90,88,103],
[111,105,114,108,121,0,120,128],
[101,95,124,99,123,91,0,115],
[101,90,102,95,108,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,111,107,112,106,107],
[110,0,116,89,96,112,97,96],
[92,95,0,110,92,91,91,97],
[100,122,101,0,111,113,105,107],
[104,115,119,100,0,104,98,97],
[99,99,120,98,107,0,105,83],
[105,114,120,106,113,106,0,104],
[104,115,114,104,114,128,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,99,105,100,99,97],
[115,0,109,105,126,112,115,110],
[109,102,0,104,117,105,102,103],
[112,106,107,0,117,100,103,106],
[106,85,94,94,0,93,88,88],
[111,99,106,111,118,0,100,104],
[112,96,109,108,123,111,0,118],
[114,101,108,105,123,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,117,102,113,103,112,94],
[117,0,107,113,114,122,113,104],
[94,104,0,112,96,120,109,100],
[109,98,99,0,106,94,109,97],
[98,97,115,105,0,105,110,100],
[108,89,91,117,106,0,112,103],
[99,98,102,102,101,99,0,111],
[117,107,111,114,111,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,105,121,113,131,140,113],
[81,0,85,107,100,106,103,98],
[106,126,0,122,103,116,123,124],
[90,104,89,0,98,111,94,100],
[98,111,108,113,0,112,126,121],
[80,105,95,100,99,0,92,97],
[71,108,88,117,85,119,0,85],
[98,113,87,111,90,114,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,97,101,113,96,109],
[107,0,117,105,107,116,114,114],
[93,94,0,88,97,113,90,100],
[114,106,123,0,114,117,107,103],
[110,104,114,97,0,115,102,113],
[98,95,98,94,96,0,89,98],
[115,97,121,104,109,122,0,116],
[102,97,111,108,98,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,108,112,125,117,97],
[88,0,99,88,97,109,88,73],
[96,112,0,96,98,127,113,112],
[103,123,115,0,115,125,118,100],
[99,114,113,96,0,111,85,94],
[86,102,84,86,100,0,103,91],
[94,123,98,93,126,108,0,105],
[114,138,99,111,117,120,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,106,109,99,97,102],
[110,0,106,100,118,106,104,108],
[99,105,0,90,100,98,104,108],
[105,111,121,0,104,110,123,108],
[102,93,111,107,0,106,107,98],
[112,105,113,101,105,0,110,105],
[114,107,107,88,104,101,0,107],
[109,103,103,103,113,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,103,111,108,114,110],
[97,0,93,107,119,100,118,102],
[105,118,0,102,119,105,117,101],
[108,104,109,0,111,106,115,106],
[100,92,92,100,0,84,113,84],
[103,111,106,105,127,0,122,121],
[97,93,94,96,98,89,0,91],
[101,109,110,105,127,90,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,146,83,136,105,108,131],
[65,0,117,79,65,78,68,87],
[65,94,0,79,105,105,104,105],
[128,132,132,0,112,172,68,49],
[75,146,106,99,0,119,57,107],
[106,133,106,39,92,0,68,76],
[103,143,107,143,154,143,0,116],
[80,124,106,162,104,135,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,132,134,134,134,105,107],
[90,0,97,132,150,116,94,98],
[79,114,0,148,132,100,83,102],
[77,79,63,0,134,119,98,99],
[77,61,79,77,0,55,72,84],
[77,95,111,92,156,0,97,96],
[106,117,128,113,139,114,0,92],
[104,113,109,112,127,115,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,95,104,84,100,105],
[103,0,112,129,132,152,143,127],
[119,99,0,101,151,124,135,128],
[116,82,110,0,153,129,143,151],
[107,79,60,58,0,114,102,140],
[127,59,87,82,97,0,126,121],
[111,68,76,68,109,85,0,99],
[106,84,83,60,71,90,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,112,94,116,126,123],
[104,0,105,104,99,109,133,120],
[96,106,0,100,98,111,123,97],
[99,107,111,0,108,113,113,114],
[117,112,113,103,0,121,130,127],
[95,102,100,98,90,0,111,113],
[85,78,88,98,81,100,0,98],
[88,91,114,97,84,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,96,99,102,93,102],
[113,0,110,105,112,116,107,116],
[114,101,0,105,113,111,98,110],
[115,106,106,0,99,103,104,102],
[112,99,98,112,0,98,100,105],
[109,95,100,108,113,0,99,112],
[118,104,113,107,111,112,0,115],
[109,95,101,109,106,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,85,121,91,94,85,77],
[117,0,103,115,118,80,87,101],
[126,108,0,154,129,97,99,111],
[90,96,57,0,91,80,78,67],
[120,93,82,120,0,100,99,97],
[117,131,114,131,111,0,112,104],
[126,124,112,133,112,99,0,122],
[134,110,100,144,114,107,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,107,110,101,127,118,109],
[85,0,97,104,96,116,101,101],
[104,114,0,108,112,117,108,110],
[101,107,103,0,99,119,93,91],
[110,115,99,112,0,118,105,105],
[84,95,94,92,93,0,99,90],
[93,110,103,118,106,112,0,113],
[102,110,101,120,106,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,111,112,101,102,95],
[102,0,101,102,108,93,89,89],
[109,110,0,111,107,101,86,88],
[100,109,100,0,109,104,93,89],
[99,103,104,102,0,93,92,91],
[110,118,110,107,118,0,117,96],
[109,122,125,118,119,94,0,109],
[116,122,123,122,120,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,113,121,133,85,74,144],
[121,0,105,159,129,133,136,140],
[98,106,0,134,144,112,114,80],
[90,52,77,0,98,109,107,79],
[78,82,67,113,0,70,93,102],
[126,78,99,102,141,0,64,119],
[137,75,97,104,118,147,0,109],
[67,71,131,132,109,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,108,78,97,93,109],
[112,0,118,114,99,102,119,116],
[120,93,0,111,99,103,87,103],
[103,97,100,0,110,90,91,109],
[133,112,112,101,0,78,123,120],
[114,109,108,121,133,0,103,116],
[118,92,124,120,88,108,0,116],
[102,95,108,102,91,95,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,93,89,119,91,119,90],
[96,0,88,75,83,85,93,99],
[118,123,0,126,136,115,124,96],
[122,136,85,0,111,92,122,91],
[92,128,75,100,0,91,115,96],
[120,126,96,119,120,0,101,110],
[92,118,87,89,96,110,0,94],
[121,112,115,120,115,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,106,113,95,97,112],
[104,0,90,102,109,90,92,102],
[119,121,0,119,115,110,107,105],
[105,109,92,0,109,111,83,99],
[98,102,96,102,0,95,71,97],
[116,121,101,100,116,0,98,101],
[114,119,104,128,140,113,0,112],
[99,109,106,112,114,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,132,100,123,87,95,115],
[108,0,100,110,107,103,105,95],
[79,111,0,111,93,95,87,117],
[111,101,100,0,109,95,119,109],
[88,104,118,102,0,89,109,126],
[124,108,116,116,122,0,104,114],
[116,106,124,92,102,107,0,111],
[96,116,94,102,85,97,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,111,108,123,92,105],
[117,0,123,118,105,122,111,121],
[99,88,0,92,102,118,96,108],
[100,93,119,0,97,118,103,109],
[103,106,109,114,0,124,106,106],
[88,89,93,93,87,0,93,92],
[119,100,115,108,105,118,0,106],
[106,90,103,102,105,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,109,114,112,121,105],
[105,0,110,108,110,114,113,101],
[95,101,0,108,101,116,116,113],
[102,103,103,0,103,93,110,112],
[97,101,110,108,0,109,102,108],
[99,97,95,118,102,0,103,109],
[90,98,95,101,109,108,0,111],
[106,110,98,99,103,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,108,84,96,114,117],
[90,0,100,106,78,86,97,99],
[97,111,0,121,119,117,116,101],
[103,105,90,0,76,100,107,89],
[127,133,92,135,0,122,100,89],
[115,125,94,111,89,0,124,111],
[97,114,95,104,111,87,0,98],
[94,112,110,122,122,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,108,103,127,116,120,108],
[94,0,112,101,121,125,112,98],
[103,99,0,89,102,112,113,97],
[108,110,122,0,110,132,116,91],
[84,90,109,101,0,121,121,99],
[95,86,99,79,90,0,96,80],
[91,99,98,95,90,115,0,88],
[103,113,114,120,112,131,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,110,92,98,117,102],
[108,0,101,92,108,102,119,108],
[112,110,0,96,110,94,125,110],
[101,119,115,0,105,116,115,94],
[119,103,101,106,0,107,128,114],
[113,109,117,95,104,0,103,106],
[94,92,86,96,83,108,0,95],
[109,103,101,117,97,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,120,86,102,88,89,98],
[138,0,120,110,113,103,109,123],
[91,91,0,84,96,96,85,104],
[125,101,127,0,107,121,118,135],
[109,98,115,104,0,110,113,107],
[123,108,115,90,101,0,117,121],
[122,102,126,93,98,94,0,107],
[113,88,107,76,104,90,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,118,105,112,115,102],
[105,0,112,113,112,118,121,108],
[110,99,0,115,115,110,109,109],
[93,98,96,0,106,98,103,97],
[106,99,96,105,0,107,107,102],
[99,93,101,113,104,0,104,100],
[96,90,102,108,104,107,0,90],
[109,103,102,114,109,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,93,109,102,101,91,102],
[106,0,99,112,97,100,86,106],
[118,112,0,116,102,108,101,114],
[102,99,95,0,97,92,106,112],
[109,114,109,114,0,100,107,105],
[110,111,103,119,111,0,111,123],
[120,125,110,105,104,100,0,118],
[109,105,97,99,106,88,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,80,110,81,95,106],
[114,0,104,110,123,104,114,119],
[117,107,0,103,119,115,101,118],
[131,101,108,0,119,110,106,114],
[101,88,92,92,0,94,92,101],
[130,107,96,101,117,0,103,103],
[116,97,110,105,119,108,0,119],
[105,92,93,97,110,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,76,71,69,119,79,102],
[128,0,117,73,109,126,80,90],
[135,94,0,97,68,111,63,68],
[140,138,114,0,82,132,87,111],
[142,102,143,129,0,127,112,148],
[92,85,100,79,84,0,90,91],
[132,131,148,124,99,121,0,152],
[109,121,143,100,63,120,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,102,116,98,124,121],
[106,0,99,96,117,104,117,121],
[102,112,0,111,128,98,133,116],
[109,115,100,0,101,119,121,131],
[95,94,83,110,0,105,118,100],
[113,107,113,92,106,0,123,120],
[87,94,78,90,93,88,0,107],
[90,90,95,80,111,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,115,108,122,118,103],
[95,0,107,113,104,112,113,124],
[100,104,0,113,103,112,100,113],
[96,98,98,0,101,107,105,110],
[103,107,108,110,0,102,105,101],
[89,99,99,104,109,0,96,110],
[93,98,111,106,106,115,0,108],
[108,87,98,101,110,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,123,93,131,116,117,102],
[66,0,88,100,93,79,77,114],
[88,123,0,124,146,111,97,127],
[118,111,87,0,101,77,95,80],
[80,118,65,110,0,118,111,90],
[95,132,100,134,93,0,108,97],
[94,134,114,116,100,103,0,111],
[109,97,84,131,121,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,116,118,105,99,109],
[93,0,91,105,106,101,105,115],
[99,120,0,79,111,98,113,122],
[95,106,132,0,111,121,118,122],
[93,105,100,100,0,84,126,115],
[106,110,113,90,127,0,124,132],
[112,106,98,93,85,87,0,104],
[102,96,89,89,96,79,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,105,96,109,104,102],
[117,0,105,109,108,113,99,108],
[110,106,0,112,100,110,106,99],
[106,102,99,0,110,117,102,109],
[115,103,111,101,0,117,107,111],
[102,98,101,94,94,0,97,97],
[107,112,105,109,104,114,0,109],
[109,103,112,102,100,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,117,111,113,110,109],
[107,0,99,105,114,111,100,103],
[96,112,0,96,112,114,102,102],
[94,106,115,0,117,106,98,102],
[100,97,99,94,0,106,105,98],
[98,100,97,105,105,0,115,101],
[101,111,109,113,106,96,0,99],
[102,108,109,109,113,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,90,93,90,93,87],
[111,0,93,103,94,100,91,92],
[112,118,0,114,104,118,104,104],
[121,108,97,0,111,103,103,102],
[118,117,107,100,0,108,97,107],
[121,111,93,108,103,0,86,104],
[118,120,107,108,114,125,0,104],
[124,119,107,109,104,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,115,97,115,108,110,103],
[81,0,97,97,100,94,98,88],
[96,114,0,111,101,109,107,104],
[114,114,100,0,107,108,106,93],
[96,111,110,104,0,108,102,104],
[103,117,102,103,103,0,111,112],
[101,113,104,105,109,100,0,108],
[108,123,107,118,107,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,107,104,103,128,122],
[107,0,109,96,93,110,107,108],
[113,102,0,100,106,107,118,126],
[104,115,111,0,99,100,119,103],
[107,118,105,112,0,119,140,117],
[108,101,104,111,92,0,119,107],
[83,104,93,92,71,92,0,91],
[89,103,85,108,94,104,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,99,97,108,110,106],
[97,0,98,95,104,95,101,111],
[113,113,0,98,109,106,112,124],
[112,116,113,0,105,108,109,109],
[114,107,102,106,0,102,111,115],
[103,116,105,103,109,0,101,103],
[101,110,99,102,100,110,0,110],
[105,100,87,102,96,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,105,128,118,122,125],
[102,0,108,108,108,111,110,119],
[100,103,0,109,106,118,107,118],
[106,103,102,0,114,117,104,112],
[83,103,105,97,0,101,98,109],
[93,100,93,94,110,0,93,115],
[89,101,104,107,113,118,0,118],
[86,92,93,99,102,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,117,116,108,109,102],
[99,0,106,113,110,95,93,92],
[106,105,0,106,110,102,102,88],
[94,98,105,0,103,96,106,95],
[95,101,101,108,0,92,104,102],
[103,116,109,115,119,0,115,110],
[102,118,109,105,107,96,0,101],
[109,119,123,116,109,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,102,131,106,100,66,108],
[170,0,144,159,156,134,85,126],
[109,67,0,129,115,120,109,98],
[80,52,82,0,100,78,64,82],
[105,55,96,111,0,108,100,80],
[111,77,91,133,103,0,106,97],
[145,126,102,147,111,105,0,88],
[103,85,113,129,131,114,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,111,114,122,132,99,109],
[83,0,97,110,93,109,101,86],
[100,114,0,102,106,98,100,99],
[97,101,109,0,112,96,95,100],
[89,118,105,99,0,96,89,99],
[79,102,113,115,115,0,108,107],
[112,110,111,116,122,103,0,116],
[102,125,112,111,112,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,138,114,103,113,131],
[96,0,109,120,128,134,121,126],
[101,102,0,128,120,130,109,133],
[73,91,83,0,92,109,95,104],
[97,83,91,119,0,126,92,127],
[108,77,81,102,85,0,95,110],
[98,90,102,116,119,116,0,111],
[80,85,78,107,84,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,120,106,107,118,106],
[99,0,98,103,95,101,104,96],
[114,113,0,112,106,104,111,97],
[91,108,99,0,98,106,116,104],
[105,116,105,113,0,104,110,96],
[104,110,107,105,107,0,111,105],
[93,107,100,95,101,100,0,105],
[105,115,114,107,115,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,112,107,105,114,118],
[100,0,104,101,99,97,104,99],
[98,107,0,107,93,97,102,103],
[99,110,104,0,106,99,95,117],
[104,112,118,105,0,100,118,117],
[106,114,114,112,111,0,103,111],
[97,107,109,116,93,108,0,105],
[93,112,108,94,94,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,101,111,119,108,111],
[108,0,108,100,105,118,109,107],
[104,103,0,109,101,109,107,100],
[110,111,102,0,105,107,100,112],
[100,106,110,106,0,112,107,100],
[92,93,102,104,99,0,99,102],
[103,102,104,111,104,112,0,108],
[100,104,111,99,111,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,128,71,152,100,60,112],
[121,0,119,146,196,139,99,86],
[83,92,0,45,175,108,41,54],
[140,65,166,0,186,70,97,85],
[59,15,36,25,0,36,40,40],
[111,72,103,141,175,0,97,59],
[151,112,170,114,171,114,0,88],
[99,125,157,126,171,152,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,107,117,120,131,105],
[104,0,88,95,106,113,102,90],
[92,123,0,122,121,108,122,104],
[104,116,89,0,102,113,103,107],
[94,105,90,109,0,102,110,109],
[91,98,103,98,109,0,115,106],
[80,109,89,108,101,96,0,83],
[106,121,107,104,102,105,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,95,96,86,94,98],
[111,0,106,108,105,98,118,103],
[117,105,0,110,110,96,105,107],
[116,103,101,0,101,115,106,119],
[115,106,101,110,0,105,106,109],
[125,113,115,96,106,0,99,120],
[117,93,106,105,105,112,0,109],
[113,108,104,92,102,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,109,109,112,99,111],
[85,0,94,99,101,96,91,92],
[85,117,0,88,87,92,94,97],
[102,112,123,0,111,105,112,117],
[102,110,124,100,0,98,99,108],
[99,115,119,106,113,0,110,115],
[112,120,117,99,112,101,0,100],
[100,119,114,94,103,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,109,100,98,121,106],
[101,0,99,109,105,102,106,91],
[100,112,0,106,116,105,112,106],
[102,102,105,0,103,100,103,111],
[111,106,95,108,0,104,112,113],
[113,109,106,111,107,0,100,117],
[90,105,99,108,99,111,0,97],
[105,120,105,100,98,94,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,107,109,91,100,98],
[111,0,102,106,115,106,124,109],
[108,109,0,104,116,97,103,101],
[104,105,107,0,123,107,107,109],
[102,96,95,88,0,93,96,103],
[120,105,114,104,118,0,106,113],
[111,87,108,104,115,105,0,100],
[113,102,110,102,108,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,117,111,102,108,100],
[99,0,110,110,100,107,101,98],
[107,101,0,121,106,110,123,111],
[94,101,90,0,95,103,98,83],
[100,111,105,116,0,109,115,106],
[109,104,101,108,102,0,106,100],
[103,110,88,113,96,105,0,97],
[111,113,100,128,105,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,123,115,125,100,100,113],
[108,0,117,116,111,106,95,108],
[88,94,0,112,105,91,88,100],
[96,95,99,0,100,83,93,85],
[86,100,106,111,0,106,94,96],
[111,105,120,128,105,0,112,101],
[111,116,123,118,117,99,0,100],
[98,103,111,126,115,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,73,128,120,84,106,91],
[113,0,104,132,152,104,110,124],
[138,107,0,142,121,136,95,107],
[83,79,69,0,126,95,100,97],
[91,59,90,85,0,82,97,91],
[127,107,75,116,129,0,95,86],
[105,101,116,111,114,116,0,97],
[120,87,104,114,120,125,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,108,105,105,107,115,108],
[117,0,107,108,117,100,109,108],
[103,104,0,106,98,86,113,113],
[106,103,105,0,99,98,110,110],
[106,94,113,112,0,95,117,111],
[104,111,125,113,116,0,125,118],
[96,102,98,101,94,86,0,96],
[103,103,98,101,100,93,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,107,104,116,129,112],
[90,0,102,94,112,105,115,110],
[100,109,0,98,112,110,116,114],
[104,117,113,0,115,122,115,116],
[107,99,99,96,0,102,112,108],
[95,106,101,89,109,0,102,109],
[82,96,95,96,99,109,0,103],
[99,101,97,95,103,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,103,108,123,116,100],
[102,0,110,107,104,114,115,107],
[103,101,0,104,110,117,118,101],
[108,104,107,0,115,117,112,109],
[103,107,101,96,0,109,118,104],
[88,97,94,94,102,0,95,95],
[95,96,93,99,93,116,0,96],
[111,104,110,102,107,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,99,123,111,138,107,106],
[76,0,93,109,94,102,95,93],
[112,118,0,119,122,105,111,93],
[88,102,92,0,111,105,95,105],
[100,117,89,100,0,108,111,90],
[73,109,106,106,103,0,105,93],
[104,116,100,116,100,106,0,97],
[105,118,118,106,121,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,91,125,117,99,94,108],
[110,0,103,102,105,90,105,99],
[120,108,0,113,120,106,93,100],
[86,109,98,0,112,112,98,102],
[94,106,91,99,0,99,116,105],
[112,121,105,99,112,0,91,118],
[117,106,118,113,95,120,0,104],
[103,112,111,109,106,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,99,115,102,106,107,103],
[100,0,95,116,102,108,113,106],
[112,116,0,116,119,106,120,98],
[96,95,95,0,103,109,97,106],
[109,109,92,108,0,101,111,96],
[105,103,105,102,110,0,113,115],
[104,98,91,114,100,98,0,110],
[108,105,113,105,115,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,92,110,109,102,102],
[102,0,95,91,108,103,100,101],
[111,116,0,110,107,117,108,99],
[119,120,101,0,108,112,98,110],
[101,103,104,103,0,102,104,103],
[102,108,94,99,109,0,102,93],
[109,111,103,113,107,109,0,110],
[109,110,112,101,108,118,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,117,106,115,110,104],
[100,0,112,106,98,108,104,102],
[98,99,0,105,120,103,115,100],
[94,105,106,0,111,104,104,108],
[105,113,91,100,0,122,107,107],
[96,103,108,107,89,0,98,96],
[101,107,96,107,104,113,0,85],
[107,109,111,103,104,115,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,98,127,125,132,107,114],
[84,0,82,114,88,99,103,93],
[113,129,0,157,115,110,107,101],
[84,97,54,0,98,107,87,89],
[86,123,96,113,0,110,100,100],
[79,112,101,104,101,0,85,101],
[104,108,104,124,111,126,0,131],
[97,118,110,122,111,110,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,131,114,121,99,124],
[93,0,128,118,108,125,131,109],
[99,83,0,109,102,105,93,74],
[80,93,102,0,107,91,94,84],
[97,103,109,104,0,92,81,101],
[90,86,106,120,119,0,97,92],
[112,80,118,117,130,114,0,102],
[87,102,137,127,110,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,117,107,97,103,120],
[106,0,110,119,106,91,99,128],
[114,101,0,131,114,111,107,133],
[94,92,80,0,88,87,84,114],
[104,105,97,123,0,104,113,125],
[114,120,100,124,107,0,106,123],
[108,112,104,127,98,105,0,128],
[91,83,78,97,86,88,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,82,91,64,97,110,87],
[117,0,60,93,91,83,134,81],
[129,151,0,115,98,109,135,127],
[120,118,96,0,94,91,109,100],
[147,120,113,117,0,98,117,115],
[114,128,102,120,113,0,139,90],
[101,77,76,102,94,72,0,73],
[124,130,84,111,96,121,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,106,101,94,102,116],
[108,0,108,114,114,103,105,106],
[106,103,0,108,112,102,106,109],
[105,97,103,0,103,101,115,96],
[110,97,99,108,0,103,102,103],
[117,108,109,110,108,0,111,101],
[109,106,105,96,109,100,0,104],
[95,105,102,115,108,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,106,99,99,92,99],
[107,0,95,104,106,105,85,96],
[115,116,0,122,121,115,111,104],
[105,107,89,0,105,107,95,94],
[112,105,90,106,0,102,101,102],
[112,106,96,104,109,0,96,106],
[119,126,100,116,110,115,0,112],
[112,115,107,117,109,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,122,101,99,109,115,107],
[132,0,117,96,97,127,107,95],
[89,94,0,88,90,98,84,84],
[110,115,123,0,105,124,86,117],
[112,114,121,106,0,130,91,135],
[102,84,113,87,81,0,100,95],
[96,104,127,125,120,111,0,107],
[104,116,127,94,76,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,122,87,117,108,123,125],
[99,0,106,86,107,111,124,128],
[89,105,0,89,111,94,105,91],
[124,125,122,0,128,101,138,121],
[94,104,100,83,0,113,114,118],
[103,100,117,110,98,0,93,128],
[88,87,106,73,97,118,0,106],
[86,83,120,90,93,83,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,112,89,112,102,109,97],
[120,0,120,106,128,93,110,107],
[99,91,0,93,111,89,80,93],
[122,105,118,0,109,93,88,98],
[99,83,100,102,0,100,76,84],
[109,118,122,118,111,0,101,92],
[102,101,131,123,135,110,0,121],
[114,104,118,113,127,119,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,113,100,94,101,118,87],
[119,0,110,92,113,109,107,95],
[98,101,0,91,99,84,101,90],
[111,119,120,0,112,103,113,101],
[117,98,112,99,0,103,121,109],
[110,102,127,108,108,0,116,103],
[93,104,110,98,90,95,0,106],
[124,116,121,110,102,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,99,112,107,107,125,113],
[93,0,96,93,90,103,116,98],
[112,115,0,106,98,110,113,115],
[99,118,105,0,98,100,111,107],
[104,121,113,113,0,111,129,115],
[104,108,101,111,100,0,128,100],
[86,95,98,100,82,83,0,97],
[98,113,96,104,96,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,69,60,110,82,79,89],
[140,0,95,76,113,118,113,114],
[142,116,0,64,129,123,130,117],
[151,135,147,0,147,180,102,111],
[101,98,82,64,0,71,73,83],
[129,93,88,31,140,0,85,80],
[132,98,81,109,138,126,0,123],
[122,97,94,100,128,131,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,88,115,105,115,110,117],
[122,0,101,117,110,119,121,120],
[123,110,0,112,104,123,107,117],
[96,94,99,0,100,107,93,118],
[106,101,107,111,0,116,112,113],
[96,92,88,104,95,0,118,114],
[101,90,104,118,99,93,0,108],
[94,91,94,93,98,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,103,101,93,100,103],
[111,0,95,98,101,93,96,94],
[116,116,0,106,103,106,104,101],
[108,113,105,0,108,89,97,95],
[110,110,108,103,0,106,102,100],
[118,118,105,122,105,0,119,113],
[111,115,107,114,109,92,0,104],
[108,117,110,116,111,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,101,104,97,88,108,99],
[141,0,120,120,108,101,109,120],
[110,91,0,113,98,111,104,105],
[107,91,98,0,94,94,107,105],
[114,103,113,117,0,110,110,109],
[123,110,100,117,101,0,114,112],
[103,102,107,104,101,97,0,111],
[112,91,106,106,102,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,116,109,105,110,113],
[116,0,111,128,110,108,99,121],
[113,100,0,118,107,100,112,112],
[95,83,93,0,98,85,95,102],
[102,101,104,113,0,105,98,110],
[106,103,111,126,106,0,127,114],
[101,112,99,116,113,84,0,104],
[98,90,99,109,101,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,101,111,107,105,111],
[103,0,110,111,121,91,106,101],
[98,101,0,109,117,94,105,103],
[110,100,102,0,109,93,102,96],
[100,90,94,102,0,96,102,98],
[104,120,117,118,115,0,106,117],
[106,105,106,109,109,105,0,111],
[100,110,108,115,113,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,81,108,94,102,110,85],
[109,0,94,99,84,97,109,84],
[130,117,0,123,112,126,125,102],
[103,112,88,0,90,108,110,88],
[117,127,99,121,0,104,118,107],
[109,114,85,103,107,0,114,101],
[101,102,86,101,93,97,0,85],
[126,127,109,123,104,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,123,119,104,129,122],
[96,0,125,139,110,111,100,123],
[104,86,0,113,95,100,95,113],
[88,72,98,0,100,103,86,88],
[92,101,116,111,0,109,103,100],
[107,100,111,108,102,0,98,91],
[82,111,116,125,108,113,0,121],
[89,88,98,123,111,120,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,96,94,110,105,94],
[116,0,111,103,103,98,108,104],
[100,100,0,104,99,102,112,107],
[115,108,107,0,103,98,103,102],
[117,108,112,108,0,96,112,95],
[101,113,109,113,115,0,97,94],
[106,103,99,108,99,114,0,100],
[117,107,104,109,116,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,99,102,106,115,87],
[95,0,88,106,96,118,89,76],
[108,123,0,102,95,95,112,123],
[112,105,109,0,90,121,113,108],
[109,115,116,121,0,114,117,97],
[105,93,116,90,97,0,91,76],
[96,122,99,98,94,120,0,76],
[124,135,88,103,114,135,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,103,106,94,111,102],
[114,0,100,101,95,94,115,112],
[112,111,0,104,117,100,120,115],
[108,110,107,0,103,109,122,121],
[105,116,94,108,0,101,117,112],
[117,117,111,102,110,0,124,113],
[100,96,91,89,94,87,0,108],
[109,99,96,90,99,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,96,85,115,116,119,78],
[128,0,128,127,123,96,114,122],
[115,83,0,104,92,102,118,91],
[126,84,107,0,113,127,137,97],
[96,88,119,98,0,114,98,91],
[95,115,109,84,97,0,128,94],
[92,97,93,74,113,83,0,90],
[133,89,120,114,120,117,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,102,107,110,105,96],
[104,0,103,101,98,107,103,90],
[108,108,0,99,104,104,108,106],
[109,110,112,0,106,110,109,99],
[104,113,107,105,0,112,104,106],
[101,104,107,101,99,0,97,104],
[106,108,103,102,107,114,0,99],
[115,121,105,112,105,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,106,104,111,116,109],
[102,0,115,105,92,120,103,117],
[100,96,0,92,83,87,109,111],
[105,106,119,0,109,102,123,123],
[107,119,128,102,0,115,119,129],
[100,91,124,109,96,0,108,108],
[95,108,102,88,92,103,0,116],
[102,94,100,88,82,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,115,110,110,108,113],
[97,0,94,101,95,91,106,111],
[116,117,0,111,115,104,106,117],
[96,110,100,0,94,96,111,110],
[101,116,96,117,0,99,110,116],
[101,120,107,115,112,0,118,118],
[103,105,105,100,101,93,0,115],
[98,100,94,101,95,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,135,100,108,106,99],
[101,0,128,121,115,113,120,108],
[114,83,0,107,97,85,86,84],
[76,90,104,0,103,96,97,96],
[111,96,114,108,0,108,86,105],
[103,98,126,115,103,0,93,100],
[105,91,125,114,125,118,0,110],
[112,103,127,115,106,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,109,110,94,102,97],
[115,0,95,120,106,106,112,114],
[116,116,0,122,126,105,111,110],
[102,91,89,0,103,96,92,95],
[101,105,85,108,0,97,103,91],
[117,105,106,115,114,0,106,108],
[109,99,100,119,108,105,0,113],
[114,97,101,116,120,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,105,98,100,102,93],
[118,0,101,101,99,113,112,107],
[109,110,0,101,101,110,111,98],
[106,110,110,0,105,105,105,91],
[113,112,110,106,0,106,112,97],
[111,98,101,106,105,0,113,99],
[109,99,100,106,99,98,0,84],
[118,104,113,120,114,112,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,102,98,121,136,149,166],
[87,0,83,66,99,83,100,124],
[109,128,0,92,143,121,122,149],
[113,145,119,0,152,140,104,132],
[90,112,68,59,0,88,81,128],
[75,128,90,71,123,0,114,124],
[62,111,89,107,130,97,0,100],
[45,87,62,79,83,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,102,96,101,106,100,103],
[93,0,108,97,97,99,97,103],
[109,103,0,106,90,112,94,98],
[115,114,105,0,108,112,106,103],
[110,114,121,103,0,117,110,124],
[105,112,99,99,94,0,93,103],
[111,114,117,105,101,118,0,112],
[108,108,113,108,87,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,107,132,119,124,94],
[104,0,97,100,131,126,107,96],
[108,114,0,104,129,121,116,104],
[104,111,107,0,128,131,110,120],
[79,80,82,83,0,88,100,85],
[92,85,90,80,123,0,107,82],
[87,104,95,101,111,104,0,84],
[117,115,107,91,126,129,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,109,109,97,110,119],
[99,0,110,106,95,89,90,108],
[104,101,0,96,109,101,93,113],
[102,105,115,0,106,102,102,113],
[102,116,102,105,0,100,99,109],
[114,122,110,109,111,0,102,124],
[101,121,118,109,112,109,0,120],
[92,103,98,98,102,87,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,105,101,98,118,90],
[105,0,123,114,130,115,130,111],
[96,88,0,90,103,92,109,87],
[106,97,121,0,99,96,104,103],
[110,81,108,112,0,89,104,89],
[113,96,119,115,122,0,94,101],
[93,81,102,107,107,117,0,102],
[121,100,124,108,122,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,111,106,105,116,101],
[110,0,121,121,105,96,110,105],
[102,90,0,121,112,101,121,110],
[100,90,90,0,94,93,101,77],
[105,106,99,117,0,101,105,91],
[106,115,110,118,110,0,114,99],
[95,101,90,110,106,97,0,99],
[110,106,101,134,120,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,135,120,113,122,86,96],
[94,0,116,131,115,101,110,122],
[76,95,0,119,106,100,66,112],
[91,80,92,0,112,83,94,145],
[98,96,105,99,0,110,83,134],
[89,110,111,128,101,0,90,119],
[125,101,145,117,128,121,0,131],
[115,89,99,66,77,92,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,106,106,96,115,103],
[113,0,92,104,98,95,100,93],
[102,119,0,111,113,102,113,94],
[105,107,100,0,101,103,110,92],
[105,113,98,110,0,100,109,106],
[115,116,109,108,111,0,105,105],
[96,111,98,101,102,106,0,95],
[108,118,117,119,105,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,104,102,110,86,111],
[107,0,97,105,107,106,96,104],
[109,114,0,98,103,112,111,109],
[107,106,113,0,99,118,102,114],
[109,104,108,112,0,108,91,112],
[101,105,99,93,103,0,98,100],
[125,115,100,109,120,113,0,117],
[100,107,102,97,99,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,102,104,107,105,108],
[113,0,93,107,112,109,124,125],
[115,118,0,115,98,116,107,127],
[109,104,96,0,105,113,105,108],
[107,99,113,106,0,111,117,118],
[104,102,95,98,100,0,104,109],
[106,87,104,106,94,107,0,105],
[103,86,84,103,93,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,89,89,93,85,93],
[119,0,96,103,108,107,102,83],
[120,115,0,111,106,106,102,109],
[122,108,100,0,79,105,101,96],
[122,103,105,132,0,107,100,94],
[118,104,105,106,104,0,106,109],
[126,109,109,110,111,105,0,102],
[118,128,102,115,117,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,105,96,115,112,94],
[105,0,99,98,111,112,114,111],
[108,112,0,99,110,104,97,101],
[106,113,112,0,113,109,102,113],
[115,100,101,98,0,109,105,94],
[96,99,107,102,102,0,107,97],
[99,97,114,109,106,104,0,99],
[117,100,110,98,117,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,111,103,68,116,154,111],
[122,0,93,122,55,55,119,119],
[100,118,0,165,70,91,154,133],
[108,89,46,0,46,70,158,130],
[143,156,141,165,0,88,187,137],
[95,156,120,141,123,0,170,109],
[57,92,57,53,24,41,0,83],
[100,92,78,81,74,102,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,102,105,102,109,99],
[108,0,113,97,111,98,104,109],
[98,98,0,98,93,96,104,107],
[109,114,113,0,99,111,114,114],
[106,100,118,112,0,102,112,108],
[109,113,115,100,109,0,119,109],
[102,107,107,97,99,92,0,99],
[112,102,104,97,103,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,146,127,113,92,107],
[114,0,115,131,113,102,110,102],
[92,96,0,121,117,71,105,114],
[65,80,90,0,91,90,74,91],
[84,98,94,120,0,85,99,116],
[98,109,140,121,126,0,105,112],
[119,101,106,137,112,106,0,105],
[104,109,97,120,95,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,121,107,107,123,125],
[98,0,90,108,93,101,110,120],
[108,121,0,112,108,107,100,126],
[90,103,99,0,102,107,104,123],
[104,118,103,109,0,115,99,124],
[104,110,104,104,96,0,100,121],
[88,101,111,107,112,111,0,106],
[86,91,85,88,87,90,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,102,122,123,125,109],
[104,0,111,97,109,116,113,100],
[90,100,0,97,113,125,111,97],
[109,114,114,0,115,120,109,105],
[89,102,98,96,0,113,105,95],
[88,95,86,91,98,0,108,87],
[86,98,100,102,106,103,0,89],
[102,111,114,106,116,124,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,94,83,101,85,92,127],
[144,0,116,100,131,122,104,110],
[117,95,0,99,103,73,90,107],
[128,111,112,0,103,120,114,103],
[110,80,108,108,0,101,110,118],
[126,89,138,91,110,0,130,109],
[119,107,121,97,101,81,0,118],
[84,101,104,108,93,102,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,118,100,111,120,103],
[105,0,103,111,93,101,116,100],
[104,108,0,119,102,87,118,112],
[93,100,92,0,91,96,100,93],
[111,118,109,120,0,101,111,108],
[100,110,124,115,110,0,115,108],
[91,95,93,111,100,96,0,95],
[108,111,99,118,103,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,100,115,109,99,117],
[107,0,92,101,111,90,105,113],
[107,119,0,98,117,89,114,121],
[111,110,113,0,121,99,112,124],
[96,100,94,90,0,76,113,106],
[102,121,122,112,135,0,124,133],
[112,106,97,99,98,87,0,121],
[94,98,90,87,105,78,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,91,102,117,98,119,106],
[99,0,88,101,107,94,111,113],
[120,123,0,101,128,127,130,116],
[109,110,110,0,97,113,129,104],
[94,104,83,114,0,93,117,106],
[113,117,84,98,118,0,101,92],
[92,100,81,82,94,110,0,85],
[105,98,95,107,105,119,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,101,106,96,118,102],
[102,0,106,107,116,109,109,88],
[116,105,0,118,119,99,116,112],
[110,104,93,0,108,83,109,92],
[105,95,92,103,0,96,104,92],
[115,102,112,128,115,0,116,104],
[93,102,95,102,107,95,0,93],
[109,123,99,119,119,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,126,145,123,131,142,104],
[79,0,104,123,101,109,109,112],
[85,107,0,105,110,113,102,100],
[66,88,106,0,107,104,121,74],
[88,110,101,104,0,117,127,102],
[80,102,98,107,94,0,114,87],
[69,102,109,90,84,97,0,101],
[107,99,111,137,109,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,99,125,95,101,94],
[106,0,88,99,111,102,99,98],
[114,123,0,103,129,110,113,107],
[112,112,108,0,128,112,105,111],
[86,100,82,83,0,89,87,78],
[116,109,101,99,122,0,118,104],
[110,112,98,106,124,93,0,103],
[117,113,104,100,133,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,90,113,99,111,112],
[105,0,94,95,93,124,92,80],
[118,117,0,98,142,120,110,99],
[121,116,113,0,127,116,131,100],
[98,118,69,84,0,105,108,86],
[112,87,91,95,106,0,95,87],
[100,119,101,80,103,116,0,88],
[99,131,112,111,125,124,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,87,102,109,95,83,94],
[127,0,111,110,100,101,109,107],
[124,100,0,91,111,96,106,101],
[109,101,120,0,109,95,101,103],
[102,111,100,102,0,98,96,103],
[116,110,115,116,113,0,103,119],
[128,102,105,110,115,108,0,115],
[117,104,110,108,108,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,112,111,98,106,107],
[108,0,110,105,107,107,93,110],
[106,101,0,97,105,104,99,108],
[99,106,114,0,107,100,91,106],
[100,104,106,104,0,98,96,97],
[113,104,107,111,113,0,103,113],
[105,118,112,120,115,108,0,116],
[104,101,103,105,114,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,84,110,119,101,91,115],
[110,0,120,142,103,116,133,130],
[127,91,0,102,98,112,112,107],
[101,69,109,0,101,86,95,102],
[92,108,113,110,0,96,120,104],
[110,95,99,125,115,0,99,112],
[120,78,99,116,91,112,0,90],
[96,81,104,109,107,99,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,93,105,104,112,105,111],
[102,0,117,120,99,95,97,112],
[118,94,0,132,123,91,113,101],
[106,91,79,0,91,93,80,97],
[107,112,88,120,0,87,102,97],
[99,116,120,118,124,0,92,98],
[106,114,98,131,109,119,0,108],
[100,99,110,114,114,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,111,102,97,126,74],
[101,0,115,105,113,126,106,83],
[93,96,0,105,91,96,88,79],
[100,106,106,0,113,104,101,113],
[109,98,120,98,0,95,79,72],
[114,85,115,107,116,0,84,101],
[85,105,123,110,132,127,0,82],
[137,128,132,98,139,110,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,108,115,122,112,97],
[95,0,103,94,114,105,115,104],
[91,108,0,98,102,102,107,100],
[103,117,113,0,110,112,111,108],
[96,97,109,101,0,106,115,105],
[89,106,109,99,105,0,115,100],
[99,96,104,100,96,96,0,94],
[114,107,111,103,106,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,114,95,109,85,100],
[92,0,94,108,79,99,90,85],
[109,117,0,107,86,112,116,84],
[97,103,104,0,80,104,99,85],
[116,132,125,131,0,127,94,108],
[102,112,99,107,84,0,92,94],
[126,121,95,112,117,119,0,99],
[111,126,127,126,103,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,154,132,141,149,135,101,118],
[57,0,101,113,110,52,44,88],
[79,110,0,99,98,95,81,92],
[70,98,112,0,89,91,83,73],
[62,101,113,122,0,54,83,92],
[76,159,116,120,157,0,112,130],
[110,167,130,128,128,99,0,155],
[93,123,119,138,119,81,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,129,104,120,117,115,119],
[96,0,105,102,95,92,85,88],
[82,106,0,96,95,104,92,112],
[107,109,115,0,119,104,99,88],
[91,116,116,92,0,91,93,97],
[94,119,107,107,120,0,107,103],
[96,126,119,112,118,104,0,106],
[92,123,99,123,114,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,130,104,119,108,98],
[93,0,107,126,122,112,124,106],
[107,104,0,107,128,110,111,124],
[81,85,104,0,111,99,104,103],
[107,89,83,100,0,91,100,114],
[92,99,101,112,120,0,96,100],
[103,87,100,107,111,115,0,104],
[113,105,87,108,97,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,110,108,92,104,111],
[102,0,104,107,109,97,101,92],
[102,107,0,113,111,101,99,106],
[101,104,98,0,102,111,112,106],
[103,102,100,109,0,99,107,105],
[119,114,110,100,112,0,115,114],
[107,110,112,99,104,96,0,102],
[100,119,105,105,106,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,89,101,102,104,98,103],
[107,0,92,101,113,94,103,106],
[122,119,0,110,113,103,110,113],
[110,110,101,0,117,102,105,117],
[109,98,98,94,0,99,104,108],
[107,117,108,109,112,0,111,105],
[113,108,101,106,107,100,0,108],
[108,105,98,94,103,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,120,84,84,121,162,118],
[129,0,105,115,107,142,142,128],
[91,106,0,110,81,121,135,116],
[127,96,101,0,114,132,161,127],
[127,104,130,97,0,140,130,153],
[90,69,90,79,71,0,104,112],
[49,69,76,50,81,107,0,113],
[93,83,95,84,58,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,98,101,93,100,102],
[110,0,108,106,107,106,97,97],
[110,103,0,106,119,98,118,96],
[113,105,105,0,99,94,95,101],
[110,104,92,112,0,89,113,87],
[118,105,113,117,122,0,126,111],
[111,114,93,116,98,85,0,106],
[109,114,115,110,124,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,107,99,105,103,104],
[101,0,100,103,94,105,99,105],
[107,111,0,108,101,109,102,97],
[104,108,103,0,112,112,120,113],
[112,117,110,99,0,103,110,109],
[106,106,102,99,108,0,107,106],
[108,112,109,91,101,104,0,104],
[107,106,114,98,102,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,89,111,102,109,95],
[106,0,95,102,103,102,109,99],
[109,116,0,108,114,104,117,104],
[122,109,103,0,110,110,115,117],
[100,108,97,101,0,102,116,100],
[109,109,107,101,109,0,109,101],
[102,102,94,96,95,102,0,103],
[116,112,107,94,111,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,106,118,114,106,102],
[106,0,96,99,107,99,99,87],
[102,115,0,111,117,121,119,119],
[105,112,100,0,141,127,115,122],
[93,104,94,70,0,114,83,126],
[97,112,90,84,97,0,111,92],
[105,112,92,96,128,100,0,101],
[109,124,92,89,85,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,105,111,103,117,110],
[102,0,100,108,108,108,108,106],
[112,111,0,110,93,106,113,102],
[106,103,101,0,98,94,113,97],
[100,103,118,113,0,115,117,113],
[108,103,105,117,96,0,115,98],
[94,103,98,98,94,96,0,105],
[101,105,109,114,98,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,105,119,107,117,107],
[103,0,105,109,116,113,109,102],
[106,106,0,105,115,105,107,98],
[106,102,106,0,116,93,103,103],
[92,95,96,95,0,90,100,92],
[104,98,106,118,121,0,106,105],
[94,102,104,108,111,105,0,102],
[104,109,113,108,119,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,125,98,101,127,113],
[99,0,87,107,101,95,117,108],
[119,124,0,121,104,109,128,126],
[86,104,90,0,97,101,115,115],
[113,110,107,114,0,99,121,117],
[110,116,102,110,112,0,114,118],
[84,94,83,96,90,97,0,93],
[98,103,85,96,94,93,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,136,102,103,119,128,129],
[118,0,130,126,174,101,105,185],
[75,81,0,133,124,69,110,114],
[109,85,78,0,119,96,119,155],
[108,37,87,92,0,68,84,102],
[92,110,142,115,143,0,149,162],
[83,106,101,92,127,62,0,149],
[82,26,97,56,109,49,62,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,93,103,113,101,104,105],
[91,0,107,99,102,101,112,112],
[118,104,0,110,104,107,114,113],
[108,112,101,0,114,95,111,110],
[98,109,107,97,0,102,106,108],
[110,110,104,116,109,0,120,115],
[107,99,97,100,105,91,0,115],
[106,99,98,101,103,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,157,103,87,139,107,161],
[75,0,121,95,64,98,92,142],
[54,90,0,73,71,44,44,115],
[108,116,138,0,76,126,73,111],
[124,147,140,135,0,132,101,173],
[72,113,167,85,79,0,114,120],
[104,119,167,138,110,97,0,130],
[50,69,96,100,38,91,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,99,101,101,112,101],
[114,0,115,117,118,86,100,110],
[96,96,0,108,99,110,102,101],
[112,94,103,0,116,105,108,114],
[110,93,112,95,0,96,99,112],
[110,125,101,106,115,0,101,103],
[99,111,109,103,112,110,0,120],
[110,101,110,97,99,108,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,109,104,116,120,122],
[104,0,104,103,116,108,94,114],
[94,107,0,101,109,102,99,104],
[102,108,110,0,109,108,103,111],
[107,95,102,102,0,110,101,102],
[95,103,109,103,101,0,95,107],
[91,117,112,108,110,116,0,111],
[89,97,107,100,109,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,116,120,114,101,112,113],
[81,0,100,106,108,99,104,96],
[95,111,0,99,103,103,105,98],
[91,105,112,0,101,100,111,110],
[97,103,108,110,0,97,95,110],
[110,112,108,111,114,0,102,108],
[99,107,106,100,116,109,0,101],
[98,115,113,101,101,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,98,122,106,108,114],
[112,0,113,101,121,105,120,109],
[101,98,0,106,113,93,114,94],
[113,110,105,0,115,108,122,110],
[89,90,98,96,0,91,110,104],
[105,106,118,103,120,0,113,114],
[103,91,97,89,101,98,0,110],
[97,102,117,101,107,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,111,119,117,105,109],
[103,0,113,117,117,109,104,108],
[102,98,0,112,108,118,105,106],
[100,94,99,0,109,95,102,95],
[92,94,103,102,0,102,95,90],
[94,102,93,116,109,0,95,95],
[106,107,106,109,116,116,0,99],
[102,103,105,116,121,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,101,104,109,119,108],
[105,0,112,115,104,113,122,105],
[100,99,0,98,101,110,113,105],
[110,96,113,0,116,104,115,108],
[107,107,110,95,0,103,114,110],
[102,98,101,107,108,0,102,105],
[92,89,98,96,97,109,0,102],
[103,106,106,103,101,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,121,105,94,95,106,123],
[92,0,103,93,86,109,96,113],
[90,108,0,104,90,98,95,107],
[106,118,107,0,118,103,97,113],
[117,125,121,93,0,113,111,109],
[116,102,113,108,98,0,115,111],
[105,115,116,114,100,96,0,118],
[88,98,104,98,102,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,115,109,113,115,103],
[94,0,108,106,103,102,96,96],
[91,103,0,105,94,105,105,94],
[96,105,106,0,95,98,104,102],
[102,108,117,116,0,109,105,115],
[98,109,106,113,102,0,109,100],
[96,115,106,107,106,102,0,105],
[108,115,117,109,96,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,108,108,113,95,94],
[104,0,99,111,107,121,100,98],
[111,112,0,117,105,110,116,109],
[103,100,94,0,110,113,95,100],
[103,104,106,101,0,115,110,98],
[98,90,101,98,96,0,95,98],
[116,111,95,116,101,116,0,104],
[117,113,102,111,113,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,91,110,106,107,108,102],
[108,0,101,108,106,109,117,126],
[120,110,0,99,99,97,120,111],
[101,103,112,0,107,100,109,117],
[105,105,112,104,0,97,108,107],
[104,102,114,111,114,0,119,125],
[103,94,91,102,103,92,0,93],
[109,85,100,94,104,86,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,102,109,102,98,100],
[107,0,120,116,105,111,111,105],
[103,91,0,103,100,97,94,102],
[109,95,108,0,111,110,103,106],
[102,106,111,100,0,103,101,98],
[109,100,114,101,108,0,118,104],
[113,100,117,108,110,93,0,95],
[111,106,109,105,113,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,170,98,129,195,61,61],
[93,0,211,113,129,190,102,113],
[41,0,0,77,93,174,102,0],
[113,98,134,0,113,134,102,36],
[82,82,118,98,0,195,82,82],
[16,21,37,77,16,0,61,16],
[150,109,109,109,129,150,0,88],
[150,98,211,175,129,195,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,100,101,115,116,108],
[107,0,98,106,96,113,97,109],
[112,113,0,108,97,108,109,117],
[111,105,103,0,108,119,109,119],
[110,115,114,103,0,120,106,108],
[96,98,103,92,91,0,98,106],
[95,114,102,102,105,113,0,113],
[103,102,94,92,103,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,120,116,106,113,121,113],
[107,0,113,104,102,108,118,115],
[91,98,0,108,101,104,109,106],
[95,107,103,0,101,109,122,111],
[105,109,110,110,0,107,114,115],
[98,103,107,102,104,0,114,113],
[90,93,102,89,97,97,0,105],
[98,96,105,100,96,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,146,120,138,122,126,101,151],
[65,0,33,87,57,93,52,96],
[91,178,0,141,131,138,114,171],
[73,124,70,0,71,98,73,125],
[89,154,80,140,0,128,134,208],
[85,118,73,113,83,0,137,181],
[110,159,97,138,77,74,0,170],
[60,115,40,86,3,30,41,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,105,103,108,105,107],
[112,0,117,100,116,104,112,111],
[98,94,0,101,108,99,107,98],
[106,111,110,0,112,101,102,112],
[108,95,103,99,0,95,102,108],
[103,107,112,110,116,0,115,108],
[106,99,104,109,109,96,0,105],
[104,100,113,99,103,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,107,107,103,105,108],
[112,0,110,98,106,105,113,98],
[106,101,0,98,103,98,97,101],
[104,113,113,0,110,106,111,107],
[104,105,108,101,0,106,106,100],
[108,106,113,105,105,0,109,106],
[106,98,114,100,105,102,0,110],
[103,113,110,104,111,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,92,102,115,102,104],
[112,0,116,95,107,115,116,112],
[118,95,0,99,112,105,115,116],
[119,116,112,0,103,130,108,105],
[109,104,99,108,0,111,124,111],
[96,96,106,81,100,0,97,104],
[109,95,96,103,87,114,0,96],
[107,99,95,106,100,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,107,96,117,96,105],
[98,0,98,114,100,104,103,109],
[106,113,0,119,93,100,106,99],
[104,97,92,0,91,111,109,88],
[115,111,118,120,0,122,110,98],
[94,107,111,100,89,0,106,84],
[115,108,105,102,101,105,0,109],
[106,102,112,123,113,127,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,122,65,103,75,126,96],
[109,0,104,47,142,121,116,97],
[89,107,0,65,118,100,132,110],
[146,164,146,0,135,105,142,164],
[108,69,93,76,0,89,70,121],
[136,90,111,106,122,0,103,143],
[85,95,79,69,141,108,0,98],
[115,114,101,47,90,68,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,103,108,108,109,105],
[97,0,95,102,108,99,98,96],
[101,116,0,103,113,111,111,98],
[108,109,108,0,113,101,98,103],
[103,103,98,98,0,93,100,96],
[103,112,100,110,118,0,104,107],
[102,113,100,113,111,107,0,102],
[106,115,113,108,115,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,93,94,109,105,97],
[116,0,111,110,100,113,108,110],
[105,100,0,103,110,104,111,109],
[118,101,108,0,110,111,104,106],
[117,111,101,101,0,109,123,105],
[102,98,107,100,102,0,104,104],
[106,103,100,107,88,107,0,102],
[114,101,102,105,106,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,99,65,45,63,98,63],
[138,0,136,105,121,104,119,122],
[112,75,0,98,80,61,91,73],
[146,106,113,0,109,84,134,64],
[166,90,131,102,0,66,123,86],
[148,107,150,127,145,0,136,101],
[113,92,120,77,88,75,0,87],
[148,89,138,147,125,110,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,96,96,98,77,107],
[114,0,125,93,100,105,89,129],
[115,86,0,102,107,102,105,108],
[115,118,109,0,117,104,103,144],
[115,111,104,94,0,107,113,120],
[113,106,109,107,104,0,106,128],
[134,122,106,108,98,105,0,113],
[104,82,103,67,91,83,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,83,92,103,118,104,96],
[110,0,107,106,119,106,112,105],
[128,104,0,110,116,125,108,109],
[119,105,101,0,125,119,111,112],
[108,92,95,86,0,115,100,116],
[93,105,86,92,96,0,111,100],
[107,99,103,100,111,100,0,111],
[115,106,102,99,95,111,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,108,112,131,114,83,115],
[88,0,105,112,119,108,96,95],
[103,106,0,101,129,91,81,95],
[99,99,110,0,101,89,111,94],
[80,92,82,110,0,98,79,65],
[97,103,120,122,113,0,80,97],
[128,115,130,100,132,131,0,101],
[96,116,116,117,146,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,135,124,115,116,101,101],
[76,0,123,99,101,94,105,88],
[76,88,0,96,107,123,98,132],
[87,112,115,0,99,88,121,113],
[96,110,104,112,0,84,98,115],
[95,117,88,123,127,0,109,128],
[110,106,113,90,113,102,0,86],
[110,123,79,98,96,83,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,130,112,130,154,108,135],
[128,0,117,119,131,132,102,125],
[81,94,0,89,95,132,84,96],
[99,92,122,0,111,113,103,105],
[81,80,116,100,0,112,101,119],
[57,79,79,98,99,0,86,116],
[103,109,127,108,110,125,0,109],
[76,86,115,106,92,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,100,110,105,97,107],
[108,0,120,110,98,130,114,106],
[89,91,0,100,112,82,88,82],
[111,101,111,0,111,115,103,99],
[101,113,99,100,0,122,111,106],
[106,81,129,96,89,0,112,102],
[114,97,123,108,100,99,0,89],
[104,105,129,112,105,109,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,151,107,119,104,111,108],
[98,0,128,113,121,99,110,101],
[60,83,0,74,98,84,78,76],
[104,98,137,0,111,124,119,113],
[92,90,113,100,0,93,92,98],
[107,112,127,87,118,0,105,94],
[100,101,133,92,119,106,0,103],
[103,110,135,98,113,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,111,130,105,111,119],
[107,0,130,101,124,110,101,120],
[100,81,0,75,114,93,88,98],
[100,110,136,0,129,107,103,110],
[81,87,97,82,0,93,93,110],
[106,101,118,104,118,0,114,121],
[100,110,123,108,118,97,0,119],
[92,91,113,101,101,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,181,107,119,154,101,59],
[89,0,89,55,42,89,101,40],
[30,122,0,13,57,46,86,43],
[104,156,198,0,183,123,150,123],
[92,169,154,28,0,121,121,60],
[57,122,165,88,90,0,131,43],
[110,110,125,61,90,80,0,77],
[152,171,168,88,151,168,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,110,82,95,95,74,85],
[90,0,101,75,82,89,84,79],
[101,110,0,81,78,86,85,94],
[129,136,130,0,117,110,103,122],
[116,129,133,94,0,101,102,122],
[116,122,125,101,110,0,116,116],
[137,127,126,108,109,95,0,127],
[126,132,117,89,89,95,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,113,100,107,105,100],
[107,0,97,114,120,109,111,91],
[102,114,0,100,126,112,107,101],
[98,97,111,0,121,117,106,113],
[111,91,85,90,0,110,97,97],
[104,102,99,94,101,0,92,94],
[106,100,104,105,114,119,0,97],
[111,120,110,98,114,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,144,106,110,106,87,106],
[85,0,105,67,88,92,107,54],
[67,106,0,67,76,78,75,86],
[105,144,144,0,124,92,98,94],
[101,123,135,87,0,101,127,102],
[105,119,133,119,110,0,114,127],
[124,104,136,113,84,97,0,100],
[105,157,125,117,109,84,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,122,115,105,104,102,99],
[119,0,117,130,129,121,109,105],
[89,94,0,113,86,95,92,91],
[96,81,98,0,98,115,95,100],
[106,82,125,113,0,99,102,93],
[107,90,116,96,112,0,93,101],
[109,102,119,116,109,118,0,106],
[112,106,120,111,118,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,114,107,95,102,105],
[115,0,118,118,105,111,106,106],
[100,93,0,116,94,95,110,108],
[97,93,95,0,84,86,90,96],
[104,106,117,127,0,104,117,108],
[116,100,116,125,107,0,114,104],
[109,105,101,121,94,97,0,110],
[106,105,103,115,103,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,133,104,160,119,165],
[92,0,74,92,96,147,65,143],
[105,137,0,84,132,128,128,143],
[78,119,127,0,93,110,108,157],
[107,115,79,118,0,151,107,164],
[51,64,83,101,60,0,70,110],
[92,146,83,103,104,141,0,120],
[46,68,68,54,47,101,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,109,105,123,111,106,114],
[82,0,96,98,89,86,88,90],
[102,115,0,96,102,117,102,107],
[106,113,115,0,96,120,97,120],
[88,122,109,115,0,115,109,116],
[100,125,94,91,96,0,99,106],
[105,123,109,114,102,112,0,119],
[97,121,104,91,95,105,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,114,115,97,108,107],
[93,0,93,115,86,101,93,103],
[107,118,0,115,105,110,109,94],
[97,96,96,0,84,92,113,89],
[96,125,106,127,0,101,97,102],
[114,110,101,119,110,0,110,111],
[103,118,102,98,114,101,0,111],
[104,108,117,122,109,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,69,90,80,68,89,140],
[135,0,77,66,122,138,75,124],
[142,134,0,78,122,138,122,140],
[121,145,133,0,101,80,145,93],
[131,89,89,110,0,35,108,128],
[143,73,73,131,176,0,109,131],
[122,136,89,66,103,102,0,116],
[71,87,71,118,83,80,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,115,98,110,104,114],
[101,0,99,103,102,109,111,101],
[110,112,0,98,112,108,121,101],
[96,108,113,0,113,113,125,107],
[113,109,99,98,0,109,105,111],
[101,102,103,98,102,0,108,102],
[107,100,90,86,106,103,0,88],
[97,110,110,104,100,109,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,134,136,99,111,132,85],
[117,0,148,100,136,122,138,136],
[77,63,0,86,113,81,99,67],
[75,111,125,0,112,111,111,120],
[112,75,98,99,0,100,84,87],
[100,89,130,100,111,0,95,121],
[79,73,112,100,127,116,0,90],
[126,75,144,91,124,90,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,113,90,119,100,106],
[100,0,113,123,108,119,117,120],
[104,98,0,107,109,112,98,102],
[98,88,104,0,98,106,100,97],
[121,103,102,113,0,115,109,105],
[92,92,99,105,96,0,98,105],
[111,94,113,111,102,113,0,114],
[105,91,109,114,106,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,97,102,108,91,104],
[100,0,106,90,105,110,98,99],
[109,105,0,102,97,106,102,104],
[114,121,109,0,108,113,95,112],
[109,106,114,103,0,107,100,98],
[103,101,105,98,104,0,88,102],
[120,113,109,116,111,123,0,101],
[107,112,107,99,113,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,108,88,107,107,108],
[101,0,90,108,86,116,114,103],
[110,121,0,115,99,110,111,109],
[103,103,96,0,93,106,103,104],
[123,125,112,118,0,105,111,117],
[104,95,101,105,106,0,112,107],
[104,97,100,108,100,99,0,106],
[103,108,102,107,94,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,96,116,111,106,96],
[108,0,107,104,113,111,115,103],
[114,104,0,105,120,121,122,113],
[115,107,106,0,114,113,114,105],
[95,98,91,97,0,101,104,92],
[100,100,90,98,110,0,109,99],
[105,96,89,97,107,102,0,100],
[115,108,98,106,119,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,105,102,121,106,100],
[113,0,105,110,117,123,104,113],
[114,106,0,111,103,119,114,104],
[106,101,100,0,108,114,107,108],
[109,94,108,103,0,107,108,105],
[90,88,92,97,104,0,93,90],
[105,107,97,104,103,118,0,98],
[111,98,107,103,106,121,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,115,112,100,119,117],
[97,0,117,111,109,115,105,118],
[101,94,0,114,92,92,113,101],
[96,100,97,0,105,101,109,117],
[99,102,119,106,0,114,104,116],
[111,96,119,110,97,0,113,120],
[92,106,98,102,107,98,0,112],
[94,93,110,94,95,91,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,112,112,104,109,102],
[97,0,114,114,108,100,115,108],
[109,97,0,102,99,103,92,94],
[99,97,109,0,98,112,107,91],
[99,103,112,113,0,98,109,90],
[107,111,108,99,113,0,105,98],
[102,96,119,104,102,106,0,97],
[109,103,117,120,121,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,103,100,97,93,89],
[108,0,109,95,89,96,92,106],
[107,102,0,107,101,107,95,96],
[108,116,104,0,99,100,87,97],
[111,122,110,112,0,105,110,112],
[114,115,104,111,106,0,91,100],
[118,119,116,124,101,120,0,122],
[122,105,115,114,99,111,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,86,104,107,102,102],
[109,0,109,103,105,97,99,97],
[116,102,0,107,112,111,107,103],
[125,108,104,0,106,110,103,105],
[107,106,99,105,0,116,100,102],
[104,114,100,101,95,0,91,102],
[109,112,104,108,111,120,0,109],
[109,114,108,106,109,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,171,117,98,171,65,174],
[121,0,119,68,118,122,119,122],
[40,92,0,157,67,116,68,108],
[94,143,54,0,91,118,119,129],
[113,93,144,120,0,137,114,147],
[40,89,95,93,74,0,99,98],
[146,92,143,92,97,112,0,112],
[37,89,103,82,64,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,86,96,91,87,78,97],
[113,0,96,103,110,92,97,96],
[125,115,0,96,95,112,102,106],
[115,108,115,0,104,107,103,102],
[120,101,116,107,0,101,107,103],
[124,119,99,104,110,0,110,103],
[133,114,109,108,104,101,0,109],
[114,115,105,109,108,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,103,90,96,98,117],
[105,0,100,96,99,105,105,112],
[117,111,0,100,105,115,112,124],
[108,115,111,0,102,112,113,114],
[121,112,106,109,0,107,99,125],
[115,106,96,99,104,0,97,116],
[113,106,99,98,112,114,0,115],
[94,99,87,97,86,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,131,95,104,119,139,108],
[82,0,114,90,84,89,118,82],
[80,97,0,71,85,93,103,90],
[116,121,140,0,104,114,137,121],
[107,127,126,107,0,105,140,97],
[92,122,118,97,106,0,134,95],
[72,93,108,74,71,77,0,71],
[103,129,121,90,114,116,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,110,103,113,107,110],
[94,0,98,94,98,93,85,101],
[110,113,0,113,105,125,98,101],
[101,117,98,0,90,107,102,110],
[108,113,106,121,0,105,106,122],
[98,118,86,104,106,0,94,116],
[104,126,113,109,105,117,0,113],
[101,110,110,101,89,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,94,100,96,121,108],
[115,0,103,102,98,105,117,103],
[116,108,0,118,98,100,118,99],
[117,109,93,0,116,124,110,111],
[111,113,113,95,0,101,106,101],
[115,106,111,87,110,0,110,87],
[90,94,93,101,105,101,0,100],
[103,108,112,100,110,124,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,102,121,121,87,92,150],
[87,0,153,104,114,108,143,175],
[109,58,0,67,102,105,67,111],
[90,107,144,0,109,137,116,109],
[90,97,109,102,0,80,124,134],
[124,103,106,74,131,0,131,117],
[119,68,144,95,87,80,0,122],
[61,36,100,102,77,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,111,114,97,107,121],
[101,0,96,101,109,93,107,110],
[102,115,0,112,116,118,117,125],
[100,110,99,0,107,103,102,118],
[97,102,95,104,0,85,101,103],
[114,118,93,108,126,0,111,120],
[104,104,94,109,110,100,0,106],
[90,101,86,93,108,91,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,110,99,82,117,114],
[97,0,113,105,94,99,101,98],
[99,98,0,98,101,106,123,93],
[101,106,113,0,111,113,111,102],
[112,117,110,100,0,120,127,125],
[129,112,105,98,91,0,128,112],
[94,110,88,100,84,83,0,77],
[97,113,118,109,86,99,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,105,105,107,97,106,113],
[115,0,99,103,114,103,85,97],
[106,112,0,112,98,101,93,111],
[106,108,99,0,119,109,97,109],
[104,97,113,92,0,97,98,108],
[114,108,110,102,114,0,118,105],
[105,126,118,114,113,93,0,117],
[98,114,100,102,103,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,102,106,87,92,90],
[122,0,106,106,107,99,95,112],
[112,105,0,115,109,103,98,96],
[109,105,96,0,91,85,95,96],
[105,104,102,120,0,95,110,97],
[124,112,108,126,116,0,106,103],
[119,116,113,116,101,105,0,99],
[121,99,115,115,114,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,109,94,105,132,105],
[109,0,112,108,110,119,131,105],
[102,99,0,101,103,97,127,99],
[102,103,110,0,102,108,128,112],
[117,101,108,109,0,111,132,105],
[106,92,114,103,100,0,134,99],
[79,80,84,83,79,77,0,77],
[106,106,112,99,106,112,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,105,108,108,109,111],
[108,0,97,105,106,114,110,112],
[100,114,0,105,106,114,108,111],
[106,106,106,0,98,111,106,115],
[103,105,105,113,0,106,108,112],
[103,97,97,100,105,0,98,101],
[102,101,103,105,103,113,0,114],
[100,99,100,96,99,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,127,116,121,138,122,105],
[71,0,98,95,109,113,108,77],
[84,113,0,100,107,110,106,89],
[95,116,111,0,134,105,112,107],
[90,102,104,77,0,84,101,88],
[73,98,101,106,127,0,106,94],
[89,103,105,99,110,105,0,84],
[106,134,122,104,123,117,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,109,94,99,85,104],
[102,0,103,102,95,99,69,106],
[115,108,0,115,117,111,100,106],
[102,109,96,0,104,89,90,110],
[117,116,94,107,0,112,111,123],
[112,112,100,122,99,0,99,102],
[126,142,111,121,100,112,0,112],
[107,105,105,101,88,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,101,102,107,104,114],
[99,0,109,98,96,102,108,103],
[103,102,0,102,108,106,98,102],
[110,113,109,0,104,102,103,105],
[109,115,103,107,0,112,105,104],
[104,109,105,109,99,0,96,108],
[107,103,113,108,106,115,0,110],
[97,108,109,106,107,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,97,111,110,108,115],
[108,0,107,110,107,103,87,111],
[110,104,0,106,115,101,111,112],
[114,101,105,0,100,111,100,109],
[100,104,96,111,0,103,102,100],
[101,108,110,100,108,0,104,110],
[103,124,100,111,109,107,0,110],
[96,100,99,102,111,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,110,110,95,106,96],
[107,0,122,110,117,97,107,121],
[99,89,0,104,109,86,98,92],
[101,101,107,0,110,91,106,98],
[101,94,102,101,0,95,102,98],
[116,114,125,120,116,0,114,103],
[105,104,113,105,109,97,0,109],
[115,90,119,113,113,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,108,98,101,98,104],
[112,0,103,108,109,100,101,115],
[106,108,0,111,105,107,109,106],
[103,103,100,0,105,110,106,110],
[113,102,106,106,0,107,106,111],
[110,111,104,101,104,0,102,121],
[113,110,102,105,105,109,0,108],
[107,96,105,101,100,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,88,120,85,39,84,61],
[146,0,161,146,85,88,134,106],
[123,50,0,156,109,69,107,93],
[91,65,55,0,109,52,75,41],
[126,126,102,102,0,73,120,102],
[172,123,142,159,138,0,163,64],
[127,77,104,136,91,48,0,64],
[150,105,118,170,109,147,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,103,106,113,105,104],
[105,0,123,107,114,115,104,113],
[96,88,0,120,114,116,115,109],
[108,104,91,0,103,122,108,104],
[105,97,97,108,0,100,103,101],
[98,96,95,89,111,0,110,114],
[106,107,96,103,108,101,0,102],
[107,98,102,107,110,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,102,99,100,96,94],
[110,0,107,109,110,116,115,101],
[112,104,0,106,101,116,101,108],
[109,102,105,0,103,116,112,114],
[112,101,110,108,0,116,102,99],
[111,95,95,95,95,0,101,92],
[115,96,110,99,109,110,0,102],
[117,110,103,97,112,119,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,113,104,114,108,111],
[110,0,107,111,111,109,109,102],
[103,104,0,100,107,117,111,102],
[98,100,111,0,115,108,103,98],
[107,100,104,96,0,118,107,107],
[97,102,94,103,93,0,101,97],
[103,102,100,108,104,110,0,93],
[100,109,109,113,104,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,98,91,85,100,96],
[114,0,100,103,103,107,113,99],
[104,111,0,102,110,115,108,98],
[113,108,109,0,109,107,105,101],
[120,108,101,102,0,106,114,107],
[126,104,96,104,105,0,106,108],
[111,98,103,106,97,105,0,95],
[115,112,113,110,104,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,116,111,118,113,105],
[102,0,88,99,90,113,105,99],
[102,123,0,99,102,129,108,108],
[95,112,112,0,95,125,115,105],
[100,121,109,116,0,126,106,102],
[93,98,82,86,85,0,97,96],
[98,106,103,96,105,114,0,98],
[106,112,103,106,109,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,104,94,115,119,86],
[100,0,134,102,108,116,111,97],
[97,77,0,69,79,92,98,70],
[107,109,142,0,86,114,131,109],
[117,103,132,125,0,104,133,114],
[96,95,119,97,107,0,111,91],
[92,100,113,80,78,100,0,85],
[125,114,141,102,97,120,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,102,74,116,102,107],
[95,0,77,98,76,89,103,101],
[107,134,0,105,109,113,125,112],
[109,113,106,0,84,95,122,106],
[137,135,102,127,0,81,124,139],
[95,122,98,116,130,0,115,118],
[109,108,86,89,87,96,0,95],
[104,110,99,105,72,93,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,119,95,95,125,127,127],
[117,0,113,123,127,112,98,126],
[92,98,0,101,107,107,99,124],
[116,88,110,0,96,100,105,111],
[116,84,104,115,0,122,119,109],
[86,99,104,111,89,0,116,113],
[84,113,112,106,92,95,0,114],
[84,85,87,100,102,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,99,109,116,106,115],
[104,0,115,102,108,111,105,97],
[99,96,0,102,101,109,100,104],
[112,109,109,0,102,120,108,109],
[102,103,110,109,0,121,110,101],
[95,100,102,91,90,0,103,100],
[105,106,111,103,101,108,0,101],
[96,114,107,102,110,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,110,106,99,94,121],
[111,0,111,107,108,106,102,120],
[104,100,0,107,115,104,104,126],
[101,104,104,0,117,108,116,127],
[105,103,96,94,0,112,93,117],
[112,105,107,103,99,0,106,126],
[117,109,107,95,118,105,0,122],
[90,91,85,84,94,85,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,111,102,111,116,96],
[110,0,113,97,116,113,124,116],
[116,98,0,118,115,116,126,107],
[100,114,93,0,106,114,118,95],
[109,95,96,105,0,102,108,88],
[100,98,95,97,109,0,116,101],
[95,87,85,93,103,95,0,89],
[115,95,104,116,123,110,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,93,113,108,106,94,111],
[104,0,104,104,93,93,77,98],
[118,107,0,111,92,71,99,93],
[98,107,100,0,98,108,90,88],
[103,118,119,113,0,101,123,114],
[105,118,140,103,110,0,104,109],
[117,134,112,121,88,107,0,131],
[100,113,118,123,97,102,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,109,99,109,97,103],
[100,0,107,111,94,94,102,112],
[101,104,0,97,95,86,94,93],
[102,100,114,0,89,100,97,106],
[112,117,116,122,0,100,126,104],
[102,117,125,111,111,0,115,112],
[114,109,117,114,85,96,0,112],
[108,99,118,105,107,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,88,105,105,103,104,127],
[95,0,63,122,68,96,78,121],
[123,148,0,130,120,116,101,117],
[106,89,81,0,104,116,126,133],
[106,143,91,107,0,108,106,125],
[108,115,95,95,103,0,90,111],
[107,133,110,85,105,121,0,124],
[84,90,94,78,86,100,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,80,94,97,87,91],
[113,0,110,121,100,110,113,112],
[102,101,0,108,103,102,102,94],
[131,90,103,0,112,105,106,104],
[117,111,108,99,0,97,104,104],
[114,101,109,106,114,0,111,108],
[124,98,109,105,107,100,0,114],
[120,99,117,107,107,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,110,117,80,137,61,105],
[124,0,117,101,120,110,95,78],
[101,94,0,86,88,103,109,106],
[94,110,125,0,101,125,104,128],
[131,91,123,110,0,97,80,83],
[74,101,108,86,114,0,88,93],
[150,116,102,107,131,123,0,133],
[106,133,105,83,128,118,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,134,104,126,121,129],
[104,0,107,106,105,113,103,121],
[116,104,0,121,121,115,117,121],
[77,105,90,0,104,98,84,107],
[107,106,90,107,0,114,103,105],
[85,98,96,113,97,0,108,104],
[90,108,94,127,108,103,0,110],
[82,90,90,104,106,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,97,106,101,95,115],
[114,0,113,99,102,120,110,117],
[107,98,0,108,98,117,100,112],
[114,112,103,0,113,115,106,117],
[105,109,113,98,0,107,99,123],
[110,91,94,96,104,0,102,107],
[116,101,111,105,112,109,0,111],
[96,94,99,94,88,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,96,96,104,97,100],
[110,0,113,97,105,94,100,100],
[106,98,0,95,93,119,104,94],
[115,114,116,0,105,123,102,107],
[115,106,118,106,0,121,105,109],
[107,117,92,88,90,0,102,94],
[114,111,107,109,106,109,0,104],
[111,111,117,104,102,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,95,118,92,105,107],
[101,0,104,99,107,97,104,123],
[101,107,0,93,107,96,113,119],
[116,112,118,0,126,113,123,104],
[93,104,104,85,0,103,94,107],
[119,114,115,98,108,0,109,127],
[106,107,98,88,117,102,0,103],
[104,88,92,107,104,84,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,103,94,121,98,98],
[104,0,105,101,98,109,109,110],
[107,106,0,117,91,118,114,115],
[108,110,94,0,105,123,85,110],
[117,113,120,106,0,120,106,101],
[90,102,93,88,91,0,98,102],
[113,102,97,126,105,113,0,102],
[113,101,96,101,110,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,113,109,82,92,97],
[109,0,88,119,92,114,125,106],
[120,123,0,119,112,99,118,112],
[98,92,92,0,96,100,103,94],
[102,119,99,115,0,107,108,89],
[129,97,112,111,104,0,107,115],
[119,86,93,108,103,104,0,104],
[114,105,99,117,122,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,98,124,132,135,119,119],
[86,0,57,82,101,98,105,93],
[113,154,0,104,137,140,111,107],
[87,129,107,0,118,133,125,96],
[79,110,74,93,0,92,104,71],
[76,113,71,78,119,0,98,83],
[92,106,100,86,107,113,0,86],
[92,118,104,115,140,128,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,90,111,101,99,100],
[103,0,113,96,107,105,100,91],
[109,98,0,96,104,102,116,98],
[121,115,115,0,119,116,114,95],
[100,104,107,92,0,98,99,100],
[110,106,109,95,113,0,103,111],
[112,111,95,97,112,108,0,97],
[111,120,113,116,111,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,106,115,102,116,108],
[96,0,92,103,99,97,106,102],
[104,119,0,105,105,108,108,110],
[105,108,106,0,108,102,99,112],
[96,112,106,103,0,99,112,104],
[109,114,103,109,112,0,118,116],
[95,105,103,112,99,93,0,108],
[103,109,101,99,107,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,99,110,109,111,102,96],
[113,0,102,110,115,111,104,114],
[112,109,0,108,115,106,100,112],
[101,101,103,0,110,97,106,102],
[102,96,96,101,0,99,95,98],
[100,100,105,114,112,0,109,110],
[109,107,111,105,116,102,0,113],
[115,97,99,109,113,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,118,111,104,114,87],
[117,0,109,136,109,105,127,121],
[112,102,0,110,113,107,104,107],
[93,75,101,0,97,101,100,102],
[100,102,98,114,0,88,107,105],
[107,106,104,110,123,0,104,97],
[97,84,107,111,104,107,0,90],
[124,90,104,109,106,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,119,111,103,130,94],
[108,0,91,131,128,88,129,111],
[100,120,0,109,117,107,112,92],
[92,80,102,0,99,93,139,103],
[100,83,94,112,0,82,95,84],
[108,123,104,118,129,0,127,93],
[81,82,99,72,116,84,0,63],
[117,100,119,108,127,118,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,117,106,110,97,99],
[103,0,109,111,99,96,99,106],
[98,102,0,103,97,101,103,105],
[94,100,108,0,107,107,108,108],
[105,112,114,104,0,100,104,98],
[101,115,110,104,111,0,118,108],
[114,112,108,103,107,93,0,111],
[112,105,106,103,113,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,93,98,106,111,102],
[100,0,85,91,83,102,90,81],
[116,126,0,101,109,128,114,108],
[118,120,110,0,104,111,105,105],
[113,128,102,107,0,117,102,94],
[105,109,83,100,94,0,95,97],
[100,121,97,106,109,116,0,102],
[109,130,103,106,117,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,126,96,107,116,102],
[116,0,104,125,108,111,99,117],
[106,107,0,139,130,105,132,100],
[85,86,72,0,96,79,76,89],
[115,103,81,115,0,107,112,96],
[104,100,106,132,104,0,95,101],
[95,112,79,135,99,116,0,90],
[109,94,111,122,115,110,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,100,100,108,98,95,96],
[103,0,114,104,105,107,102,100],
[111,97,0,96,116,103,103,101],
[111,107,115,0,116,97,106,102],
[103,106,95,95,0,101,84,91],
[113,104,108,114,110,0,99,106],
[116,109,108,105,127,112,0,121],
[115,111,110,109,120,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,102,89,100,91,101],
[102,0,106,122,107,107,100,102],
[115,105,0,115,102,103,97,102],
[109,89,96,0,84,90,82,99],
[122,104,109,127,0,105,106,121],
[111,104,108,121,106,0,106,112],
[120,111,114,129,105,105,0,111],
[110,109,109,112,90,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,106,116,107,83,125],
[94,0,115,99,111,99,88,100],
[91,96,0,101,89,95,79,99],
[105,112,110,0,87,88,72,117],
[95,100,122,124,0,96,88,112],
[104,112,116,123,115,0,118,110],
[128,123,132,139,123,93,0,136],
[86,111,112,94,99,101,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,101,113,113,107,110],
[100,0,114,107,101,115,100,104],
[109,97,0,102,116,107,113,92],
[110,104,109,0,104,110,108,94],
[98,110,95,107,0,99,103,99],
[98,96,104,101,112,0,105,93],
[104,111,98,103,108,106,0,103],
[101,107,119,117,112,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,109,122,118,105,118],
[116,0,100,110,120,114,103,109],
[110,111,0,104,125,103,108,104],
[102,101,107,0,119,115,115,115],
[89,91,86,92,0,106,97,103],
[93,97,108,96,105,0,101,101],
[106,108,103,96,114,110,0,106],
[93,102,107,96,108,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,119,100,119,107,110],
[100,0,106,117,108,126,108,111],
[105,105,0,111,90,120,103,114],
[92,94,100,0,93,102,95,99],
[111,103,121,118,0,111,120,115],
[92,85,91,109,100,0,100,99],
[104,103,108,116,91,111,0,109],
[101,100,97,112,96,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,108,104,107,115,100],
[105,0,101,106,99,106,107,97],
[104,110,0,114,108,104,111,107],
[103,105,97,0,100,111,106,103],
[107,112,103,111,0,120,108,102],
[104,105,107,100,91,0,107,95],
[96,104,100,105,103,104,0,98],
[111,114,104,108,109,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,96,111,114,105,107],
[89,0,97,100,100,105,108,108],
[104,114,0,110,104,109,101,111],
[115,111,101,0,102,105,104,108],
[100,111,107,109,0,110,92,111],
[97,106,102,106,101,0,101,114],
[106,103,110,107,119,110,0,105],
[104,103,100,103,100,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,105,81,96,88,91,84],
[122,0,112,92,103,99,98,104],
[106,99,0,97,98,80,99,101],
[130,119,114,0,116,97,123,123],
[115,108,113,95,0,97,112,118],
[123,112,131,114,114,0,114,102],
[120,113,112,88,99,97,0,101],
[127,107,110,88,93,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,102,127,115,102,132,134],
[77,0,89,103,89,111,105,94],
[109,122,0,94,118,106,141,133],
[84,108,117,0,109,95,129,110],
[96,122,93,102,0,110,120,116],
[109,100,105,116,101,0,138,132],
[79,106,70,82,91,73,0,113],
[77,117,78,101,95,79,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,103,97,100,100,113],
[101,0,105,112,102,101,105,115],
[101,106,0,100,100,91,94,114],
[108,99,111,0,107,110,109,124],
[114,109,111,104,0,111,105,122],
[111,110,120,101,100,0,120,123],
[111,106,117,102,106,91,0,117],
[98,96,97,87,89,88,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,109,114,105,101,102],
[100,0,107,91,102,107,107,100],
[110,104,0,95,108,97,96,104],
[102,120,116,0,108,108,116,107],
[97,109,103,103,0,101,100,103],
[106,104,114,103,110,0,111,104],
[110,104,115,95,111,100,0,109],
[109,111,107,104,108,107,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,93,116,119,98,115],
[109,0,108,101,95,81,94,105],
[102,103,0,108,114,101,99,111],
[118,110,103,0,128,98,118,109],
[95,116,97,83,0,81,93,102],
[92,130,110,113,130,0,102,108],
[113,117,112,93,118,109,0,116],
[96,106,100,102,109,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,111,118,104,119,121,113],
[113,0,103,113,111,119,114,132],
[100,108,0,101,100,125,122,134],
[93,98,110,0,120,123,119,125],
[107,100,111,91,0,123,128,129],
[92,92,86,88,88,0,112,116],
[90,97,89,92,83,99,0,125],
[98,79,77,86,82,95,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,118,118,123,115,127,115],
[113,0,116,120,107,101,120,102],
[93,95,0,107,125,96,120,100],
[93,91,104,0,111,101,101,101],
[88,104,86,100,0,91,123,96],
[96,110,115,110,120,0,139,107],
[84,91,91,110,88,72,0,88],
[96,109,111,110,115,104,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,111,96,104,108,107],
[100,0,102,105,113,92,103,107],
[108,109,0,114,102,111,106,107],
[100,106,97,0,96,101,109,106],
[115,98,109,115,0,109,120,115],
[107,119,100,110,102,0,121,124],
[103,108,105,102,91,90,0,119],
[104,104,104,105,96,87,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,115,108,128,109,133],
[106,0,119,106,110,119,109,105],
[97,92,0,102,108,108,97,92],
[96,105,109,0,103,116,98,98],
[103,101,103,108,0,118,97,99],
[83,92,103,95,93,0,86,93],
[102,102,114,113,114,125,0,116],
[78,106,119,113,112,118,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,149,103,108,150,105,148],
[124,0,104,124,84,84,102,189],
[62,107,0,83,87,147,103,170],
[108,87,128,0,87,150,125,191],
[103,127,124,124,0,147,166,169],
[61,127,64,61,64,0,81,168],
[106,109,108,86,45,130,0,171],
[63,22,41,20,42,43,40,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,99,108,95,104,102],
[88,0,97,92,90,87,88,89],
[101,114,0,96,105,89,100,97],
[112,119,115,0,116,98,101,98],
[103,121,106,95,0,107,98,102],
[116,124,122,113,104,0,114,117],
[107,123,111,110,113,97,0,103],
[109,122,114,113,109,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,122,117,119,103,112,110],
[113,0,121,112,136,101,114,119],
[89,90,0,108,120,91,113,118],
[94,99,103,0,126,120,85,110],
[92,75,91,85,0,101,85,91],
[108,110,120,91,110,0,105,106],
[99,97,98,126,126,106,0,113],
[101,92,93,101,120,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,110,99,114,111,114,113],
[94,0,93,97,108,84,98,95],
[101,118,0,103,115,105,117,106],
[112,114,108,0,115,97,111,115],
[97,103,96,96,0,96,95,94],
[100,127,106,114,115,0,110,100],
[97,113,94,100,116,101,0,119],
[98,116,105,96,117,111,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,105,100,124,90,106,127],
[85,0,71,119,125,115,80,117],
[106,140,0,135,126,135,100,124],
[111,92,76,0,121,89,72,127],
[87,86,85,90,0,93,69,95],
[121,96,76,122,118,0,96,121],
[105,131,111,139,142,115,0,123],
[84,94,87,84,116,90,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,118,106,109,97,93,116],
[110,0,115,99,95,97,102,128],
[93,96,0,104,91,87,93,97],
[105,112,107,0,108,116,112,123],
[102,116,120,103,0,101,108,113],
[114,114,124,95,110,0,92,135],
[118,109,118,99,103,119,0,129],
[95,83,114,88,98,76,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,97,111,118,112,114],
[110,0,122,95,100,131,110,95],
[104,89,0,101,89,99,96,94],
[114,116,110,0,103,111,109,110],
[100,111,122,108,0,100,102,96],
[93,80,112,100,111,0,87,93],
[99,101,115,102,109,124,0,98],
[97,116,117,101,115,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,97,89,103,108,106],
[106,0,101,106,97,103,113,110],
[109,110,0,89,101,101,101,104],
[114,105,122,0,108,109,115,108],
[122,114,110,103,0,112,111,111],
[108,108,110,102,99,0,103,109],
[103,98,110,96,100,108,0,102],
[105,101,107,103,100,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,90,107,90,88,92],
[92,0,92,91,107,106,61,93],
[106,119,0,90,93,89,103,109],
[121,120,121,0,123,103,87,124],
[104,104,118,88,0,103,102,153],
[121,105,122,108,108,0,166,93],
[123,150,108,124,109,45,0,109],
[119,118,102,87,58,118,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,105,116,97,127,132],
[113,0,125,112,118,101,129,118],
[94,86,0,101,97,99,101,116],
[106,99,110,0,124,97,115,119],
[95,93,114,87,0,105,109,101],
[114,110,112,114,106,0,110,101],
[84,82,110,96,102,101,0,111],
[79,93,95,92,110,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,99,106,113,108,101],
[99,0,107,104,101,104,107,112],
[103,104,0,102,108,115,114,97],
[112,107,109,0,121,108,112,105],
[105,110,103,90,0,103,107,104],
[98,107,96,103,108,0,105,108],
[103,104,97,99,104,106,0,106],
[110,99,114,106,107,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,127,94,107,126,105,125],
[83,0,116,65,68,94,88,95],
[84,95,0,102,94,102,115,122],
[117,146,109,0,138,128,88,136],
[104,143,117,73,0,114,116,144],
[85,117,109,83,97,0,79,105],
[106,123,96,123,95,132,0,141],
[86,116,89,75,67,106,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,97,91,88,97,103],
[98,0,98,101,102,93,98,95],
[100,113,0,100,103,101,96,98],
[114,110,111,0,113,116,102,102],
[120,109,108,98,0,99,114,104],
[123,118,110,95,112,0,107,110],
[114,113,115,109,97,104,0,109],
[108,116,113,109,107,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,90,115,85,120,133],
[96,0,86,100,89,101,83,110],
[100,125,0,101,124,110,109,141],
[121,111,110,0,105,68,116,122],
[96,122,87,106,0,98,115,125],
[126,110,101,143,113,0,128,139],
[91,128,102,95,96,83,0,117],
[78,101,70,89,86,72,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,117,95,106,112,107],
[113,0,111,118,113,102,118,115],
[109,100,0,123,109,109,109,116],
[94,93,88,0,92,93,80,93],
[116,98,102,119,0,101,107,114],
[105,109,102,118,110,0,110,108],
[99,93,102,131,104,101,0,115],
[104,96,95,118,97,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,0,127,84,42,42,85],
[127,0,84,169,169,84,84,127],
[211,127,0,127,127,84,126,127],
[84,42,84,0,84,84,42,85],
[127,42,84,127,0,0,84,127],
[169,127,127,127,211,0,84,127],
[169,127,85,169,127,127,0,127],
[126,84,84,126,84,84,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,118,92,82,95,99],
[106,0,105,106,102,84,105,96],
[108,106,0,107,108,88,111,113],
[93,105,104,0,99,91,111,97],
[119,109,103,112,0,107,112,106],
[129,127,123,120,104,0,119,121],
[116,106,100,100,99,92,0,108],
[112,115,98,114,105,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,134,123,91,102,121,83],
[121,0,132,139,162,101,113,101],
[77,79,0,98,92,87,106,118],
[88,72,113,0,98,73,114,79],
[120,49,119,113,0,61,87,57],
[109,110,124,138,150,0,137,105],
[90,98,105,97,124,74,0,88],
[128,110,93,132,154,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,99,102,108,95,101,95],
[94,0,97,92,91,91,100,98],
[112,114,0,117,113,104,115,102],
[109,119,94,0,102,104,129,102],
[103,120,98,109,0,122,111,118],
[116,120,107,107,89,0,113,98],
[110,111,96,82,100,98,0,95],
[116,113,109,109,93,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,116,109,117,116,117],
[96,0,88,100,101,102,97,98],
[107,123,0,109,105,114,104,115],
[95,111,102,0,106,117,107,111],
[102,110,106,105,0,104,105,112],
[94,109,97,94,107,0,102,104],
[95,114,107,104,106,109,0,111],
[94,113,96,100,99,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,108,101,105,109,115],
[102,0,98,117,95,107,84,117],
[114,113,0,120,111,109,101,112],
[103,94,91,0,102,108,96,112],
[110,116,100,109,0,116,97,125],
[106,104,102,103,95,0,88,116],
[102,127,110,115,114,123,0,123],
[96,94,99,99,86,95,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,101,93,100,98,94],
[108,0,112,103,108,118,122,109],
[107,99,0,116,103,110,119,104],
[110,108,95,0,98,104,102,93],
[118,103,108,113,0,115,129,105],
[111,93,101,107,96,0,109,98],
[113,89,92,109,82,102,0,104],
[117,102,107,118,106,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,107,80,83,100,89],
[113,0,106,107,87,96,101,94],
[115,105,0,111,99,109,110,103],
[104,104,100,0,92,104,91,103],
[131,124,112,119,0,111,103,123],
[128,115,102,107,100,0,109,108],
[111,110,101,120,108,102,0,101],
[122,117,108,108,88,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,107,111,115,106,112],
[99,0,100,99,109,110,119,105],
[110,111,0,105,109,112,113,120],
[104,112,106,0,111,108,96,107],
[100,102,102,100,0,103,98,107],
[96,101,99,103,108,0,112,106],
[105,92,98,115,113,99,0,113],
[99,106,91,104,104,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,87,101,90,96,106],
[119,0,106,100,111,104,125,118],
[118,105,0,99,97,108,119,111],
[124,111,112,0,104,109,114,112],
[110,100,114,107,0,110,108,129],
[121,107,103,102,101,0,106,109],
[115,86,92,97,103,105,0,107],
[105,93,100,99,82,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,107,110,99,107,105],
[109,0,133,129,120,96,127,121],
[93,78,0,104,108,90,105,104],
[104,82,107,0,105,102,110,98],
[101,91,103,106,0,92,103,102],
[112,115,121,109,119,0,123,105],
[104,84,106,101,108,88,0,95],
[106,90,107,113,109,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,104,102,117,94,98],
[111,0,113,111,107,140,99,118],
[110,98,0,108,105,122,104,117],
[107,100,103,0,103,113,113,117],
[109,104,106,108,0,124,109,118],
[94,71,89,98,87,0,80,99],
[117,112,107,98,102,131,0,118],
[113,93,94,94,93,112,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,165,135,136,120,120,89],
[92,0,124,110,140,156,94,123],
[46,87,0,80,124,93,62,91],
[76,101,131,0,136,122,90,105],
[75,71,87,75,0,106,89,107],
[91,55,118,89,105,0,90,75],
[91,117,149,121,122,121,0,104],
[122,88,120,106,104,136,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,109,107,105,85,94,74],
[124,0,120,122,115,110,98,116],
[102,91,0,93,102,96,98,98],
[104,89,118,0,99,114,93,111],
[106,96,109,112,0,107,89,115],
[126,101,115,97,104,0,91,114],
[117,113,113,118,122,120,0,97],
[137,95,113,100,96,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,107,110,93,103,95,93],
[122,0,114,111,113,125,118,105],
[104,97,0,110,99,102,82,113],
[101,100,101,0,105,101,90,92],
[118,98,112,106,0,96,88,78],
[108,86,109,110,115,0,81,83],
[116,93,129,121,123,130,0,106],
[118,106,98,119,133,128,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,127,112,105,106,106,86],
[88,0,93,89,88,84,72,92],
[84,118,0,95,99,87,99,100],
[99,122,116,0,98,94,102,87],
[106,123,112,113,0,89,119,106],
[105,127,124,117,122,0,112,114],
[105,139,112,109,92,99,0,107],
[125,119,111,124,105,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,134,103,79,106,133],
[107,0,81,81,77,132,157,132],
[104,130,0,105,78,80,156,104],
[77,130,106,0,130,80,102,130],
[108,134,133,81,0,82,107,107],
[132,79,131,131,129,0,182,130],
[105,54,55,109,104,29,0,105],
[78,79,107,81,104,81,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,124,115,123,121,109],
[112,0,107,110,107,109,90,123],
[107,104,0,119,127,108,89,117],
[87,101,92,0,89,92,88,92],
[96,104,84,122,0,105,96,109],
[88,102,103,119,106,0,98,101],
[90,121,122,123,115,113,0,97],
[102,88,94,119,102,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,86,78,94,98,73,93],
[130,0,119,94,91,131,98,102],
[125,92,0,85,107,112,82,112],
[133,117,126,0,99,128,130,137],
[117,120,104,112,0,104,95,99],
[113,80,99,83,107,0,93,84],
[138,113,129,81,116,118,0,112],
[118,109,99,74,112,127,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,118,94,95,111,92],
[92,0,91,104,95,94,107,87],
[105,120,0,104,116,112,113,98],
[93,107,107,0,102,105,104,111],
[117,116,95,109,0,109,101,103],
[116,117,99,106,102,0,103,120],
[100,104,98,107,110,108,0,102],
[119,124,113,100,108,91,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,85,93,107,113,104],
[97,0,97,89,109,78,108,92],
[116,114,0,121,84,92,106,74],
[126,122,90,0,120,100,113,104],
[118,102,127,91,0,92,116,98],
[104,133,119,111,119,0,124,119],
[98,103,105,98,95,87,0,98],
[107,119,137,107,113,92,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,122,109,121,104,111],
[95,0,89,113,87,114,111,100],
[102,122,0,123,112,116,105,101],
[89,98,88,0,90,92,86,92],
[102,124,99,121,0,123,99,99],
[90,97,95,119,88,0,93,88],
[107,100,106,125,112,118,0,104],
[100,111,110,119,112,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,124,99,132,130,131,118],
[90,0,76,108,116,81,106,108],
[87,135,0,120,140,110,118,120],
[112,103,91,0,148,107,105,141],
[79,95,71,63,0,61,96,103],
[81,130,101,104,150,0,124,125],
[80,105,93,106,115,87,0,118],
[93,103,91,70,108,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,101,83,85,102,73],
[94,0,102,120,91,91,112,93],
[113,109,0,82,120,76,92,75],
[110,91,129,0,88,99,140,76],
[128,120,91,123,0,106,128,92],
[126,120,135,112,105,0,144,114],
[109,99,119,71,83,67,0,95],
[138,118,136,135,119,97,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,107,92,103,94,97],
[118,0,104,114,104,107,112,115],
[119,107,0,103,107,107,98,105],
[104,97,108,0,95,105,98,105],
[119,107,104,116,0,109,104,111],
[108,104,104,106,102,0,108,105],
[117,99,113,113,107,103,0,106],
[114,96,106,106,100,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,119,125,103,110,102],
[109,0,106,110,125,119,97,100],
[107,105,0,88,105,102,72,102],
[92,101,123,0,117,105,84,114],
[86,86,106,94,0,82,103,111],
[108,92,109,106,129,0,94,122],
[101,114,139,127,108,117,0,98],
[109,111,109,97,100,89,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,118,104,102,110,106],
[95,0,100,108,92,98,99,109],
[108,111,0,108,109,98,119,101],
[93,103,103,0,93,105,110,109],
[107,119,102,118,0,112,117,110],
[109,113,113,106,99,0,120,115],
[101,112,92,101,94,91,0,94],
[105,102,110,102,101,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,128,108,100,115,116,116],
[111,0,117,109,102,114,96,100],
[83,94,0,95,93,98,85,94],
[103,102,116,0,103,108,98,111],
[111,109,118,108,0,113,104,98],
[96,97,113,103,98,0,96,107],
[95,115,126,113,107,115,0,116],
[95,111,117,100,113,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,97,107,102,90,96],
[112,0,100,108,109,105,95,100],
[115,111,0,111,113,110,106,100],
[114,103,100,0,101,115,100,97],
[104,102,98,110,0,108,102,107],
[109,106,101,96,103,0,83,102],
[121,116,105,111,109,128,0,93],
[115,111,111,114,104,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,105,102,98,89,106,124],
[118,0,122,115,105,121,125,129],
[106,89,0,104,105,115,117,123],
[109,96,107,0,101,97,113,112],
[113,106,106,110,0,103,117,124],
[122,90,96,114,108,0,108,115],
[105,86,94,98,94,103,0,115],
[87,82,88,99,87,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,105,93,116,105,96],
[110,0,118,103,113,106,106,107],
[114,93,0,101,104,109,100,92],
[106,108,110,0,103,107,100,103],
[118,98,107,108,0,106,95,100],
[95,105,102,104,105,0,104,96],
[106,105,111,111,116,107,0,103],
[115,104,119,108,111,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,109,118,85,105,126],
[101,0,109,120,108,98,106,124],
[116,102,0,115,126,110,109,129],
[102,91,96,0,88,81,106,106],
[93,103,85,123,0,102,101,115],
[126,113,101,130,109,0,118,114],
[106,105,102,105,110,93,0,113],
[85,87,82,105,96,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,115,101,99,106,108,113],
[86,0,117,100,90,95,105,94],
[96,94,0,100,92,95,111,103],
[110,111,111,0,104,110,107,103],
[112,121,119,107,0,112,105,110],
[105,116,116,101,99,0,110,99],
[103,106,100,104,106,101,0,105],
[98,117,108,108,101,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,104,107,121,107,115],
[100,0,117,118,113,117,106,110],
[93,94,0,86,94,97,91,100],
[107,93,125,0,107,116,107,113],
[104,98,117,104,0,116,96,113],
[90,94,114,95,95,0,95,109],
[104,105,120,104,115,116,0,110],
[96,101,111,98,98,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,93,116,128,101,79,112],
[74,0,71,97,82,58,69,94],
[118,140,0,116,93,104,91,117],
[95,114,95,0,126,114,89,115],
[83,129,118,85,0,93,71,93],
[110,153,107,97,118,0,116,118],
[132,142,120,122,140,95,0,117],
[99,117,94,96,118,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,94,82,86,97,89,102],
[111,0,103,99,101,120,98,125],
[117,108,0,99,127,119,102,121],
[129,112,112,0,110,131,108,102],
[125,110,84,101,0,120,100,109],
[114,91,92,80,91,0,89,117],
[122,113,109,103,111,122,0,125],
[109,86,90,109,102,94,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,93,109,71,109,99],
[118,0,88,70,98,109,121,107],
[111,123,0,99,99,88,110,128],
[118,141,112,0,87,87,112,90],
[102,113,112,124,0,120,133,122],
[140,102,123,124,91,0,110,122],
[102,90,101,99,78,101,0,90],
[112,104,83,121,89,89,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,87,107,88,98,105],
[116,0,102,93,105,94,100,116],
[111,109,0,99,110,113,112,112],
[124,118,112,0,101,107,112,123],
[104,106,101,110,0,101,116,117],
[123,117,98,104,110,0,117,115],
[113,111,99,99,95,94,0,104],
[106,95,99,88,94,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,107,101,96,111,106],
[99,0,116,114,101,105,106,103],
[91,95,0,101,92,103,101,94],
[104,97,110,0,90,100,105,108],
[110,110,119,121,0,103,122,119],
[115,106,108,111,108,0,109,105],
[100,105,110,106,89,102,0,99],
[105,108,117,103,92,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,93,96,81,97,99],
[127,0,112,110,117,98,94,106],
[116,99,0,116,113,111,113,110],
[118,101,95,0,108,113,113,103],
[115,94,98,103,0,89,90,106],
[130,113,100,98,122,0,111,126],
[114,117,98,98,121,100,0,102],
[112,105,101,108,105,85,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,122,124,100,146,125,99],
[100,0,99,88,122,112,123,73],
[89,112,0,97,89,148,114,125],
[87,123,114,0,112,135,113,99],
[111,89,122,99,0,122,111,99],
[65,99,63,76,89,0,76,62],
[86,88,97,98,100,135,0,86],
[112,138,86,112,112,149,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,103,102,88,105,96],
[116,0,128,124,127,119,104,115],
[103,83,0,101,91,101,95,91],
[108,87,110,0,110,104,98,88],
[109,84,120,101,0,99,109,100],
[123,92,110,107,112,0,99,112],
[106,107,116,113,102,112,0,113],
[115,96,120,123,111,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,93,98,99,99,101],
[112,0,100,109,111,105,105,114],
[115,111,0,101,112,102,104,101],
[118,102,110,0,97,102,107,104],
[113,100,99,114,0,104,102,98],
[112,106,109,109,107,0,104,99],
[112,106,107,104,109,107,0,110],
[110,97,110,107,113,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,107,108,99,121,103],
[119,0,105,113,106,109,109,103],
[107,106,0,113,98,115,117,114],
[104,98,98,0,100,97,102,94],
[103,105,113,111,0,98,101,117],
[112,102,96,114,113,0,110,110],
[90,102,94,109,110,101,0,100],
[108,108,97,117,94,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,127,114,133,126,117,120],
[125,0,121,104,107,104,109,107],
[84,90,0,76,105,107,101,99],
[97,107,135,0,118,123,118,126],
[78,104,106,93,0,96,108,105],
[85,107,104,88,115,0,97,76],
[94,102,110,93,103,114,0,108],
[91,104,112,85,106,135,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,101,111,109,114,114],
[116,0,114,113,116,104,118,117],
[105,97,0,99,110,104,109,112],
[110,98,112,0,108,112,104,103],
[100,95,101,103,0,104,103,106],
[102,107,107,99,107,0,112,111],
[97,93,102,107,108,99,0,100],
[97,94,99,108,105,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,93,103,97,103,113,87],
[121,0,107,115,115,101,124,105],
[118,104,0,117,119,108,116,108],
[108,96,94,0,95,103,115,91],
[114,96,92,116,0,101,108,79],
[108,110,103,108,110,0,115,99],
[98,87,95,96,103,96,0,87],
[124,106,103,120,132,112,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,88,110,117,110,109],
[102,0,116,79,131,118,103,107],
[103,95,0,104,124,115,111,100],
[123,132,107,0,120,124,118,104],
[101,80,87,91,0,108,103,89],
[94,93,96,87,103,0,93,89],
[101,108,100,93,108,118,0,97],
[102,104,111,107,122,122,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,92,95,102,90,94],
[102,0,105,91,83,87,101,84],
[94,106,0,83,90,93,87,95],
[119,120,128,0,103,107,121,101],
[116,128,121,108,0,110,115,104],
[109,124,118,104,101,0,121,107],
[121,110,124,90,96,90,0,111],
[117,127,116,110,107,104,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,77,118,102,118,102,93],
[117,0,124,117,140,100,149,114],
[134,87,0,127,122,104,129,118],
[93,94,84,0,94,93,115,108],
[109,71,89,117,0,93,99,125],
[93,111,107,118,118,0,109,116],
[109,62,82,96,112,102,0,96],
[118,97,93,103,86,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,110,101,100,99,99],
[106,0,110,105,97,100,106,109],
[104,101,0,105,108,101,110,103],
[101,106,106,0,106,108,107,107],
[110,114,103,105,0,104,113,107],
[111,111,110,103,107,0,107,110],
[112,105,101,104,98,104,0,108],
[112,102,108,104,104,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,91,105,108,109,118],
[110,0,99,96,93,121,126,114],
[110,112,0,93,99,99,103,100],
[120,115,118,0,114,104,108,125],
[106,118,112,97,0,113,124,113],
[103,90,112,107,98,0,117,125],
[102,85,108,103,87,94,0,100],
[93,97,111,86,98,86,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,109,106,106,88,111],
[117,0,113,119,112,116,109,105],
[102,98,0,100,103,87,84,101],
[102,92,111,0,107,108,92,113],
[105,99,108,104,0,94,100,105],
[105,95,124,103,117,0,107,108],
[123,102,127,119,111,104,0,114],
[100,106,110,98,106,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,99,94,97,98,93,90],
[132,0,114,96,115,121,120,102],
[112,97,0,116,111,110,98,105],
[117,115,95,0,117,114,110,116],
[114,96,100,94,0,106,98,102],
[113,90,101,97,105,0,86,102],
[118,91,113,101,113,125,0,100],
[121,109,106,95,109,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,101,102,95,104,106],
[108,0,109,105,110,114,96,112],
[109,102,0,98,98,101,102,121],
[110,106,113,0,104,110,107,119],
[109,101,113,107,0,110,106,112],
[116,97,110,101,101,0,107,110],
[107,115,109,104,105,104,0,119],
[105,99,90,92,99,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,90,95,88,93,100,93],
[116,0,103,101,106,103,109,109],
[121,108,0,105,107,116,115,102],
[116,110,106,0,104,109,108,105],
[123,105,104,107,0,106,105,104],
[118,108,95,102,105,0,98,99],
[111,102,96,103,106,113,0,99],
[118,102,109,106,107,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,139,132,120,90,142],
[91,0,51,114,84,73,82,112],
[109,160,0,133,124,102,133,154],
[72,97,78,0,110,88,49,120],
[79,127,87,101,0,71,69,80],
[91,138,109,123,140,0,69,140],
[121,129,78,162,142,142,0,111],
[69,99,57,91,131,71,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,115,112,122,117,93],
[98,0,124,128,120,120,116,112],
[103,87,0,117,107,117,101,114],
[96,83,94,0,115,103,91,100],
[99,91,104,96,0,100,76,96],
[89,91,94,108,111,0,115,121],
[94,95,110,120,135,96,0,116],
[118,99,97,111,115,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,105,85,105,114,91],
[112,0,103,114,94,102,111,95],
[106,108,0,111,96,116,95,101],
[106,97,100,0,97,99,115,100],
[126,117,115,114,0,101,101,99],
[106,109,95,112,110,0,101,99],
[97,100,116,96,110,110,0,110],
[120,116,110,111,112,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,109,100,86,90,107],
[99,0,92,104,79,81,86,101],
[108,119,0,119,112,107,102,117],
[102,107,92,0,86,94,92,101],
[111,132,99,125,0,97,114,124],
[125,130,104,117,114,0,116,128],
[121,125,109,119,97,95,0,127],
[104,110,94,110,87,83,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,128,113,108,112,104,107],
[106,0,117,112,92,105,117,119],
[83,94,0,88,78,99,97,112],
[98,99,123,0,92,99,98,110],
[103,119,133,119,0,110,104,143],
[99,106,112,112,101,0,117,136],
[107,94,114,113,107,94,0,147],
[104,92,99,101,68,75,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,136,113,122,126,100,113],
[101,0,124,124,98,137,75,101],
[75,87,0,110,74,126,97,112],
[98,87,101,0,83,112,60,75],
[89,113,137,128,0,139,111,114],
[85,74,85,99,72,0,73,77],
[111,136,114,151,100,138,0,114],
[98,110,99,136,97,134,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,105,98,103,95,95,98],
[120,0,141,80,94,87,99,113],
[106,70,0,97,95,83,122,101],
[113,131,114,0,111,96,113,114],
[108,117,116,100,0,108,127,107],
[116,124,128,115,103,0,97,108],
[116,112,89,98,84,114,0,113],
[113,98,110,97,104,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,112,102,120,105,107],
[114,0,122,108,105,118,109,113],
[103,89,0,104,103,113,107,103],
[99,103,107,0,110,111,110,104],
[109,106,108,101,0,119,103,106],
[91,93,98,100,92,0,99,91],
[106,102,104,101,108,112,0,110],
[104,98,108,107,105,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,100,108,112,116,81,56],
[131,0,138,124,109,117,95,115],
[111,73,0,93,87,107,89,80],
[103,87,118,0,89,103,90,82],
[99,102,124,122,0,118,96,73],
[95,94,104,108,93,0,86,78],
[130,116,122,121,115,125,0,91],
[155,96,131,129,138,133,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,100,93,91,107,114],
[119,0,97,106,100,110,113,117],
[105,114,0,109,117,113,125,111],
[111,105,102,0,104,103,116,125],
[118,111,94,107,0,107,115,123],
[120,101,98,108,104,0,117,124],
[104,98,86,95,96,94,0,125],
[97,94,100,86,88,87,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,114,113,113,122,105],
[108,0,112,91,96,113,93,87],
[106,99,0,98,99,103,100,98],
[97,120,113,0,121,108,117,100],
[98,115,112,90,0,108,112,100],
[98,98,108,103,103,0,111,98],
[89,118,111,94,99,100,0,109],
[106,124,113,111,111,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,114,95,106,112,100],
[105,0,100,110,115,99,116,96],
[102,111,0,102,96,103,110,88],
[97,101,109,0,85,109,121,91],
[116,96,115,126,0,125,113,102],
[105,112,108,102,86,0,100,106],
[99,95,101,90,98,111,0,91],
[111,115,123,120,109,105,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,94,105,106,107,114],
[98,0,118,97,106,103,108,118],
[98,93,0,100,88,103,103,105],
[117,114,111,0,109,101,102,122],
[106,105,123,102,0,113,107,120],
[105,108,108,110,98,0,104,117],
[104,103,108,109,104,107,0,117],
[97,93,106,89,91,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,83,86,95,88,78,80],
[130,0,112,91,118,95,102,105],
[128,99,0,101,123,93,81,102],
[125,120,110,0,125,105,119,117],
[116,93,88,86,0,101,93,108],
[123,116,118,106,110,0,115,94],
[133,109,130,92,118,96,0,96],
[131,106,109,94,103,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,101,100,94,102,101,97],
[110,0,97,100,96,92,103,101],
[110,114,0,107,104,99,103,108],
[111,111,104,0,106,115,114,111],
[117,115,107,105,0,114,111,103],
[109,119,112,96,97,0,104,108],
[110,108,108,97,100,107,0,107],
[114,110,103,100,108,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,102,93,110,105,106],
[105,0,102,112,105,114,111,110],
[107,109,0,100,105,106,104,106],
[109,99,111,0,107,112,113,117],
[118,106,106,104,0,107,106,109],
[101,97,105,99,104,0,100,119],
[106,100,107,98,105,111,0,111],
[105,101,105,94,102,92,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,93,97,104,89,92,97],
[120,0,108,125,105,114,102,120],
[118,103,0,112,112,110,109,111],
[114,86,99,0,109,89,95,107],
[107,106,99,102,0,97,100,111],
[122,97,101,122,114,0,115,119],
[119,109,102,116,111,96,0,107],
[114,91,100,104,100,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,112,122,103,136,109,114],
[92,0,105,98,80,100,78,95],
[99,106,0,99,109,128,84,129],
[89,113,112,0,110,114,81,112],
[108,131,102,101,0,134,90,143],
[75,111,83,97,77,0,64,94],
[102,133,127,130,121,147,0,124],
[97,116,82,99,68,117,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,124,115,116,105,112],
[98,0,107,115,108,110,98,108],
[102,104,0,110,114,109,105,121],
[87,96,101,0,99,92,105,103],
[96,103,97,112,0,104,96,111],
[95,101,102,119,107,0,107,121],
[106,113,106,106,115,104,0,117],
[99,103,90,108,100,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,100,98,101,97,98],
[116,0,114,103,107,107,112,109],
[112,97,0,95,110,109,100,111],
[111,108,116,0,112,97,121,111],
[113,104,101,99,0,110,106,101],
[110,104,102,114,101,0,111,107],
[114,99,111,90,105,100,0,96],
[113,102,100,100,110,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,109,104,97,97,110,101],
[120,0,113,109,102,119,114,114],
[102,98,0,104,105,109,109,116],
[107,102,107,0,116,111,121,115],
[114,109,106,95,0,109,107,115],
[114,92,102,100,102,0,112,113],
[101,97,102,90,104,99,0,105],
[110,97,95,96,96,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,101,106,112,114,105],
[94,0,104,100,106,87,103,109],
[97,107,0,97,103,97,99,92],
[110,111,114,0,106,105,109,111],
[105,105,108,105,0,94,105,120],
[99,124,114,106,117,0,112,132],
[97,108,112,102,106,99,0,110],
[106,102,119,100,91,79,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,86,112,91,83,96,94],
[118,0,113,130,93,100,107,117],
[125,98,0,116,108,113,115,113],
[99,81,95,0,84,88,87,104],
[120,118,103,127,0,113,117,132],
[128,111,98,123,98,0,114,115],
[115,104,96,124,94,97,0,101],
[117,94,98,107,79,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,111,110,111,106,106],
[114,0,102,114,103,106,106,108],
[120,109,0,111,113,115,104,111],
[100,97,100,0,99,105,85,108],
[101,108,98,112,0,110,100,112],
[100,105,96,106,101,0,101,109],
[105,105,107,126,111,110,0,117],
[105,103,100,103,99,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,133,129,111,112,128],
[119,0,101,107,122,92,95,124],
[101,110,0,118,119,121,94,114],
[78,104,93,0,124,96,82,116],
[82,89,92,87,0,96,77,98],
[100,119,90,115,115,0,82,126],
[99,116,117,129,134,129,0,127],
[83,87,97,95,113,85,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,122,107,133,114,97],
[96,0,105,107,98,109,95,75],
[94,106,0,95,90,109,96,99],
[89,104,116,0,70,121,89,75],
[104,113,121,141,0,140,113,98],
[78,102,102,90,71,0,87,82],
[97,116,115,122,98,124,0,110],
[114,136,112,136,113,129,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,76,82,100,115,106,109],
[126,0,104,93,108,120,120,118],
[135,107,0,107,93,99,136,128],
[129,118,104,0,103,122,126,121],
[111,103,118,108,0,139,115,113],
[96,91,112,89,72,0,94,101],
[105,91,75,85,96,117,0,86],
[102,93,83,90,98,110,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,112,97,99,106,114],
[112,0,106,117,104,107,105,98],
[107,105,0,119,112,105,117,117],
[99,94,92,0,97,92,100,106],
[114,107,99,114,0,100,110,109],
[112,104,106,119,111,0,111,113],
[105,106,94,111,101,100,0,107],
[97,113,94,105,102,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,77,135,89,104,97,84],
[134,0,103,135,123,120,118,126],
[134,108,0,120,103,121,116,118],
[76,76,91,0,88,87,88,80],
[122,88,108,123,0,115,116,118],
[107,91,90,124,96,0,101,99],
[114,93,95,123,95,110,0,91],
[127,85,93,131,93,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,106,110,100,101,107],
[104,0,106,96,108,104,107,117],
[115,105,0,103,113,107,99,114],
[105,115,108,0,110,103,98,116],
[101,103,98,101,0,104,100,106],
[111,107,104,108,107,0,97,108],
[110,104,112,113,111,114,0,109],
[104,94,97,95,105,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,124,104,117,108,119],
[107,0,101,115,114,112,103,113],
[107,110,0,108,107,105,106,96],
[87,96,103,0,97,93,95,91],
[107,97,104,114,0,123,104,101],
[94,99,106,118,88,0,108,103],
[103,108,105,116,107,103,0,110],
[92,98,115,120,110,108,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,119,130,114,104,115],
[87,0,95,86,86,102,102,90],
[96,116,0,96,117,102,110,115],
[92,125,115,0,118,99,109,102],
[81,125,94,93,0,88,96,97],
[97,109,109,112,123,0,104,101],
[107,109,101,102,115,107,0,104],
[96,121,96,109,114,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,105,112,108,105,108],
[119,0,101,92,116,112,105,113],
[101,110,0,113,119,122,116,109],
[106,119,98,0,128,115,106,116],
[99,95,92,83,0,99,90,97],
[103,99,89,96,112,0,97,110],
[106,106,95,105,121,114,0,107],
[103,98,102,95,114,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,103,107,99,99,85],
[115,0,110,114,112,94,112,112],
[112,101,0,112,106,104,101,88],
[108,97,99,0,99,98,101,93],
[104,99,105,112,0,98,101,92],
[112,117,107,113,113,0,101,106],
[112,99,110,110,110,110,0,96],
[126,99,123,118,119,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,100,94,116,104,114],
[120,0,111,102,86,111,114,95],
[110,100,0,109,112,131,110,100],
[111,109,102,0,117,103,120,100],
[117,125,99,94,0,126,139,118],
[95,100,80,108,85,0,97,85],
[107,97,101,91,72,114,0,103],
[97,116,111,111,93,126,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,122,123,129,100,127,115],
[113,0,139,136,139,87,133,108],
[89,72,0,117,110,89,101,88],
[88,75,94,0,103,74,98,85],
[82,72,101,108,0,74,101,87],
[111,124,122,137,137,0,126,75],
[84,78,110,113,110,85,0,64],
[96,103,123,126,124,136,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,101,125,119,143,133,112],
[72,0,106,106,107,127,119,92],
[110,105,0,116,142,120,124,91],
[86,105,95,0,112,121,79,102],
[92,104,69,99,0,108,91,91],
[68,84,91,90,103,0,97,78],
[78,92,87,132,120,114,0,103],
[99,119,120,109,120,133,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,87,93,145,85,105,100],
[91,0,99,101,116,95,113,110],
[124,112,0,108,114,103,123,116],
[118,110,103,0,104,128,127,120],
[66,95,97,107,0,101,101,80],
[126,116,108,83,110,0,111,75],
[106,98,88,84,110,100,0,100],
[111,101,95,91,131,136,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,95,102,116,104,129],
[112,0,107,114,105,113,108,124],
[108,104,0,128,105,107,113,127],
[116,97,83,0,98,114,103,121],
[109,106,106,113,0,110,104,122],
[95,98,104,97,101,0,104,116],
[107,103,98,108,107,107,0,113],
[82,87,84,90,89,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,107,118,124,137,143],
[107,0,121,118,124,98,155,148],
[106,90,0,136,124,117,121,131],
[104,93,75,0,128,104,121,153],
[93,87,87,83,0,92,114,122],
[87,113,94,107,119,0,143,135],
[74,56,90,90,97,68,0,117],
[68,63,80,58,89,76,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,92,117,131,125,119,116],
[86,0,89,90,105,118,100,108],
[119,122,0,110,119,121,104,125],
[94,121,101,0,107,110,101,119],
[80,106,92,104,0,87,86,100],
[86,93,90,101,124,0,97,104],
[92,111,107,110,125,114,0,114],
[95,103,86,92,111,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,107,108,93,107,92],
[95,0,96,108,99,74,80,102],
[113,115,0,133,98,104,114,96],
[104,103,78,0,76,91,88,102],
[103,112,113,135,0,103,112,109],
[118,137,107,120,108,0,105,113],
[104,131,97,123,99,106,0,110],
[119,109,115,109,102,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,98,116,105,121,106],
[92,0,97,97,98,86,107,95],
[105,114,0,101,115,101,109,104],
[113,114,110,0,120,85,110,100],
[95,113,96,91,0,97,100,91],
[106,125,110,126,114,0,122,100],
[90,104,102,101,111,89,0,97],
[105,116,107,111,120,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,103,110,110,101,96],
[112,0,102,107,118,106,99,91],
[94,109,0,106,107,127,97,103],
[108,104,105,0,118,113,115,111],
[101,93,104,93,0,118,114,88],
[101,105,84,98,93,0,93,96],
[110,112,114,96,97,118,0,102],
[115,120,108,100,123,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,103,104,97,97,109],
[109,0,95,102,110,107,116,117],
[111,116,0,103,106,94,115,120],
[108,109,108,0,113,108,104,112],
[107,101,105,98,0,105,113,127],
[114,104,117,103,106,0,113,119],
[114,95,96,107,98,98,0,115],
[102,94,91,99,84,92,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,108,122,103,100,104],
[101,0,95,114,116,106,102,111],
[112,116,0,106,111,99,100,97],
[103,97,105,0,120,110,105,105],
[89,95,100,91,0,95,96,93],
[108,105,112,101,116,0,101,95],
[111,109,111,106,115,110,0,101],
[107,100,114,106,118,116,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,75,85,93,83,91,94],
[134,0,85,102,125,117,98,119],
[136,126,0,120,116,115,105,115],
[126,109,91,0,120,108,109,124],
[118,86,95,91,0,94,106,111],
[128,94,96,103,117,0,99,109],
[120,113,106,102,105,112,0,121],
[117,92,96,87,100,102,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,110,103,112,102,85],
[102,0,89,94,121,117,102,95],
[115,122,0,110,121,118,112,105],
[101,117,101,0,96,127,104,98],
[108,90,90,115,0,112,104,97],
[99,94,93,84,99,0,98,97],
[109,109,99,107,107,113,0,108],
[126,116,106,113,114,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,104,127,101,106,117],
[104,0,97,115,113,110,99,113],
[94,114,0,105,114,90,87,109],
[107,96,106,0,126,106,90,109],
[84,98,97,85,0,90,92,99],
[110,101,121,105,121,0,108,109],
[105,112,124,121,119,103,0,119],
[94,98,102,102,112,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,99,100,80,88,89],
[103,0,103,111,107,104,96,116],
[105,108,0,97,109,80,92,98],
[112,100,114,0,99,100,102,108],
[111,104,102,112,0,105,107,119],
[131,107,131,111,106,0,95,114],
[123,115,119,109,104,116,0,107],
[122,95,113,103,92,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,108,110,108,109,97],
[102,0,122,107,118,103,117,105],
[108,89,0,99,102,90,106,81],
[103,104,112,0,119,91,93,98],
[101,93,109,92,0,103,95,97],
[103,108,121,120,108,0,128,101],
[102,94,105,118,116,83,0,108],
[114,106,130,113,114,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,107,102,108,97,114],
[119,0,114,106,129,99,117,133],
[97,97,0,84,95,92,95,110],
[104,105,127,0,112,103,106,131],
[109,82,116,99,0,100,100,119],
[103,112,119,108,111,0,95,115],
[114,94,116,105,111,116,0,109],
[97,78,101,80,92,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,105,97,111,121,111],
[102,0,104,97,99,119,112,114],
[111,107,0,106,105,112,122,112],
[106,114,105,0,110,115,115,102],
[114,112,106,101,0,110,112,111],
[100,92,99,96,101,0,105,115],
[90,99,89,96,99,106,0,106],
[100,97,99,109,100,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,110,116,110,105,117],
[102,0,115,106,113,111,118,118],
[89,96,0,93,108,90,97,102],
[101,105,118,0,111,103,106,113],
[95,98,103,100,0,96,99,97],
[101,100,121,108,115,0,111,107],
[106,93,114,105,112,100,0,105],
[94,93,109,98,114,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,102,54,91,70,91,71],
[131,0,133,83,131,128,128,111],
[109,78,0,101,120,117,108,91],
[157,128,110,0,139,121,111,88],
[120,80,91,72,0,103,93,118],
[141,83,94,90,108,0,119,98],
[120,83,103,100,118,92,0,110],
[140,100,120,123,93,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,211,108,142,136,102,177],
[69,0,105,74,108,102,69,143],
[0,106,0,74,72,70,0,74],
[103,137,137,0,143,100,103,107],
[69,103,139,68,0,136,103,143],
[75,109,141,111,75,0,109,75],
[109,142,211,108,108,102,0,145],
[34,68,137,104,68,136,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,100,113,110,122,94],
[118,0,108,91,145,110,106,126],
[118,103,0,90,131,103,100,110],
[111,120,121,0,143,96,111,128],
[98,66,80,68,0,77,81,89],
[101,101,108,115,134,0,128,122],
[89,105,111,100,130,83,0,111],
[117,85,101,83,122,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,129,97,86,99,109],
[110,0,119,138,118,69,108,126],
[114,92,0,123,63,84,112,110],
[82,73,88,0,48,59,79,110],
[114,93,148,163,0,110,121,133],
[125,142,127,152,101,0,142,123],
[112,103,99,132,90,69,0,112],
[102,85,101,101,78,88,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,119,100,106,111,104],
[104,0,107,113,107,110,108,111],
[105,104,0,110,95,104,105,95],
[92,98,101,0,97,97,105,97],
[111,104,116,114,0,113,104,116],
[105,101,107,114,98,0,95,104],
[100,103,106,106,107,116,0,110],
[107,100,116,114,95,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,138,96,97,109,113,124],
[74,0,72,69,69,55,71,71],
[73,139,0,54,69,39,58,41],
[115,142,157,0,100,99,142,98],
[114,142,142,111,0,98,129,113],
[102,156,172,112,113,0,144,144],
[98,140,153,69,82,67,0,83],
[87,140,170,113,98,67,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,103,103,114,121,104],
[102,0,101,106,109,100,105,98],
[99,110,0,105,107,108,108,109],
[108,105,106,0,107,105,98,104],
[108,102,104,104,0,105,120,107],
[97,111,103,106,106,0,109,115],
[90,106,103,113,91,102,0,112],
[107,113,102,107,104,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,100,95,88,96,104],
[118,0,110,123,116,98,121,116],
[104,101,0,109,107,90,91,114],
[111,88,102,0,100,90,101,104],
[116,95,104,111,0,96,101,98],
[123,113,121,121,115,0,95,111],
[115,90,120,110,110,116,0,99],
[107,95,97,107,113,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,112,118,115,105,123,112],
[90,0,101,108,103,107,107,86],
[99,110,0,105,88,92,105,82],
[93,103,106,0,90,91,111,93],
[96,108,123,121,0,105,110,103],
[106,104,119,120,106,0,119,100],
[88,104,106,100,101,92,0,98],
[99,125,129,118,108,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,105,89,97,88,80],
[100,0,95,109,91,89,100,97],
[117,116,0,98,101,107,87,107],
[106,102,113,0,96,85,96,108],
[122,120,110,115,0,99,99,109],
[114,122,104,126,112,0,112,103],
[123,111,124,115,112,99,0,115],
[131,114,104,103,102,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,112,103,106,113,104],
[111,0,112,100,108,96,103,106],
[106,99,0,106,111,102,108,116],
[99,111,105,0,116,112,115,112],
[108,103,100,95,0,97,109,106],
[105,115,109,99,114,0,117,109],
[98,108,103,96,102,94,0,100],
[107,105,95,99,105,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,122,117,112,123,104],
[102,0,118,103,106,99,120,115],
[89,93,0,107,102,106,100,90],
[89,108,104,0,100,99,101,103],
[94,105,109,111,0,100,95,95],
[99,112,105,112,111,0,125,113],
[88,91,111,110,116,86,0,101],
[107,96,121,108,116,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,111,88,110,95,113,111],
[90,0,110,96,108,90,103,112],
[100,101,0,106,109,107,100,92],
[123,115,105,0,111,114,134,118],
[101,103,102,100,0,104,108,105],
[116,121,104,97,107,0,105,125],
[98,108,111,77,103,106,0,91],
[100,99,119,93,106,86,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,100,112,120,108,112],
[96,0,113,108,105,116,103,94],
[104,98,0,115,112,112,108,115],
[111,103,96,0,113,100,107,98],
[99,106,99,98,0,118,99,113],
[91,95,99,111,93,0,112,93],
[103,108,103,104,112,99,0,107],
[99,117,96,113,98,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,109,107,109,112,106],
[108,0,111,103,112,101,108,106],
[107,100,0,96,102,95,105,104],
[102,108,115,0,107,100,110,104],
[104,99,109,104,0,90,112,98],
[102,110,116,111,121,0,115,114],
[99,103,106,101,99,96,0,100],
[105,105,107,107,113,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,92,101,96,112,91,94],
[126,0,116,116,109,120,111,105],
[119,95,0,110,111,116,96,103],
[110,95,101,0,102,105,97,109],
[115,102,100,109,0,109,102,111],
[99,91,95,106,102,0,88,100],
[120,100,115,114,109,123,0,102],
[117,106,108,102,100,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,99,97,99,99,95],
[110,0,107,88,107,99,99,91],
[116,104,0,89,101,103,115,96],
[112,123,122,0,120,117,105,115],
[114,104,110,91,0,111,106,98],
[112,112,108,94,100,0,112,104],
[112,112,96,106,105,99,0,106],
[116,120,115,96,113,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,107,102,111,109,105],
[111,0,103,123,112,113,91,104],
[109,108,0,111,112,121,95,104],
[104,88,100,0,105,112,106,103],
[109,99,99,106,0,105,102,99],
[100,98,90,99,106,0,97,97],
[102,120,116,105,109,114,0,117],
[106,107,107,108,112,114,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,102,92,82,100,93,92],
[128,0,127,97,114,108,105,113],
[109,84,0,86,89,102,85,101],
[119,114,125,0,109,110,113,104],
[129,97,122,102,0,122,110,119],
[111,103,109,101,89,0,113,113],
[118,106,126,98,101,98,0,121],
[119,98,110,107,92,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,97,71,123,113,70,104],
[92,0,88,87,100,137,93,105],
[114,123,0,76,83,96,83,107],
[140,124,135,0,120,125,122,93],
[88,111,128,91,0,127,100,119],
[98,74,115,86,84,0,76,92],
[141,118,128,89,111,135,0,94],
[107,106,104,118,92,119,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,94,125,112,121,108,106],
[108,0,116,118,108,117,101,102],
[117,95,0,107,104,115,120,90],
[86,93,104,0,97,100,89,98],
[99,103,107,114,0,109,107,92],
[90,94,96,111,102,0,93,92],
[103,110,91,122,104,118,0,94],
[105,109,121,113,119,119,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,93,87,91,97,102],
[119,0,108,108,99,96,107,103],
[109,103,0,115,94,95,108,100],
[118,103,96,0,108,104,95,101],
[124,112,117,103,0,113,113,109],
[120,115,116,107,98,0,100,109],
[114,104,103,116,98,111,0,115],
[109,108,111,110,102,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,104,91,99,103,98],
[114,0,112,112,111,104,115,109],
[98,99,0,93,95,102,102,98],
[107,99,118,0,98,111,111,100],
[120,100,116,113,0,111,103,112],
[112,107,109,100,100,0,106,104],
[108,96,109,100,108,105,0,108],
[113,102,113,111,99,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,110,101,126,97,108],
[111,0,107,104,105,116,107,107],
[107,104,0,107,98,110,100,97],
[101,107,104,0,93,117,92,100],
[110,106,113,118,0,114,100,97],
[85,95,101,94,97,0,94,90],
[114,104,111,119,111,117,0,106],
[103,104,114,111,114,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,109,117,100,106,109],
[104,0,100,122,112,96,109,114],
[93,111,0,97,105,108,108,118],
[102,89,114,0,103,112,108,103],
[94,99,106,108,0,101,96,118],
[111,115,103,99,110,0,108,124],
[105,102,103,103,115,103,0,101],
[102,97,93,108,93,87,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,109,107,105,114,101,103],
[103,0,112,101,126,122,115,108],
[102,99,0,115,105,114,108,102],
[104,110,96,0,119,113,115,101],
[106,85,106,92,0,107,100,94],
[97,89,97,98,104,0,101,89],
[110,96,103,96,111,110,0,95],
[108,103,109,110,117,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,104,141,116,94,85,104],
[77,0,104,93,109,101,83,76],
[107,107,0,100,94,85,92,98],
[70,118,111,0,90,82,90,90],
[95,102,117,121,0,98,103,111],
[117,110,126,129,113,0,93,101],
[126,128,119,121,108,118,0,105],
[107,135,113,121,100,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,92,97,84,65,83,102],
[135,0,110,111,103,108,106,118],
[119,101,0,110,92,88,97,108],
[114,100,101,0,92,100,96,104],
[127,108,119,119,0,93,98,104],
[146,103,123,111,118,0,106,126],
[128,105,114,115,113,105,0,103],
[109,93,103,107,107,85,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,100,110,98,84,99],
[107,0,90,105,113,105,98,93],
[107,121,0,110,117,109,104,107],
[111,106,101,0,119,91,93,110],
[101,98,94,92,0,77,81,89],
[113,106,102,120,134,0,104,104],
[127,113,107,118,130,107,0,94],
[112,118,104,101,122,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,84,100,101,97,115,111],
[104,0,91,116,93,87,116,99],
[127,120,0,128,98,107,124,112],
[111,95,83,0,88,93,107,103],
[110,118,113,123,0,97,104,94],
[114,124,104,118,114,0,110,104],
[96,95,87,104,107,101,0,107],
[100,112,99,108,117,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,135,112,96,136,125,124],
[80,0,142,140,90,129,165,116],
[76,69,0,111,86,112,97,97],
[99,71,100,0,125,99,111,101],
[115,121,125,86,0,138,137,127],
[75,82,99,112,73,0,75,99],
[86,46,114,100,74,136,0,115],
[87,95,114,110,84,112,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,73,98,77,92,115,103],
[117,0,106,118,100,124,120,116],
[138,105,0,108,104,98,119,98],
[113,93,103,0,116,99,136,119],
[134,111,107,95,0,119,159,127],
[119,87,113,112,92,0,108,97],
[96,91,92,75,52,103,0,93],
[108,95,113,92,84,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,108,118,97,120,100],
[109,0,106,103,114,115,104,117],
[110,105,0,109,119,105,98,101],
[103,108,102,0,113,97,92,92],
[93,97,92,98,0,99,110,86],
[114,96,106,114,112,0,96,94],
[91,107,113,119,101,115,0,103],
[111,94,110,119,125,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,118,151,114,121,88],
[107,0,113,105,139,99,91,92],
[104,98,0,113,126,113,111,100],
[93,106,98,0,119,64,91,82],
[60,72,85,92,0,56,82,76],
[97,112,98,147,155,0,103,114],
[90,120,100,120,129,108,0,105],
[123,119,111,129,135,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,127,107,127,103,135,121],
[81,0,122,84,96,100,110,104],
[84,89,0,86,86,94,91,92],
[104,127,125,0,113,114,115,120],
[84,115,125,98,0,88,112,97],
[108,111,117,97,123,0,107,113],
[76,101,120,96,99,104,0,110],
[90,107,119,91,114,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,101,114,113,104,106],
[107,0,109,101,110,111,116,101],
[96,102,0,100,95,111,106,108],
[110,110,111,0,111,110,108,95],
[97,101,116,100,0,112,97,100],
[98,100,100,101,99,0,107,97],
[107,95,105,103,114,104,0,100],
[105,110,103,116,111,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,98,111,120,114,112,117],
[109,0,98,136,136,94,99,124],
[113,113,0,116,129,76,93,93],
[100,75,95,0,126,88,111,106],
[91,75,82,85,0,66,79,87],
[97,117,135,123,145,0,108,116],
[99,112,118,100,132,103,0,101],
[94,87,118,105,124,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,114,106,104,102,92],
[107,0,106,118,108,89,99,90],
[118,105,0,118,119,112,111,98],
[97,93,93,0,117,103,103,90],
[105,103,92,94,0,83,91,82],
[107,122,99,108,128,0,117,107],
[109,112,100,108,120,94,0,87],
[119,121,113,121,129,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,103,103,98,99,88],
[107,0,105,98,106,98,109,101],
[116,106,0,100,117,113,105,108],
[108,113,111,0,110,110,105,105],
[108,105,94,101,0,103,99,90],
[113,113,98,101,108,0,101,106],
[112,102,106,106,112,110,0,105],
[123,110,103,106,121,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,103,96,99,92,95],
[112,0,109,109,107,109,105,104],
[106,102,0,110,91,101,97,98],
[108,102,101,0,105,107,108,96],
[115,104,120,106,0,92,107,108],
[112,102,110,104,119,0,105,107],
[119,106,114,103,104,106,0,105],
[116,107,113,115,103,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,104,97,101,106,102,97],
[122,0,113,104,107,117,105,118],
[107,98,0,100,108,109,108,108],
[114,107,111,0,110,124,98,114],
[110,104,103,101,0,111,104,101],
[105,94,102,87,100,0,98,102],
[109,106,103,113,107,113,0,108],
[114,93,103,97,110,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,106,107,92,106,107],
[98,0,97,102,107,91,112,110],
[115,114,0,123,119,98,94,106],
[105,109,88,0,114,104,107,99],
[104,104,92,97,0,99,104,102],
[119,120,113,107,112,0,105,120],
[105,99,117,104,107,106,0,97],
[104,101,105,112,109,91,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,91,112,84,93,95],
[116,0,98,107,116,110,101,110],
[113,113,0,106,125,97,94,105],
[120,104,105,0,113,106,95,106],
[99,95,86,98,0,95,86,92],
[127,101,114,105,116,0,107,114],
[118,110,117,116,125,104,0,117],
[116,101,106,105,119,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,97,113,99,102,89],
[96,0,99,104,101,85,100,110],
[116,112,0,110,122,98,115,117],
[114,107,101,0,108,96,108,98],
[98,110,89,103,0,93,115,107],
[112,126,113,115,118,0,121,100],
[109,111,96,103,96,90,0,93],
[122,101,94,113,104,111,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,97,111,122,99,97,119],
[101,0,100,115,105,101,96,109],
[114,111,0,123,123,118,90,108],
[100,96,88,0,111,109,98,100],
[89,106,88,100,0,93,88,111],
[112,110,93,102,118,0,110,104],
[114,115,121,113,123,101,0,116],
[92,102,103,111,100,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,117,123,116,104,114],
[103,0,130,92,115,128,141,124],
[88,81,0,95,116,104,134,99],
[94,119,116,0,108,117,111,115],
[88,96,95,103,0,81,122,111],
[95,83,107,94,130,0,121,101],
[107,70,77,100,89,90,0,93],
[97,87,112,96,100,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,81,89,90,75,59,87],
[157,0,145,116,142,128,99,103],
[130,66,0,142,100,129,112,101],
[122,95,69,0,53,91,105,81],
[121,69,111,158,0,104,91,91],
[136,83,82,120,107,0,101,91],
[152,112,99,106,120,110,0,108],
[124,108,110,130,120,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,113,104,101,106,109],
[108,0,111,116,108,101,112,110],
[110,100,0,115,90,97,107,109],
[98,95,96,0,89,95,101,97],
[107,103,121,122,0,107,110,107],
[110,110,114,116,104,0,108,107],
[105,99,104,110,101,103,0,109],
[102,101,102,114,104,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,124,96,121,109,106],
[101,0,85,113,97,101,88,100],
[109,126,0,125,107,103,125,102],
[87,98,86,0,103,104,89,104],
[115,114,104,108,0,117,117,113],
[90,110,108,107,94,0,96,105],
[102,123,86,122,94,115,0,104],
[105,111,109,107,98,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,95,108,102,98,107],
[110,0,96,99,117,103,118,111],
[119,115,0,104,111,103,101,122],
[116,112,107,0,99,94,100,109],
[103,94,100,112,0,94,104,109],
[109,108,108,117,117,0,104,123],
[113,93,110,111,107,107,0,111],
[104,100,89,102,102,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,115,115,102,108,102],
[93,0,101,106,105,96,99,95],
[103,110,0,119,116,108,113,101],
[96,105,92,0,97,93,103,95],
[96,106,95,114,0,93,90,100],
[109,115,103,118,118,0,113,106],
[103,112,98,108,121,98,0,100],
[109,116,110,116,111,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,104,95,115,106,114],
[112,0,100,99,104,112,96,117],
[101,111,0,111,111,116,104,124],
[107,112,100,0,102,104,97,109],
[116,107,100,109,0,129,100,109],
[96,99,95,107,82,0,82,85],
[105,115,107,114,111,129,0,125],
[97,94,87,102,102,126,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,105,105,113,120,111,118],
[96,0,89,103,105,95,110,101],
[106,122,0,99,106,111,114,111],
[106,108,112,0,104,102,127,114],
[98,106,105,107,0,93,107,105],
[91,116,100,109,118,0,121,109],
[100,101,97,84,104,90,0,100],
[93,110,100,97,106,102,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,112,119,106,124,113],
[95,0,97,105,111,104,111,104],
[109,114,0,106,111,102,106,115],
[99,106,105,0,100,93,102,104],
[92,100,100,111,0,101,101,104],
[105,107,109,118,110,0,116,106],
[87,100,105,109,110,95,0,96],
[98,107,96,107,107,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,108,111,109,116,92],
[107,0,100,120,123,100,114,109],
[115,111,0,104,111,99,120,119],
[103,91,107,0,113,121,120,96],
[100,88,100,98,0,114,117,94],
[102,111,112,90,97,0,106,98],
[95,97,91,91,94,105,0,88],
[119,102,92,115,117,113,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,103,107,102,101,111],
[104,0,103,113,99,109,98,99],
[102,108,0,109,103,97,102,101],
[108,98,102,0,101,88,100,89],
[104,112,108,110,0,106,112,111],
[109,102,114,123,105,0,107,114],
[110,113,109,111,99,104,0,94],
[100,112,110,122,100,97,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,99,84,106,100,94],
[124,0,128,111,101,121,111,104],
[113,83,0,107,91,99,85,108],
[112,100,104,0,108,113,107,100],
[127,110,120,103,0,119,103,109],
[105,90,112,98,92,0,89,106],
[111,100,126,104,108,122,0,102],
[117,107,103,111,102,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,108,103,114,112,115],
[106,0,108,100,100,110,112,110],
[110,103,0,100,106,106,97,111],
[103,111,111,0,105,116,103,116],
[108,111,105,106,0,115,100,108],
[97,101,105,95,96,0,104,111],
[99,99,114,108,111,107,0,95],
[96,101,100,95,103,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,124,125,114,111,125],
[96,0,86,90,87,95,122,82],
[109,125,0,109,106,100,107,128],
[87,121,102,0,110,88,106,98],
[86,124,105,101,0,87,93,86],
[97,116,111,123,124,0,109,101],
[100,89,104,105,118,102,0,112],
[86,129,83,113,125,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,95,101,94,107,105],
[96,0,117,105,90,96,92,117],
[99,94,0,112,109,114,98,95],
[116,106,99,0,108,106,97,116],
[110,121,102,103,0,107,107,104],
[117,115,97,105,104,0,96,118],
[104,119,113,114,104,115,0,118],
[106,94,116,95,107,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,105,107,115,111,110,120],
[89,0,83,87,101,97,110,101],
[106,128,0,90,98,86,92,86],
[104,124,121,0,118,107,85,91],
[96,110,113,93,0,113,99,94],
[100,114,125,104,98,0,109,98],
[101,101,119,126,112,102,0,97],
[91,110,125,120,117,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,80,94,63,93,89,121],
[133,0,92,91,108,76,120,105],
[131,119,0,118,118,72,89,102],
[117,120,93,0,120,103,135,87],
[148,103,93,91,0,119,119,89],
[118,135,139,108,92,0,136,106],
[122,91,122,76,92,75,0,122],
[90,106,109,124,122,105,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,109,115,127,111,103],
[98,0,102,111,105,111,104,106],
[97,109,0,91,98,102,107,94],
[102,100,120,0,103,114,107,109],
[96,106,113,108,0,119,113,114],
[84,100,109,97,92,0,100,91],
[100,107,104,104,98,111,0,99],
[108,105,117,102,97,120,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,110,102,78,89,114],
[106,0,100,115,88,96,95,113],
[100,111,0,122,96,72,101,119],
[101,96,89,0,106,96,93,120],
[109,123,115,105,0,106,117,135],
[133,115,139,115,105,0,97,124],
[122,116,110,118,94,114,0,113],
[97,98,92,91,76,87,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,110,108,109,102,107],
[101,0,106,98,102,99,93,104],
[97,105,0,100,105,99,94,96],
[101,113,111,0,119,114,100,103],
[103,109,106,92,0,106,100,101],
[102,112,112,97,105,0,105,106],
[109,118,117,111,111,106,0,101],
[104,107,115,108,110,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,92,62,85,103,90,102],
[130,0,105,120,119,107,142,134],
[119,106,0,99,110,108,107,121],
[149,91,112,0,115,127,134,126],
[126,92,101,96,0,107,108,116],
[108,104,103,84,104,0,111,103],
[121,69,104,77,103,100,0,115],
[109,77,90,85,95,108,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,97,96,100,93,91,103],
[86,0,94,105,93,92,89,81],
[114,117,0,113,107,116,99,106],
[115,106,98,0,94,96,105,97],
[111,118,104,117,0,96,100,103],
[118,119,95,115,115,0,97,108],
[120,122,112,106,111,114,0,92],
[108,130,105,114,108,103,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,122,107,129,90,109,145],
[118,0,114,120,128,97,92,142],
[89,97,0,104,120,109,113,112],
[104,91,107,0,113,83,84,114],
[82,83,91,98,0,73,76,102],
[121,114,102,128,138,0,129,104],
[102,119,98,127,135,82,0,127],
[66,69,99,97,109,107,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,108,102,109,106,105],
[107,0,110,90,107,96,102,100],
[104,101,0,96,91,102,106,105],
[103,121,115,0,112,116,113,112],
[109,104,120,99,0,108,103,106],
[102,115,109,95,103,0,92,97],
[105,109,105,98,108,119,0,112],
[106,111,106,99,105,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,98,94,102,101,89],
[107,0,109,99,104,103,110,99],
[106,102,0,106,102,101,98,95],
[113,112,105,0,102,111,114,100],
[117,107,109,109,0,109,105,108],
[109,108,110,100,102,0,107,104],
[110,101,113,97,106,104,0,91],
[122,112,116,111,103,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,107,110,98,118,110],
[101,0,114,131,116,107,91,136],
[109,97,0,121,108,93,97,105],
[104,80,90,0,102,87,103,90],
[101,95,103,109,0,96,109,118],
[113,104,118,124,115,0,100,103],
[93,120,114,108,102,111,0,102],
[101,75,106,121,93,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,119,117,102,105,106],
[100,0,114,108,119,113,119,104],
[94,97,0,102,112,99,111,93],
[92,103,109,0,119,97,109,100],
[94,92,99,92,0,80,99,87],
[109,98,112,114,131,0,110,98],
[106,92,100,102,112,101,0,98],
[105,107,118,111,124,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,91,104,110,120,109,104],
[118,0,129,107,94,130,115,102],
[120,82,0,100,101,99,113,112],
[107,104,111,0,102,107,104,87],
[101,117,110,109,0,120,102,116],
[91,81,112,104,91,0,108,97],
[102,96,98,107,109,103,0,81],
[107,109,99,124,95,114,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,93,97,105,102,120],
[110,0,104,95,95,114,95,126],
[106,107,0,92,108,109,101,121],
[118,116,119,0,101,107,106,122],
[114,116,103,110,0,107,100,116],
[106,97,102,104,104,0,93,111],
[109,116,110,105,111,118,0,119],
[91,85,90,89,95,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,87,117,85,109,118],
[116,0,103,99,103,103,99,88],
[108,108,0,95,106,105,122,99],
[124,112,116,0,110,105,126,115],
[94,108,105,101,0,103,124,106],
[126,108,106,106,108,0,114,99],
[102,112,89,85,87,97,0,83],
[93,123,112,96,105,112,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,131,118,99,125,111],
[110,0,108,107,119,93,98,102],
[103,103,0,113,106,102,92,104],
[80,104,98,0,98,102,83,99],
[93,92,105,113,0,105,97,113],
[112,118,109,109,106,0,99,101],
[86,113,119,128,114,112,0,127],
[100,109,107,112,98,110,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,123,97,91,89,90,133],
[86,0,125,86,96,90,114,149],
[88,86,0,85,77,70,70,123],
[114,125,126,0,104,109,92,133],
[120,115,134,107,0,100,100,142],
[122,121,141,102,111,0,126,140],
[121,97,141,119,111,85,0,157],
[78,62,88,78,69,71,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,116,113,93,121,124],
[94,0,116,109,102,98,101,97],
[98,95,0,89,99,100,89,97],
[95,102,122,0,107,111,98,111],
[98,109,112,104,0,102,104,106],
[118,113,111,100,109,0,111,99],
[90,110,122,113,107,100,0,113],
[87,114,114,100,105,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,111,109,106,115,112],
[104,0,100,107,104,112,111,99],
[113,111,0,108,108,104,113,102],
[100,104,103,0,101,107,107,92],
[102,107,103,110,0,103,117,102],
[105,99,107,104,108,0,115,104],
[96,100,98,104,94,96,0,105],
[99,112,109,119,109,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,110,116,110,96,104],
[103,0,90,117,106,106,87,99],
[117,121,0,117,116,113,97,108],
[101,94,94,0,105,103,99,103],
[95,105,95,106,0,105,94,84],
[101,105,98,108,106,0,102,91],
[115,124,114,112,117,109,0,102],
[107,112,103,108,127,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,108,114,113,100,110],
[112,0,100,111,109,88,107,105],
[109,111,0,112,117,110,102,111],
[103,100,99,0,103,97,99,107],
[97,102,94,108,0,104,99,106],
[98,123,101,114,107,0,111,108],
[111,104,109,112,112,100,0,108],
[101,106,100,104,105,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,107,105,106,105,100],
[106,0,114,104,112,106,113,107],
[103,97,0,104,100,100,92,96],
[104,107,107,0,105,102,106,105],
[106,99,111,106,0,105,111,103],
[105,105,111,109,106,0,111,106],
[106,98,119,105,100,100,0,97],
[111,104,115,106,108,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,109,65,97,60,74,117],
[118,0,97,106,93,78,83,123],
[102,114,0,115,97,105,83,134],
[146,105,96,0,93,88,67,116],
[114,118,114,118,0,101,110,86],
[151,133,106,123,110,0,99,129],
[137,128,128,144,101,112,0,145],
[94,88,77,95,125,82,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,114,123,101,92,127],
[110,0,113,130,115,102,112,126],
[102,98,0,101,120,78,110,105],
[97,81,110,0,111,85,109,112],
[88,96,91,100,0,87,85,99],
[110,109,133,126,124,0,105,113],
[119,99,101,102,126,106,0,127],
[84,85,106,99,112,98,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,98,122,114,106,107],
[111,0,107,96,101,110,97,110],
[107,104,0,105,107,109,109,103],
[113,115,106,0,107,121,104,106],
[89,110,104,104,0,94,96,99],
[97,101,102,90,117,0,104,108],
[105,114,102,107,115,107,0,111],
[104,101,108,105,112,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,96,108,103,110,102,110],
[98,0,98,108,108,106,108,111],
[115,113,0,112,115,116,123,103],
[103,103,99,0,104,104,102,101],
[108,103,96,107,0,108,102,104],
[101,105,95,107,103,0,115,96],
[109,103,88,109,109,96,0,104],
[101,100,108,110,107,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,41,113,72,94,104,71,73],
[170,0,144,104,147,113,114,115],
[98,67,0,71,87,95,75,53],
[139,107,140,0,96,138,127,118],
[117,64,124,115,0,125,105,104],
[107,98,116,73,86,0,86,94],
[140,97,136,84,106,125,0,98],
[138,96,158,93,107,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,111,92,100,98,107,97],
[128,0,124,109,118,101,130,121],
[100,87,0,101,114,98,122,115],
[119,102,110,0,108,120,130,117],
[111,93,97,103,0,102,127,125],
[113,110,113,91,109,0,111,110],
[104,81,89,81,84,100,0,100],
[114,90,96,94,86,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,59,97,129,92,106,85],
[147,0,96,110,136,113,163,108],
[152,115,0,124,159,104,160,113],
[114,101,87,0,121,101,122,110],
[82,75,52,90,0,110,73,72],
[119,98,107,110,101,0,133,110],
[105,48,51,89,138,78,0,88],
[126,103,98,101,139,101,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,83,73,82,60,74,48],
[149,0,84,100,136,106,76,122],
[128,127,0,141,124,99,90,100],
[138,111,70,0,109,70,61,73],
[129,75,87,102,0,86,61,58],
[151,105,112,141,125,0,114,74],
[137,135,121,150,150,97,0,95],
[163,89,111,138,153,137,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,111,112,97,88,126,107],
[79,0,70,109,88,105,105,111],
[100,141,0,105,115,121,131,117],
[99,102,106,0,96,88,126,86],
[114,123,96,115,0,116,143,128],
[123,106,90,123,95,0,129,99],
[85,106,80,85,68,82,0,92],
[104,100,94,125,83,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,75,123,113,110,83,85],
[98,0,111,99,99,137,148,111],
[136,100,0,110,102,123,97,71],
[88,112,101,0,90,100,97,71],
[98,112,109,121,0,96,121,97],
[101,74,88,111,115,0,87,87],
[128,63,114,114,90,124,0,86],
[126,100,140,140,114,124,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,107,106,107,109,113],
[113,0,112,121,112,108,98,124],
[106,99,0,98,106,86,69,96],
[104,90,113,0,109,107,79,116],
[105,99,105,102,0,100,97,103],
[104,103,125,104,111,0,89,99],
[102,113,142,132,114,122,0,114],
[98,87,115,95,108,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,95,92,115,107,108],
[107,0,112,113,116,108,107,100],
[99,99,0,100,98,113,100,93],
[116,98,111,0,114,100,96,104],
[119,95,113,97,0,99,96,86],
[96,103,98,111,112,0,101,102],
[104,104,111,115,115,110,0,111],
[103,111,118,107,125,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,110,113,107,107,104,102],
[103,0,115,115,103,110,111,103],
[101,96,0,106,101,102,102,94],
[98,96,105,0,97,107,95,105],
[104,108,110,114,0,115,106,108],
[104,101,109,104,96,0,87,85],
[107,100,109,116,105,124,0,102],
[109,108,117,106,103,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,106,90,120,90,118,102],
[73,0,121,120,132,116,148,90],
[105,90,0,89,102,118,131,74],
[121,91,122,0,89,148,88,148],
[91,79,109,122,0,104,119,108],
[121,95,93,63,107,0,91,78],
[93,63,80,123,92,120,0,107],
[109,121,137,63,103,133,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,123,92,105,119,110],
[101,0,107,109,102,96,112,100],
[112,104,0,107,108,100,112,111],
[88,102,104,0,92,95,107,107],
[119,109,103,119,0,108,123,119],
[106,115,111,116,103,0,121,112],
[92,99,99,104,88,90,0,87],
[101,111,100,104,92,99,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,95,98,107,113,105],
[107,0,94,94,113,104,123,100],
[104,117,0,113,107,118,127,117],
[116,117,98,0,121,115,125,111],
[113,98,104,90,0,107,115,94],
[104,107,93,96,104,0,107,102],
[98,88,84,86,96,104,0,94],
[106,111,94,100,117,109,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,95,91,100,106,100],
[100,0,87,75,64,84,84,81],
[111,124,0,104,101,109,114,93],
[116,136,107,0,113,102,113,110],
[120,147,110,98,0,117,114,97],
[111,127,102,109,94,0,101,116],
[105,127,97,98,97,110,0,109],
[111,130,118,101,114,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,119,98,97,105,115],
[109,0,109,103,94,96,110,102],
[103,102,0,118,109,99,89,113],
[92,108,93,0,106,102,94,110],
[113,117,102,105,0,102,107,112],
[114,115,112,109,109,0,101,103],
[106,101,122,117,104,110,0,107],
[96,109,98,101,99,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,123,119,136,101,115,128],
[83,0,122,119,105,105,117,117],
[88,89,0,108,114,88,105,101],
[92,92,103,0,108,114,108,120],
[75,106,97,103,0,95,102,94],
[110,106,123,97,116,0,103,100],
[96,94,106,103,109,108,0,101],
[83,94,110,91,117,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,96,104,106,94,106],
[107,0,113,102,109,118,113,105],
[114,98,0,95,106,112,109,100],
[115,109,116,0,98,122,124,106],
[107,102,105,113,0,121,114,116],
[105,93,99,89,90,0,83,91],
[117,98,102,87,97,128,0,116],
[105,106,111,105,95,120,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,109,102,97,107,103],
[110,0,108,103,102,103,105,115],
[106,103,0,109,102,100,108,111],
[102,108,102,0,107,106,108,104],
[109,109,109,104,0,105,107,107],
[114,108,111,105,106,0,105,109],
[104,106,103,103,104,106,0,108],
[108,96,100,107,104,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,129,104,132,122,126],
[87,0,95,92,101,105,106,114],
[99,116,0,116,105,120,110,122],
[82,119,95,0,97,119,97,109],
[107,110,106,114,0,106,98,112],
[79,106,91,92,105,0,90,95],
[89,105,101,114,113,121,0,108],
[85,97,89,102,99,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,111,107,115,115,114,102],
[100,0,103,107,108,88,101,90],
[100,108,0,101,106,88,82,94],
[104,104,110,0,113,114,114,108],
[96,103,105,98,0,104,88,97],
[96,123,123,97,107,0,108,102],
[97,110,129,97,123,103,0,109],
[109,121,117,103,114,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,103,101,114,98,109],
[103,0,96,109,114,104,91,120],
[110,115,0,100,108,110,92,105],
[108,102,111,0,118,110,101,115],
[110,97,103,93,0,102,107,111],
[97,107,101,101,109,0,100,119],
[113,120,119,110,104,111,0,119],
[102,91,106,96,100,92,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,100,99,116,98,93],
[105,0,97,98,99,111,106,111],
[118,114,0,115,102,106,108,111],
[111,113,96,0,97,110,106,108],
[112,112,109,114,0,111,105,103],
[95,100,105,101,100,0,94,106],
[113,105,103,105,106,117,0,107],
[118,100,100,103,108,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,106,95,112,114,102],
[109,0,111,119,93,109,117,110],
[108,100,0,100,103,109,103,100],
[105,92,111,0,90,99,106,98],
[116,118,108,121,0,110,105,118],
[99,102,102,112,101,0,101,101],
[97,94,108,105,106,110,0,103],
[109,101,111,113,93,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,104,102,108,112,105],
[102,0,109,105,114,118,103,108],
[101,102,0,107,110,117,107,103],
[107,106,104,0,106,119,112,112],
[109,97,101,105,0,106,109,96],
[103,93,94,92,105,0,102,95],
[99,108,104,99,102,109,0,99],
[106,103,108,99,115,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,89,117,105,97,98],
[110,0,100,96,116,103,102,107],
[111,111,0,106,122,102,109,114],
[122,115,105,0,126,106,112,117],
[94,95,89,85,0,95,86,86],
[106,108,109,105,116,0,109,111],
[114,109,102,99,125,102,0,109],
[113,104,97,94,125,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,95,87,120,124,109],
[112,0,111,95,107,137,128,108],
[114,100,0,106,108,130,123,110],
[116,116,105,0,96,131,132,113],
[124,104,103,115,0,122,137,115],
[91,74,81,80,89,0,95,88],
[87,83,88,79,74,116,0,91],
[102,103,101,98,96,123,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,144,141,157,182,143,103,128],
[67,0,112,126,97,73,69,97],
[70,99,0,98,83,103,87,98],
[54,85,113,0,82,73,57,84],
[29,114,128,129,0,102,86,98],
[68,138,108,138,109,0,127,97],
[108,142,124,154,125,84,0,112],
[83,114,113,127,113,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,112,106,93,105,114],
[102,0,100,109,91,107,117,116],
[99,111,0,124,118,124,121,130],
[99,102,87,0,112,128,118,127],
[105,120,93,99,0,128,123,116],
[118,104,87,83,83,0,114,143],
[106,94,90,93,88,97,0,117],
[97,95,81,84,95,68,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,106,110,112,107,114],
[112,0,111,103,104,110,102,107],
[103,100,0,101,98,100,102,113],
[105,108,110,0,100,100,105,108],
[101,107,113,111,0,114,101,112],
[99,101,111,111,97,0,104,98],
[104,109,109,106,110,107,0,101],
[97,104,98,103,99,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,110,123,102,126,123],
[116,0,106,115,102,112,118,140],
[114,105,0,104,113,97,106,115],
[101,96,107,0,90,84,118,97],
[88,109,98,121,0,75,107,119],
[109,99,114,127,136,0,125,123],
[85,93,105,93,104,86,0,105],
[88,71,96,114,92,88,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,123,109,113,116,116],
[111,0,112,109,100,89,102,98],
[97,99,0,111,108,102,114,110],
[88,102,100,0,96,101,114,87],
[102,111,103,115,0,109,118,106],
[98,122,109,110,102,0,109,110],
[95,109,97,97,93,102,0,96],
[95,113,101,124,105,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,114,113,120,105,112],
[101,0,116,108,102,112,97,103],
[97,95,0,108,94,104,104,104],
[97,103,103,0,96,100,102,87],
[98,109,117,115,0,111,110,92],
[91,99,107,111,100,0,107,113],
[106,114,107,109,101,104,0,110],
[99,108,107,124,119,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,118,126,140,134,151],
[108,0,116,106,138,149,96,133],
[94,95,0,123,70,121,77,114],
[93,105,88,0,119,140,99,113],
[85,73,141,92,0,95,96,91],
[71,62,90,71,116,0,67,80],
[77,115,134,112,115,144,0,126],
[60,78,97,98,120,131,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,107,92,116,111,114],
[105,0,114,109,88,110,102,107],
[104,97,0,93,87,94,109,117],
[104,102,118,0,100,109,98,114],
[119,123,124,111,0,125,104,113],
[95,101,117,102,86,0,104,114],
[100,109,102,113,107,107,0,110],
[97,104,94,97,98,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,85,102,88,112,108,103],
[108,0,95,109,95,103,101,95],
[126,116,0,120,100,144,132,123],
[109,102,91,0,105,124,93,95],
[123,116,111,106,0,115,81,99],
[99,108,67,87,96,0,99,92],
[103,110,79,118,130,112,0,107],
[108,116,88,116,112,119,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,88,102,106,102,103],
[98,0,102,99,104,104,100,103],
[116,109,0,103,108,108,104,107],
[123,112,108,0,122,119,98,124],
[109,107,103,89,0,101,96,119],
[105,107,103,92,110,0,106,103],
[109,111,107,113,115,105,0,114],
[108,108,104,87,92,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,106,99,108,110,95],
[105,0,100,112,102,117,113,97],
[117,111,0,100,116,106,130,109],
[105,99,111,0,107,101,109,92],
[112,109,95,104,0,103,107,120],
[103,94,105,110,108,0,125,99],
[101,98,81,102,104,86,0,89],
[116,114,102,119,91,112,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,98,95,109,118,116,107],
[89,0,98,97,97,105,104,94],
[113,113,0,112,108,117,102,110],
[116,114,99,0,103,116,106,105],
[102,114,103,108,0,115,104,107],
[93,106,94,95,96,0,94,76],
[95,107,109,105,107,117,0,97],
[104,117,101,106,104,135,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,84,90,105,101,93],
[101,0,94,99,90,112,87,96],
[118,117,0,91,112,110,107,98],
[127,112,120,0,102,102,89,110],
[121,121,99,109,0,126,100,114],
[106,99,101,109,85,0,99,95],
[110,124,104,122,111,112,0,103],
[118,115,113,101,97,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,83,69,104,101,113],
[105,0,80,76,51,91,91,114],
[112,131,0,84,85,121,88,112],
[128,135,127,0,106,105,118,115],
[142,160,126,105,0,130,129,152],
[107,120,90,106,81,0,100,134],
[110,120,123,93,82,111,0,125],
[98,97,99,96,59,77,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,114,89,91,103,85,106],
[121,0,127,95,109,104,100,103],
[97,84,0,90,91,98,86,97],
[122,116,121,0,101,108,98,117],
[120,102,120,110,0,111,96,105],
[108,107,113,103,100,0,112,104],
[126,111,125,113,115,99,0,107],
[105,108,114,94,106,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,116,101,98,92,112],
[109,0,108,114,113,98,84,116],
[114,103,0,116,104,114,109,117],
[95,97,95,0,106,97,104,116],
[110,98,107,105,0,122,93,119],
[113,113,97,114,89,0,106,117],
[119,127,102,107,118,105,0,112],
[99,95,94,95,92,94,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,108,97,111,109,110],
[102,0,104,110,103,113,106,106],
[103,107,0,105,97,114,108,116],
[103,101,106,0,111,109,111,111],
[114,108,114,100,0,112,111,118],
[100,98,97,102,99,0,111,104],
[102,105,103,100,100,100,0,108],
[101,105,95,100,93,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,97,115,99,99,102,136],
[95,0,86,102,101,90,97,111],
[114,125,0,120,119,109,93,118],
[96,109,91,0,108,87,102,118],
[112,110,92,103,0,102,99,118],
[112,121,102,124,109,0,119,123],
[109,114,118,109,112,92,0,109],
[75,100,93,93,93,88,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,105,92,88,96,122],
[112,0,107,108,82,98,85,110],
[107,104,0,90,88,92,81,93],
[106,103,121,0,81,95,77,125],
[119,129,123,130,0,97,114,130],
[123,113,119,116,114,0,95,133],
[115,126,130,134,97,116,0,132],
[89,101,118,86,81,78,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,105,109,95,102,97,104],
[87,0,94,92,86,107,93,100],
[106,117,0,123,107,117,95,108],
[102,119,88,0,91,104,106,110],
[116,125,104,120,0,119,116,104],
[109,104,94,107,92,0,96,101],
[114,118,116,105,95,115,0,119],
[107,111,103,101,107,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,94,106,147,80,95,124],
[118,0,95,64,115,75,108,96],
[117,116,0,87,137,63,96,96],
[105,147,124,0,157,134,135,135],
[64,96,74,54,0,63,105,77],
[131,136,148,77,148,0,142,131],
[116,103,115,76,106,69,0,104],
[87,115,115,76,134,80,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,90,119,116,87,117,94],
[81,0,100,108,107,82,119,84],
[121,111,0,133,141,104,112,110],
[92,103,78,0,118,83,84,84],
[95,104,70,93,0,99,95,81],
[124,129,107,128,112,0,104,113],
[94,92,99,127,116,107,0,80],
[117,127,101,127,130,98,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,98,111,96,91,113],
[107,0,115,100,105,102,101,108],
[101,96,0,91,91,93,93,105],
[113,111,120,0,116,105,96,114],
[100,106,120,95,0,105,106,112],
[115,109,118,106,106,0,105,121],
[120,110,118,115,105,106,0,125],
[98,103,106,97,99,90,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,100,109,110,106,104],
[99,0,102,108,120,103,106,100],
[110,109,0,108,129,93,116,103],
[111,103,103,0,122,86,110,97],
[102,91,82,89,0,92,85,96],
[101,108,118,125,119,0,111,112],
[105,105,95,101,126,100,0,100],
[107,111,108,114,115,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,90,91,131,92,92,103],
[108,0,81,118,117,106,122,118],
[121,130,0,117,104,132,95,120],
[120,93,94,0,108,92,94,66],
[80,94,107,103,0,93,95,118],
[119,105,79,119,118,0,80,106],
[119,89,116,117,116,131,0,129],
[108,93,91,145,93,105,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,105,108,100,113,102],
[111,0,110,105,103,107,112,116],
[105,101,0,112,108,101,116,117],
[106,106,99,0,95,96,117,113],
[103,108,103,116,0,110,115,109],
[111,104,110,115,101,0,116,104],
[98,99,95,94,96,95,0,103],
[109,95,94,98,102,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,103,115,117,117,126],
[96,0,94,97,107,90,111,106],
[100,117,0,115,121,105,109,125],
[108,114,96,0,98,110,105,114],
[96,104,90,113,0,96,113,123],
[94,121,106,101,115,0,107,124],
[94,100,102,106,98,104,0,114],
[85,105,86,97,88,87,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,119,101,135,112,132,110],
[115,0,125,94,119,109,101,97],
[92,86,0,100,126,117,102,100],
[110,117,111,0,101,117,111,124],
[76,92,85,110,0,105,119,105],
[99,102,94,94,106,0,90,106],
[79,110,109,100,92,121,0,97],
[101,114,111,87,106,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,92,113,103,97,103],
[106,0,96,97,104,92,103,105],
[107,115,0,107,119,112,119,104],
[119,114,104,0,119,121,118,111],
[98,107,92,92,0,93,117,91],
[108,119,99,90,118,0,104,108],
[114,108,92,93,94,107,0,95],
[108,106,107,100,120,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,112,92,120,106,103,109],
[124,0,144,91,126,152,117,116],
[99,67,0,81,101,93,121,95],
[119,120,130,0,113,133,107,97],
[91,85,110,98,0,117,86,81],
[105,59,118,78,94,0,94,100],
[108,94,90,104,125,117,0,90],
[102,95,116,114,130,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,113,113,107,109,99],
[101,0,112,108,103,95,102,96],
[99,99,0,103,99,97,103,104],
[98,103,108,0,104,100,96,98],
[98,108,112,107,0,100,97,100],
[104,116,114,111,111,0,99,102],
[102,109,108,115,114,112,0,118],
[112,115,107,113,111,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,104,80,100,84,121,101],
[135,0,105,80,108,112,142,99],
[107,106,0,87,132,115,141,116],
[131,131,124,0,116,109,142,97],
[111,103,79,95,0,104,120,71],
[127,99,96,102,107,0,133,108],
[90,69,70,69,91,78,0,74],
[110,112,95,114,140,103,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,109,104,102,92,97],
[111,0,99,108,114,106,104,90],
[110,112,0,124,113,98,102,106],
[102,103,87,0,103,104,104,88],
[107,97,98,108,0,97,97,98],
[109,105,113,107,114,0,112,110],
[119,107,109,107,114,99,0,99],
[114,121,105,123,113,101,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,122,103,124,124,96,82],
[116,0,104,126,141,126,112,110],
[89,107,0,98,121,113,75,79],
[108,85,113,0,116,112,110,77],
[87,70,90,95,0,100,77,97],
[87,85,98,99,111,0,96,81],
[115,99,136,101,134,115,0,95],
[129,101,132,134,114,130,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,100,107,106,98,92],
[111,0,107,108,99,91,95,112],
[118,104,0,94,110,105,107,108],
[111,103,117,0,117,103,115,108],
[104,112,101,94,0,101,96,93],
[105,120,106,108,110,0,103,110],
[113,116,104,96,115,108,0,103],
[119,99,103,103,118,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,95,87,94,89,94,104],
[128,0,96,110,114,120,103,110],
[116,115,0,104,108,118,108,102],
[124,101,107,0,112,108,103,105],
[117,97,103,99,0,106,111,119],
[122,91,93,103,105,0,94,99],
[117,108,103,108,100,117,0,119],
[107,101,109,106,92,112,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,117,98,120,101,105],
[110,0,101,85,110,109,103,108],
[94,110,0,91,93,110,95,78],
[94,126,120,0,108,132,98,101],
[113,101,118,103,0,113,122,95],
[91,102,101,79,98,0,104,87],
[110,108,116,113,89,107,0,105],
[106,103,133,110,116,124,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,105,110,114,116,108],
[107,0,115,99,109,111,114,110],
[105,96,0,107,100,109,104,109],
[106,112,104,0,102,115,110,115],
[101,102,111,109,0,115,119,112],
[97,100,102,96,96,0,100,101],
[95,97,107,101,92,111,0,100],
[103,101,102,96,99,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,94,99,108,122,113,105],
[95,0,102,99,64,124,96,117],
[117,109,0,93,98,128,107,120],
[112,112,118,0,88,122,115,95],
[103,147,113,123,0,123,120,126],
[89,87,83,89,88,0,109,105],
[98,115,104,96,91,102,0,101],
[106,94,91,116,85,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,97,106,118,118,114,116],
[91,0,92,109,114,104,120,96],
[114,119,0,124,108,118,135,97],
[105,102,87,0,101,111,103,112],
[93,97,103,110,0,121,100,100],
[93,107,93,100,90,0,99,93],
[97,91,76,108,111,112,0,99],
[95,115,114,99,111,118,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,75,100,86,97,81,83],
[111,0,82,115,87,92,91,96],
[136,129,0,134,124,114,88,108],
[111,96,77,0,95,104,92,93],
[125,124,87,116,0,128,84,112],
[114,119,97,107,83,0,114,90],
[130,120,123,119,127,97,0,108],
[128,115,103,118,99,121,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,96,98,111,108,91],
[111,0,103,118,104,113,110,104],
[120,108,0,123,99,110,120,94],
[115,93,88,0,105,97,100,87],
[113,107,112,106,0,100,106,112],
[100,98,101,114,111,0,109,99],
[103,101,91,111,105,102,0,88],
[120,107,117,124,99,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,106,103,110,106,105],
[95,0,96,109,101,97,98,104],
[101,115,0,108,105,102,106,116],
[105,102,103,0,104,95,104,110],
[108,110,106,107,0,103,100,106],
[101,114,109,116,108,0,108,104],
[105,113,105,107,111,103,0,106],
[106,107,95,101,105,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,91,94,107,108,102],
[106,0,104,101,101,95,113,107],
[103,107,0,92,102,93,116,91],
[120,110,119,0,106,103,112,115],
[117,110,109,105,0,105,119,109],
[104,116,118,108,106,0,127,122],
[103,98,95,99,92,84,0,91],
[109,104,120,96,102,89,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,90,124,111,117,115],
[96,0,108,103,111,108,108,104],
[90,103,0,87,114,106,107,93],
[121,108,124,0,119,100,114,109],
[87,100,97,92,0,85,108,88],
[100,103,105,111,126,0,122,108],
[94,103,104,97,103,89,0,99],
[96,107,118,102,123,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,101,77,76,112,89,95],
[136,0,109,94,73,110,117,118],
[110,102,0,140,92,128,97,112],
[134,117,71,0,88,140,94,109],
[135,138,119,123,0,143,114,98],
[99,101,83,71,68,0,84,75],
[122,94,114,117,97,127,0,121],
[116,93,99,102,113,136,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,96,111,108,100,104],
[112,0,117,106,112,106,105,114],
[101,94,0,88,101,89,93,92],
[115,105,123,0,121,106,119,111],
[100,99,110,90,0,104,100,93],
[103,105,122,105,107,0,110,106],
[111,106,118,92,111,101,0,102],
[107,97,119,100,118,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,99,101,97,107,83,100],
[117,0,102,115,99,112,98,112],
[112,109,0,108,109,116,105,115],
[110,96,103,0,98,110,96,90],
[114,112,102,113,0,106,107,108],
[104,99,95,101,105,0,93,111],
[128,113,106,115,104,118,0,110],
[111,99,96,121,103,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,94,110,115,94,117,95],
[101,0,87,95,106,89,122,98],
[117,124,0,99,118,116,128,107],
[101,116,112,0,110,114,131,96],
[96,105,93,101,0,90,120,109],
[117,122,95,97,121,0,121,94],
[94,89,83,80,91,90,0,88],
[116,113,104,115,102,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,99,98,103,118,107],
[101,0,91,92,101,107,108,100],
[111,120,0,102,112,98,114,102],
[112,119,109,0,82,98,121,112],
[113,110,99,129,0,101,124,110],
[108,104,113,113,110,0,116,114],
[93,103,97,90,87,95,0,86],
[104,111,109,99,101,97,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,116,102,99,107,109],
[97,0,92,105,99,105,90,98],
[107,119,0,124,112,100,99,122],
[95,106,87,0,99,92,85,94],
[109,112,99,112,0,104,96,106],
[112,106,111,119,107,0,102,106],
[104,121,112,126,115,109,0,116],
[102,113,89,117,105,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,106,102,91,92,116],
[120,0,107,102,113,112,112,117],
[103,104,0,107,101,102,107,111],
[105,109,104,0,107,97,103,110],
[109,98,110,104,0,97,102,104],
[120,99,109,114,114,0,107,117],
[119,99,104,108,109,104,0,129],
[95,94,100,101,107,94,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,103,107,100,100,96],
[114,0,113,103,109,108,105,107],
[111,98,0,105,102,103,101,99],
[108,108,106,0,103,100,101,102],
[104,102,109,108,0,102,102,100],
[111,103,108,111,109,0,107,99],
[111,106,110,110,109,104,0,98],
[115,104,112,109,111,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,96,125,109,102,99],
[98,0,97,99,103,121,105,94],
[95,114,0,94,102,118,106,100],
[115,112,117,0,106,101,119,106],
[86,108,109,105,0,103,99,84],
[102,90,93,110,108,0,97,94],
[109,106,105,92,112,114,0,80],
[112,117,111,105,127,117,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,102,108,102,108,95],
[112,0,99,111,104,120,123,123],
[124,112,0,113,113,105,110,117],
[109,100,98,0,110,116,117,111],
[103,107,98,101,0,107,113,103],
[109,91,106,95,104,0,106,101],
[103,88,101,94,98,105,0,95],
[116,88,94,100,108,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,89,95,98,92,83],
[113,0,106,100,105,136,114,114],
[124,105,0,108,89,132,113,104],
[122,111,103,0,115,119,111,99],
[116,106,122,96,0,124,117,112],
[113,75,79,92,87,0,105,96],
[119,97,98,100,94,106,0,102],
[128,97,107,112,99,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,111,99,125,111,95,107],
[93,0,122,101,120,108,109,106],
[100,89,0,96,123,114,94,96],
[112,110,115,0,115,115,95,116],
[86,91,88,96,0,76,92,89],
[100,103,97,96,135,0,98,98],
[116,102,117,116,119,113,0,115],
[104,105,115,95,122,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,86,102,114,94,97],
[104,0,90,93,101,103,93,102],
[112,121,0,109,110,109,104,109],
[125,118,102,0,111,94,97,101],
[109,110,101,100,0,101,105,99],
[97,108,102,117,110,0,102,103],
[117,118,107,114,106,109,0,100],
[114,109,102,110,112,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,139,84,79,86,103],
[121,0,123,139,110,130,98,126],
[105,88,0,104,86,105,83,95],
[72,72,107,0,70,87,69,95],
[127,101,125,141,0,127,116,122],
[132,81,106,124,84,0,82,114],
[125,113,128,142,95,129,0,115],
[108,85,116,116,89,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,81,78,108,112,84],
[107,0,110,87,108,107,116,107],
[130,101,0,113,103,113,115,88],
[130,124,98,0,117,136,136,112],
[133,103,108,94,0,126,127,104],
[103,104,98,75,85,0,97,92],
[99,95,96,75,84,114,0,99],
[127,104,123,99,107,119,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,88,119,148,150,92,119],
[90,0,120,87,88,150,92,119],
[123,91,0,87,88,122,64,63],
[92,124,124,0,60,124,124,124],
[63,123,123,151,0,153,123,123],
[61,61,89,87,58,0,125,93],
[119,119,147,87,88,86,0,119],
[92,92,148,87,88,118,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,103,126,111,119,114],
[93,0,102,94,89,97,96,88],
[104,109,0,111,89,111,111,100],
[108,117,100,0,109,102,112,103],
[85,122,122,102,0,115,107,115],
[100,114,100,109,96,0,106,91],
[92,115,100,99,104,105,0,92],
[97,123,111,108,96,120,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,101,102,101,106,103],
[111,0,116,117,116,109,104,124],
[96,95,0,97,91,91,103,104],
[110,94,114,0,109,110,110,110],
[109,95,120,102,0,107,105,105],
[110,102,120,101,104,0,109,115],
[105,107,108,101,106,102,0,106],
[108,87,107,101,106,96,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,110,111,102,105,100],
[96,0,116,106,93,103,106,109],
[94,95,0,96,88,107,95,103],
[101,105,115,0,104,110,105,107],
[100,118,123,107,0,125,113,107],
[109,108,104,101,86,0,105,87],
[106,105,116,106,98,106,0,101],
[111,102,108,104,104,124,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,92,94,99,96,83,88],
[104,0,95,91,108,90,96,84],
[119,116,0,102,114,100,125,103],
[117,120,109,0,116,98,108,118],
[112,103,97,95,0,106,104,115],
[115,121,111,113,105,0,114,108],
[128,115,86,103,107,97,0,107],
[123,127,108,93,96,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,124,99,116,126,132],
[93,0,98,109,100,98,110,103],
[98,113,0,114,108,105,132,115],
[87,102,97,0,95,115,126,103],
[112,111,103,116,0,111,123,106],
[95,113,106,96,100,0,112,105],
[85,101,79,85,88,99,0,105],
[79,108,96,108,105,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,102,111,115,110,99],
[106,0,114,97,110,106,101,100],
[94,97,0,100,111,114,110,100],
[109,114,111,0,107,111,98,99],
[100,101,100,104,0,99,90,88],
[96,105,97,100,112,0,112,108],
[101,110,101,113,121,99,0,100],
[112,111,111,112,123,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,102,109,98,136,111],
[98,0,107,105,100,92,130,102],
[99,104,0,111,98,106,121,105],
[109,106,100,0,109,98,128,120],
[102,111,113,102,0,99,127,118],
[113,119,105,113,112,0,130,120],
[75,81,90,83,84,81,0,88],
[100,109,106,91,93,91,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,94,96,94,98,80,104],
[128,0,98,102,89,100,102,121],
[117,113,0,99,95,114,110,118],
[115,109,112,0,104,110,106,123],
[117,122,116,107,0,100,102,116],
[113,111,97,101,111,0,111,123],
[131,109,101,105,109,100,0,118],
[107,90,93,88,95,88,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,92,109,97,118,103],
[116,0,121,108,104,109,111,109],
[111,90,0,87,107,103,112,109],
[119,103,124,0,112,92,130,115],
[102,107,104,99,0,92,113,104],
[114,102,108,119,119,0,130,122],
[93,100,99,81,98,81,0,104],
[108,102,102,96,107,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,101,91,100,94,95],
[103,0,100,107,96,102,98,97],
[108,111,0,108,103,101,93,99],
[110,104,103,0,107,105,105,106],
[120,115,108,104,0,118,114,106],
[111,109,110,106,93,0,95,100],
[117,113,118,106,97,116,0,100],
[116,114,112,105,105,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,120,106,91,88,89,106],
[115,0,120,118,104,96,103,104],
[91,91,0,104,90,90,88,101],
[105,93,107,0,97,100,90,105],
[120,107,121,114,0,95,117,108],
[123,115,121,111,116,0,103,116],
[122,108,123,121,94,108,0,96],
[105,107,110,106,103,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,91,107,105,93,90],
[104,0,102,100,104,122,101,64],
[108,109,0,97,101,116,112,90],
[120,111,114,0,117,122,110,102],
[104,107,110,94,0,89,98,85],
[106,89,95,89,122,0,100,87],
[118,110,99,101,113,111,0,114],
[121,147,121,109,126,124,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,125,54,115,117,112,53],
[125,0,167,94,144,157,99,108],
[86,44,0,28,133,75,85,98],
[157,117,183,0,146,143,125,98],
[96,67,78,65,0,114,83,69],
[94,54,136,68,97,0,71,54],
[99,112,126,86,128,140,0,97],
[158,103,113,113,142,157,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,121,116,112,116,120,104],
[105,0,107,105,113,100,107,120],
[90,104,0,100,113,121,105,102],
[95,106,111,0,112,121,108,102],
[99,98,98,99,0,101,100,108],
[95,111,90,90,110,0,104,113],
[91,104,106,103,111,107,0,98],
[107,91,109,109,103,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,79,108,108,84,84,125],
[94,0,83,95,101,77,84,108],
[132,128,0,118,124,97,115,134],
[103,116,93,0,102,101,109,109],
[103,110,87,109,0,87,101,124],
[127,134,114,110,124,0,105,119],
[127,127,96,102,110,106,0,122],
[86,103,77,102,87,92,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,117,130,104,115,125,124],
[87,0,104,120,97,110,111,124],
[94,107,0,106,100,108,117,119],
[81,91,105,0,92,92,105,112],
[107,114,111,119,0,108,104,117],
[96,101,103,119,103,0,119,113],
[86,100,94,106,107,92,0,123],
[87,87,92,99,94,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,117,101,91,89,96,98],
[111,0,118,106,106,96,105,103],
[94,93,0,86,89,80,93,92],
[110,105,125,0,104,102,96,100],
[120,105,122,107,0,114,111,110],
[122,115,131,109,97,0,110,115],
[115,106,118,115,100,101,0,105],
[113,108,119,111,101,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,109,122,109,123,124],
[97,0,109,107,121,110,124,122],
[106,102,0,99,112,119,118,122],
[102,104,112,0,124,99,121,126],
[89,90,99,87,0,119,100,103],
[102,101,92,112,92,0,116,111],
[88,87,93,90,111,95,0,107],
[87,89,89,85,108,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,133,127,130,140,98,125],
[101,0,121,108,100,115,121,107],
[78,90,0,101,108,92,70,79],
[84,103,110,0,114,112,95,77],
[81,111,103,97,0,112,92,120],
[71,96,119,99,99,0,80,111],
[113,90,141,116,119,131,0,110],
[86,104,132,134,91,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,84,96,111,101,100],
[116,0,121,108,105,113,115,114],
[112,90,0,83,92,113,103,98],
[127,103,128,0,114,112,110,111],
[115,106,119,97,0,119,115,114],
[100,98,98,99,92,0,102,101],
[110,96,108,101,96,109,0,109],
[111,97,113,100,97,110,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,96,96,96,87,106],
[113,0,110,102,100,99,98,112],
[113,101,0,92,94,94,108,114],
[115,109,119,0,105,84,115,109],
[115,111,117,106,0,115,116,104],
[115,112,117,127,96,0,105,115],
[124,113,103,96,95,106,0,109],
[105,99,97,102,107,96,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,105,106,93,96,100,106],
[120,0,103,96,117,82,111,91],
[106,108,0,106,116,97,114,95],
[105,115,105,0,97,115,112,113],
[118,94,95,114,0,104,107,86],
[115,129,114,96,107,0,124,102],
[111,100,97,99,104,87,0,109],
[105,120,116,98,125,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,109,105,80,90,97,107],
[91,0,89,64,85,86,79,125],
[102,122,0,123,112,75,100,124],
[106,147,88,0,76,98,103,117],
[131,126,99,135,0,121,115,130],
[121,125,136,113,90,0,97,132],
[114,132,111,108,96,114,0,115],
[104,86,87,94,81,79,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,123,103,110,111,118,101],
[82,0,121,100,126,138,122,93],
[88,90,0,110,94,97,89,84],
[108,111,101,0,111,142,106,101],
[101,85,117,100,0,101,98,103],
[100,73,114,69,110,0,85,78],
[93,89,122,105,113,126,0,117],
[110,118,127,110,108,133,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,124,116,109,115,99],
[105,0,98,107,136,121,137,83],
[105,113,0,144,106,95,101,107],
[87,104,67,0,113,107,99,106],
[95,75,105,98,0,84,128,92],
[102,90,116,104,127,0,111,98],
[96,74,110,112,83,100,0,91],
[112,128,104,105,119,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,89,118,117,97,96],
[108,0,109,107,118,129,94,108],
[105,102,0,99,129,130,117,114],
[122,104,112,0,124,117,113,104],
[93,93,82,87,0,110,94,99],
[94,82,81,94,101,0,95,89],
[114,117,94,98,117,116,0,107],
[115,103,97,107,112,122,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,90,85,84,64,99,75],
[126,0,107,93,120,90,106,66],
[121,104,0,111,118,100,128,91],
[126,118,100,0,89,107,92,107],
[127,91,93,122,0,76,113,94],
[147,121,111,104,135,0,107,98],
[112,105,83,119,98,104,0,83],
[136,145,120,104,117,113,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,103,102,101,117,93],
[113,0,112,124,105,103,112,99],
[107,99,0,120,109,102,117,105],
[108,87,91,0,102,101,122,92],
[109,106,102,109,0,110,112,103],
[110,108,109,110,101,0,118,111],
[94,99,94,89,99,93,0,85],
[118,112,106,119,108,100,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,78,104,84,101,112,111],
[106,0,93,98,97,100,104,112],
[133,118,0,106,101,119,103,114],
[107,113,105,0,104,118,116,111],
[127,114,110,107,0,107,103,121],
[110,111,92,93,104,0,108,122],
[99,107,108,95,108,103,0,118],
[100,99,97,100,90,89,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,123,114,99,127,125,95],
[70,0,73,81,81,114,111,99],
[88,138,0,108,84,105,110,133],
[97,130,103,0,83,117,129,100],
[112,130,127,128,0,130,115,102],
[84,97,106,94,81,0,90,106],
[86,100,101,82,96,121,0,93],
[116,112,78,111,109,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,111,108,104,114,116],
[98,0,98,113,106,93,100,108],
[105,113,0,119,118,110,105,112],
[100,98,92,0,96,94,100,103],
[103,105,93,115,0,98,101,112],
[107,118,101,117,113,0,112,108],
[97,111,106,111,110,99,0,106],
[95,103,99,108,99,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,119,105,84,108,91],
[93,0,90,102,102,97,95,101],
[102,121,0,117,109,107,99,107],
[92,109,94,0,88,92,96,100],
[106,109,102,123,0,97,109,104],
[127,114,104,119,114,0,111,104],
[103,116,112,115,102,100,0,102],
[120,110,104,111,107,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,112,100,99,100,123,86],
[90,0,95,104,76,93,118,97],
[99,116,0,107,82,105,128,97],
[111,107,104,0,115,113,124,112],
[112,135,129,96,0,116,121,119],
[111,118,106,98,95,0,126,106],
[88,93,83,87,90,85,0,79],
[125,114,114,99,92,105,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,110,111,92,102,109,97],
[126,0,120,98,106,115,114,105],
[101,91,0,88,88,101,86,79],
[100,113,123,0,99,107,107,115],
[119,105,123,112,0,101,128,117],
[109,96,110,104,110,0,116,118],
[102,97,125,104,83,95,0,106],
[114,106,132,96,94,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,122,102,117,95,128],
[92,0,104,110,104,119,96,98],
[116,107,0,123,125,114,112,90],
[89,101,88,0,96,81,100,95],
[109,107,86,115,0,125,127,98],
[94,92,97,130,86,0,114,89],
[116,115,99,111,84,97,0,88],
[83,113,121,116,113,122,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,120,109,110,106,101],
[110,0,119,140,120,111,105,106],
[112,92,0,136,112,97,100,108],
[91,71,75,0,84,79,72,81],
[102,91,99,127,0,104,101,88],
[101,100,114,132,107,0,94,93],
[105,106,111,139,110,117,0,104],
[110,105,103,130,123,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,96,105,92,108,100,107],
[100,0,99,109,102,113,113,90],
[115,112,0,110,106,117,110,93],
[106,102,101,0,102,111,113,103],
[119,109,105,109,0,117,106,108],
[103,98,94,100,94,0,97,89],
[111,98,101,98,105,114,0,91],
[104,121,118,108,103,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,102,95,114,116,100],
[117,0,97,114,125,114,122,112],
[110,114,0,98,116,113,115,119],
[109,97,113,0,114,110,117,102],
[116,86,95,97,0,120,112,98],
[97,97,98,101,91,0,111,95],
[95,89,96,94,99,100,0,86],
[111,99,92,109,113,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,104,111,116,111,106],
[106,0,107,112,103,114,103,113],
[111,104,0,110,116,113,104,113],
[107,99,101,0,119,102,96,121],
[100,108,95,92,0,98,96,103],
[95,97,98,109,113,0,103,111],
[100,108,107,115,115,108,0,112],
[105,98,98,90,108,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,122,95,95,112,100,106],
[115,0,126,99,112,127,114,106],
[89,85,0,86,93,98,94,96],
[116,112,125,0,101,120,105,111],
[116,99,118,110,0,120,107,106],
[99,84,113,91,91,0,95,91],
[111,97,117,106,104,116,0,108],
[105,105,115,100,105,120,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,92,123,76,90,106,92],
[90,0,106,91,74,73,120,106],
[119,105,0,73,60,88,89,88],
[88,120,138,0,92,119,91,150],
[135,137,151,119,0,89,105,104],
[121,138,123,92,122,0,91,105],
[105,91,122,120,106,120,0,121],
[119,105,123,61,107,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,115,119,106,137,120,115],
[117,0,94,98,74,97,107,127],
[96,117,0,110,90,93,106,98],
[92,113,101,0,94,89,126,80],
[105,137,121,117,0,124,115,96],
[74,114,118,122,87,0,97,127],
[91,104,105,85,96,114,0,96],
[96,84,113,131,115,84,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,102,102,104,103,115],
[100,0,93,104,114,103,100,104],
[116,118,0,116,109,103,106,121],
[109,107,95,0,111,108,111,107],
[109,97,102,100,0,105,103,107],
[107,108,108,103,106,0,103,118],
[108,111,105,100,108,108,0,105],
[96,107,90,104,104,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,118,110,116,105,104],
[110,0,114,108,110,104,106,114],
[107,97,0,109,99,94,110,89],
[93,103,102,0,113,98,117,86],
[101,101,112,98,0,103,114,107],
[95,107,117,113,108,0,103,95],
[106,105,101,94,97,108,0,107],
[107,97,122,125,104,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,110,95,107,101,114],
[98,0,106,110,109,108,101,106],
[111,105,0,100,115,116,106,112],
[101,101,111,0,112,116,106,120],
[116,102,96,99,0,106,101,106],
[104,103,95,95,105,0,103,102],
[110,110,105,105,110,108,0,121],
[97,105,99,91,105,109,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,87,68,86,70,50,86],
[124,0,104,68,85,70,69,69],
[124,107,0,140,103,108,124,121],
[143,143,71,0,139,125,125,141],
[125,126,108,72,0,126,90,126],
[141,141,103,86,85,0,121,121],
[161,142,87,86,121,90,0,105],
[125,142,90,70,85,90,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,109,109,110,115,88,100],
[95,0,108,100,96,95,78,93],
[102,103,0,88,109,102,94,106],
[102,111,123,0,113,118,99,109],
[101,115,102,98,0,102,93,104],
[96,116,109,93,109,0,96,102],
[123,133,117,112,118,115,0,102],
[111,118,105,102,107,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,104,110,99,107,119],
[107,0,112,105,114,108,119,127],
[100,99,0,105,106,100,105,117],
[107,106,106,0,110,103,110,126],
[101,97,105,101,0,96,104,117],
[112,103,111,108,115,0,118,121],
[104,92,106,101,107,93,0,109],
[92,84,94,85,94,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,120,87,111,114,99],
[111,0,105,111,105,119,107,106],
[96,106,0,126,124,116,99,107],
[91,100,85,0,81,105,91,92],
[124,106,87,130,0,118,103,119],
[100,92,95,106,93,0,106,97],
[97,104,112,120,108,105,0,115],
[112,105,104,119,92,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,130,102,104,117,143,101],
[76,0,82,83,77,81,86,81],
[81,129,0,110,96,109,111,87],
[109,128,101,0,107,98,112,94],
[107,134,115,104,0,115,136,113],
[94,130,102,113,96,0,126,95],
[68,125,100,99,75,85,0,73],
[110,130,124,117,98,116,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,108,104,108,111,87],
[98,0,71,104,97,106,101,116],
[116,140,0,116,107,117,123,95],
[103,107,95,0,105,105,117,102],
[107,114,104,106,0,131,105,98],
[103,105,94,106,80,0,105,113],
[100,110,88,94,106,106,0,93],
[124,95,116,109,113,98,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,112,88,110,120,128],
[108,0,110,114,104,108,128,114],
[100,101,0,104,103,93,119,103],
[99,97,107,0,110,96,111,123],
[123,107,108,101,0,113,118,121],
[101,103,118,115,98,0,103,105],
[91,83,92,100,93,108,0,95],
[83,97,108,88,90,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,110,107,99,115,100],
[114,0,115,122,118,109,122,103],
[105,96,0,111,116,103,121,98],
[101,89,100,0,119,107,116,103],
[104,93,95,92,0,98,101,89],
[112,102,108,104,113,0,122,107],
[96,89,90,95,110,89,0,102],
[111,108,113,108,122,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,124,115,119,91,135,121],
[113,0,102,95,114,82,130,118],
[87,109,0,93,109,94,114,119],
[96,116,118,0,142,113,133,130],
[92,97,102,69,0,96,117,103],
[120,129,117,98,115,0,132,119],
[76,81,97,78,94,79,0,107],
[90,93,92,81,108,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,105,123,99,108,95],
[107,0,109,104,119,111,117,114],
[103,102,0,93,117,81,114,85],
[106,107,118,0,113,109,114,94],
[88,92,94,98,0,92,109,105],
[112,100,130,102,119,0,122,106],
[103,94,97,97,102,89,0,97],
[116,97,126,117,106,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,107,103,117,107,118],
[110,0,116,98,102,107,105,113],
[104,95,0,103,95,110,101,113],
[104,113,108,0,127,126,115,114],
[108,109,116,84,0,123,107,113],
[94,104,101,85,88,0,94,106],
[104,106,110,96,104,117,0,110],
[93,98,98,97,98,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,95,105,105,106,90],
[113,0,114,105,108,122,113,100],
[110,97,0,120,120,113,119,105],
[116,106,91,0,96,97,109,101],
[106,103,91,115,0,108,119,89],
[106,89,98,114,103,0,104,112],
[105,98,92,102,92,107,0,101],
[121,111,106,110,122,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,91,97,86,105,104,102],
[126,0,103,125,112,110,118,118],
[120,108,0,115,101,116,105,101],
[114,86,96,0,87,91,102,104],
[125,99,110,124,0,117,110,111],
[106,101,95,120,94,0,99,101],
[107,93,106,109,101,112,0,113],
[109,93,110,107,100,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,103,113,106,101,117],
[95,0,104,85,89,97,83,91],
[91,107,0,90,95,101,84,98],
[108,126,121,0,93,101,105,112],
[98,122,116,118,0,99,108,118],
[105,114,110,110,112,0,94,105],
[110,128,127,106,103,117,0,121],
[94,120,113,99,93,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,109,108,101,100,95],
[104,0,119,111,109,111,111,108],
[104,92,0,107,112,111,100,97],
[102,100,104,0,112,107,100,104],
[103,102,99,99,0,104,109,105],
[110,100,100,104,107,0,98,105],
[111,100,111,111,102,113,0,102],
[116,103,114,107,106,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,98,98,94,119,101,89],
[118,0,108,118,116,110,119,98],
[113,103,0,106,97,117,113,90],
[113,93,105,0,115,116,117,109],
[117,95,114,96,0,112,103,102],
[92,101,94,95,99,0,94,92],
[110,92,98,94,108,117,0,82],
[122,113,121,102,109,119,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,95,86,110,100,105],
[107,0,96,103,107,120,102,104],
[116,115,0,123,99,119,99,113],
[116,108,88,0,96,101,104,100],
[125,104,112,115,0,139,110,114],
[101,91,92,110,72,0,100,85],
[111,109,112,107,101,111,0,90],
[106,107,98,111,97,126,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,109,121,125,116,104],
[117,0,103,116,114,134,122,107],
[99,108,0,119,113,123,103,99],
[102,95,92,0,93,118,100,97],
[90,97,98,118,0,124,116,106],
[86,77,88,93,87,0,89,94],
[95,89,108,111,95,122,0,107],
[107,104,112,114,105,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,108,117,108,113,112,121],
[111,0,110,119,104,118,118,113],
[103,101,0,107,97,114,104,116],
[94,92,104,0,97,114,108,105],
[103,107,114,114,0,115,111,110],
[98,93,97,97,96,0,83,100],
[99,93,107,103,100,128,0,101],
[90,98,95,106,101,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,109,112,109,106,94,100],
[76,0,93,87,97,89,95,87],
[102,118,0,106,113,106,102,107],
[99,124,105,0,112,102,92,99],
[102,114,98,99,0,83,94,98],
[105,122,105,109,128,0,100,97],
[117,116,109,119,117,111,0,104],
[111,124,104,112,113,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,96,96,102,107,95],
[116,0,95,88,92,120,112,105],
[116,116,0,110,103,105,124,106],
[115,123,101,0,108,112,112,103],
[115,119,108,103,0,116,124,97],
[109,91,106,99,95,0,107,94],
[104,99,87,99,87,104,0,103],
[116,106,105,108,114,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,96,93,99,104,96],
[106,0,119,95,92,102,95,105],
[101,92,0,92,100,106,86,96],
[115,116,119,0,105,112,109,118],
[118,119,111,106,0,116,109,98],
[112,109,105,99,95,0,101,99],
[107,116,125,102,102,110,0,114],
[115,106,115,93,113,112,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,112,120,112,104,105,114],
[116,0,105,114,120,115,113,118],
[99,106,0,112,123,113,102,119],
[91,97,99,0,101,95,87,102],
[99,91,88,110,0,103,95,105],
[107,96,98,116,108,0,114,109],
[106,98,109,124,116,97,0,114],
[97,93,92,109,106,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,106,108,101,91,101],
[110,0,103,110,114,102,98,106],
[116,108,0,107,109,99,107,101],
[105,101,104,0,113,106,101,98],
[103,97,102,98,0,106,95,91],
[110,109,112,105,105,0,101,110],
[120,113,104,110,116,110,0,102],
[110,105,110,113,120,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,130,115,101,86,129,101],
[68,0,110,55,113,83,95,54],
[81,101,0,99,97,113,153,111],
[96,156,112,0,127,85,139,110],
[110,98,114,84,0,58,114,126],
[125,128,98,126,153,0,141,126],
[82,116,58,72,97,70,0,99],
[110,157,100,101,85,85,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,110,100,101,112,113,102],
[108,0,110,107,103,114,112,106],
[101,101,0,110,108,111,110,100],
[111,104,101,0,97,112,112,98],
[110,108,103,114,0,117,118,105],
[99,97,100,99,94,0,103,96],
[98,99,101,99,93,108,0,101],
[109,105,111,113,106,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,88,99,79,95,99],
[119,0,94,92,129,89,110,120],
[112,117,0,100,131,109,109,115],
[123,119,111,0,117,98,140,134],
[112,82,80,94,0,79,100,85],
[132,122,102,113,132,0,135,139],
[116,101,102,71,111,76,0,101],
[112,91,96,77,126,72,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,102,114,95,92,91],
[112,0,110,123,106,97,111,100],
[106,101,0,109,113,101,96,93],
[109,88,102,0,127,100,102,102],
[97,105,98,84,0,91,101,95],
[116,114,110,111,120,0,102,103],
[119,100,115,109,110,109,0,107],
[120,111,118,109,116,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,108,87,87,87,95,74],
[135,0,118,106,98,113,120,114],
[103,93,0,100,106,91,112,90],
[124,105,111,0,111,104,112,101],
[124,113,105,100,0,106,129,104],
[124,98,120,107,105,0,139,100],
[116,91,99,99,82,72,0,88],
[137,97,121,110,107,111,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,110,103,106,108,111],
[113,0,97,107,99,111,98,114],
[104,114,0,109,112,103,102,107],
[101,104,102,0,114,110,104,108],
[108,112,99,97,0,103,111,108],
[105,100,108,101,108,0,102,102],
[103,113,109,107,100,109,0,113],
[100,97,104,103,103,109,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,138,104,157,132,104,120,121],
[73,0,79,141,87,65,85,93],
[107,132,0,137,93,102,117,108],
[54,70,74,0,61,62,74,86],
[79,124,118,150,0,111,104,143],
[107,146,109,149,100,0,104,140],
[91,126,94,137,107,107,0,116],
[90,118,103,125,68,71,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,116,120,104,110,111,105],
[93,0,108,110,94,103,100,109],
[95,103,0,101,97,89,101,100],
[91,101,110,0,92,98,102,95],
[107,117,114,119,0,101,117,107],
[101,108,122,113,110,0,108,102],
[100,111,110,109,94,103,0,110],
[106,102,111,116,104,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,96,96,102,95,102],
[117,0,114,104,113,112,101,113],
[107,97,0,107,98,101,112,113],
[115,107,104,0,100,110,118,104],
[115,98,113,111,0,116,110,106],
[109,99,110,101,95,0,103,97],
[116,110,99,93,101,108,0,106],
[109,98,98,107,105,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,126,131,108,106,103,113],
[83,0,105,95,72,99,81,99],
[85,106,0,80,80,90,85,95],
[80,116,131,0,96,109,92,82],
[103,139,131,115,0,116,109,146],
[105,112,121,102,95,0,89,127],
[108,130,126,119,102,122,0,105],
[98,112,116,129,65,84,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,107,111,107,103,118,100],
[88,0,103,98,97,108,120,99],
[104,108,0,107,113,122,116,112],
[100,113,104,0,112,111,112,108],
[104,114,98,99,0,123,129,111],
[108,103,89,100,88,0,120,93],
[93,91,95,99,82,91,0,92],
[111,112,99,103,100,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,101,94,109,109,91],
[108,0,119,112,105,111,113,117],
[92,92,0,100,91,89,112,90],
[110,99,111,0,93,101,121,108],
[117,106,120,118,0,102,115,106],
[102,100,122,110,109,0,106,100],
[102,98,99,90,96,105,0,95],
[120,94,121,103,105,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,141,111,120,134,120,76],
[102,0,95,108,95,130,128,113],
[70,116,0,78,61,86,101,75],
[100,103,133,0,107,110,96,85],
[91,116,150,104,0,107,105,113],
[77,81,125,101,104,0,109,69],
[91,83,110,115,106,102,0,89],
[135,98,136,126,98,142,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,106,103,100,108,111],
[102,0,110,102,110,117,109,113],
[113,101,0,111,116,127,113,121],
[105,109,100,0,119,113,104,114],
[108,101,95,92,0,106,105,109],
[111,94,84,98,105,0,99,109],
[103,102,98,107,106,112,0,109],
[100,98,90,97,102,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,134,127,112,100,113],
[97,0,105,101,108,77,93,99],
[91,106,0,119,121,101,110,121],
[77,110,92,0,125,83,121,73],
[84,103,90,86,0,93,108,94],
[99,134,110,128,118,0,113,111],
[111,118,101,90,103,98,0,101],
[98,112,90,138,117,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,113,96,95,96,98],
[116,0,106,117,96,95,105,103],
[111,105,0,113,106,108,101,109],
[98,94,98,0,99,101,94,90],
[115,115,105,112,0,110,108,110],
[116,116,103,110,101,0,110,105],
[115,106,110,117,103,101,0,111],
[113,108,102,121,101,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,101,113,99,105,102],
[97,0,98,95,103,89,92,99],
[112,113,0,105,105,97,104,109],
[110,116,106,0,104,94,109,110],
[98,108,106,107,0,107,107,102],
[112,122,114,117,104,0,112,110],
[106,119,107,102,104,99,0,106],
[109,112,102,101,109,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,108,100,107,83,112,97],
[97,0,100,108,132,106,114,117],
[103,111,0,94,112,97,112,100],
[111,103,117,0,104,107,121,126],
[104,79,99,107,0,86,123,89],
[128,105,114,104,125,0,91,101],
[99,97,99,90,88,120,0,94],
[114,94,111,85,122,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,101,94,98,106,95,105],
[90,0,100,104,103,101,106,103],
[110,111,0,106,88,105,109,112],
[117,107,105,0,118,97,120,108],
[113,108,123,93,0,105,115,102],
[105,110,106,114,106,0,107,117],
[116,105,102,91,96,104,0,100],
[106,108,99,103,109,94,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,115,105,104,113,106],
[109,0,103,113,107,110,118,112],
[112,108,0,116,105,117,120,105],
[96,98,95,0,107,106,106,105],
[106,104,106,104,0,103,109,112],
[107,101,94,105,108,0,114,110],
[98,93,91,105,102,97,0,110],
[105,99,106,106,99,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,82,107,96,98,83,103],
[116,0,104,138,111,125,112,122],
[129,107,0,122,107,120,109,105],
[104,73,89,0,87,91,93,97],
[115,100,104,124,0,115,115,128],
[113,86,91,120,96,0,92,109],
[128,99,102,118,96,119,0,110],
[108,89,106,114,83,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,134,136,124,115,96,86],
[110,0,100,100,109,82,76,66],
[77,111,0,113,92,72,117,82],
[75,111,98,0,106,70,75,88],
[87,102,119,105,0,81,95,85],
[96,129,139,141,130,0,109,112],
[115,135,94,136,116,102,0,94],
[125,145,129,123,126,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,120,125,121,108,112],
[95,0,96,100,111,104,110,109],
[111,115,0,121,121,111,104,120],
[91,111,90,0,101,101,88,100],
[86,100,90,110,0,104,104,94],
[90,107,100,110,107,0,113,101],
[103,101,107,123,107,98,0,107],
[99,102,91,111,117,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,101,108,108,105,105,128],
[102,0,92,103,94,99,106,117],
[110,119,0,111,103,97,113,110],
[103,108,100,0,91,105,108,107],
[103,117,108,120,0,101,113,126],
[106,112,114,106,110,0,101,109],
[106,105,98,103,98,110,0,102],
[83,94,101,104,85,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,108,107,101,110,91],
[103,0,108,104,98,109,110,107],
[114,103,0,100,92,106,110,101],
[103,107,111,0,102,104,106,108],
[104,113,119,109,0,104,108,109],
[110,102,105,107,107,0,106,107],
[101,101,101,105,103,105,0,104],
[120,104,110,103,102,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,105,105,100,105,110],
[110,0,110,121,110,107,115,103],
[103,101,0,106,106,107,107,106],
[106,90,105,0,91,88,109,102],
[106,101,105,120,0,101,114,104],
[111,104,104,123,110,0,114,112],
[106,96,104,102,97,97,0,97],
[101,108,105,109,107,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,109,109,93,120,101],
[119,0,94,116,104,109,131,113],
[103,117,0,116,97,104,102,114],
[102,95,95,0,103,103,107,104],
[102,107,114,108,0,92,128,106],
[118,102,107,108,119,0,115,117],
[91,80,109,104,83,96,0,91],
[110,98,97,107,105,94,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,115,114,99,96,99,110],
[125,0,126,107,123,104,111,116],
[96,85,0,99,101,101,93,105],
[97,104,112,0,112,107,107,116],
[112,88,110,99,0,95,100,124],
[115,107,110,104,116,0,101,114],
[112,100,118,104,111,110,0,108],
[101,95,106,95,87,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,109,133,121,106,117,101],
[101,0,95,104,119,100,103,89],
[102,116,0,111,111,99,102,108],
[78,107,100,0,113,116,97,113],
[90,92,100,98,0,98,93,89],
[105,111,112,95,113,0,100,97],
[94,108,109,114,118,111,0,120],
[110,122,103,98,122,114,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,90,81,108,94,98,101],
[127,0,102,104,122,106,115,119],
[121,109,0,102,120,103,119,120],
[130,107,109,0,119,99,114,113],
[103,89,91,92,0,95,97,99],
[117,105,108,112,116,0,118,113],
[113,96,92,97,114,93,0,109],
[110,92,91,98,112,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,86,93,94,94,94],
[114,0,106,88,94,95,102,94],
[115,105,0,83,96,96,102,105],
[125,123,128,0,98,124,130,111],
[118,117,115,113,0,104,113,116],
[117,116,115,87,107,0,110,113],
[117,109,109,81,98,101,0,103],
[117,117,106,100,95,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,104,109,120,117,109],
[96,0,110,101,96,108,107,98],
[103,101,0,99,99,106,103,91],
[107,110,112,0,120,121,114,103],
[102,115,112,91,0,115,116,103],
[91,103,105,90,96,0,109,103],
[94,104,108,97,95,102,0,95],
[102,113,120,108,108,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,99,110,103,122,112],
[109,0,123,105,106,88,109,94],
[99,88,0,114,97,114,105,79],
[112,106,97,0,111,119,132,91],
[101,105,114,100,0,98,84,105],
[108,123,97,92,113,0,110,96],
[89,102,106,79,127,101,0,107],
[99,117,132,120,106,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,85,107,87,99,66],
[112,0,105,109,128,106,114,93],
[115,106,0,101,132,101,123,105],
[126,102,110,0,118,111,122,110],
[104,83,79,93,0,95,102,91],
[124,105,110,100,116,0,120,104],
[112,97,88,89,109,91,0,101],
[145,118,106,101,120,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,108,104,107,98,121],
[86,0,125,112,125,120,116,116],
[92,86,0,110,123,116,94,102],
[103,99,101,0,134,105,113,99],
[107,86,88,77,0,92,75,80],
[104,91,95,106,119,0,115,115],
[113,95,117,98,136,96,0,117],
[90,95,109,112,131,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,77,26,25,77,26,159],
[160,0,79,80,79,77,80,185],
[134,132,0,80,107,77,107,159],
[185,131,131,0,105,131,106,185],
[186,132,104,106,0,103,107,211],
[134,134,134,80,108,0,134,134],
[185,131,104,105,104,77,0,185],
[52,26,52,26,0,77,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,122,107,131,111,104,126],
[96,0,107,94,130,124,109,122],
[89,104,0,84,115,106,107,106],
[104,117,127,0,119,122,134,117],
[80,81,96,92,0,98,112,120],
[100,87,105,89,113,0,120,130],
[107,102,104,77,99,91,0,108],
[85,89,105,94,91,81,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,105,113,107,103,115],
[101,0,110,106,104,107,94,100],
[107,101,0,110,107,113,110,104],
[106,105,101,0,113,104,97,115],
[98,107,104,98,0,112,96,113],
[104,104,98,107,99,0,103,112],
[108,117,101,114,115,108,0,120],
[96,111,107,96,98,99,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,83,89,99,90,86,88],
[99,0,92,84,121,88,98,103],
[128,119,0,113,123,103,102,107],
[122,127,98,0,118,99,110,104],
[112,90,88,93,0,90,100,97],
[121,123,108,112,121,0,104,111],
[125,113,109,101,111,107,0,117],
[123,108,104,107,114,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,126,117,118,100,112],
[117,0,101,120,115,123,107,130],
[115,110,0,112,121,130,103,96],
[85,91,99,0,99,116,93,101],
[94,96,90,112,0,121,100,106],
[93,88,81,95,90,0,99,90],
[111,104,108,118,111,112,0,104],
[99,81,115,110,105,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,99,111,99,109,109,118],
[90,0,95,107,103,110,105,128],
[112,116,0,120,116,116,105,125],
[100,104,91,0,100,93,96,115],
[112,108,95,111,0,106,103,120],
[102,101,95,118,105,0,113,98],
[102,106,106,115,108,98,0,107],
[93,83,86,96,91,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,120,124,118,105,108],
[103,0,89,106,111,106,96,96],
[105,122,0,124,127,119,99,93],
[91,105,87,0,124,105,107,95],
[87,100,84,87,0,96,101,72],
[93,105,92,106,115,0,97,92],
[106,115,112,104,110,114,0,96],
[103,115,118,116,139,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,106,92,97,120,116],
[110,0,97,106,81,101,101,106],
[114,114,0,118,106,110,105,124],
[105,105,93,0,100,99,112,102],
[119,130,105,111,0,110,120,120],
[114,110,101,112,101,0,109,110],
[91,110,106,99,91,102,0,100],
[95,105,87,109,91,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,89,95,98,109,101,111],
[99,0,97,91,94,94,108,117],
[122,114,0,111,97,112,118,130],
[116,120,100,0,107,116,108,130],
[113,117,114,104,0,119,113,126],
[102,117,99,95,92,0,97,113],
[110,103,93,103,98,114,0,121],
[100,94,81,81,85,98,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,108,97,97,98,108],
[111,0,100,107,92,109,106,109],
[116,111,0,109,98,115,108,115],
[103,104,102,0,87,95,93,100],
[114,119,113,124,0,105,108,111],
[114,102,96,116,106,0,97,112],
[113,105,103,118,103,114,0,110],
[103,102,96,111,100,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,107,77,96,95,94],
[115,0,101,103,130,102,111,96],
[105,110,0,101,110,75,91,95],
[104,108,110,0,96,80,92,101],
[134,81,101,115,0,108,104,107],
[115,109,136,131,103,0,107,118],
[116,100,120,119,107,104,0,99],
[117,115,116,110,104,93,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,135,89,91,80,96,81],
[136,0,137,116,119,102,96,109],
[76,74,0,85,64,74,103,105],
[122,95,126,0,105,117,111,123],
[120,92,147,106,0,99,86,85],
[131,109,137,94,112,0,113,113],
[115,115,108,100,125,98,0,107],
[130,102,106,88,126,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,73,86,119,116,102,108],
[113,0,92,113,109,113,110,114],
[138,119,0,127,125,117,98,128],
[125,98,84,0,113,113,98,138],
[92,102,86,98,0,121,91,124],
[95,98,94,98,90,0,100,115],
[109,101,113,113,120,111,0,111],
[103,97,83,73,87,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,121,114,113,118,117,105],
[80,0,85,95,94,93,91,96],
[90,126,0,98,100,112,115,106],
[97,116,113,0,91,109,106,97],
[98,117,111,120,0,111,116,112],
[93,118,99,102,100,0,105,88],
[94,120,96,105,95,106,0,108],
[106,115,105,114,99,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,91,109,111,97,100],
[95,0,100,88,98,99,99,108],
[96,111,0,110,107,116,115,107],
[120,123,101,0,116,123,124,112],
[102,113,104,95,0,116,103,104],
[100,112,95,88,95,0,101,104],
[114,112,96,87,108,110,0,110],
[111,103,104,99,107,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,100,104,110,115,103],
[107,0,128,99,121,105,113,108],
[88,83,0,59,80,91,86,79],
[111,112,152,0,118,95,123,108],
[107,90,131,93,0,73,100,91],
[101,106,120,116,138,0,120,105],
[96,98,125,88,111,91,0,88],
[108,103,132,103,120,106,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,83,87,90,99,98,89],
[123,0,107,114,107,109,111,105],
[128,104,0,107,105,114,109,103],
[124,97,104,0,110,117,108,106],
[121,104,106,101,0,110,115,97],
[112,102,97,94,101,0,105,93],
[113,100,102,103,96,106,0,96],
[122,106,108,105,114,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,118,121,115,124,102,121],
[87,0,101,117,102,90,98,95],
[93,110,0,110,99,107,102,95],
[90,94,101,0,105,85,95,106],
[96,109,112,106,0,105,108,100],
[87,121,104,126,106,0,110,112],
[109,113,109,116,103,101,0,80],
[90,116,116,105,111,99,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,117,117,117,93,141,116],
[118,0,140,70,95,72,96,116],
[94,71,0,70,95,96,48,116],
[94,141,141,0,165,117,119,118],
[94,116,116,46,0,92,72,116],
[118,139,115,94,119,0,95,116],
[70,115,163,92,139,116,0,140],
[95,95,95,93,95,95,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,96,103,108,102,97],
[115,0,115,94,109,129,118,101],
[109,96,0,111,92,93,96,98],
[115,117,100,0,99,113,92,97],
[108,102,119,112,0,115,99,100],
[103,82,118,98,96,0,114,111],
[109,93,115,119,112,97,0,80],
[114,110,113,114,111,100,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,108,114,122,107,125],
[107,0,111,114,116,126,105,116],
[94,100,0,105,119,122,99,106],
[103,97,106,0,116,119,111,112],
[97,95,92,95,0,116,94,89],
[89,85,89,92,95,0,92,85],
[104,106,112,100,117,119,0,113],
[86,95,105,99,122,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,105,117,104,103,99],
[99,0,99,102,109,105,95,99],
[107,112,0,111,123,109,105,108],
[106,109,100,0,117,109,103,104],
[94,102,88,94,0,89,90,96],
[107,106,102,102,122,0,106,111],
[108,116,106,108,121,105,0,111],
[112,112,103,107,115,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,109,101,114,90,95],
[113,0,87,115,116,108,85,114],
[111,124,0,122,137,125,106,105],
[102,96,89,0,75,96,86,106],
[110,95,74,136,0,118,102,114],
[97,103,86,115,93,0,92,119],
[121,126,105,125,109,119,0,131],
[116,97,106,105,97,92,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,108,92,106,90,96],
[104,0,96,91,103,94,99,91],
[104,115,0,100,98,99,101,105],
[103,120,111,0,116,103,109,102],
[119,108,113,95,0,89,97,99],
[105,117,112,108,122,0,109,118],
[121,112,110,102,114,102,0,105],
[115,120,106,109,112,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,93,85,92,92,112,86],
[116,0,97,104,101,115,125,118],
[118,114,0,99,118,118,117,98],
[126,107,112,0,119,120,123,101],
[119,110,93,92,0,113,108,108],
[119,96,93,91,98,0,110,104],
[99,86,94,88,103,101,0,88],
[125,93,113,110,103,107,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,105,100,94,85,73],
[109,0,116,126,107,116,116,103],
[120,95,0,103,104,100,104,101],
[106,85,108,0,103,98,85,103],
[111,104,107,108,0,101,93,100],
[117,95,111,113,110,0,102,104],
[126,95,107,126,118,109,0,106],
[138,108,110,108,111,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,119,121,106,118,100,110],
[92,0,97,102,95,98,93,104],
[92,114,0,116,117,109,112,103],
[90,109,95,0,103,108,89,101],
[105,116,94,108,0,104,99,101],
[93,113,102,103,107,0,95,106],
[111,118,99,122,112,116,0,106],
[101,107,108,110,110,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,79,117,95,108,84,118],
[112,0,86,111,92,104,85,108],
[132,125,0,111,110,133,102,134],
[94,100,100,0,93,98,106,112],
[116,119,101,118,0,106,88,116],
[103,107,78,113,105,0,95,116],
[127,126,109,105,123,116,0,134],
[93,103,77,99,95,95,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,95,98,92,111,94],
[110,0,105,105,98,99,116,93],
[107,106,0,103,93,99,107,105],
[116,106,108,0,106,105,117,109],
[113,113,118,105,0,112,115,102],
[119,112,112,106,99,0,112,111],
[100,95,104,94,96,99,0,97],
[117,118,106,102,109,100,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,86,121,106,103,117,97],
[109,0,101,125,121,112,120,103],
[125,110,0,138,111,104,125,117],
[90,86,73,0,96,86,103,83],
[105,90,100,115,0,112,131,99],
[108,99,107,125,99,0,123,93],
[94,91,86,108,80,88,0,90],
[114,108,94,128,112,118,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,112,100,109,102,117],
[109,0,101,116,101,106,115,110],
[109,110,0,114,103,98,111,117],
[99,95,97,0,101,93,93,118],
[111,110,108,110,0,103,108,117],
[102,105,113,118,108,0,89,121],
[109,96,100,118,103,122,0,117],
[94,101,94,93,94,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,94,86,84,140,116,72],
[90,0,74,128,104,139,87,70],
[117,137,0,91,120,112,91,100],
[125,83,120,0,105,130,78,105],
[127,107,91,106,0,132,98,117],
[71,72,99,81,79,0,63,84],
[95,124,120,133,113,148,0,116],
[139,141,111,106,94,127,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,111,111,100,104,114],
[100,0,111,114,103,112,112,101],
[94,100,0,103,96,106,98,95],
[100,97,108,0,107,109,98,100],
[100,108,115,104,0,102,103,110],
[111,99,105,102,109,0,111,107],
[107,99,113,113,108,100,0,107],
[97,110,116,111,101,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,102,105,100,97,96,81],
[124,0,118,92,110,115,101,103],
[109,93,0,98,112,103,85,92],
[106,119,113,0,101,102,117,111],
[111,101,99,110,0,106,107,107],
[114,96,108,109,105,0,110,107],
[115,110,126,94,104,101,0,109],
[130,108,119,100,104,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,127,128,127,170,127,170],
[127,0,85,86,43,128,170,170],
[84,126,0,85,85,168,128,85],
[83,125,126,0,125,211,168,125],
[84,168,126,86,0,169,127,170],
[41,83,43,0,42,0,85,42],
[84,41,83,43,84,126,0,126],
[41,41,126,86,41,169,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,123,104,106,124,118,132],
[113,0,119,104,98,108,117,115],
[88,92,0,93,89,101,111,110],
[107,107,118,0,104,116,113,110],
[105,113,122,107,0,120,119,133],
[87,103,110,95,91,0,107,112],
[93,94,100,98,92,104,0,110],
[79,96,101,101,78,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,111,121,104,115,111],
[102,0,120,138,126,104,99,116],
[109,91,0,108,126,115,126,124],
[100,73,103,0,108,96,101,104],
[90,85,85,103,0,98,88,114],
[107,107,96,115,113,0,109,118],
[96,112,85,110,123,102,0,119],
[100,95,87,107,97,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,115,128,104,90,121],
[98,0,125,120,108,99,117,96],
[90,86,0,105,101,108,100,98],
[96,91,106,0,102,104,84,89],
[83,103,110,109,0,109,97,100],
[107,112,103,107,102,0,90,98],
[121,94,111,127,114,121,0,106],
[90,115,113,122,111,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,97,114,118,115,111],
[108,0,97,113,115,124,112,105],
[102,114,0,102,114,117,109,109],
[114,98,109,0,109,112,106,112],
[97,96,97,102,0,105,94,104],
[93,87,94,99,106,0,104,97],
[96,99,102,105,117,107,0,99],
[100,106,102,99,107,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,128,114,125,118,99,93],
[121,0,91,112,85,102,98,117],
[83,120,0,111,120,107,107,98],
[97,99,100,0,86,113,105,128],
[86,126,91,125,0,91,118,120],
[93,109,104,98,120,0,105,93],
[112,113,104,106,93,106,0,120],
[118,94,113,83,91,118,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,113,106,112,120,112,98],
[122,0,92,99,100,111,132,99],
[98,119,0,106,116,128,122,101],
[105,112,105,0,106,116,124,107],
[99,111,95,105,0,91,114,107],
[91,100,83,95,120,0,117,115],
[99,79,89,87,97,94,0,94],
[113,112,110,104,104,96,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,91,97,105,93,102,119],
[95,0,88,104,101,93,108,111],
[120,123,0,106,107,109,105,111],
[114,107,105,0,105,90,103,118],
[106,110,104,106,0,101,98,111],
[118,118,102,121,110,0,103,118],
[109,103,106,108,113,108,0,117],
[92,100,100,93,100,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,105,123,111,117,114],
[100,0,104,97,100,119,113,109],
[96,107,0,101,113,98,104,115],
[106,114,110,0,108,113,101,121],
[88,111,98,103,0,111,103,116],
[100,92,113,98,100,0,115,101],
[94,98,107,110,108,96,0,102],
[97,102,96,90,95,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,104,68,110,112,102],
[119,0,118,126,68,108,125,117],
[119,93,0,94,96,91,96,111],
[107,85,117,0,94,116,100,131],
[143,143,115,117,0,101,121,126],
[101,103,120,95,110,0,95,120],
[99,86,115,111,90,116,0,118],
[109,94,100,80,85,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,141,124,113,117,115,105],
[80,0,115,111,85,113,84,80],
[70,96,0,108,82,97,54,85],
[87,100,103,0,78,94,75,82],
[98,126,129,133,0,98,69,82],
[94,98,114,117,113,0,92,89],
[96,127,157,136,142,119,0,112],
[106,131,126,129,129,122,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,104,108,95,105,112],
[115,0,107,116,92,106,96,112],
[112,104,0,115,113,107,108,125],
[107,95,96,0,87,103,90,112],
[103,119,98,124,0,109,104,111],
[116,105,104,108,102,0,110,112],
[106,115,103,121,107,101,0,111],
[99,99,86,99,100,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,94,106,96,104,116],
[101,0,95,94,105,96,96,115],
[112,116,0,105,105,97,103,121],
[117,117,106,0,115,106,102,124],
[105,106,106,96,0,94,103,107],
[115,115,114,105,117,0,112,125],
[107,115,108,109,108,99,0,114],
[95,96,90,87,104,86,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,116,124,97,124,125,124],
[125,0,135,142,125,102,109,114],
[95,76,0,87,86,105,89,87],
[87,69,124,0,117,77,69,76],
[114,86,125,94,0,132,109,75],
[87,109,106,134,79,0,97,53],
[86,102,122,142,102,114,0,111],
[87,97,124,135,136,158,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,99,92,97,109,97,112],
[120,0,102,107,116,125,106,122],
[112,109,0,96,123,123,120,114],
[119,104,115,0,114,117,122,121],
[114,95,88,97,0,111,102,103],
[102,86,88,94,100,0,105,105],
[114,105,91,89,109,106,0,106],
[99,89,97,90,108,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,111,97,92,109,105,129],
[89,0,94,97,88,108,95,100],
[100,117,0,102,109,120,117,123],
[114,114,109,0,105,105,102,118],
[119,123,102,106,0,107,116,115],
[102,103,91,106,104,0,104,111],
[106,116,94,109,95,107,0,116],
[82,111,88,93,96,100,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,92,84,105,87,107,83],
[123,0,121,108,118,93,110,115],
[119,90,0,105,117,79,99,108],
[127,103,106,0,104,88,104,112],
[106,93,94,107,0,76,115,81],
[124,118,132,123,135,0,123,103],
[104,101,112,107,96,88,0,100],
[128,96,103,99,130,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,125,118,127,105,110,114],
[85,0,100,93,103,77,96,80],
[86,111,0,93,103,82,104,92],
[93,118,118,0,110,70,99,106],
[84,108,108,101,0,100,87,97],
[106,134,129,141,111,0,122,105],
[101,115,107,112,124,89,0,105],
[97,131,119,105,114,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,115,129,104,111,123,95],
[118,0,101,112,103,124,113,121],
[96,110,0,128,121,107,121,98],
[82,99,83,0,97,113,103,126],
[107,108,90,114,0,113,116,120],
[100,87,104,98,98,0,125,124],
[88,98,90,108,95,86,0,112],
[116,90,113,85,91,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,106,98,104,110,105],
[101,0,107,106,105,99,114,118],
[103,104,0,102,106,90,120,113],
[105,105,109,0,99,99,110,108],
[113,106,105,112,0,110,113,110],
[107,112,121,112,101,0,109,108],
[101,97,91,101,98,102,0,102],
[106,93,98,103,101,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,114,102,117,126,115],
[108,0,106,121,112,113,101,110],
[103,105,0,106,95,103,111,94],
[97,90,105,0,99,98,106,93],
[109,99,116,112,0,102,99,103],
[94,98,108,113,109,0,104,109],
[85,110,100,105,112,107,0,97],
[96,101,117,118,108,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,123,114,107,94,118,86],
[96,0,115,111,97,107,100,104],
[88,96,0,105,88,97,101,92],
[97,100,106,0,87,96,101,96],
[104,114,123,124,0,119,106,113],
[117,104,114,115,92,0,103,109],
[93,111,110,110,105,108,0,103],
[125,107,119,115,98,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,106,109,101,113,106],
[93,0,98,103,110,100,107,94],
[110,113,0,101,117,98,111,86],
[105,108,110,0,115,108,107,105],
[102,101,94,96,0,91,96,93],
[110,111,113,103,120,0,107,85],
[98,104,100,104,115,104,0,98],
[105,117,125,106,118,126,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,94,97,94,97,106,91],
[119,0,107,108,104,100,109,110],
[117,104,0,97,104,98,104,99],
[114,103,114,0,107,106,114,109],
[117,107,107,104,0,101,109,106],
[114,111,113,105,110,0,106,106],
[105,102,107,97,102,105,0,96],
[120,101,112,102,105,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,128,123,116,115,101,119],
[122,0,139,134,119,140,93,138],
[83,72,0,106,111,113,92,76],
[88,77,105,0,87,101,79,87],
[95,92,100,124,0,125,93,105],
[96,71,98,110,86,0,87,88],
[110,118,119,132,118,124,0,98],
[92,73,135,124,106,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,95,113,106,97,108],
[97,0,113,91,88,100,100,103],
[94,98,0,96,103,107,101,92],
[116,120,115,0,113,112,115,104],
[98,123,108,98,0,96,108,95],
[105,111,104,99,115,0,97,98],
[114,111,110,96,103,114,0,100],
[103,108,119,107,116,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,104,106,95,104,116],
[100,0,95,91,104,87,95,88],
[105,116,0,104,118,102,114,107],
[107,120,107,0,112,98,110,118],
[105,107,93,99,0,88,88,106],
[116,124,109,113,123,0,111,98],
[107,116,97,101,123,100,0,106],
[95,123,104,93,105,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,91,103,103,118,113],
[103,0,98,99,103,116,114,112],
[107,113,0,101,133,127,138,126],
[120,112,110,0,107,104,119,116],
[108,108,78,104,0,79,105,114],
[108,95,84,107,132,0,117,112],
[93,97,73,92,106,94,0,105],
[98,99,85,95,97,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,106,105,138,107,113],
[97,0,104,94,92,103,80,87],
[110,107,0,103,110,105,104,110],
[105,117,108,0,95,111,118,109],
[106,119,101,116,0,108,120,122],
[73,108,106,100,103,0,104,108],
[104,131,107,93,91,107,0,101],
[98,124,101,102,89,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,131,119,124,115,95],
[94,0,108,122,110,140,122,111],
[110,103,0,120,111,120,125,115],
[80,89,91,0,101,131,106,88],
[92,101,100,110,0,127,103,111],
[87,71,91,80,84,0,105,89],
[96,89,86,105,108,106,0,78],
[116,100,96,123,100,122,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,94,100,110,107,97,110],
[104,0,111,98,108,103,112,104],
[117,100,0,107,112,96,106,111],
[111,113,104,0,110,94,106,117],
[101,103,99,101,0,95,111,108],
[104,108,115,117,116,0,111,105],
[114,99,105,105,100,100,0,105],
[101,107,100,94,103,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,114,127,106,116,115],
[113,0,100,111,120,103,125,131],
[107,111,0,123,118,94,115,126],
[97,100,88,0,94,79,90,97],
[84,91,93,117,0,109,101,109],
[105,108,117,132,102,0,119,125],
[95,86,96,121,110,92,0,98],
[96,80,85,114,102,86,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,92,94,96,101,88,88],
[118,0,103,104,106,92,108,105],
[119,108,0,105,100,95,98,101],
[117,107,106,0,101,108,117,97],
[115,105,111,110,0,114,99,105],
[110,119,116,103,97,0,100,121],
[123,103,113,94,112,111,0,116],
[123,106,110,114,106,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,95,94,108,98,102],
[122,0,103,108,104,120,123,111],
[124,108,0,96,120,130,124,120],
[116,103,115,0,119,105,120,98],
[117,107,91,92,0,125,128,117],
[103,91,81,106,86,0,103,106],
[113,88,87,91,83,108,0,100],
[109,100,91,113,94,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,99,95,99,91,94],
[118,0,116,116,114,108,114,104],
[114,95,0,112,96,105,97,107],
[112,95,99,0,106,102,96,106],
[116,97,115,105,0,107,105,99],
[112,103,106,109,104,0,104,105],
[120,97,114,115,106,107,0,106],
[117,107,104,105,112,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,110,102,108,119,111],
[96,0,105,97,88,88,95,90],
[94,106,0,99,98,97,99,98],
[101,114,112,0,99,95,112,110],
[109,123,113,112,0,104,107,107],
[103,123,114,116,107,0,115,106],
[92,116,112,99,104,96,0,96],
[100,121,113,101,104,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,85,95,103,98,93,96],
[100,0,91,97,107,93,80,95],
[126,120,0,119,127,124,93,115],
[116,114,92,0,102,101,107,113],
[108,104,84,109,0,91,91,109],
[113,118,87,110,120,0,94,107],
[118,131,118,104,120,117,0,109],
[115,116,96,98,102,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,104,108,108,107,89],
[111,0,109,120,111,117,107,98],
[113,102,0,120,123,116,105,111],
[107,91,91,0,106,109,99,80],
[103,100,88,105,0,108,91,97],
[103,94,95,102,103,0,91,88],
[104,104,106,112,120,120,0,95],
[122,113,100,131,114,123,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,110,95,104,97,90],
[105,0,111,111,107,96,103,106],
[99,100,0,102,88,101,108,116],
[101,100,109,0,107,108,118,105],
[116,104,123,104,0,112,125,109],
[107,115,110,103,99,0,106,104],
[114,108,103,93,86,105,0,107],
[121,105,95,106,102,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,120,107,96,108,112],
[105,0,107,114,108,117,104,114],
[109,104,0,105,116,93,98,112],
[91,97,106,0,101,99,93,110],
[104,103,95,110,0,103,103,116],
[115,94,118,112,108,0,111,118],
[103,107,113,118,108,100,0,118],
[99,97,99,101,95,93,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,127,119,130,107,95,112],
[114,0,111,104,120,104,105,87],
[84,100,0,96,124,109,92,111],
[92,107,115,0,138,84,112,92],
[81,91,87,73,0,80,84,81],
[104,107,102,127,131,0,96,104],
[116,106,119,99,127,115,0,111],
[99,124,100,119,130,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,116,106,90,67,88],
[114,0,114,103,110,103,101,95],
[111,97,0,108,105,82,87,97],
[95,108,103,0,104,98,97,79],
[105,101,106,107,0,94,95,110],
[121,108,129,113,117,0,117,91],
[144,110,124,114,116,94,0,98],
[123,116,114,132,101,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,111,95,99,97,102],
[110,0,111,117,100,109,105,104],
[103,100,0,113,103,105,104,106],
[100,94,98,0,97,101,99,90],
[116,111,108,114,0,108,105,105],
[112,102,106,110,103,0,105,98],
[114,106,107,112,106,106,0,97],
[109,107,105,121,106,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,98,101,93,101,99,104],
[99,0,98,102,91,93,94,103],
[113,113,0,98,98,101,107,95],
[110,109,113,0,106,92,102,108],
[118,120,113,105,0,104,97,114],
[110,118,110,119,107,0,106,105],
[112,117,104,109,114,105,0,112],
[107,108,116,103,97,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,89,105,81,102,102,101],
[122,0,109,104,93,103,107,108],
[122,102,0,109,95,103,104,105],
[106,107,102,0,107,109,107,109],
[130,118,116,104,0,121,110,124],
[109,108,108,102,90,0,87,102],
[109,104,107,104,101,124,0,114],
[110,103,106,102,87,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,108,117,101,103,108,100],
[86,0,116,109,96,92,98,93],
[103,95,0,98,90,101,92,94],
[94,102,113,0,102,106,109,106],
[110,115,121,109,0,102,103,116],
[108,119,110,105,109,0,96,112],
[103,113,119,102,108,115,0,119],
[111,118,117,105,95,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,118,115,107,98,103],
[85,0,98,108,108,110,110,112],
[94,113,0,105,103,104,101,103],
[93,103,106,0,92,111,100,96],
[96,103,108,119,0,97,118,113],
[104,101,107,100,114,0,108,93],
[113,101,110,111,93,103,0,118],
[108,99,108,115,98,118,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,107,116,101,103,116],
[104,0,121,101,129,98,103,122],
[91,90,0,107,114,100,102,105],
[104,110,104,0,112,104,98,108],
[95,82,97,99,0,85,100,83],
[110,113,111,107,126,0,101,106],
[108,108,109,113,111,110,0,102],
[95,89,106,103,128,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,93,109,110,104,107],
[108,0,94,104,103,116,108,110],
[107,117,0,100,103,109,103,104],
[118,107,111,0,113,110,99,109],
[102,108,108,98,0,102,110,117],
[101,95,102,101,109,0,100,113],
[107,103,108,112,101,111,0,105],
[104,101,107,102,94,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,76,88,82,94,88,96],
[113,0,103,87,108,105,113,111],
[135,108,0,94,99,115,104,98],
[123,124,117,0,92,116,107,113],
[129,103,112,119,0,101,120,102],
[117,106,96,95,110,0,98,102],
[123,98,107,104,91,113,0,99],
[115,100,113,98,109,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,91,115,138,113,94,94],
[121,0,48,48,73,94,49,120],
[120,163,0,115,138,139,71,118],
[96,163,96,0,72,94,121,95],
[73,138,73,139,0,138,49,71],
[98,117,72,117,73,0,72,120],
[117,162,140,90,162,139,0,140],
[117,91,93,116,140,91,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,116,96,105,88,123],
[127,0,130,123,119,135,103,132],
[116,81,0,117,104,123,90,102],
[95,88,94,0,99,115,72,118],
[115,92,107,112,0,110,110,95],
[106,76,88,96,101,0,79,101],
[123,108,121,139,101,132,0,141],
[88,79,109,93,116,110,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,112,104,108,111,110],
[95,0,100,98,93,97,89,104],
[106,111,0,115,111,97,103,107],
[99,113,96,0,108,109,105,114],
[107,118,100,103,0,111,106,113],
[103,114,114,102,100,0,93,106],
[100,122,108,106,105,118,0,109],
[101,107,104,97,98,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,125,103,118,114,109],
[111,0,106,129,100,104,107,108],
[101,105,0,120,99,97,107,109],
[86,82,91,0,98,98,100,78],
[108,111,112,113,0,112,113,91],
[93,107,114,113,99,0,97,99],
[97,104,104,111,98,114,0,94],
[102,103,102,133,120,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,131,131,79,80,105,105],
[80,0,132,106,54,107,108,134],
[80,79,0,80,54,79,81,79],
[80,105,131,0,108,80,108,131],
[132,157,157,103,0,132,157,131],
[131,104,132,131,79,0,159,157],
[106,103,130,103,54,52,0,77],
[106,77,132,80,80,54,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,114,115,118,104,113],
[95,0,98,101,109,115,109,101],
[109,113,0,119,126,110,110,105],
[97,110,92,0,108,93,101,100],
[96,102,85,103,0,113,104,103],
[93,96,101,118,98,0,101,100],
[107,102,101,110,107,110,0,105],
[98,110,106,111,108,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,97,97,103,99,97],
[115,0,94,88,92,94,96,89],
[102,117,0,93,104,107,113,108],
[114,123,118,0,113,112,92,95],
[114,119,107,98,0,105,104,97],
[108,117,104,99,106,0,106,109],
[112,115,98,119,107,105,0,99],
[114,122,103,116,114,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,112,100,122,125,106],
[111,0,126,117,116,110,107,97],
[100,85,0,85,104,89,91,93],
[99,94,126,0,91,98,118,89],
[111,95,107,120,0,89,111,85],
[89,101,122,113,122,0,103,101],
[86,104,120,93,100,108,0,83],
[105,114,118,122,126,110,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,105,113,115,97,103],
[103,0,117,108,120,118,110,110],
[107,94,0,106,115,104,104,113],
[106,103,105,0,108,102,97,110],
[98,91,96,103,0,99,100,93],
[96,93,107,109,112,0,101,105],
[114,101,107,114,111,110,0,105],
[108,101,98,101,118,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,102,91,115,90,99],
[106,0,106,93,92,94,92,102],
[98,105,0,114,100,112,109,100],
[109,118,97,0,108,100,107,104],
[120,119,111,103,0,115,110,115],
[96,117,99,111,96,0,104,98],
[121,119,102,104,101,107,0,108],
[112,109,111,107,96,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,104,119,118,102,104],
[108,0,98,96,108,108,108,100],
[114,113,0,110,117,112,118,103],
[107,115,101,0,114,113,122,104],
[92,103,94,97,0,95,98,95],
[93,103,99,98,116,0,109,108],
[109,103,93,89,113,102,0,107],
[107,111,108,107,116,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,89,92,91,118,101,116],
[97,0,94,91,84,90,100,109],
[122,117,0,113,100,116,116,117],
[119,120,98,0,109,104,120,114],
[120,127,111,102,0,126,135,129],
[93,121,95,107,85,0,109,109],
[110,111,95,91,76,102,0,111],
[95,102,94,97,82,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,126,106,104,84,104,127],
[85,0,106,106,106,84,102,149],
[85,105,0,129,147,128,124,129],
[105,105,82,0,126,104,102,149],
[107,105,64,85,0,44,105,129],
[127,127,83,107,167,0,124,127],
[107,109,87,109,106,87,0,130],
[84,62,82,62,82,84,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,114,115,99,105,113],
[103,0,108,115,97,94,111,105],
[109,103,0,114,104,109,105,112],
[97,96,97,0,103,92,96,90],
[96,114,107,108,0,98,108,105],
[112,117,102,119,113,0,94,105],
[106,100,106,115,103,117,0,99],
[98,106,99,121,106,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,66,62,71,67,71,70],
[111,0,86,74,91,86,89,93],
[145,125,0,106,100,92,104,112],
[149,137,105,0,127,118,124,115],
[140,120,111,84,0,97,106,111],
[144,125,119,93,114,0,120,125],
[140,122,107,87,105,91,0,115],
[141,118,99,96,100,86,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,98,107,99,103,101,90],
[113,0,107,103,119,120,106,112],
[113,104,0,98,105,102,105,104],
[104,108,113,0,103,108,111,96],
[112,92,106,108,0,99,107,92],
[108,91,109,103,112,0,101,96],
[110,105,106,100,104,110,0,90],
[121,99,107,115,119,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,88,88,110,105,96],
[96,0,102,95,95,99,103,90],
[100,109,0,105,90,107,110,93],
[123,116,106,0,93,121,104,125],
[123,116,121,118,0,93,134,106],
[101,112,104,90,118,0,100,111],
[106,108,101,107,77,111,0,91],
[115,121,118,86,105,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,110,135,110,111,143,101],
[76,0,119,132,110,152,133,113],
[101,92,0,123,122,100,76,91],
[76,79,88,0,88,111,86,90],
[101,101,89,123,0,124,123,104],
[100,59,111,100,87,0,110,69],
[68,78,135,125,88,101,0,112],
[110,98,120,121,107,142,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,118,115,107,119,103,103],
[89,0,103,107,112,109,80,92],
[93,108,0,99,108,110,101,102],
[96,104,112,0,130,111,117,103],
[104,99,103,81,0,92,87,110],
[92,102,101,100,119,0,89,109],
[108,131,110,94,124,122,0,130],
[108,119,109,108,101,102,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,129,117,108,130,128,105],
[97,0,119,104,120,130,130,131],
[82,92,0,106,121,130,128,70],
[94,107,105,0,106,131,140,96],
[103,91,90,105,0,129,114,105],
[81,81,81,80,82,0,95,81],
[83,81,83,71,97,116,0,71],
[106,80,141,115,106,130,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,115,99,120,144,108],
[107,0,122,115,102,129,136,86],
[97,89,0,111,93,98,116,103],
[96,96,100,0,87,105,129,82],
[112,109,118,124,0,118,124,102],
[91,82,113,106,93,0,118,94],
[67,75,95,82,87,93,0,89],
[103,125,108,129,109,117,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,114,114,113,110,124],
[105,0,106,105,113,114,104,124],
[106,105,0,98,101,104,101,104],
[97,106,113,0,116,102,105,101],
[97,98,110,95,0,100,99,89],
[98,97,107,109,111,0,103,107],
[101,107,110,106,112,108,0,113],
[87,87,107,110,122,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,111,111,126,99,115],
[98,0,97,88,91,99,112,124],
[103,114,0,100,104,127,124,133],
[100,123,111,0,116,109,111,125],
[100,120,107,95,0,128,93,94],
[85,112,84,102,83,0,108,105],
[112,99,87,100,118,103,0,92],
[96,87,78,86,117,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,97,101,116,126,109],
[113,0,139,96,108,103,127,120],
[106,72,0,88,107,88,118,117],
[114,115,123,0,111,107,119,103],
[110,103,104,100,0,103,121,110],
[95,108,123,104,108,0,116,101],
[85,84,93,92,90,95,0,89],
[102,91,94,108,101,110,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,83,61,104,99,62,93],
[118,0,76,81,109,110,91,109],
[128,135,0,89,118,118,110,103],
[150,130,122,0,153,127,102,141],
[107,102,93,58,0,93,72,94],
[112,101,93,84,118,0,85,111],
[149,120,101,109,139,126,0,137],
[118,102,108,70,117,100,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,125,110,121,124,128],
[87,0,104,112,99,108,105,118],
[107,107,0,113,95,111,112,117],
[86,99,98,0,86,106,103,93],
[101,112,116,125,0,119,110,109],
[90,103,100,105,92,0,110,108],
[87,106,99,108,101,101,0,100],
[83,93,94,118,102,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,99,104,102,96,96],
[121,0,106,116,107,100,114,94],
[104,105,0,106,115,111,111,97],
[112,95,105,0,120,109,108,98],
[107,104,96,91,0,91,107,91],
[109,111,100,102,120,0,110,106],
[115,97,100,103,104,101,0,102],
[115,117,114,113,120,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,102,103,115,120,104],
[103,0,102,94,98,103,111,105],
[105,109,0,98,99,108,100,107],
[109,117,113,0,101,114,131,106],
[108,113,112,110,0,103,112,97],
[96,108,103,97,108,0,101,94],
[91,100,111,80,99,110,0,102],
[107,106,104,105,114,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,90,81,105,89,97,76],
[128,0,114,106,92,106,132,93],
[121,97,0,102,100,128,116,103],
[130,105,109,0,115,132,139,98],
[106,119,111,96,0,116,126,106],
[122,105,83,79,95,0,118,86],
[114,79,95,72,85,93,0,81],
[135,118,108,113,105,125,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,96,113,98,103,107],
[119,0,104,113,114,114,109,119],
[106,107,0,114,112,101,105,108],
[115,98,97,0,115,101,100,117],
[98,97,99,96,0,96,84,103],
[113,97,110,110,115,0,105,109],
[108,102,106,111,127,106,0,124],
[104,92,103,94,108,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,135,102,112,96,107,101],
[106,0,113,112,96,102,91,100],
[76,98,0,104,92,85,75,100],
[109,99,107,0,96,90,92,87],
[99,115,119,115,0,109,101,112],
[115,109,126,121,102,0,106,108],
[104,120,136,119,110,105,0,115],
[110,111,111,124,99,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,98,115,105,118,120],
[101,0,115,102,117,113,126,117],
[105,96,0,97,98,91,118,107],
[113,109,114,0,118,100,110,116],
[96,94,113,93,0,99,99,106],
[106,98,120,111,112,0,121,128],
[93,85,93,101,112,90,0,116],
[91,94,104,95,105,83,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,95,110,92,109,106],
[106,0,104,98,90,102,107,102],
[111,107,0,105,98,89,96,112],
[116,113,106,0,113,101,111,116],
[101,121,113,98,0,110,111,113],
[119,109,122,110,101,0,106,132],
[102,104,115,100,100,105,0,111],
[105,109,99,95,98,79,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,86,109,102,121,104,117],
[103,0,106,116,99,114,94,105],
[125,105,0,110,96,118,98,107],
[102,95,101,0,94,120,86,91],
[109,112,115,117,0,108,116,92],
[90,97,93,91,103,0,94,100],
[107,117,113,125,95,117,0,112],
[94,106,104,120,119,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,113,100,113,98,106],
[98,0,124,121,105,115,95,102],
[106,87,0,108,100,107,96,95],
[98,90,103,0,104,104,96,96],
[111,106,111,107,0,105,101,108],
[98,96,104,107,106,0,108,104],
[113,116,115,115,110,103,0,106],
[105,109,116,115,103,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,105,111,108,112,107],
[104,0,119,119,107,101,109,104],
[105,92,0,99,97,104,104,117],
[106,92,112,0,100,118,100,101],
[100,104,114,111,0,106,105,103],
[103,110,107,93,105,0,102,103],
[99,102,107,111,106,109,0,106],
[104,107,94,110,108,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,90,109,102,86,102,124],
[124,0,123,119,130,123,112,101],
[121,88,0,122,90,91,106,104],
[102,92,89,0,92,120,133,83],
[109,81,121,119,0,123,121,110],
[125,88,120,91,88,0,129,116],
[109,99,105,78,90,82,0,95],
[87,110,107,128,101,95,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,97,97,115,97,96,77],
[134,0,98,138,113,132,156,116],
[114,113,0,193,95,113,138,134],
[114,73,18,0,75,76,94,96],
[96,98,116,136,0,95,99,117],
[114,79,98,135,116,0,135,116],
[115,55,73,117,112,76,0,96],
[134,95,77,115,94,95,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,105,126,117,116,99],
[96,0,89,106,112,105,89,93],
[104,122,0,109,126,127,118,106],
[106,105,102,0,112,126,115,97],
[85,99,85,99,0,116,113,98],
[94,106,84,85,95,0,88,89],
[95,122,93,96,98,123,0,92],
[112,118,105,114,113,122,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,94,79,102,103,99],
[97,0,114,98,102,100,104,101],
[107,97,0,92,89,94,90,83],
[117,113,119,0,107,109,130,99],
[132,109,122,104,0,101,117,98],
[109,111,117,102,110,0,109,99],
[108,107,121,81,94,102,0,110],
[112,110,128,112,113,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,101,94,110,117,101],
[95,0,100,98,99,92,116,103],
[106,111,0,107,104,104,113,112],
[110,113,104,0,98,107,123,107],
[117,112,107,113,0,103,119,112],
[101,119,107,104,108,0,112,106],
[94,95,98,88,92,99,0,92],
[110,108,99,104,99,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,105,111,108,105,100],
[97,0,102,93,100,97,98,100],
[110,109,0,97,113,108,106,101],
[106,118,114,0,106,117,105,107],
[100,111,98,105,0,98,92,102],
[103,114,103,94,113,0,114,110],
[106,113,105,106,119,97,0,103],
[111,111,110,104,109,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,99,104,102,108,100],
[109,0,105,104,100,93,107,104],
[112,106,0,108,89,109,104,107],
[112,107,103,0,105,103,100,100],
[107,111,122,106,0,116,115,91],
[109,118,102,108,95,0,103,98],
[103,104,107,111,96,108,0,104],
[111,107,104,111,120,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,133,104,114,120,116,112],
[123,0,95,120,94,91,132,105],
[78,116,0,130,106,115,113,117],
[107,91,81,0,104,93,115,108],
[97,117,105,107,0,142,135,102],
[91,120,96,118,69,0,146,111],
[95,79,98,96,76,65,0,87],
[99,106,94,103,109,100,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,112,106,106,107,90,73],
[84,0,118,135,118,124,126,90],
[99,93,0,92,75,92,116,78],
[105,76,119,0,100,99,124,108],
[105,93,136,111,0,109,106,100],
[104,87,119,112,102,0,93,109],
[121,85,95,87,105,118,0,76],
[138,121,133,103,111,102,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,98,86,120,123,106],
[116,0,114,99,104,112,122,95],
[113,97,0,112,107,118,113,82],
[113,112,99,0,106,124,119,90],
[125,107,104,105,0,113,107,94],
[91,99,93,87,98,0,117,78],
[88,89,98,92,104,94,0,92],
[105,116,129,121,117,133,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,91,108,111,102,107],
[118,0,114,104,118,127,121,126],
[101,97,0,98,108,105,100,117],
[120,107,113,0,122,123,104,102],
[103,93,103,89,0,94,88,97],
[100,84,106,88,117,0,98,113],
[109,90,111,107,123,113,0,110],
[104,85,94,109,114,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,125,104,115,114,104],
[97,0,104,107,99,109,99,104],
[105,107,0,128,111,112,112,110],
[86,104,83,0,88,98,86,101],
[107,112,100,123,0,108,117,110],
[96,102,99,113,103,0,106,104],
[97,112,99,125,94,105,0,108],
[107,107,101,110,101,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,130,109,106,106,101,104],
[107,0,125,106,120,104,104,119],
[81,86,0,93,95,91,85,89],
[102,105,118,0,118,100,102,104],
[105,91,116,93,0,100,93,90],
[105,107,120,111,111,0,100,101],
[110,107,126,109,118,111,0,103],
[107,92,122,107,121,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,102,106,110,108,109],
[110,0,105,107,105,116,113,112],
[101,106,0,110,110,110,116,106],
[109,104,101,0,103,100,106,115],
[105,106,101,108,0,113,114,115],
[101,95,101,111,98,0,110,111],
[103,98,95,105,97,101,0,106],
[102,99,105,96,96,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,101,112,134,105,91],
[112,0,109,97,99,113,110,102],
[114,102,0,127,91,140,117,115],
[110,114,84,0,94,126,106,89],
[99,112,120,117,0,124,126,111],
[77,98,71,85,87,0,92,66],
[106,101,94,105,85,119,0,129],
[120,109,96,122,100,145,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,59,74,102,101,86,74,102],
[152,0,136,103,91,85,75,102],
[137,75,0,79,115,99,74,102],
[109,108,132,0,137,120,97,88],
[110,120,96,74,0,121,109,100],
[125,126,112,91,90,0,100,128],
[137,136,137,114,102,111,0,127],
[109,109,109,123,111,83,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,83,94,94,121,86],
[117,0,97,112,114,122,103,98],
[111,114,0,99,100,105,101,108],
[128,99,112,0,112,118,108,101],
[117,97,111,99,0,106,124,106],
[117,89,106,93,105,0,102,93],
[90,108,110,103,87,109,0,84],
[125,113,103,110,105,118,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,73,95,91,101,103,73],
[124,0,93,91,111,113,121,118],
[138,118,0,106,105,112,142,106],
[116,120,105,0,77,105,96,120],
[120,100,106,134,0,95,121,112],
[110,98,99,106,116,0,121,97],
[108,90,69,115,90,90,0,74],
[138,93,105,91,99,114,137,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,105,109,116,112,110],
[88,0,98,97,106,102,91,114],
[101,113,0,89,109,109,101,110],
[106,114,122,0,112,114,104,105],
[102,105,102,99,0,113,111,106],
[95,109,102,97,98,0,104,101],
[99,120,110,107,100,107,0,116],
[101,97,101,106,105,110,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,101,106,101,115,103],
[99,0,103,105,114,101,109,108],
[97,108,0,111,114,94,115,105],
[110,106,100,0,108,99,113,103],
[105,97,97,103,0,88,102,103],
[110,110,117,112,123,0,114,105],
[96,102,96,98,109,97,0,92],
[108,103,106,108,108,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,88,107,108,86,92,117],
[109,0,93,110,110,91,108,102],
[123,118,0,115,115,101,105,107],
[104,101,96,0,120,115,106,103],
[103,101,96,91,0,85,85,95],
[125,120,110,96,126,0,118,114],
[119,103,106,105,126,93,0,103],
[94,109,104,108,116,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,113,109,111,109,99,121],
[117,0,109,108,105,118,103,116],
[98,102,0,99,101,101,88,108],
[102,103,112,0,102,124,105,102],
[100,106,110,109,0,115,106,103],
[102,93,110,87,96,0,89,108],
[112,108,123,106,105,122,0,111],
[90,95,103,109,108,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,117,109,99,106,99,107],
[93,0,107,102,90,102,88,86],
[94,104,0,110,94,110,89,116],
[102,109,101,0,107,104,88,104],
[112,121,117,104,0,121,113,107],
[105,109,101,107,90,0,103,113],
[112,123,122,123,98,108,0,108],
[104,125,95,107,104,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,95,116,97,105,102,111],
[124,0,110,121,121,122,103,130],
[116,101,0,121,110,109,108,123],
[95,90,90,0,114,105,106,109],
[114,90,101,97,0,120,94,100],
[106,89,102,106,91,0,85,101],
[109,108,103,105,117,126,0,133],
[100,81,88,102,111,110,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,83,113,100,99,110],
[108,0,108,105,130,104,112,117],
[124,103,0,126,103,151,108,101],
[128,106,85,0,123,86,126,80],
[98,81,108,88,0,124,121,86],
[111,107,60,125,87,0,92,89],
[112,99,103,85,90,119,0,102],
[101,94,110,131,125,122,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,104,104,89,89,97],
[111,0,97,97,102,90,102,105],
[112,114,0,108,95,104,108,85],
[107,114,103,0,104,109,91,109],
[107,109,116,107,0,106,101,112],
[122,121,107,102,105,0,99,114],
[122,109,103,120,110,112,0,113],
[114,106,126,102,99,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,119,105,108,94,103,97],
[96,0,113,90,104,103,85,85],
[92,98,0,96,83,81,102,81],
[106,121,115,0,93,114,112,98],
[103,107,128,118,0,104,112,105],
[117,108,130,97,107,0,107,101],
[108,126,109,99,99,104,0,107],
[114,126,130,113,106,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,88,93,134,75,95,119],
[113,0,113,101,163,103,115,98],
[123,98,0,131,173,141,124,116],
[118,110,80,0,129,86,98,118],
[77,48,38,82,0,73,38,89],
[136,108,70,125,138,0,117,128],
[116,96,87,113,173,94,0,133],
[92,113,95,93,122,83,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,110,91,106,120,107],
[103,0,94,114,100,119,111,123],
[115,117,0,103,104,119,128,120],
[101,97,108,0,103,109,119,89],
[120,111,107,108,0,134,134,105],
[105,92,92,102,77,0,113,106],
[91,100,83,92,77,98,0,105],
[104,88,91,122,106,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,100,115,109,99,124,116],
[92,0,98,104,108,107,114,113],
[111,113,0,99,101,101,122,104],
[96,107,112,0,97,98,108,104],
[102,103,110,114,0,99,111,109],
[112,104,110,113,112,0,122,118],
[87,97,89,103,100,89,0,96],
[95,98,107,107,102,93,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,104,115,110,110,123],
[96,0,112,95,103,98,99,106],
[109,99,0,107,107,103,101,111],
[107,116,104,0,103,101,99,103],
[96,108,104,108,0,103,95,117],
[101,113,108,110,108,0,92,116],
[101,112,110,112,116,119,0,119],
[88,105,100,108,94,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,114,109,122,117,113],
[107,0,105,104,104,112,108,109],
[94,106,0,100,94,117,118,105],
[97,107,111,0,106,118,124,104],
[102,107,117,105,0,120,117,121],
[89,99,94,93,91,0,112,109],
[94,103,93,87,94,99,0,106],
[98,102,106,107,90,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,113,117,109,116,104,112],
[109,0,114,105,117,105,116,109],
[98,97,0,102,97,105,103,103],
[94,106,109,0,99,91,103,105],
[102,94,114,112,0,101,104,108],
[95,106,106,120,110,0,109,107],
[107,95,108,108,107,102,0,113],
[99,102,108,106,103,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,104,107,106,106,106,118],
[98,0,95,105,101,105,101,120],
[107,116,0,111,120,116,104,129],
[104,106,100,0,103,103,93,131],
[105,110,91,108,0,111,111,117],
[105,106,95,108,100,0,98,110],
[105,110,107,118,100,113,0,121],
[93,91,82,80,94,101,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,112,88,102,117,101],
[115,0,107,101,108,99,125,113],
[113,104,0,98,87,106,111,107],
[99,110,113,0,115,112,126,116],
[123,103,124,96,0,99,111,112],
[109,112,105,99,112,0,99,101],
[94,86,100,85,100,112,0,97],
[110,98,104,95,99,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,105,124,111,123,116],
[97,0,108,107,113,102,107,115],
[107,103,0,103,116,95,113,115],
[106,104,108,0,113,106,110,112],
[87,98,95,98,0,99,104,103],
[100,109,116,105,112,0,108,121],
[88,104,98,101,107,103,0,113],
[95,96,96,99,108,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,96,99,94,94,113,95],
[132,0,105,84,97,99,82,122],
[115,106,0,115,109,128,101,116],
[112,127,96,0,117,123,122,116],
[117,114,102,94,0,101,121,95],
[117,112,83,88,110,0,111,114],
[98,129,110,89,90,100,0,97],
[116,89,95,95,116,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,94,132,97,81,98],
[120,0,139,105,114,96,110,122],
[113,72,0,105,123,105,81,98],
[117,106,106,0,114,107,69,107],
[79,97,88,97,0,98,73,97],
[114,115,106,104,113,0,58,122],
[130,101,130,142,138,153,0,154],
[113,89,113,104,114,89,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,105,109,122,115,110],
[97,0,95,96,107,110,105,84],
[107,116,0,97,125,130,125,105],
[106,115,114,0,117,121,125,100],
[102,104,86,94,0,99,99,103],
[89,101,81,90,112,0,103,103],
[96,106,86,86,112,108,0,83],
[101,127,106,111,108,108,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,96,94,101,116,96],
[102,0,110,92,104,100,110,96],
[109,101,0,102,102,103,109,105],
[115,119,109,0,115,104,119,121],
[117,107,109,96,0,115,113,118],
[110,111,108,107,96,0,116,109],
[95,101,102,92,98,95,0,102],
[115,115,106,90,93,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,94,106,92,97,102,101],
[120,0,111,105,102,105,111,99],
[117,100,0,115,109,112,114,113],
[105,106,96,0,110,119,111,108],
[119,109,102,101,0,109,113,108],
[114,106,99,92,102,0,100,116],
[109,100,97,100,98,111,0,97],
[110,112,98,103,103,95,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,103,113,113,114,115,121],
[96,0,100,101,111,102,115,110],
[108,111,0,110,110,104,113,116],
[98,110,101,0,104,100,100,114],
[98,100,101,107,0,115,104,113],
[97,109,107,111,96,0,107,118],
[96,96,98,111,107,104,0,110],
[90,101,95,97,98,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,119,109,113,123,105,110],
[98,0,111,106,107,119,103,105],
[92,100,0,102,101,100,96,104],
[102,105,109,0,105,112,108,113],
[98,104,110,106,0,113,101,115],
[88,92,111,99,98,0,108,101],
[106,108,115,103,110,103,0,114],
[101,106,107,98,96,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,86,97,86,92,87,90],
[127,0,95,109,94,106,97,98],
[125,116,0,121,106,116,106,105],
[114,102,90,0,92,97,96,86],
[125,117,105,119,0,108,105,108],
[119,105,95,114,103,0,104,95],
[124,114,105,115,106,107,0,108],
[121,113,106,125,103,116,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,87,109,96,89,82],
[111,0,108,104,96,81,89,91],
[108,103,0,95,119,103,105,96],
[124,107,116,0,119,123,109,102],
[102,115,92,92,0,108,89,102],
[115,130,108,88,103,0,112,94],
[122,122,106,102,122,99,0,111],
[129,120,115,109,109,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,110,107,116,91,112],
[105,0,97,95,86,105,85,105],
[106,114,0,101,105,114,110,102],
[101,116,110,0,104,117,96,99],
[104,125,106,107,0,124,114,110],
[95,106,97,94,87,0,93,92],
[120,126,101,115,97,118,0,108],
[99,106,109,112,101,119,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,86,91,110,113,98],
[99,0,88,68,93,86,91,109],
[103,123,0,111,108,103,99,97],
[125,143,100,0,112,96,115,116],
[120,118,103,99,0,115,101,118],
[101,125,108,115,96,0,104,89],
[98,120,112,96,110,107,0,95],
[113,102,114,95,93,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,113,118,116,117,134],
[113,0,116,123,107,101,104,144],
[107,95,0,85,91,83,106,124],
[98,88,126,0,123,102,119,133],
[93,104,120,88,0,100,132,117],
[95,110,128,109,111,0,127,129],
[94,107,105,92,79,84,0,112],
[77,67,87,78,94,82,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,103,122,111,116,129],
[94,0,119,113,117,110,125,127],
[99,92,0,101,96,105,112,106],
[108,98,110,0,101,123,105,125],
[89,94,115,110,0,110,116,111],
[100,101,106,88,101,0,111,114],
[95,86,99,106,95,100,0,113],
[82,84,105,86,100,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,99,114,109,103,108],
[108,0,112,107,128,106,115,89],
[111,99,0,106,113,105,98,106],
[112,104,105,0,125,118,101,99],
[97,83,98,86,0,93,104,95],
[102,105,106,93,118,0,92,91],
[108,96,113,110,107,119,0,85],
[103,122,105,112,116,120,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,95,105,106,124,93],
[112,0,100,90,105,102,115,110],
[112,111,0,103,110,96,131,92],
[116,121,108,0,114,115,142,97],
[106,106,101,97,0,95,127,98],
[105,109,115,96,116,0,120,98],
[87,96,80,69,84,91,0,98],
[118,101,119,114,113,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,77,95,95,113,59,73],
[113,0,57,58,134,116,59,56],
[134,154,0,112,115,114,113,94],
[116,153,99,0,115,94,115,132],
[116,77,96,96,0,117,77,75],
[98,95,97,117,94,0,79,93],
[152,152,98,96,134,132,0,92],
[138,155,117,79,136,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,110,110,98,93,87],
[121,0,121,117,130,92,114,119],
[104,90,0,93,107,97,86,81],
[101,94,118,0,109,106,96,106],
[101,81,104,102,0,81,77,76],
[113,119,114,105,130,0,107,105],
[118,97,125,115,134,104,0,100],
[124,92,130,105,135,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,101,116,102,107,104,106],
[94,0,104,100,94,104,98,94],
[110,107,0,119,100,111,107,104],
[95,111,92,0,98,112,97,96],
[109,117,111,113,0,120,103,111],
[104,107,100,99,91,0,101,100],
[107,113,104,114,108,110,0,105],
[105,117,107,115,100,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,101,103,104,108,119,115],
[78,0,107,99,100,92,106,120],
[110,104,0,104,110,120,103,123],
[108,112,107,0,99,107,112,109],
[107,111,101,112,0,107,110,113],
[103,119,91,104,104,0,101,128],
[92,105,108,99,101,110,0,115],
[96,91,88,102,98,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,116,135,114,111,103,108],
[92,0,125,133,109,129,92,100],
[95,86,0,117,116,104,101,92],
[76,78,94,0,107,85,105,119],
[97,102,95,104,0,106,105,72],
[100,82,107,126,105,0,113,100],
[108,119,110,106,106,98,0,70],
[103,111,119,92,139,111,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,100,112,109,113,113],
[102,0,114,108,109,105,110,114],
[103,97,0,112,110,100,106,110],
[111,103,99,0,110,116,114,118],
[99,102,101,101,0,98,102,112],
[102,106,111,95,113,0,114,118],
[98,101,105,97,109,97,0,105],
[98,97,101,93,99,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,108,106,110,103,112],
[105,0,107,116,114,104,111,111],
[104,104,0,107,102,109,112,109],
[103,95,104,0,96,110,104,86],
[105,97,109,115,0,103,104,119],
[101,107,102,101,108,0,108,94],
[108,100,99,107,107,103,0,100],
[99,100,102,125,92,117,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,93,121,128,103,106,102],
[78,0,93,103,118,72,100,98],
[118,118,0,125,131,116,109,101],
[90,108,86,0,118,71,76,96],
[83,93,80,93,0,63,92,83],
[108,139,95,140,148,0,114,114],
[105,111,102,135,119,97,0,100],
[109,113,110,115,128,97,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,94,129,113,121,119,135],
[109,0,94,116,107,118,105,120],
[117,117,0,121,106,114,104,113],
[82,95,90,0,104,118,105,115],
[98,104,105,107,0,113,100,126],
[90,93,97,93,98,0,110,106],
[92,106,107,106,111,101,0,101],
[76,91,98,96,85,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,86,102,102,105,95,90],
[135,0,117,112,104,113,96,113],
[125,94,0,104,112,120,105,100],
[109,99,107,0,102,103,100,91],
[109,107,99,109,0,116,101,99],
[106,98,91,108,95,0,105,94],
[116,115,106,111,110,106,0,103],
[121,98,111,120,112,117,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,110,116,101,110,112],
[92,0,109,95,98,100,99,102],
[89,102,0,92,87,81,109,93],
[101,116,119,0,113,97,115,111],
[95,113,124,98,0,95,107,104],
[110,111,130,114,116,0,119,103],
[101,112,102,96,104,92,0,85],
[99,109,118,100,107,108,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,85,101,89,83,69,96],
[144,0,119,130,117,107,103,116],
[126,92,0,101,119,95,88,109],
[110,81,110,0,89,90,86,112],
[122,94,92,122,0,78,89,111],
[128,104,116,121,133,0,122,134],
[142,108,123,125,122,89,0,127],
[115,95,102,99,100,77,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,107,103,109,117,123],
[104,0,111,109,105,114,117,113],
[114,100,0,96,114,103,116,106],
[104,102,115,0,124,123,115,125],
[108,106,97,87,0,112,111,103],
[102,97,108,88,99,0,111,113],
[94,94,95,96,100,100,0,98],
[88,98,105,86,108,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,126,105,116,127,115,114],
[92,0,116,106,104,107,100,99],
[85,95,0,99,89,98,98,96],
[106,105,112,0,93,119,102,102],
[95,107,122,118,0,123,114,99],
[84,104,113,92,88,0,104,97],
[96,111,113,109,97,107,0,100],
[97,112,115,109,112,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,110,111,101,98,116,109],
[127,0,133,121,123,119,98,114],
[101,78,0,103,91,102,87,100],
[100,90,108,0,100,91,95,105],
[110,88,120,111,0,95,106,118],
[113,92,109,120,116,0,109,112],
[95,113,124,116,105,102,0,94],
[102,97,111,106,93,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,107,93,97,106,104],
[108,0,118,102,107,116,101,115],
[92,93,0,107,95,96,91,105],
[104,109,104,0,99,98,95,102],
[118,104,116,112,0,109,98,117],
[114,95,115,113,102,0,100,110],
[105,110,120,116,113,111,0,117],
[107,96,106,109,94,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,108,102,103,111,108],
[102,0,109,114,109,102,120,112],
[107,102,0,114,94,105,119,109],
[103,97,97,0,93,94,100,99],
[109,102,117,118,0,109,118,116],
[108,109,106,117,102,0,115,106],
[100,91,92,111,93,96,0,109],
[103,99,102,112,95,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,77,96,109,88,87,102],
[110,0,112,107,92,105,103,94],
[134,99,0,119,111,115,115,115],
[115,104,92,0,100,108,104,97],
[102,119,100,111,0,102,100,108],
[123,106,96,103,109,0,108,108],
[124,108,96,107,111,103,0,108],
[109,117,96,114,103,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,106,95,107,125,98],
[117,0,109,113,95,111,122,100],
[99,102,0,102,105,100,117,95],
[105,98,109,0,99,102,133,87],
[116,116,106,112,0,122,120,97],
[104,100,111,109,89,0,126,111],
[86,89,94,78,91,85,0,85],
[113,111,116,124,114,100,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,120,110,98,119,102,103],
[92,0,111,105,100,107,103,94],
[91,100,0,98,90,107,99,101],
[101,106,113,0,108,127,106,99],
[113,111,121,103,0,121,109,109],
[92,104,104,84,90,0,100,89],
[109,108,112,105,102,111,0,98],
[108,117,110,112,102,122,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,62,102,94,94,82,61],
[118,0,95,138,118,117,95,84],
[149,116,0,104,149,139,116,96],
[109,73,107,0,128,129,65,107],
[117,93,62,83,0,105,63,73],
[117,94,72,82,106,0,83,83],
[129,116,95,146,148,128,0,127],
[150,127,115,104,138,128,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,115,104,110,108,118],
[111,0,118,130,123,113,99,118],
[107,93,0,108,115,108,108,118],
[96,81,103,0,90,98,104,114],
[107,88,96,121,0,98,104,110],
[101,98,103,113,113,0,116,117],
[103,112,103,107,107,95,0,107],
[93,93,93,97,101,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,130,101,147,146,83,146],
[93,0,158,131,143,128,143,159],
[81,53,0,96,131,98,63,125],
[110,80,115,0,96,112,111,109],
[64,68,80,115,0,65,82,111],
[65,83,113,99,146,0,82,113],
[128,68,148,100,129,129,0,113],
[65,52,86,102,100,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,85,97,89,104,99],
[98,0,91,101,104,98,105,101],
[112,120,0,98,122,101,105,116],
[126,110,113,0,110,102,109,108],
[114,107,89,101,0,113,102,111],
[122,113,110,109,98,0,103,98],
[107,106,106,102,109,108,0,103],
[112,110,95,103,100,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,103,111,113,108,109],
[95,0,96,101,110,104,89,85],
[96,115,0,103,106,111,112,97],
[108,110,108,0,115,108,126,101],
[100,101,105,96,0,96,106,91],
[98,107,100,103,115,0,104,88],
[103,122,99,85,105,107,0,94],
[102,126,114,110,120,123,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,127,120,86,111,110],
[113,0,120,120,120,114,104,112],
[96,91,0,121,128,94,113,100],
[84,91,90,0,103,96,101,86],
[91,91,83,108,0,94,95,88],
[125,97,117,115,117,0,96,106],
[100,107,98,110,116,115,0,97],
[101,99,111,125,123,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,112,103,108,109,108],
[93,0,100,100,111,104,109,99],
[103,111,0,103,110,105,102,98],
[99,111,108,0,110,107,106,102],
[108,100,101,101,0,103,101,94],
[103,107,106,104,108,0,107,100],
[102,102,109,105,110,104,0,95],
[103,112,113,109,117,111,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,101,90,119,105,90,84],
[127,0,115,122,128,112,104,106],
[110,96,0,113,120,120,101,100],
[121,89,98,0,115,113,97,99],
[92,83,91,96,0,94,89,91],
[106,99,91,98,117,0,98,97],
[121,107,110,114,122,113,0,101],
[127,105,111,112,120,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,103,99,97,114,74,89],
[123,0,109,87,105,95,111,126],
[108,102,0,85,119,115,105,128],
[112,124,126,0,104,114,104,118],
[114,106,92,107,0,100,106,135],
[97,116,96,97,111,0,104,117],
[137,100,106,107,105,107,0,99],
[122,85,83,93,76,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,95,107,100,108,108],
[104,0,116,96,87,99,101,97],
[96,95,0,89,98,102,105,91],
[116,115,122,0,96,120,110,114],
[104,124,113,115,0,108,98,113],
[111,112,109,91,103,0,104,97],
[103,110,106,101,113,107,0,95],
[103,114,120,97,98,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,125,105,101,111,107],
[97,0,111,109,103,108,99,105],
[108,100,0,119,102,96,115,91],
[86,102,92,0,109,93,102,94],
[106,108,109,102,0,93,117,89],
[110,103,115,118,118,0,115,113],
[100,112,96,109,94,96,0,94],
[104,106,120,117,122,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,90,93,88,100,107,94],
[112,0,102,111,98,110,122,105],
[121,109,0,107,98,120,121,126],
[118,100,104,0,110,114,103,108],
[123,113,113,101,0,116,116,112],
[111,101,91,97,95,0,101,100],
[104,89,90,108,95,110,0,106],
[117,106,85,103,99,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,98,95,109,110,111],
[105,0,80,98,94,99,84,99],
[113,131,0,115,102,96,103,114],
[113,113,96,0,92,96,105,102],
[116,117,109,119,0,109,117,95],
[102,112,115,115,102,0,102,114],
[101,127,108,106,94,109,0,112],
[100,112,97,109,116,97,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,88,78,158,65,65,75],
[110,0,105,107,136,95,111,77],
[123,106,0,108,148,93,120,107],
[133,104,103,0,146,91,92,78],
[53,75,63,65,0,53,53,50],
[146,116,118,120,158,0,117,103],
[146,100,91,119,158,94,0,114],
[136,134,104,133,161,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,122,118,120,107,125],
[107,0,117,113,111,119,105,131],
[109,94,0,118,114,113,108,125],
[89,98,93,0,95,94,101,117],
[93,100,97,116,0,112,113,120],
[91,92,98,117,99,0,90,108],
[104,106,103,110,98,121,0,124],
[86,80,86,94,91,103,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,96,95,94,107,101],
[93,0,98,105,99,88,104,102],
[110,113,0,102,100,96,105,102],
[115,106,109,0,116,104,104,114],
[116,112,111,95,0,106,123,114],
[117,123,115,107,105,0,118,109],
[104,107,106,107,88,93,0,103],
[110,109,109,97,97,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,109,127,110,120,108],
[113,0,114,114,136,124,107,101],
[116,97,0,111,121,121,124,113],
[102,97,100,0,109,103,103,98],
[84,75,90,102,0,93,101,90],
[101,87,90,108,118,0,102,93],
[91,104,87,108,110,109,0,87],
[103,110,98,113,121,118,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,119,116,104,100,99],
[106,0,100,117,105,107,100,109],
[101,111,0,113,96,109,95,88],
[92,94,98,0,96,88,83,87],
[95,106,115,115,0,112,110,110],
[107,104,102,123,99,0,89,105],
[111,111,116,128,101,122,0,101],
[112,102,123,124,101,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,96,92,100,101,97],
[113,0,110,105,99,110,114,113],
[111,101,0,109,95,108,113,104],
[115,106,102,0,108,106,98,107],
[119,112,116,103,0,110,125,112],
[111,101,103,105,101,0,112,110],
[110,97,98,113,86,99,0,97],
[114,98,107,104,99,101,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,111,102,104,116,92,98],
[120,0,115,98,123,117,101,103],
[100,96,0,94,103,111,94,100],
[109,113,117,0,112,140,118,105],
[107,88,108,99,0,106,102,96],
[95,94,100,71,105,0,91,96],
[119,110,117,93,109,120,0,110],
[113,108,111,106,115,115,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,97,99,107,94,97],
[116,0,99,93,94,105,103,100],
[113,112,0,100,100,117,110,100],
[114,118,111,0,105,115,117,106],
[112,117,111,106,0,117,113,104],
[104,106,94,96,94,0,112,88],
[117,108,101,94,98,99,0,98],
[114,111,111,105,107,123,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,102,123,107,102,108],
[103,0,114,109,124,104,112,100],
[97,97,0,94,121,88,89,98],
[109,102,117,0,123,96,108,109],
[88,87,90,88,0,90,98,98],
[104,107,123,115,121,0,113,118],
[109,99,122,103,113,98,0,110],
[103,111,113,102,113,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,99,130,113,119,94],
[86,0,84,103,112,104,91,93],
[107,127,0,104,102,101,99,99],
[112,108,107,0,127,100,106,98],
[81,99,109,84,0,100,96,104],
[98,107,110,111,111,0,102,111],
[92,120,112,105,115,109,0,94],
[117,118,112,113,107,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,108,98,103,105,104],
[106,0,116,117,104,110,115,109],
[97,95,0,89,93,80,86,98],
[103,94,122,0,98,98,103,109],
[113,107,118,113,0,103,98,110],
[108,101,131,113,108,0,105,117],
[106,96,125,108,113,106,0,109],
[107,102,113,102,101,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,114,109,107,101,112,120],
[102,0,94,111,103,107,109,110],
[97,117,0,104,110,117,109,120],
[102,100,107,0,115,111,103,117],
[104,108,101,96,0,106,107,120],
[110,104,94,100,105,0,112,111],
[99,102,102,108,104,99,0,114],
[91,101,91,94,91,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,127,211,168,126,125,168],
[129,0,129,129,86,44,43,129],
[84,82,0,84,41,41,84,82],
[0,82,127,0,86,44,43,83],
[43,125,170,125,0,0,43,84],
[85,167,170,167,211,0,85,167],
[86,168,127,168,168,126,0,168],
[43,82,129,128,127,44,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,119,100,58,105,100,100],
[116,0,132,84,115,123,84,62],
[92,79,0,93,93,59,104,111],
[111,127,118,0,91,126,110,99],
[153,96,118,120,0,106,82,100],
[106,88,152,85,105,0,104,93],
[111,127,107,101,129,107,0,129],
[111,149,100,112,111,118,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,107,95,109,108,115],
[98,0,112,119,103,114,99,116],
[106,99,0,116,107,116,105,110],
[104,92,95,0,94,102,94,103],
[116,108,104,117,0,116,118,105],
[102,97,95,109,95,0,113,104],
[103,112,106,117,93,98,0,96],
[96,95,101,108,106,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,102,109,121,112,99],
[97,0,87,96,98,102,88,92],
[105,124,0,110,103,112,108,110],
[109,115,101,0,102,125,103,102],
[102,113,108,109,0,116,105,102],
[90,109,99,86,95,0,103,94],
[99,123,103,108,106,108,0,107],
[112,119,101,109,109,117,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,100,89,77,102,79,71],
[85,0,65,99,58,95,80,82],
[111,146,0,121,84,111,126,107],
[122,112,90,0,86,99,83,74],
[134,153,127,125,0,116,98,95],
[109,116,100,112,95,0,104,82],
[132,131,85,128,113,107,0,91],
[140,129,104,137,116,129,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,113,97,147,114,113,99],
[97,0,131,98,130,111,98,98],
[98,80,0,81,97,97,80,66],
[114,113,130,0,129,128,131,99],
[64,81,114,82,0,127,114,50],
[97,100,114,83,84,0,66,101],
[98,113,131,80,97,145,0,113],
[112,113,145,112,161,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,95,90,99,110,100],
[108,0,93,94,97,99,112,105],
[108,118,0,106,109,103,115,120],
[116,117,105,0,113,111,108,109],
[121,114,102,98,0,106,103,110],
[112,112,108,100,105,0,116,107],
[101,99,96,103,108,95,0,113],
[111,106,91,102,101,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,101,104,114,109,108],
[99,0,108,115,98,114,114,100],
[99,103,0,104,100,96,109,95],
[110,96,107,0,92,109,98,108],
[107,113,111,119,0,117,113,105],
[97,97,115,102,94,0,105,94],
[102,97,102,113,98,106,0,111],
[103,111,116,103,106,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,108,96,87,81,120,93],
[124,0,119,117,110,97,96,106],
[103,92,0,102,106,93,111,109],
[115,94,109,0,112,100,125,105],
[124,101,105,99,0,64,111,72],
[130,114,118,111,147,0,134,103],
[91,115,100,86,100,77,0,77],
[118,105,102,106,139,108,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,93,116,99,95,100],
[112,0,102,111,100,81,101,121],
[94,109,0,99,102,104,95,106],
[118,100,112,0,117,107,108,118],
[95,111,109,94,0,96,84,101],
[112,130,107,104,115,0,95,105],
[116,110,116,103,127,116,0,120],
[111,90,105,93,110,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,118,112,124,114,120,94],
[75,0,100,92,110,76,120,80],
[93,111,0,110,110,79,124,84],
[99,119,101,0,100,89,126,93],
[87,101,101,111,0,70,118,85],
[97,135,132,122,141,0,141,123],
[91,91,87,85,93,70,0,84],
[117,131,127,118,126,88,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,104,101,111,105,107,100],
[108,0,99,97,109,99,99,99],
[107,112,0,107,122,116,101,113],
[110,114,104,0,114,118,110,119],
[100,102,89,97,0,109,102,100],
[106,112,95,93,102,0,86,91],
[104,112,110,101,109,125,0,111],
[111,112,98,92,111,120,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,149,107,120,152,137,105],
[61,0,120,136,105,123,93,90],
[62,91,0,77,75,108,92,60],
[104,75,134,0,89,75,61,60],
[91,106,136,122,0,107,106,120],
[59,88,103,136,104,0,75,73],
[74,118,119,150,105,136,0,87],
[106,121,151,151,91,138,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,113,122,119,102,118],
[101,0,87,117,106,96,100,90],
[110,124,0,121,111,97,102,98],
[98,94,90,0,109,94,104,72],
[89,105,100,102,0,114,102,88],
[92,115,114,117,97,0,107,83],
[109,111,109,107,109,104,0,106],
[93,121,113,139,123,128,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,101,105,102,95,108],
[113,0,102,107,106,105,112,117],
[108,109,0,102,116,107,109,119],
[110,104,109,0,105,113,105,111],
[106,105,95,106,0,107,103,108],
[109,106,104,98,104,0,106,112],
[116,99,102,106,108,105,0,109],
[103,94,92,100,103,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,108,115,96,117,111,108],
[82,0,100,110,91,105,92,88],
[103,111,0,110,102,102,94,99],
[96,101,101,0,97,107,98,100],
[115,120,109,114,0,113,107,98],
[94,106,109,104,98,0,89,91],
[100,119,117,113,104,122,0,109],
[103,123,112,111,113,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,126,120,101,111,105,116],
[101,0,117,122,111,105,114,112],
[85,94,0,109,92,76,95,99],
[91,89,102,0,111,95,99,101],
[110,100,119,100,0,100,91,114],
[100,106,135,116,111,0,109,117],
[106,97,116,112,120,102,0,119],
[95,99,112,110,97,94,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,103,130,109,131,130],
[88,0,87,81,80,115,89,73],
[101,124,0,109,110,112,130,119],
[108,130,102,0,123,102,99,112],
[81,131,101,88,0,106,105,114],
[102,96,99,109,105,0,95,119],
[80,122,81,112,106,116,0,114],
[81,138,92,99,97,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,122,123,123,116,118,116],
[113,0,124,111,112,122,104,114],
[89,87,0,81,103,100,105,101],
[88,100,130,0,105,111,103,97],
[88,99,108,106,0,96,117,95],
[95,89,111,100,115,0,110,96],
[93,107,106,108,94,101,0,90],
[95,97,110,114,116,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,109,110,111,106,110],
[107,0,107,99,108,111,103,103],
[109,104,0,103,115,106,104,115],
[102,112,108,0,99,117,109,120],
[101,103,96,112,0,101,112,107],
[100,100,105,94,110,0,96,98],
[105,108,107,102,99,115,0,111],
[101,108,96,91,104,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,113,121,118,109,113],
[113,0,114,117,105,117,104,117],
[96,97,0,114,99,112,93,101],
[98,94,97,0,104,93,95,95],
[90,106,112,107,0,110,108,106],
[93,94,99,118,101,0,105,106],
[102,107,118,116,103,106,0,113],
[98,94,110,116,105,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,104,97,138,146,136,180],
[83,0,72,54,95,114,82,129],
[107,139,0,110,128,157,103,150],
[114,157,101,0,117,143,112,168],
[73,116,83,94,0,124,101,150],
[65,97,54,68,87,0,82,97],
[75,129,108,99,110,129,0,143],
[31,82,61,43,61,114,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,95,81,84,116,88,95],
[135,0,101,85,83,99,95,84],
[116,110,0,117,102,105,119,112],
[130,126,94,0,79,103,98,100],
[127,128,109,132,0,137,102,114],
[95,112,106,108,74,0,99,106],
[123,116,92,113,109,112,0,97],
[116,127,99,111,97,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,84,132,122,124,75,122],
[95,0,94,82,136,124,118,113],
[127,117,0,105,115,116,107,103],
[79,129,106,0,94,99,98,95],
[89,75,96,117,0,87,98,95],
[87,87,95,112,124,0,65,82],
[136,93,104,113,113,146,0,111],
[89,98,108,116,116,129,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,100,131,109,119,118],
[94,0,90,115,130,114,116,107],
[91,121,0,96,136,115,114,125],
[111,96,115,0,118,106,110,103],
[80,81,75,93,0,103,96,69],
[102,97,96,105,108,0,113,116],
[92,95,97,101,115,98,0,106],
[93,104,86,108,142,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,108,108,97,88,107],
[112,0,112,98,118,110,105,104],
[115,99,0,118,116,102,99,114],
[103,113,93,0,110,99,88,103],
[103,93,95,101,0,94,87,101],
[114,101,109,112,117,0,112,102],
[123,106,112,123,124,99,0,103],
[104,107,97,108,110,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,113,103,100,104,110],
[110,0,120,122,125,123,113,102],
[100,91,0,105,104,106,98,108],
[98,89,106,0,100,103,92,104],
[108,86,107,111,0,88,99,102],
[111,88,105,108,123,0,94,99],
[107,98,113,119,112,117,0,110],
[101,109,103,107,109,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,89,102,91,97,105,101],
[95,0,103,104,98,89,107,81],
[122,108,0,99,102,114,112,100],
[109,107,112,0,112,104,110,109],
[120,113,109,99,0,104,107,100],
[114,122,97,107,107,0,115,106],
[106,104,99,101,104,96,0,98],
[110,130,111,102,111,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,105,116,95,113,107],
[107,0,114,107,116,113,127,104],
[104,97,0,88,115,105,110,100],
[106,104,123,0,135,132,123,102],
[95,95,96,76,0,100,103,81],
[116,98,106,79,111,0,106,101],
[98,84,101,88,108,105,0,85],
[104,107,111,109,130,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,114,112,114,101,116],
[108,0,110,106,123,124,88,110],
[104,101,0,131,142,120,111,112],
[97,105,80,0,115,113,107,94],
[99,88,69,96,0,111,83,96],
[97,87,91,98,100,0,94,81],
[110,123,100,104,128,117,0,110],
[95,101,99,117,115,130,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,95,103,106,96,105],
[104,0,113,100,95,107,98,99],
[102,98,0,98,113,95,99,100],
[116,111,113,0,104,110,113,109],
[108,116,98,107,0,113,108,110],
[105,104,116,101,98,0,99,102],
[115,113,112,98,103,112,0,100],
[106,112,111,102,101,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,94,93,97,105,105],
[109,0,102,112,111,102,106,114],
[107,109,0,103,99,102,112,116],
[117,99,108,0,97,99,111,117],
[118,100,112,114,0,110,118,113],
[114,109,109,112,101,0,112,121],
[106,105,99,100,93,99,0,117],
[106,97,95,94,98,90,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,124,116,103,113,101,121],
[99,0,118,125,111,94,94,104],
[87,93,0,114,105,98,88,100],
[95,86,97,0,72,84,71,105],
[108,100,106,139,0,103,107,119],
[98,117,113,127,108,0,97,109],
[110,117,123,140,104,114,0,122],
[90,107,111,106,92,102,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,113,115,121,99,111],
[100,0,116,117,126,128,112,111],
[103,95,0,107,107,106,93,99],
[98,94,104,0,116,107,107,102],
[96,85,104,95,0,101,84,100],
[90,83,105,104,110,0,92,107],
[112,99,118,104,127,119,0,112],
[100,100,112,109,111,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,100,99,89,93,108],
[112,0,109,102,98,112,96,108],
[110,102,0,98,96,101,96,97],
[111,109,113,0,106,104,104,106],
[112,113,115,105,0,103,111,112],
[122,99,110,107,108,0,113,108],
[118,115,115,107,100,98,0,116],
[103,103,114,105,99,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,114,134,109,92,109],
[106,0,100,105,113,106,99,92],
[100,111,0,105,125,109,102,103],
[97,106,106,0,115,110,97,93],
[77,98,86,96,0,92,72,89],
[102,105,102,101,119,0,112,98],
[119,112,109,114,139,99,0,110],
[102,119,108,118,122,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,121,106,117,104,109],
[106,0,104,115,100,113,107,104],
[109,107,0,117,99,107,113,116],
[90,96,94,0,95,103,103,100],
[105,111,112,116,0,113,114,116],
[94,98,104,108,98,0,103,105],
[107,104,98,108,97,108,0,95],
[102,107,95,111,95,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,99,116,109,105,123],
[106,0,117,109,126,109,105,120],
[95,94,0,95,107,99,108,114],
[112,102,116,0,114,111,110,110],
[95,85,104,97,0,101,85,105],
[102,102,112,100,110,0,107,116],
[106,106,103,101,126,104,0,114],
[88,91,97,101,106,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,63,106,83,93,99,113],
[101,0,107,132,118,101,109,148],
[148,104,0,126,109,96,121,132],
[105,79,85,0,102,76,65,106],
[128,93,102,109,0,86,110,105],
[118,110,115,135,125,0,90,135],
[112,102,90,146,101,121,0,112],
[98,63,79,105,106,76,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,121,99,104,106,115],
[113,0,105,124,113,106,122,113],
[117,106,0,121,95,105,111,105],
[90,87,90,0,89,86,106,100],
[112,98,116,122,0,118,114,121],
[107,105,106,125,93,0,115,116],
[105,89,100,105,97,96,0,102],
[96,98,106,111,90,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,132,84,124,102,110,101],
[78,0,111,86,135,81,83,89],
[79,100,0,115,111,78,98,83],
[127,125,96,0,115,96,84,115],
[87,76,100,96,0,67,92,97],
[109,130,133,115,144,0,106,90],
[101,128,113,127,119,105,0,113],
[110,122,128,96,114,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,106,108,106,103,106],
[119,0,111,104,116,118,119,113],
[105,100,0,107,106,100,113,101],
[105,107,104,0,99,100,112,100],
[103,95,105,112,0,107,104,99],
[105,93,111,111,104,0,105,112],
[108,92,98,99,107,106,0,102],
[105,98,110,111,112,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,141,154,97,83,125,140],
[114,0,130,100,70,57,101,85],
[70,81,0,83,97,55,70,55],
[57,111,128,0,126,98,72,113],
[114,141,114,85,0,142,99,114],
[128,154,156,113,69,0,98,113],
[86,110,141,139,112,113,0,127],
[71,126,156,98,97,98,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,104,119,102,125,102],
[88,0,92,80,82,86,105,92],
[105,119,0,91,96,84,107,88],
[107,131,120,0,106,103,122,110],
[92,129,115,105,0,121,134,119],
[109,125,127,108,90,0,129,90],
[86,106,104,89,77,82,0,96],
[109,119,123,101,92,121,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,100,123,156,128,115],
[96,0,94,62,71,124,97,86],
[96,117,0,90,74,139,100,106],
[111,149,121,0,108,141,102,102],
[88,140,137,103,0,166,117,139],
[55,87,72,70,45,0,72,102],
[83,114,111,109,94,139,0,103],
[96,125,105,109,72,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,132,116,128,106,103,111],
[97,0,105,111,116,95,73,63],
[79,106,0,95,80,87,96,79],
[95,100,116,0,91,84,112,51],
[83,95,131,120,0,105,79,95],
[105,116,124,127,106,0,81,102],
[108,138,115,99,132,130,0,108],
[100,148,132,160,116,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,99,115,121,107,103,99],
[88,0,82,92,104,111,92,91],
[112,129,0,120,124,128,105,110],
[96,119,91,0,122,109,108,92],
[90,107,87,89,0,107,93,83],
[104,100,83,102,104,0,94,83],
[108,119,106,103,118,117,0,102],
[112,120,101,119,128,128,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,106,105,132,112,109,102],
[103,0,109,108,120,97,98,110],
[105,102,0,114,112,107,88,91],
[106,103,97,0,117,88,94,104],
[79,91,99,94,0,101,77,101],
[99,114,104,123,110,0,98,110],
[102,113,123,117,134,113,0,110],
[109,101,120,107,110,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,111,105,108,115,109],
[105,0,112,110,108,109,119,107],
[107,99,0,99,102,94,108,92],
[100,101,112,0,106,106,112,108],
[106,103,109,105,0,102,108,107],
[103,102,117,105,109,0,114,107],
[96,92,103,99,103,97,0,89],
[102,104,119,103,104,104,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,111,93,106,126,132],
[105,0,74,105,110,109,99,128],
[123,137,0,103,114,107,99,123],
[100,106,108,0,93,98,85,117],
[118,101,97,118,0,118,101,129],
[105,102,104,113,93,0,121,115],
[85,112,112,126,110,90,0,124],
[79,83,88,94,82,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,107,105,107,109,100,108],
[88,0,95,101,91,94,102,102],
[104,116,0,115,117,115,106,119],
[106,110,96,0,99,105,97,114],
[104,120,94,112,0,106,99,121],
[102,117,96,106,105,0,105,105],
[111,109,105,114,112,106,0,117],
[103,109,92,97,90,106,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,80,95,94,95,92,97],
[111,0,106,114,111,108,113,95],
[131,105,0,107,99,116,103,106],
[116,97,104,0,107,110,111,96],
[117,100,112,104,0,120,106,100],
[116,103,95,101,91,0,105,98],
[119,98,108,100,105,106,0,86],
[114,116,105,115,111,113,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,107,99,116,105,102],
[94,0,104,94,93,103,91,92],
[98,107,0,103,94,110,97,86],
[104,117,108,0,108,114,101,101],
[112,118,117,103,0,118,106,104],
[95,108,101,97,93,0,97,81],
[106,120,114,110,105,114,0,110],
[109,119,125,110,107,130,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,94,103,110,107,101],
[110,0,104,101,105,110,121,107],
[104,107,0,96,109,108,111,104],
[117,110,115,0,122,114,114,103],
[108,106,102,89,0,107,110,100],
[101,101,103,97,104,0,115,96],
[104,90,100,97,101,96,0,88],
[110,104,107,108,111,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,105,112,113,114,106],
[93,0,103,95,97,88,95,85],
[97,108,0,100,102,104,112,102],
[106,116,111,0,99,102,114,106],
[99,114,109,112,0,102,112,109],
[98,123,107,109,109,0,112,113],
[97,116,99,97,99,99,0,102],
[105,126,109,105,102,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,92,106,101,110,109],
[98,0,79,99,88,89,109,105],
[103,132,0,113,100,103,110,94],
[119,112,98,0,90,86,99,95],
[105,123,111,121,0,100,100,117],
[110,122,108,125,111,0,107,102],
[101,102,101,112,111,104,0,107],
[102,106,117,116,94,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,104,102,103,101,109],
[102,0,93,100,101,98,92,99],
[102,118,0,111,105,104,105,107],
[107,111,100,0,102,96,95,109],
[109,110,106,109,0,104,99,112],
[108,113,107,115,107,0,106,104],
[110,119,106,116,112,105,0,111],
[102,112,104,102,99,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,115,107,110,104,142],
[105,0,93,96,100,97,116,131],
[97,118,0,114,103,118,119,124],
[96,115,97,0,110,116,100,126],
[104,111,108,101,0,119,118,136],
[101,114,93,95,92,0,100,106],
[107,95,92,111,93,111,0,123],
[69,80,87,85,75,105,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,105,99,116,113,98,104],
[120,0,102,110,118,115,89,114],
[106,109,0,109,119,112,94,98],
[112,101,102,0,121,116,107,111],
[95,93,92,90,0,109,90,92],
[98,96,99,95,102,0,92,96],
[113,122,117,104,121,119,0,103],
[107,97,113,100,119,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,93,104,99,101,97],
[102,0,96,106,95,96,94,106],
[116,115,0,104,108,105,104,110],
[118,105,107,0,106,116,104,114],
[107,116,103,105,0,92,103,117],
[112,115,106,95,119,0,111,109],
[110,117,107,107,108,100,0,107],
[114,105,101,97,94,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,105,101,108,112,104],
[87,0,95,92,102,94,102,93],
[107,116,0,106,108,101,110,97],
[106,119,105,0,109,104,112,97],
[110,109,103,102,0,97,110,91],
[103,117,110,107,114,0,115,104],
[99,109,101,99,101,96,0,107],
[107,118,114,114,120,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,101,95,98,97,101],
[108,0,109,103,97,97,99,108],
[109,102,0,104,95,103,112,108],
[110,108,107,0,97,95,99,111],
[116,114,116,114,0,111,102,113],
[113,114,108,116,100,0,107,110],
[114,112,99,112,109,104,0,113],
[110,103,103,100,98,101,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,129,109,95,113,115],
[87,0,89,92,82,92,84,106],
[107,122,0,128,105,102,115,123],
[82,119,83,0,97,87,99,109],
[102,129,106,114,0,107,124,120],
[116,119,109,124,104,0,110,131],
[98,127,96,112,87,101,0,115],
[96,105,88,102,91,80,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,128,112,123,110,109],
[113,0,120,118,98,118,97,111],
[103,91,0,111,90,97,100,96],
[83,93,100,0,88,94,82,103],
[99,113,121,123,0,109,89,107],
[88,93,114,117,102,0,90,99],
[101,114,111,129,122,121,0,107],
[102,100,115,108,104,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,88,112,95,101,95],
[115,0,127,105,128,108,119,103],
[102,84,0,100,91,101,103,86],
[123,106,111,0,119,101,117,101],
[99,83,120,92,0,93,105,97],
[116,103,110,110,118,0,114,102],
[110,92,108,94,106,97,0,106],
[116,108,125,110,114,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,91,100,106,94,103],
[118,0,102,107,113,120,105,107],
[115,109,0,107,115,112,108,105],
[120,104,104,0,116,111,98,110],
[111,98,96,95,0,113,102,109],
[105,91,99,100,98,0,86,99],
[117,106,103,113,109,125,0,103],
[108,104,106,101,102,112,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,109,96,102,114,102],
[106,0,103,101,108,113,104,105],
[100,108,0,105,114,114,109,108],
[102,110,106,0,109,109,118,103],
[115,103,97,102,0,112,97,106],
[109,98,97,102,99,0,110,109],
[97,107,102,93,114,101,0,93],
[109,106,103,108,105,102,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,99,100,107,88,102],
[117,0,106,112,109,110,97,114],
[111,105,0,108,104,110,107,112],
[112,99,103,0,109,113,97,113],
[111,102,107,102,0,110,95,107],
[104,101,101,98,101,0,95,103],
[123,114,104,114,116,116,0,123],
[109,97,99,98,104,108,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,100,103,107,119,99,108],
[106,0,110,107,110,111,98,109],
[111,101,0,113,108,112,99,114],
[108,104,98,0,99,104,94,109],
[104,101,103,112,0,127,95,112],
[92,100,99,107,84,0,90,91],
[112,113,112,117,116,121,0,103],
[103,102,97,102,99,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,112,117,96,111,107],
[107,0,110,111,113,101,112,109],
[94,101,0,106,107,107,102,101],
[99,100,105,0,110,105,109,111],
[94,98,104,101,0,107,100,99],
[115,110,104,106,104,0,119,111],
[100,99,109,102,111,92,0,101],
[104,102,110,100,112,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,120,106,116,105,123],
[104,0,110,123,100,126,107,117],
[102,101,0,130,110,118,104,111],
[91,88,81,0,86,86,86,115],
[105,111,101,125,0,112,109,122],
[95,85,93,125,99,0,98,104],
[106,104,107,125,102,113,0,133],
[88,94,100,96,89,107,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,92,116,94,103,103],
[100,0,97,91,97,96,98,86],
[99,114,0,89,103,86,99,98],
[119,120,122,0,109,93,114,111],
[95,114,108,102,0,94,91,109],
[117,115,125,118,117,0,105,106],
[108,113,112,97,120,106,0,98],
[108,125,113,100,102,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,120,130,108,95,127],
[95,0,103,105,114,97,95,108],
[96,108,0,117,114,93,97,112],
[91,106,94,0,123,84,96,110],
[81,97,97,88,0,83,81,92],
[103,114,118,127,128,0,108,120],
[116,116,114,115,130,103,0,123],
[84,103,99,101,119,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,95,84,88,95,95],
[114,0,94,98,90,82,77,90],
[106,117,0,115,93,118,108,104],
[116,113,96,0,92,95,98,93],
[127,121,118,119,0,117,97,112],
[123,129,93,116,94,0,100,86],
[116,134,103,113,114,111,0,106],
[116,121,107,118,99,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,101,102,108,96,106,108],
[120,0,114,110,125,110,121,104],
[110,97,0,104,107,97,111,101],
[109,101,107,0,121,105,113,107],
[103,86,104,90,0,94,102,97],
[115,101,114,106,117,0,119,104],
[105,90,100,98,109,92,0,97],
[103,107,110,104,114,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,111,112,98,102,91],
[115,0,93,106,112,113,112,110],
[116,118,0,115,105,112,103,116],
[100,105,96,0,92,109,106,103],
[99,99,106,119,0,102,94,104],
[113,98,99,102,109,0,101,93],
[109,99,108,105,117,110,0,106],
[120,101,95,108,107,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,109,107,125,105,103],
[92,0,107,104,82,94,99,110],
[102,104,0,110,104,120,102,113],
[102,107,101,0,102,112,114,118],
[104,129,107,109,0,126,101,111],
[86,117,91,99,85,0,83,86],
[106,112,109,97,110,128,0,117],
[108,101,98,93,100,125,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,100,104,106,99,117],
[96,0,104,97,95,87,99,100],
[90,107,0,96,93,94,97,97],
[111,114,115,0,113,86,107,110],
[107,116,118,98,0,90,94,101],
[105,124,117,125,121,0,119,94],
[112,112,114,104,117,92,0,118],
[94,111,114,101,110,117,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,100,101,100,99,105],
[102,0,106,95,91,80,97,87],
[108,105,0,93,88,104,98,92],
[111,116,118,0,97,97,108,100],
[110,120,123,114,0,101,107,112],
[111,131,107,114,110,0,113,101],
[112,114,113,103,104,98,0,111],
[106,124,119,111,99,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,114,120,113,102,103],
[104,0,119,109,115,117,113,114],
[94,92,0,108,107,97,103,102],
[97,102,103,0,118,106,86,103],
[91,96,104,93,0,107,86,92],
[98,94,114,105,104,0,94,106],
[109,98,108,125,125,117,0,118],
[108,97,109,108,119,105,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,111,113,111,119,116,115],
[118,0,109,114,115,129,105,103],
[100,102,0,103,111,124,123,92],
[98,97,108,0,94,111,106,93],
[100,96,100,117,0,108,122,95],
[92,82,87,100,103,0,107,84],
[95,106,88,105,89,104,0,85],
[96,108,119,118,116,127,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,117,111,104,97,108,129],
[90,0,118,98,93,92,102,110],
[94,93,0,75,89,83,98,105],
[100,113,136,0,110,106,117,125],
[107,118,122,101,0,94,125,124],
[114,119,128,105,117,0,126,123],
[103,109,113,94,86,85,0,111],
[82,101,106,86,87,88,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,158,134,112,106,97,135],
[77,0,122,112,82,94,95,115],
[53,89,0,109,87,77,74,123],
[77,99,102,0,72,99,93,105],
[99,129,124,139,0,122,122,113],
[105,117,134,112,89,0,81,129],
[114,116,137,118,89,130,0,124],
[76,96,88,106,98,82,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,117,104,121,103,117],
[102,0,117,115,107,103,104,108],
[91,94,0,113,105,100,98,100],
[94,96,98,0,105,108,107,93],
[107,104,106,106,0,106,105,108],
[90,108,111,103,105,0,98,100],
[108,107,113,104,106,113,0,114],
[94,103,111,118,103,111,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,105,112,111,106,115],
[116,0,109,105,97,108,99,106],
[110,102,0,100,101,96,101,111],
[106,106,111,0,100,99,120,109],
[99,114,110,111,0,96,109,110],
[100,103,115,112,115,0,105,101],
[105,112,110,91,102,106,0,97],
[96,105,100,102,101,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,115,102,113,110,110,99],
[88,0,97,102,112,98,98,90],
[96,114,0,101,107,90,96,91],
[109,109,110,0,117,98,99,101],
[98,99,104,94,0,92,87,93],
[101,113,121,113,119,0,111,110],
[101,113,115,112,124,100,0,109],
[112,121,120,110,118,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,72,125,78,135,87,90],
[124,0,89,127,122,124,119,108],
[139,122,0,140,109,150,89,124],
[86,84,71,0,104,89,57,86],
[133,89,102,107,0,136,117,120],
[76,87,61,122,75,0,75,74],
[124,92,122,154,94,136,0,109],
[121,103,87,125,91,137,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,113,99,124,107,105],
[99,0,116,109,109,119,106,98],
[103,95,0,98,96,112,96,99],
[98,102,113,0,104,111,92,104],
[112,102,115,107,0,114,101,108],
[87,92,99,100,97,0,96,101],
[104,105,115,119,110,115,0,107],
[106,113,112,107,103,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,89,103,114,101,91],
[118,0,103,112,117,102,92,106],
[122,108,0,103,114,96,120,100],
[122,99,108,0,122,110,115,96],
[108,94,97,89,0,95,106,81],
[97,109,115,101,116,0,101,87],
[110,119,91,96,105,110,0,79],
[120,105,111,115,130,124,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,91,105,106,95,110,99],
[109,0,114,112,111,94,102,107],
[120,97,0,94,108,104,104,89],
[106,99,117,0,104,92,98,90],
[105,100,103,107,0,98,103,91],
[116,117,107,119,113,0,102,101],
[101,109,107,113,108,109,0,94],
[112,104,122,121,120,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,106,102,113,119,95],
[120,0,120,131,122,133,121,95],
[115,91,0,109,120,98,104,87],
[105,80,102,0,118,91,76,97],
[109,89,91,93,0,93,111,87],
[98,78,113,120,118,0,119,121],
[92,90,107,135,100,92,0,113],
[116,116,124,114,124,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,116,117,101,89,122,96],
[117,0,96,121,103,108,131,82],
[95,115,0,100,92,107,126,117],
[94,90,111,0,98,93,102,113],
[110,108,119,113,0,107,124,103],
[122,103,104,118,104,0,145,112],
[89,80,85,109,87,66,0,103],
[115,129,94,98,108,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,97,110,98,107,107],
[119,0,127,119,115,106,123,101],
[103,84,0,115,95,103,107,89],
[114,92,96,0,94,94,97,98],
[101,96,116,117,0,101,106,88],
[113,105,108,117,110,0,115,103],
[104,88,104,114,105,96,0,102],
[104,110,122,113,123,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,120,119,131,102,94,102],
[116,0,108,119,120,104,106,106],
[91,103,0,111,125,110,92,101],
[92,92,100,0,129,92,97,97],
[80,91,86,82,0,102,103,79],
[109,107,101,119,109,0,104,103],
[117,105,119,114,108,107,0,101],
[109,105,110,114,132,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,91,113,100,110,97,107],
[95,0,109,108,105,107,101,101],
[120,102,0,106,107,111,110,106],
[98,103,105,0,105,109,99,108],
[111,106,104,106,0,101,112,102],
[101,104,100,102,110,0,113,94],
[114,110,101,112,99,98,0,105],
[104,110,105,103,109,117,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,140,137,129,114,117,100],
[85,0,106,98,95,81,100,78],
[71,105,0,119,122,113,110,97],
[74,113,92,0,93,118,86,101],
[82,116,89,118,0,92,96,90],
[97,130,98,93,119,0,96,107],
[94,111,101,125,115,115,0,109],
[111,133,114,110,121,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,96,122,116,93,95],
[102,0,110,100,125,95,110,103],
[91,101,0,90,131,96,93,86],
[115,111,121,0,125,121,89,103],
[89,86,80,86,0,86,85,91],
[95,116,115,90,125,0,86,108],
[118,101,118,122,126,125,0,109],
[116,108,125,108,120,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,122,92,119,92,122,180],
[120,0,120,91,149,150,120,149],
[89,91,0,89,148,120,118,118],
[119,120,122,0,120,121,91,119],
[92,62,63,91,0,92,121,150],
[119,61,91,90,119,0,119,148],
[89,91,93,120,90,92,0,118],
[31,62,93,92,61,63,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,107,110,111,97,110],
[106,0,116,96,102,106,99,116],
[107,95,0,105,99,106,100,111],
[104,115,106,0,105,103,105,118],
[101,109,112,106,0,102,102,121],
[100,105,105,108,109,0,109,97],
[114,112,111,106,109,102,0,115],
[101,95,100,93,90,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,93,105,85,102,98,89],
[86,0,84,97,90,80,75,88],
[118,127,0,112,89,97,88,108],
[106,114,99,0,75,93,85,88],
[126,121,122,136,0,130,104,103],
[109,131,114,118,81,0,88,124],
[113,136,123,126,107,123,0,102],
[122,123,103,123,108,87,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,100,117,118,106,111,103],
[81,0,85,104,92,105,109,97],
[111,126,0,128,115,112,104,121],
[94,107,83,0,82,98,88,87],
[93,119,96,129,0,120,102,108],
[105,106,99,113,91,0,93,112],
[100,102,107,123,109,118,0,106],
[108,114,90,124,103,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,119,119,103,108,97],
[107,0,94,119,110,104,118,99],
[106,117,0,117,124,102,131,107],
[92,92,94,0,103,94,108,89],
[92,101,87,108,0,90,106,95],
[108,107,109,117,121,0,122,96],
[103,93,80,103,105,89,0,108],
[114,112,104,122,116,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,107,96,104,125,105],
[98,0,110,107,107,97,111,87],
[110,101,0,108,112,107,132,83],
[104,104,103,0,101,113,123,89],
[115,104,99,110,0,104,108,89],
[107,114,104,98,107,0,115,107],
[86,100,79,88,103,96,0,78],
[106,124,128,122,122,104,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,85,119,89,87,87,98],
[131,0,115,124,102,100,116,126],
[126,96,0,107,101,118,96,99],
[92,87,104,0,97,107,85,97],
[122,109,110,114,0,108,97,129],
[124,111,93,104,103,0,111,104],
[124,95,115,126,114,100,0,127],
[113,85,112,114,82,107,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,105,114,104,109,93,91],
[118,0,107,100,132,118,138,104],
[106,104,0,115,109,105,121,98],
[97,111,96,0,112,94,109,78],
[107,79,102,99,0,92,108,79],
[102,93,106,117,119,0,124,110],
[118,73,90,102,103,87,0,81],
[120,107,113,133,132,101,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,101,115,96,115,107],
[104,0,99,100,118,104,121,105],
[104,112,0,102,105,105,119,95],
[110,111,109,0,128,100,123,109],
[96,93,106,83,0,87,100,99],
[115,107,106,111,124,0,107,103],
[96,90,92,88,111,104,0,97],
[104,106,116,102,112,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,124,108,99,112,120,123],
[103,0,126,101,110,118,117,120],
[87,85,0,81,91,100,104,102],
[103,110,130,0,112,109,130,124],
[112,101,120,99,0,107,120,115],
[99,93,111,102,104,0,119,109],
[91,94,107,81,91,92,0,103],
[88,91,109,87,96,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,109,120,112,104,100],
[104,0,111,111,118,104,114,117],
[98,100,0,100,105,101,111,96],
[102,100,111,0,116,108,109,111],
[91,93,106,95,0,97,100,98],
[99,107,110,103,114,0,105,113],
[107,97,100,102,111,106,0,102],
[111,94,115,100,113,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,100,119,90,115,121,129],
[88,0,111,104,101,110,112,114],
[111,100,0,93,89,127,117,92],
[92,107,118,0,106,114,102,117],
[121,110,122,105,0,134,134,136],
[96,101,84,97,77,0,107,106],
[90,99,94,109,77,104,0,105],
[82,97,119,94,75,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,119,108,108,106,103],
[100,0,106,112,108,105,123,105],
[116,105,0,116,102,107,111,104],
[92,99,95,0,105,95,100,92],
[103,103,109,106,0,109,110,108],
[103,106,104,116,102,0,102,107],
[105,88,100,111,101,109,0,106],
[108,106,107,119,103,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,99,93,102,111,108,95],
[127,0,108,99,130,123,128,116],
[112,103,0,108,117,114,114,114],
[118,112,103,0,119,106,120,101],
[109,81,94,92,0,103,112,104],
[100,88,97,105,108,0,115,102],
[103,83,97,91,99,96,0,93],
[116,95,97,110,107,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,103,111,106,116,100],
[104,0,100,105,100,108,115,98],
[100,111,0,97,102,104,107,106],
[108,106,114,0,100,110,124,89],
[100,111,109,111,0,108,105,97],
[105,103,107,101,103,0,106,91],
[95,96,104,87,106,105,0,86],
[111,113,105,122,114,120,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,102,107,102,101,92],
[115,0,99,106,116,110,91,105],
[117,112,0,102,118,105,104,103],
[109,105,109,0,116,115,108,100],
[104,95,93,95,0,98,95,78],
[109,101,106,96,113,0,105,100],
[110,120,107,103,116,106,0,106],
[119,106,108,111,133,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,121,116,110,110,111],
[92,0,103,113,108,97,97,101],
[109,108,0,117,100,106,109,114],
[90,98,94,0,93,89,104,94],
[95,103,111,118,0,103,104,102],
[101,114,105,122,108,0,97,110],
[101,114,102,107,107,114,0,107],
[100,110,97,117,109,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,111,86,98,97,108],
[118,0,105,121,100,101,107,113],
[112,106,0,115,97,106,104,114],
[100,90,96,0,95,93,100,109],
[125,111,114,116,0,99,107,122],
[113,110,105,118,112,0,119,116],
[114,104,107,111,104,92,0,105],
[103,98,97,102,89,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,101,112,109,120,120,114],
[88,0,92,102,95,100,93,93],
[110,119,0,110,92,125,125,103],
[99,109,101,0,100,102,105,101],
[102,116,119,111,0,107,125,102],
[91,111,86,109,104,0,105,94],
[91,118,86,106,86,106,0,99],
[97,118,108,110,109,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,104,107,102,99,101],
[114,0,113,104,106,120,120,113],
[103,98,0,98,104,106,97,103],
[107,107,113,0,116,117,105,101],
[104,105,107,95,0,110,116,100],
[109,91,105,94,101,0,109,104],
[112,91,114,106,95,102,0,108],
[110,98,108,110,111,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,105,105,112,111,110],
[106,0,110,102,106,111,98,101],
[104,101,0,101,95,108,102,91],
[106,109,110,0,103,98,106,105],
[106,105,116,108,0,102,104,104],
[99,100,103,113,109,0,102,95],
[100,113,109,105,107,109,0,106],
[101,110,120,106,107,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,125,104,114,114,105],
[101,0,109,120,96,105,103,126],
[99,102,0,112,106,107,105,105],
[86,91,99,0,82,106,93,101],
[107,115,105,129,0,121,110,112],
[97,106,104,105,90,0,93,103],
[97,108,106,118,101,118,0,102],
[106,85,106,110,99,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,105,113,121,105,119],
[104,0,110,118,106,105,106,114],
[107,101,0,117,116,126,111,113],
[106,93,94,0,108,119,102,96],
[98,105,95,103,0,101,97,106],
[90,106,85,92,110,0,92,98],
[106,105,100,109,114,119,0,105],
[92,97,98,115,105,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,106,108,112,96,108],
[107,0,110,112,117,98,112,108],
[101,101,0,109,104,99,107,92],
[105,99,102,0,94,101,94,97],
[103,94,107,117,0,105,94,111],
[99,113,112,110,106,0,105,108],
[115,99,104,117,117,106,0,96],
[103,103,119,114,100,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,115,110,112,93,139,117],
[96,0,114,115,111,112,106,118],
[96,97,0,107,85,104,115,108],
[101,96,104,0,110,87,102,110],
[99,100,126,101,0,101,116,121],
[118,99,107,124,110,0,103,124],
[72,105,96,109,95,108,0,116],
[94,93,103,101,90,87,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,86,100,100,108,94,102],
[113,0,100,116,104,99,108,98],
[125,111,0,126,111,101,110,104],
[111,95,85,0,95,95,104,108],
[111,107,100,116,0,90,107,100],
[103,112,110,116,121,0,113,98],
[117,103,101,107,104,98,0,106],
[109,113,107,103,111,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,93,106,114,101,102],
[115,0,100,100,113,111,106,112],
[111,111,0,105,107,113,105,109],
[118,111,106,0,102,106,103,106],
[105,98,104,109,0,101,98,101],
[97,100,98,105,110,0,112,116],
[110,105,106,108,113,99,0,118],
[109,99,102,105,110,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,95,134,96,108,86],
[102,0,88,77,102,101,86,90],
[105,123,0,109,105,105,100,108],
[116,134,102,0,108,118,102,112],
[77,109,106,103,0,88,91,78],
[115,110,106,93,123,0,87,90],
[103,125,111,109,120,124,0,111],
[125,121,103,99,133,121,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,102,100,99,91,97],
[119,0,128,105,98,114,106,106],
[97,83,0,107,101,97,87,100],
[109,106,104,0,99,109,81,87],
[111,113,110,112,0,99,113,90],
[112,97,114,102,112,0,118,107],
[120,105,124,130,98,93,0,103],
[114,105,111,124,121,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,153,154,117,117,134,136],
[112,0,113,94,172,172,132,112],
[58,98,0,98,97,117,116,116],
[57,117,113,0,97,116,95,76],
[94,39,114,114,0,117,74,93],
[94,39,94,95,94,0,74,93],
[77,79,95,116,137,137,0,97],
[75,99,95,135,118,118,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,127,105,108,111,113,116],
[101,0,105,106,105,101,123,100],
[84,106,0,105,108,104,100,116],
[106,105,106,0,99,106,115,99],
[103,106,103,112,0,103,106,102],
[100,110,107,105,108,0,109,102],
[98,88,111,96,105,102,0,99],
[95,111,95,112,109,109,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,73,84,83,106,89,86],
[113,0,93,75,107,132,109,96],
[138,118,0,107,107,124,101,117],
[127,136,104,0,99,129,94,116],
[128,104,104,112,0,111,101,113],
[105,79,87,82,100,0,104,105],
[122,102,110,117,110,107,0,95],
[125,115,94,95,98,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,126,139,71,86,126,127],
[112,0,111,140,83,97,111,99],
[85,100,0,126,115,99,98,113],
[72,71,85,0,57,57,99,84],
[140,128,96,154,0,111,138,111],
[125,114,112,154,100,0,140,111],
[85,100,113,112,73,71,0,100],
[84,112,98,127,100,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,114,122,102,108,107],
[108,0,104,120,116,109,109,93],
[109,107,0,120,111,104,113,102],
[97,91,91,0,104,98,105,101],
[89,95,100,107,0,87,116,94],
[109,102,107,113,124,0,106,101],
[103,102,98,106,95,105,0,105],
[104,118,109,110,117,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,99,84,92,92,114],
[101,0,100,95,100,79,81,97],
[108,111,0,110,94,79,94,112],
[112,116,101,0,106,95,95,120],
[127,111,117,105,0,106,96,128],
[119,132,132,116,105,0,128,132],
[119,130,117,116,115,83,0,127],
[97,114,99,91,83,79,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,91,120,109,95,124],
[107,0,99,107,121,114,112,122],
[118,112,0,96,126,135,108,119],
[120,104,115,0,120,117,103,105],
[91,90,85,91,0,101,74,93],
[102,97,76,94,110,0,101,108],
[116,99,103,108,137,110,0,130],
[87,89,92,106,118,103,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,95,98,101,90,79],
[106,0,136,97,114,115,128,93],
[112,75,0,95,67,79,104,83],
[116,114,116,0,118,81,116,97],
[113,97,144,93,0,78,118,111],
[110,96,132,130,133,0,98,95],
[121,83,107,95,93,113,0,109],
[132,118,128,114,100,116,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,96,90,105,96,96,101],
[118,0,98,94,116,109,96,102],
[115,113,0,113,122,112,96,136],
[121,117,98,0,130,107,111,110],
[106,95,89,81,0,95,120,109],
[115,102,99,104,116,0,108,123],
[115,115,115,100,91,103,0,132],
[110,109,75,101,102,88,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,121,112,110,115,123,112],
[106,0,112,114,104,110,108,107],
[90,99,0,102,97,110,100,103],
[99,97,109,0,102,107,110,110],
[101,107,114,109,0,112,110,108],
[96,101,101,104,99,0,92,93],
[88,103,111,101,101,119,0,98],
[99,104,108,101,103,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,117,107,117,104,107,116],
[87,0,91,89,92,84,84,90],
[94,120,0,110,99,97,94,114],
[104,122,101,0,110,108,109,115],
[94,119,112,101,0,96,98,111],
[107,127,114,103,115,0,110,119],
[104,127,117,102,113,101,0,112],
[95,121,97,96,100,92,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,118,111,109,109,111],
[106,0,113,106,103,96,100,98],
[89,98,0,95,103,86,96,90],
[93,105,116,0,87,94,97,102],
[100,108,108,124,0,104,87,103],
[102,115,125,117,107,0,103,100],
[102,111,115,114,124,108,0,105],
[100,113,121,109,108,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,96,115,116,115,95],
[94,0,111,94,93,96,101,90],
[97,100,0,104,97,98,111,89],
[115,117,107,0,108,106,117,97],
[96,118,114,103,0,101,110,109],
[95,115,113,105,110,0,121,101],
[96,110,100,94,101,90,0,85],
[116,121,122,114,102,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,105,108,119,120,104,118],
[75,0,96,100,89,100,82,105],
[106,115,0,100,111,102,103,122],
[103,111,111,0,112,107,107,108],
[92,122,100,99,0,101,89,107],
[91,111,109,104,110,0,95,105],
[107,129,108,104,122,116,0,120],
[93,106,89,103,104,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,97,105,104,95,98],
[105,0,115,107,110,115,104,108],
[103,96,0,104,112,112,104,98],
[114,104,107,0,113,105,110,97],
[106,101,99,98,0,97,94,92],
[107,96,99,106,114,0,101,99],
[116,107,107,101,117,110,0,105],
[113,103,113,114,119,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,103,110,111,118,101,102],
[88,0,108,94,101,102,99,104],
[108,103,0,105,105,112,102,106],
[101,117,106,0,118,120,120,108],
[100,110,106,93,0,94,94,110],
[93,109,99,91,117,0,93,96],
[110,112,109,91,117,118,0,121],
[109,107,105,103,101,115,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,115,98,112,116,108,87],
[101,0,107,102,118,119,115,97],
[96,104,0,94,114,116,109,99],
[113,109,117,0,123,109,118,92],
[99,93,97,88,0,114,113,106],
[95,92,95,102,97,0,111,91],
[103,96,102,93,98,100,0,94],
[124,114,112,119,105,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,95,109,95,97,79,106],
[84,0,103,112,106,97,100,93],
[116,108,0,116,113,96,117,89],
[102,99,95,0,105,97,88,103],
[116,105,98,106,0,113,107,95],
[114,114,115,114,98,0,113,103],
[132,111,94,123,104,98,0,87],
[105,118,122,108,116,108,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,102,82,109,93,95,109],
[116,0,100,86,118,108,89,124],
[109,111,0,101,96,94,97,125],
[129,125,110,0,120,91,98,115],
[102,93,115,91,0,97,88,111],
[118,103,117,120,114,0,117,128],
[116,122,114,113,123,94,0,127],
[102,87,86,96,100,83,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,104,100,90,100,104],
[99,0,83,99,111,100,115,120],
[118,128,0,132,120,103,123,123],
[107,112,79,0,97,118,108,123],
[111,100,91,114,0,101,122,123],
[121,111,108,93,110,0,99,108],
[111,96,88,103,89,112,0,97],
[107,91,88,88,88,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,95,101,102,88,93],
[124,0,124,134,118,113,100,124],
[113,87,0,102,101,108,110,103],
[116,77,109,0,104,113,91,96],
[110,93,110,107,0,106,97,104],
[109,98,103,98,105,0,104,112],
[123,111,101,120,114,107,0,99],
[118,87,108,115,107,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,120,108,115,107,104,104],
[103,0,104,111,108,119,107,100],
[91,107,0,102,100,114,90,100],
[103,100,109,0,108,108,105,103],
[96,103,111,103,0,121,103,103],
[104,92,97,103,90,0,91,95],
[107,104,121,106,108,120,0,113],
[107,111,111,108,108,116,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,86,97,121,110,110],
[95,0,92,78,91,100,107,105],
[109,119,0,107,110,104,115,107],
[125,133,104,0,98,116,130,112],
[114,120,101,113,0,120,117,108],
[90,111,107,95,91,0,115,99],
[101,104,96,81,94,96,0,94],
[101,106,104,99,103,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,110,92,116,120,110],
[106,0,120,101,94,106,107,106],
[107,91,0,105,103,108,106,96],
[101,110,106,0,101,117,109,94],
[119,117,108,110,0,112,108,96],
[95,105,103,94,99,0,109,102],
[91,104,105,102,103,102,0,91],
[101,105,115,117,115,109,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,102,109,86,90,120],
[111,0,101,114,94,99,102,97],
[111,110,0,111,97,86,101,108],
[109,97,100,0,96,104,92,108],
[102,117,114,115,0,108,112,112],
[125,112,125,107,103,0,113,115],
[121,109,110,119,99,98,0,110],
[91,114,103,103,99,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,117,111,104,105,120,107],
[121,0,121,93,103,114,114,105],
[94,90,0,88,96,99,99,90],
[100,118,123,0,116,110,124,108],
[107,108,115,95,0,117,123,109],
[106,97,112,101,94,0,100,96],
[91,97,112,87,88,111,0,97],
[104,106,121,103,102,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,102,122,91,103,94,100],
[100,0,112,112,107,93,106,102],
[109,99,0,133,106,90,92,101],
[89,99,78,0,85,80,99,85],
[120,104,105,126,0,106,114,106],
[108,118,121,131,105,0,114,115],
[117,105,119,112,97,97,0,124],
[111,109,110,126,105,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,83,100,94,99,110,106],
[121,0,114,96,122,83,113,112],
[128,97,0,84,114,119,106,124],
[111,115,127,0,115,110,82,111],
[117,89,97,96,0,92,107,104],
[112,128,92,101,119,0,110,136],
[101,98,105,129,104,101,0,99],
[105,99,87,100,107,75,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,115,108,104,103,102,112],
[120,0,119,122,102,108,106,102],
[96,92,0,100,107,96,96,98],
[103,89,111,0,97,109,99,106],
[107,109,104,114,0,107,102,103],
[108,103,115,102,104,0,111,100],
[109,105,115,112,109,100,0,104],
[99,109,113,105,108,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,95,100,98,99,99],
[113,0,108,113,109,111,118,101],
[118,103,0,106,110,116,110,101],
[116,98,105,0,103,113,112,94],
[111,102,101,108,0,103,105,103],
[113,100,95,98,108,0,108,107],
[112,93,101,99,106,103,0,101],
[112,110,110,117,108,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,130,113,111,105,110],
[96,0,101,121,105,106,100,85],
[116,110,0,116,101,120,115,109],
[81,90,95,0,100,97,92,92],
[98,106,110,111,0,115,106,97],
[100,105,91,114,96,0,92,79],
[106,111,96,119,105,119,0,92],
[101,126,102,119,114,132,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,113,115,106,94,106],
[99,0,103,101,117,99,106,119],
[112,108,0,104,121,106,109,114],
[98,110,107,0,116,108,114,109],
[96,94,90,95,0,91,94,102],
[105,112,105,103,120,0,105,114],
[117,105,102,97,117,106,0,113],
[105,92,97,102,109,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,105,93,117,106,113],
[103,0,96,114,106,103,112,103],
[100,115,0,113,101,104,110,110],
[106,97,98,0,102,90,94,105],
[118,105,110,109,0,111,111,112],
[94,108,107,121,100,0,95,106],
[105,99,101,117,100,116,0,101],
[98,108,101,106,99,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,147,146,105,104,107,105],
[84,0,126,104,84,105,63,62],
[64,85,0,84,106,85,65,106],
[65,107,127,0,86,84,87,105],
[106,127,105,125,0,83,85,126],
[107,106,126,127,128,0,107,105],
[104,148,146,124,126,104,0,146],
[106,149,105,106,85,106,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,101,99,101,93,95],
[111,0,107,113,102,104,90,101],
[114,104,0,122,107,107,101,98],
[110,98,89,0,112,98,93,99],
[112,109,104,99,0,97,104,99],
[110,107,104,113,114,0,111,103],
[118,121,110,118,107,100,0,117],
[116,110,113,112,112,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,108,113,105,97,114],
[92,0,103,99,105,85,96,93],
[104,108,0,110,111,110,118,115],
[103,112,101,0,108,97,104,105],
[98,106,100,103,0,111,110,108],
[106,126,101,114,100,0,102,98],
[114,115,93,107,101,109,0,116],
[97,118,96,106,103,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,100,93,108,105,96],
[113,0,107,104,88,102,114,116],
[109,104,0,110,107,107,105,122],
[111,107,101,0,91,124,109,114],
[118,123,104,120,0,115,123,117],
[103,109,104,87,96,0,101,117],
[106,97,106,102,88,110,0,123],
[115,95,89,97,94,94,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,87,94,105,117,105],
[117,0,114,103,109,108,121,101],
[107,97,0,96,106,108,130,105],
[124,108,115,0,103,109,127,123],
[117,102,105,108,0,113,123,105],
[106,103,103,102,98,0,128,104],
[94,90,81,84,88,83,0,92],
[106,110,106,88,106,107,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,104,105,110,91,94],
[123,0,115,108,115,106,103,101],
[116,96,0,113,80,97,95,117],
[107,103,98,0,101,104,95,102],
[106,96,131,110,0,95,96,109],
[101,105,114,107,116,0,108,123],
[120,108,116,116,115,103,0,137],
[117,110,94,109,102,88,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,113,114,107,111,105],
[93,0,107,113,117,104,107,95],
[98,104,0,117,98,106,100,93],
[98,98,94,0,105,103,103,100],
[97,94,113,106,0,101,101,103],
[104,107,105,108,110,0,99,93],
[100,104,111,108,110,112,0,106],
[106,116,118,111,108,118,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,109,103,100,113,102],
[99,0,95,97,96,95,105,97],
[116,116,0,109,117,103,116,112],
[102,114,102,0,107,97,106,96],
[108,115,94,104,0,95,103,103],
[111,116,108,114,116,0,116,103],
[98,106,95,105,108,95,0,100],
[109,114,99,115,108,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,104,96,102,112,103],
[96,0,100,105,120,95,92,104],
[101,111,0,112,95,108,108,98],
[107,106,99,0,94,89,99,92],
[115,91,116,117,0,99,105,101],
[109,116,103,122,112,0,108,107],
[99,119,103,112,106,103,0,108],
[108,107,113,119,110,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,91,115,112,96,104,102],
[107,0,94,101,111,97,89,96],
[120,117,0,103,116,96,102,108],
[96,110,108,0,107,106,109,110],
[99,100,95,104,0,109,99,107],
[115,114,115,105,102,0,91,115],
[107,122,109,102,112,120,0,118],
[109,115,103,101,104,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,119,105,107,120,100],
[108,0,113,118,115,100,119,106],
[108,98,0,108,101,96,113,103],
[92,93,103,0,99,110,124,106],
[106,96,110,112,0,110,126,99],
[104,111,115,101,101,0,118,101],
[91,92,98,87,85,93,0,92],
[111,105,108,105,112,110,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,97,104,123,108,105],
[95,0,88,90,97,101,87,94],
[101,123,0,94,101,113,105,109],
[114,121,117,0,110,109,100,97],
[107,114,110,101,0,118,98,104],
[88,110,98,102,93,0,91,97],
[103,124,106,111,113,120,0,112],
[106,117,102,114,107,114,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,107,108,103,102,92],
[110,0,110,103,117,107,106,113],
[99,101,0,115,101,105,112,100],
[104,108,96,0,105,101,102,99],
[103,94,110,106,0,106,103,91],
[108,104,106,110,105,0,102,109],
[109,105,99,109,108,109,0,108],
[119,98,111,112,120,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,110,136,110,89,108],
[104,0,131,110,146,131,127,114],
[97,80,0,115,117,102,101,97],
[101,101,96,0,111,118,90,88],
[75,65,94,100,0,99,78,70],
[101,80,109,93,112,0,96,95],
[122,84,110,121,133,115,0,103],
[103,97,114,123,141,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,95,104,100,95,97,103],
[118,0,110,116,106,108,102,114],
[116,101,0,120,113,99,108,114],
[107,95,91,0,102,92,104,106],
[111,105,98,109,0,101,100,113],
[116,103,112,119,110,0,113,115],
[114,109,103,107,111,98,0,117],
[108,97,97,105,98,96,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,114,102,103,110,113],
[103,0,121,112,111,106,100,113],
[100,90,0,98,84,101,95,103],
[97,99,113,0,113,115,103,106],
[109,100,127,98,0,100,101,96],
[108,105,110,96,111,0,100,101],
[101,111,116,108,110,111,0,106],
[98,98,108,105,115,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,101,112,91,121,117],
[103,0,109,113,122,99,116,124],
[100,102,0,104,127,107,119,131],
[110,98,107,0,115,101,117,126],
[99,89,84,96,0,83,108,105],
[120,112,104,110,128,0,110,135],
[90,95,92,94,103,101,0,113],
[94,87,80,85,106,76,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,81,91,92,93,104,78],
[112,0,94,96,98,96,97,91],
[130,117,0,103,110,103,121,107],
[120,115,108,0,90,84,109,120],
[119,113,101,121,0,108,116,113],
[118,115,108,127,103,0,123,118],
[107,114,90,102,95,88,0,105],
[133,120,104,91,98,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,99,102,86,106,89],
[119,0,103,112,128,116,123,111],
[118,108,0,123,107,104,128,104],
[112,99,88,0,118,99,121,91],
[109,83,104,93,0,89,111,71],
[125,95,107,112,122,0,121,96],
[105,88,83,90,100,90,0,77],
[122,100,107,120,140,115,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,94,117,117,109,130],
[108,0,107,108,126,113,105,124],
[105,104,0,97,116,119,107,116],
[117,103,114,0,119,112,117,126],
[94,85,95,92,0,110,98,100],
[94,98,92,99,101,0,113,115],
[102,106,104,94,113,98,0,128],
[81,87,95,85,111,96,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,99,112,105,107,118],
[97,0,102,105,106,107,101,117],
[91,109,0,97,99,110,92,112],
[112,106,114,0,111,107,99,114],
[99,105,112,100,0,106,97,123],
[106,104,101,104,105,0,93,116],
[104,110,119,112,114,118,0,122],
[93,94,99,97,88,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,111,82,103,112,117],
[89,0,100,104,91,98,111,108],
[104,111,0,101,106,105,107,113],
[100,107,110,0,87,100,120,122],
[129,120,105,124,0,125,130,138],
[108,113,106,111,86,0,111,117],
[99,100,104,91,81,100,0,113],
[94,103,98,89,73,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,105,116,92,110,90],
[108,0,102,104,107,104,121,106],
[109,109,0,106,111,111,116,96],
[106,107,105,0,118,115,112,88],
[95,104,100,93,0,101,104,91],
[119,107,100,96,110,0,118,92],
[101,90,95,99,107,93,0,86],
[121,105,115,123,120,119,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,106,93,77,104,85],
[114,0,111,113,111,103,107,108],
[108,100,0,107,101,105,101,99],
[105,98,104,0,90,85,99,109],
[118,100,110,121,0,95,112,103],
[134,108,106,126,116,0,129,104],
[107,104,110,112,99,82,0,99],
[126,103,112,102,108,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,106,105,111,114,105,93],
[118,0,108,95,95,115,102,83],
[105,103,0,99,94,104,117,88],
[106,116,112,0,96,126,117,96],
[100,116,117,115,0,128,108,116],
[97,96,107,85,83,0,110,75],
[106,109,94,94,103,101,0,101],
[118,128,123,115,95,136,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,87,94,94,96,98,92],
[118,0,101,104,97,107,100,111],
[124,110,0,100,115,106,98,109],
[117,107,111,0,122,109,101,106],
[117,114,96,89,0,103,103,99],
[115,104,105,102,108,0,102,105],
[113,111,113,110,108,109,0,104],
[119,100,102,105,112,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,169,126,127,169,84,126,169],
[42,0,126,85,84,84,126,126],
[85,85,0,127,169,85,127,85],
[84,126,84,0,126,126,126,84],
[42,127,42,85,0,84,42,42],
[127,127,126,85,127,0,127,169],
[85,85,84,85,169,84,0,85],
[42,85,126,127,169,42,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,118,123,111,109,112],
[111,0,111,116,115,123,102,114],
[93,100,0,103,120,110,108,114],
[93,95,108,0,108,105,103,108],
[88,96,91,103,0,106,93,100],
[100,88,101,106,105,0,99,106],
[102,109,103,108,118,112,0,112],
[99,97,97,103,111,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,116,105,104,104,107],
[104,0,101,109,103,109,101,108],
[106,110,0,112,102,109,90,99],
[95,102,99,0,113,125,107,114],
[106,108,109,98,0,105,103,95],
[107,102,102,86,106,0,105,90],
[107,110,121,104,108,106,0,110],
[104,103,112,97,116,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,124,92,122,125,95,129],
[80,0,67,81,90,64,91,88],
[87,144,0,87,112,103,116,122],
[119,130,124,0,122,101,122,125],
[89,121,99,89,0,75,82,85],
[86,147,108,110,136,0,101,135],
[116,120,95,89,129,110,0,116],
[82,123,89,86,126,76,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,113,101,114,89,88,129],
[130,0,128,113,110,112,95,139],
[98,83,0,118,106,101,106,123],
[110,98,93,0,104,96,70,100],
[97,101,105,107,0,88,83,101],
[122,99,110,115,123,0,88,130],
[123,116,105,141,128,123,0,137],
[82,72,88,111,110,81,74,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,114,123,116,109,119],
[99,0,109,112,120,104,103,106],
[112,102,0,114,121,102,96,113],
[97,99,97,0,114,95,110,103],
[88,91,90,97,0,84,97,99],
[95,107,109,116,127,0,120,112],
[102,108,115,101,114,91,0,110],
[92,105,98,108,112,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,91,60,181,90,150,120],
[122,0,91,121,152,152,181,152],
[120,120,0,60,151,150,150,120],
[151,90,151,0,151,150,120,90],
[30,59,60,60,0,30,120,89],
[121,59,61,61,181,0,151,121],
[61,30,61,91,91,60,0,61],
[91,59,91,121,122,90,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,105,103,106,113,97],
[105,0,110,106,108,96,114,97],
[97,101,0,104,88,94,101,97],
[106,105,107,0,98,106,113,102],
[108,103,123,113,0,98,118,114],
[105,115,117,105,113,0,110,106],
[98,97,110,98,93,101,0,95],
[114,114,114,109,97,105,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,108,96,110,108,114,116],
[75,0,76,76,89,82,81,91],
[103,135,0,132,125,137,114,104],
[115,135,79,0,99,105,92,115],
[101,122,86,112,0,130,123,111],
[103,129,74,106,81,0,73,93],
[97,130,97,119,88,138,0,105],
[95,120,107,96,100,118,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,119,119,114,111,105,101],
[89,0,90,96,103,91,99,85],
[92,121,0,117,111,107,99,102],
[92,115,94,0,96,104,94,95],
[97,108,100,115,0,94,93,90],
[100,120,104,107,117,0,104,109],
[106,112,112,117,118,107,0,99],
[110,126,109,116,121,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,113,115,118,104,101,115],
[112,0,106,111,110,120,100,118],
[98,105,0,105,113,111,111,139],
[96,100,106,0,105,110,89,98],
[93,101,98,106,0,106,109,115],
[107,91,100,101,105,0,89,110],
[110,111,100,122,102,122,0,100],
[96,93,72,113,96,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,122,122,123,116,101,106],
[92,0,95,89,88,82,91,96],
[89,116,0,96,111,95,102,100],
[89,122,115,0,117,105,121,109],
[88,123,100,94,0,95,106,107],
[95,129,116,106,116,0,118,113],
[110,120,109,90,105,93,0,108],
[105,115,111,102,104,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,101,90,121,108,106],
[108,0,128,92,108,98,100,131],
[91,83,0,95,87,99,110,104],
[110,119,116,0,110,122,100,118],
[121,103,124,101,0,118,123,113],
[90,113,112,89,93,0,104,119],
[103,111,101,111,88,107,0,114],
[105,80,107,93,98,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,91,74,95,83,107,87],
[129,0,107,98,98,102,116,102],
[120,104,0,99,116,125,114,110],
[137,113,112,0,141,115,135,99],
[116,113,95,70,0,90,126,103],
[128,109,86,96,121,0,135,111],
[104,95,97,76,85,76,0,100],
[124,109,101,112,108,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,96,95,99,101,100],
[112,0,105,113,101,107,104,104],
[109,106,0,113,103,108,110,98],
[115,98,98,0,110,109,96,111],
[116,110,108,101,0,113,103,116],
[112,104,103,102,98,0,110,103],
[110,107,101,115,108,101,0,109],
[111,107,113,100,95,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,111,141,129,112,126,84],
[68,0,84,81,70,55,84,95],
[100,127,0,126,115,129,130,113],
[70,130,85,0,89,113,87,85],
[82,141,96,122,0,96,111,109],
[99,156,82,98,115,0,127,127],
[85,127,81,124,100,84,0,67],
[127,116,98,126,102,84,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,96,97,111,111,113],
[109,0,111,98,100,118,114,94],
[99,100,0,96,122,95,122,96],
[115,113,115,0,113,126,105,102],
[114,111,89,98,0,96,115,101],
[100,93,116,85,115,0,103,102],
[100,97,89,106,96,108,0,95],
[98,117,115,109,110,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,128,110,98,111,131],
[116,0,117,105,108,104,104,109],
[103,94,0,112,107,106,109,123],
[83,106,99,0,116,102,99,110],
[101,103,104,95,0,93,82,114],
[113,107,105,109,118,0,109,115],
[100,107,102,112,129,102,0,126],
[80,102,88,101,97,96,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,106,105,106,141,106],
[105,0,175,70,140,105,176,140],
[106,36,0,71,71,71,106,71],
[105,141,140,0,70,141,141,106],
[106,71,140,141,0,106,141,71],
[105,106,140,70,105,0,106,106],
[70,35,105,70,70,105,0,35],
[105,71,140,105,140,105,176,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,113,106,95,96,109],
[110,0,101,96,117,91,111,105],
[114,110,0,105,114,103,112,116],
[98,115,106,0,115,100,115,111],
[105,94,97,96,0,91,96,102],
[116,120,108,111,120,0,98,111],
[115,100,99,96,115,113,0,112],
[102,106,95,100,109,100,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,104,100,110,113,113],
[98,0,91,88,84,90,88,89],
[114,120,0,110,104,114,112,115],
[107,123,101,0,99,103,110,111],
[111,127,107,112,0,99,106,116],
[101,121,97,108,112,0,111,108],
[98,123,99,101,105,100,0,102],
[98,122,96,100,95,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,116,106,99,98,106],
[109,0,103,118,104,109,108,112],
[104,108,0,119,118,105,112,113],
[95,93,92,0,92,93,101,96],
[105,107,93,119,0,108,109,114],
[112,102,106,118,103,0,94,115],
[113,103,99,110,102,117,0,111],
[105,99,98,115,97,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,105,107,96,103,106],
[103,0,116,108,110,106,111,114],
[104,95,0,104,103,103,114,93],
[106,103,107,0,117,101,108,111],
[104,101,108,94,0,98,101,103],
[115,105,108,110,113,0,108,102],
[108,100,97,103,110,103,0,107],
[105,97,118,100,108,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,104,118,109,104,117],
[95,0,102,103,107,104,107,108],
[101,109,0,114,109,116,107,114],
[107,108,97,0,102,99,106,105],
[93,104,102,109,0,110,117,126],
[102,107,95,112,101,0,100,105],
[107,104,104,105,94,111,0,109],
[94,103,97,106,85,106,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,167,133,97,134,110,117],
[134,0,158,119,117,117,102,127],
[44,53,0,103,58,72,84,89],
[78,92,108,0,95,94,83,97],
[114,94,153,116,0,119,91,116],
[77,94,139,117,92,0,84,124],
[101,109,127,128,120,127,0,155],
[94,84,122,114,95,87,56,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,112,96,129,120,117],
[92,0,91,103,91,105,107,112],
[93,120,0,74,86,135,111,107],
[99,108,137,0,108,133,107,103],
[115,120,125,103,0,122,123,123],
[82,106,76,78,89,0,94,90],
[91,104,100,104,88,117,0,99],
[94,99,104,108,88,121,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,136,93,118,110,93,121],
[93,0,110,93,100,99,123,96],
[75,101,0,83,104,113,81,90],
[118,118,128,0,135,118,94,100],
[93,111,107,76,0,91,89,88],
[101,112,98,93,120,0,84,94],
[118,88,130,117,122,127,0,120],
[90,115,121,111,123,117,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,106,96,103,99,102],
[107,0,108,97,87,102,94,103],
[112,103,0,106,99,101,96,107],
[105,114,105,0,102,91,95,106],
[115,124,112,109,0,100,109,106],
[108,109,110,120,111,0,101,96],
[112,117,115,116,102,110,0,109],
[109,108,104,105,105,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,99,99,93,76,92],
[113,0,93,116,110,120,81,103],
[121,118,0,111,112,125,97,115],
[112,95,100,0,107,102,116,99],
[112,101,99,104,0,110,98,93],
[118,91,86,109,101,0,78,79],
[135,130,114,95,113,133,0,114],
[119,108,96,112,118,132,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,114,115,110,115,108],
[110,0,112,119,116,117,110,100],
[106,99,0,113,119,109,108,99],
[97,92,98,0,108,92,100,91],
[96,95,92,103,0,104,95,102],
[101,94,102,119,107,0,103,95],
[96,101,103,111,116,108,0,110],
[103,111,112,120,109,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,104,114,111,108,108],
[114,0,111,101,113,111,105,105],
[99,100,0,109,107,104,102,112],
[107,110,102,0,116,121,114,104],
[97,98,104,95,0,105,90,101],
[100,100,107,90,106,0,106,106],
[103,106,109,97,121,105,0,94],
[103,106,99,107,110,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,106,105,93,95,110],
[111,0,110,107,119,115,103,108],
[93,101,0,99,115,98,97,107],
[105,104,112,0,112,108,117,111],
[106,92,96,99,0,108,103,99],
[118,96,113,103,103,0,98,115],
[116,108,114,94,108,113,0,115],
[101,103,104,100,112,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,126,102,129,125,106,121],
[94,0,127,95,103,115,108,113],
[85,84,0,93,96,116,108,113],
[109,116,118,0,104,125,106,111],
[82,108,115,107,0,122,111,124],
[86,96,95,86,89,0,94,105],
[105,103,103,105,100,117,0,107],
[90,98,98,100,87,106,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,102,91,113,113,99,97],
[88,0,98,80,105,97,84,84],
[109,113,0,104,108,103,105,111],
[120,131,107,0,100,124,99,113],
[98,106,103,111,0,112,106,100],
[98,114,108,87,99,0,95,95],
[112,127,106,112,105,116,0,96],
[114,127,100,98,111,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,108,95,118,87,106,104],
[89,0,106,111,114,114,101,102],
[103,105,0,115,111,96,97,106],
[116,100,96,0,113,98,86,100],
[93,97,100,98,0,80,82,78],
[124,97,115,113,131,0,109,115],
[105,110,114,125,129,102,0,101],
[107,109,105,111,133,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,104,104,88,113,104],
[102,0,121,116,108,118,106,119],
[102,90,0,111,99,97,107,101],
[107,95,100,0,90,82,101,94],
[107,103,112,121,0,101,113,113],
[123,93,114,129,110,0,125,115],
[98,105,104,110,98,86,0,96],
[107,92,110,117,98,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,100,126,121,103,126],
[97,0,106,97,115,100,103,113],
[99,105,0,107,118,98,102,113],
[111,114,104,0,114,114,115,115],
[85,96,93,97,0,83,90,107],
[90,111,113,97,128,0,110,112],
[108,108,109,96,121,101,0,118],
[85,98,98,96,104,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,94,98,92,105,96],
[110,0,95,94,97,109,106,108],
[106,116,0,103,110,109,118,109],
[117,117,108,0,113,103,103,118],
[113,114,101,98,0,107,99,115],
[119,102,102,108,104,0,105,110],
[106,105,93,108,112,106,0,110],
[115,103,102,93,96,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,121,105,109,99,104],
[107,0,108,109,99,92,105,107],
[99,103,0,99,97,100,97,98],
[90,102,112,0,98,100,97,102],
[106,112,114,113,0,101,102,107],
[102,119,111,111,110,0,110,111],
[112,106,114,114,109,101,0,110],
[107,104,113,109,104,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,119,97,98,101,115],
[106,0,119,117,100,106,102,111],
[96,92,0,110,94,93,90,105],
[92,94,101,0,93,95,99,109],
[114,111,117,118,0,112,96,98],
[113,105,118,116,99,0,124,117],
[110,109,121,112,115,87,0,109],
[96,100,106,102,113,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,99,121,108,110,90],
[114,0,102,103,125,110,113,104],
[102,109,0,110,122,106,111,89],
[112,108,101,0,114,108,102,101],
[90,86,89,97,0,88,91,83],
[103,101,105,103,123,0,93,103],
[101,98,100,109,120,118,0,109],
[121,107,122,110,128,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,107,101,101,103,98],
[102,0,97,103,94,93,100,102],
[106,114,0,105,113,97,100,97],
[104,108,106,0,102,96,103,106],
[110,117,98,109,0,108,116,102],
[110,118,114,115,103,0,92,111],
[108,111,111,108,95,119,0,117],
[113,109,114,105,109,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,117,96,114,119,105,114],
[110,0,99,96,107,130,118,118],
[94,112,0,107,105,109,105,132],
[115,115,104,0,111,113,103,121],
[97,104,106,100,0,113,94,112],
[92,81,102,98,98,0,83,108],
[106,93,106,108,117,128,0,122],
[97,93,79,90,99,103,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,101,106,115,117,107,116],
[99,0,92,99,102,108,104,110],
[110,119,0,103,114,108,108,107],
[105,112,108,0,111,106,105,107],
[96,109,97,100,0,106,108,108],
[94,103,103,105,105,0,96,104],
[104,107,103,106,103,115,0,112],
[95,101,104,104,103,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,92,96,101,90,94],
[110,0,112,118,112,118,113,96],
[112,99,0,94,96,109,96,90],
[119,93,117,0,113,107,110,108],
[115,99,115,98,0,106,111,104],
[110,93,102,104,105,0,110,99],
[121,98,115,101,100,101,0,99],
[117,115,121,103,107,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,95,108,107,108,97,99],
[123,0,110,115,116,118,118,100],
[116,101,0,104,107,105,110,116],
[103,96,107,0,104,109,109,102],
[104,95,104,107,0,99,100,92],
[103,93,106,102,112,0,100,105],
[114,93,101,102,111,111,0,95],
[112,111,95,109,119,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,120,102,125,111,123,104],
[94,0,111,95,129,89,109,116],
[91,100,0,100,108,100,104,99],
[109,116,111,0,124,100,115,117],
[86,82,103,87,0,100,95,85],
[100,122,111,111,111,0,116,105],
[88,102,107,96,116,95,0,99],
[107,95,112,94,126,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,89,105,112,102,101],
[99,0,120,73,106,110,101,102],
[103,91,0,90,97,104,105,94],
[122,138,121,0,108,113,101,109],
[106,105,114,103,0,108,109,108],
[99,101,107,98,103,0,111,105],
[109,110,106,110,102,100,0,96],
[110,109,117,102,103,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,143,124,142,105,121,122],
[71,0,107,124,52,89,141,73],
[68,104,0,120,85,104,123,104],
[87,87,91,0,36,86,106,71],
[69,159,126,175,0,140,123,106],
[106,122,107,125,71,0,123,104],
[90,70,88,105,88,88,0,72],
[89,138,107,140,105,107,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,101,117,103,109,107],
[105,0,113,104,111,113,102,107],
[100,98,0,102,112,122,116,103],
[110,107,109,0,108,106,111,99],
[94,100,99,103,0,102,95,95],
[108,98,89,105,109,0,105,96],
[102,109,95,100,116,106,0,108],
[104,104,108,112,116,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,128,105,124,106,126,100],
[98,0,102,110,93,91,115,88],
[83,109,0,108,88,90,114,93],
[106,101,103,0,84,90,94,97],
[87,118,123,127,0,101,122,102],
[105,120,121,121,110,0,118,107],
[85,96,97,117,89,93,0,90],
[111,123,118,114,109,104,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,180,122,90,121,150,92],
[61,0,30,62,61,30,121,92],
[31,181,0,93,90,62,150,92],
[89,149,118,0,89,120,149,91],
[121,150,121,122,0,61,211,122],
[90,181,149,91,150,0,211,152],
[61,90,61,62,0,0,0,92],
[119,119,119,120,89,59,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,122,113,107,103,122,116],
[84,0,103,90,106,110,108,107],
[89,108,0,105,119,121,118,115],
[98,121,106,0,117,116,122,119],
[104,105,92,94,0,103,114,103],
[108,101,90,95,108,0,103,89],
[89,103,93,89,97,108,0,106],
[95,104,96,92,108,122,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,104,112,99,110,104],
[108,0,117,111,114,103,111,107],
[106,94,0,100,101,101,109,98],
[107,100,111,0,114,105,111,105],
[99,97,110,97,0,101,111,102],
[112,108,110,106,110,0,99,104],
[101,100,102,100,100,112,0,103],
[107,104,113,106,109,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,97,90,120,112,116],
[112,0,94,120,108,121,109,124],
[100,117,0,94,110,108,109,113],
[114,91,117,0,98,122,107,115],
[121,103,101,113,0,117,110,120],
[91,90,103,89,94,0,91,105],
[99,102,102,104,101,120,0,112],
[95,87,98,96,91,106,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,92,92,118,151,151,120],
[91,0,122,61,90,121,121,32],
[119,89,0,89,120,151,89,121],
[119,150,122,0,148,181,181,88],
[93,121,91,63,0,91,91,95],
[60,90,60,30,120,0,60,32],
[60,90,122,30,120,151,0,62],
[91,179,90,123,116,179,149,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,124,100,115,119,81,94],
[92,0,110,93,108,116,104,94],
[87,101,0,94,116,115,97,106],
[111,118,117,0,115,127,103,107],
[96,103,95,96,0,108,86,104],
[92,95,96,84,103,0,94,78],
[130,107,114,108,125,117,0,101],
[117,117,105,104,107,133,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,103,109,118,102,101],
[110,0,111,112,103,126,117,108],
[113,100,0,94,110,119,99,111],
[108,99,117,0,111,115,104,102],
[102,108,101,100,0,111,98,98],
[93,85,92,96,100,0,88,100],
[109,94,112,107,113,123,0,109],
[110,103,100,109,113,111,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,127,124,119,96,122],
[105,0,106,109,106,119,122,109],
[111,105,0,114,117,104,118,118],
[84,102,97,0,104,110,102,97],
[87,105,94,107,0,106,115,106],
[92,92,107,101,105,0,116,109],
[115,89,93,109,96,95,0,128],
[89,102,93,114,105,102,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,108,102,106,100,108],
[105,0,99,113,113,104,100,112],
[105,112,0,100,99,107,97,105],
[103,98,111,0,108,111,109,106],
[109,98,112,103,0,106,103,108],
[105,107,104,100,105,0,100,109],
[111,111,114,102,108,111,0,116],
[103,99,106,105,103,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,120,97,113,104,106],
[99,0,114,120,108,123,107,108],
[100,97,0,105,97,124,93,102],
[91,91,106,0,96,116,107,106],
[114,103,114,115,0,130,105,120],
[98,88,87,95,81,0,94,87],
[107,104,118,104,106,117,0,117],
[105,103,109,105,91,124,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,119,111,112,102,101],
[103,0,110,108,112,101,106,95],
[86,101,0,114,95,94,93,92],
[92,103,97,0,102,98,106,91],
[100,99,116,109,0,102,101,110],
[99,110,117,113,109,0,101,88],
[109,105,118,105,110,110,0,112],
[110,116,119,120,101,123,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,119,110,111,122,104,109],
[106,0,102,106,101,110,110,116],
[92,109,0,108,102,113,106,113],
[101,105,103,0,97,106,86,109],
[100,110,109,114,0,114,114,122],
[89,101,98,105,97,0,101,105],
[107,101,105,125,97,110,0,108],
[102,95,98,102,89,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,93,122,103,97,109],
[98,0,102,78,106,89,86,89],
[105,109,0,91,97,91,98,87],
[118,133,120,0,123,108,100,99],
[89,105,114,88,0,85,101,89],
[108,122,120,103,126,0,93,107],
[114,125,113,111,110,118,0,105],
[102,122,124,112,122,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,74,80,115,95,89,85],
[108,0,94,93,128,116,102,101],
[137,117,0,109,134,117,139,103],
[131,118,102,0,131,106,114,114],
[96,83,77,80,0,95,107,85],
[116,95,94,105,116,0,112,98],
[122,109,72,97,104,99,0,98],
[126,110,108,97,126,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,108,96,107,105,103],
[102,0,104,107,98,100,102,110],
[113,107,0,109,102,108,109,107],
[103,104,102,0,101,98,98,97],
[115,113,109,110,0,112,103,110],
[104,111,103,113,99,0,103,101],
[106,109,102,113,108,108,0,106],
[108,101,104,114,101,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,101,102,112,112,90],
[105,0,120,107,101,122,108,100],
[100,91,0,92,103,96,105,98],
[110,104,119,0,111,114,106,115],
[109,110,108,100,0,117,108,104],
[99,89,115,97,94,0,111,100],
[99,103,106,105,103,100,0,100],
[121,111,113,96,107,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,89,115,106,102,106,117],
[119,0,111,116,117,96,109,115],
[122,100,0,114,112,117,100,116],
[96,95,97,0,110,93,99,105],
[105,94,99,101,0,92,108,112],
[109,115,94,118,119,0,126,122],
[105,102,111,112,103,85,0,106],
[94,96,95,106,99,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,107,125,99,99,114],
[109,0,114,104,124,105,99,140],
[119,97,0,123,116,123,105,121],
[104,107,88,0,89,112,108,105],
[86,87,95,122,0,114,99,109],
[112,106,88,99,97,0,96,109],
[112,112,106,103,112,115,0,136],
[97,71,90,106,102,102,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,113,103,97,99,101],
[99,0,107,100,97,112,109,102],
[99,104,0,104,99,95,98,100],
[98,111,107,0,107,97,99,102],
[108,114,112,104,0,108,116,109],
[114,99,116,114,103,0,112,111],
[112,102,113,112,95,99,0,113],
[110,109,111,109,102,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,116,104,95,103,112],
[89,0,90,112,99,89,100,97],
[97,121,0,113,110,106,97,117],
[95,99,98,0,100,89,84,102],
[107,112,101,111,0,98,93,111],
[116,122,105,122,113,0,108,111],
[108,111,114,127,118,103,0,110],
[99,114,94,109,100,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,55,105,93,102,106,109,95],
[156,0,119,92,86,104,104,106],
[106,92,0,67,90,119,105,95],
[118,119,144,0,115,146,80,132],
[109,125,121,96,0,135,135,94],
[105,107,92,65,76,0,77,68],
[102,107,106,131,76,134,0,94],
[116,105,116,79,117,143,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,125,104,102,117,113,114],
[114,0,106,101,95,99,102,114],
[86,105,0,83,97,87,107,111],
[107,110,128,0,84,109,108,128],
[109,116,114,127,0,95,114,129],
[94,112,124,102,116,0,111,117],
[98,109,104,103,97,100,0,128],
[97,97,100,83,82,94,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,106,112,117,110,105],
[108,0,114,102,103,109,96,104],
[104,97,0,111,109,116,102,117],
[105,109,100,0,109,117,103,111],
[99,108,102,102,0,109,101,108],
[94,102,95,94,102,0,103,105],
[101,115,109,108,110,108,0,115],
[106,107,94,100,103,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,115,107,114,105,125],
[106,0,99,104,96,102,96,104],
[113,112,0,114,99,111,93,114],
[96,107,97,0,99,98,79,104],
[104,115,112,112,0,101,104,115],
[97,109,100,113,110,0,109,115],
[106,115,118,132,107,102,0,122],
[86,107,97,107,96,96,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,132,109,120,106,107,101],
[102,0,127,110,105,104,108,95],
[79,84,0,94,95,94,87,87],
[102,101,117,0,107,100,99,100],
[91,106,116,104,0,96,105,99],
[105,107,117,111,115,0,106,107],
[104,103,124,112,106,105,0,93],
[110,116,124,111,112,104,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,112,107,104,111,122,121],
[87,0,109,103,107,100,104,102],
[99,102,0,100,106,93,107,99],
[104,108,111,0,112,105,107,107],
[107,104,105,99,0,99,106,108],
[100,111,118,106,112,0,113,101],
[89,107,104,104,105,98,0,96],
[90,109,112,104,103,110,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,90,92,93,105,98],
[107,0,113,100,99,99,114,106],
[114,98,0,104,115,119,112,115],
[121,111,107,0,110,105,111,103],
[119,112,96,101,0,104,104,119],
[118,112,92,106,107,0,115,112],
[106,97,99,100,107,96,0,112],
[113,105,96,108,92,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,96,100,131,114,79],
[102,0,106,85,114,100,107,92],
[121,105,0,111,111,115,118,117],
[115,126,100,0,114,109,116,95],
[111,97,100,97,0,92,91,97],
[80,111,96,102,119,0,103,99],
[97,104,93,95,120,108,0,91],
[132,119,94,116,114,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,103,117,103,114,119,115],
[98,0,115,116,105,111,113,118],
[108,96,0,119,112,111,116,125],
[94,95,92,0,97,113,90,89],
[108,106,99,114,0,114,104,113],
[97,100,100,98,97,0,97,96],
[92,98,95,121,107,114,0,112],
[96,93,86,122,98,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,119,117,115,100,122],
[110,0,107,111,118,105,105,119],
[100,104,0,105,111,102,108,118],
[92,100,106,0,110,104,103,111],
[94,93,100,101,0,101,99,111],
[96,106,109,107,110,0,95,105],
[111,106,103,108,112,116,0,120],
[89,92,93,100,100,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,141,103,122,88,124,125],
[108,0,144,123,89,142,107,72],
[70,67,0,50,105,51,104,52],
[108,88,161,0,88,124,125,89],
[89,122,106,123,0,106,159,107],
[123,69,160,87,105,0,107,73],
[87,104,107,86,52,104,0,69],
[86,139,159,122,104,138,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,96,107,81,92,96,104],
[109,0,96,96,89,92,112,112],
[115,115,0,97,113,107,108,118],
[104,115,114,0,99,103,99,113],
[130,122,98,112,0,107,114,110],
[119,119,104,108,104,0,108,126],
[115,99,103,112,97,103,0,111],
[107,99,93,98,101,85,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,93,100,96,87,107],
[115,0,96,102,105,109,88,111],
[111,115,0,102,110,95,104,116],
[118,109,109,0,102,104,111,108],
[111,106,101,109,0,93,104,107],
[115,102,116,107,118,0,116,119],
[124,123,107,100,107,95,0,117],
[104,100,95,103,104,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,105,117,94,99,112],
[105,0,103,112,110,107,98,107],
[103,108,0,91,110,101,85,90],
[106,99,120,0,123,112,106,106],
[94,101,101,88,0,95,79,91],
[117,104,110,99,116,0,95,93],
[112,113,126,105,132,116,0,112],
[99,104,121,105,120,118,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,105,121,110,92,101],
[97,0,97,117,120,110,105,106],
[109,114,0,124,124,117,107,101],
[106,94,87,0,113,103,93,94],
[90,91,87,98,0,98,71,83],
[101,101,94,108,113,0,104,110],
[119,106,104,118,140,107,0,116],
[110,105,110,117,128,101,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,102,101,108,117,119],
[106,0,97,113,106,111,117,120],
[104,114,0,123,104,110,111,110],
[109,98,88,0,96,103,104,101],
[110,105,107,115,0,113,116,112],
[103,100,101,108,98,0,113,116],
[94,94,100,107,95,98,0,102],
[92,91,101,110,99,95,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,118,91,94,81,112,112],
[109,0,111,107,107,92,113,108],
[93,100,0,108,106,101,104,122],
[120,104,103,0,96,107,84,105],
[117,104,105,115,0,97,119,116],
[130,119,110,104,114,0,118,110],
[99,98,107,127,92,93,0,124],
[99,103,89,106,95,101,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,97,113,106,102,106],
[107,0,118,99,108,105,97,103],
[110,93,0,88,98,100,89,103],
[114,112,123,0,106,127,100,104],
[98,103,113,105,0,114,105,97],
[105,106,111,84,97,0,92,86],
[109,114,122,111,106,119,0,103],
[105,108,108,107,114,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,116,101,99,106,124,99],
[90,0,94,92,78,95,89,91],
[95,117,0,95,100,91,104,103],
[110,119,116,0,102,111,104,92],
[112,133,111,109,0,111,100,100],
[105,116,120,100,100,0,113,98],
[87,122,107,107,111,98,0,112],
[112,120,108,119,111,113,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,101,98,104,93,96],
[100,0,99,100,108,102,95,94],
[117,112,0,111,96,111,105,94],
[110,111,100,0,113,102,122,101],
[113,103,115,98,0,102,123,104],
[107,109,100,109,109,0,104,109],
[118,116,106,89,88,107,0,103],
[115,117,117,110,107,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,107,99,115,99,95,109],
[121,0,106,116,135,127,104,128],
[104,105,0,106,115,116,108,105],
[112,95,105,0,114,109,95,107],
[96,76,96,97,0,107,92,107],
[112,84,95,102,104,0,84,98],
[116,107,103,116,119,127,0,114],
[102,83,106,104,104,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,73,108,99,120,120,109],
[90,0,110,110,88,121,99,89],
[138,101,0,125,113,123,99,89],
[103,101,86,0,90,121,76,87],
[112,123,98,121,0,144,100,100],
[91,90,88,90,67,0,77,90],
[91,112,112,135,111,134,0,102],
[102,122,122,124,111,121,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,107,98,95,88,103],
[117,0,95,117,102,99,99,113],
[113,116,0,115,113,99,111,120],
[104,94,96,0,110,87,89,105],
[113,109,98,101,0,117,103,107],
[116,112,112,124,94,0,95,120],
[123,112,100,122,108,116,0,114],
[108,98,91,106,104,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,95,91,87,106,86],
[111,0,112,108,101,91,108,98],
[101,99,0,101,102,89,110,85],
[116,103,110,0,109,97,115,106],
[120,110,109,102,0,93,101,99],
[124,120,122,114,118,0,119,101],
[105,103,101,96,110,92,0,86],
[125,113,126,105,112,110,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,107,116,113,102,101],
[112,0,107,107,106,114,112,103],
[104,104,0,108,110,112,112,104],
[104,104,103,0,110,113,107,115],
[95,105,101,101,0,96,99,97],
[98,97,99,98,115,0,104,106],
[109,99,99,104,112,107,0,99],
[110,108,107,96,114,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,119,107,98,106,96,116],
[86,0,89,88,101,81,87,96],
[92,122,0,97,110,87,89,110],
[104,123,114,0,107,95,106,110],
[113,110,101,104,0,97,98,116],
[105,130,124,116,114,0,109,114],
[115,124,122,105,113,102,0,113],
[95,115,101,101,95,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,93,92,112,107,102],
[102,0,94,94,103,100,107,97],
[105,117,0,106,110,102,114,108],
[118,117,105,0,113,100,114,118],
[119,108,101,98,0,104,106,108],
[99,111,109,111,107,0,113,93],
[104,104,97,97,105,98,0,98],
[109,114,103,93,103,118,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,110,119,100,101,112],
[106,0,115,104,99,91,111,113],
[89,96,0,98,96,88,91,98],
[101,107,113,0,101,101,96,108],
[92,112,115,110,0,93,103,110],
[111,120,123,110,118,0,94,126],
[110,100,120,115,108,117,0,117],
[99,98,113,103,101,85,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,98,101,105,119,93],
[119,0,109,85,104,113,115,101],
[109,102,0,112,100,131,116,109],
[113,126,99,0,112,115,160,108],
[110,107,111,99,0,127,117,103],
[106,98,80,96,84,0,101,88],
[92,96,95,51,94,110,0,86],
[118,110,102,103,108,123,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,114,102,121,108,103],
[108,0,118,113,104,117,130,112],
[99,93,0,101,107,119,108,119],
[97,98,110,0,101,111,104,105],
[109,107,104,110,0,124,116,133],
[90,94,92,100,87,0,94,114],
[103,81,103,107,95,117,0,110],
[108,99,92,106,78,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,93,84,91,99,100,85],
[125,0,115,97,111,110,109,91],
[118,96,0,96,104,97,113,85],
[127,114,115,0,110,105,108,107],
[120,100,107,101,0,101,107,91],
[112,101,114,106,110,0,115,75],
[111,102,98,103,104,96,0,104],
[126,120,126,104,120,136,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,121,117,122,107,118],
[107,0,114,106,92,120,105,109],
[99,97,0,110,94,120,105,113],
[90,105,101,0,83,115,103,92],
[94,119,117,128,0,112,109,117],
[89,91,91,96,99,0,113,94],
[104,106,106,108,102,98,0,102],
[93,102,98,119,94,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,80,95,96,111,110],
[110,0,97,90,78,93,98,100],
[108,114,0,94,96,97,107,112],
[131,121,117,0,97,109,118,123],
[116,133,115,114,0,103,118,113],
[115,118,114,102,108,0,116,116],
[100,113,104,93,93,95,0,109],
[101,111,99,88,98,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,98,85,92,100,106],
[100,0,109,93,96,86,96,110],
[99,102,0,117,103,97,111,127],
[113,118,94,0,106,103,95,120],
[126,115,108,105,0,107,110,113],
[119,125,114,108,104,0,104,115],
[111,115,100,116,101,107,0,124],
[105,101,84,91,98,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,104,113,120,110,105],
[116,0,102,112,119,117,114,106],
[111,109,0,116,109,118,102,114],
[107,99,95,0,107,116,103,94],
[98,92,102,104,0,118,102,89],
[91,94,93,95,93,0,100,94],
[101,97,109,108,109,111,0,115],
[106,105,97,117,122,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,122,98,106,120,120],
[107,0,123,117,121,113,115,105],
[100,88,0,126,98,88,122,99],
[89,94,85,0,100,91,96,95],
[113,90,113,111,0,107,120,124],
[105,98,123,120,104,0,116,101],
[91,96,89,115,91,95,0,93],
[91,106,112,116,87,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,114,106,120,105,104],
[109,0,113,111,109,105,115,113],
[100,98,0,106,107,107,110,116],
[97,100,105,0,100,98,93,109],
[105,102,104,111,0,107,101,107],
[91,106,104,113,104,0,105,103],
[106,96,101,118,110,106,0,116],
[107,98,95,102,104,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,120,122,110,121,97,118],
[83,0,115,91,98,108,91,97],
[91,96,0,103,85,100,94,98],
[89,120,108,0,125,99,96,102],
[101,113,126,86,0,113,92,101],
[90,103,111,112,98,0,111,103],
[114,120,117,115,119,100,0,98],
[93,114,113,109,110,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,102,96,109,107,106],
[110,0,116,117,96,120,105,107],
[97,95,0,95,97,107,104,96],
[109,94,116,0,105,104,100,107],
[115,115,114,106,0,107,104,122],
[102,91,104,107,104,0,85,118],
[104,106,107,111,107,126,0,116],
[105,104,115,104,89,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,116,85,103,106,104],
[116,0,106,112,110,120,115,103],
[116,105,0,111,88,108,103,87],
[95,99,100,0,103,107,108,108],
[126,101,123,108,0,117,126,102],
[108,91,103,104,94,0,108,101],
[105,96,108,103,85,103,0,89],
[107,108,124,103,109,110,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,128,102,108,125,114,110],
[110,0,128,110,101,116,112,97],
[83,83,0,93,83,103,93,87],
[109,101,118,0,109,116,113,109],
[103,110,128,102,0,118,119,95],
[86,95,108,95,93,0,108,97],
[97,99,118,98,92,103,0,107],
[101,114,124,102,116,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,128,119,93,95,108],
[91,0,97,131,90,88,107,98],
[109,114,0,122,115,123,108,101],
[83,80,89,0,79,84,77,90],
[92,121,96,132,0,102,103,106],
[118,123,88,127,109,0,118,123],
[116,104,103,134,108,93,0,116],
[103,113,110,121,105,88,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,92,104,93,110,108,101],
[116,0,93,117,105,113,109,101],
[119,118,0,105,112,122,120,114],
[107,94,106,0,106,116,104,102],
[118,106,99,105,0,118,101,104],
[101,98,89,95,93,0,103,87],
[103,102,91,107,110,108,0,118],
[110,110,97,109,107,124,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,112,104,130,99,129],
[94,0,106,108,99,135,94,122],
[93,105,0,102,107,121,111,130],
[99,103,109,0,116,132,113,110],
[107,112,104,95,0,112,103,106],
[81,76,90,79,99,0,92,94],
[112,117,100,98,108,119,0,120],
[82,89,81,101,105,117,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,116,117,129,112,105],
[111,0,96,119,119,113,122,110],
[98,115,0,129,119,113,116,109],
[95,92,82,0,108,105,107,92],
[94,92,92,103,0,88,98,93],
[82,98,98,106,123,0,110,101],
[99,89,95,104,113,101,0,104],
[106,101,102,119,118,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,118,112,123,106,108],
[108,0,107,110,105,121,99,99],
[98,104,0,109,105,118,94,101],
[93,101,102,0,99,108,98,99],
[99,106,106,112,0,110,101,100],
[88,90,93,103,101,0,85,96],
[105,112,117,113,110,126,0,109],
[103,112,110,112,111,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,101,118,112,112,110,104],
[78,0,78,94,84,111,97,91],
[110,133,0,136,107,105,111,105],
[93,117,75,0,105,101,98,85],
[99,127,104,106,0,120,122,83],
[99,100,106,110,91,0,100,108],
[101,114,100,113,89,111,0,87],
[107,120,106,126,128,103,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,104,107,108,121,119],
[102,0,78,105,72,86,83,97],
[102,133,0,113,112,99,93,116],
[107,106,98,0,93,94,94,93],
[104,139,99,118,0,94,99,116],
[103,125,112,117,117,0,95,119],
[90,128,118,117,112,116,0,117],
[92,114,95,118,95,92,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,107,98,112,110,105],
[100,0,89,94,109,108,107,99],
[116,122,0,102,106,121,120,111],
[104,117,109,0,127,110,114,102],
[113,102,105,84,0,110,110,108],
[99,103,90,101,101,0,91,96],
[101,104,91,97,101,120,0,96],
[106,112,100,109,103,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,102,99,100,106,110],
[112,0,100,113,101,113,110,95],
[110,111,0,112,106,95,122,117],
[109,98,99,0,102,102,94,99],
[112,110,105,109,0,102,107,102],
[111,98,116,109,109,0,102,98],
[105,101,89,117,104,109,0,100],
[101,116,94,112,109,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,98,122,115,113,123],
[110,0,91,85,115,114,97,104],
[99,120,0,106,111,111,112,106],
[113,126,105,0,135,119,128,129],
[89,96,100,76,0,95,106,105],
[96,97,100,92,116,0,96,101],
[98,114,99,83,105,115,0,112],
[88,107,105,82,106,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,89,95,92,112,100,98],
[100,0,86,108,111,113,98,110],
[122,125,0,120,111,113,97,97],
[116,103,91,0,98,113,112,104],
[119,100,100,113,0,104,104,109],
[99,98,98,98,107,0,99,94],
[111,113,114,99,107,112,0,104],
[113,101,114,107,102,117,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,113,98,97,126,105],
[99,0,114,118,93,112,129,108],
[100,97,0,106,96,102,124,97],
[98,93,105,0,95,96,96,89],
[113,118,115,116,0,121,110,97],
[114,99,109,115,90,0,111,108],
[85,82,87,115,101,100,0,84],
[106,103,114,122,114,103,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,101,98,110,103,108],
[102,0,114,103,102,109,109,106],
[101,97,0,107,105,107,99,97],
[110,108,104,0,101,104,104,96],
[113,109,106,110,0,109,105,99],
[101,102,104,107,102,0,91,98],
[108,102,112,107,106,120,0,105],
[103,105,114,115,112,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,112,107,111,108,115],
[102,0,106,128,105,120,119,110],
[115,105,0,123,106,121,109,112],
[99,83,88,0,90,95,102,100],
[104,106,105,121,0,116,108,121],
[100,91,90,116,95,0,101,99],
[103,92,102,109,103,110,0,108],
[96,101,99,111,90,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,134,151,76,114,95,95],
[78,0,118,133,98,73,115,77],
[77,93,0,153,95,92,96,78],
[60,78,58,0,78,38,116,78],
[135,113,116,133,0,111,96,115],
[97,138,119,173,100,0,118,118],
[116,96,115,95,115,93,0,78],
[116,134,133,133,96,93,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,90,92,106,124,93],
[119,0,111,110,123,108,104,99],
[118,100,0,103,115,112,114,99],
[121,101,108,0,139,125,120,128],
[119,88,96,72,0,106,120,102],
[105,103,99,86,105,0,108,104],
[87,107,97,91,91,103,0,93],
[118,112,112,83,109,107,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,102,105,103,106,103],
[108,0,107,111,107,109,104,103],
[99,104,0,104,103,107,109,97],
[109,100,107,0,107,106,117,117],
[106,104,108,104,0,105,115,105],
[108,102,104,105,106,0,108,98],
[105,107,102,94,96,103,0,101],
[108,108,114,94,106,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,86,111,96,109,89],
[112,0,112,91,123,104,97,101],
[103,99,0,94,115,108,80,100],
[125,120,117,0,125,121,102,91],
[100,88,96,86,0,93,85,98],
[115,107,103,90,118,0,106,103],
[102,114,131,109,126,105,0,119],
[122,110,111,120,113,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,123,115,126,103,110,119],
[106,0,104,121,116,96,116,96],
[88,107,0,119,117,110,115,105],
[96,90,92,0,116,96,91,89],
[85,95,94,95,0,94,92,89],
[108,115,101,115,117,0,115,114],
[101,95,96,120,119,96,0,91],
[92,115,106,122,122,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,51,53,53,104,157,104,104],
[160,0,107,53,158,157,211,107],
[158,104,0,104,105,157,104,104],
[158,158,107,0,105,211,158,158],
[107,53,106,106,0,157,104,53],
[54,54,54,0,54,0,105,107],
[107,0,107,53,107,106,0,53],
[107,104,107,53,158,104,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,117,129,102,110,110,106],
[83,0,99,126,93,104,99,80],
[94,112,0,114,108,103,110,96],
[82,85,97,0,102,97,94,78],
[109,118,103,109,0,114,105,84],
[101,107,108,114,97,0,111,92],
[101,112,101,117,106,100,0,90],
[105,131,115,133,127,119,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,115,98,104,104,111,93],
[103,0,114,89,118,101,92,87],
[96,97,0,86,101,100,91,90],
[113,122,125,0,119,113,111,96],
[107,93,110,92,0,98,100,87],
[107,110,111,98,113,0,100,110],
[100,119,120,100,111,111,0,104],
[118,124,121,115,124,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,105,84,148,147,84,103],
[86,0,62,83,85,104,63,83],
[106,149,0,126,84,127,107,102],
[127,128,85,0,126,125,87,102],
[63,126,127,85,0,127,85,125],
[64,107,84,86,84,0,86,61],
[127,148,104,124,126,125,0,124],
[108,128,109,109,86,150,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,81,85,83,99,94],
[115,0,113,112,99,94,97,92],
[111,98,0,95,97,99,98,115],
[130,99,116,0,106,111,111,112],
[126,112,114,105,0,108,106,119],
[128,117,112,100,103,0,108,121],
[112,114,113,100,105,103,0,110],
[117,119,96,99,92,90,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,110,95,100,99,111,115],
[124,0,111,100,96,113,115,123],
[101,100,0,88,93,103,112,111],
[116,111,123,0,105,124,117,122],
[111,115,118,106,0,104,100,108],
[112,98,108,87,107,0,119,116],
[100,96,99,94,111,92,0,118],
[96,88,100,89,103,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,102,102,100,95,102],
[101,0,101,99,91,99,98,98],
[107,110,0,100,104,99,102,94],
[109,112,111,0,112,105,113,102],
[109,120,107,99,0,109,97,97],
[111,112,112,106,102,0,107,106],
[116,113,109,98,114,104,0,107],
[109,113,117,109,114,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,115,98,124,125,111,119],
[95,0,100,107,108,113,107,123],
[96,111,0,104,113,116,99,114],
[113,104,107,0,120,115,107,114],
[87,103,98,91,0,105,96,110],
[86,98,95,96,106,0,88,108],
[100,104,112,104,115,123,0,119],
[92,88,97,97,101,103,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,100,99,97,111,110],
[105,0,104,110,107,106,111,107],
[102,107,0,108,105,103,107,114],
[111,101,103,0,101,103,104,118],
[112,104,106,110,0,106,110,116],
[114,105,108,108,105,0,101,113],
[100,100,104,107,101,110,0,113],
[101,104,97,93,95,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,106,115,101,117,112,104],
[84,0,98,94,99,92,86,96],
[105,113,0,113,112,115,115,111],
[96,117,98,0,103,98,106,113],
[110,112,99,108,0,107,112,108],
[94,119,96,113,104,0,105,101],
[99,125,96,105,99,106,0,103],
[107,115,100,98,103,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,115,113,118,117,106,105],
[113,0,111,98,123,112,101,106],
[96,100,0,106,120,100,85,94],
[98,113,105,0,115,118,114,98],
[93,88,91,96,0,112,86,92],
[94,99,111,93,99,0,93,87],
[105,110,126,97,125,118,0,105],
[106,105,117,113,119,124,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,106,100,109,104,102],
[104,0,96,112,111,91,111,100],
[107,115,0,114,113,103,109,99],
[105,99,97,0,100,89,113,98],
[111,100,98,111,0,96,112,107],
[102,120,108,122,115,0,116,104],
[107,100,102,98,99,95,0,94],
[109,111,112,113,104,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,97,101,103,98,104],
[101,0,114,115,108,114,103,104],
[112,97,0,96,107,111,96,105],
[114,96,115,0,102,96,79,110],
[110,103,104,109,0,115,106,102],
[108,97,100,115,96,0,82,121],
[113,108,115,132,105,129,0,114],
[107,107,106,101,109,90,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,95,103,116,108,107],
[111,0,121,104,111,124,133,109],
[109,90,0,96,96,114,95,100],
[116,107,115,0,98,118,120,104],
[108,100,115,113,0,124,122,115],
[95,87,97,93,87,0,104,92],
[103,78,116,91,89,107,0,96],
[104,102,111,107,96,119,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,104,92,110,103,97],
[104,0,97,94,103,102,93,97],
[105,114,0,101,107,110,107,107],
[107,117,110,0,112,112,98,96],
[119,108,104,99,0,101,116,102],
[101,109,101,99,110,0,112,104],
[108,118,104,113,95,99,0,101],
[114,114,104,115,109,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,108,126,107,107,99,110],
[88,0,107,119,115,102,95,102],
[103,104,0,109,109,100,103,109],
[85,92,102,0,101,91,85,94],
[104,96,102,110,0,100,85,97],
[104,109,111,120,111,0,93,101],
[112,116,108,126,126,118,0,102],
[101,109,102,117,114,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,138,88,85,85,72,94],
[92,0,138,90,91,85,93,106],
[73,73,0,72,89,93,67,87],
[123,121,139,0,113,88,116,117],
[126,120,122,98,0,83,91,121],
[126,126,118,123,128,0,88,125],
[139,118,144,95,120,123,0,132],
[117,105,124,94,90,86,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,70,142,70,175,106,70],
[105,0,71,72,0,141,72,70],
[141,140,0,141,105,176,72,70],
[69,139,70,0,70,140,36,34],
[141,211,106,141,0,176,72,106],
[36,70,35,71,35,0,36,0],
[105,139,139,175,139,175,0,104],
[141,141,141,177,105,211,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,106,111,102,98,93,104],
[128,0,107,112,107,108,103,92],
[105,104,0,132,117,112,113,104],
[100,99,79,0,79,99,81,91],
[109,104,94,132,0,111,102,109],
[113,103,99,112,100,0,94,112],
[118,108,98,130,109,117,0,105],
[107,119,107,120,102,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,97,97,100,86,124,69],
[141,0,133,113,124,139,132,105],
[114,78,0,104,86,102,111,85],
[114,98,107,0,88,103,144,115],
[111,87,125,123,0,103,111,104],
[125,72,109,108,108,0,98,90],
[87,79,100,67,100,113,0,105],
[142,106,126,96,107,121,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,109,101,103,108,121],
[96,0,105,112,105,91,104,127],
[104,106,0,108,107,96,106,117],
[102,99,103,0,106,106,107,113],
[110,106,104,105,0,98,114,122],
[108,120,115,105,113,0,117,122],
[103,107,105,104,97,94,0,115],
[90,84,94,98,89,89,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,119,100,111,100,116,100],
[104,0,103,96,113,99,105,104],
[92,108,0,88,112,104,104,86],
[111,115,123,0,119,107,122,104],
[100,98,99,92,0,97,105,100],
[111,112,107,104,114,0,117,119],
[95,106,107,89,106,94,0,110],
[111,107,125,107,111,92,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,103,103,100,111,95],
[105,0,126,113,114,112,110,101],
[99,85,0,95,100,88,104,81],
[108,98,116,0,104,95,103,93],
[108,97,111,107,0,101,109,95],
[111,99,123,116,110,0,119,109],
[100,101,107,108,102,92,0,85],
[116,110,130,118,116,102,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,110,105,108,109,103],
[111,0,111,97,105,97,106,104],
[115,100,0,101,105,101,105,107],
[101,114,110,0,102,107,112,117],
[106,106,106,109,0,107,100,121],
[103,114,110,104,104,0,109,108],
[102,105,106,99,111,102,0,111],
[108,107,104,94,90,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,87,118,124,125,90,79],
[105,0,76,95,92,118,89,75],
[124,135,0,128,143,143,123,101],
[93,116,83,0,112,115,93,68],
[87,119,68,99,0,114,78,78],
[86,93,68,96,97,0,90,76],
[121,122,88,118,133,121,0,111],
[132,136,110,143,133,135,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,109,101,105,109,106],
[98,0,109,97,103,88,102,91],
[106,102,0,95,102,94,96,104],
[102,114,116,0,106,100,109,102],
[110,108,109,105,0,106,102,98],
[106,123,117,111,105,0,110,111],
[102,109,115,102,109,101,0,113],
[105,120,107,109,113,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,96,122,102,95,113,92],
[90,0,92,112,104,95,106,89],
[115,119,0,109,106,102,118,108],
[89,99,102,0,100,107,113,95],
[109,107,105,111,0,95,106,88],
[116,116,109,104,116,0,130,105],
[98,105,93,98,105,81,0,95],
[119,122,103,116,123,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,99,106,98,104,114,110],
[94,0,99,105,116,89,115,102],
[112,112,0,112,104,105,112,111],
[105,106,99,0,112,102,109,109],
[113,95,107,99,0,98,104,100],
[107,122,106,109,113,0,120,104],
[97,96,99,102,107,91,0,102],
[101,109,100,102,111,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,112,111,100,95,99],
[114,0,120,115,118,110,99,114],
[99,91,0,84,102,91,81,92],
[99,96,127,0,121,108,107,97],
[100,93,109,90,0,99,88,94],
[111,101,120,103,112,0,105,101],
[116,112,130,104,123,106,0,121],
[112,97,119,114,117,110,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,123,116,93,106,98],
[102,0,112,108,107,105,101,98],
[106,99,0,107,113,94,108,120],
[88,103,104,0,100,83,96,90],
[95,104,98,111,0,104,100,101],
[118,106,117,128,107,0,125,98],
[105,110,103,115,111,86,0,108],
[113,113,91,121,110,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,99,105,84,93,106],
[92,0,91,96,107,84,84,91],
[108,120,0,122,112,84,111,104],
[112,115,89,0,111,82,101,108],
[106,104,99,100,0,104,98,93],
[127,127,127,129,107,0,111,99],
[118,127,100,110,113,100,0,110],
[105,120,107,103,118,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,103,99,122,127,116],
[107,0,103,109,115,122,115,114],
[102,108,0,110,112,122,131,121],
[108,102,101,0,95,115,131,119],
[112,96,99,116,0,119,122,120],
[89,89,89,96,92,0,107,104],
[84,96,80,80,89,104,0,100],
[95,97,90,92,91,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,118,93,106,108,106],
[121,0,111,114,104,116,129,112],
[110,100,0,118,106,120,115,112],
[93,97,93,0,105,95,108,105],
[118,107,105,106,0,105,121,117],
[105,95,91,116,106,0,124,98],
[103,82,96,103,90,87,0,101],
[105,99,99,106,94,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,102,93,80,103,88,90],
[129,0,118,125,107,107,117,104],
[109,93,0,118,70,101,98,106],
[118,86,93,0,87,93,103,96],
[131,104,141,124,0,127,118,112],
[108,104,110,118,84,0,103,109],
[123,94,113,108,93,108,0,106],
[121,107,105,115,99,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,99,101,114,105,105],
[101,0,88,97,88,97,104,103],
[109,123,0,94,103,95,117,114],
[112,114,117,0,106,94,109,106],
[110,123,108,105,0,96,124,107],
[97,114,116,117,115,0,108,96],
[106,107,94,102,87,103,0,106],
[106,108,97,105,104,115,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,113,108,88,111,110],
[96,0,101,103,116,108,108,104],
[109,110,0,110,108,97,112,116],
[98,108,101,0,114,103,102,102],
[103,95,103,97,0,96,115,103],
[123,103,114,108,115,0,120,100],
[100,103,99,109,96,91,0,104],
[101,107,95,109,108,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,106,108,88,101,84],
[111,0,116,126,121,99,107,104],
[109,95,0,106,112,103,106,108],
[105,85,105,0,103,100,97,92],
[103,90,99,108,0,96,110,93],
[123,112,108,111,115,0,110,105],
[110,104,105,114,101,101,0,93],
[127,107,103,119,118,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,121,97,99,92,128],
[106,0,98,106,114,115,115,119],
[115,113,0,123,105,108,112,115],
[90,105,88,0,95,93,81,104],
[114,97,106,116,0,107,106,114],
[112,96,103,118,104,0,105,116],
[119,96,99,130,105,106,0,118],
[83,92,96,107,97,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,79,103,89,80,96,97],
[120,0,114,121,112,108,93,115],
[132,97,0,134,99,105,115,101],
[108,90,77,0,96,97,90,97],
[122,99,112,115,0,97,108,114],
[131,103,106,114,114,0,102,112],
[115,118,96,121,103,109,0,117],
[114,96,110,114,97,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 211, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_211.csv", index=False, header=False)
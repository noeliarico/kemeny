
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,113,116,113,106,114,118,114,104],
[97,0,105,109,107,114,123,118,117],
[94,105,0,106,99,116,115,123,101],
[97,101,104,0,95,103,103,87,115],
[104,103,111,115,0,110,117,115,106],
[96,96,94,107,100,0,114,96,105],
[92,87,95,107,93,96,0,88,107],
[96,92,87,123,95,114,122,0,117],
[106,93,109,95,104,105,103,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,107,111,107,113,107,100],
[106,0,106,114,98,103,101,102,94],
[97,104,0,106,103,88,103,112,94],
[103,96,104,0,93,96,89,105,90],
[99,112,107,117,0,102,102,112,97],
[103,107,122,114,108,0,106,116,108],
[97,109,107,121,108,104,0,106,98],
[103,108,98,105,98,94,104,0,85],
[110,116,116,120,113,102,112,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,84,111,113,100,67,82,67],
[160,0,134,147,128,82,149,146,124],
[126,76,0,91,82,144,111,61,112],
[99,63,119,0,58,88,95,79,99],
[97,82,128,152,0,102,126,111,110],
[110,128,66,122,108,0,130,80,106],
[143,61,99,115,84,80,0,74,71],
[128,64,149,131,99,130,136,0,97],
[143,86,98,111,100,104,139,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,66,81,89,72,71,111,75],
[99,0,89,119,122,98,61,74,108],
[144,121,0,127,105,113,84,111,140],
[129,91,83,0,121,95,57,113,99],
[121,88,105,89,0,84,92,87,104],
[138,112,97,115,126,0,54,119,98],
[139,149,126,153,118,156,0,98,127],
[99,136,99,97,123,91,112,0,118],
[135,102,70,111,106,112,83,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,105,111,103,111,127,111],
[105,0,96,96,90,104,101,134,95],
[108,114,0,108,108,112,105,129,113],
[105,114,102,0,110,115,104,124,93],
[99,120,102,100,0,106,105,121,89],
[107,106,98,95,104,0,106,125,106],
[99,109,105,106,105,104,0,127,95],
[83,76,81,86,89,85,83,0,87],
[99,115,97,117,121,104,115,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,122,107,98,115,104,107],
[107,0,101,106,99,97,102,92,94],
[113,109,0,119,105,116,123,114,110],
[88,104,91,0,95,95,119,95,102],
[103,111,105,115,0,96,123,113,113],
[112,113,94,115,114,0,111,108,108],
[95,108,87,91,87,99,0,87,108],
[106,118,96,115,97,102,123,0,105],
[103,116,100,108,97,102,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,107,89,102,72,84,95,118],
[117,0,101,109,98,114,107,110,114],
[103,109,0,122,103,75,105,90,128],
[121,101,88,0,75,74,101,75,110],
[108,112,107,135,0,89,108,133,136],
[138,96,135,136,121,0,133,107,129],
[126,103,105,109,102,77,0,92,106],
[115,100,120,135,77,103,118,0,120],
[92,96,82,100,74,81,104,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,93,71,101,65,68,94,110],
[114,0,105,102,68,98,110,84,112],
[117,105,0,103,95,76,122,94,111],
[139,108,107,0,120,81,110,98,93],
[109,142,115,90,0,111,104,95,101],
[145,112,134,129,99,0,127,111,137],
[142,100,88,100,106,83,0,92,115],
[116,126,116,112,115,99,118,0,112],
[100,98,99,117,109,73,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,111,121,115,115,113,99],
[96,0,111,105,112,99,103,113,105],
[93,99,0,102,105,104,105,116,103],
[99,105,108,0,117,93,108,113,94],
[89,98,105,93,0,94,102,105,86],
[95,111,106,117,116,0,111,121,99],
[95,107,105,102,108,99,0,114,99],
[97,97,94,97,105,89,96,0,102],
[111,105,107,116,124,111,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,118,114,123,126,104,110],
[104,0,96,99,117,102,110,106,103],
[97,114,0,103,114,98,118,102,105],
[92,111,107,0,98,101,118,101,85],
[96,93,96,112,0,104,108,100,92],
[87,108,112,109,106,0,108,90,100],
[84,100,92,92,102,102,0,83,98],
[106,104,108,109,110,120,127,0,112],
[100,107,105,125,118,110,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,104,101,93,110,102,92,97],
[112,0,115,112,104,108,99,117,109],
[106,95,0,96,91,110,98,103,96],
[109,98,114,0,103,115,103,103,89],
[117,106,119,107,0,106,112,105,97],
[100,102,100,95,104,0,90,97,92],
[108,111,112,107,98,120,0,109,109],
[118,93,107,107,105,113,101,0,100],
[113,101,114,121,113,118,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,107,104,103,112,102,104],
[111,0,98,97,116,103,114,111,107],
[119,112,0,113,113,106,119,120,105],
[103,113,97,0,108,109,122,111,94],
[106,94,97,102,0,106,113,109,92],
[107,107,104,101,104,0,114,109,102],
[98,96,91,88,97,96,0,104,95],
[108,99,90,99,101,101,106,0,93],
[106,103,105,116,118,108,115,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,120,143,90,150,125,109],
[102,0,112,154,100,115,97,111,136],
[111,98,0,122,132,110,124,132,126],
[90,56,88,0,112,100,103,101,108],
[67,110,78,98,0,78,92,57,104],
[120,95,100,110,132,0,114,122,138],
[60,113,86,107,118,96,0,80,121],
[85,99,78,109,153,88,130,0,105],
[101,74,84,102,106,72,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,109,102,111,110,100,94],
[109,0,108,114,109,107,119,99,94],
[105,102,0,109,100,104,106,98,107],
[101,96,101,0,107,113,102,101,98],
[108,101,110,103,0,106,108,95,92],
[99,103,106,97,104,0,104,95,87],
[100,91,104,108,102,106,0,96,87],
[110,111,112,109,115,115,114,0,91],
[116,116,103,112,118,123,123,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,87,110,91,100,94,96,97],
[105,0,101,113,97,98,95,110,93],
[123,109,0,115,106,98,111,93,114],
[100,97,95,0,95,100,96,87,96],
[119,113,104,115,0,97,95,98,92],
[110,112,112,110,113,0,116,93,118],
[116,115,99,114,115,94,0,91,95],
[114,100,117,123,112,117,119,0,111],
[113,117,96,114,118,92,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,119,83,110,86,83,93],
[111,0,116,104,99,118,116,103,125],
[112,94,0,81,111,116,98,83,92],
[91,106,129,0,100,112,98,98,110],
[127,111,99,110,0,131,125,126,101],
[100,92,94,98,79,0,117,92,100],
[124,94,112,112,85,93,0,114,87],
[127,107,127,112,84,118,96,0,121],
[117,85,118,100,109,110,123,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,71,91,90,79,112,122],
[108,0,96,93,99,92,94,112,109],
[117,114,0,100,110,101,86,118,111],
[139,117,110,0,101,116,111,130,128],
[119,111,100,109,0,113,99,123,122],
[120,118,109,94,97,0,84,118,103],
[131,116,124,99,111,126,0,125,119],
[98,98,92,80,87,92,85,0,108],
[88,101,99,82,88,107,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,105,93,89,108,98,97],
[102,0,117,105,99,94,100,111,105],
[108,93,0,89,111,101,104,110,102],
[105,105,121,0,108,101,112,114,102],
[117,111,99,102,0,99,104,97,105],
[121,116,109,109,111,0,114,114,101],
[102,110,106,98,106,96,0,116,112],
[112,99,100,96,113,96,94,0,91],
[113,105,108,108,105,109,98,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,107,100,112,124,96,111],
[109,0,99,92,101,113,122,103,108],
[100,111,0,91,102,111,120,108,110],
[103,118,119,0,110,112,125,111,109],
[110,109,108,100,0,102,116,117,105],
[98,97,99,98,108,0,101,101,100],
[86,88,90,85,94,109,0,96,91],
[114,107,102,99,93,109,114,0,96],
[99,102,100,101,105,110,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,109,81,85,117,105,83,103],
[136,0,88,96,112,129,109,107,119],
[101,122,0,98,121,137,113,98,122],
[129,114,112,0,110,127,116,105,114],
[125,98,89,100,0,106,97,77,110],
[93,81,73,83,104,0,111,79,90],
[105,101,97,94,113,99,0,98,106],
[127,103,112,105,133,131,112,0,116],
[107,91,88,96,100,120,104,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,109,108,100,115,109,103,104],
[82,0,94,98,98,78,99,86,88],
[101,116,0,99,102,96,121,102,113],
[102,112,111,0,112,100,110,105,101],
[110,112,108,98,0,97,119,89,107],
[95,132,114,110,113,0,106,111,102],
[101,111,89,100,91,104,0,84,101],
[107,124,108,105,121,99,126,0,119],
[106,122,97,109,103,108,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,101,93,98,100,93,88],
[118,0,109,107,100,104,114,112,112],
[112,101,0,116,98,108,98,105,102],
[109,103,94,0,95,101,118,95,99],
[117,110,112,115,0,99,123,97,94],
[112,106,102,109,111,0,108,103,89],
[110,96,112,92,87,102,0,89,96],
[117,98,105,115,113,107,121,0,108],
[122,98,108,111,116,121,114,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,109,127,93,124,124,125],
[96,0,106,102,121,92,137,105,90],
[88,104,0,107,100,110,113,109,130],
[101,108,103,0,102,96,118,123,124],
[83,89,110,108,0,84,108,122,84],
[117,118,100,114,126,0,141,122,96],
[86,73,97,92,102,69,0,112,97],
[86,105,101,87,88,88,98,0,109],
[85,120,80,86,126,114,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,110,113,103,102,107,105],
[103,0,105,116,105,108,105,112,103],
[101,105,0,116,108,108,96,111,98],
[100,94,94,0,101,98,96,107,102],
[97,105,102,109,0,108,92,103,98],
[107,102,102,112,102,0,96,105,99],
[108,105,114,114,118,114,0,110,110],
[103,98,99,103,107,105,100,0,103],
[105,107,112,108,112,111,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,112,118,123,117,105,112],
[88,0,90,97,97,109,104,96,106],
[95,120,0,111,105,112,113,112,113],
[98,113,99,0,106,113,114,102,114],
[92,113,105,104,0,102,111,88,106],
[87,101,98,97,108,0,96,96,94],
[93,106,97,96,99,114,0,104,109],
[105,114,98,108,122,114,106,0,110],
[98,104,97,96,104,116,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,106,104,95,84,105,79],
[112,0,97,129,92,127,94,118,102],
[114,113,0,111,116,115,126,137,105],
[104,81,99,0,109,103,81,92,68],
[106,118,94,101,0,119,105,87,79],
[115,83,95,107,91,0,80,93,53],
[126,116,84,129,105,130,0,134,92],
[105,92,73,118,123,117,76,0,89],
[131,108,105,142,131,157,118,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,95,95,104,67,79,85,89],
[126,0,111,134,118,105,118,119,136],
[115,99,0,107,100,102,115,104,99],
[115,76,103,0,100,86,116,68,93],
[106,92,110,110,0,87,106,101,117],
[143,105,108,124,123,0,113,109,130],
[131,92,95,94,104,97,0,77,101],
[125,91,106,142,109,101,133,0,130],
[121,74,111,117,93,80,109,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,113,118,85,114,85,96,115],
[143,0,135,137,118,141,144,132,98],
[97,75,0,139,97,86,97,98,81],
[92,73,71,0,90,70,92,67,79],
[125,92,113,120,0,91,98,86,100],
[96,69,124,140,119,0,143,113,122],
[125,66,113,118,112,67,0,101,101],
[114,78,112,143,124,97,109,0,127],
[95,112,129,131,110,88,109,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,135,135,2,55,137,55,135],
[130,0,57,55,130,130,130,55,57],
[75,153,0,73,75,75,155,73,135],
[75,155,137,0,75,75,155,2,137],
[208,80,135,135,0,208,210,135,135],
[155,80,135,135,2,0,137,80,135],
[73,80,55,55,0,73,0,0,135],
[155,155,137,208,75,130,210,0,137],
[75,153,75,73,75,75,75,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,100,111,113,106,115,115,118],
[99,0,90,102,91,108,110,112,91],
[110,120,0,108,97,110,113,108,114],
[99,108,102,0,109,95,112,112,100],
[97,119,113,101,0,100,115,109,122],
[104,102,100,115,110,0,116,117,101],
[95,100,97,98,95,94,0,97,99],
[95,98,102,98,101,93,113,0,111],
[92,119,96,110,88,109,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,103,108,103,104,107,115],
[111,0,114,116,117,103,107,114,111],
[100,96,0,111,98,104,111,105,104],
[107,94,99,0,98,98,105,102,114],
[102,93,112,112,0,111,104,106,118],
[107,107,106,112,99,0,114,113,110],
[106,103,99,105,106,96,0,100,111],
[103,96,105,108,104,97,110,0,116],
[95,99,106,96,92,100,99,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,74,74,121,112,0,74,74],
[160,0,97,97,121,100,35,97,62],
[136,113,0,85,97,104,132,139,163],
[136,113,125,0,63,104,63,163,125],
[89,89,113,147,0,151,35,151,151],
[98,110,106,106,59,0,94,168,121],
[210,175,78,147,175,116,0,151,116],
[136,113,71,47,59,42,59,0,63],
[136,148,47,85,59,89,94,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,120,84,101,106,108,96,107],
[110,0,102,92,97,105,105,93,123],
[90,108,0,96,110,103,121,93,110],
[126,118,114,0,102,116,113,109,130],
[109,113,100,108,0,103,119,90,118],
[104,105,107,94,107,0,105,93,113],
[102,105,89,97,91,105,0,90,112],
[114,117,117,101,120,117,120,0,108],
[103,87,100,80,92,97,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,135,140,117,108,112,141,104],
[69,0,72,129,86,72,96,108,89],
[75,138,0,133,116,99,104,162,83],
[70,81,77,0,99,83,87,124,80],
[93,124,94,111,0,97,97,140,80],
[102,138,111,127,113,0,106,141,76],
[98,114,106,123,113,104,0,135,108],
[69,102,48,86,70,69,75,0,78],
[106,121,127,130,130,134,102,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,103,92,104,103,85,115],
[102,0,95,114,101,113,102,92,102],
[107,115,0,104,92,110,92,107,100],
[107,96,106,0,101,104,89,95,98],
[118,109,118,109,0,115,103,101,114],
[106,97,100,106,95,0,109,99,113],
[107,108,118,121,107,101,0,90,101],
[125,118,103,115,109,111,120,0,113],
[95,108,110,112,96,97,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,82,94,78,94,89,87,88],
[122,0,107,107,109,122,118,111,104],
[128,103,0,117,96,118,106,109,112],
[116,103,93,0,111,110,87,105,112],
[132,101,114,99,0,113,109,103,101],
[116,88,92,100,97,0,103,100,97],
[121,92,104,123,101,107,0,109,104],
[123,99,101,105,107,110,101,0,98],
[122,106,98,98,109,113,106,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,97,103,106,107,91,96],
[107,0,113,113,101,106,102,97,108],
[107,97,0,110,107,113,98,109,104],
[113,97,100,0,101,107,108,95,104],
[107,109,103,109,0,108,103,98,98],
[104,104,97,103,102,0,106,104,104],
[103,108,112,102,107,104,0,100,99],
[119,113,101,115,112,106,110,0,112],
[114,102,106,106,112,106,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,127,105,120,115,115,113,103],
[87,0,95,92,117,106,100,97,101],
[83,115,0,85,101,106,112,113,101],
[105,118,125,0,122,117,126,130,115],
[90,93,109,88,0,115,103,103,95],
[95,104,104,93,95,0,101,91,105],
[95,110,98,84,107,109,0,112,105],
[97,113,97,80,107,119,98,0,97],
[107,109,109,95,115,105,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,102,97,104,116,93,106],
[111,0,99,96,101,92,109,110,104],
[110,111,0,112,102,103,107,104,106],
[108,114,98,0,91,103,111,98,97],
[113,109,108,119,0,106,111,103,113],
[106,118,107,107,104,0,126,111,112],
[94,101,103,99,99,84,0,98,100],
[117,100,106,112,107,99,112,0,105],
[104,106,104,113,97,98,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,102,102,111,109,117,101],
[100,0,104,92,94,113,99,108,93],
[111,106,0,100,104,125,107,118,113],
[108,118,110,0,102,116,92,109,107],
[108,116,106,108,0,102,107,112,107],
[99,97,85,94,108,0,108,110,99],
[101,111,103,118,103,102,0,118,110],
[93,102,92,101,98,100,92,0,102],
[109,117,97,103,103,111,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,119,111,120,112,119,125],
[102,0,102,117,110,118,110,123,113],
[106,108,0,111,104,118,108,118,111],
[91,93,99,0,101,101,101,111,110],
[99,100,106,109,0,116,115,119,113],
[90,92,92,109,94,0,97,111,101],
[98,100,102,109,95,113,0,121,114],
[91,87,92,99,91,99,89,0,103],
[85,97,99,100,97,109,96,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,92,108,106,130,84,106,100],
[143,0,153,99,123,127,152,134,161],
[118,57,0,88,117,92,97,96,117],
[102,111,122,0,102,69,112,102,103],
[104,87,93,108,0,89,110,101,152],
[80,83,118,141,121,0,97,88,159],
[126,58,113,98,100,113,0,96,164],
[104,76,114,108,109,122,114,0,123],
[110,49,93,107,58,51,46,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,126,131,81,79,94,131],
[98,0,145,108,143,151,107,126,107],
[97,65,0,91,110,129,97,52,104],
[84,102,119,0,113,119,100,38,88],
[79,67,100,97,0,80,36,54,84],
[129,59,81,91,130,0,110,36,122],
[131,103,113,110,174,100,0,74,138],
[116,84,158,172,156,174,136,0,156],
[79,103,106,122,126,88,72,54,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,114,122,102,123,102,105],
[98,0,106,115,128,112,106,102,100],
[100,104,0,116,115,95,108,107,102],
[96,95,94,0,121,98,92,89,89],
[88,82,95,89,0,93,95,94,90],
[108,98,115,112,117,0,108,99,104],
[87,104,102,118,115,102,0,98,94],
[108,108,103,121,116,111,112,0,97],
[105,110,108,121,120,106,116,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,105,90,105,104,105,118],
[103,0,101,101,94,105,97,107,108],
[103,109,0,110,100,92,107,106,109],
[105,109,100,0,100,94,98,106,121],
[120,116,110,110,0,104,98,114,124],
[105,105,118,116,106,0,113,106,123],
[106,113,103,112,112,97,0,108,112],
[105,103,104,104,96,104,102,0,114],
[92,102,101,89,86,87,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,97,125,133,79,100,88,131],
[76,0,122,84,85,72,133,40,118],
[113,88,0,129,100,98,152,105,120],
[85,126,81,0,91,90,127,73,109],
[77,125,110,119,0,93,129,72,149],
[131,138,112,120,117,0,114,102,139],
[110,77,58,83,81,96,0,72,79],
[122,170,105,137,138,108,138,0,129],
[79,92,90,101,61,71,131,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,158,125,169,121,133,121,104],
[82,0,72,77,119,90,114,85,99],
[52,138,0,92,138,90,126,108,94],
[85,133,118,0,115,110,131,138,94],
[41,91,72,95,0,90,85,64,101],
[89,120,120,100,120,0,106,110,77],
[77,96,84,79,125,104,0,83,116],
[89,125,102,72,146,100,127,0,98],
[106,111,116,116,109,133,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,112,105,94,96,113,108,108],
[95,0,104,104,101,100,112,119,108],
[98,106,0,98,98,102,108,106,104],
[105,106,112,0,105,107,116,108,105],
[116,109,112,105,0,115,113,113,113],
[114,110,108,103,95,0,119,113,112],
[97,98,102,94,97,91,0,105,110],
[102,91,104,102,97,97,105,0,103],
[102,102,106,105,97,98,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,95,96,97,96,105,88],
[105,0,105,104,106,103,105,101,97],
[109,105,0,99,106,96,107,107,97],
[115,106,111,0,105,108,109,106,106],
[114,104,104,105,0,91,99,104,93],
[113,107,114,102,119,0,106,109,103],
[114,105,103,101,111,104,0,106,96],
[105,109,103,104,106,101,104,0,100],
[122,113,113,104,117,107,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,122,101,102,99,101,118,83],
[94,0,88,106,94,130,108,107,83],
[88,122,0,78,88,104,102,107,80],
[109,104,132,0,117,102,107,130,88],
[108,116,122,93,0,118,103,112,109],
[111,80,106,108,92,0,113,101,69],
[109,102,108,103,107,97,0,121,104],
[92,103,103,80,98,109,89,0,75],
[127,127,130,122,101,141,106,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,98,91,92,92,112,95,83],
[124,0,87,110,104,84,123,104,109],
[112,123,0,120,106,104,129,109,122],
[119,100,90,0,108,100,102,101,107],
[118,106,104,102,0,91,122,118,94],
[118,126,106,110,119,0,125,101,101],
[98,87,81,108,88,85,0,73,89],
[115,106,101,109,92,109,137,0,102],
[127,101,88,103,116,109,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,172,138,136,115,105,131,102],
[100,0,104,138,157,52,138,98,111],
[38,106,0,107,170,79,96,80,100],
[72,72,103,0,113,63,85,82,87],
[74,53,40,97,0,19,69,66,77],
[95,158,131,147,191,0,122,150,102],
[105,72,114,125,141,88,0,93,102],
[79,112,130,128,144,60,117,0,89],
[108,99,110,123,133,108,108,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,75,95,87,115,74,96,58],
[111,0,100,125,101,102,111,105,113],
[135,110,0,132,114,109,103,97,104],
[115,85,78,0,100,77,98,94,94],
[123,109,96,110,0,125,113,98,100],
[95,108,101,133,85,0,72,89,92],
[136,99,107,112,97,138,0,120,81],
[114,105,113,116,112,121,90,0,85],
[152,97,106,116,110,118,129,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,100,114,106,118,114,114],
[103,0,111,108,108,116,123,107,108],
[106,99,0,95,96,103,110,108,100],
[110,102,115,0,98,113,119,113,106],
[96,102,114,112,0,114,112,119,104],
[104,94,107,97,96,0,114,115,96],
[92,87,100,91,98,96,0,83,90],
[96,103,102,97,91,95,127,0,100],
[96,102,110,104,106,114,120,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,93,97,91,89,101,102,97],
[120,0,99,112,111,108,112,114,110],
[117,111,0,126,96,112,116,116,107],
[113,98,84,0,89,103,111,101,97],
[119,99,114,121,0,106,118,115,114],
[121,102,98,107,104,0,110,112,100],
[109,98,94,99,92,100,0,107,93],
[108,96,94,109,95,98,103,0,101],
[113,100,103,113,96,110,117,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,116,108,108,101,109,118,104],
[114,0,113,104,125,109,126,125,112],
[94,97,0,114,112,93,109,104,98],
[102,106,96,0,111,95,107,108,95],
[102,85,98,99,0,92,99,106,94],
[109,101,117,115,118,0,116,120,105],
[101,84,101,103,111,94,0,109,100],
[92,85,106,102,104,90,101,0,98],
[106,98,112,115,116,105,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,103,113,103,116,112,111],
[96,0,118,103,101,101,115,98,107],
[100,92,0,94,97,90,103,100,104],
[107,107,116,0,107,107,108,113,103],
[97,109,113,103,0,103,104,109,100],
[107,109,120,103,107,0,108,106,102],
[94,95,107,102,106,102,0,101,101],
[98,112,110,97,101,104,109,0,95],
[99,103,106,107,110,108,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,117,104,109,113,102,103],
[111,0,110,112,100,114,109,107,97],
[103,100,0,104,110,97,117,106,117],
[93,98,106,0,91,101,97,100,106],
[106,110,100,119,0,108,111,98,106],
[101,96,113,109,102,0,112,98,109],
[97,101,93,113,99,98,0,95,108],
[108,103,104,110,112,112,115,0,112],
[107,113,93,104,104,101,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,101,108,91,109,96,105],
[106,0,107,103,108,94,107,110,100],
[111,103,0,104,108,99,109,105,110],
[109,107,106,0,104,93,111,113,100],
[102,102,102,106,0,85,94,101,99],
[119,116,111,117,125,0,116,102,120],
[101,103,101,99,116,94,0,103,103],
[114,100,105,97,109,108,107,0,113],
[105,110,100,110,111,90,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,100,100,105,95,95,98,91],
[108,0,98,102,114,97,99,100,94],
[110,112,0,111,108,98,95,102,103],
[110,108,99,0,116,93,106,98,96],
[105,96,102,94,0,105,97,97,89],
[115,113,112,117,105,0,103,103,104],
[115,111,115,104,113,107,0,103,102],
[112,110,108,112,113,107,107,0,105],
[119,116,107,114,121,106,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,87,110,105,103,96,103],
[118,0,100,96,107,109,95,105,104],
[104,110,0,90,103,109,103,87,91],
[123,114,120,0,121,120,110,107,105],
[100,103,107,89,0,96,97,98,101],
[105,101,101,90,114,0,102,104,109],
[107,115,107,100,113,108,0,103,101],
[114,105,123,103,112,106,107,0,107],
[107,106,119,105,109,101,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,107,99,99,109,106,115,109],
[95,0,95,90,106,94,98,102,86],
[103,115,0,105,106,106,107,108,101],
[111,120,105,0,111,107,93,120,111],
[111,104,104,99,0,100,95,108,102],
[101,116,104,103,110,0,106,117,96],
[104,112,103,117,115,104,0,114,115],
[95,108,102,90,102,93,96,0,97],
[101,124,109,99,108,114,95,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,118,106,123,102,101,124],
[99,0,100,123,81,137,99,105,111],
[93,110,0,103,77,121,102,100,109],
[92,87,107,0,103,115,100,103,98],
[104,129,133,107,0,152,122,111,128],
[87,73,89,95,58,0,82,96,94],
[108,111,108,110,88,128,0,114,93],
[109,105,110,107,99,114,96,0,110],
[86,99,101,112,82,116,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,106,105,111,108,106,101],
[114,0,102,110,100,120,103,91,91],
[101,108,0,107,111,110,107,97,94],
[104,100,103,0,116,119,109,110,101],
[105,110,99,94,0,109,101,101,86],
[99,90,100,91,101,0,98,93,95],
[102,107,103,101,109,112,0,100,105],
[104,119,113,100,109,117,110,0,103],
[109,119,116,109,124,115,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,112,122,96,116,125,154,131],
[62,0,87,116,75,101,105,105,98],
[98,123,0,137,91,137,107,99,122],
[88,94,73,0,97,101,94,71,70],
[114,135,119,113,0,88,146,143,130],
[94,109,73,109,122,0,132,114,121],
[85,105,103,116,64,78,0,110,112],
[56,105,111,139,67,96,100,0,90],
[79,112,88,140,80,89,98,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,6,6,105,102,34,87,52],
[177,0,30,87,186,144,28,138,162],
[204,180,0,96,195,162,112,138,171],
[204,123,114,0,153,96,64,96,123],
[105,24,15,57,0,74,6,59,15],
[108,66,48,114,136,0,85,156,112],
[176,182,98,146,204,125,0,138,152],
[123,72,72,114,151,54,72,0,123],
[158,48,39,87,195,98,58,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,97,120,119,115,115,114,120],
[92,0,101,86,104,78,86,105,108],
[113,109,0,113,109,89,80,105,92],
[90,124,97,0,110,97,101,115,89],
[91,106,101,100,0,89,76,102,107],
[95,132,121,113,121,0,98,127,99],
[95,124,130,109,134,112,0,116,93],
[96,105,105,95,108,83,94,0,89],
[90,102,118,121,103,111,117,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,117,123,115,114,115,105],
[105,0,105,106,106,120,103,101,94],
[104,105,0,107,111,122,103,109,96],
[93,104,103,0,116,119,101,103,94],
[87,104,99,94,0,105,96,83,96],
[95,90,88,91,105,0,101,102,95],
[96,107,107,109,114,109,0,94,89],
[95,109,101,107,127,108,116,0,103],
[105,116,114,116,114,115,121,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,99,94,86,106,94,102,87],
[106,0,103,107,91,101,89,102,95],
[111,107,0,107,102,102,93,109,92],
[116,103,103,0,100,105,100,110,103],
[124,119,108,110,0,111,107,105,103],
[104,109,108,105,99,0,101,105,96],
[116,121,117,110,103,109,0,102,111],
[108,108,101,100,105,105,108,0,91],
[123,115,118,107,107,114,99,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,98,101,94,82,102,88],
[116,0,85,121,111,113,113,137,107],
[118,125,0,145,111,96,119,123,101],
[112,89,65,0,89,83,90,120,83],
[109,99,99,121,0,93,113,125,97],
[116,97,114,127,117,0,123,134,109],
[128,97,91,120,97,87,0,121,98],
[108,73,87,90,85,76,89,0,93],
[122,103,109,127,113,101,112,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,111,110,109,110,122,117],
[106,0,103,108,108,107,104,103,113],
[100,107,0,105,110,105,99,109,113],
[99,102,105,0,117,110,98,118,115],
[100,102,100,93,0,110,98,101,108],
[101,103,105,100,100,0,103,107,103],
[100,106,111,112,112,107,0,117,113],
[88,107,101,92,109,103,93,0,101],
[93,97,97,95,102,107,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,107,99,98,102,112,104],
[95,0,98,106,98,101,97,101,106],
[112,112,0,126,110,105,111,116,115],
[103,104,84,0,96,95,97,97,110],
[111,112,100,114,0,110,100,105,117],
[112,109,105,115,100,0,100,106,116],
[108,113,99,113,110,110,0,119,109],
[98,109,94,113,105,104,91,0,109],
[106,104,95,100,93,94,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,112,100,102,103,110,104],
[111,0,108,102,106,108,105,113,111],
[115,102,0,109,100,110,112,106,106],
[98,108,101,0,91,106,112,102,111],
[110,104,110,119,0,115,115,112,98],
[108,102,100,104,95,0,115,102,102],
[107,105,98,98,95,95,0,110,117],
[100,97,104,108,98,108,100,0,119],
[106,99,104,99,112,108,93,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,105,114,103,102,121,117],
[100,0,103,113,110,103,104,115,109],
[103,107,0,114,105,105,100,110,115],
[105,97,96,0,100,99,93,105,107],
[96,100,105,110,0,99,100,116,108],
[107,107,105,111,111,0,107,116,110],
[108,106,110,117,110,103,0,117,122],
[89,95,100,105,94,94,93,0,114],
[93,101,95,103,102,100,88,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,99,103,117,107,106,112],
[100,0,121,101,89,109,89,103,103],
[92,89,0,97,85,104,83,84,96],
[111,109,113,0,101,118,109,102,104],
[107,121,125,109,0,119,102,111,123],
[93,101,106,92,91,0,87,88,99],
[103,121,127,101,108,123,0,103,108],
[104,107,126,108,99,122,107,0,105],
[98,107,114,106,87,111,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,123,111,101,112,109,114,110],
[95,0,115,113,92,106,103,102,108],
[87,95,0,94,88,89,88,95,103],
[99,97,116,0,100,104,102,117,111],
[109,118,122,110,0,105,100,119,113],
[98,104,121,106,105,0,107,116,100],
[101,107,122,108,110,103,0,125,121],
[96,108,115,93,91,94,85,0,101],
[100,102,107,99,97,110,89,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,111,139,112,122,108,117],
[110,0,133,132,139,137,104,83,121],
[100,77,0,88,96,91,97,127,107],
[99,78,122,0,131,139,94,95,120],
[71,71,114,79,0,104,106,96,125],
[98,73,119,71,106,0,112,90,109],
[88,106,113,116,104,98,0,108,112],
[102,127,83,115,114,120,102,0,126],
[93,89,103,90,85,101,98,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,76,119,91,78,73,77,106],
[120,0,89,119,117,128,82,126,112],
[134,121,0,122,108,122,100,117,109],
[91,91,88,0,116,121,77,97,92],
[119,93,102,94,0,101,79,95,106],
[132,82,88,89,109,0,109,73,102],
[137,128,110,133,131,101,0,128,137],
[133,84,93,113,115,137,82,0,110],
[104,98,101,118,104,108,73,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,93,85,94,86,106,75,108],
[123,0,99,103,118,112,131,111,129],
[117,111,0,114,100,101,108,116,126],
[125,107,96,0,104,102,97,118,104],
[116,92,110,106,0,95,95,95,118],
[124,98,109,108,115,0,119,95,131],
[104,79,102,113,115,91,0,94,104],
[135,99,94,92,115,115,116,0,119],
[102,81,84,106,92,79,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,117,119,105,119,103,112,108],
[96,0,103,112,96,106,112,98,112],
[93,107,0,114,110,120,109,104,104],
[91,98,96,0,91,102,100,89,106],
[105,114,100,119,0,129,105,99,117],
[91,104,90,108,81,0,93,88,103],
[107,98,101,110,105,117,0,89,102],
[98,112,106,121,111,122,121,0,99],
[102,98,106,104,93,107,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,105,112,108,101,108,110],
[117,0,104,99,113,117,105,100,117],
[108,106,0,114,118,109,103,111,118],
[105,111,96,0,117,116,103,109,127],
[98,97,92,93,0,98,85,97,103],
[102,93,101,94,112,0,101,96,116],
[109,105,107,107,125,109,0,108,115],
[102,110,99,101,113,114,102,0,112],
[100,93,92,83,107,94,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,91,96,102,106,101,101],
[99,0,96,101,102,85,98,88,105],
[116,114,0,106,117,105,110,108,106],
[119,109,104,0,101,95,100,105,102],
[114,108,93,109,0,101,104,104,104],
[108,125,105,115,109,0,118,110,103],
[104,112,100,110,106,92,0,114,93],
[109,122,102,105,106,100,96,0,98],
[109,105,104,108,106,107,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,96,114,101,95,101,96],
[105,0,103,107,116,108,95,102,106],
[108,107,0,110,124,109,97,98,105],
[114,103,100,0,111,102,94,100,105],
[96,94,86,99,0,97,82,99,98],
[109,102,101,108,113,0,93,95,103],
[115,115,113,116,128,117,0,115,105],
[109,108,112,110,111,115,95,0,104],
[114,104,105,105,112,107,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,128,96,100,121,112,106,108],
[103,0,117,99,88,99,106,104,104],
[82,93,0,83,73,97,81,94,111],
[114,111,127,0,106,102,103,111,108],
[110,122,137,104,0,117,115,111,120],
[89,111,113,108,93,0,108,82,112],
[98,104,129,107,95,102,0,126,126],
[104,106,116,99,99,128,84,0,112],
[102,106,99,102,90,98,84,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,127,116,118,137,122,140,139],
[124,0,130,96,103,133,119,130,126],
[83,80,0,97,99,110,114,121,126],
[94,114,113,0,107,92,97,105,131],
[92,107,111,103,0,119,92,139,137],
[73,77,100,118,91,0,97,126,122],
[88,91,96,113,118,113,0,132,115],
[70,80,89,105,71,84,78,0,118],
[71,84,84,79,73,88,95,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,107,105,103,102,92,100],
[119,0,110,118,114,110,96,113,114],
[114,100,0,113,109,107,111,110,109],
[103,92,97,0,106,89,101,92,102],
[105,96,101,104,0,99,95,99,105],
[107,100,103,121,111,0,93,98,105],
[108,114,99,109,115,117,0,106,110],
[118,97,100,118,111,112,104,0,107],
[110,96,101,108,105,105,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,79,94,104,89,96,99,49],
[109,0,105,111,90,100,109,90,86],
[131,105,0,139,114,135,122,116,109],
[116,99,71,0,112,113,106,99,63],
[106,120,96,98,0,110,107,66,59],
[121,110,75,97,100,0,107,86,79],
[114,101,88,104,103,103,0,122,89],
[111,120,94,111,144,124,88,0,94],
[161,124,101,147,151,131,121,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,111,114,113,103,109,120],
[101,0,104,98,111,103,94,97,110],
[91,106,0,106,116,107,99,103,103],
[99,112,104,0,113,102,104,97,107],
[96,99,94,97,0,102,91,90,101],
[97,107,103,108,108,0,99,92,112],
[107,116,111,106,119,111,0,100,111],
[101,113,107,113,120,118,110,0,115],
[90,100,107,103,109,98,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,115,123,121,124,117,103],
[89,0,107,94,111,97,95,96,93],
[96,103,0,108,125,103,109,111,107],
[95,116,102,0,126,117,110,108,108],
[87,99,85,84,0,99,87,103,79],
[89,113,107,93,111,0,102,96,93],
[86,115,101,100,123,108,0,105,93],
[93,114,99,102,107,114,105,0,96],
[107,117,103,102,131,117,117,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,112,113,107,103,111,108,100],
[109,0,101,109,114,99,106,109,99],
[98,109,0,106,107,97,109,105,98],
[97,101,104,0,111,98,107,108,104],
[103,96,103,99,0,96,103,104,106],
[107,111,113,112,114,0,122,127,104],
[99,104,101,103,107,88,0,107,99],
[102,101,105,102,106,83,103,0,100],
[110,111,112,106,104,106,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,118,136,110,121,117,122,103],
[84,0,114,103,101,94,111,109,102],
[92,96,0,93,85,86,92,88,85],
[74,107,117,0,99,90,101,96,88],
[100,109,125,111,0,106,119,122,113],
[89,116,124,120,104,0,109,92,106],
[93,99,118,109,91,101,0,98,107],
[88,101,122,114,88,118,112,0,105],
[107,108,125,122,97,104,103,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,100,92,101,99,101,93,101],
[113,0,111,101,121,110,116,120,109],
[110,99,0,105,111,111,110,101,115],
[118,109,105,0,114,112,113,110,99],
[109,89,99,96,0,111,95,97,105],
[111,100,99,98,99,0,101,106,103],
[109,94,100,97,115,109,0,102,107],
[117,90,109,100,113,104,108,0,92],
[109,101,95,111,105,107,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,160,140,157,195,137,78,90,163],
[50,0,53,129,167,149,77,109,170],
[70,157,0,157,207,184,125,134,195],
[53,81,53,0,160,137,81,81,104],
[15,43,3,50,0,40,15,15,38],
[73,61,26,73,170,0,61,61,49],
[132,133,85,129,195,149,0,120,148],
[120,101,76,129,195,149,90,0,113],
[47,40,15,106,172,161,62,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,95,96,100,79,92,81,97],
[146,0,75,103,107,79,99,95,116],
[115,135,0,122,103,96,124,123,117],
[114,107,88,0,104,112,87,96,101],
[110,103,107,106,0,91,92,106,111],
[131,131,114,98,119,0,123,105,128],
[118,111,86,123,118,87,0,90,118],
[129,115,87,114,104,105,120,0,87],
[113,94,93,109,99,82,92,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,114,110,116,111,118,114],
[104,0,99,99,100,102,105,117,103],
[105,111,0,111,109,109,99,103,105],
[96,111,99,0,102,105,110,104,98],
[100,110,101,108,0,114,111,111,104],
[94,108,101,105,96,0,106,105,104],
[99,105,111,100,99,104,0,104,113],
[92,93,107,106,99,105,106,0,106],
[96,107,105,112,106,106,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,122,93,90,115,108,108],
[102,0,122,117,97,97,101,105,92],
[109,88,0,112,107,93,114,107,99],
[88,93,98,0,107,93,102,107,98],
[117,113,103,103,0,105,116,114,85],
[120,113,117,117,105,0,115,130,109],
[95,109,96,108,94,95,0,116,108],
[102,105,103,103,96,80,94,0,98],
[102,118,111,112,125,101,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,163,138,161,122,171,73,81],
[49,0,71,87,91,87,49,49,71],
[47,139,0,138,177,101,108,90,97],
[72,123,72,0,123,72,131,123,131],
[49,119,33,87,0,71,79,122,71],
[88,123,109,138,139,0,100,161,119],
[39,161,102,79,131,110,0,112,68],
[137,161,120,87,88,49,98,0,30],
[129,139,113,79,139,91,142,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,119,135,121,94,118,113,118],
[91,0,106,102,94,94,97,104,97],
[91,104,0,101,98,91,112,98,103],
[75,108,109,0,106,83,93,98,96],
[89,116,112,104,0,102,99,106,99],
[116,116,119,127,108,0,106,103,107],
[92,113,98,117,111,104,0,111,108],
[97,106,112,112,104,107,99,0,102],
[92,113,107,114,111,103,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,120,128,110,117,94,131,108],
[103,0,119,108,116,123,107,147,113],
[90,91,0,107,94,113,84,99,107],
[82,102,103,0,89,96,89,105,106],
[100,94,116,121,0,127,105,112,106],
[93,87,97,114,83,0,88,113,114],
[116,103,126,121,105,122,0,128,121],
[79,63,111,105,98,97,82,0,100],
[102,97,103,104,104,96,89,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,122,114,110,120,100,141,100],
[103,0,107,113,112,123,81,126,93],
[88,103,0,119,90,102,109,134,103],
[96,97,91,0,77,119,90,96,76],
[100,98,120,133,0,131,107,117,112],
[90,87,108,91,79,0,96,109,94],
[110,129,101,120,103,114,0,108,124],
[69,84,76,114,93,101,102,0,74],
[110,117,107,134,98,116,86,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,134,108,104,138,121,110,110],
[105,0,132,107,102,116,124,111,119],
[76,78,0,97,106,98,105,79,93],
[102,103,113,0,95,115,126,92,106],
[106,108,104,115,0,130,127,102,101],
[72,94,112,95,80,0,120,92,82],
[89,86,105,84,83,90,0,74,100],
[100,99,131,118,108,118,136,0,111],
[100,91,117,104,109,128,110,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,99,124,116,104,125,107,110],
[113,0,101,104,119,105,116,99,106],
[111,109,0,108,117,108,116,101,111],
[86,106,102,0,103,102,113,110,105],
[94,91,93,107,0,105,114,100,108],
[106,105,102,108,105,0,117,112,107],
[85,94,94,97,96,93,0,88,96],
[103,111,109,100,110,98,122,0,117],
[100,104,99,105,102,103,114,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,96,105,88,92,102,79],
[116,0,113,103,112,107,109,118,105],
[109,97,0,97,106,102,90,96,82],
[114,107,113,0,112,104,106,114,103],
[105,98,104,98,0,92,94,118,93],
[122,103,108,106,118,0,102,111,105],
[118,101,120,104,116,108,0,117,95],
[108,92,114,96,92,99,93,0,90],
[131,105,128,107,117,105,115,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,95,109,102,114,89,119],
[100,0,123,111,128,106,119,124,111],
[102,87,0,93,100,99,125,104,98],
[115,99,117,0,111,119,126,108,110],
[101,82,110,99,0,92,103,100,92],
[108,104,111,91,118,0,93,85,96],
[96,91,85,84,107,117,0,94,83],
[121,86,106,102,110,125,116,0,90],
[91,99,112,100,118,114,127,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,119,105,110,106,104,102],
[111,0,106,117,115,120,108,122,104],
[107,104,0,110,103,113,104,90,94],
[91,93,100,0,90,107,95,87,91],
[105,95,107,120,0,125,111,114,109],
[100,90,97,103,85,0,96,91,101],
[104,102,106,115,99,114,0,108,101],
[106,88,120,123,96,119,102,0,101],
[108,106,116,119,101,109,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,99,109,103,107,113,93],
[104,0,103,118,96,107,94,104,101],
[109,107,0,108,111,103,104,116,110],
[111,92,102,0,99,104,101,115,100],
[101,114,99,111,0,108,116,116,111],
[107,103,107,106,102,0,112,115,100],
[103,116,106,109,94,98,0,108,96],
[97,106,94,95,94,95,102,0,89],
[117,109,100,110,99,110,114,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,68,92,109,92,87,95],
[117,0,122,100,96,112,102,90,110],
[109,88,0,82,91,66,80,92,98],
[142,110,128,0,108,114,119,95,108],
[118,114,119,102,0,107,100,112,114],
[101,98,144,96,103,0,99,99,113],
[118,108,130,91,110,111,0,85,99],
[123,120,118,115,98,111,125,0,126],
[115,100,112,102,96,97,111,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,97,105,116,104,99,120,91],
[91,0,120,125,127,107,104,134,112],
[113,90,0,104,117,96,95,130,116],
[105,85,106,0,88,89,97,117,102],
[94,83,93,122,0,91,100,102,104],
[106,103,114,121,119,0,86,129,109],
[111,106,115,113,110,124,0,121,100],
[90,76,80,93,108,81,89,0,84],
[119,98,94,108,106,101,110,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,105,93,111,111,105,104],
[112,0,90,118,102,98,108,121,102],
[115,120,0,112,112,93,109,114,109],
[105,92,98,0,97,94,104,103,95],
[117,108,98,113,0,101,113,116,100],
[99,112,117,116,109,0,105,103,110],
[99,102,101,106,97,105,0,115,102],
[105,89,96,107,94,107,95,0,95],
[106,108,101,115,110,100,108,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,99,49,34,85,81,74],
[94,0,68,102,77,103,127,156,147],
[108,142,0,116,95,126,127,174,167],
[111,108,94,0,97,68,105,126,112],
[161,133,115,113,0,99,137,175,157],
[176,107,84,142,111,0,123,138,97],
[125,83,83,105,73,87,0,115,59],
[129,54,36,84,35,72,95,0,102],
[136,63,43,98,53,113,151,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,53,54,92,68,69,76,78],
[67,0,28,34,24,68,50,59,53],
[157,182,0,101,91,116,117,157,126],
[156,176,109,0,97,68,50,90,141],
[118,186,119,113,0,86,69,100,121],
[142,142,94,142,124,0,91,101,126],
[141,160,93,160,141,119,0,93,119],
[134,151,53,120,110,109,117,0,144],
[132,157,84,69,89,84,91,66,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,124,114,106,109,96,108],
[102,0,111,121,110,115,106,103,108],
[94,99,0,109,104,97,97,99,108],
[86,89,101,0,112,101,95,92,108],
[96,100,106,98,0,101,88,97,103],
[104,95,113,109,109,0,92,99,107],
[101,104,113,115,122,118,0,103,117],
[114,107,111,118,113,111,107,0,101],
[102,102,102,102,107,103,93,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,108,99,103,99,98,96,91],
[112,0,108,108,107,95,105,97,111],
[102,102,0,98,107,103,96,104,98],
[111,102,112,0,107,107,106,107,107],
[107,103,103,103,0,100,107,104,95],
[111,115,107,103,110,0,115,114,106],
[112,105,114,104,103,95,0,109,101],
[114,113,106,103,106,96,101,0,109],
[119,99,112,103,115,104,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,87,93,93,91,91,110,102],
[123,0,98,113,111,118,97,108,102],
[123,112,0,102,106,116,110,105,104],
[117,97,108,0,102,129,106,113,114],
[117,99,104,108,0,117,110,117,117],
[119,92,94,81,93,0,85,91,114],
[119,113,100,104,100,125,0,114,123],
[100,102,105,97,93,119,96,0,99],
[108,108,106,96,93,96,87,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,119,101,105,108,110,100],
[91,0,107,118,111,113,109,101,100],
[105,103,0,116,101,106,108,108,102],
[91,92,94,0,101,84,98,98,98],
[109,99,109,109,0,120,99,105,110],
[105,97,104,126,90,0,116,107,101],
[102,101,102,112,111,94,0,99,99],
[100,109,102,112,105,103,111,0,99],
[110,110,108,112,100,109,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,95,95,110,99,110,102],
[105,0,111,95,95,106,98,100,101],
[99,99,0,88,95,98,90,92,95],
[115,115,122,0,106,120,105,111,111],
[115,115,115,104,0,117,111,117,110],
[100,104,112,90,93,0,94,101,95],
[111,112,120,105,99,116,0,114,112],
[100,110,118,99,93,109,96,0,96],
[108,109,115,99,100,115,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,63,94,117,74,88,105,95,96],
[147,0,114,134,95,104,136,141,128],
[116,96,0,74,71,75,110,129,108],
[93,76,136,0,105,95,125,100,107],
[136,115,139,105,0,107,117,106,93],
[122,106,135,115,103,0,102,111,123],
[105,74,100,85,93,108,0,90,103],
[115,69,81,110,104,99,120,0,131],
[114,82,102,103,117,87,107,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,96,93,104,100,111,101],
[109,0,106,107,95,101,99,103,99],
[105,104,0,102,100,112,94,105,101],
[114,103,108,0,97,102,102,116,107],
[117,115,110,113,0,99,110,120,111],
[106,109,98,108,111,0,102,113,105],
[110,111,116,108,100,108,0,119,102],
[99,107,105,94,90,97,91,0,88],
[109,111,109,103,99,105,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,95,97,116,109,106,99],
[100,0,109,105,106,106,96,108,102],
[106,101,0,108,95,102,102,98,93],
[115,105,102,0,95,107,117,111,100],
[113,104,115,115,0,109,116,108,107],
[94,104,108,103,101,0,109,101,101],
[101,114,108,93,94,101,0,115,95],
[104,102,112,99,102,109,95,0,96],
[111,108,117,110,103,109,115,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,107,104,102,105,98,92],
[103,0,118,101,132,115,118,111,102],
[104,92,0,95,113,101,107,108,85],
[103,109,115,0,123,103,115,113,112],
[106,78,97,87,0,93,105,96,93],
[108,95,109,107,117,0,109,99,101],
[105,92,103,95,105,101,0,99,89],
[112,99,102,97,114,111,111,0,104],
[118,108,125,98,117,109,121,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,97,105,102,98,92,93],
[101,0,83,76,114,112,114,99,85],
[119,127,0,109,124,131,114,123,102],
[113,134,101,0,110,131,129,96,106],
[105,96,86,100,0,108,95,102,82],
[108,98,79,79,102,0,114,82,73],
[112,96,96,81,115,96,0,91,86],
[118,111,87,114,108,128,119,0,104],
[117,125,108,104,128,137,124,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,92,105,96,108,109,94,96],
[133,0,112,128,111,111,109,103,95],
[118,98,0,116,95,104,115,104,98],
[105,82,94,0,84,91,104,90,91],
[114,99,115,126,0,115,113,114,104],
[102,99,106,119,95,0,123,93,93],
[101,101,95,106,97,87,0,102,93],
[116,107,106,120,96,117,108,0,114],
[114,115,112,119,106,117,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,116,112,96,104,105,117,110],
[100,0,107,107,114,107,97,103,111],
[94,103,0,101,76,87,95,98,101],
[98,103,109,0,97,110,112,102,105],
[114,96,134,113,0,104,113,112,108],
[106,103,123,100,106,0,98,112,102],
[105,113,115,98,97,112,0,105,105],
[93,107,112,108,98,98,105,0,111],
[100,99,109,105,102,108,105,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,87,112,108,100,90,95,98],
[114,0,116,106,108,112,102,120,117],
[123,94,0,106,107,103,105,104,100],
[98,104,104,0,98,99,97,104,111],
[102,102,103,112,0,99,113,94,94],
[110,98,107,111,111,0,98,108,117],
[120,108,105,113,97,112,0,104,112],
[115,90,106,106,116,102,106,0,113],
[112,93,110,99,116,93,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,108,101,111,105,108,103],
[111,0,113,109,98,101,114,107,102],
[102,97,0,95,87,93,97,111,100],
[102,101,115,0,91,104,100,103,98],
[109,112,123,119,0,116,117,104,105],
[99,109,117,106,94,0,99,101,106],
[105,96,113,110,93,111,0,109,102],
[102,103,99,107,106,109,101,0,98],
[107,108,110,112,105,104,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,129,120,128,104,117,115,111],
[97,0,111,125,104,101,100,113,110],
[81,99,0,111,102,104,93,99,101],
[90,85,99,0,98,98,97,95,93],
[82,106,108,112,0,114,92,101,107],
[106,109,106,112,96,0,105,101,98],
[93,110,117,113,118,105,0,112,103],
[95,97,111,115,109,109,98,0,98],
[99,100,109,117,103,112,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,118,113,113,112,99,104],
[107,0,106,110,102,113,111,112,112],
[107,104,0,108,109,120,105,108,108],
[92,100,102,0,109,116,103,107,91],
[97,108,101,101,0,115,106,101,109],
[97,97,90,94,95,0,103,104,103],
[98,99,105,107,104,107,0,96,110],
[111,98,102,103,109,106,114,0,95],
[106,98,102,119,101,107,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,114,102,106,105,125,101,104],
[109,0,104,99,106,114,122,98,67],
[96,106,0,88,85,84,129,77,79],
[108,111,122,0,93,98,124,99,115],
[104,104,125,117,0,105,139,109,92],
[105,96,126,112,105,0,120,82,79],
[85,88,81,86,71,90,0,44,65],
[109,112,133,111,101,128,166,0,96],
[106,143,131,95,118,131,145,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,104,112,123,101,112,110],
[97,0,95,97,114,114,100,96,115],
[104,115,0,111,120,126,108,111,105],
[106,113,99,0,118,117,105,116,109],
[98,96,90,92,0,116,100,90,105],
[87,96,84,93,94,0,89,93,94],
[109,110,102,105,110,121,0,110,113],
[98,114,99,94,120,117,100,0,105],
[100,95,105,101,105,116,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,103,110,102,109,102,103,104],
[90,0,87,105,98,97,84,95,92],
[107,123,0,105,97,113,99,109,106],
[100,105,105,0,99,105,97,99,101],
[108,112,113,111,0,108,106,107,105],
[101,113,97,105,102,0,103,103,99],
[108,126,111,113,104,107,0,103,111],
[107,115,101,111,103,107,107,0,103],
[106,118,104,109,105,111,99,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,113,102,114,97,108,124],
[103,0,112,110,106,99,112,106,116],
[100,98,0,104,100,104,113,112,112],
[97,100,106,0,97,107,113,106,100],
[108,104,110,113,0,113,108,117,120],
[96,111,106,103,97,0,111,106,119],
[113,98,97,97,102,99,0,103,121],
[102,104,98,104,93,104,107,0,121],
[86,94,98,110,90,91,89,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,99,95,107,106,88,106],
[99,0,90,73,92,85,93,80,97],
[106,120,0,108,107,110,112,101,107],
[111,137,102,0,121,109,117,107,114],
[115,118,103,89,0,100,101,108,100],
[103,125,100,101,110,0,97,109,113],
[104,117,98,93,109,113,0,104,93],
[122,130,109,103,102,101,106,0,109],
[104,113,103,96,110,97,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,98,86,98,98,106,109],
[107,0,112,104,100,116,97,110,121],
[105,98,0,98,89,94,88,107,114],
[112,106,112,0,91,103,94,102,101],
[124,110,121,119,0,115,101,118,123],
[112,94,116,107,95,0,97,96,112],
[112,113,122,116,109,113,0,104,120],
[104,100,103,108,92,114,106,0,114],
[101,89,96,109,87,98,90,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,80,116,112,100,111,73],
[103,0,125,92,117,126,93,113,99],
[97,85,0,88,112,103,77,110,85],
[130,118,122,0,139,128,103,125,94],
[94,93,98,71,0,103,71,86,74],
[98,84,107,82,107,0,109,97,77],
[110,117,133,107,139,101,0,114,105],
[99,97,100,85,124,113,96,0,95],
[137,111,125,116,136,133,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,96,106,107,139,104,118,122],
[80,0,57,82,84,104,71,102,92],
[114,153,0,123,109,112,83,88,121],
[104,128,87,0,95,125,93,105,100],
[103,126,101,115,0,115,95,111,112],
[71,106,98,85,95,0,87,101,106],
[106,139,127,117,115,123,0,115,104],
[92,108,122,105,99,109,95,0,110],
[88,118,89,110,98,104,106,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,102,101,103,107,94,110],
[113,0,103,113,103,103,107,101,107],
[113,107,0,118,107,116,116,98,120],
[108,97,92,0,102,104,102,105,112],
[109,107,103,108,0,104,108,104,110],
[107,107,94,106,106,0,120,101,116],
[103,103,94,108,102,90,0,100,109],
[116,109,112,105,106,109,110,0,113],
[100,103,90,98,100,94,101,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,114,110,110,128,103,125,113],
[88,0,102,93,89,109,89,101,92],
[96,108,0,115,107,124,101,108,108],
[100,117,95,0,107,115,93,107,101],
[100,121,103,103,0,114,107,106,109],
[82,101,86,95,96,0,92,99,95],
[107,121,109,117,103,118,0,119,114],
[85,109,102,103,104,111,91,0,96],
[97,118,102,109,101,115,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,129,116,117,118,119,124,104],
[105,0,123,110,116,116,102,112,105],
[81,87,0,106,108,96,112,109,99],
[94,100,104,0,101,98,97,106,101],
[93,94,102,109,0,111,107,117,84],
[92,94,114,112,99,0,92,108,90],
[91,108,98,113,103,118,0,118,110],
[86,98,101,104,93,102,92,0,94],
[106,105,111,109,126,120,100,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,102,109,107,107,102,100],
[100,0,114,118,110,111,116,93,102],
[93,96,0,102,93,91,105,84,86],
[108,92,108,0,105,121,99,94,91],
[101,100,117,105,0,119,119,107,112],
[103,99,119,89,91,0,116,95,86],
[103,94,105,111,91,94,0,80,104],
[108,117,126,116,103,115,130,0,109],
[110,108,124,119,98,124,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,119,74,98,83,97,95,89],
[129,0,106,100,113,116,107,109,88],
[91,104,0,66,111,93,95,91,88],
[136,110,144,0,128,99,118,93,101],
[112,97,99,82,0,99,102,87,87],
[127,94,117,111,111,0,98,70,99],
[113,103,115,92,108,112,0,95,74],
[115,101,119,117,123,140,115,0,117],
[121,122,122,109,123,111,136,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,93,108,111,123,114,110,112],
[94,0,95,85,89,110,108,104,78],
[117,115,0,112,101,127,120,118,95],
[102,125,98,0,96,120,119,110,99],
[99,121,109,114,0,137,123,121,113],
[87,100,83,90,73,0,104,101,89],
[96,102,90,91,87,106,0,105,87],
[100,106,92,100,89,109,105,0,95],
[98,132,115,111,97,121,123,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,111,103,120,97,106,97,129],
[160,0,120,88,132,152,159,135,184],
[99,90,0,47,70,133,148,111,94],
[107,122,163,0,93,157,152,140,107],
[90,78,140,117,0,83,136,156,146],
[113,58,77,53,127,0,140,139,102],
[104,51,62,58,74,70,0,68,100],
[113,75,99,70,54,71,142,0,98],
[81,26,116,103,64,108,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,99,114,113,105,102,106],
[111,0,115,104,108,101,108,108,101],
[104,95,0,107,107,107,110,110,107],
[111,106,103,0,113,109,111,95,113],
[96,102,103,97,0,104,111,96,113],
[97,109,103,101,106,0,104,111,103],
[105,102,100,99,99,106,0,102,105],
[108,102,100,115,114,99,108,0,109],
[104,109,103,97,97,107,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,57,81,68,91,91,41,71],
[108,0,105,147,122,102,89,105,85],
[153,105,0,92,116,76,74,87,99],
[129,63,118,0,92,91,76,94,102],
[142,88,94,118,0,59,117,107,85],
[119,108,134,119,151,0,85,91,133],
[119,121,136,134,93,125,0,109,137],
[169,105,123,116,103,119,101,0,131],
[139,125,111,108,125,77,73,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,91,86,97,95,96,107],
[100,0,87,83,79,67,75,76,112],
[108,123,0,100,86,93,103,92,122],
[119,127,110,0,115,98,105,112,113],
[124,131,124,95,0,105,111,98,112],
[113,143,117,112,105,0,114,112,129],
[115,135,107,105,99,96,0,106,116],
[114,134,118,98,112,98,104,0,109],
[103,98,88,97,98,81,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,94,109,107,98,99,91],
[99,0,112,106,101,111,95,105,102],
[98,98,0,104,104,120,94,99,110],
[116,104,106,0,105,104,92,89,107],
[101,109,106,105,0,107,110,113,103],
[103,99,90,106,103,0,97,101,100],
[112,115,116,118,100,113,0,126,114],
[111,105,111,121,97,109,84,0,107],
[119,108,100,103,107,110,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,110,104,104,95,112,111],
[109,0,101,108,102,108,109,107,110],
[111,109,0,109,105,106,107,105,114],
[100,102,101,0,101,95,102,97,105],
[106,108,105,109,0,97,113,106,108],
[106,102,104,115,113,0,113,102,112],
[115,101,103,108,97,97,0,107,107],
[98,103,105,113,104,108,103,0,107],
[99,100,96,105,102,98,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,89,100,98,78,99,103,92],
[141,0,109,88,113,108,152,143,134],
[121,101,0,108,124,101,134,117,112],
[110,122,102,0,140,101,128,123,101],
[112,97,86,70,0,101,122,129,103],
[132,102,109,109,109,0,115,139,117],
[111,58,76,82,88,95,0,98,98],
[107,67,93,87,81,71,112,0,90],
[118,76,98,109,107,93,112,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,115,95,86,78,106,116,127],
[119,0,124,121,116,109,105,110,133],
[95,86,0,76,82,97,87,97,121],
[115,89,134,0,79,98,87,94,139],
[124,94,128,131,0,96,79,106,123],
[132,101,113,112,114,0,106,114,147],
[104,105,123,123,131,104,0,117,131],
[94,100,113,116,104,96,93,0,134],
[83,77,89,71,87,63,79,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,121,128,117,103,127,116],
[113,0,115,121,117,98,129,124,88],
[106,95,0,133,125,119,109,105,97],
[89,89,77,0,104,102,95,106,109],
[82,93,85,106,0,97,88,91,95],
[93,112,91,108,113,0,109,108,97],
[107,81,101,115,122,101,0,115,107],
[83,86,105,104,119,102,95,0,84],
[94,122,113,101,115,113,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,101,95,84,103,115,95],
[105,0,103,101,91,99,113,113,108],
[111,107,0,115,110,100,99,123,111],
[109,109,95,0,89,105,110,118,89],
[115,119,100,121,0,92,111,122,94],
[126,111,110,105,118,0,121,130,108],
[107,97,111,100,99,89,0,116,99],
[95,97,87,92,88,80,94,0,89],
[115,102,99,121,116,102,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,82,107,129,101,61,104],
[102,0,138,96,107,139,144,106,102],
[97,72,0,94,94,110,89,92,64],
[128,114,116,0,122,126,109,87,103],
[103,103,116,88,0,128,94,84,110],
[81,71,100,84,82,0,85,60,76],
[109,66,121,101,116,125,0,115,99],
[149,104,118,123,126,150,95,0,127],
[106,108,146,107,100,134,111,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,91,107,98,110,107,108],
[96,0,97,98,92,87,95,92,92],
[107,113,0,105,102,99,106,97,92],
[119,112,105,0,107,100,115,108,117],
[103,118,108,103,0,95,127,97,99],
[112,123,111,110,115,0,113,118,100],
[100,115,104,95,83,97,0,98,96],
[103,118,113,102,113,92,112,0,102],
[102,118,118,93,111,110,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,105,89,107,121,116,100,84],
[127,0,103,104,113,126,126,132,97],
[105,107,0,106,111,125,120,124,86],
[121,106,104,0,124,113,110,110,110],
[103,97,99,86,0,110,102,117,102],
[89,84,85,97,100,0,115,97,85],
[94,84,90,100,108,95,0,105,77],
[110,78,86,100,93,113,105,0,85],
[126,113,124,100,108,125,133,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,90,108,97,87,70,91,93],
[100,0,94,97,116,81,87,94,109],
[120,116,0,100,96,112,94,99,114],
[102,113,110,0,109,99,87,75,117],
[113,94,114,101,0,94,90,108,105],
[123,129,98,111,116,0,94,98,117],
[140,123,116,123,120,116,0,94,117],
[119,116,111,135,102,112,116,0,118],
[117,101,96,93,105,93,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,103,105,104,106,107,97],
[108,0,111,113,110,107,102,108,108],
[102,99,0,103,111,96,106,111,99],
[107,97,107,0,107,99,97,104,93],
[105,100,99,103,0,104,95,106,94],
[106,103,114,111,106,0,108,111,106],
[104,108,104,113,115,102,0,108,104],
[103,102,99,106,104,99,102,0,95],
[113,102,111,117,116,104,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,95,107,113,114,103,105],
[116,0,99,94,104,107,108,118,117],
[124,111,0,104,116,102,126,120,132],
[115,116,106,0,96,112,111,104,117],
[103,106,94,114,0,101,110,109,108],
[97,103,108,98,109,0,109,100,114],
[96,102,84,99,100,101,0,116,102],
[107,92,90,106,101,110,94,0,97],
[105,93,78,93,102,96,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,104,112,104,98,100,104],
[116,0,115,109,110,102,102,110,108],
[104,95,0,100,102,114,93,100,92],
[106,101,110,0,111,103,112,96,104],
[98,100,108,99,0,103,112,95,99],
[106,108,96,107,107,0,110,103,102],
[112,108,117,98,98,100,0,101,106],
[110,100,110,114,115,107,109,0,102],
[106,102,118,106,111,108,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,79,100,77,105,83,112,65],
[125,0,110,118,97,109,88,122,88],
[131,100,0,125,106,131,88,118,98],
[110,92,85,0,98,114,86,111,73],
[133,113,104,112,0,129,115,133,101],
[105,101,79,96,81,0,105,120,71],
[127,122,122,124,95,105,0,126,106],
[98,88,92,99,77,90,84,0,86],
[145,122,112,137,109,139,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,88,114,105,99,103,106],
[105,0,98,90,81,104,101,95,101],
[108,112,0,105,110,116,112,113,114],
[122,120,105,0,112,118,113,122,111],
[96,129,100,98,0,110,108,107,103],
[105,106,94,92,100,0,107,102,97],
[111,109,98,97,102,103,0,110,113],
[107,115,97,88,103,108,100,0,100],
[104,109,96,99,107,113,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,117,113,107,98,109,111],
[106,0,112,110,114,107,103,109,115],
[101,98,0,118,109,107,103,109,107],
[93,100,92,0,108,98,93,106,102],
[97,96,101,102,0,100,92,96,107],
[103,103,103,112,110,0,108,102,107],
[112,107,107,117,118,102,0,114,99],
[101,101,101,104,114,108,96,0,107],
[99,95,103,108,103,103,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,102,111,122,115,123,118,117],
[91,0,67,83,100,112,97,107,89],
[108,143,0,117,120,105,105,107,113],
[99,127,93,0,120,116,106,113,116],
[88,110,90,90,0,110,91,89,97],
[95,98,105,94,100,0,109,100,85],
[87,113,105,104,119,101,0,97,98],
[92,103,103,97,121,110,113,0,105],
[93,121,97,94,113,125,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,131,126,111,133,112,121,93],
[105,0,123,112,118,113,120,110,112],
[79,87,0,96,103,118,97,93,95],
[84,98,114,0,109,129,124,116,99],
[99,92,107,101,0,108,99,106,80],
[77,97,92,81,102,0,89,89,72],
[98,90,113,86,111,121,0,117,100],
[89,100,117,94,104,121,93,0,87],
[117,98,115,111,130,138,110,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,116,104,103,110,108,104],
[106,0,104,116,113,103,108,105,114],
[104,106,0,121,107,108,104,106,106],
[94,94,89,0,105,97,106,102,94],
[106,97,103,105,0,99,102,108,109],
[107,107,102,113,111,0,116,111,103],
[100,102,106,104,108,94,0,101,107],
[102,105,104,108,102,99,109,0,101],
[106,96,104,116,101,107,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,124,118,122,128,108,116,113],
[111,0,126,120,130,121,117,103,101],
[86,84,0,106,106,103,94,78,88],
[92,90,104,0,112,98,95,80,103],
[88,80,104,98,0,98,100,78,82],
[82,89,107,112,112,0,93,91,96],
[102,93,116,115,110,117,0,99,117],
[94,107,132,130,132,119,111,0,118],
[97,109,122,107,128,114,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,113,111,121,104,113,121],
[105,0,119,118,114,114,108,112,119],
[113,91,0,104,110,117,100,108,110],
[97,92,106,0,98,114,103,107,121],
[99,96,100,112,0,106,86,95,104],
[89,96,93,96,104,0,105,100,111],
[106,102,110,107,124,105,0,110,121],
[97,98,102,103,115,110,100,0,111],
[89,91,100,89,106,99,89,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,104,113,91,93,104,89,98],
[123,0,117,114,115,91,110,106,110],
[106,93,0,105,107,83,104,95,102],
[97,96,105,0,108,94,95,102,107],
[119,95,103,102,0,93,101,92,108],
[117,119,127,116,117,0,122,105,122],
[106,100,106,115,109,88,0,88,101],
[121,104,115,108,118,105,122,0,110],
[112,100,108,103,102,88,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,87,96,119,93,116,94],
[96,0,118,100,98,110,103,119,100],
[103,92,0,86,93,127,102,111,102],
[123,110,124,0,115,128,106,130,105],
[114,112,117,95,0,130,110,130,116],
[91,100,83,82,80,0,92,110,83],
[117,107,108,104,100,118,0,116,107],
[94,91,99,80,80,100,94,0,82],
[116,110,108,105,94,127,103,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,115,113,114,110,115,111],
[99,0,99,111,110,108,116,106,106],
[106,111,0,112,113,99,108,108,102],
[95,99,98,0,105,103,100,108,98],
[97,100,97,105,0,113,97,98,95],
[96,102,111,107,97,0,104,100,102],
[100,94,102,110,113,106,0,106,100],
[95,104,102,102,112,110,104,0,105],
[99,104,108,112,115,108,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,103,90,90,98,95,97],
[115,0,112,110,97,99,116,109,114],
[101,98,0,101,99,100,101,95,95],
[107,100,109,0,95,99,107,99,100],
[120,113,111,115,0,109,111,102,116],
[120,111,110,111,101,0,104,92,106],
[112,94,109,103,99,106,0,98,102],
[115,101,115,111,108,118,112,0,104],
[113,96,115,110,94,104,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,119,122,121,122,132,98,113],
[84,0,91,96,92,113,114,85,94],
[91,119,0,101,120,120,119,96,100],
[88,114,109,0,112,113,125,100,96],
[89,118,90,98,0,106,113,89,93],
[88,97,90,97,104,0,104,83,84],
[78,96,91,85,97,106,0,82,85],
[112,125,114,110,121,127,128,0,102],
[97,116,110,114,117,126,125,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,104,98,116,111,118,109],
[101,0,97,102,101,104,99,109,110],
[114,113,0,92,102,114,115,114,106],
[106,108,118,0,102,105,101,109,104],
[112,109,108,108,0,119,100,111,116],
[94,106,96,105,91,0,102,109,101],
[99,111,95,109,110,108,0,116,108],
[92,101,96,101,99,101,94,0,110],
[101,100,104,106,94,109,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,126,79,121,106,129,111,130],
[99,0,125,80,106,122,114,97,117],
[84,85,0,74,102,88,110,70,112],
[131,130,136,0,122,136,132,94,149],
[89,104,108,88,0,102,93,81,138],
[104,88,122,74,108,0,112,83,139],
[81,96,100,78,117,98,0,68,108],
[99,113,140,116,129,127,142,0,142],
[80,93,98,61,72,71,102,68,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,91,99,105,119,88,117,96],
[123,0,105,97,98,107,109,100,103],
[119,105,0,99,82,103,113,100,107],
[111,113,111,0,100,111,88,99,127],
[105,112,128,110,0,114,119,107,118],
[91,103,107,99,96,0,99,97,117],
[122,101,97,122,91,111,0,111,119],
[93,110,110,111,103,113,99,0,117],
[114,107,103,83,92,93,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,103,133,134,110,101,114,117],
[87,0,104,126,112,104,97,98,96],
[107,106,0,119,125,95,103,114,100],
[77,84,91,0,96,88,109,100,84],
[76,98,85,114,0,92,70,98,107],
[100,106,115,122,118,0,95,118,108],
[109,113,107,101,140,115,0,124,106],
[96,112,96,110,112,92,86,0,113],
[93,114,110,126,103,102,104,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,105,110,98,96,109,107],
[110,0,108,106,114,113,104,111,121],
[107,102,0,110,118,103,100,123,108],
[105,104,100,0,121,101,111,125,114],
[100,96,92,89,0,101,88,112,107],
[112,97,107,109,109,0,111,120,114],
[114,106,110,99,122,99,0,113,108],
[101,99,87,85,98,90,97,0,95],
[103,89,102,96,103,96,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,130,101,110,97,110,102],
[101,0,117,117,120,109,110,96,109],
[100,93,0,96,92,90,85,82,91],
[80,93,114,0,105,96,94,102,99],
[109,90,118,105,0,97,114,97,98],
[100,101,120,114,113,0,100,108,99],
[113,100,125,116,96,110,0,107,93],
[100,114,128,108,113,102,103,0,109],
[108,101,119,111,112,111,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,84,88,101,90,83,109],
[109,0,107,95,102,99,91,106,116],
[102,103,0,102,96,96,81,102,108],
[126,115,108,0,107,113,98,102,130],
[122,108,114,103,0,122,83,95,115],
[109,111,114,97,88,0,96,88,113],
[120,119,129,112,127,114,0,95,137],
[127,104,108,108,115,122,115,0,132],
[101,94,102,80,95,97,73,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,107,95,125,113,89,102],
[104,0,102,101,80,100,107,89,84],
[97,108,0,116,91,115,84,72,92],
[103,109,94,0,85,116,78,73,79],
[115,130,119,125,0,153,96,114,127],
[85,110,95,94,57,0,84,71,88],
[97,103,126,132,114,126,0,93,128],
[121,121,138,137,96,139,117,0,118],
[108,126,118,131,83,122,82,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,126,118,108,97,122,109,114],
[102,0,118,97,79,92,111,107,124],
[84,92,0,93,79,88,101,105,92],
[92,113,117,0,91,106,122,111,127],
[102,131,131,119,0,107,112,126,117],
[113,118,122,104,103,0,125,128,120],
[88,99,109,88,98,85,0,103,100],
[101,103,105,99,84,82,107,0,112],
[96,86,118,83,93,90,110,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,102,122,121,115,109,98],
[105,0,105,109,116,122,97,86,102],
[99,105,0,114,114,118,98,97,107],
[108,101,96,0,104,117,97,88,100],
[88,94,96,106,0,119,104,82,101],
[89,88,92,93,91,0,85,84,96],
[95,113,112,113,106,125,0,94,101],
[101,124,113,122,128,126,116,0,101],
[112,108,103,110,109,114,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,91,100,94,89,106,101,109],
[120,0,111,117,105,113,122,118,124],
[119,99,0,112,101,100,111,112,112],
[110,93,98,0,97,98,105,105,119],
[116,105,109,113,0,107,114,122,110],
[121,97,110,112,103,0,118,106,121],
[104,88,99,105,96,92,0,105,108],
[109,92,98,105,88,104,105,0,108],
[101,86,98,91,100,89,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,87,103,107,91,99,96],
[115,0,91,107,114,121,106,91,125],
[112,119,0,113,118,127,94,103,119],
[123,103,97,0,111,122,114,92,107],
[107,96,92,99,0,124,97,100,114],
[103,89,83,88,86,0,86,87,103],
[119,104,116,96,113,124,0,108,112],
[111,119,107,118,110,123,102,0,113],
[114,85,91,103,96,107,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,144,98,105,110,117,112,113],
[94,0,130,103,107,104,105,128,129],
[66,80,0,73,70,75,83,89,99],
[112,107,137,0,105,80,107,125,119],
[105,103,140,105,0,97,106,112,106],
[100,106,135,130,113,0,125,146,142],
[93,105,127,103,104,85,0,104,112],
[98,82,121,85,98,64,106,0,89],
[97,81,111,91,104,68,98,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,103,87,98,98,104,99],
[103,0,92,94,91,103,106,98,101],
[114,118,0,107,104,109,114,101,104],
[107,116,103,0,91,108,120,90,115],
[123,119,106,119,0,111,115,98,115],
[112,107,101,102,99,0,102,94,97],
[112,104,96,90,95,108,0,94,103],
[106,112,109,120,112,116,116,0,103],
[111,109,106,95,95,113,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,114,108,107,102,103,92,113],
[122,0,113,119,105,106,123,115,106],
[96,97,0,111,98,104,107,119,108],
[102,91,99,0,99,87,116,103,102],
[103,105,112,111,0,103,109,102,113],
[108,104,106,123,107,0,98,115,125],
[107,87,103,94,101,112,0,102,90],
[118,95,91,107,108,95,108,0,102],
[97,104,102,108,97,85,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,89,116,110,107,106,106],
[99,0,101,96,114,106,98,95,104],
[106,109,0,105,114,105,103,105,105],
[121,114,105,0,123,104,96,96,98],
[94,96,96,87,0,89,93,87,91],
[100,104,105,106,121,0,109,107,107],
[103,112,107,114,117,101,0,100,104],
[104,115,105,114,123,103,110,0,113],
[104,106,105,112,119,103,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,114,110,74,121,109,93,98],
[89,0,88,125,88,128,107,111,90],
[96,122,0,126,112,124,110,114,117],
[100,85,84,0,92,74,76,78,109],
[136,122,98,118,0,98,143,129,128],
[89,82,86,136,112,0,79,89,136],
[101,103,100,134,67,131,0,148,94],
[117,99,96,132,81,121,62,0,101],
[112,120,93,101,82,74,116,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,123,109,105,125,117,110,121],
[101,0,117,104,116,104,108,101,123],
[87,93,0,112,99,91,100,95,112],
[101,106,98,0,104,103,111,98,111],
[105,94,111,106,0,117,116,111,118],
[85,106,119,107,93,0,109,105,121],
[93,102,110,99,94,101,0,96,114],
[100,109,115,112,99,105,114,0,120],
[89,87,98,99,92,89,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,103,115,105,95,100,104],
[97,0,101,97,113,96,105,91,97],
[103,109,0,106,119,110,100,105,102],
[107,113,104,0,115,99,101,93,98],
[95,97,91,95,0,89,93,92,107],
[105,114,100,111,121,0,95,107,113],
[115,105,110,109,117,115,0,105,116],
[110,119,105,117,118,103,105,0,108],
[106,113,108,112,103,97,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,89,87,94,90,90,105],
[92,0,113,90,100,90,91,93,107],
[90,97,0,80,80,75,95,72,100],
[121,120,130,0,102,98,115,94,120],
[123,110,130,108,0,101,122,112,117],
[116,120,135,112,109,0,130,98,125],
[120,119,115,95,88,80,0,85,112],
[120,117,138,116,98,112,125,0,125],
[105,103,110,90,93,85,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,109,112,102,94,102,111],
[109,0,99,106,114,91,103,120,99],
[115,111,0,112,115,113,102,116,123],
[101,104,98,0,98,95,108,116,102],
[98,96,95,112,0,98,103,108,100],
[108,119,97,115,112,0,108,110,107],
[116,107,108,102,107,102,0,109,117],
[108,90,94,94,102,100,101,0,100],
[99,111,87,108,110,103,93,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,124,111,135,92,95,119,114],
[110,0,116,135,126,113,127,108,105],
[86,94,0,122,122,96,97,81,83],
[99,75,88,0,125,88,106,93,82],
[75,84,88,85,0,86,99,70,93],
[118,97,114,122,124,0,121,92,107],
[115,83,113,104,111,89,0,89,103],
[91,102,129,117,140,118,121,0,116],
[96,105,127,128,117,103,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,103,115,98,107,98,101],
[111,0,100,100,105,105,96,89,97],
[110,110,0,91,113,100,104,97,111],
[107,110,119,0,118,101,109,95,93],
[95,105,97,92,0,100,97,100,103],
[112,105,110,109,110,0,102,99,112],
[103,114,106,101,113,108,0,110,97],
[112,121,113,115,110,111,100,0,109],
[109,113,99,117,107,98,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,102,100,100,108,99,106],
[97,0,105,99,94,103,99,114,102],
[98,105,0,96,99,98,83,100,100],
[108,111,114,0,102,103,97,114,107],
[110,116,111,108,0,110,96,113,107],
[110,107,112,107,100,0,103,102,111],
[102,111,127,113,114,107,0,113,112],
[111,96,110,96,97,108,97,0,103],
[104,108,110,103,103,99,98,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,81,89,92,83,83,94],
[114,0,94,93,93,113,86,101,101],
[108,116,0,98,98,103,92,93,104],
[129,117,112,0,104,120,106,98,111],
[121,117,112,106,0,116,100,114,126],
[118,97,107,90,94,0,95,97,103],
[127,124,118,104,110,115,0,106,118],
[127,109,117,112,96,113,104,0,108],
[116,109,106,99,84,107,92,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,86,103,105,119,110,113],
[104,0,98,114,117,111,107,97,108],
[96,112,0,92,130,106,98,109,99],
[124,96,118,0,118,114,106,101,111],
[107,93,80,92,0,117,97,91,79],
[105,99,104,96,93,0,108,103,95],
[91,103,112,104,113,102,0,92,106],
[100,113,101,109,119,107,118,0,112],
[97,102,111,99,131,115,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,97,105,110,109,104,85],
[113,0,108,117,111,121,109,114,104],
[116,102,0,111,104,111,108,105,105],
[113,93,99,0,95,110,113,105,87],
[105,99,106,115,0,104,112,103,101],
[100,89,99,100,106,0,102,94,85],
[101,101,102,97,98,108,0,100,105],
[106,96,105,105,107,116,110,0,91],
[125,106,105,123,109,125,105,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,108,105,110,108,109,113],
[103,0,111,97,97,105,104,97,102],
[108,99,0,100,101,106,99,98,103],
[102,113,110,0,99,107,109,107,107],
[105,113,109,111,0,103,109,110,112],
[100,105,104,103,107,0,103,111,109],
[102,106,111,101,101,107,0,105,112],
[101,113,112,103,100,99,105,0,104],
[97,108,107,103,98,101,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,114,107,102,102,103,101],
[102,0,108,112,103,105,97,96,97],
[96,102,0,106,108,101,98,101,97],
[96,98,104,0,108,102,96,87,96],
[103,107,102,102,0,97,86,91,96],
[108,105,109,108,113,0,101,100,98],
[108,113,112,114,124,109,0,101,110],
[107,114,109,123,119,110,109,0,105],
[109,113,113,114,114,112,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,101,101,93,108,102,102],
[112,0,114,103,104,112,114,112,107],
[103,96,0,100,101,112,108,101,97],
[109,107,110,0,101,103,106,109,97],
[109,106,109,109,0,112,112,98,100],
[117,98,98,107,98,0,109,115,104],
[102,96,102,104,98,101,0,101,99],
[108,98,109,101,112,95,109,0,99],
[108,103,113,113,110,106,111,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,140,103,145,73,143,142,87],
[78,0,132,133,122,101,158,136,139],
[70,78,0,104,90,77,110,136,97],
[107,77,106,0,111,95,128,152,99],
[65,88,120,99,0,108,121,147,101],
[137,109,133,115,102,0,130,165,124],
[67,52,100,82,89,80,0,115,82],
[68,74,74,58,63,45,95,0,63],
[123,71,113,111,109,86,128,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,123,131,119,118,125,104,133],
[75,0,107,105,84,93,96,86,102],
[87,103,0,96,93,97,105,99,108],
[79,105,114,0,95,102,114,99,108],
[91,126,117,115,0,118,121,115,116],
[92,117,113,108,92,0,119,105,121],
[85,114,105,96,89,91,0,95,106],
[106,124,111,111,95,105,115,0,109],
[77,108,102,102,94,89,104,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,73,73,90,77,96,90,128],
[118,0,107,146,90,90,110,134,109],
[137,103,0,130,121,80,130,92,94],
[137,64,80,0,64,39,120,60,116],
[120,120,89,146,0,98,169,98,110],
[133,120,130,171,112,0,147,95,148],
[114,100,80,90,41,63,0,71,133],
[120,76,118,150,112,115,139,0,164],
[82,101,116,94,100,62,77,46,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,97,69,68,88,82,68,92],
[98,0,95,122,88,107,101,120,116],
[113,115,0,90,98,115,111,113,89],
[141,88,120,0,93,116,113,103,149],
[142,122,112,117,0,116,85,112,121],
[122,103,95,94,94,0,117,82,97],
[128,109,99,97,125,93,0,108,113],
[142,90,97,107,98,128,102,0,101],
[118,94,121,61,89,113,97,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,95,102,113,90,94,100,85],
[103,0,98,90,98,93,95,112,82],
[115,112,0,91,115,84,112,116,87],
[108,120,119,0,103,105,134,106,91],
[97,112,95,107,0,94,122,111,92],
[120,117,126,105,116,0,119,124,109],
[116,115,98,76,88,91,0,101,77],
[110,98,94,104,99,86,109,0,84],
[125,128,123,119,118,101,133,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,105,99,107,101,103,106],
[101,0,102,97,94,89,91,105,97],
[102,108,0,99,91,94,94,93,107],
[105,113,111,0,102,98,100,96,101],
[111,116,119,108,0,107,106,103,105],
[103,121,116,112,103,0,107,118,112],
[109,119,116,110,104,103,0,114,112],
[107,105,117,114,107,92,96,0,108],
[104,113,103,109,105,98,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,108,115,109,109,94,101],
[100,0,92,102,109,113,109,94,101],
[110,118,0,110,110,118,112,105,110],
[102,108,100,0,116,115,105,109,107],
[95,101,100,94,0,106,101,91,100],
[101,97,92,95,104,0,102,90,90],
[101,101,98,105,109,108,0,96,103],
[116,116,105,101,119,120,114,0,110],
[109,109,100,103,110,120,107,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,107,127,117,131,136,118,101],
[90,0,101,110,120,119,111,133,112],
[103,109,0,98,112,113,110,134,111],
[83,100,112,0,111,105,110,126,94],
[93,90,98,99,0,88,100,91,86],
[79,91,97,105,122,0,102,122,88],
[74,99,100,100,110,108,0,98,89],
[92,77,76,84,119,88,112,0,90],
[109,98,99,116,124,122,121,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,109,98,91,101,95,115],
[116,0,85,112,104,91,98,96,111],
[105,125,0,119,115,103,127,115,127],
[101,98,91,0,113,85,90,100,104],
[112,106,95,97,0,100,105,95,112],
[119,119,107,125,110,0,104,100,127],
[109,112,83,120,105,106,0,111,108],
[115,114,95,110,115,110,99,0,113],
[95,99,83,106,98,83,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,106,118,110,109,94,114,106],
[89,0,89,97,94,89,89,97,94],
[104,121,0,118,102,103,98,112,94],
[92,113,92,0,106,94,94,96,89],
[100,116,108,104,0,101,107,108,113],
[101,121,107,116,109,0,99,110,102],
[116,121,112,116,103,111,0,117,110],
[96,113,98,114,102,100,93,0,104],
[104,116,116,121,97,108,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,88,83,97,96,116,97],
[107,0,85,97,94,111,108,95,107],
[111,125,0,101,106,108,116,108,135],
[122,113,109,0,105,108,102,117,131],
[127,116,104,105,0,128,97,120,119],
[113,99,102,102,82,0,110,120,126],
[114,102,94,108,113,100,0,130,124],
[94,115,102,93,90,90,80,0,104],
[113,103,75,79,91,84,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,116,112,134,103,104,96],
[115,0,100,80,84,105,76,104,96],
[105,110,0,76,107,114,92,94,97],
[94,130,134,0,98,127,109,105,90],
[98,126,103,112,0,109,98,110,95],
[76,105,96,83,101,0,76,73,70],
[107,134,118,101,112,134,0,123,108],
[106,106,116,105,100,137,87,0,72],
[114,114,113,120,115,140,102,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,101,110,105,107,107,100],
[108,0,115,107,108,113,102,112,96],
[103,95,0,98,109,107,94,107,108],
[109,103,112,0,109,104,99,105,109],
[100,102,101,101,0,94,95,116,98],
[105,97,103,106,116,0,102,98,107],
[103,108,116,111,115,108,0,114,103],
[103,98,103,105,94,112,96,0,100],
[110,114,102,101,112,103,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,86,102,105,102,99,113,100],
[111,0,112,97,131,116,126,119,123],
[124,98,0,109,119,101,119,113,115],
[108,113,101,0,116,116,97,101,96],
[105,79,91,94,0,119,103,112,87],
[108,94,109,94,91,0,94,88,93],
[111,84,91,113,107,116,0,123,122],
[97,91,97,109,98,122,87,0,89],
[110,87,95,114,123,117,88,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,152,108,103,93,120,102,130,119],
[58,0,89,114,66,54,93,55,66],
[102,121,0,97,103,68,90,71,86],
[107,96,113,0,125,86,99,124,121],
[117,144,107,85,0,131,122,99,131],
[90,156,142,124,79,0,129,118,110],
[108,117,120,111,88,81,0,74,73],
[80,155,139,86,111,92,136,0,107],
[91,144,124,89,79,100,137,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,134,158,110,94,153,113,97],
[87,0,112,90,102,86,90,70,87],
[76,98,0,124,84,84,111,71,71],
[52,120,86,0,54,62,66,49,39],
[100,108,126,156,0,60,102,71,116],
[116,124,126,148,150,0,115,50,103],
[57,120,99,144,108,95,0,117,82],
[97,140,139,161,139,160,93,0,84],
[113,123,139,171,94,107,128,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,104,92,107,90,89,103],
[106,0,102,104,105,113,112,92,121],
[113,108,0,114,105,126,104,103,117],
[106,106,96,0,104,110,103,99,116],
[118,105,105,106,0,113,102,112,113],
[103,97,84,100,97,0,92,92,106],
[120,98,106,107,108,118,0,99,116],
[121,118,107,111,98,118,111,0,119],
[107,89,93,94,97,104,94,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,128,96,103,100,115,98,97],
[119,0,135,127,121,101,116,114,122],
[82,75,0,81,93,87,113,104,88],
[114,83,129,0,101,94,121,117,107],
[107,89,117,109,0,117,140,119,106],
[110,109,123,116,93,0,122,117,102],
[95,94,97,89,70,88,0,96,76],
[112,96,106,93,91,93,114,0,96],
[113,88,122,103,104,108,134,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,113,118,108,109,104,121,114],
[101,0,122,116,112,112,110,119,115],
[97,88,0,98,101,105,102,99,103],
[92,94,112,0,108,96,104,103,118],
[102,98,109,102,0,92,109,114,115],
[101,98,105,114,118,0,105,118,119],
[106,100,108,106,101,105,0,106,112],
[89,91,111,107,96,92,104,0,99],
[96,95,107,92,95,91,98,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,102,99,115,102,100,99],
[111,0,92,109,123,122,114,115,117],
[108,118,0,93,118,117,107,111,108],
[108,101,117,0,116,108,110,104,107],
[111,87,92,94,0,104,92,96,97],
[95,88,93,102,106,0,101,100,97],
[108,96,103,100,118,109,0,103,115],
[110,95,99,106,114,110,107,0,99],
[111,93,102,103,113,113,95,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,102,107,83,100,94,90],
[120,0,92,105,94,89,107,105,105],
[115,118,0,121,113,88,109,118,101],
[108,105,89,0,115,85,105,98,98],
[103,116,97,95,0,92,99,110,115],
[127,121,122,125,118,0,122,104,129],
[110,103,101,105,111,88,0,94,96],
[116,105,92,112,100,106,116,0,110],
[120,105,109,112,95,81,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,90,97,97,98,99,94,98],
[110,0,96,113,103,112,105,100,103],
[120,114,0,113,110,118,98,115,117],
[113,97,97,0,101,110,104,105,103],
[113,107,100,109,0,109,100,113,113],
[112,98,92,100,101,0,103,94,103],
[111,105,112,106,110,107,0,96,104],
[116,110,95,105,97,116,114,0,107],
[112,107,93,107,97,107,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,110,101,113,120,102,110],
[108,0,106,104,104,116,109,104,105],
[109,104,0,111,107,112,108,107,109],
[100,106,99,0,97,103,109,95,104],
[109,106,103,113,0,117,116,100,122],
[97,94,98,107,93,0,97,92,109],
[90,101,102,101,94,113,0,96,104],
[108,106,103,115,110,118,114,0,114],
[100,105,101,106,88,101,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,79,115,80,111,61,78],
[100,0,64,103,85,140,104,61,67],
[86,146,0,104,80,108,92,65,133],
[131,107,106,0,100,115,96,90,67],
[95,125,130,110,0,121,101,114,109],
[130,70,102,95,89,0,75,17,58],
[99,106,118,114,109,135,0,139,91],
[149,149,145,120,96,193,71,0,94],
[132,143,77,143,101,152,119,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,120,116,113,108,119,105],
[94,0,104,105,102,115,99,96,112],
[100,106,0,107,102,105,109,107,100],
[90,105,103,0,105,101,98,111,113],
[94,108,108,105,0,116,102,118,107],
[97,95,105,109,94,0,101,117,105],
[102,111,101,112,108,109,0,118,109],
[91,114,103,99,92,93,92,0,100],
[105,98,110,97,103,105,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,98,98,66,66,103,103,137],
[210,0,195,169,66,66,103,103,137],
[112,15,0,118,66,15,103,71,86],
[112,41,92,0,92,92,129,97,178],
[144,144,144,118,0,41,103,103,118],
[144,144,195,118,169,0,103,103,118],
[107,107,107,81,107,107,0,112,178],
[107,107,139,113,107,107,98,0,152],
[73,73,124,32,92,92,32,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,92,100,118,123,117,116],
[100,0,113,112,101,128,127,117,106],
[86,97,0,83,77,114,97,121,100],
[118,98,127,0,104,120,116,124,114],
[110,109,133,106,0,113,101,125,127],
[92,82,96,90,97,0,92,104,89],
[87,83,113,94,109,118,0,134,104],
[93,93,89,86,85,106,76,0,92],
[94,104,110,96,83,121,106,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,75,105,96,88,92,102],
[112,0,100,96,109,112,104,100,109],
[119,110,0,105,113,105,85,108,114],
[135,114,105,0,119,115,112,111,126],
[105,101,97,91,0,108,99,113,104],
[114,98,105,95,102,0,97,91,114],
[122,106,125,98,111,113,0,109,113],
[118,110,102,99,97,119,101,0,112],
[108,101,96,84,106,96,97,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,99,117,80,130,128,115,121],
[82,0,108,73,101,112,100,85,77],
[111,102,0,111,95,105,108,123,101],
[93,137,99,0,103,108,123,96,101],
[130,109,115,107,0,109,112,81,87],
[80,98,105,102,101,0,146,121,99],
[82,110,102,87,98,64,0,90,71],
[95,125,87,114,129,89,120,0,70],
[89,133,109,109,123,111,139,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,105,99,107,111,113,91],
[98,0,110,104,112,106,115,104,105],
[92,100,0,111,93,105,110,113,111],
[105,106,99,0,97,108,105,111,110],
[111,98,117,113,0,122,137,122,113],
[103,104,105,102,88,0,105,112,93],
[99,95,100,105,73,105,0,104,95],
[97,106,97,99,88,98,106,0,89],
[119,105,99,100,97,117,115,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,101,96,105,105,99,97],
[107,0,96,98,106,99,104,91,87],
[101,114,0,98,97,107,107,104,106],
[109,112,112,0,106,115,104,101,100],
[114,104,113,104,0,122,113,104,90],
[105,111,103,95,88,0,108,99,90],
[105,106,103,106,97,102,0,95,93],
[111,119,106,109,106,111,115,0,91],
[113,123,104,110,120,120,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,84,88,88,84,91,97],
[114,0,86,89,96,102,95,109,102],
[119,124,0,100,107,117,105,99,108],
[126,121,110,0,113,105,104,109,118],
[122,114,103,97,0,88,80,101,105],
[122,108,93,105,122,0,100,114,112],
[126,115,105,106,130,110,0,118,120],
[119,101,111,101,109,96,92,0,104],
[113,108,102,92,105,98,90,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,96,119,108,105,112,103,97],
[111,0,99,118,107,107,108,107,105],
[114,111,0,117,93,111,111,103,95],
[91,92,93,0,92,96,99,103,96],
[102,103,117,118,0,114,112,117,108],
[105,103,99,114,96,0,112,97,92],
[98,102,99,111,98,98,0,99,95],
[107,103,107,107,93,113,111,0,107],
[113,105,115,114,102,118,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,96,109,108,114,106,116],
[98,0,110,97,101,91,109,110,115],
[102,100,0,113,122,101,111,111,126],
[114,113,97,0,112,105,114,108,115],
[101,109,88,98,0,86,120,98,106],
[102,119,109,105,124,0,114,113,119],
[96,101,99,96,90,96,0,97,120],
[104,100,99,102,112,97,113,0,108],
[94,95,84,95,104,91,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,109,104,110,101,97,103],
[109,0,104,108,113,112,95,104,105],
[99,106,0,107,109,89,105,98,94],
[101,102,103,0,107,106,89,108,96],
[106,97,101,103,0,91,94,93,83],
[100,98,121,104,119,0,102,89,101],
[109,115,105,121,116,108,0,97,107],
[113,106,112,102,117,121,113,0,114],
[107,105,116,114,127,109,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,106,75,97,95,102,97,97],
[118,0,104,103,105,114,107,118,116],
[104,106,0,101,109,110,102,116,105],
[135,107,109,0,93,115,104,114,107],
[113,105,101,117,0,99,111,124,101],
[115,96,100,95,111,0,102,110,105],
[108,103,108,106,99,108,0,104,108],
[113,92,94,96,86,100,106,0,102],
[113,94,105,103,109,105,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,90,113,89,110,93,110,115],
[101,0,110,92,77,108,93,88,91],
[120,100,0,108,82,113,104,117,101],
[97,118,102,0,109,91,103,106,113],
[121,133,128,101,0,114,126,107,117],
[100,102,97,119,96,0,104,108,104],
[117,117,106,107,84,106,0,111,114],
[100,122,93,104,103,102,99,0,110],
[95,119,109,97,93,106,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,100,97,101,94,114,106],
[111,0,104,116,107,104,99,101,105],
[107,106,0,118,103,99,107,104,109],
[110,94,92,0,103,97,93,98,102],
[113,103,107,107,0,98,108,112,119],
[109,106,111,113,112,0,112,110,97],
[116,111,103,117,102,98,0,107,99],
[96,109,106,112,98,100,103,0,106],
[104,105,101,108,91,113,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,105,104,101,107,97,106],
[119,0,111,109,101,100,119,123,120],
[103,99,0,94,95,93,95,87,94],
[105,101,116,0,106,104,104,101,111],
[106,109,115,104,0,114,110,130,123],
[109,110,117,106,96,0,120,108,116],
[103,91,115,106,100,90,0,100,97],
[113,87,123,109,80,102,110,0,105],
[104,90,116,99,87,94,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,104,110,105,107,110,104],
[93,0,92,100,113,100,107,88,87],
[104,118,0,111,117,113,118,108,109],
[106,110,99,0,120,106,120,101,107],
[100,97,93,90,0,92,115,108,91],
[105,110,97,104,118,0,107,103,94],
[103,103,92,90,95,103,0,103,95],
[100,122,102,109,102,107,107,0,99],
[106,123,101,103,119,116,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,110,111,106,83,111,119],
[96,0,93,141,123,123,121,124,121],
[110,117,0,116,110,117,103,129,101],
[100,69,94,0,95,117,87,84,86],
[99,87,100,115,0,118,102,100,98],
[104,87,93,93,92,0,82,108,107],
[127,89,107,123,108,128,0,121,120],
[99,86,81,126,110,102,89,0,99],
[91,89,109,124,112,103,90,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,103,115,70,102,97,100,96],
[88,0,89,89,87,87,90,94,65],
[107,121,0,118,113,120,114,116,98],
[95,121,92,0,85,118,119,104,77],
[140,123,97,125,0,136,124,142,112],
[108,123,90,92,74,0,111,105,96],
[113,120,96,91,86,99,0,112,102],
[110,116,94,106,68,105,98,0,76],
[114,145,112,133,98,114,108,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,101,96,104,94,94,105,100],
[100,0,100,103,105,92,95,99,103],
[109,110,0,98,111,98,102,105,109],
[114,107,112,0,112,101,109,119,114],
[106,105,99,98,0,84,93,109,101],
[116,118,112,109,126,0,101,113,109],
[116,115,108,101,117,109,0,115,105],
[105,111,105,91,101,97,95,0,98],
[110,107,101,96,109,101,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,106,116,106,115,104,118],
[97,0,107,97,103,109,97,101,99],
[100,103,0,110,122,94,114,105,110],
[104,113,100,0,121,107,109,109,96],
[94,107,88,89,0,98,93,95,103],
[104,101,116,103,112,0,116,100,111],
[95,113,96,101,117,94,0,97,109],
[106,109,105,101,115,110,113,0,109],
[92,111,100,114,107,99,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,132,111,105,116,114,115,109],
[93,0,108,105,99,113,124,104,95],
[78,102,0,104,85,94,106,88,94],
[99,105,106,0,93,122,104,96,94],
[105,111,125,117,0,110,113,101,107],
[94,97,116,88,100,0,117,101,83],
[96,86,104,106,97,93,0,101,97],
[95,106,122,114,109,109,109,0,100],
[101,115,116,116,103,127,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,123,109,135,128,113,109],
[96,0,112,105,113,114,95,101,100],
[106,98,0,112,126,134,97,124,90],
[87,105,98,0,97,107,81,93,90],
[101,97,84,113,0,119,99,116,107],
[75,96,76,103,91,0,92,100,87],
[82,115,113,129,111,118,0,110,95],
[97,109,86,117,94,110,100,0,98],
[101,110,120,120,103,123,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,96,92,97,102,88,95],
[97,0,103,100,94,101,100,95,102],
[103,107,0,95,102,106,95,104,99],
[114,110,115,0,107,117,107,98,105],
[118,116,108,103,0,114,109,104,108],
[113,109,104,93,96,0,99,95,102],
[108,110,115,103,101,111,0,107,103],
[122,115,106,112,106,115,103,0,106],
[115,108,111,105,102,108,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,68,108,104,84,106,89,105],
[78,0,47,78,61,60,79,78,76],
[142,163,0,119,158,124,104,115,127],
[102,132,91,0,110,77,90,103,90],
[106,149,52,100,0,82,98,68,110],
[126,150,86,133,128,0,123,118,100],
[104,131,106,120,112,87,0,98,94],
[121,132,95,107,142,92,112,0,127],
[105,134,83,120,100,110,116,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,101,107,104,107,102,98],
[114,0,92,93,101,86,97,103,102],
[103,118,0,97,129,105,96,89,126],
[109,117,113,0,122,100,117,105,113],
[103,109,81,88,0,84,96,100,110],
[106,124,105,110,126,0,104,100,123],
[103,113,114,93,114,106,0,96,107],
[108,107,121,105,110,110,114,0,120],
[112,108,84,97,100,87,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,96,104,93,118,101,109],
[110,0,110,95,113,111,109,108,107],
[100,100,0,109,108,110,146,92,120],
[114,115,101,0,97,111,125,98,123],
[106,97,102,113,0,108,124,109,102],
[117,99,100,99,102,0,125,110,99],
[92,101,64,85,86,85,0,81,98],
[109,102,118,112,101,100,129,0,125],
[101,103,90,87,108,111,112,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,101,110,87,90,102,92],
[104,0,97,96,109,93,111,93,93],
[115,113,0,106,115,101,111,101,108],
[109,114,104,0,108,102,108,106,109],
[100,101,95,102,0,93,106,104,98],
[123,117,109,108,117,0,101,107,105],
[120,99,99,102,104,109,0,98,101],
[108,117,109,104,106,103,112,0,99],
[118,117,102,101,112,105,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,120,107,102,103,107,108,109],
[96,0,104,112,90,104,95,109,115],
[90,106,0,99,98,97,96,110,102],
[103,98,111,0,86,95,96,103,102],
[108,120,112,124,0,101,116,120,122],
[107,106,113,115,109,0,98,106,111],
[103,115,114,114,94,112,0,116,116],
[102,101,100,107,90,104,94,0,108],
[101,95,108,108,88,99,94,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,129,132,91,130,103,153,58],
[59,0,135,140,105,81,114,76,69],
[81,75,0,77,65,75,77,115,39],
[78,70,133,0,124,146,74,95,45],
[119,105,145,86,0,77,113,136,107],
[80,129,135,64,133,0,57,78,107],
[107,96,133,136,97,153,0,131,100],
[57,134,95,115,74,132,79,0,31],
[152,141,171,165,103,103,110,179,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,110,114,106,109,105,115],
[104,0,109,115,105,104,99,115,95],
[109,101,0,101,103,92,95,99,103],
[100,95,109,0,107,102,98,101,108],
[96,105,107,103,0,100,100,114,101],
[104,106,118,108,110,0,100,114,106],
[101,111,115,112,110,110,0,117,114],
[105,95,111,109,96,96,93,0,95],
[95,115,107,102,109,104,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,95,97,113,95,106,115,114],
[115,0,115,110,107,108,114,105,110],
[115,95,0,99,111,105,111,103,114],
[113,100,111,0,112,101,115,105,114],
[97,103,99,98,0,95,110,108,120],
[115,102,105,109,115,0,108,114,105],
[104,96,99,95,100,102,0,101,105],
[95,105,107,105,102,96,109,0,107],
[96,100,96,96,90,105,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,106,104,102,93,103,112],
[107,0,88,105,102,109,98,100,114],
[103,122,0,119,122,118,118,120,119],
[104,105,91,0,107,107,96,93,93],
[106,108,88,103,0,84,83,98,102],
[108,101,92,103,126,0,113,98,115],
[117,112,92,114,127,97,0,116,113],
[107,110,90,117,112,112,94,0,103],
[98,96,91,117,108,95,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,110,106,96,108,114,106,96],
[88,0,97,97,92,96,100,99,87],
[100,113,0,109,104,95,105,108,99],
[104,113,101,0,96,99,102,107,93],
[114,118,106,114,0,95,119,111,97],
[102,114,115,111,115,0,111,107,106],
[96,110,105,108,91,99,0,110,87],
[104,111,102,103,99,103,100,0,89],
[114,123,111,117,113,104,123,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,102,122,130,108,123,110],
[93,0,102,104,95,121,99,103,99],
[94,108,0,101,97,115,105,108,91],
[108,106,109,0,107,112,111,102,110],
[88,115,113,103,0,111,106,104,117],
[80,89,95,98,99,0,95,91,91],
[102,111,105,99,104,115,0,106,86],
[87,107,102,108,106,119,104,0,93],
[100,111,119,100,93,119,124,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,157,90,99,119,118,111],
[92,0,53,132,90,83,87,88,99],
[90,157,0,127,122,107,104,99,128],
[53,78,83,0,76,76,81,76,102],
[120,120,88,134,0,114,117,112,129],
[111,127,103,134,96,0,106,114,110],
[91,123,106,129,93,104,0,97,116],
[92,122,111,134,98,96,113,0,115],
[99,111,82,108,81,100,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,27,54,27,29,27,59,59,34],
[183,0,94,67,103,74,136,70,108],
[156,116,0,145,138,65,154,70,95],
[183,143,65,0,183,70,113,70,108],
[181,107,72,27,0,59,107,59,50],
[183,136,145,140,151,0,185,83,63],
[151,74,56,97,103,25,0,70,81],
[151,140,140,140,151,127,140,0,90],
[176,102,115,102,160,147,129,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,109,105,100,108,92,96],
[110,0,115,116,114,100,105,111,109],
[114,95,0,117,115,92,101,109,110],
[101,94,93,0,97,101,100,106,103],
[105,96,95,113,0,107,101,107,103],
[110,110,118,109,103,0,105,118,109],
[102,105,109,110,109,105,0,105,115],
[118,99,101,104,103,92,105,0,104],
[114,101,100,107,107,101,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,119,90,104,93,108,99],
[111,0,113,128,128,108,105,119,103],
[104,97,0,122,99,98,91,108,96],
[91,82,88,0,97,87,86,89,85],
[120,82,111,113,0,97,108,95,94],
[106,102,112,123,113,0,107,108,102],
[117,105,119,124,102,103,0,112,110],
[102,91,102,121,115,102,98,0,100],
[111,107,114,125,116,108,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,95,161,89,144,74,103,94],
[124,0,107,116,91,134,61,93,109],
[115,103,0,136,103,131,124,80,93],
[49,94,74,0,98,95,72,65,60],
[121,119,107,112,0,145,103,61,110],
[66,76,79,115,65,0,54,55,102],
[136,149,86,138,107,156,0,84,110],
[107,117,130,145,149,155,126,0,95],
[116,101,117,150,100,108,100,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,98,97,96,119,104,109,103],
[99,0,88,93,80,112,108,111,107],
[112,122,0,99,93,116,108,113,110],
[113,117,111,0,98,126,91,111,107],
[114,130,117,112,0,118,116,119,104],
[91,98,94,84,92,0,97,96,91],
[106,102,102,119,94,113,0,116,96],
[101,99,97,99,91,114,94,0,102],
[107,103,100,103,106,119,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,104,92,90,107,110,108],
[103,0,105,109,103,91,120,127,122],
[108,105,0,110,113,111,124,115,115],
[106,101,100,0,108,105,109,106,120],
[118,107,97,102,0,91,115,110,126],
[120,119,99,105,119,0,103,106,125],
[103,90,86,101,95,107,0,102,96],
[100,83,95,104,100,104,108,0,130],
[102,88,95,90,84,85,114,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,95,81,105,92,101,101,108],
[89,0,72,91,88,96,106,94,93],
[115,138,0,125,104,114,130,110,112],
[129,119,85,0,104,106,110,102,109],
[105,122,106,106,0,112,121,106,109],
[118,114,96,104,98,0,125,106,109],
[109,104,80,100,89,85,0,92,91],
[109,116,100,108,104,104,118,0,119],
[102,117,98,101,101,101,119,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,119,111,137,119,100,107,107],
[110,0,111,92,149,99,93,112,123],
[91,99,0,103,130,125,123,137,121],
[99,118,107,0,118,154,136,130,119],
[73,61,80,92,0,109,91,101,108],
[91,111,85,56,101,0,69,103,105],
[110,117,87,74,119,141,0,112,106],
[103,98,73,80,109,107,98,0,119],
[103,87,89,91,102,105,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,69,109,84,118,69,81,97],
[105,0,71,106,102,106,94,99,96],
[141,139,0,108,125,135,108,126,100],
[101,104,102,0,126,93,91,114,72],
[126,108,85,84,0,91,115,73,61],
[92,104,75,117,119,0,89,116,79],
[141,116,102,119,95,121,0,111,108],
[129,111,84,96,137,94,99,0,100],
[113,114,110,138,149,131,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,87,126,127,77,67,96,93],
[138,0,144,113,103,135,102,123,175],
[123,66,0,156,123,152,115,157,141],
[84,97,54,0,117,102,109,109,144],
[83,107,87,93,0,113,82,118,145],
[133,75,58,108,97,0,111,69,127],
[143,108,95,101,128,99,0,141,173],
[114,87,53,101,92,141,69,0,135],
[117,35,69,66,65,83,37,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,116,104,104,92,89,94],
[116,0,106,118,109,115,100,95,103],
[104,104,0,118,110,97,93,101,96],
[94,92,92,0,96,90,92,91,89],
[106,101,100,114,0,101,90,90,100],
[106,95,113,120,109,0,90,105,96],
[118,110,117,118,120,120,0,112,102],
[121,115,109,119,120,105,98,0,106],
[116,107,114,121,110,114,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,117,114,112,116,105,114],
[88,0,106,111,102,102,104,109,110],
[95,104,0,104,107,97,102,103,103],
[93,99,106,0,102,98,114,93,106],
[96,108,103,108,0,105,103,106,110],
[98,108,113,112,105,0,111,107,101],
[94,106,108,96,107,99,0,110,105],
[105,101,107,117,104,103,100,0,105],
[96,100,107,104,100,109,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,109,104,103,97,90,96,92],
[117,0,113,121,103,98,109,109,113],
[101,97,0,110,104,88,103,97,103],
[106,89,100,0,97,90,98,91,93],
[107,107,106,113,0,101,109,106,114],
[113,112,122,120,109,0,101,108,105],
[120,101,107,112,101,109,0,105,102],
[114,101,113,119,104,102,105,0,100],
[118,97,107,117,96,105,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,113,94,119,106,119,106],
[98,0,107,96,97,110,104,102,98],
[95,103,0,105,88,118,84,96,89],
[97,114,105,0,103,113,90,100,91],
[116,113,122,107,0,118,104,115,112],
[91,100,92,97,92,0,93,102,96],
[104,106,126,120,106,117,0,116,102],
[91,108,114,110,95,108,94,0,92],
[104,112,121,119,98,114,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,103,117,120,111,107,107],
[108,0,98,121,127,135,127,106,91],
[105,112,0,112,129,120,116,119,117],
[107,89,98,0,106,109,102,121,94],
[93,83,81,104,0,92,114,87,106],
[90,75,90,101,118,0,104,93,105],
[99,83,94,108,96,106,0,116,97],
[103,104,91,89,123,117,94,0,97],
[103,119,93,116,104,105,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,103,108,109,95,113,104],
[109,0,101,101,106,113,108,113,112],
[112,109,0,120,105,114,103,119,112],
[107,109,90,0,97,108,85,105,106],
[102,104,105,113,0,119,107,118,116],
[101,97,96,102,91,0,97,111,104],
[115,102,107,125,103,113,0,112,114],
[97,97,91,105,92,99,98,0,96],
[106,98,98,104,94,106,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,67,97,166,115,68,101,111],
[145,0,90,125,174,176,101,130,128],
[143,120,0,99,150,129,93,144,150],
[113,85,111,0,121,91,111,132,129],
[44,36,60,89,0,90,59,103,85],
[95,34,81,119,120,0,90,113,96],
[142,109,117,99,151,120,0,134,130],
[109,80,66,78,107,97,76,0,102],
[99,82,60,81,125,114,80,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,96,111,101,106,105,101,100],
[113,0,110,108,103,111,112,110,96],
[114,100,0,116,113,115,110,116,102],
[99,102,94,0,87,103,97,90,90],
[109,107,97,123,0,114,101,103,104],
[104,99,95,107,96,0,93,103,92],
[105,98,100,113,109,117,0,100,106],
[109,100,94,120,107,107,110,0,107],
[110,114,108,120,106,118,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,98,93,97,81,98,94,105],
[106,0,106,104,100,102,109,100,111],
[112,104,0,105,106,109,104,95,107],
[117,106,105,0,110,109,109,115,110],
[113,110,104,100,0,93,104,102,102],
[129,108,101,101,117,0,114,105,108],
[112,101,106,101,106,96,0,94,106],
[116,110,115,95,108,105,116,0,115],
[105,99,103,100,108,102,104,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,116,104,110,97,101,104],
[99,0,124,121,112,110,98,101,103],
[89,86,0,102,86,92,83,92,83],
[94,89,108,0,97,105,92,99,99],
[106,98,124,113,0,111,105,116,96],
[100,100,118,105,99,0,99,103,111],
[113,112,127,118,105,111,0,101,103],
[109,109,118,111,94,107,109,0,104],
[106,107,127,111,114,99,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,136,102,124,130,121,123],
[100,0,103,129,115,115,125,111,121],
[93,107,0,131,112,114,112,114,117],
[74,81,79,0,94,89,99,94,90],
[108,95,98,116,0,114,121,106,112],
[86,95,96,121,96,0,108,117,94],
[80,85,98,111,89,102,0,108,98],
[89,99,96,116,104,93,102,0,100],
[87,89,93,120,98,116,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,120,111,108,113,93,144,118],
[98,0,126,82,122,91,92,124,104],
[90,84,0,85,75,75,80,107,91],
[99,128,125,0,99,121,138,153,100],
[102,88,135,111,0,95,120,121,116],
[97,119,135,89,115,0,102,149,108],
[117,118,130,72,90,108,0,132,82],
[66,86,103,57,89,61,78,0,97],
[92,106,119,110,94,102,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,92,99,97,95,103,100,106],
[84,0,90,90,99,95,96,101,89],
[118,120,0,108,105,103,113,92,111],
[111,120,102,0,113,107,108,105,113],
[113,111,105,97,0,98,111,95,103],
[115,115,107,103,112,0,118,97,111],
[107,114,97,102,99,92,0,100,96],
[110,109,118,105,115,113,110,0,110],
[104,121,99,97,107,99,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,110,112,124,115,115,105],
[96,0,107,104,111,115,105,100,97],
[101,103,0,107,112,122,110,108,111],
[100,106,103,0,111,123,102,102,97],
[98,99,98,99,0,113,107,108,102],
[86,95,88,87,97,0,97,86,88],
[95,105,100,108,103,113,0,107,104],
[95,110,102,108,102,124,103,0,101],
[105,113,99,113,108,122,106,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,89,88,88,87,99,100],
[114,0,99,110,109,99,106,97,98],
[111,111,0,102,112,100,98,103,115],
[121,100,108,0,103,112,97,105,110],
[122,101,98,107,0,95,96,103,98],
[122,111,110,98,115,0,96,115,109],
[123,104,112,113,114,114,0,109,111],
[111,113,107,105,107,95,101,0,101],
[110,112,95,100,112,101,99,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,100,92,87,97,94,104,117],
[116,0,107,103,98,113,115,111,118],
[110,103,0,93,92,86,102,103,108],
[118,107,117,0,94,102,114,115,110],
[123,112,118,116,0,103,113,109,130],
[113,97,124,108,107,0,100,111,131],
[116,95,108,96,97,110,0,109,135],
[106,99,107,95,101,99,101,0,99],
[93,92,102,100,80,79,75,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,116,113,114,95,115,108],
[106,0,109,112,109,110,103,101,115],
[93,101,0,109,102,107,99,103,99],
[94,98,101,0,101,108,95,103,110],
[97,101,108,109,0,118,96,100,112],
[96,100,103,102,92,0,98,100,95],
[115,107,111,115,114,112,0,101,118],
[95,109,107,107,110,110,109,0,94],
[102,95,111,100,98,115,92,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,123,110,118,103,108,105],
[94,0,97,105,101,122,102,91,118],
[100,113,0,105,130,121,113,101,118],
[87,105,105,0,105,139,97,100,112],
[100,109,80,105,0,108,109,99,116],
[92,88,89,71,102,0,82,67,104],
[107,108,97,113,101,128,0,92,114],
[102,119,109,110,111,143,118,0,106],
[105,92,92,98,94,106,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,96,109,104,82,132,107,103],
[105,0,118,104,118,107,119,107,103],
[114,92,0,100,103,84,112,104,104],
[101,106,110,0,103,98,118,97,98],
[106,92,107,107,0,94,122,92,87],
[128,103,126,112,116,0,121,106,112],
[78,91,98,92,88,89,0,105,83],
[103,103,106,113,118,104,105,0,108],
[107,107,106,112,123,98,127,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,93,100,105,101,106,97,97],
[106,0,99,104,91,94,104,100,93],
[117,111,0,109,114,105,117,119,104],
[110,106,101,0,109,108,109,107,99],
[105,119,96,101,0,109,115,106,96],
[109,116,105,102,101,0,117,107,108],
[104,106,93,101,95,93,0,97,97],
[113,110,91,103,104,103,113,0,99],
[113,117,106,111,114,102,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,102,99,110,100,118,110],
[104,0,105,106,101,106,109,106,108],
[101,105,0,104,96,106,88,98,87],
[108,104,106,0,96,110,99,109,102],
[111,109,114,114,0,118,105,99,111],
[100,104,104,100,92,0,94,106,98],
[110,101,122,111,105,116,0,112,101],
[92,104,112,101,111,104,98,0,106],
[100,102,123,108,99,112,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,113,118,138,102,116,93,138],
[61,0,107,113,98,77,98,88,115],
[97,103,0,97,116,100,117,88,124],
[92,97,113,0,115,81,130,65,121],
[72,112,94,95,0,91,113,108,116],
[108,133,110,129,119,0,101,105,126],
[94,112,93,80,97,109,0,94,110],
[117,122,122,145,102,105,116,0,145],
[72,95,86,89,94,84,100,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,114,98,104,110,98,113],
[102,0,93,103,98,91,97,106,103],
[108,117,0,113,107,114,108,102,111],
[96,107,97,0,96,94,102,104,108],
[112,112,103,114,0,102,106,113,118],
[106,119,96,116,108,0,105,109,116],
[100,113,102,108,104,105,0,113,119],
[112,104,108,106,97,101,97,0,117],
[97,107,99,102,92,94,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,93,100,82,109,108,103],
[98,0,103,104,92,94,107,110,116],
[106,107,0,99,101,104,104,114,119],
[117,106,111,0,110,111,98,125,120],
[110,118,109,100,0,93,115,121,116],
[128,116,106,99,117,0,117,123,122],
[101,103,106,112,95,93,0,105,98],
[102,100,96,85,89,87,105,0,116],
[107,94,91,90,94,88,112,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,105,110,100,105,106,104],
[109,0,107,104,101,123,107,111,97],
[105,103,0,103,101,124,118,112,110],
[105,106,107,0,116,110,122,113,111],
[100,109,109,94,0,107,111,112,93],
[110,87,86,100,103,0,105,105,90],
[105,103,92,88,99,105,0,96,92],
[104,99,98,97,98,105,114,0,102],
[106,113,100,99,117,120,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,91,93,89,102,103,117,83],
[106,0,91,98,103,102,112,110,95],
[119,119,0,99,106,113,115,123,96],
[117,112,111,0,108,111,118,122,103],
[121,107,104,102,0,109,119,114,109],
[108,108,97,99,101,0,116,122,92],
[107,98,95,92,91,94,0,111,94],
[93,100,87,88,96,88,99,0,81],
[127,115,114,107,101,118,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,103,89,103,129,96,109],
[95,0,98,82,79,81,107,91,87],
[99,112,0,94,96,97,110,91,108],
[107,128,116,0,115,117,117,101,126],
[121,131,114,95,0,105,116,111,110],
[107,129,113,93,105,0,118,92,106],
[81,103,100,93,94,92,0,71,110],
[114,119,119,109,99,118,139,0,127],
[101,123,102,84,100,104,100,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,83,94,100,100,98,107,104],
[117,0,111,111,105,112,115,114,110],
[127,99,0,113,95,117,109,108,115],
[116,99,97,0,90,116,103,107,113],
[110,105,115,120,0,112,112,109,125],
[110,98,93,94,98,0,106,107,114],
[112,95,101,107,98,104,0,104,106],
[103,96,102,103,101,103,106,0,118],
[106,100,95,97,85,96,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,97,102,107,88,81,98,94],
[120,0,114,116,113,105,109,110,118],
[113,96,0,113,122,97,95,111,124],
[108,94,97,0,109,101,86,99,108],
[103,97,88,101,0,72,86,89,103],
[122,105,113,109,138,0,118,114,120],
[129,101,115,124,124,92,0,105,116],
[112,100,99,111,121,96,105,0,110],
[116,92,86,102,107,90,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,107,77,107,96,84,107,96],
[131,0,99,100,124,115,91,120,86],
[103,111,0,84,95,101,88,118,92],
[133,110,126,0,99,112,95,106,87],
[103,86,115,111,0,124,101,119,87],
[114,95,109,98,86,0,73,104,83],
[126,119,122,115,109,137,0,108,91],
[103,90,92,104,91,106,102,0,112],
[114,124,118,123,123,127,119,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,91,88,103,91,97,113],
[116,0,113,92,88,127,91,112,98],
[109,97,0,107,107,122,111,104,124],
[119,118,103,0,112,115,97,106,106],
[122,122,103,98,0,130,117,113,112],
[107,83,88,95,80,0,85,101,114],
[119,119,99,113,93,125,0,128,112],
[113,98,106,104,97,109,82,0,110],
[97,112,86,104,98,96,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,81,94,124,106,84,95,102],
[103,0,95,101,99,110,69,63,112],
[129,115,0,128,115,84,105,101,140],
[116,109,82,0,121,122,79,103,99],
[86,111,95,89,0,79,86,93,114],
[104,100,126,88,131,0,92,119,107],
[126,141,105,131,124,118,0,106,117],
[115,147,109,107,117,91,104,0,118],
[108,98,70,111,96,103,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,99,103,94,101,111,103,97],
[122,0,105,112,106,114,120,123,110],
[111,105,0,110,111,102,125,120,105],
[107,98,100,0,107,102,116,117,95],
[116,104,99,103,0,104,112,128,100],
[109,96,108,108,106,0,116,125,107],
[99,90,85,94,98,94,0,105,83],
[107,87,90,93,82,85,105,0,92],
[113,100,105,115,110,103,127,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,110,114,79,87,100,98],
[114,0,109,102,125,81,105,104,95],
[110,101,0,109,113,95,78,98,102],
[100,108,101,0,101,86,78,96,104],
[96,85,97,109,0,80,82,94,96],
[131,129,115,124,130,0,95,106,122],
[123,105,132,132,128,115,0,98,126],
[110,106,112,114,116,104,112,0,99],
[112,115,108,106,114,88,84,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,109,116,105,104,102,107],
[110,0,104,126,122,98,115,114,110],
[104,106,0,103,102,104,103,89,96],
[101,84,107,0,116,92,106,109,105],
[94,88,108,94,0,91,81,99,102],
[105,112,106,118,119,0,111,102,110],
[106,95,107,104,129,99,0,113,102],
[108,96,121,101,111,108,97,0,97],
[103,100,114,105,108,100,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,84,89,87,58,103,64,111],
[121,0,97,104,119,87,127,90,96],
[126,113,0,107,110,105,115,95,118],
[121,106,103,0,102,98,111,98,122],
[123,91,100,108,0,70,106,82,115],
[152,123,105,112,140,0,116,119,115],
[107,83,95,99,104,94,0,78,107],
[146,120,115,112,128,91,132,0,104],
[99,114,92,88,95,95,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,109,104,107,96,114,103,100],
[106,0,100,108,113,104,113,107,85],
[101,110,0,113,120,106,112,98,99],
[106,102,97,0,98,93,102,98,87],
[103,97,90,112,0,92,99,90,104],
[114,106,104,117,118,0,127,110,111],
[96,97,98,108,111,83,0,98,83],
[107,103,112,112,120,100,112,0,103],
[110,125,111,123,106,99,127,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,108,104,106,108,123,114],
[98,0,111,103,111,106,106,118,112],
[104,99,0,108,101,108,93,119,107],
[102,107,102,0,100,108,99,118,112],
[106,99,109,110,0,107,100,115,110],
[104,104,102,102,103,0,97,115,104],
[102,104,117,111,110,113,0,116,107],
[87,92,91,92,95,95,94,0,101],
[96,98,103,98,100,106,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,108,81,72,70,59,52,73],
[140,0,98,141,114,85,111,112,102],
[102,112,0,104,112,107,101,87,74],
[129,69,106,0,99,86,60,86,48],
[138,96,98,111,0,107,106,80,100],
[140,125,103,124,103,0,114,102,86],
[151,99,109,150,104,96,0,119,113],
[158,98,123,124,130,108,91,0,100],
[137,108,136,162,110,124,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,90,101,97,99,105,106],
[101,0,90,85,108,88,102,104,97],
[116,120,0,113,123,116,118,102,112],
[120,125,97,0,121,108,121,123,115],
[109,102,87,89,0,87,97,88,92],
[113,122,94,102,123,0,114,108,109],
[111,108,92,89,113,96,0,95,115],
[105,106,108,87,122,102,115,0,117],
[104,113,98,95,118,101,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,104,116,93,112,103,106,123],
[90,0,93,109,94,98,92,99,109],
[106,117,0,124,95,113,98,107,99],
[94,101,86,0,89,96,109,94,94],
[117,116,115,121,0,107,102,112,112],
[98,112,97,114,103,0,103,102,111],
[107,118,112,101,108,107,0,111,105],
[104,111,103,116,98,108,99,0,108],
[87,101,111,116,98,99,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,104,101,102,104,101,96],
[112,0,110,104,103,98,110,98,105],
[109,100,0,98,92,96,107,101,98],
[106,106,112,0,90,99,103,99,103],
[109,107,118,120,0,112,115,102,116],
[108,112,114,111,98,0,114,105,105],
[106,100,103,107,95,96,0,102,95],
[109,112,109,111,108,105,108,0,104],
[114,105,112,107,94,105,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,87,100,92,95,89,88,114],
[97,0,88,98,105,87,87,89,101],
[123,122,0,112,97,99,110,88,128],
[110,112,98,0,100,83,95,102,115],
[118,105,113,110,0,108,106,92,114],
[115,123,111,127,102,0,101,107,136],
[121,123,100,115,104,109,0,105,128],
[122,121,122,108,118,103,105,0,121],
[96,109,82,95,96,74,82,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,114,103,94,108,104,111],
[110,0,97,109,99,108,109,91,117],
[103,113,0,107,112,118,130,112,125],
[96,101,103,0,108,86,104,90,113],
[107,111,98,102,0,95,112,90,104],
[116,102,92,124,115,0,114,105,127],
[102,101,80,106,98,96,0,97,101],
[106,119,98,120,120,105,113,0,119],
[99,93,85,97,106,83,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,93,108,111,104,116,98],
[112,0,104,110,109,106,115,105,101],
[105,106,0,105,105,104,116,104,102],
[117,100,105,0,106,111,123,113,104],
[102,101,105,104,0,110,113,100,111],
[99,104,106,99,100,0,114,114,94],
[106,95,94,87,97,96,0,102,116],
[94,105,106,97,110,96,108,0,107],
[112,109,108,106,99,116,94,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,101,99,95,98,112,93],
[115,0,105,102,113,103,108,115,106],
[111,105,0,106,110,104,103,104,96],
[109,108,104,0,103,112,99,115,100],
[111,97,100,107,0,100,99,111,97],
[115,107,106,98,110,0,103,107,102],
[112,102,107,111,111,107,0,109,103],
[98,95,106,95,99,103,101,0,93],
[117,104,114,110,113,108,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,103,99,117,98,106,103],
[122,0,111,101,110,113,114,108,107],
[104,99,0,111,105,120,107,94,102],
[107,109,99,0,99,123,104,110,96],
[111,100,105,111,0,119,111,111,119],
[93,97,90,87,91,0,91,93,92],
[112,96,103,106,99,119,0,104,108],
[104,102,116,100,99,117,106,0,113],
[107,103,108,114,91,118,102,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,106,102,107,102,104,115,111],
[96,0,126,97,104,109,115,112,110],
[104,84,0,79,90,89,105,107,88],
[108,113,131,0,104,107,114,113,112],
[103,106,120,106,0,103,120,115,112],
[108,101,121,103,107,0,117,117,108],
[106,95,105,96,90,93,0,113,99],
[95,98,103,97,95,93,97,0,105],
[99,100,122,98,98,102,111,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,101,113,98,86,114,117],
[103,0,106,99,112,102,95,99,105],
[106,104,0,106,110,106,109,108,108],
[109,111,104,0,106,109,102,118,105],
[97,98,100,104,0,122,102,99,86],
[112,108,104,101,88,0,94,104,95],
[124,115,101,108,108,116,0,108,119],
[96,111,102,92,111,106,102,0,94],
[93,105,102,105,124,115,91,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,94,104,119,111,95,98],
[104,0,117,109,114,115,116,109,129],
[96,93,0,86,104,91,101,79,97],
[116,101,124,0,119,109,119,100,121],
[106,96,106,91,0,100,114,91,97],
[91,95,119,101,110,0,120,88,102],
[99,94,109,91,96,90,0,89,96],
[115,101,131,110,119,122,121,0,112],
[112,81,113,89,113,108,114,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,77,111,101,109,117,58],
[112,0,116,127,108,118,118,109,99],
[104,94,0,111,87,112,80,132,116],
[133,83,99,0,122,97,91,94,88],
[99,102,123,88,0,96,117,113,92],
[109,92,98,113,114,0,79,105,100],
[101,92,130,119,93,131,0,136,111],
[93,101,78,116,97,105,74,0,111],
[152,111,94,122,118,110,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,104,104,103,112,107,104],
[91,0,111,107,116,113,114,110,104],
[107,99,0,98,114,100,112,99,106],
[106,103,112,0,107,102,119,110,101],
[106,94,96,103,0,107,103,102,105],
[107,97,110,108,103,0,105,105,102],
[98,96,98,91,107,105,0,101,94],
[103,100,111,100,108,105,109,0,102],
[106,106,104,109,105,108,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,101,97,99,95,116,92],
[116,0,107,104,110,103,108,123,111],
[118,103,0,98,111,105,97,109,105],
[109,106,112,0,106,96,102,114,100],
[113,100,99,104,0,93,95,112,104],
[111,107,105,114,117,0,112,124,109],
[115,102,113,108,115,98,0,115,114],
[94,87,101,96,98,86,95,0,100],
[118,99,105,110,106,101,96,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,107,110,100,123,102,116,117],
[104,0,107,108,106,115,105,102,116],
[103,103,0,104,94,101,103,110,108],
[100,102,106,0,98,100,99,101,120],
[110,104,116,112,0,113,115,117,119],
[87,95,109,110,97,0,100,105,113],
[108,105,107,111,95,110,0,104,120],
[94,108,100,109,93,105,106,0,115],
[93,94,102,90,91,97,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,98,102,104,103,99,98],
[103,0,103,103,93,108,99,103,92],
[105,107,0,116,104,107,105,102,103],
[112,107,94,0,104,100,87,94,94],
[108,117,106,106,0,110,111,110,102],
[106,102,103,110,100,0,109,108,101],
[107,111,105,123,99,101,0,105,102],
[111,107,108,116,100,102,105,0,108],
[112,118,107,116,108,109,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,102,101,109,104,117,98,99],
[90,0,110,91,90,95,94,86,94],
[108,100,0,110,112,100,108,98,97],
[109,119,100,0,105,100,117,100,103],
[101,120,98,105,0,107,113,105,108],
[106,115,110,110,103,0,118,94,110],
[93,116,102,93,97,92,0,83,93],
[112,124,112,110,105,116,127,0,113],
[111,116,113,107,102,100,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,95,109,104,99,87,101],
[113,0,101,101,119,105,104,94,106],
[106,109,0,90,109,102,113,102,105],
[115,109,120,0,115,108,121,105,113],
[101,91,101,95,0,92,91,81,86],
[106,105,108,102,118,0,105,99,111],
[111,106,97,89,119,105,0,89,102],
[123,116,108,105,129,111,121,0,103],
[109,104,105,97,124,99,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,126,117,121,121,88,114,117],
[116,0,107,110,88,110,91,111,99],
[84,103,0,104,68,90,86,94,92],
[93,100,106,0,99,96,100,88,100],
[89,122,142,111,0,110,116,106,97],
[89,100,120,114,100,0,95,96,92],
[122,119,124,110,94,115,0,109,110],
[96,99,116,122,104,114,101,0,88],
[93,111,118,110,113,118,100,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,100,98,113,114,87,110],
[98,0,96,95,95,97,97,83,93],
[91,114,0,108,96,102,106,94,105],
[110,115,102,0,110,115,124,103,118],
[112,115,114,100,0,103,109,106,115],
[97,113,108,95,107,0,99,105,102],
[96,113,104,86,101,111,0,97,102],
[123,127,116,107,104,105,113,0,115],
[100,117,105,92,95,108,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,126,122,113,111,108,107,118],
[113,0,119,116,112,102,114,97,107],
[84,91,0,98,93,97,95,77,99],
[88,94,112,0,103,91,104,81,107],
[97,98,117,107,0,115,94,99,112],
[99,108,113,119,95,0,104,119,114],
[102,96,115,106,116,106,0,96,109],
[103,113,133,129,111,91,114,0,116],
[92,103,111,103,98,96,101,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,115,105,129,95,103,134,110],
[86,0,79,99,95,82,65,80,84],
[95,131,0,118,111,91,93,124,95],
[105,111,92,0,107,92,84,120,107],
[81,115,99,103,0,99,75,87,77],
[115,128,119,118,111,0,105,121,111],
[107,145,117,126,135,105,0,124,123],
[76,130,86,90,123,89,86,0,89],
[100,126,115,103,133,99,87,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,113,94,112,97,97,111],
[92,0,96,102,91,102,96,96,95],
[104,114,0,116,112,106,103,93,111],
[97,108,94,0,90,107,101,96,104],
[116,119,98,120,0,117,110,101,107],
[98,108,104,103,93,0,95,96,107],
[113,114,107,109,100,115,0,107,109],
[113,114,117,114,109,114,103,0,105],
[99,115,99,106,103,103,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,80,137,133,117,105,107,115],
[76,0,90,129,116,92,97,89,79],
[130,120,0,146,137,94,97,89,102],
[73,81,64,0,82,108,84,84,93],
[77,94,73,128,0,113,104,101,109],
[93,118,116,102,97,0,115,106,118],
[105,113,113,126,106,95,0,96,104],
[103,121,121,126,109,104,114,0,97],
[95,131,108,117,101,92,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,105,74,110,100,126,102],
[113,0,103,123,109,91,117,127,116],
[98,107,0,109,95,110,117,104,105],
[105,87,101,0,76,103,105,100,111],
[136,101,115,134,0,118,135,135,145],
[100,119,100,107,92,0,135,117,97],
[110,93,93,105,75,75,0,109,110],
[84,83,106,110,75,93,101,0,118],
[108,94,105,99,65,113,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,109,69,119,95,134,92],
[103,0,129,96,94,109,98,114,96],
[110,81,0,101,87,99,68,124,101],
[101,114,109,0,115,121,101,123,115],
[141,116,123,95,0,137,115,138,116],
[91,101,111,89,73,0,127,107,106],
[115,112,142,109,95,83,0,122,137],
[76,96,86,87,72,103,88,0,109],
[118,114,109,95,94,104,73,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,114,127,135,111,100,131,96],
[68,0,110,103,131,111,89,61,138],
[96,100,0,113,138,140,98,123,149],
[83,107,97,0,138,128,122,102,139],
[75,79,72,72,0,107,59,40,132],
[99,99,70,82,103,0,96,43,116],
[110,121,112,88,151,114,0,98,147],
[79,149,87,108,170,167,112,0,152],
[114,72,61,71,78,94,63,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,96,108,97,113,106,109],
[97,0,96,95,107,101,101,107,90],
[110,114,0,91,113,110,107,108,110],
[114,115,119,0,104,110,116,124,116],
[102,103,97,106,0,101,107,111,105],
[113,109,100,100,109,0,111,108,107],
[97,109,103,94,103,99,0,109,97],
[104,103,102,86,99,102,101,0,98],
[101,120,100,94,105,103,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,50,97,101,86,77,114,126,70],
[160,0,115,140,115,94,135,142,117],
[113,95,0,108,89,106,128,106,87],
[109,70,102,0,108,85,113,113,98],
[124,95,121,102,0,96,130,115,95],
[133,116,104,125,114,0,130,133,119],
[96,75,82,97,80,80,0,109,84],
[84,68,104,97,95,77,101,0,65],
[140,93,123,112,115,91,126,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,71,91,104,135,123,117,80],
[52,0,44,100,89,94,108,114,90],
[139,166,0,135,129,136,128,144,94],
[119,110,75,0,125,126,80,145,128],
[106,121,81,85,0,126,80,145,104],
[75,116,74,84,84,0,109,101,71],
[87,102,82,130,130,101,0,110,123],
[93,96,66,65,65,109,100,0,71],
[130,120,116,82,106,139,87,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,85,83,101,108,102,108],
[106,0,118,97,113,106,120,108,107],
[98,92,0,96,90,97,110,105,107],
[125,113,114,0,102,111,122,107,119],
[127,97,120,108,0,95,104,109,102],
[109,104,113,99,115,0,126,104,102],
[102,90,100,88,106,84,0,95,106],
[108,102,105,103,101,106,115,0,118],
[102,103,103,91,108,108,104,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,91,83,74,102,111,100,94],
[126,0,141,131,97,100,158,128,93],
[119,69,0,77,81,79,49,83,84],
[127,79,133,0,119,134,148,129,123],
[136,113,129,91,0,116,125,146,124],
[108,110,131,76,94,0,76,115,105],
[99,52,161,62,85,134,0,101,89],
[110,82,127,81,64,95,109,0,64],
[116,117,126,87,86,105,121,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,107,125,109,97,107,103],
[112,0,109,105,132,114,105,95,121],
[97,101,0,100,127,111,96,96,117],
[103,105,110,0,112,102,105,114,116],
[85,78,83,98,0,92,102,84,107],
[101,96,99,108,118,0,99,99,119],
[113,105,114,105,108,111,0,109,130],
[103,115,114,96,126,111,101,0,111],
[107,89,93,94,103,91,80,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,113,121,112,123,101,87,107],
[120,0,123,125,113,116,105,87,109],
[97,87,0,124,108,132,98,106,144],
[89,85,86,0,96,121,72,78,111],
[98,97,102,114,0,129,88,100,113],
[87,94,78,89,81,0,75,76,102],
[109,105,112,138,122,135,0,101,118],
[123,123,104,132,110,134,109,0,132],
[103,101,66,99,97,108,92,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,102,110,103,110,107,108],
[104,0,106,122,97,114,123,130,112],
[104,104,0,116,100,106,108,109,108],
[108,88,94,0,91,94,101,107,107],
[100,113,110,119,0,112,133,113,106],
[107,96,104,116,98,0,111,101,100],
[100,87,102,109,77,99,0,98,96],
[103,80,101,103,97,109,112,0,101],
[102,98,102,103,104,110,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,131,104,91,129,120,111,125],
[109,0,118,92,75,110,97,94,103],
[79,92,0,76,77,104,99,72,112],
[106,118,134,0,105,105,95,90,114],
[119,135,133,105,0,127,115,125,138],
[81,100,106,105,83,0,129,96,117],
[90,113,111,115,95,81,0,76,147],
[99,116,138,120,85,114,134,0,134],
[85,107,98,96,72,93,63,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,77,88,97,86,94,106,84],
[127,0,118,110,110,104,93,103,94],
[133,92,0,133,120,108,116,126,106],
[122,100,77,0,111,105,99,113,118],
[113,100,90,99,0,118,113,127,107],
[124,106,102,105,92,0,122,117,96],
[116,117,94,111,97,88,0,124,82],
[104,107,84,97,83,93,86,0,112],
[126,116,104,92,103,114,128,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,102,107,95,100,99,115],
[107,0,117,105,97,100,96,107,111],
[98,93,0,100,103,101,90,99,109],
[108,105,110,0,98,101,98,106,106],
[103,113,107,112,0,107,102,113,119],
[115,110,109,109,103,0,106,102,110],
[110,114,120,112,108,104,0,113,116],
[111,103,111,104,97,108,97,0,120],
[95,99,101,104,91,100,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,92,80,92,103,95,83,85],
[137,0,122,111,119,128,131,100,111],
[118,88,0,83,93,100,101,97,101],
[130,99,127,0,116,123,117,105,110],
[118,91,117,94,0,125,117,101,106],
[107,82,110,87,85,0,114,99,102],
[115,79,109,93,93,96,0,80,98],
[127,110,113,105,109,111,130,0,115],
[125,99,109,100,104,108,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,111,109,99,72,76,63,75],
[139,0,113,113,99,108,116,111,140],
[99,97,0,112,107,107,110,109,110],
[101,97,98,0,93,80,96,81,98],
[111,111,103,117,0,105,93,128,102],
[138,102,103,130,105,0,113,116,109],
[134,94,100,114,117,97,0,101,111],
[147,99,101,129,82,94,109,0,102],
[135,70,100,112,108,101,99,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,108,98,96,101,99,103,89],
[109,0,105,100,112,102,109,114,105],
[102,105,0,101,97,109,107,111,95],
[112,110,109,0,99,110,102,113,93],
[114,98,113,111,0,117,105,119,90],
[109,108,101,100,93,0,105,120,93],
[111,101,103,108,105,105,0,124,98],
[107,96,99,97,91,90,86,0,80],
[121,105,115,117,120,117,112,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,107,110,108,108,108,104],
[101,0,112,107,119,109,117,97,112],
[98,98,0,98,111,108,102,103,96],
[103,103,112,0,119,113,113,108,108],
[100,91,99,91,0,92,100,93,101],
[102,101,102,97,118,0,107,102,103],
[102,93,108,97,110,103,0,89,97],
[102,113,107,102,117,108,121,0,114],
[106,98,114,102,109,107,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,67,116,84,117,132,108,124],
[108,0,108,110,71,107,116,91,116],
[143,102,0,126,81,113,129,118,132],
[94,100,84,0,88,62,94,74,94],
[126,139,129,122,0,97,135,103,84],
[93,103,97,148,113,0,99,105,141],
[78,94,81,116,75,111,0,120,116],
[102,119,92,136,107,105,90,0,112],
[86,94,78,116,126,69,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,127,106,109,122,120,111,125],
[106,0,109,87,114,123,109,99,105],
[83,101,0,93,95,104,108,98,98],
[104,123,117,0,122,126,123,124,126],
[101,96,115,88,0,113,108,103,100],
[88,87,106,84,97,0,101,99,98],
[90,101,102,87,102,109,0,104,97],
[99,111,112,86,107,111,106,0,100],
[85,105,112,84,110,112,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,109,100,106,106,111,102,109],
[118,0,132,105,126,105,109,106,114],
[101,78,0,104,102,88,92,102,103],
[110,105,106,0,111,107,112,105,104],
[104,84,108,99,0,98,104,96,95],
[104,105,122,103,112,0,101,112,112],
[99,101,118,98,106,109,0,96,117],
[108,104,108,105,114,98,114,0,116],
[101,96,107,106,115,98,93,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,112,115,109,100,116,111],
[93,0,91,105,110,93,104,105,93],
[104,119,0,108,121,118,97,113,103],
[98,105,102,0,111,104,108,107,104],
[95,100,89,99,0,100,104,103,99],
[101,117,92,106,110,0,106,113,106],
[110,106,113,102,106,104,0,113,116],
[94,105,97,103,107,97,97,0,90],
[99,117,107,106,111,104,94,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,102,128,108,68,42,147,102],
[142,0,142,142,82,26,82,142,184],
[108,68,0,150,108,68,150,150,150],
[82,68,60,0,108,68,124,108,105],
[102,128,102,102,0,128,42,121,102],
[142,184,142,142,82,0,124,142,184],
[168,128,60,86,168,86,0,105,165],
[63,68,60,102,89,68,105,0,105],
[108,26,60,105,108,26,45,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,108,117,102,107,113,110],
[94,0,105,93,114,100,99,119,88],
[110,105,0,101,113,107,92,119,88],
[102,117,109,0,110,95,98,113,106],
[93,96,97,100,0,101,92,100,97],
[108,110,103,115,109,0,106,116,91],
[103,111,118,112,118,104,0,116,96],
[97,91,91,97,110,94,94,0,88],
[100,122,122,104,113,119,114,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,94,107,105,99,101,102],
[113,0,103,110,104,93,102,119,105],
[104,107,0,112,103,95,93,115,106],
[116,100,98,0,105,101,98,110,102],
[103,106,107,105,0,95,99,105,107],
[105,117,115,109,115,0,107,111,116],
[111,108,117,112,111,103,0,119,112],
[109,91,95,100,105,99,91,0,101],
[108,105,104,108,103,94,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,155,173,138,121,100,147,122,123],
[55,0,174,71,54,53,104,67,93],
[37,36,0,47,43,35,49,49,118],
[72,139,163,0,91,119,128,109,109],
[89,156,167,119,0,152,165,166,119],
[110,157,175,91,58,0,95,104,124],
[63,106,161,82,45,115,0,133,133],
[88,143,161,101,44,106,77,0,107],
[87,117,92,101,91,86,77,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,129,85,124,99,101,107,144],
[76,0,113,75,95,105,88,86,93],
[81,97,0,65,101,100,86,78,137],
[125,135,145,0,108,100,113,130,111],
[86,115,109,102,0,93,111,101,96],
[111,105,110,110,117,0,125,115,109],
[109,122,124,97,99,85,0,115,107],
[103,124,132,80,109,95,95,0,110],
[66,117,73,99,114,101,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,105,119,106,106,106,107],
[114,0,119,115,120,114,107,103,106],
[104,91,0,103,111,125,98,111,112],
[105,95,107,0,114,117,106,101,121],
[91,90,99,96,0,103,89,99,96],
[104,96,85,93,107,0,95,94,110],
[104,103,112,104,121,115,0,107,108],
[104,107,99,109,111,116,103,0,118],
[103,104,98,89,114,100,102,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,117,129,109,94,127,114],
[95,0,100,107,87,74,88,111,100],
[102,110,0,110,107,99,85,117,101],
[93,103,100,0,95,94,94,111,90],
[81,123,103,115,0,91,98,122,108],
[101,136,111,116,119,0,114,133,123],
[116,122,125,116,112,96,0,110,104],
[83,99,93,99,88,77,100,0,91],
[96,110,109,120,102,87,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,102,102,107,98,100,110],
[111,0,103,112,101,119,100,101,115],
[108,107,0,118,104,115,108,107,130],
[108,98,92,0,107,113,100,104,114],
[108,109,106,103,0,115,101,104,122],
[103,91,95,97,95,0,96,97,118],
[112,110,102,110,109,114,0,103,109],
[110,109,103,106,106,113,107,0,125],
[100,95,80,96,88,92,101,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,97,104,114,106,101,102,94],
[106,0,114,113,123,114,108,112,98],
[113,96,0,111,103,113,108,94,95],
[106,97,99,0,103,81,97,91,92],
[96,87,107,107,0,107,100,95,92],
[104,96,97,129,103,0,100,98,105],
[109,102,102,113,110,110,0,98,93],
[108,98,116,119,115,112,112,0,108],
[116,112,115,118,118,105,117,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,93,90,109,117,108,109],
[111,0,90,94,104,107,106,107,115],
[96,120,0,91,104,98,106,112,136],
[117,116,119,0,99,111,111,108,144],
[120,106,106,111,0,101,90,100,122],
[101,103,112,99,109,0,92,103,119],
[93,104,104,99,120,118,0,94,107],
[102,103,98,102,110,107,116,0,114],
[101,95,74,66,88,91,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,105,102,104,109,96,99],
[111,0,112,110,105,109,126,110,122],
[102,98,0,103,107,111,104,104,109],
[105,100,107,0,99,97,120,98,113],
[108,105,103,111,0,113,120,108,115],
[106,101,99,113,97,0,102,91,97],
[101,84,106,90,90,108,0,87,84],
[114,100,106,112,102,119,123,0,111],
[111,88,101,97,95,113,126,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,106,109,95,108,95,108],
[96,0,99,107,91,107,106,100,87],
[107,111,0,107,102,113,109,115,103],
[104,103,103,0,99,99,117,114,96],
[101,119,108,111,0,110,112,123,107],
[115,103,97,111,100,0,101,118,102],
[102,104,101,93,98,109,0,104,106],
[115,110,95,96,87,92,106,0,98],
[102,123,107,114,103,108,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,105,90,96,98,114,104],
[99,0,111,92,87,93,96,106,109],
[98,99,0,103,95,94,108,106,114],
[105,118,107,0,104,97,115,125,114],
[120,123,115,106,0,103,113,126,115],
[114,117,116,113,107,0,105,118,121],
[112,114,102,95,97,105,0,119,98],
[96,104,104,85,84,92,91,0,103],
[106,101,96,96,95,89,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,103,101,108,101,123,112],
[105,0,102,97,102,105,115,107,102],
[105,108,0,111,105,107,109,112,103],
[107,113,99,0,106,120,121,115,117],
[109,108,105,104,0,100,118,116,116],
[102,105,103,90,110,0,105,106,102],
[109,95,101,89,92,105,0,112,108],
[87,103,98,95,94,104,98,0,95],
[98,108,107,93,94,108,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,120,100,118,110,105,105],
[104,0,108,106,98,115,91,100,104],
[96,102,0,110,101,105,106,105,107],
[90,104,100,0,98,102,95,107,96],
[110,112,109,112,0,106,109,113,104],
[92,95,105,108,104,0,99,103,103],
[100,119,104,115,101,111,0,114,105],
[105,110,105,103,97,107,96,0,110],
[105,106,103,114,106,107,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,84,100,114,112,107,111,112],
[118,0,97,103,111,113,119,109,109],
[126,113,0,102,117,114,119,120,109],
[110,107,108,0,98,98,113,99,128],
[96,99,93,112,0,96,97,107,106],
[98,97,96,112,114,0,119,109,111],
[103,91,91,97,113,91,0,101,110],
[99,101,90,111,103,101,109,0,119],
[98,101,101,82,104,99,100,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,105,123,98,99,98,110],
[107,0,88,116,124,103,95,110,112],
[96,122,0,100,114,100,105,104,109],
[105,94,110,0,124,105,102,102,113],
[87,86,96,86,0,88,84,87,91],
[112,107,110,105,122,0,97,105,115],
[111,115,105,108,126,113,0,102,102],
[112,100,106,108,123,105,108,0,107],
[100,98,101,97,119,95,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,103,115,84,107,133,88,106],
[70,0,66,100,94,90,123,90,99],
[107,144,0,122,111,135,116,94,101],
[95,110,88,0,110,117,115,102,91],
[126,116,99,100,0,141,117,111,96],
[103,120,75,93,69,0,122,92,93],
[77,87,94,95,93,88,0,90,90],
[122,120,116,108,99,118,120,0,100],
[104,111,109,119,114,117,120,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,94,105,103,96,95,102],
[112,0,112,105,109,116,110,111,109],
[105,98,0,109,111,111,95,98,95],
[116,105,101,0,113,116,104,102,110],
[105,101,99,97,0,100,101,87,92],
[107,94,99,94,110,0,104,105,95],
[114,100,115,106,109,106,0,99,105],
[115,99,112,108,123,105,111,0,112],
[108,101,115,100,118,115,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,111,94,107,92,113,98],
[115,0,112,105,104,103,107,116,116],
[107,98,0,107,113,111,98,119,101],
[99,105,103,0,105,105,95,107,103],
[116,106,97,105,0,113,94,118,101],
[103,107,99,105,97,0,97,106,113],
[118,103,112,115,116,113,0,120,110],
[97,94,91,103,92,104,90,0,106],
[112,94,109,107,109,97,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,118,110,100,103,109,105,115],
[117,0,93,82,105,103,99,95,110],
[92,117,0,90,117,104,125,121,113],
[100,128,120,0,118,118,125,99,121],
[110,105,93,92,0,93,98,99,119],
[107,107,106,92,117,0,114,103,115],
[101,111,85,85,112,96,0,90,113],
[105,115,89,111,111,107,120,0,98],
[95,100,97,89,91,95,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,118,103,136,100,121,120,123],
[91,0,101,116,112,117,105,97,90],
[92,109,0,107,127,82,110,103,103],
[107,94,103,0,122,94,88,101,105],
[74,98,83,88,0,87,90,71,85],
[110,93,128,116,123,0,113,96,102],
[89,105,100,122,120,97,0,86,93],
[90,113,107,109,139,114,124,0,114],
[87,120,107,105,125,108,117,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,91,97,109,116,77,95,123],
[78,0,71,90,89,87,60,73,119],
[119,139,0,114,146,108,89,105,134],
[113,120,96,0,116,129,98,92,131],
[101,121,64,94,0,105,112,109,110],
[94,123,102,81,105,0,121,96,124],
[133,150,121,112,98,89,0,91,133],
[115,137,105,118,101,114,119,0,152],
[87,91,76,79,100,86,77,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,99,94,95,96,102,95],
[109,0,109,96,109,100,100,110,98],
[104,101,0,91,91,92,87,113,94],
[111,114,119,0,107,106,103,107,106],
[116,101,119,103,0,93,106,109,106],
[115,110,118,104,117,0,90,124,113],
[114,110,123,107,104,120,0,113,110],
[108,100,97,103,101,86,97,0,105],
[115,112,116,104,104,97,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,94,110,106,110,119,113],
[97,0,103,80,111,116,101,127,105],
[96,107,0,86,106,100,107,114,100],
[116,130,124,0,105,111,116,127,105],
[100,99,104,105,0,112,101,104,88],
[104,94,110,99,98,0,103,110,89],
[100,109,103,94,109,107,0,123,98],
[91,83,96,83,106,100,87,0,94],
[97,105,110,105,122,121,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,93,120,124,90,128,106,122],
[123,0,98,114,101,91,125,110,117],
[117,112,0,109,121,100,109,131,112],
[90,96,101,0,118,102,112,84,114],
[86,109,89,92,0,85,125,83,109],
[120,119,110,108,125,0,127,96,112],
[82,85,101,98,85,83,0,60,112],
[104,100,79,126,127,114,150,0,121],
[88,93,98,96,101,98,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,100,81,86,99,100,105],
[105,0,106,86,85,82,97,89,92],
[99,104,0,87,93,97,78,82,84],
[110,124,123,0,100,111,111,119,130],
[129,125,117,110,0,125,110,111,105],
[124,128,113,99,85,0,102,93,94],
[111,113,132,99,100,108,0,97,88],
[110,121,128,91,99,117,113,0,89],
[105,118,126,80,105,116,122,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,101,109,107,105,124,113],
[104,0,105,108,108,107,110,114,111],
[101,105,0,99,107,101,100,118,106],
[109,102,111,0,111,101,104,120,116],
[101,102,103,99,0,102,92,119,108],
[103,103,109,109,108,0,109,124,107],
[105,100,110,106,118,101,0,131,111],
[86,96,92,90,91,86,79,0,98],
[97,99,104,94,102,103,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,93,99,95,107,112,114,95],
[98,0,92,98,101,97,109,101,99],
[117,118,0,107,104,102,112,113,90],
[111,112,103,0,112,115,105,117,106],
[115,109,106,98,0,95,97,103,94],
[103,113,108,95,115,0,103,102,97],
[98,101,98,105,113,107,0,102,107],
[96,109,97,93,107,108,108,0,88],
[115,111,120,104,116,113,103,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,127,103,98,98,98,117,103],
[106,0,116,101,99,90,98,90,99],
[83,94,0,88,101,76,83,108,63],
[107,109,122,0,108,100,111,111,93],
[112,111,109,102,0,111,117,106,122],
[112,120,134,110,99,0,121,110,113],
[112,112,127,99,93,89,0,104,104],
[93,120,102,99,104,100,106,0,104],
[107,111,147,117,88,97,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,104,109,119,95,108,115,96],
[111,0,122,111,109,105,123,116,121],
[106,88,0,103,97,93,93,113,91],
[101,99,107,0,115,104,92,119,83],
[91,101,113,95,0,87,92,108,90],
[115,105,117,106,123,0,123,126,122],
[102,87,117,118,118,87,0,109,90],
[95,94,97,91,102,84,101,0,102],
[114,89,119,127,120,88,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,110,91,99,91,98,107,91],
[104,0,104,101,103,97,105,123,83],
[100,106,0,98,102,99,100,111,95],
[119,109,112,0,108,81,108,143,99],
[111,107,108,102,0,91,88,131,102],
[119,113,111,129,119,0,100,106,110],
[112,105,110,102,122,110,0,127,97],
[103,87,99,67,79,104,83,0,71],
[119,127,115,111,108,100,113,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,113,117,119,121,113,114],
[113,0,105,114,120,115,111,121,115],
[109,105,0,118,114,110,115,131,108],
[97,96,92,0,109,102,101,111,101],
[93,90,96,101,0,106,106,110,98],
[91,95,100,108,104,0,101,115,104],
[89,99,95,109,104,109,0,112,111],
[97,89,79,99,100,95,98,0,96],
[96,95,102,109,112,106,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,103,95,121,108,80,102],
[108,0,111,103,117,119,98,107,99],
[94,99,0,108,100,112,95,92,85],
[107,107,102,0,104,114,119,98,108],
[115,93,110,106,0,111,124,104,89],
[89,91,98,96,99,0,105,92,89],
[102,112,115,91,86,105,0,105,110],
[130,103,118,112,106,118,105,0,117],
[108,111,125,102,121,121,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,113,113,107,96,111,101],
[113,0,122,118,101,113,110,110,115],
[91,88,0,97,88,116,91,84,101],
[97,92,113,0,98,103,108,94,99],
[97,109,122,112,0,102,106,113,111],
[103,97,94,107,108,0,96,96,110],
[114,100,119,102,104,114,0,95,119],
[99,100,126,116,97,114,115,0,122],
[109,95,109,111,99,100,91,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,106,106,106,96,107,112],
[109,0,98,114,103,110,101,108,105],
[101,112,0,122,114,97,103,107,112],
[104,96,88,0,107,91,100,106,98],
[104,107,96,103,0,103,107,103,104],
[104,100,113,119,107,0,104,113,114],
[114,109,107,110,103,106,0,107,111],
[103,102,103,104,107,97,103,0,111],
[98,105,98,112,106,96,99,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,110,99,109,102,106,109,104],
[126,0,115,112,120,104,107,118,107],
[100,95,0,89,108,105,99,102,95],
[111,98,121,0,110,111,120,123,114],
[101,90,102,100,0,91,99,103,86],
[108,106,105,99,119,0,102,109,105],
[104,103,111,90,111,108,0,106,102],
[101,92,108,87,107,101,104,0,96],
[106,103,115,96,124,105,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,104,117,108,101,116,116],
[97,0,98,110,110,122,113,109,103],
[98,112,0,117,104,110,90,127,106],
[106,100,93,0,95,124,88,116,106],
[93,100,106,115,0,120,104,111,123],
[102,88,100,86,90,0,83,112,113],
[109,97,120,122,106,127,0,118,117],
[94,101,83,94,99,98,92,0,106],
[94,107,104,104,87,97,93,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,139,114,100,155,66,89,102],
[59,0,142,139,109,148,54,90,28],
[71,68,0,127,122,125,74,84,54],
[96,71,83,0,116,135,60,94,79],
[110,101,88,94,0,133,94,96,59],
[55,62,85,75,77,0,41,70,44],
[144,156,136,150,116,169,0,99,111],
[121,120,126,116,114,140,111,0,62],
[108,182,156,131,151,166,99,148,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,103,107,109,101,112,103,97],
[118,0,120,134,117,100,118,104,127],
[107,90,0,114,101,94,117,113,90],
[103,76,96,0,108,102,105,91,101],
[101,93,109,102,0,105,101,85,100],
[109,110,116,108,105,0,91,92,123],
[98,92,93,105,109,119,0,95,111],
[107,106,97,119,125,118,115,0,90],
[113,83,120,109,110,87,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,100,129,168,66,95,93,127],
[158,0,170,103,156,196,172,210,170],
[110,40,0,69,168,93,150,160,168],
[81,107,141,0,154,107,123,148,129],
[42,54,42,56,0,40,56,81,40],
[144,14,117,103,170,0,172,210,156],
[115,38,60,87,154,38,0,160,87],
[117,0,50,62,129,0,50,0,48],
[83,40,42,81,170,54,123,162,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,81,91,124,103,80,100],
[95,0,107,73,69,114,98,64,71],
[100,103,0,72,70,115,113,57,96],
[129,137,138,0,99,141,150,132,117],
[119,141,140,111,0,148,129,99,120],
[86,96,95,69,62,0,104,70,78],
[107,112,97,60,81,106,0,83,82],
[130,146,153,78,111,140,127,0,97],
[110,139,114,93,90,132,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,110,107,100,105,97,105],
[109,0,106,103,103,95,98,92,106],
[108,104,0,110,108,110,107,109,103],
[100,107,100,0,113,105,108,96,111],
[103,107,102,97,0,98,104,100,104],
[110,115,100,105,112,0,102,106,107],
[105,112,103,102,106,108,0,99,114],
[113,118,101,114,110,104,111,0,118],
[105,104,107,99,106,103,96,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,100,121,103,117,105,99,109],
[109,0,101,119,102,111,106,104,111],
[110,109,0,119,109,111,119,101,105],
[89,91,91,0,90,102,104,90,86],
[107,108,101,120,0,111,102,98,97],
[93,99,99,108,99,0,105,100,82],
[105,104,91,106,108,105,0,85,83],
[111,106,109,120,112,110,125,0,103],
[101,99,105,124,113,128,127,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,95,93,81,87,135,79],
[94,0,105,106,101,99,81,115,114],
[96,105,0,98,56,104,89,132,59],
[115,104,112,0,93,92,97,125,103],
[117,109,154,117,0,120,91,129,104],
[129,111,106,118,90,0,87,127,100],
[123,129,121,113,119,123,0,145,96],
[75,95,78,85,81,83,65,0,64],
[131,96,151,107,106,110,114,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,113,107,106,101,121,127],
[94,0,82,97,95,91,101,117,114],
[109,128,0,114,94,101,110,118,120],
[97,113,96,0,111,99,116,118,111],
[103,115,116,99,0,105,113,116,110],
[104,119,109,111,105,0,123,107,107],
[109,109,100,94,97,87,0,98,108],
[89,93,92,92,94,103,112,0,101],
[83,96,90,99,100,103,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,94,98,116,121,119,96,99],
[112,0,115,105,121,124,126,110,113],
[116,95,0,112,114,114,116,107,94],
[112,105,98,0,105,124,96,100,115],
[94,89,96,105,0,112,105,105,89],
[89,86,96,86,98,0,104,100,93],
[91,84,94,114,105,106,0,102,98],
[114,100,103,110,105,110,108,0,98],
[111,97,116,95,121,117,112,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,97,90,92,94,106,92],
[104,0,93,99,94,82,82,96,97],
[115,117,0,118,113,116,100,122,124],
[113,111,92,0,103,103,96,106,103],
[120,116,97,107,0,106,97,103,108],
[118,128,94,107,104,0,113,104,105],
[116,128,110,114,113,97,0,118,112],
[104,114,88,104,107,106,92,0,93],
[118,113,86,107,102,105,98,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,87,96,111,134,130,118,109],
[95,0,125,141,129,137,157,154,154],
[123,85,0,123,134,126,137,124,122],
[114,69,87,0,130,110,127,134,125],
[99,81,76,80,0,95,85,79,86],
[76,73,84,100,115,0,102,85,109],
[80,53,73,83,125,108,0,119,82],
[92,56,86,76,131,125,91,0,98],
[101,56,88,85,124,101,128,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,92,104,108,122,93,103,103],
[123,0,87,89,112,131,115,112,91],
[118,123,0,122,132,132,113,113,104],
[106,121,88,0,108,125,113,119,114],
[102,98,78,102,0,99,95,98,102],
[88,79,78,85,111,0,85,104,76],
[117,95,97,97,115,125,0,106,105],
[107,98,97,91,112,106,104,0,84],
[107,119,106,96,108,134,105,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,84,83,113,94,120,89,106],
[83,0,78,83,79,91,88,98,105],
[126,132,0,110,105,90,123,85,130],
[127,127,100,0,114,112,97,98,119],
[97,131,105,96,0,112,108,102,112],
[116,119,120,98,98,0,108,106,115],
[90,122,87,113,102,102,0,99,115],
[121,112,125,112,108,104,111,0,105],
[104,105,80,91,98,95,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,94,87,119,100,105,99,111],
[125,0,81,85,128,120,99,104,123],
[116,129,0,102,129,114,99,88,118],
[123,125,108,0,124,122,95,118,119],
[91,82,81,86,0,96,89,61,99],
[110,90,96,88,114,0,115,124,126],
[105,111,111,115,121,95,0,103,112],
[111,106,122,92,149,86,107,0,121],
[99,87,92,91,111,84,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,96,77,108,90,110,114,120],
[115,0,124,108,128,97,125,124,122],
[114,86,0,78,105,85,106,93,107],
[133,102,132,0,129,122,103,130,130],
[102,82,105,81,0,89,94,95,103],
[120,113,125,88,121,0,112,115,119],
[100,85,104,107,116,98,0,114,108],
[96,86,117,80,115,95,96,0,107],
[90,88,103,80,107,91,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,100,93,99,110,109,109],
[103,0,97,100,98,104,109,109,104],
[114,113,0,106,110,100,124,109,105],
[110,110,104,0,98,106,111,115,108],
[117,112,100,112,0,107,116,120,111],
[111,106,110,104,103,0,112,111,109],
[100,101,86,99,94,98,0,110,97],
[101,101,101,95,90,99,100,0,95],
[101,106,105,102,99,101,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,103,110,116,101,116,113],
[109,0,114,95,99,102,85,109,107],
[100,96,0,95,99,109,90,109,103],
[107,115,115,0,105,122,111,111,119],
[100,111,111,105,0,117,95,109,106],
[94,108,101,88,93,0,84,99,94],
[109,125,120,99,115,126,0,112,119],
[94,101,101,99,101,111,98,0,109],
[97,103,107,91,104,116,91,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,112,105,118,114,106,112],
[100,0,99,96,89,106,102,98,108],
[105,111,0,106,125,124,118,107,112],
[98,114,104,0,108,111,109,115,119],
[105,121,85,102,0,109,113,104,112],
[92,104,86,99,101,0,112,95,101],
[96,108,92,101,97,98,0,107,104],
[104,112,103,95,106,115,103,0,117],
[98,102,98,91,98,109,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,111,107,98,103,97,113],
[102,0,117,106,109,115,118,110,113],
[111,93,0,103,103,103,110,93,111],
[99,104,107,0,93,110,96,109,104],
[103,101,107,117,0,106,110,101,103],
[112,95,107,100,104,0,103,104,108],
[107,92,100,114,100,107,0,108,104],
[113,100,117,101,109,106,102,0,115],
[97,97,99,106,107,102,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,104,109,94,98,109,103],
[104,0,109,114,112,92,108,117,116],
[117,101,0,112,121,117,115,120,127],
[106,96,98,0,96,100,108,105,110],
[101,98,89,114,0,95,110,110,96],
[116,118,93,110,115,0,114,122,111],
[112,102,95,102,100,96,0,101,106],
[101,93,90,105,100,88,109,0,97],
[107,94,83,100,114,99,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,121,103,129,88,108,119,101],
[65,0,111,81,90,81,88,96,99],
[89,99,0,102,99,109,94,122,92],
[107,129,108,0,99,121,97,117,111],
[81,120,111,111,0,103,97,111,102],
[122,129,101,89,107,0,105,118,113],
[102,122,116,113,113,105,0,114,93],
[91,114,88,93,99,92,96,0,88],
[109,111,118,99,108,97,117,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,96,112,104,95,115,103,132],
[85,0,92,100,77,75,111,96,128],
[114,118,0,116,116,92,145,116,129],
[98,110,94,0,86,91,97,85,124],
[106,133,94,124,0,127,130,104,135],
[115,135,118,119,83,0,132,97,152],
[95,99,65,113,80,78,0,74,135],
[107,114,94,125,106,113,136,0,126],
[78,82,81,86,75,58,75,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,111,93,116,116,91,117],
[103,0,89,94,89,99,98,98,106],
[113,121,0,97,106,102,104,111,125],
[99,116,113,0,104,111,98,107,125],
[117,121,104,106,0,111,95,87,115],
[94,111,108,99,99,0,117,106,124],
[94,112,106,112,115,93,0,94,128],
[119,112,99,103,123,104,116,0,128],
[93,104,85,85,95,86,82,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,98,102,107,92,103,96,98],
[118,0,114,111,115,115,119,105,98],
[112,96,0,104,100,100,97,108,97],
[108,99,106,0,100,88,100,105,106],
[103,95,110,110,0,103,103,107,104],
[118,95,110,122,107,0,103,110,106],
[107,91,113,110,107,107,0,102,103],
[114,105,102,105,103,100,108,0,100],
[112,112,113,104,106,104,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,101,94,98,107,100,100],
[99,0,110,98,100,87,90,91,80],
[105,100,0,106,101,94,105,102,94],
[109,112,104,0,95,103,112,100,83],
[116,110,109,115,0,105,103,95,90],
[112,123,116,107,105,0,121,104,102],
[103,120,105,98,107,89,0,103,105],
[110,119,108,110,115,106,107,0,89],
[110,130,116,127,120,108,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,100,116,113,103,123,102,113],
[96,0,91,106,97,93,112,104,102],
[110,119,0,116,124,104,110,108,116],
[94,104,94,0,99,91,107,105,103],
[97,113,86,111,0,95,103,98,105],
[107,117,106,119,115,0,111,97,113],
[87,98,100,103,107,99,0,96,116],
[108,106,102,105,112,113,114,0,114],
[97,108,94,107,105,97,94,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,127,127,119,120,143,105,120],
[105,0,119,128,118,119,132,119,113],
[83,91,0,91,75,92,103,92,87],
[83,82,119,0,97,95,122,100,98],
[91,92,135,113,0,107,132,92,106],
[90,91,118,115,103,0,129,85,116],
[67,78,107,88,78,81,0,83,87],
[105,91,118,110,118,125,127,0,129],
[90,97,123,112,104,94,123,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,115,95,105,112,103,104],
[106,0,99,106,109,98,103,95,105],
[106,111,0,120,116,102,115,109,115],
[95,104,90,0,99,100,95,104,96],
[115,101,94,111,0,97,114,103,109],
[105,112,108,110,113,0,109,105,112],
[98,107,95,115,96,101,0,99,94],
[107,115,101,106,107,105,111,0,104],
[106,105,95,114,101,98,116,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,103,94,104,108,106,97],
[102,0,117,117,91,107,102,103,98],
[108,93,0,110,103,109,108,99,112],
[107,93,100,0,105,97,96,94,104],
[116,119,107,105,0,113,98,100,101],
[106,103,101,113,97,0,111,98,103],
[102,108,102,114,112,99,0,105,107],
[104,107,111,116,110,112,105,0,101],
[113,112,98,106,109,107,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,119,98,101,113,113,109],
[110,0,115,109,109,101,107,104,105],
[101,95,0,96,97,83,95,109,97],
[91,101,114,0,92,95,99,113,101],
[112,101,113,118,0,112,109,113,110],
[109,109,127,115,98,0,100,112,108],
[97,103,115,111,101,110,0,110,106],
[97,106,101,97,97,98,100,0,99],
[101,105,113,109,100,102,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,92,101,97,114,111,121],
[113,0,108,111,102,110,111,120,117],
[116,102,0,103,105,116,125,115,111],
[118,99,107,0,112,106,112,102,109],
[109,108,105,98,0,110,108,106,111],
[113,100,94,104,100,0,105,109,114],
[96,99,85,98,102,105,0,96,106],
[99,90,95,108,104,101,114,0,101],
[89,93,99,101,99,96,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,111,110,105,116,116,110],
[96,0,107,102,110,114,112,102,99],
[99,103,0,97,104,99,106,99,97],
[99,108,113,0,108,109,113,109,101],
[100,100,106,102,0,101,106,117,105],
[105,96,111,101,109,0,110,103,101],
[94,98,104,97,104,100,0,116,98],
[94,108,111,101,93,107,94,0,94],
[100,111,113,109,105,109,112,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,119,104,113,112,113,100,112],
[108,0,121,102,124,106,115,94,114],
[91,89,0,93,108,102,111,97,108],
[106,108,117,0,120,127,122,105,108],
[97,86,102,90,0,108,97,99,109],
[98,104,108,83,102,0,96,87,113],
[97,95,99,88,113,114,0,98,110],
[110,116,113,105,111,123,112,0,109],
[98,96,102,102,101,97,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,93,92,81,94,100,91,91],
[127,0,103,119,102,120,110,102,111],
[117,107,0,120,108,125,104,110,115],
[118,91,90,0,81,111,108,100,108],
[129,108,102,129,0,125,113,117,111],
[116,90,85,99,85,0,90,97,94],
[110,100,106,102,97,120,0,108,99],
[119,108,100,110,93,113,102,0,98],
[119,99,95,102,99,116,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,97,109,96,102,108,102],
[107,0,100,107,113,99,101,104,100],
[109,110,0,110,122,98,95,93,96],
[113,103,100,0,114,105,99,100,102],
[101,97,88,96,0,84,102,89,99],
[114,111,112,105,126,0,113,114,114],
[108,109,115,111,108,97,0,101,98],
[102,106,117,110,121,96,109,0,111],
[108,110,114,108,111,96,112,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,99,92,102,101,97,105],
[106,0,110,101,94,102,96,99,96],
[107,100,0,97,89,101,100,113,97],
[111,109,113,0,97,101,108,113,95],
[118,116,121,113,0,108,118,115,96],
[108,108,109,109,102,0,100,104,104],
[109,114,110,102,92,110,0,116,100],
[113,111,97,97,95,106,94,0,107],
[105,114,113,115,114,106,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,93,88,104,102,103,107],
[115,0,114,110,105,106,100,93,104],
[109,96,0,99,93,120,92,108,106],
[117,100,111,0,82,109,87,109,107],
[122,105,117,128,0,116,108,113,128],
[106,104,90,101,94,0,93,102,103],
[108,110,118,123,102,117,0,120,127],
[107,117,102,101,97,108,90,0,105],
[103,106,104,103,82,107,83,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,102,118,109,111,104,112],
[99,0,123,105,119,92,104,95,110],
[94,87,0,94,125,109,116,94,111],
[108,105,116,0,107,102,118,108,128],
[92,91,85,103,0,102,90,100,110],
[101,118,101,108,108,0,108,98,106],
[99,106,94,92,120,102,0,109,114],
[106,115,116,102,110,112,101,0,114],
[98,100,99,82,100,104,96,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,93,102,96,101,103,115,94],
[116,0,107,107,107,107,93,124,106],
[117,103,0,120,110,101,119,131,110],
[108,103,90,0,93,90,119,117,91],
[114,103,100,117,0,94,117,130,97],
[109,103,109,120,116,0,121,131,116],
[107,117,91,91,93,89,0,131,98],
[95,86,79,93,80,79,79,0,87],
[116,104,100,119,113,94,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,145,140,96,105,109,120,129,146],
[65,0,79,97,94,95,86,114,96],
[70,131,0,87,106,101,73,100,122],
[114,113,123,0,130,103,111,100,120],
[105,116,104,80,0,104,107,78,94],
[101,115,109,107,106,0,124,108,130],
[90,124,137,99,103,86,0,104,126],
[81,96,110,110,132,102,106,0,118],
[64,114,88,90,116,80,84,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,94,129,116,122,127,105],
[113,0,110,111,144,136,124,159,96],
[104,100,0,100,125,110,104,112,100],
[116,99,110,0,114,119,111,125,91],
[81,66,85,96,0,105,98,104,81],
[94,74,100,91,105,0,109,113,100],
[88,86,106,99,112,101,0,139,101],
[83,51,98,85,106,97,71,0,76],
[105,114,110,119,129,110,109,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,116,90,107,108,100,88,117],
[124,0,114,113,144,131,92,128,118],
[94,96,0,89,136,116,52,111,97],
[120,97,121,0,146,132,105,105,122],
[103,66,74,64,0,78,72,84,106],
[102,79,94,78,132,0,74,102,95],
[110,118,158,105,138,136,0,122,128],
[122,82,99,105,126,108,88,0,104],
[93,92,113,88,104,115,82,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,106,128,102,107,113,106],
[96,0,108,108,106,110,108,116,108],
[98,102,0,102,90,103,97,99,104],
[104,102,108,0,108,124,102,109,105],
[82,104,120,102,0,105,107,108,103],
[108,100,107,86,105,0,105,106,100],
[103,102,113,108,103,105,0,103,117],
[97,94,111,101,102,104,107,0,95],
[104,102,106,105,107,110,93,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,122,110,123,119,113,109,103],
[85,0,100,97,99,95,95,97,83],
[88,110,0,103,104,95,95,97,88],
[100,113,107,0,117,106,110,111,105],
[87,111,106,93,0,96,85,95,81],
[91,115,115,104,114,0,113,103,93],
[97,115,115,100,125,97,0,98,93],
[101,113,113,99,115,107,112,0,95],
[107,127,122,105,129,117,117,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,101,111,107,135,98,106],
[113,0,123,114,125,117,148,105,123],
[97,87,0,87,104,94,119,100,80],
[109,96,123,0,118,110,142,110,109],
[99,85,106,92,0,112,134,99,94],
[103,93,116,100,98,0,132,95,107],
[75,62,91,68,76,78,0,74,70],
[112,105,110,100,111,115,136,0,111],
[104,87,130,101,116,103,140,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,112,105,100,106,91,106],
[113,0,108,106,104,105,112,103,106],
[107,102,0,106,98,118,120,100,105],
[98,104,104,0,101,104,108,102,102],
[105,106,112,109,0,108,108,105,113],
[110,105,92,106,102,0,120,102,105],
[104,98,90,102,102,90,0,101,97],
[119,107,110,108,105,108,109,0,102],
[104,104,105,108,97,105,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,102,102,108,123,113,103],
[97,0,104,105,111,119,129,110,106],
[102,106,0,104,107,108,117,108,111],
[108,105,106,0,112,107,103,108,110],
[108,99,103,98,0,107,116,104,102],
[102,91,102,103,103,0,100,100,97],
[87,81,93,107,94,110,0,100,92],
[97,100,102,102,106,110,110,0,100],
[107,104,99,100,108,113,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,95,92,88,85,83,95,88],
[117,0,101,102,116,121,115,118,101],
[115,109,0,105,114,105,95,114,72],
[118,108,105,0,111,106,112,107,106],
[122,94,96,99,0,91,119,97,96],
[125,89,105,104,119,0,119,93,98],
[127,95,115,98,91,91,0,106,82],
[115,92,96,103,113,117,104,0,115],
[122,109,138,104,114,112,128,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,85,119,96,108,110,114,87],
[81,0,66,90,102,79,109,105,93],
[125,144,0,111,104,143,118,132,124],
[91,120,99,0,110,120,128,128,109],
[114,108,106,100,0,89,115,97,80],
[102,131,67,90,121,0,111,143,109],
[100,101,92,82,95,99,0,93,106],
[96,105,78,82,113,67,117,0,96],
[123,117,86,101,130,101,104,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,93,103,107,119,97,104,81],
[118,0,118,127,134,141,103,125,124],
[117,92,0,99,115,113,110,127,114],
[107,83,111,0,121,114,81,113,115],
[103,76,95,89,0,98,97,91,104],
[91,69,97,96,112,0,88,93,99],
[113,107,100,129,113,122,0,123,110],
[106,85,83,97,119,117,87,0,97],
[129,86,96,95,106,111,100,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,115,113,120,98,117,106],
[100,0,96,100,101,103,89,97,90],
[91,114,0,109,104,112,95,98,91],
[95,110,101,0,109,101,112,103,95],
[97,109,106,101,0,102,91,104,98],
[90,107,98,109,108,0,96,106,96],
[112,121,115,98,119,114,0,113,95],
[93,113,112,107,106,104,97,0,94],
[104,120,119,115,112,114,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,102,94,110,98,107,110],
[105,0,97,97,101,94,107,121,92],
[115,113,0,108,101,122,122,109,109],
[108,113,102,0,103,128,114,121,111],
[116,109,109,107,0,105,114,128,113],
[100,116,88,82,105,0,103,119,91],
[112,103,88,96,96,107,0,113,93],
[103,89,101,89,82,91,97,0,91],
[100,118,101,99,97,119,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,132,105,104,143,109,110],
[98,0,109,127,117,92,135,113,124],
[110,101,0,125,111,103,128,127,124],
[78,83,85,0,99,91,127,90,84],
[105,93,99,111,0,84,128,109,117],
[106,118,107,119,126,0,130,102,122],
[67,75,82,83,82,80,0,84,85],
[101,97,83,120,101,108,126,0,119],
[100,86,86,126,93,88,125,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,127,86,110,101,140,87],
[112,0,110,96,108,89,84,119,76],
[97,100,0,96,124,86,113,116,101],
[83,114,114,0,103,67,106,108,99],
[124,102,86,107,0,102,107,125,111],
[100,121,124,143,108,0,94,138,96],
[109,126,97,104,103,116,0,139,103],
[70,91,94,102,85,72,71,0,69],
[123,134,109,111,99,114,107,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,114,126,110,124,104,115],
[95,0,107,104,110,99,96,99,108],
[108,103,0,115,124,109,111,106,115],
[96,106,95,0,120,96,98,107,111],
[84,100,86,90,0,83,104,96,95],
[100,111,101,114,127,0,104,107,118],
[86,114,99,112,106,106,0,95,104],
[106,111,104,103,114,103,115,0,117],
[95,102,95,99,115,92,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,78,103,116,128,105,107,116],
[109,0,87,104,121,115,107,116,110],
[132,123,0,104,114,125,107,125,116],
[107,106,106,0,114,120,104,119,112],
[94,89,96,96,0,120,92,91,95],
[82,95,85,90,90,0,92,99,104],
[105,103,103,106,118,118,0,113,101],
[103,94,85,91,119,111,97,0,104],
[94,100,94,98,115,106,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,146,143,95,183,131,133,140],
[92,0,127,107,105,139,127,130,111],
[64,83,0,86,88,154,98,114,88],
[67,103,124,0,69,161,99,118,137],
[115,105,122,141,0,154,105,127,133],
[27,71,56,49,56,0,53,54,85],
[79,83,112,111,105,157,0,135,119],
[77,80,96,92,83,156,75,0,99],
[70,99,122,73,77,125,91,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,99,110,110,97,94,95,92],
[115,0,106,114,104,105,112,115,103],
[111,104,0,117,112,108,103,108,108],
[100,96,93,0,98,93,102,95,88],
[100,106,98,112,0,100,107,103,104],
[113,105,102,117,110,0,115,117,100],
[116,98,107,108,103,95,0,103,109],
[115,95,102,115,107,93,107,0,99],
[118,107,102,122,106,110,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,104,96,99,99,108,104],
[110,0,109,103,116,120,112,127,116],
[115,101,0,108,115,110,110,127,106],
[106,107,102,0,106,105,114,122,101],
[114,94,95,104,0,103,92,110,101],
[111,90,100,105,107,0,105,105,112],
[111,98,100,96,118,105,0,119,103],
[102,83,83,88,100,105,91,0,102],
[106,94,104,109,109,98,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,89,120,120,120,89,120,89],
[90,0,89,0,31,31,89,89,0],
[121,121,0,31,121,31,120,120,121],
[90,210,179,0,210,120,89,120,179],
[90,179,89,0,0,120,89,89,89],
[90,179,179,90,90,0,179,89,179],
[121,121,90,121,121,31,0,31,121],
[90,121,90,90,121,121,179,0,90],
[121,210,89,31,121,31,89,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,109,117,106,106,105,115,105],
[98,0,96,107,95,110,101,103,95],
[101,114,0,113,105,116,110,106,109],
[93,103,97,0,93,99,94,97,102],
[104,115,105,117,0,115,112,102,106],
[104,100,94,111,95,0,101,91,106],
[105,109,100,116,98,109,0,97,100],
[95,107,104,113,108,119,113,0,106],
[105,115,101,108,104,104,110,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,109,90,94,103,114,99,106],
[115,0,114,108,94,104,119,112,126],
[101,96,0,99,94,100,116,104,101],
[120,102,111,0,105,114,122,115,109],
[116,116,116,105,0,112,123,105,117],
[107,106,110,96,98,0,111,112,123],
[96,91,94,88,87,99,0,82,105],
[111,98,106,95,105,98,128,0,113],
[104,84,109,101,93,87,105,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,77,113,89,134,89,70,71],
[95,0,86,133,112,107,122,132,90],
[133,124,0,87,87,105,84,107,82],
[97,77,123,0,115,144,139,117,93],
[121,98,123,95,0,125,85,82,77],
[76,103,105,66,85,0,95,103,94],
[121,88,126,71,125,115,0,102,133],
[140,78,103,93,128,107,108,0,120],
[139,120,128,117,133,116,77,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,143,121,128,123,139,138],
[108,0,100,109,107,109,126,103,108],
[100,110,0,119,122,127,98,117,109],
[67,101,91,0,98,104,86,104,115],
[89,103,88,112,0,121,115,110,119],
[82,101,83,106,89,0,119,93,116],
[87,84,112,124,95,91,0,128,117],
[71,107,93,106,100,117,82,0,113],
[72,102,101,95,91,94,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,90,122,119,105,103,115,96],
[106,0,96,111,104,102,106,112,107],
[120,114,0,125,117,108,103,127,116],
[88,99,85,0,109,86,91,110,100],
[91,106,93,101,0,93,104,106,108],
[105,108,102,124,117,0,113,120,107],
[107,104,107,119,106,97,0,122,116],
[95,98,83,100,104,90,88,0,92],
[114,103,94,110,102,103,94,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,117,87,91,67,109,95,82],
[144,0,113,92,115,84,105,79,101],
[93,97,0,81,97,77,100,96,91],
[123,118,129,0,107,104,105,110,96],
[119,95,113,103,0,114,132,119,94],
[143,126,133,106,96,0,91,113,116],
[101,105,110,105,78,119,0,104,75],
[115,131,114,100,91,97,106,0,92],
[128,109,119,114,116,94,135,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,107,101,123,103,109,105],
[98,0,109,103,98,122,108,104,98],
[96,101,0,94,102,102,100,107,90],
[103,107,116,0,106,109,103,102,93],
[109,112,108,104,0,105,100,118,99],
[87,88,108,101,105,0,105,104,86],
[107,102,110,107,110,105,0,111,94],
[101,106,103,108,92,106,99,0,105],
[105,112,120,117,111,124,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,117,132,80,122,117,112,115],
[98,0,77,112,121,99,100,89,112],
[93,133,0,142,89,110,94,122,117],
[78,98,68,0,84,100,97,95,74],
[130,89,121,126,0,138,135,125,107],
[88,111,100,110,72,0,107,116,108],
[93,110,116,113,75,103,0,100,79],
[98,121,88,115,85,94,110,0,85],
[95,98,93,136,103,102,131,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,111,96,110,109,111,106,105],
[110,0,117,105,119,108,104,114,113],
[99,93,0,89,112,100,107,103,104],
[114,105,121,0,112,109,108,105,119],
[100,91,98,98,0,91,108,103,101],
[101,102,110,101,119,0,113,113,123],
[99,106,103,102,102,97,0,101,106],
[104,96,107,105,107,97,109,0,117],
[105,97,106,91,109,87,104,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,103,111,105,112,114,108],
[110,0,99,103,109,96,96,108,104],
[100,111,0,106,115,98,94,101,99],
[107,107,104,0,111,110,104,102,104],
[99,101,95,99,0,101,100,96,104],
[105,114,112,100,109,0,96,107,100],
[98,114,116,106,110,114,0,108,108],
[96,102,109,108,114,103,102,0,95],
[102,106,111,106,106,110,102,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,97,108,98,101,98,102],
[111,0,109,106,105,98,102,105,103],
[113,101,0,116,99,117,103,98,108],
[113,104,94,0,110,110,93,93,112],
[102,105,111,100,0,104,105,98,105],
[112,112,93,100,106,0,99,102,106],
[109,108,107,117,105,111,0,104,125],
[112,105,112,117,112,108,106,0,112],
[108,107,102,98,105,104,85,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,143,105,125,140,121,119,110],
[88,0,123,115,106,114,113,97,95],
[67,87,0,97,98,104,99,96,80],
[105,95,113,0,89,115,105,96,85],
[85,104,112,121,0,124,115,100,88],
[70,96,106,95,86,0,89,82,83],
[89,97,111,105,95,121,0,103,91],
[91,113,114,114,110,128,107,0,105],
[100,115,130,125,122,127,119,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,78,53,93,129,79,96,97],
[131,0,104,100,118,138,94,121,111],
[132,106,0,110,96,107,123,116,111],
[157,110,100,0,101,106,78,136,122],
[117,92,114,109,0,132,100,126,111],
[81,72,103,104,78,0,74,105,68],
[131,116,87,132,110,136,0,111,104],
[114,89,94,74,84,105,99,0,109],
[113,99,99,88,99,142,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,102,103,94,74,97,102,104],
[118,0,111,129,110,107,105,108,118],
[108,99,0,100,83,80,73,87,95],
[107,81,110,0,91,103,69,104,117],
[116,100,127,119,0,92,114,132,123],
[136,103,130,107,118,0,93,111,119],
[113,105,137,141,96,117,0,106,113],
[108,102,123,106,78,99,104,0,128],
[106,92,115,93,87,91,97,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,118,99,97,105,108,120,107],
[103,0,122,101,100,105,109,123,107],
[92,88,0,93,90,97,101,102,100],
[111,109,117,0,110,100,106,118,117],
[113,110,120,100,0,103,111,131,112],
[105,105,113,110,107,0,106,122,106],
[102,101,109,104,99,104,0,109,104],
[90,87,108,92,79,88,101,0,95],
[103,103,110,93,98,104,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,112,101,105,123,106,99],
[96,0,92,99,97,101,111,104,102],
[115,118,0,116,102,109,117,123,108],
[98,111,94,0,103,97,121,112,101],
[109,113,108,107,0,102,117,116,110],
[105,109,101,113,108,0,117,112,114],
[87,99,93,89,93,93,0,97,100],
[104,106,87,98,94,98,113,0,92],
[111,108,102,109,100,96,110,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,92,73,96,138,96,115,141],
[102,0,113,82,108,120,80,106,149],
[118,97,0,88,94,145,60,102,126],
[137,128,122,0,115,151,79,137,129],
[114,102,116,95,0,140,106,127,101],
[72,90,65,59,70,0,58,118,102],
[114,130,150,131,104,152,0,115,146],
[95,104,108,73,83,92,95,0,114],
[69,61,84,81,109,108,64,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,51,86,129,46,129,125,25],
[97,0,92,125,157,62,88,93,37],
[159,118,0,125,170,67,161,119,110],
[124,85,85,0,159,92,103,71,55],
[81,53,40,51,0,40,62,37,0],
[164,148,143,118,170,0,157,134,92],
[81,122,49,107,148,53,0,88,9],
[85,117,91,139,173,76,122,0,40],
[185,173,100,155,210,118,201,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,111,104,115,119,97,113],
[100,0,105,96,102,116,102,89,108],
[99,105,0,86,102,103,101,96,99],
[99,114,124,0,108,104,118,106,119],
[106,108,108,102,0,114,96,96,108],
[95,94,107,106,96,0,99,94,107],
[91,108,109,92,114,111,0,92,112],
[113,121,114,104,114,116,118,0,108],
[97,102,111,91,102,103,98,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,101,109,95,119,106,114],
[106,0,106,107,105,103,110,110,115],
[103,104,0,106,122,89,115,104,120],
[109,103,104,0,102,105,110,123,106],
[101,105,88,108,0,96,94,107,101],
[115,107,121,105,114,0,117,106,115],
[91,100,95,100,116,93,0,102,101],
[104,100,106,87,103,104,108,0,109],
[96,95,90,104,109,95,109,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,105,113,104,98,114,112,105],
[96,0,89,100,111,98,97,109,96],
[105,121,0,115,121,112,113,123,100],
[97,110,95,0,112,98,98,98,98],
[106,99,89,98,0,99,98,90,97],
[112,112,98,112,111,0,111,119,107],
[96,113,97,112,112,99,0,104,96],
[98,101,87,112,120,91,106,0,96],
[105,114,110,112,113,103,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,104,98,108,97,108,97],
[110,0,104,100,108,101,108,98,97],
[104,106,0,100,103,102,95,89,101],
[106,110,110,0,101,104,107,93,102],
[112,102,107,109,0,110,107,94,106],
[102,109,108,106,100,0,103,102,99],
[113,102,115,103,103,107,0,102,95],
[102,112,121,117,116,108,108,0,111],
[113,113,109,108,104,111,115,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,43,81,137,120,89,87,114],
[95,0,72,129,164,130,87,100,134],
[167,138,0,91,158,165,118,181,127],
[129,81,119,0,141,133,83,144,126],
[73,46,52,69,0,92,43,84,43],
[90,80,45,77,118,0,76,100,79],
[121,123,92,127,167,134,0,138,118],
[123,110,29,66,126,110,72,0,68],
[96,76,83,84,167,131,92,142,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,116,95,122,103,111,103,106],
[70,0,66,67,109,80,91,90,84],
[94,144,0,96,116,116,122,101,105],
[115,143,114,0,131,100,137,123,120],
[88,101,94,79,0,86,101,78,99],
[107,130,94,110,124,0,111,108,85],
[99,119,88,73,109,99,0,103,94],
[107,120,109,87,132,102,107,0,98],
[104,126,105,90,111,125,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,111,110,102,117,112,102],
[103,0,100,104,107,94,118,112,93],
[104,110,0,109,108,105,119,107,101],
[99,106,101,0,108,99,116,115,102],
[100,103,102,102,0,95,113,112,109],
[108,116,105,111,115,0,131,123,114],
[93,92,91,94,97,79,0,100,95],
[98,98,103,95,98,87,110,0,101],
[108,117,109,108,101,96,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,95,118,90,93,120,72,94],
[78,0,82,80,108,65,105,67,60],
[115,128,0,92,123,103,127,99,102],
[92,130,118,0,113,60,96,78,85],
[120,102,87,97,0,63,102,107,74],
[117,145,107,150,147,0,128,134,86],
[90,105,83,114,108,82,0,102,115],
[138,143,111,132,103,76,108,0,86],
[116,150,108,125,136,124,95,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,110,108,115,96,93,110],
[100,0,103,100,103,100,95,98,106],
[104,107,0,108,116,119,107,111,115],
[100,110,102,0,111,109,104,107,108],
[102,107,94,99,0,103,105,97,104],
[95,110,91,101,107,0,98,101,99],
[114,115,103,106,105,112,0,103,121],
[117,112,99,103,113,109,107,0,111],
[100,104,95,102,106,111,89,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,113,111,101,106,109,118],
[104,0,106,99,99,98,99,100,110],
[99,104,0,99,108,92,97,104,111],
[97,111,111,0,109,105,105,101,103],
[99,111,102,101,0,99,97,107,105],
[109,112,118,105,111,0,106,118,123],
[104,111,113,105,113,104,0,105,115],
[101,110,106,109,103,92,105,0,109],
[92,100,99,107,105,87,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,113,113,107,104,106,112,114],
[115,0,110,105,107,108,101,109,107],
[97,100,0,103,94,97,107,103,101],
[97,105,107,0,102,104,104,109,106],
[103,103,116,108,0,112,109,115,112],
[106,102,113,106,98,0,110,101,106],
[104,109,103,106,101,100,0,113,106],
[98,101,107,101,95,109,97,0,105],
[96,103,109,104,98,104,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,91,96,92,93,94,99],
[116,0,117,100,108,104,111,106,107],
[104,93,0,102,109,80,95,110,98],
[119,110,108,0,108,98,97,100,112],
[114,102,101,102,0,105,107,104,110],
[118,106,130,112,105,0,94,114,113],
[117,99,115,113,103,116,0,116,126],
[116,104,100,110,106,96,94,0,102],
[111,103,112,98,100,97,84,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,107,102,99,118,95,104,114],
[92,0,103,100,93,118,94,92,100],
[103,107,0,107,101,121,108,119,103],
[108,110,103,0,95,112,107,101,101],
[111,117,109,115,0,114,98,113,117],
[92,92,89,98,96,0,101,92,107],
[115,116,102,103,112,109,0,112,112],
[106,118,91,109,97,118,98,0,102],
[96,110,107,109,93,103,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,101,94,86,87,95,100],
[119,0,102,128,98,93,96,111,100],
[112,108,0,123,109,105,107,119,111],
[109,82,87,0,78,93,78,69,85],
[116,112,101,132,0,114,101,115,103],
[124,117,105,117,96,0,105,129,109],
[123,114,103,132,109,105,0,124,104],
[115,99,91,141,95,81,86,0,104],
[110,110,99,125,107,101,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,108,103,111,117,115,110],
[99,0,112,111,105,100,124,115,112],
[93,98,0,105,100,93,112,107,103],
[102,99,105,0,93,94,120,108,103],
[107,105,110,117,0,103,111,113,114],
[99,110,117,116,107,0,118,125,105],
[93,86,98,90,99,92,0,105,99],
[95,95,103,102,97,85,105,0,103],
[100,98,107,107,96,105,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,97,104,100,103,97,101,104],
[121,0,110,105,102,109,104,108,104],
[113,100,0,107,99,102,106,108,102],
[106,105,103,0,104,110,108,112,107],
[110,108,111,106,0,109,99,108,109],
[107,101,108,100,101,0,105,104,110],
[113,106,104,102,111,105,0,107,106],
[109,102,102,98,102,106,103,0,100],
[106,106,108,103,101,100,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,81,71,122,86,91,100],
[100,0,63,90,68,128,67,77,97],
[103,147,0,98,87,117,97,86,108],
[129,120,112,0,67,124,101,113,119],
[139,142,123,143,0,134,105,130,133],
[88,82,93,86,76,0,89,79,90],
[124,143,113,109,105,121,0,137,108],
[119,133,124,97,80,131,73,0,109],
[110,113,102,91,77,120,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,111,111,95,112,102,108],
[112,0,100,112,118,113,118,118,100],
[117,110,0,120,106,104,124,126,113],
[99,98,90,0,105,113,111,108,105],
[99,92,104,105,0,111,102,103,98],
[115,97,106,97,99,0,113,117,108],
[98,92,86,99,108,97,0,106,108],
[108,92,84,102,107,93,104,0,104],
[102,110,97,105,112,102,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,111,108,109,102,103,114],
[101,0,125,110,112,121,107,104,107],
[92,85,0,101,100,97,89,97,91],
[99,100,109,0,102,103,106,98,105],
[102,98,110,108,0,103,111,111,106],
[101,89,113,107,107,0,106,96,105],
[108,103,121,104,99,104,0,111,105],
[107,106,113,112,99,114,99,0,102],
[96,103,119,105,104,105,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,97,100,97,88,99,102,112],
[111,0,136,99,106,90,134,108,119],
[113,74,0,99,83,80,114,99,124],
[110,111,111,0,90,84,107,123,94],
[113,104,127,120,0,113,120,116,117],
[122,120,130,126,97,0,118,107,116],
[111,76,96,103,90,92,0,109,111],
[108,102,111,87,94,103,101,0,118],
[98,91,86,116,93,94,99,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,78,110,130,126,119,117,111],
[106,0,102,107,93,135,120,78,99],
[132,108,0,90,113,114,135,108,100],
[100,103,120,0,118,152,115,112,111],
[80,117,97,92,0,112,104,109,95],
[84,75,96,58,98,0,104,100,79],
[91,90,75,95,106,106,0,97,109],
[93,132,102,98,101,110,113,0,103],
[99,111,110,99,115,131,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,126,96,119,106,110,116],
[92,0,115,105,101,112,99,100,117],
[105,95,0,126,107,102,108,99,122],
[84,105,84,0,85,106,95,101,110],
[114,109,103,125,0,116,119,112,136],
[91,98,108,104,94,0,99,90,111],
[104,111,102,115,91,111,0,100,110],
[100,110,111,109,98,120,110,0,125],
[94,93,88,100,74,99,100,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,110,89,90,101,98,111,104],
[100,0,115,100,93,99,91,107,110],
[100,95,0,99,98,91,88,96,100],
[121,110,111,0,103,96,108,114,117],
[120,117,112,107,0,102,112,124,111],
[109,111,119,114,108,0,101,116,120],
[112,119,122,102,98,109,0,119,120],
[99,103,114,96,86,94,91,0,100],
[106,100,110,93,99,90,90,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,118,111,114,107,105,113,104],
[98,0,103,106,94,106,102,99,100],
[92,107,0,109,100,111,103,105,100],
[99,104,101,0,88,91,87,90,96],
[96,116,110,122,0,100,112,101,104],
[103,104,99,119,110,0,106,105,110],
[105,108,107,123,98,104,0,113,101],
[97,111,105,120,109,105,97,0,97],
[106,110,110,114,106,100,109,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,90,98,95,101,103,89,92],
[103,0,99,101,98,99,116,105,99],
[120,111,0,111,104,103,118,100,107],
[112,109,99,0,97,106,110,94,104],
[115,112,106,113,0,104,114,103,95],
[109,111,107,104,106,0,112,92,103],
[107,94,92,100,96,98,0,87,93],
[121,105,110,116,107,118,123,0,107],
[118,111,103,106,115,107,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,113,105,93,107,111,105,101],
[137,0,115,96,100,105,124,110,128],
[97,95,0,112,82,80,115,127,117],
[105,114,98,0,97,135,134,109,106],
[117,110,128,113,0,93,101,101,103],
[103,105,130,75,117,0,83,100,123],
[99,86,95,76,109,127,0,99,126],
[105,100,83,101,109,110,111,0,116],
[109,82,93,104,107,87,84,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,116,87,109,116,115,105],
[106,0,118,99,82,122,121,104,95],
[95,92,0,107,75,110,87,98,90],
[94,111,103,0,77,124,113,102,100],
[123,128,135,133,0,124,110,129,105],
[101,88,100,86,86,0,95,92,86],
[94,89,123,97,100,115,0,105,100],
[95,106,112,108,81,118,105,0,93],
[105,115,120,110,105,124,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,96,127,119,93,115,96,114],
[95,0,109,126,120,105,112,115,112],
[114,101,0,118,114,103,107,97,120],
[83,84,92,0,92,80,99,92,95],
[91,90,96,118,0,90,84,99,101],
[117,105,107,130,120,0,112,118,125],
[95,98,103,111,126,98,0,96,98],
[114,95,113,118,111,92,114,0,106],
[96,98,90,115,109,85,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,98,108,102,91,99,108,103],
[120,0,100,102,104,94,102,119,110],
[112,110,0,107,106,88,99,115,118],
[102,108,103,0,104,108,107,108,125],
[108,106,104,106,0,96,104,112,119],
[119,116,122,102,114,0,122,115,128],
[111,108,111,103,106,88,0,115,115],
[102,91,95,102,98,95,95,0,112],
[107,100,92,85,91,82,95,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,107,100,129,108,113,116],
[107,0,111,104,118,116,108,112,115],
[102,99,0,107,115,125,117,109,116],
[103,106,103,0,110,115,102,114,119],
[110,92,95,100,0,112,97,101,99],
[81,94,85,95,98,0,96,96,102],
[102,102,93,108,113,114,0,106,114],
[97,98,101,96,109,114,104,0,110],
[94,95,94,91,111,108,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,96,131,113,123,126,132,107],
[120,0,93,110,146,117,124,132,103],
[114,117,0,130,117,131,99,114,88],
[79,100,80,0,96,94,94,101,88],
[97,64,93,114,0,87,71,70,89],
[87,93,79,116,123,0,99,131,97],
[84,86,111,116,139,111,0,86,94],
[78,78,96,109,140,79,124,0,81],
[103,107,122,122,121,113,116,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,100,109,105,104,106,97],
[105,0,94,96,108,105,110,92,94],
[113,116,0,101,117,109,116,106,108],
[110,114,109,0,114,115,113,112,101],
[101,102,93,96,0,102,109,100,99],
[105,105,101,95,108,0,106,102,99],
[106,100,94,97,101,104,0,111,98],
[104,118,104,98,110,108,99,0,101],
[113,116,102,109,111,111,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,80,96,141,96,96,135],
[106,0,91,141,96,106,91,141,135],
[114,119,0,50,66,106,91,111,135],
[130,69,160,0,165,61,160,160,130],
[114,114,144,45,0,106,205,175,175],
[69,104,104,149,104,0,165,104,74],
[114,119,119,50,5,45,0,119,119],
[114,69,99,50,35,106,91,0,135],
[75,75,75,80,35,136,91,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,119,94,116,98,100,109],
[110,0,107,124,99,103,94,102,102],
[110,103,0,108,102,101,105,97,99],
[91,86,102,0,86,106,93,89,98],
[116,111,108,124,0,112,112,107,104],
[94,107,109,104,98,0,108,91,98],
[112,116,105,117,98,102,0,96,104],
[110,108,113,121,103,119,114,0,99],
[101,108,111,112,106,112,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,150,118,78,126,112,140,64],
[97,0,195,116,158,173,137,151,141],
[60,15,0,28,56,88,25,41,55],
[92,94,182,0,110,114,114,120,112],
[132,52,154,100,0,96,95,100,88],
[84,37,122,96,114,0,126,127,119],
[98,73,185,96,115,84,0,77,77],
[70,59,169,90,110,83,133,0,112],
[146,69,155,98,122,91,133,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,97,93,89,90,93,98,104],
[108,0,91,109,101,93,102,110,81],
[113,119,0,119,107,107,114,95,100],
[117,101,91,0,83,107,107,103,98],
[121,109,103,127,0,99,103,102,103],
[120,117,103,103,111,0,114,112,103],
[117,108,96,103,107,96,0,110,99],
[112,100,115,107,108,98,100,0,109],
[106,129,110,112,107,107,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,104,95,99,105,101,112],
[115,0,119,109,100,110,122,111,119],
[100,91,0,113,110,91,95,87,109],
[106,101,97,0,113,95,105,102,102],
[115,110,100,97,0,105,110,107,123],
[111,100,119,115,105,0,110,118,117],
[105,88,115,105,100,100,0,103,117],
[109,99,123,108,103,92,107,0,125],
[98,91,101,108,87,93,93,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,109,100,101,108,105,102,99],
[92,0,115,112,99,111,99,105,97],
[101,95,0,93,97,105,101,90,109],
[110,98,117,0,116,115,110,112,102],
[109,111,113,94,0,113,99,96,115],
[102,99,105,95,97,0,110,98,99],
[105,111,109,100,111,100,0,99,89],
[108,105,120,98,114,112,111,0,108],
[111,113,101,108,95,111,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,105,99,107,107,120,98],
[91,0,105,110,105,127,114,115,114],
[105,105,0,104,97,119,117,118,115],
[105,100,106,0,99,119,115,106,101],
[111,105,113,111,0,122,103,136,122],
[103,83,91,91,88,0,113,109,115],
[103,96,93,95,107,97,0,105,108],
[90,95,92,104,74,101,105,0,101],
[112,96,95,109,88,95,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,118,94,130,97,125,80,116],
[99,0,119,93,115,90,116,92,119],
[92,91,0,94,89,92,103,102,107],
[116,117,116,0,117,113,99,107,116],
[80,95,121,93,0,86,122,73,112],
[113,120,118,97,124,0,120,94,127],
[85,94,107,111,88,90,0,81,93],
[130,118,108,103,137,116,129,0,133],
[94,91,103,94,98,83,117,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,84,106,96,116,116,122,97],
[118,0,112,127,102,115,127,119,122],
[126,98,0,120,103,113,107,118,117],
[104,83,90,0,112,92,100,121,89],
[114,108,107,98,0,94,96,123,120],
[94,95,97,118,116,0,110,133,123],
[94,83,103,110,114,100,0,135,99],
[88,91,92,89,87,77,75,0,89],
[113,88,93,121,90,87,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,119,107,115,98,136,117,132],
[89,0,133,115,97,86,108,95,127],
[91,77,0,99,92,102,116,95,116],
[103,95,111,0,101,78,103,87,114],
[95,113,118,109,0,113,140,97,114],
[112,124,108,132,97,0,142,129,121],
[74,102,94,107,70,68,0,82,120],
[93,115,115,123,113,81,128,0,115],
[78,83,94,96,96,89,90,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,112,120,108,107,120,115],
[105,0,100,108,121,97,97,104,100],
[101,110,0,115,105,112,98,111,121],
[98,102,95,0,107,96,101,111,106],
[90,89,105,103,0,99,93,102,107],
[102,113,98,114,111,0,107,115,105],
[103,113,112,109,117,103,0,108,105],
[90,106,99,99,108,95,102,0,115],
[95,110,89,104,103,105,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,60,39,77,112,26,92],
[100,0,38,72,50,7,61,26,22],
[118,172,0,121,49,91,112,57,82],
[150,138,89,0,75,108,108,77,145],
[171,160,161,135,0,160,95,114,133],
[133,203,119,102,50,0,92,63,88],
[98,149,98,102,115,118,0,108,104],
[184,184,153,133,96,147,102,0,184],
[118,188,128,65,77,122,106,26,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,105,111,105,101,118,116],
[95,0,96,102,109,97,95,105,104],
[99,114,0,116,111,90,99,105,111],
[105,108,94,0,115,107,101,107,108],
[99,101,99,95,0,98,92,90,112],
[105,113,120,103,112,0,115,112,114],
[109,115,111,109,118,95,0,112,117],
[92,105,105,103,120,98,98,0,118],
[94,106,99,102,98,96,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,116,114,102,97,108,107,101],
[109,0,113,111,102,112,105,106,96],
[94,97,0,104,102,100,101,100,103],
[96,99,106,0,103,95,106,95,104],
[108,108,108,107,0,101,102,94,95],
[113,98,110,115,109,0,109,99,104],
[102,105,109,104,108,101,0,107,101],
[103,104,110,115,116,111,103,0,108],
[109,114,107,106,115,106,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,113,111,103,114,104,116],
[99,0,104,108,103,97,111,106,118],
[104,106,0,113,108,107,108,107,116],
[97,102,97,0,101,96,105,104,101],
[99,107,102,109,0,107,108,105,115],
[107,113,103,114,103,0,109,117,123],
[96,99,102,105,102,101,0,101,105],
[106,104,103,106,105,93,109,0,109],
[94,92,94,109,95,87,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,99,103,79,91,110,95,99],
[128,0,145,100,101,104,98,96,101],
[111,65,0,87,87,73,75,75,87],
[107,110,123,0,126,111,125,105,112],
[131,109,123,84,0,101,90,107,117],
[119,106,137,99,109,0,130,121,137],
[100,112,135,85,120,80,0,91,102],
[115,114,135,105,103,89,119,0,106],
[111,109,123,98,93,73,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,118,99,105,91,107,114],
[104,0,93,105,105,103,100,83,93],
[102,117,0,108,98,109,101,95,106],
[92,105,102,0,89,102,104,87,94],
[111,105,112,121,0,110,109,106,107],
[105,107,101,108,100,0,85,82,93],
[119,110,109,106,101,125,0,107,105],
[103,127,115,123,104,128,103,0,112],
[96,117,104,116,103,117,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,110,115,96,100,104,104],
[110,0,116,115,105,113,99,116,109],
[106,94,0,102,110,103,98,105,101],
[100,95,108,0,103,88,91,101,98],
[95,105,100,107,0,91,89,102,107],
[114,97,107,122,119,0,106,112,110],
[110,111,112,119,121,104,0,112,109],
[106,94,105,109,108,98,98,0,107],
[106,101,109,112,103,100,101,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,105,107,114,113,111,113,100],
[109,0,99,107,109,116,97,125,100],
[105,111,0,100,117,116,105,110,107],
[103,103,110,0,109,113,89,106,95],
[96,101,93,101,0,107,98,109,86],
[97,94,94,97,103,0,93,102,88],
[99,113,105,121,112,117,0,119,104],
[97,85,100,104,101,108,91,0,90],
[110,110,103,115,124,122,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,115,121,102,121,119,98],
[114,0,110,120,119,116,132,111,105],
[108,100,0,117,109,121,113,100,97],
[95,90,93,0,82,92,123,101,82],
[89,91,101,128,0,117,134,104,109],
[108,94,89,118,93,0,109,105,117],
[89,78,97,87,76,101,0,99,99],
[91,99,110,109,106,105,111,0,116],
[112,105,113,128,101,93,111,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,117,110,103,109,108,104],
[104,0,114,115,107,111,101,98,99],
[94,96,0,109,102,105,96,89,110],
[93,95,101,0,98,96,89,87,93],
[100,103,108,112,0,101,109,97,107],
[107,99,105,114,109,0,116,103,107],
[101,109,114,121,101,94,0,95,110],
[102,112,121,123,113,107,115,0,108],
[106,111,100,117,103,103,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,103,97,95,107,104,111],
[97,0,112,98,100,105,89,107,115],
[98,98,0,106,97,110,90,96,122],
[107,112,104,0,92,107,102,110,114],
[113,110,113,118,0,109,102,114,131],
[115,105,100,103,101,0,107,106,113],
[103,121,120,108,108,103,0,109,120],
[106,103,114,100,96,104,101,0,118],
[99,95,88,96,79,97,90,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,165,87,165,60,132,122,124,165],
[45,0,123,123,84,107,59,139,150],
[123,87,0,99,124,68,132,124,149],
[45,87,111,0,60,132,146,60,111],
[150,126,86,150,0,107,107,64,150],
[78,103,142,78,103,0,78,103,165],
[88,151,78,64,103,132,0,89,151],
[86,71,86,150,146,107,121,0,86],
[45,60,61,99,60,45,59,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,111,120,111,104,113,99],
[109,0,104,104,106,114,97,109,90],
[112,106,0,122,120,108,118,116,101],
[99,106,88,0,111,106,103,107,97],
[90,104,90,99,0,94,118,96,104],
[99,96,102,104,116,0,109,106,103],
[106,113,92,107,92,101,0,99,82],
[97,101,94,103,114,104,111,0,116],
[111,120,109,113,106,107,128,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,98,101,102,104,108,103],
[111,0,100,102,98,104,97,111,100],
[111,110,0,103,109,110,95,114,94],
[112,108,107,0,107,115,103,105,103],
[109,112,101,103,0,107,101,104,100],
[108,106,100,95,103,0,93,108,101],
[106,113,115,107,109,117,0,114,105],
[102,99,96,105,106,102,96,0,105],
[107,110,116,107,110,109,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,123,127,109,111,108,102],
[95,0,117,122,128,114,115,106,111],
[100,93,0,106,121,102,95,96,105],
[87,88,104,0,105,88,97,84,84],
[83,82,89,105,0,87,91,69,91],
[101,96,108,122,123,0,99,85,92],
[99,95,115,113,119,111,0,110,106],
[102,104,114,126,141,125,100,0,105],
[108,99,105,126,119,118,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,101,108,126,113,110,101],
[106,0,96,100,110,127,115,112,109],
[102,114,0,114,105,111,118,110,109],
[109,110,96,0,101,117,111,121,95],
[102,100,105,109,0,113,111,128,104],
[84,83,99,93,97,0,91,113,91],
[97,95,92,99,99,119,0,120,98],
[100,98,100,89,82,97,90,0,91],
[109,101,101,115,106,119,112,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,92,104,102,104,117,100,130],
[96,0,89,93,101,101,101,107,113],
[118,121,0,111,102,117,123,109,127],
[106,117,99,0,109,111,110,92,115],
[108,109,108,101,0,106,104,87,115],
[106,109,93,99,104,0,102,95,111],
[93,109,87,100,106,108,0,94,118],
[110,103,101,118,123,115,116,0,132],
[80,97,83,95,95,99,92,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,106,100,109,107,116,109],
[98,0,110,94,107,93,89,88,110],
[94,100,0,93,96,108,87,97,100],
[104,116,117,0,120,100,108,115,110],
[110,103,114,90,0,104,94,109,104],
[101,117,102,110,106,0,99,115,98],
[103,121,123,102,116,111,0,125,111],
[94,122,113,95,101,95,85,0,93],
[101,100,110,100,106,112,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,82,74,79,101,95,81,92],
[112,0,91,94,75,101,104,84,98],
[128,119,0,94,78,115,98,95,119],
[136,116,116,0,111,125,120,98,122],
[131,135,132,99,0,133,128,116,119],
[109,109,95,85,77,0,94,97,112],
[115,106,112,90,82,116,0,78,101],
[129,126,115,112,94,113,132,0,123],
[118,112,91,88,91,98,109,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,136,94,87,86,98,129,93],
[127,0,141,102,82,118,119,146,108],
[74,69,0,80,96,59,71,96,67],
[116,108,130,0,85,72,96,142,127],
[123,128,114,125,0,96,118,118,105],
[124,92,151,138,114,0,99,137,104],
[112,91,139,114,92,111,0,104,124],
[81,64,114,68,92,73,106,0,97],
[117,102,143,83,105,106,86,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,113,119,112,148,123,99,94],
[124,0,116,105,101,114,97,91,98],
[97,94,0,112,99,140,104,122,96],
[91,105,98,0,84,108,155,127,127],
[98,109,111,126,0,103,116,93,93],
[62,96,70,102,107,0,131,109,87],
[87,113,106,55,94,79,0,91,87],
[111,119,88,83,117,101,119,0,105],
[116,112,114,83,117,123,123,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,105,97,103,107,102,118],
[119,0,97,93,110,111,99,123,116],
[110,113,0,121,104,115,118,113,125],
[105,117,89,0,93,107,110,120,130],
[113,100,106,117,0,112,98,118,123],
[107,99,95,103,98,0,108,103,114],
[103,111,92,100,112,102,0,117,126],
[108,87,97,90,92,107,93,0,115],
[92,94,85,80,87,96,84,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,99,103,110,95,120,98,105],
[105,0,97,108,107,99,124,105,114],
[111,113,0,95,108,97,114,101,99],
[107,102,115,0,104,95,122,98,95],
[100,103,102,106,0,92,111,104,100],
[115,111,113,115,118,0,118,110,99],
[90,86,96,88,99,92,0,110,88],
[112,105,109,112,106,100,100,0,91],
[105,96,111,115,110,111,122,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,103,113,110,108,101,104],
[95,0,108,85,96,102,105,99,89],
[89,102,0,88,106,105,101,112,98],
[107,125,122,0,102,120,95,111,114],
[97,114,104,108,0,109,93,98,97],
[100,108,105,90,101,0,99,105,96],
[102,105,109,115,117,111,0,99,109],
[109,111,98,99,112,105,111,0,94],
[106,121,112,96,113,114,101,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,124,102,109,118,84,114],
[105,0,87,110,92,102,94,90,119],
[102,123,0,142,108,149,114,105,141],
[86,100,68,0,90,102,86,78,106],
[108,118,102,120,0,109,100,111,114],
[101,108,61,108,101,0,111,80,94],
[92,116,96,124,110,99,0,93,113],
[126,120,105,132,99,130,117,0,104],
[96,91,69,104,96,116,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,117,93,99,96,103,96,102],
[102,0,108,99,100,96,100,97,97],
[93,102,0,96,94,85,102,91,95],
[117,111,114,0,117,103,120,108,114],
[111,110,116,93,0,101,112,104,103],
[114,114,125,107,109,0,114,107,105],
[107,110,108,90,98,96,0,94,96],
[114,113,119,102,106,103,116,0,104],
[108,113,115,96,107,105,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,93,98,115,101,96,110,99],
[120,0,109,119,113,110,110,107,105],
[117,101,0,93,109,104,99,100,108],
[112,91,117,0,103,108,104,108,99],
[95,97,101,107,0,100,97,104,90],
[109,100,106,102,110,0,105,108,106],
[114,100,111,106,113,105,0,114,103],
[100,103,110,102,106,102,96,0,109],
[111,105,102,111,120,104,107,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,104,102,101,103,107,104,102],
[110,0,97,107,104,103,108,100,99],
[106,113,0,113,110,96,114,117,111],
[108,103,97,0,110,101,100,110,104],
[109,106,100,100,0,100,113,110,109],
[107,107,114,109,110,0,113,114,103],
[103,102,96,110,97,97,0,107,100],
[106,110,93,100,100,96,103,0,109],
[108,111,99,106,101,107,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,169,141,58,193,58,110,141],
[24,0,0,24,24,82,24,58,24],
[41,210,0,41,41,99,41,151,41],
[69,186,169,0,52,169,17,127,76],
[152,186,169,158,0,193,75,127,100],
[17,128,111,41,17,0,17,69,17],
[152,186,169,193,135,193,0,127,100],
[100,152,59,83,83,141,83,0,83],
[69,186,169,134,110,193,110,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,113,91,114,129,109,114,97],
[98,0,114,111,96,124,112,99,89],
[97,96,0,92,90,98,97,113,90],
[119,99,118,0,118,115,125,119,93],
[96,114,120,92,0,124,112,110,93],
[81,86,112,95,86,0,86,109,88],
[101,98,113,85,98,124,0,104,110],
[96,111,97,91,100,101,106,0,93],
[113,121,120,117,117,122,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,105,92,100,105,100,93,76],
[133,0,122,119,103,133,124,119,108],
[105,88,0,92,80,109,108,71,70],
[118,91,118,0,95,113,107,103,98],
[110,107,130,115,0,130,104,102,96],
[105,77,101,97,80,0,111,73,80],
[110,86,102,103,106,99,0,84,83],
[117,91,139,107,108,137,126,0,86],
[134,102,140,112,114,130,127,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,99,92,105,99,103,101],
[110,0,113,106,100,106,103,112,109],
[100,97,0,94,93,103,88,98,100],
[111,104,116,0,107,117,110,111,105],
[118,110,117,103,0,111,110,113,111],
[105,104,107,93,99,0,107,101,107],
[111,107,122,100,100,103,0,113,97],
[107,98,112,99,97,109,97,0,107],
[109,101,110,105,99,103,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,110,109,99,114,109,98],
[108,0,101,98,108,105,114,101,110],
[102,109,0,106,106,106,125,116,101],
[100,112,104,0,103,103,119,99,107],
[101,102,104,107,0,103,118,99,92],
[111,105,104,107,107,0,122,112,105],
[96,96,85,91,92,88,0,100,90],
[101,109,94,111,111,98,110,0,109],
[112,100,109,103,118,105,120,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,123,111,111,109,138,134,121],
[118,0,117,122,93,82,108,105,99],
[87,93,0,93,66,57,86,114,113],
[99,88,117,0,78,77,143,91,94],
[99,117,144,132,0,63,138,104,152],
[101,128,153,133,147,0,127,114,131],
[72,102,124,67,72,83,0,89,135],
[76,105,96,119,106,96,121,0,120],
[89,111,97,116,58,79,75,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,111,80,92,105,94,112],
[113,0,120,104,105,90,123,98,111],
[104,90,0,90,95,79,96,94,112],
[99,106,120,0,87,91,116,85,110],
[130,105,115,123,0,111,129,115,117],
[118,120,131,119,99,0,137,119,128],
[105,87,114,94,81,73,0,95,98],
[116,112,116,125,95,91,115,0,115],
[98,99,98,100,93,82,112,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,97,110,112,101,105,99],
[109,0,109,118,101,113,121,109,102],
[108,101,0,85,99,106,103,92,94],
[113,92,125,0,99,105,113,113,109],
[100,109,111,111,0,102,109,101,86],
[98,97,104,105,108,0,103,96,104],
[109,89,107,97,101,107,0,98,107],
[105,101,118,97,109,114,112,0,96],
[111,108,116,101,124,106,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,110,104,112,95,106,100],
[105,0,109,103,100,98,103,102,103],
[108,101,0,102,112,102,108,101,95],
[100,107,108,0,98,119,114,100,106],
[106,110,98,112,0,112,100,109,104],
[98,112,108,91,98,0,96,102,96],
[115,107,102,96,110,114,0,109,106],
[104,108,109,110,101,108,101,0,108],
[110,107,115,104,106,114,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,97,97,105,106,116,110,111],
[114,0,105,106,110,108,113,103,106],
[113,105,0,106,106,100,118,95,109],
[113,104,104,0,104,102,114,109,102],
[105,100,104,106,0,103,116,99,101],
[104,102,110,108,107,0,117,102,95],
[94,97,92,96,94,93,0,93,105],
[100,107,115,101,111,108,117,0,108],
[99,104,101,108,109,115,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,102,103,114,112,106,101],
[109,0,110,104,109,114,114,112,108],
[99,100,0,102,99,109,107,101,92],
[108,106,108,0,103,108,107,115,101],
[107,101,111,107,0,114,119,106,103],
[96,96,101,102,96,0,109,105,101],
[98,96,103,103,91,101,0,93,96],
[104,98,109,95,104,105,117,0,94],
[109,102,118,109,107,109,114,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,90,90,106,85,95,100],
[115,0,120,103,96,105,103,110,104],
[107,90,0,100,95,100,102,111,108],
[120,107,110,0,102,101,108,93,103],
[120,114,115,108,0,103,112,115,116],
[104,105,110,109,107,0,118,115,116],
[125,107,108,102,98,92,0,110,109],
[115,100,99,117,95,95,100,0,97],
[110,106,102,107,94,94,101,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,177,101,123,148,135,133,139,134],
[33,0,62,114,84,90,111,65,64],
[109,148,0,161,104,93,97,140,103],
[87,96,49,0,102,70,77,96,60],
[62,126,106,108,0,87,93,112,132],
[75,120,117,140,123,0,143,143,77],
[77,99,113,133,117,67,0,78,95],
[71,145,70,114,98,67,132,0,86],
[76,146,107,150,78,133,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,95,89,89,78,83,100,85],
[116,0,112,113,98,92,92,100,89],
[115,98,0,106,73,83,92,113,89],
[121,97,104,0,77,81,103,96,81],
[121,112,137,133,0,95,105,139,111],
[132,118,127,129,115,0,98,128,118],
[127,118,118,107,105,112,0,123,98],
[110,110,97,114,71,82,87,0,77],
[125,121,121,129,99,92,112,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,107,94,106,107,112,108],
[110,0,104,112,108,109,113,114,103],
[113,106,0,110,101,111,113,117,114],
[103,98,100,0,96,107,116,112,110],
[116,102,109,114,0,106,111,113,111],
[104,101,99,103,104,0,106,105,117],
[103,97,97,94,99,104,0,113,105],
[98,96,93,98,97,105,97,0,95],
[102,107,96,100,99,93,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,101,114,103,108,116,100],
[98,0,127,102,124,101,118,120,106],
[96,83,0,94,123,112,101,113,111],
[109,108,116,0,118,114,125,127,103],
[96,86,87,92,0,74,122,97,90],
[107,109,98,96,136,0,108,110,99],
[102,92,109,85,88,102,0,98,82],
[94,90,97,83,113,100,112,0,79],
[110,104,99,107,120,111,128,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,95,109,103,110,111,103,103],
[104,0,105,101,96,102,110,96,93],
[115,105,0,106,102,121,114,102,105],
[101,109,104,0,102,119,110,108,104],
[107,114,108,108,0,119,117,113,105],
[100,108,89,91,91,0,107,99,96],
[99,100,96,100,93,103,0,107,91],
[107,114,108,102,97,111,103,0,102],
[107,117,105,106,105,114,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,102,101,111,107,106,110],
[98,0,101,97,93,109,104,102,94],
[96,109,0,110,108,115,106,113,102],
[108,113,100,0,102,105,110,105,108],
[109,117,102,108,0,117,108,101,104],
[99,101,95,105,93,0,100,103,95],
[103,106,104,100,102,110,0,103,107],
[104,108,97,105,109,107,107,0,108],
[100,116,108,102,106,115,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,100,103,108,113,106,113],
[103,0,105,118,97,108,98,106,106],
[98,105,0,101,101,102,98,106,103],
[110,92,109,0,94,109,100,105,109],
[107,113,109,116,0,113,104,108,103],
[102,102,108,101,97,0,103,106,101],
[97,112,112,110,106,107,0,110,114],
[104,104,104,105,102,104,100,0,95],
[97,104,107,101,107,109,96,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,115,115,110,102,114,102],
[103,0,108,105,95,102,107,113,91],
[101,102,0,104,111,102,112,118,87],
[95,105,106,0,112,102,98,102,92],
[95,115,99,98,0,102,116,112,90],
[100,108,108,108,108,0,113,115,106],
[108,103,98,112,94,97,0,108,95],
[96,97,92,108,98,95,102,0,84],
[108,119,123,118,120,104,115,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,92,85,105,109,95,104,105],
[98,0,109,79,98,101,78,100,102],
[118,101,0,89,123,118,107,93,99],
[125,131,121,0,139,134,111,103,118],
[105,112,87,71,0,104,77,75,104],
[101,109,92,76,106,0,84,97,108],
[115,132,103,99,133,126,0,114,108],
[106,110,117,107,135,113,96,0,109],
[105,108,111,92,106,102,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,91,105,98,101,92,100,96],
[116,0,100,113,107,115,108,109,109],
[119,110,0,112,110,119,104,107,114],
[105,97,98,0,97,100,97,97,99],
[112,103,100,113,0,108,103,107,110],
[109,95,91,110,102,0,91,102,102],
[118,102,106,113,107,119,0,105,104],
[110,101,103,113,103,108,105,0,109],
[114,101,96,111,100,108,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,92,105,102,92,105,109],
[105,0,103,106,116,91,92,107,116],
[115,107,0,112,111,106,97,90,102],
[118,104,98,0,115,110,108,109,117],
[105,94,99,95,0,86,99,99,109],
[108,119,104,100,124,0,105,110,128],
[118,118,113,102,111,105,0,110,114],
[105,103,120,101,111,100,100,0,113],
[101,94,108,93,101,82,96,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,101,122,117,91,112,103,108],
[110,0,105,125,118,107,113,112,111],
[109,105,0,129,105,101,110,110,107],
[88,85,81,0,101,84,103,92,104],
[93,92,105,109,0,89,97,104,96],
[119,103,109,126,121,0,105,106,113],
[98,97,100,107,113,105,0,95,85],
[107,98,100,118,106,104,115,0,105],
[102,99,103,106,114,97,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,106,88,112,105,96,122],
[97,0,86,81,95,104,101,84,92],
[100,124,0,95,96,108,121,95,110],
[104,129,115,0,113,119,122,99,105],
[122,115,114,97,0,119,125,105,117],
[98,106,102,91,91,0,96,90,105],
[105,109,89,88,85,114,0,95,107],
[114,126,115,111,105,120,115,0,114],
[88,118,100,105,93,105,103,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,98,97,86,107,105,101],
[119,0,103,111,123,111,108,111,115],
[114,107,0,106,115,100,104,114,99],
[112,99,104,0,106,102,104,108,101],
[113,87,95,104,0,96,98,98,91],
[124,99,110,108,114,0,116,117,109],
[103,102,106,106,112,94,0,110,105],
[105,99,96,102,112,93,100,0,100],
[109,95,111,109,119,101,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,112,106,103,101,109,93],
[117,0,103,111,114,108,107,110,102],
[110,107,0,107,110,110,108,116,100],
[98,99,103,0,104,104,96,114,99],
[104,96,100,106,0,106,99,109,95],
[107,102,100,106,104,0,107,106,103],
[109,103,102,114,111,103,0,100,103],
[101,100,94,96,101,104,110,0,105],
[117,108,110,111,115,107,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,128,150,119,137,109,81,141],
[62,0,110,116,113,101,60,89,99],
[82,100,0,93,132,111,70,90,99],
[60,94,117,0,112,99,70,94,113],
[91,97,78,98,0,131,99,112,118],
[73,109,99,111,79,0,79,110,106],
[101,150,140,140,111,131,0,128,141],
[129,121,120,116,98,100,82,0,113],
[69,111,111,97,92,104,69,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,102,103,103,102,105,112],
[111,0,100,102,111,102,111,111,113],
[103,110,0,116,114,118,107,108,119],
[108,108,94,0,101,107,103,103,118],
[107,99,96,109,0,106,112,113,110],
[107,108,92,103,104,0,99,104,108],
[108,99,103,107,98,111,0,107,114],
[105,99,102,107,97,106,103,0,115],
[98,97,91,92,100,102,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,103,102,104,119,95,91],
[110,0,116,127,119,103,142,106,106],
[112,94,0,97,87,100,113,105,75],
[107,83,113,0,98,107,118,86,97],
[108,91,123,112,0,101,130,96,87],
[106,107,110,103,109,0,109,97,93],
[91,68,97,92,80,101,0,91,85],
[115,104,105,124,114,113,119,0,108],
[119,104,135,113,123,117,125,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,105,101,113,105,109,110],
[100,0,115,106,106,109,105,114,109],
[97,95,0,95,96,105,96,94,103],
[105,104,115,0,104,108,115,112,103],
[109,104,114,106,0,109,100,107,103],
[97,101,105,102,101,0,103,102,97],
[105,105,114,95,110,107,0,103,111],
[101,96,116,98,103,108,107,0,104],
[100,101,107,107,107,113,99,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,109,113,101,121,119,101],
[105,0,99,106,107,104,137,107,105],
[102,111,0,116,120,116,133,126,115],
[101,104,94,0,112,96,131,102,102],
[97,103,90,98,0,97,129,107,98],
[109,106,94,114,113,0,130,116,107],
[89,73,77,79,81,80,0,93,80],
[91,103,84,108,103,94,117,0,94],
[109,105,95,108,112,103,130,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,118,109,103,114,110,105,112],
[101,0,119,120,91,116,97,89,94],
[92,91,0,103,77,99,93,87,89],
[101,90,107,0,86,99,106,84,109],
[107,119,133,124,0,118,119,109,98],
[96,94,111,111,92,0,105,90,97],
[100,113,117,104,91,105,0,99,97],
[105,121,123,126,101,120,111,0,115],
[98,116,121,101,112,113,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,100,114,104,106,114,115],
[110,0,112,114,113,103,110,112,98],
[100,98,0,96,101,104,101,104,85],
[110,96,114,0,102,105,121,103,103],
[96,97,109,108,0,100,85,102,101],
[106,107,106,105,110,0,102,107,101],
[104,100,109,89,125,108,0,101,98],
[96,98,106,107,108,103,109,0,106],
[95,112,125,107,109,109,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,134,88,92,82,155,98,59],
[104,0,175,74,98,88,161,104,10],
[76,35,0,109,75,93,98,35,45],
[122,136,101,0,122,112,185,112,106],
[118,112,135,88,0,72,170,77,122],
[128,122,117,98,138,0,138,128,122],
[55,49,112,25,40,72,0,0,59],
[112,106,175,98,133,82,210,0,106],
[151,200,165,104,88,88,151,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,152,135,82,168,57,112,151],
[88,0,121,121,39,108,128,52,121],
[58,89,0,129,89,197,115,106,158],
[75,89,81,0,68,97,115,59,97],
[128,171,121,142,0,150,128,99,133],
[42,102,13,113,60,0,82,90,142],
[153,82,95,95,82,128,0,112,124],
[98,158,104,151,111,120,98,0,180],
[59,89,52,113,77,68,86,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,77,75,66,95,70,78,78],
[139,0,109,61,98,95,132,121,105],
[133,101,0,151,74,119,142,94,124],
[135,149,59,0,68,101,119,84,140],
[144,112,136,142,0,130,113,85,146],
[115,115,91,109,80,0,114,78,111],
[140,78,68,91,97,96,0,92,82],
[132,89,116,126,125,132,118,0,107],
[132,105,86,70,64,99,128,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,117,113,106,114,117,107,112],
[106,0,97,104,103,111,113,105,105],
[93,113,0,118,104,104,103,110,100],
[97,106,92,0,103,99,104,100,107],
[104,107,106,107,0,110,102,102,115],
[96,99,106,111,100,0,105,104,109],
[93,97,107,106,108,105,0,102,109],
[103,105,100,110,108,106,108,0,104],
[98,105,110,103,95,101,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,103,106,77,103,88,81,85],
[130,0,123,118,97,145,116,115,111],
[107,87,0,97,96,106,117,89,101],
[104,92,113,0,99,123,89,113,108],
[133,113,114,111,0,128,113,87,127],
[107,65,104,87,82,0,89,100,68],
[122,94,93,121,97,121,0,97,101],
[129,95,121,97,123,110,113,0,111],
[125,99,109,102,83,142,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,102,94,107,105,104,107],
[103,0,101,106,100,98,99,102,98],
[112,109,0,111,104,111,93,111,107],
[108,104,99,0,108,110,98,101,105],
[116,110,106,102,0,115,98,108,114],
[103,112,99,100,95,0,97,103,100],
[105,111,117,112,112,113,0,109,112],
[106,108,99,109,102,107,101,0,104],
[103,112,103,105,96,110,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,88,55,111,92,95,73,100],
[135,0,111,80,112,99,100,87,108],
[122,99,0,74,109,110,85,84,111],
[155,130,136,0,128,126,119,104,140],
[99,98,101,82,0,80,106,89,114],
[118,111,100,84,130,0,87,110,108],
[115,110,125,91,104,123,0,107,108],
[137,123,126,106,121,100,103,0,121],
[110,102,99,70,96,102,102,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,85,92,102,120,107,103],
[111,0,93,96,120,104,126,113,108],
[91,117,0,99,118,80,127,82,110],
[125,114,111,0,116,102,139,120,127],
[118,90,92,94,0,94,103,105,101],
[108,106,130,108,116,0,106,100,124],
[90,84,83,71,107,104,0,91,86],
[103,97,128,90,105,110,119,0,113],
[107,102,100,83,109,86,124,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,109,87,95,97,101,90,108],
[112,0,105,98,99,101,110,106,103],
[101,105,0,90,91,101,112,91,107],
[123,112,120,0,93,111,114,98,101],
[115,111,119,117,0,122,104,91,113],
[113,109,109,99,88,0,101,102,108],
[109,100,98,96,106,109,0,100,116],
[120,104,119,112,119,108,110,0,112],
[102,107,103,109,97,102,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,124,125,109,95,114,88,122],
[106,0,112,115,97,91,106,91,114],
[86,98,0,98,95,77,93,86,94],
[85,95,112,0,97,93,91,79,99],
[101,113,115,113,0,105,98,109,114],
[115,119,133,117,105,0,105,89,111],
[96,104,117,119,112,105,0,78,115],
[122,119,124,131,101,121,132,0,119],
[88,96,116,111,96,99,95,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,101,103,105,108,120,104,116],
[91,0,93,93,85,100,93,99,109],
[109,117,0,112,115,105,121,108,117],
[107,117,98,0,105,103,108,95,115],
[105,125,95,105,0,103,110,104,121],
[102,110,105,107,107,0,113,101,124],
[90,117,89,102,100,97,0,98,105],
[106,111,102,115,106,109,112,0,120],
[94,101,93,95,89,86,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,116,122,110,120,101,95],
[104,0,110,104,107,105,100,97,92],
[99,100,0,92,102,106,106,85,87],
[94,106,118,0,107,102,103,91,103],
[88,103,108,103,0,96,88,86,89],
[100,105,104,108,114,0,96,93,90],
[90,110,104,107,122,114,0,91,106],
[109,113,125,119,124,117,119,0,104],
[115,118,123,107,121,120,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,90,97,99,97,85,91,95],
[126,0,108,108,115,103,99,108,119],
[120,102,0,115,130,108,99,106,123],
[113,102,95,0,120,100,86,106,117],
[111,95,80,90,0,100,81,109,104],
[113,107,102,110,110,0,100,118,120],
[125,111,111,124,129,110,0,95,125],
[119,102,104,104,101,92,115,0,111],
[115,91,87,93,106,90,85,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,115,98,113,102,108,116],
[101,0,118,102,107,114,106,106,114],
[93,92,0,96,106,107,113,95,114],
[95,108,114,0,106,111,102,109,115],
[112,103,104,104,0,107,106,115,114],
[97,96,103,99,103,0,103,101,111],
[108,104,97,108,104,107,0,103,108],
[102,104,115,101,95,109,107,0,103],
[94,96,96,95,96,99,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,64,97,77,86,94,70,91],
[141,0,119,142,137,108,99,125,145],
[146,91,0,127,91,121,108,114,122],
[113,68,83,0,95,85,79,104,84],
[133,73,119,115,0,102,129,143,116],
[124,102,89,125,108,0,95,111,99],
[116,111,102,131,81,115,0,129,113],
[140,85,96,106,67,99,81,0,96],
[119,65,88,126,94,111,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,97,103,104,82,97,92,95],
[121,0,90,114,127,100,103,112,100],
[113,120,0,120,120,110,96,107,115],
[107,96,90,0,113,96,91,101,100],
[106,83,90,97,0,83,96,94,96],
[128,110,100,114,127,0,107,114,108],
[113,107,114,119,114,103,0,107,109],
[118,98,103,109,116,96,103,0,106],
[115,110,95,110,114,102,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,89,99,98,102,104,117],
[102,0,102,95,92,98,96,103,116],
[106,108,0,108,118,103,115,116,118],
[121,115,102,0,115,107,114,121,115],
[111,118,92,95,0,103,115,124,114],
[112,112,107,103,107,0,118,117,118],
[108,114,95,96,95,92,0,110,121],
[106,107,94,89,86,93,100,0,106],
[93,94,92,95,96,92,89,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,122,93,97,122,112,99],
[101,0,94,111,103,87,103,110,105],
[108,116,0,116,109,89,107,124,105],
[88,99,94,0,85,89,91,98,89],
[117,107,101,125,0,107,120,126,112],
[113,123,121,121,103,0,120,120,104],
[88,107,103,119,90,90,0,119,106],
[98,100,86,112,84,90,91,0,94],
[111,105,105,121,98,106,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,120,110,102,117,93,107],
[96,0,98,94,81,93,107,91,105],
[103,112,0,115,100,91,104,103,102],
[90,116,95,0,89,90,106,86,104],
[100,129,110,121,0,109,124,107,108],
[108,117,119,120,101,0,116,116,113],
[93,103,106,104,86,94,0,97,98],
[117,119,107,124,103,94,113,0,104],
[103,105,108,106,102,97,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,126,137,92,103,121,115,86],
[108,0,115,126,74,110,121,108,94],
[84,95,0,120,76,91,116,112,73],
[73,84,90,0,80,75,79,97,64],
[118,136,134,130,0,95,131,120,91],
[107,100,119,135,115,0,121,134,109],
[89,89,94,131,79,89,0,108,73],
[95,102,98,113,90,76,102,0,66],
[124,116,137,146,119,101,137,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,100,95,120,91,108,114,93],
[93,0,93,98,100,84,112,104,99],
[110,117,0,105,111,92,115,103,90],
[115,112,105,0,112,110,108,113,83],
[90,110,99,98,0,81,110,96,92],
[119,126,118,100,129,0,113,124,111],
[102,98,95,102,100,97,0,110,93],
[96,106,107,97,114,86,100,0,87],
[117,111,120,127,118,99,117,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,89,106,89,103,78,71],
[106,0,100,86,109,90,124,104,84],
[102,110,0,78,118,84,144,110,106],
[121,124,132,0,108,74,140,123,107],
[104,101,92,102,0,66,153,103,129],
[121,120,126,136,144,0,175,125,102],
[107,86,66,70,57,35,0,86,78],
[132,106,100,87,107,85,124,0,90],
[139,126,104,103,81,108,132,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,118,103,101,102,107,108],
[101,0,104,116,103,98,101,111,92],
[104,106,0,120,103,101,98,112,106],
[92,94,90,0,90,91,106,105,90],
[107,107,107,120,0,98,110,108,116],
[109,112,109,119,112,0,105,111,106],
[108,109,112,104,100,105,0,98,103],
[103,99,98,105,102,99,112,0,99],
[102,118,104,120,94,104,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,148,108,113,112,114,118,114,91],
[62,0,66,65,98,77,65,69,73],
[102,144,0,115,109,105,114,94,124],
[97,145,95,0,128,108,107,120,112],
[98,112,101,82,0,80,94,113,123],
[96,133,105,102,130,0,97,104,114],
[92,145,96,103,116,113,0,115,98],
[96,141,116,90,97,106,95,0,110],
[119,137,86,98,87,96,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,99,92,93,100,87,102],
[109,0,99,102,97,116,100,92,104],
[111,111,0,106,100,107,104,97,108],
[111,108,104,0,97,111,107,101,104],
[118,113,110,113,0,113,100,107,115],
[117,94,103,99,97,0,102,96,108],
[110,110,106,103,110,108,0,102,104],
[123,118,113,109,103,114,108,0,109],
[108,106,102,106,95,102,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,104,116,120,110,103,118,105],
[105,0,107,116,120,118,106,129,122],
[106,103,0,104,109,117,94,116,103],
[94,94,106,0,109,116,105,117,114],
[90,90,101,101,0,96,92,103,103],
[100,92,93,94,114,0,91,104,104],
[107,104,116,105,118,119,0,126,107],
[92,81,94,93,107,106,84,0,92],
[105,88,107,96,107,106,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,124,109,98,107,110,103,110],
[96,0,105,92,103,82,105,81,94],
[86,105,0,102,88,93,99,89,90],
[101,118,108,0,91,93,94,100,90],
[112,107,122,119,0,106,99,108,110],
[103,128,117,117,104,0,111,114,112],
[100,105,111,116,111,99,0,95,102],
[107,129,121,110,102,96,115,0,111],
[100,116,120,120,100,98,108,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,131,119,105,106,112,108,105],
[114,0,126,99,117,118,112,110,115],
[79,84,0,80,81,108,105,100,86],
[91,111,130,0,103,106,103,129,120],
[105,93,129,107,0,114,104,117,107],
[104,92,102,104,96,0,122,112,112],
[98,98,105,107,106,88,0,124,106],
[102,100,110,81,93,98,86,0,99],
[105,95,124,90,103,98,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,111,110,116,102,114,115],
[102,0,102,104,107,116,97,93,113],
[114,108,0,112,108,123,97,111,124],
[99,106,98,0,121,118,109,104,120],
[100,103,102,89,0,119,99,110,111],
[94,94,87,92,91,0,91,95,109],
[108,113,113,101,111,119,0,109,124],
[96,117,99,106,100,115,101,0,115],
[95,97,86,90,99,101,86,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,103,108,108,110,115,105,100],
[92,0,103,101,102,100,117,100,96],
[107,107,0,104,112,106,116,104,102],
[102,109,106,0,114,114,111,97,103],
[102,108,98,96,0,115,106,101,108],
[100,110,104,96,95,0,121,93,98],
[95,93,94,99,104,89,0,96,98],
[105,110,106,113,109,117,114,0,105],
[110,114,108,107,102,112,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,112,94,122,107,115,100],
[104,0,108,101,105,101,98,110,94],
[112,102,0,93,105,105,108,112,105],
[98,109,117,0,95,109,103,99,106],
[116,105,105,115,0,114,112,105,107],
[88,109,105,101,96,0,106,111,108],
[103,112,102,107,98,104,0,111,108],
[95,100,98,111,105,99,99,0,96],
[110,116,105,104,103,102,102,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,110,105,122,103,111,109],
[105,0,125,117,126,120,122,129,115],
[97,85,0,107,102,112,90,116,95],
[100,93,103,0,96,117,97,103,106],
[105,84,108,114,0,109,110,104,96],
[88,90,98,93,101,0,90,102,91],
[107,88,120,113,100,120,0,95,111],
[99,81,94,107,106,108,115,0,95],
[101,95,115,104,114,119,99,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,96,102,114,110,101,100,117],
[102,0,94,89,100,90,106,101,96],
[114,116,0,112,115,96,110,106,116],
[108,121,98,0,106,99,114,100,109],
[96,110,95,104,0,102,109,98,106],
[100,120,114,111,108,0,115,99,110],
[109,104,100,96,101,95,0,102,105],
[110,109,104,110,112,111,108,0,124],
[93,114,94,101,104,100,105,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,108,98,108,97,99,104],
[97,0,108,104,92,98,101,105,88],
[105,102,0,108,96,99,98,101,96],
[102,106,102,0,105,104,92,107,95],
[112,118,114,105,0,112,106,112,105],
[102,112,111,106,98,0,92,104,99],
[113,109,112,118,104,118,0,113,107],
[111,105,109,103,98,106,97,0,95],
[106,122,114,115,105,111,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,108,93,88,93,103,105],
[100,0,120,112,90,108,128,96,109],
[104,90,0,84,84,89,90,92,78],
[102,98,126,0,117,109,117,114,110],
[117,120,126,93,0,119,115,121,106],
[122,102,121,101,91,0,116,105,107],
[117,82,120,93,95,94,0,84,113],
[107,114,118,96,89,105,126,0,103],
[105,101,132,100,104,103,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,92,97,101,96,109,102],
[99,0,110,99,103,103,90,102,90],
[103,100,0,99,105,86,101,114,96],
[118,111,111,0,106,116,95,126,113],
[113,107,105,104,0,92,101,118,113],
[109,107,124,94,118,0,93,115,119],
[114,120,109,115,109,117,0,118,105],
[101,108,96,84,92,95,92,0,103],
[108,120,114,97,97,91,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,105,94,102,102,98,104],
[107,0,123,104,100,106,108,109,108],
[90,87,0,106,102,104,94,102,107],
[105,106,104,0,93,97,84,99,107],
[116,110,108,117,0,105,99,107,117],
[108,104,106,113,105,0,86,88,102],
[108,102,116,126,111,124,0,105,106],
[112,101,108,111,103,122,105,0,100],
[106,102,103,103,93,108,104,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,74,115,97,113,70,108,96],
[125,0,129,94,105,120,113,107,131],
[136,81,0,122,96,92,64,103,94],
[95,116,88,0,81,115,81,101,112],
[113,105,114,129,0,114,99,132,113],
[97,90,118,95,96,0,71,84,120],
[140,97,146,129,111,139,0,127,163],
[102,103,107,109,78,126,83,0,125],
[114,79,116,98,97,90,47,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,113,99,100,98,105,99,101],
[113,0,118,104,116,105,109,109,113],
[97,92,0,97,103,91,92,92,108],
[111,106,113,0,110,108,108,105,110],
[110,94,107,100,0,104,101,92,118],
[112,105,119,102,106,0,109,106,111],
[105,101,118,102,109,101,0,99,100],
[111,101,118,105,118,104,111,0,107],
[109,97,102,100,92,99,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,122,102,126,108,97,100,101],
[97,0,93,99,101,102,70,100,87],
[88,117,0,110,126,116,105,99,110],
[108,111,100,0,103,101,87,105,77],
[84,109,84,107,0,114,79,108,86],
[102,108,94,109,96,0,77,105,86],
[113,140,105,123,131,133,0,103,113],
[110,110,111,105,102,105,107,0,79],
[109,123,100,133,124,124,97,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,142,83,125,139,107,139,134,118],
[68,0,112,140,91,93,144,131,116],
[127,98,0,121,98,114,101,128,125],
[85,70,89,0,81,83,99,87,92],
[71,119,112,129,0,110,118,110,111],
[103,117,96,127,100,0,154,126,126],
[71,66,109,111,92,56,0,117,86],
[76,79,82,123,100,84,93,0,77],
[92,94,85,118,99,84,124,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,101,113,108,101,111,124,101],
[117,0,102,93,103,99,104,116,101],
[109,108,0,113,113,100,103,113,111],
[97,117,97,0,106,111,113,111,105],
[102,107,97,104,0,102,108,103,106],
[109,111,110,99,108,0,110,114,114],
[99,106,107,97,102,100,0,104,109],
[86,94,97,99,107,96,106,0,100],
[109,109,99,105,104,96,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,103,103,93,112,111,110,109],
[91,0,81,90,86,102,105,98,94],
[107,129,0,109,109,118,114,104,121],
[107,120,101,0,108,117,120,104,107],
[117,124,101,102,0,116,115,106,116],
[98,108,92,93,94,0,111,97,93],
[99,105,96,90,95,99,0,89,102],
[100,112,106,106,104,113,121,0,108],
[101,116,89,103,94,117,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,99,103,106,92,81,81,102],
[126,0,115,126,129,108,104,113,114],
[111,95,0,117,115,110,114,104,122],
[107,84,93,0,116,106,94,95,114],
[104,81,95,94,0,89,87,86,96],
[118,102,100,104,121,0,93,84,106],
[129,106,96,116,123,117,0,91,114],
[129,97,106,115,124,126,119,0,120],
[108,96,88,96,114,104,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,87,181,115,134,157,116,97],
[98,0,86,181,110,121,107,102,115],
[123,124,0,152,153,102,94,73,104],
[29,29,58,0,110,74,71,61,85],
[95,100,57,100,0,63,85,95,81],
[76,89,108,136,147,0,117,116,83],
[53,103,116,139,125,93,0,101,104],
[94,108,137,149,115,94,109,0,82],
[113,95,106,125,129,127,106,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,109,88,105,106,107,97,125],
[88,0,121,103,99,109,107,101,128],
[101,89,0,96,88,96,104,100,104],
[122,107,114,0,102,112,102,109,104],
[105,111,122,108,0,97,99,109,111],
[104,101,114,98,113,0,95,101,120],
[103,103,106,108,111,115,0,111,108],
[113,109,110,101,101,109,99,0,121],
[85,82,106,106,99,90,102,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,118,112,120,105,110,113,116],
[90,0,95,106,112,105,106,106,105],
[92,115,0,110,102,100,109,104,102],
[98,104,100,0,91,94,107,96,104],
[90,98,108,119,0,100,101,108,108],
[105,105,110,116,110,0,112,103,109],
[100,104,101,103,109,98,0,102,101],
[97,104,106,114,102,107,108,0,111],
[94,105,108,106,102,101,109,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,104,113,111,101,120,99],
[99,0,109,110,110,111,109,121,117],
[95,101,0,91,102,106,96,115,110],
[106,100,119,0,94,117,101,108,118],
[97,100,108,116,0,100,96,114,106],
[99,99,104,93,110,0,94,113,89],
[109,101,114,109,114,116,0,118,101],
[90,89,95,102,96,97,92,0,100],
[111,93,100,92,104,121,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,113,108,115,104,99,105,124],
[87,0,90,87,90,89,64,94,94],
[97,120,0,118,100,104,116,100,106],
[102,123,92,0,95,74,59,89,92],
[95,120,110,115,0,110,98,110,99],
[106,121,106,136,100,0,93,106,103],
[111,146,94,151,112,117,0,123,107],
[105,116,110,121,100,104,87,0,102],
[86,116,104,118,111,107,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,110,111,107,117,110,103],
[105,0,108,107,109,99,101,108,115],
[101,102,0,104,101,96,99,98,104],
[100,103,106,0,103,99,107,92,103],
[99,101,109,107,0,103,111,103,99],
[103,111,114,111,107,0,109,107,108],
[93,109,111,103,99,101,0,99,98],
[100,102,112,118,107,103,111,0,103],
[107,95,106,107,111,102,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,124,96,110,127,111,122],
[106,0,93,99,101,86,104,100,94],
[102,117,0,113,108,107,116,115,113],
[86,111,97,0,103,93,103,102,102],
[114,109,102,107,0,121,105,103,115],
[100,124,103,117,89,0,104,108,111],
[83,106,94,107,105,106,0,90,97],
[99,110,95,108,107,102,120,0,101],
[88,116,97,108,95,99,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,100,103,97,82,103,99],
[112,0,105,101,109,108,99,99,110],
[108,105,0,110,105,114,107,102,110],
[110,109,100,0,104,113,99,108,119],
[107,101,105,106,0,109,96,114,107],
[113,102,96,97,101,0,102,107,109],
[128,111,103,111,114,108,0,119,121],
[107,111,108,102,96,103,91,0,110],
[111,100,100,91,103,101,89,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,74,108,97,69,82,75],
[108,0,108,99,108,115,82,86,93],
[109,102,0,93,114,119,101,85,96],
[136,111,117,0,111,109,86,100,116],
[102,102,96,99,0,98,76,75,85],
[113,95,91,101,112,0,76,94,95],
[141,128,109,124,134,134,0,105,115],
[128,124,125,110,135,116,105,0,109],
[135,117,114,94,125,115,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,115,107,98,118,111,111],
[96,0,101,113,104,90,107,113,105],
[95,109,0,119,115,105,114,120,114],
[95,97,91,0,92,80,97,100,101],
[103,106,95,118,0,92,106,113,109],
[112,120,105,130,118,0,119,119,115],
[92,103,96,113,104,91,0,106,107],
[99,97,90,110,97,91,104,0,100],
[99,105,96,109,101,95,103,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,104,118,104,100,106,99],
[108,0,105,109,111,107,101,92,92],
[100,105,0,110,105,98,96,109,97],
[106,101,100,0,106,100,103,97,96],
[92,99,105,104,0,93,87,102,92],
[106,103,112,110,117,0,96,96,103],
[110,109,114,107,123,114,0,100,99],
[104,118,101,113,108,114,110,0,106],
[111,118,113,114,118,107,111,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,108,124,103,101,105,128,119],
[113,0,96,103,109,87,86,95,100],
[102,114,0,116,107,112,110,92,119],
[86,107,94,0,117,104,97,111,96],
[107,101,103,93,0,88,109,86,115],
[109,123,98,106,122,0,123,116,123],
[105,124,100,113,101,87,0,95,107],
[82,115,118,99,124,94,115,0,99],
[91,110,91,114,95,87,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,99,101,123,80,96,86,101],
[120,0,112,110,142,112,110,109,105],
[111,98,0,121,124,98,109,104,122],
[109,100,89,0,136,78,119,121,125],
[87,68,86,74,0,60,74,72,99],
[130,98,112,132,150,0,119,121,131],
[114,100,101,91,136,91,0,107,107],
[124,101,106,89,138,89,103,0,110],
[109,105,88,85,111,79,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,100,109,104,112,99,122],
[100,0,100,105,114,96,111,100,113],
[92,110,0,83,105,102,96,102,113],
[110,105,127,0,134,108,108,105,102],
[101,96,105,76,0,100,100,97,105],
[106,114,108,102,110,0,116,112,111],
[98,99,114,102,110,94,0,101,127],
[111,110,108,105,113,98,109,0,122],
[88,97,97,108,105,99,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,90,99,120,86,100,102,140],
[118,0,104,114,125,79,91,102,130],
[120,106,0,89,127,97,113,127,102],
[111,96,121,0,101,102,115,94,93],
[90,85,83,109,0,75,100,108,124],
[124,131,113,108,135,0,110,94,128],
[110,119,97,95,110,100,0,100,102],
[108,108,83,116,102,116,110,0,116],
[70,80,108,117,86,82,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,114,108,102,106,85,96],
[113,0,105,118,121,96,120,95,111],
[119,105,0,116,120,107,112,128,114],
[96,92,94,0,110,100,108,103,103],
[102,89,90,100,0,91,106,93,102],
[108,114,103,110,119,0,120,111,104],
[104,90,98,102,104,90,0,95,100],
[125,115,82,107,117,99,115,0,98],
[114,99,96,107,108,106,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,125,105,114,104,111,91],
[113,0,106,120,107,127,102,103,95],
[106,104,0,114,107,112,99,108,99],
[85,90,96,0,98,108,93,94,94],
[105,103,103,112,0,105,104,105,99],
[96,83,98,102,105,0,93,101,100],
[106,108,111,117,106,117,0,110,105],
[99,107,102,116,105,109,100,0,96],
[119,115,111,116,111,110,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,110,98,119,114,120,131,123],
[87,0,117,75,103,89,99,117,103],
[100,93,0,92,87,106,119,118,99],
[112,135,118,0,100,106,118,134,118],
[91,107,123,110,0,98,109,137,131],
[96,121,104,104,112,0,118,135,121],
[90,111,91,92,101,92,0,103,97],
[79,93,92,76,73,75,107,0,96],
[87,107,111,92,79,89,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,104,113,115,105,113,113],
[99,0,104,92,112,112,118,113,110],
[97,106,0,109,110,116,105,100,101],
[106,118,101,0,117,111,106,110,105],
[97,98,100,93,0,105,105,99,100],
[95,98,94,99,105,0,99,103,99],
[105,92,105,104,105,111,0,96,100],
[97,97,110,100,111,107,114,0,109],
[97,100,109,105,110,111,110,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,117,123,102,100,107,119],
[119,0,101,112,110,121,113,111,106],
[112,109,0,123,118,107,98,115,121],
[93,98,87,0,106,105,99,102,111],
[87,100,92,104,0,90,90,102,99],
[108,89,103,105,120,0,95,105,106],
[110,97,112,111,120,115,0,118,129],
[103,99,95,108,108,105,92,0,121],
[91,104,89,99,111,104,81,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,123,100,117,102,96,95],
[106,0,89,111,107,103,98,114,95],
[95,121,0,117,98,108,80,119,113],
[87,99,93,0,84,106,81,93,112],
[110,103,112,126,0,114,97,109,110],
[93,107,102,104,96,0,101,114,110],
[108,112,130,129,113,109,0,101,121],
[114,96,91,117,101,96,109,0,122],
[115,115,97,98,100,100,89,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,99,101,104,109,102,104],
[99,0,106,94,117,106,119,93,91],
[94,104,0,90,99,94,114,108,95],
[111,116,120,0,98,90,104,100,101],
[109,93,111,112,0,85,124,103,107],
[106,104,116,120,125,0,112,118,114],
[101,91,96,106,86,98,0,99,112],
[108,117,102,110,107,92,111,0,125],
[106,119,115,109,103,96,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,98,150,106,111,95,95,92],
[51,0,96,123,50,128,62,63,104],
[112,114,0,125,93,153,119,110,62],
[60,87,85,0,93,118,68,78,75],
[104,160,117,117,0,150,119,102,96],
[99,82,57,92,60,0,71,85,25],
[115,148,91,142,91,139,0,127,110],
[115,147,100,132,108,125,83,0,90],
[118,106,148,135,114,185,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,69,137,103,69,85,79,99],
[126,0,62,152,120,112,71,113,105],
[141,148,0,152,147,156,122,124,101],
[73,58,58,0,101,68,92,104,38],
[107,90,63,109,0,55,74,104,89],
[141,98,54,142,155,0,92,102,103],
[125,139,88,118,136,118,0,113,95],
[131,97,86,106,106,108,97,0,108],
[111,105,109,172,121,107,115,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,104,96,109,110,116,105],
[104,0,118,100,87,106,96,112,111],
[98,92,0,92,84,111,104,107,99],
[106,110,118,0,99,119,125,114,111],
[114,123,126,111,0,128,104,123,111],
[101,104,99,91,82,0,98,101,96],
[100,114,106,85,106,112,0,109,107],
[94,98,103,96,87,109,101,0,116],
[105,99,111,99,99,114,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,149,119,121,173,133,149,91],
[89,0,168,135,137,128,151,134,121],
[61,42,0,149,118,118,149,118,149],
[91,75,61,0,146,139,191,155,130],
[89,73,92,64,0,142,140,103,128],
[37,82,92,71,68,0,158,67,106],
[77,59,61,19,70,52,0,86,40],
[61,76,92,55,107,143,124,0,130],
[119,89,61,80,82,104,170,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,99,93,106,113,122,98],
[98,0,120,113,111,95,119,107,99],
[96,90,0,102,80,98,126,105,98],
[111,97,108,0,81,109,131,125,109],
[117,99,130,129,0,109,137,127,112],
[104,115,112,101,101,0,119,115,109],
[97,91,84,79,73,91,0,96,89],
[88,103,105,85,83,95,114,0,102],
[112,111,112,101,98,101,121,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,101,103,106,97,114,96],
[109,0,107,99,92,90,106,107,93],
[97,103,0,100,97,95,98,94,101],
[109,111,110,0,94,112,105,115,96],
[107,118,113,116,0,103,112,114,106],
[104,120,115,98,107,0,100,112,101],
[113,104,112,105,98,110,0,105,107],
[96,103,116,95,96,98,105,0,98],
[114,117,109,114,104,109,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,107,105,98,107,120,105],
[96,0,98,117,97,99,109,115,117],
[106,112,0,110,102,105,114,115,114],
[103,93,100,0,101,85,118,118,129],
[105,113,108,109,0,101,124,108,108],
[112,111,105,125,109,0,119,126,113],
[103,101,96,92,86,91,0,113,106],
[90,95,95,92,102,84,97,0,105],
[105,93,96,81,102,97,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,93,98,98,87,99,94],
[119,0,114,106,99,118,98,101,114],
[102,96,0,111,105,99,98,107,103],
[117,104,99,0,100,109,102,96,107],
[112,111,105,110,0,117,109,117,122],
[112,92,111,101,93,0,97,95,104],
[123,112,112,108,101,113,0,106,107],
[111,109,103,114,93,115,104,0,111],
[116,96,107,103,88,106,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,98,99,97,96,107,114],
[114,0,104,112,101,116,120,108,112],
[100,106,0,105,115,102,96,97,111],
[112,98,105,0,109,95,101,97,116],
[111,109,95,101,0,95,102,105,105],
[113,94,108,115,115,0,105,117,111],
[114,90,114,109,108,105,0,101,94],
[103,102,113,113,105,93,109,0,105],
[96,98,99,94,105,99,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,110,118,116,98,113,110],
[93,0,108,85,95,95,91,86,95],
[94,102,0,101,108,105,94,93,110],
[100,125,109,0,120,110,109,105,107],
[92,115,102,90,0,103,94,96,97],
[94,115,105,100,107,0,102,103,106],
[112,119,116,101,116,108,0,108,106],
[97,124,117,105,114,107,102,0,105],
[100,115,100,103,113,104,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,125,96,104,92,94,122],
[109,0,119,94,122,96,111,87,120],
[108,91,0,101,113,95,98,51,119],
[85,116,109,0,116,124,102,107,125],
[114,88,97,94,0,97,64,72,89],
[106,114,115,86,113,0,118,96,103],
[118,99,112,108,146,92,0,79,117],
[116,123,159,103,138,114,131,0,114],
[88,90,91,85,121,107,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,79,101,99,115,97,128,97],
[111,0,108,104,127,125,126,107,100],
[131,102,0,97,102,131,121,111,100],
[109,106,113,0,102,135,116,109,108],
[111,83,108,108,0,121,104,104,97],
[95,85,79,75,89,0,113,101,79],
[113,84,89,94,106,97,0,105,111],
[82,103,99,101,106,109,105,0,98],
[113,110,110,102,113,131,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,95,108,77,105,124,104,111],
[117,0,123,118,94,115,131,128,131],
[115,87,0,119,107,113,127,124,126],
[102,92,91,0,108,92,130,130,102],
[133,116,103,102,0,118,132,125,130],
[105,95,97,118,92,0,132,103,114],
[86,79,83,80,78,78,0,81,85],
[106,82,86,80,85,107,129,0,118],
[99,79,84,108,80,96,125,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,153,151,120,109,121,93,97],
[105,0,128,134,116,137,104,99,90],
[57,82,0,122,108,75,88,39,75],
[59,76,88,0,70,82,75,53,41],
[90,94,102,140,0,73,121,71,67],
[101,73,135,128,137,0,109,61,106],
[89,106,122,135,89,101,0,96,56],
[117,111,171,157,139,149,114,0,94],
[113,120,135,169,143,104,154,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,130,110,100,117,130,105,129],
[95,0,119,114,103,112,117,94,110],
[80,91,0,104,91,94,111,102,116],
[100,96,106,0,108,111,124,110,119],
[110,107,119,102,0,104,112,117,117],
[93,98,116,99,106,0,117,100,116],
[80,93,99,86,98,93,0,94,111],
[105,116,108,100,93,110,116,0,122],
[81,100,94,91,93,94,99,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,113,94,101,102,98,88],
[115,0,103,107,102,97,98,103,100],
[113,107,0,117,94,107,98,109,89],
[97,103,93,0,92,95,103,107,98],
[116,108,116,118,0,102,102,109,107],
[109,113,103,115,108,0,101,112,94],
[108,112,112,107,108,109,0,105,94],
[112,107,101,103,101,98,105,0,94],
[122,110,121,112,103,116,116,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,104,94,104,106,118,107],
[105,0,105,99,110,111,101,115,96],
[105,105,0,107,101,103,108,118,108],
[106,111,103,0,104,97,110,122,95],
[116,100,109,106,0,106,103,117,105],
[106,99,107,113,104,0,109,109,98],
[104,109,102,100,107,101,0,109,96],
[92,95,92,88,93,101,101,0,95],
[103,114,102,115,105,112,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,86,91,92,111,76,84,88],
[116,0,77,122,123,129,112,87,142],
[124,133,0,118,104,114,126,89,125],
[119,88,92,0,118,127,105,119,120],
[118,87,106,92,0,128,93,102,141],
[99,81,96,83,82,0,96,57,91],
[134,98,84,105,117,114,0,83,118],
[126,123,121,91,108,153,127,0,131],
[122,68,85,90,69,119,92,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,89,85,112,113,97,110,97],
[97,0,83,94,103,102,100,94,109],
[121,127,0,108,118,119,124,102,122],
[125,116,102,0,116,108,103,104,104],
[98,107,92,94,0,96,106,102,108],
[97,108,91,102,114,0,96,101,112],
[113,110,86,107,104,114,0,113,114],
[100,116,108,106,108,109,97,0,111],
[113,101,88,106,102,98,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,91,117,86,133,105,106,102],
[101,0,109,128,92,121,103,102,106],
[119,101,0,129,114,147,121,121,126],
[93,82,81,0,82,126,101,89,85],
[124,118,96,128,0,126,141,122,124],
[77,89,63,84,84,0,101,92,98],
[105,107,89,109,69,109,0,97,89],
[104,108,89,121,88,118,113,0,135],
[108,104,84,125,86,112,121,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,90,114,104,106,120,106,103],
[90,0,93,105,98,100,112,103,94],
[120,117,0,111,109,112,122,104,110],
[96,105,99,0,93,102,114,96,93],
[106,112,101,117,0,112,117,104,114],
[104,110,98,108,98,0,111,109,110],
[90,98,88,96,93,99,0,93,86],
[104,107,106,114,106,101,117,0,104],
[107,116,100,117,96,100,124,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,111,124,100,105,114,100,115],
[133,0,111,140,92,122,108,113,117],
[99,99,0,136,89,118,120,101,119],
[86,70,74,0,98,78,99,75,92],
[110,118,121,112,0,101,104,86,115],
[105,88,92,132,109,0,126,111,110],
[96,102,90,111,106,84,0,79,117],
[110,97,109,135,124,99,131,0,115],
[95,93,91,118,95,100,93,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,108,110,109,99,96,108],
[105,0,96,110,113,115,105,108,108],
[112,114,0,103,115,113,103,121,102],
[102,100,107,0,114,109,100,97,105],
[100,97,95,96,0,108,99,102,95],
[101,95,97,101,102,0,102,103,97],
[111,105,107,110,111,108,0,105,106],
[114,102,89,113,108,107,105,0,104],
[102,102,108,105,115,113,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,132,111,97,123,100,104],
[95,0,114,111,127,106,142,108,117],
[104,96,0,107,95,93,121,89,115],
[78,99,103,0,117,97,110,91,97],
[99,83,115,93,0,90,89,63,103],
[113,104,117,113,120,0,131,112,114],
[87,68,89,100,121,79,0,77,90],
[110,102,121,119,147,98,133,0,118],
[106,93,95,113,107,96,120,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,135,89,60,84,107,77],
[115,0,41,139,115,73,126,125,68],
[107,169,0,136,120,124,126,92,110],
[75,71,74,0,75,75,66,53,43],
[121,95,90,135,0,103,102,107,83],
[150,137,86,135,107,0,109,107,122],
[126,84,84,144,108,101,0,120,92],
[103,85,118,157,103,103,90,0,82],
[133,142,100,167,127,88,118,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,100,107,104,93,92,92],
[108,0,111,107,99,103,71,101,94],
[101,99,0,102,105,105,98,94,85],
[110,103,108,0,104,107,100,119,89],
[103,111,105,106,0,94,88,98,89],
[106,107,105,103,116,0,100,89,84],
[117,139,112,110,122,110,0,98,108],
[118,109,116,91,112,121,112,0,97],
[118,116,125,121,121,126,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,112,116,103,113,117,107,111],
[90,0,95,105,94,89,103,94,93],
[98,115,0,105,110,101,119,110,101],
[94,105,105,0,108,93,99,104,99],
[107,116,100,102,0,112,97,119,103],
[97,121,109,117,98,0,100,110,92],
[93,107,91,111,113,110,0,112,109],
[103,116,100,106,91,100,98,0,108],
[99,117,109,111,107,118,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,108,116,111,113,112,105],
[96,0,106,96,97,97,108,100,103],
[94,104,0,100,106,96,105,95,96],
[102,114,110,0,102,107,110,96,107],
[94,113,104,108,0,97,114,111,108],
[99,113,114,103,113,0,117,110,112],
[97,102,105,100,96,93,0,102,102],
[98,110,115,114,99,100,108,0,102],
[105,107,114,103,102,98,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,125,110,94,119,100,123,112],
[100,0,107,95,94,114,100,97,124],
[85,103,0,100,94,114,97,92,112],
[100,115,110,0,96,127,118,115,131],
[116,116,116,114,0,128,102,122,127],
[91,96,96,83,82,0,83,93,103],
[110,110,113,92,108,127,0,111,116],
[87,113,118,95,88,117,99,0,105],
[98,86,98,79,83,107,94,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,110,103,111,113,108,104],
[103,0,111,113,94,105,109,113,110],
[99,99,0,112,84,100,107,105,102],
[100,97,98,0,96,93,103,109,100],
[107,116,126,114,0,94,111,110,115],
[99,105,110,117,116,0,113,109,103],
[97,101,103,107,99,97,0,96,97],
[102,97,105,101,100,101,114,0,97],
[106,100,108,110,95,107,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,129,97,102,108,104,117,105],
[98,0,114,84,65,118,129,144,120],
[81,96,0,76,74,84,84,101,125],
[113,126,134,0,105,121,131,143,138],
[108,145,136,105,0,143,156,143,133],
[102,92,126,89,67,0,123,149,119],
[106,81,126,79,54,87,0,120,134],
[93,66,109,67,67,61,90,0,111],
[105,90,85,72,77,91,76,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,124,120,124,117,116,123],
[105,0,114,115,125,112,114,121,120],
[94,96,0,107,107,102,107,104,115],
[86,95,103,0,97,103,86,100,107],
[90,85,103,113,0,106,104,99,114],
[86,98,108,107,104,0,109,106,115],
[93,96,103,124,106,101,0,103,119],
[94,89,106,110,111,104,107,0,117],
[87,90,95,103,96,95,91,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,124,100,116,104,111,105],
[106,0,99,132,109,123,117,111,110],
[106,111,0,125,111,112,114,114,104],
[86,78,85,0,94,103,95,108,89],
[110,101,99,116,0,104,106,108,91],
[94,87,98,107,106,0,102,102,95],
[106,93,96,115,104,108,0,101,98],
[99,99,96,102,102,108,109,0,101],
[105,100,106,121,119,115,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,116,115,96,116,114,130],
[92,0,91,108,114,91,105,106,107],
[97,119,0,114,114,108,129,109,122],
[94,102,96,0,112,104,119,103,122],
[95,96,96,98,0,105,118,120,130],
[114,119,102,106,105,0,125,112,126],
[94,105,81,91,92,85,0,89,106],
[96,104,101,107,90,98,121,0,121],
[80,103,88,88,80,84,104,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,107,101,117,101,95,110,105],
[88,0,109,98,108,112,109,94,113],
[103,101,0,99,95,102,100,100,106],
[109,112,111,0,110,94,109,107,116],
[93,102,115,100,0,109,102,108,103],
[109,98,108,116,101,0,102,104,109],
[115,101,110,101,108,108,0,96,105],
[100,116,110,103,102,106,114,0,108],
[105,97,104,94,107,101,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,124,124,110,89,136,131,116],
[83,0,122,109,95,87,109,112,116],
[86,88,0,112,78,82,109,118,100],
[86,101,98,0,95,119,111,84,95],
[100,115,132,115,0,118,127,123,137],
[121,123,128,91,92,0,112,111,118],
[74,101,101,99,83,98,0,84,98],
[79,98,92,126,87,99,126,0,104],
[94,94,110,115,73,92,112,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,102,103,110,121,94,127,132],
[77,0,108,106,110,103,98,126,130],
[108,102,0,122,118,98,104,133,141],
[107,104,88,0,74,102,104,125,122],
[100,100,92,136,0,130,93,133,130],
[89,107,112,108,80,0,108,95,129],
[116,112,106,106,117,102,0,135,160],
[83,84,77,85,77,115,75,0,111],
[78,80,69,88,80,81,50,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,111,102,102,105,115,113],
[99,0,121,112,97,93,104,128,105],
[97,89,0,99,108,96,97,106,97],
[99,98,111,0,91,87,103,118,108],
[108,113,102,119,0,105,91,114,118],
[108,117,114,123,105,0,92,129,107],
[105,106,113,107,119,118,0,120,118],
[95,82,104,92,96,81,90,0,88],
[97,105,113,102,92,103,92,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,101,106,105,113,96,110],
[101,0,109,99,100,103,115,102,98],
[106,101,0,104,95,103,121,98,113],
[109,111,106,0,98,110,117,102,115],
[104,110,115,112,0,108,117,97,112],
[105,107,107,100,102,0,111,96,103],
[97,95,89,93,93,99,0,83,97],
[114,108,112,108,113,114,127,0,102],
[100,112,97,95,98,107,113,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,108,105,109,106,96,101,96],
[115,0,113,94,99,102,98,95,105],
[102,97,0,90,101,114,84,108,101],
[105,116,120,0,113,127,111,111,106],
[101,111,109,97,0,111,101,101,108],
[104,108,96,83,99,0,101,101,98],
[114,112,126,99,109,109,0,116,114],
[109,115,102,99,109,109,94,0,96],
[114,105,109,104,102,112,96,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,116,107,105,113,101,112,105],
[84,0,94,100,81,102,93,96,94],
[94,116,0,110,100,110,109,121,102],
[103,110,100,0,88,109,102,100,93],
[105,129,110,122,0,122,101,120,110],
[97,108,100,101,88,0,95,102,106],
[109,117,101,108,109,115,0,105,103],
[98,114,89,110,90,108,105,0,96],
[105,116,108,117,100,104,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,96,103,139,115,107,137,103],
[83,0,80,80,110,112,96,95,91],
[114,130,0,96,128,113,100,124,100],
[107,130,114,0,115,105,96,124,108],
[71,100,82,95,0,96,97,114,80],
[95,98,97,105,114,0,99,105,93],
[103,114,110,114,113,111,0,114,100],
[73,115,86,86,96,105,96,0,76],
[107,119,110,102,130,117,110,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,97,102,118,110,106,108],
[102,0,112,101,100,112,104,104,109],
[91,98,0,101,97,106,96,105,101],
[113,109,109,0,110,116,96,110,112],
[108,110,113,100,0,111,103,105,114],
[92,98,104,94,99,0,102,97,102],
[100,106,114,114,107,108,0,107,110],
[104,106,105,100,105,113,103,0,106],
[102,101,109,98,96,108,100,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,129,126,111,103,96,107,111],
[100,0,103,129,94,77,110,95,84],
[81,107,0,102,96,98,106,105,88],
[84,81,108,0,97,98,108,114,69],
[99,116,114,113,0,101,104,102,102],
[107,133,112,112,109,0,104,109,99],
[114,100,104,102,106,106,0,106,83],
[103,115,105,96,108,101,104,0,111],
[99,126,122,141,108,111,127,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,85,95,93,100,117,114],
[115,0,123,116,111,127,115,135,102],
[119,87,0,109,105,114,123,120,89],
[125,94,101,0,125,113,115,125,107],
[115,99,105,85,0,116,112,125,113],
[117,83,96,97,94,0,110,121,90],
[110,95,87,95,98,100,0,119,86],
[93,75,90,85,85,89,91,0,89],
[96,108,121,103,97,120,124,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,101,115,106,103,111,100,101],
[99,0,93,105,96,94,95,105,86],
[109,117,0,116,107,110,104,109,109],
[95,105,94,0,107,99,103,100,110],
[104,114,103,103,0,101,102,103,99],
[107,116,100,111,109,0,100,111,111],
[99,115,106,107,108,110,0,94,112],
[110,105,101,110,107,99,116,0,104],
[109,124,101,100,111,99,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,106,116,102,105,114,106],
[102,0,106,123,112,104,107,106,99],
[102,104,0,111,117,99,106,103,108],
[104,87,99,0,106,100,100,98,101],
[94,98,93,104,0,85,98,107,93],
[108,106,111,110,125,0,111,128,105],
[105,103,104,110,112,99,0,106,99],
[96,104,107,112,103,82,104,0,100],
[104,111,102,109,117,105,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,106,125,105,96,116,115],
[108,0,111,108,147,128,108,129,104],
[107,99,0,108,137,97,102,109,95],
[104,102,102,0,138,115,105,109,109],
[85,63,73,72,0,80,50,86,64],
[105,82,113,95,130,0,102,104,91],
[114,102,108,105,160,108,0,95,109],
[94,81,101,101,124,106,115,0,79],
[95,106,115,101,146,119,101,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,108,92,89,100,93,101],
[104,0,85,102,88,75,85,97,91],
[117,125,0,90,98,122,102,115,106],
[102,108,120,0,93,110,126,107,125],
[118,122,112,117,0,106,99,117,119],
[121,135,88,100,104,0,103,93,104],
[110,125,108,84,111,107,0,104,113],
[117,113,95,103,93,117,106,0,114],
[109,119,104,85,91,106,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,116,117,103,110,105,108,99],
[97,0,104,105,97,114,94,117,101],
[94,106,0,109,98,111,95,119,97],
[93,105,101,0,99,101,91,118,93],
[107,113,112,111,0,108,98,106,111],
[100,96,99,109,102,0,91,115,104],
[105,116,115,119,112,119,0,112,105],
[102,93,91,92,104,95,98,0,103],
[111,109,113,117,99,106,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,122,121,106,96,106,116,90],
[98,0,140,128,98,127,120,128,117],
[88,70,0,101,79,102,109,106,95],
[89,82,109,0,82,100,92,94,79],
[104,112,131,128,0,111,111,128,111],
[114,83,108,110,99,0,112,111,91],
[104,90,101,118,99,98,0,110,76],
[94,82,104,116,82,99,100,0,72],
[120,93,115,131,99,119,134,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,98,93,78,80,82,85,94],
[121,0,101,110,82,87,87,88,101],
[112,109,0,113,80,90,94,95,104],
[117,100,97,0,85,101,86,96,106],
[132,128,130,125,0,103,94,109,115],
[130,123,120,109,107,0,98,105,122],
[128,123,116,124,116,112,0,103,123],
[125,122,115,114,101,105,107,0,100],
[116,109,106,104,95,88,87,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,98,144,69,122,132,92,90],
[119,0,150,122,114,107,114,97,98],
[112,60,0,108,58,80,105,61,63],
[66,88,102,0,66,81,106,81,57],
[141,96,152,144,0,112,137,95,117],
[88,103,130,129,98,0,164,111,97],
[78,96,105,104,73,46,0,104,102],
[118,113,149,129,115,99,106,0,97],
[120,112,147,153,93,113,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,120,112,135,117,121,104,117],
[86,0,103,104,101,100,109,112,98],
[90,107,0,112,110,109,97,105,105],
[98,106,98,0,107,103,112,92,108],
[75,109,100,103,0,109,107,108,93],
[93,110,101,107,101,0,117,105,102],
[89,101,113,98,103,93,0,108,98],
[106,98,105,118,102,105,102,0,99],
[93,112,105,102,117,108,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,110,132,101,104,112,120,110],
[79,0,97,106,89,88,103,88,109],
[100,113,0,106,106,100,112,103,111],
[78,104,104,0,84,81,83,101,99],
[109,121,104,126,0,98,93,113,117],
[106,122,110,129,112,0,108,100,116],
[98,107,98,127,117,102,0,92,112],
[90,122,107,109,97,110,118,0,112],
[100,101,99,111,93,94,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,99,103,119,110,120,103],
[100,0,125,112,97,119,107,103,121],
[97,85,0,95,89,121,96,106,109],
[111,98,115,0,114,118,99,104,111],
[107,113,121,96,0,121,96,109,110],
[91,91,89,92,89,0,100,99,97],
[100,103,114,111,114,110,0,102,110],
[90,107,104,106,101,111,108,0,113],
[107,89,101,99,100,113,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,116,105,116,102,109,114,100],
[96,0,107,87,115,98,108,109,104],
[94,103,0,100,107,100,105,99,95],
[105,123,110,0,120,98,109,112,105],
[94,95,103,90,0,102,95,100,98],
[108,112,110,112,108,0,112,115,102],
[101,102,105,101,115,98,0,112,113],
[96,101,111,98,110,95,98,0,98],
[110,106,115,105,112,108,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,114,118,108,118,112,104,113],
[94,0,104,104,99,104,104,105,92],
[96,106,0,116,97,104,96,100,98],
[92,106,94,0,86,84,91,86,94],
[102,111,113,124,0,98,102,106,94],
[92,106,106,126,112,0,112,109,109],
[98,106,114,119,108,98,0,107,101],
[106,105,110,124,104,101,103,0,105],
[97,118,112,116,116,101,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,97,100,108,95,93,106,112],
[118,0,95,100,102,89,88,114,107],
[113,115,0,127,99,111,99,133,130],
[110,110,83,0,113,104,93,112,113],
[102,108,111,97,0,104,110,129,121],
[115,121,99,106,106,0,103,118,113],
[117,122,111,117,100,107,0,127,129],
[104,96,77,98,81,92,83,0,117],
[98,103,80,97,89,97,81,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,95,105,106,101,101,103,114],
[101,0,95,106,100,102,102,107,100],
[115,115,0,120,109,116,110,105,115],
[105,104,90,0,100,98,96,94,105],
[104,110,101,110,0,104,103,93,116],
[109,108,94,112,106,0,100,94,111],
[109,108,100,114,107,110,0,114,104],
[107,103,105,116,117,116,96,0,115],
[96,110,95,105,94,99,106,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,100,101,111,92,87,97,101],
[122,0,109,113,118,115,107,97,105],
[110,101,0,111,108,108,91,109,97],
[109,97,99,0,116,110,99,98,100],
[99,92,102,94,0,94,90,92,89],
[118,95,102,100,116,0,109,99,96],
[123,103,119,111,120,101,0,111,107],
[113,113,101,112,118,111,99,0,95],
[109,105,113,110,121,114,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,109,107,115,104,128,114],
[97,0,107,104,86,96,94,101,88],
[89,103,0,103,93,88,87,107,99],
[101,106,107,0,100,100,95,104,113],
[103,124,117,110,0,109,104,99,109],
[95,114,122,110,101,0,105,103,107],
[106,116,123,115,106,105,0,122,115],
[82,109,103,106,111,107,88,0,105],
[96,122,111,97,101,103,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,127,129,119,105,95,119,124],
[108,0,120,130,109,104,103,130,116],
[83,90,0,110,110,103,97,100,97],
[81,80,100,0,106,98,82,107,100],
[91,101,100,104,0,89,102,113,112],
[105,106,107,112,121,0,115,118,104],
[115,107,113,128,108,95,0,112,105],
[91,80,110,103,97,92,98,0,95],
[86,94,113,110,98,106,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,97,96,100,102,106,93],
[113,0,109,107,106,113,105,99,105],
[106,101,0,108,105,114,108,111,110],
[113,103,102,0,101,93,106,91,96],
[114,104,105,109,0,116,114,116,102],
[110,97,96,117,94,0,106,93,94],
[108,105,102,104,96,104,0,104,90],
[104,111,99,119,94,117,106,0,93],
[117,105,100,114,108,116,120,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,105,98,103,104,99,97,83],
[120,0,113,92,103,116,96,102,106],
[105,97,0,79,99,94,91,91,85],
[112,118,131,0,113,103,99,105,99],
[107,107,111,97,0,128,108,97,99],
[106,94,116,107,82,0,93,110,100],
[111,114,119,111,102,117,0,108,98],
[113,108,119,105,113,100,102,0,110],
[127,104,125,111,111,110,112,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,107,107,115,114,100,107],
[115,0,117,117,110,115,112,99,110],
[100,93,0,110,101,107,101,95,107],
[103,93,100,0,95,119,104,96,85],
[103,100,109,115,0,125,117,109,112],
[95,95,103,91,85,0,98,85,98],
[96,98,109,106,93,112,0,101,104],
[110,111,115,114,101,125,109,0,109],
[103,100,103,125,98,112,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,101,93,101,105,99,92],
[101,0,99,105,92,107,105,99,92],
[108,111,0,111,110,100,106,111,94],
[109,105,99,0,91,97,83,91,82],
[117,118,100,119,0,108,94,106,100],
[109,103,110,113,102,0,98,106,93],
[105,105,104,127,116,112,0,116,105],
[111,111,99,119,104,104,94,0,89],
[118,118,116,128,110,117,105,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,115,107,98,112,107,110],
[102,0,107,109,111,107,115,106,102],
[94,103,0,106,97,107,101,101,105],
[95,101,104,0,104,106,113,107,105],
[103,99,113,106,0,100,112,111,111],
[112,103,103,104,110,0,107,98,101],
[98,95,109,97,98,103,0,96,103],
[103,104,109,103,99,112,114,0,99],
[100,108,105,105,99,109,107,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,104,90,93,73,99,87],
[105,0,92,106,91,96,87,97,105],
[112,118,0,128,82,93,110,93,108],
[106,104,82,0,90,77,83,99,83],
[120,119,128,120,0,108,100,102,104],
[117,114,117,133,102,0,109,123,103],
[137,123,100,127,110,101,0,110,112],
[111,113,117,111,108,87,100,0,104],
[123,105,102,127,106,107,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,101,82,91,86,90,92,81],
[123,0,100,107,107,93,94,101,95],
[109,110,0,105,106,104,104,100,104],
[128,103,105,0,115,99,94,105,122],
[119,103,104,95,0,106,100,113,114],
[124,117,106,111,104,0,107,121,109],
[120,116,106,116,110,103,0,105,105],
[118,109,110,105,97,89,105,0,99],
[129,115,106,88,96,101,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,111,111,108,102,109,108],
[98,0,103,98,115,108,107,100,108],
[104,107,0,117,102,102,110,107,117],
[99,112,93,0,111,94,103,95,100],
[99,95,108,99,0,104,98,96,115],
[102,102,108,116,106,0,102,115,109],
[108,103,100,107,112,108,0,109,112],
[101,110,103,115,114,95,101,0,110],
[102,102,93,110,95,101,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,84,80,82,94,100,90,109],
[132,0,121,103,111,119,126,131,125],
[126,89,0,106,116,118,128,127,127],
[130,107,104,0,112,113,145,105,115],
[128,99,94,98,0,115,133,107,140],
[116,91,92,97,95,0,119,116,118],
[110,84,82,65,77,91,0,95,113],
[120,79,83,105,103,94,115,0,122],
[101,85,83,95,70,92,97,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,121,107,112,102,99,111,112],
[119,0,138,111,120,121,92,110,108],
[89,72,0,70,101,105,93,86,84],
[103,99,140,0,123,122,110,122,112],
[98,90,109,87,0,115,97,97,100],
[108,89,105,88,95,0,91,108,89],
[111,118,117,100,113,119,0,117,119],
[99,100,124,88,113,102,93,0,106],
[98,102,126,98,110,121,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,95,105,112,100,102,121],
[99,0,98,94,107,112,109,96,124],
[104,112,0,108,102,119,113,107,122],
[115,116,102,0,112,111,109,102,130],
[105,103,108,98,0,120,105,97,121],
[98,98,91,99,90,0,95,102,99],
[110,101,97,101,105,115,0,93,117],
[108,114,103,108,113,108,117,0,132],
[89,86,88,80,89,111,93,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,35,56,90,73,121,68,84,56],
[175,0,128,112,99,157,128,120,108],
[154,82,0,103,124,166,155,126,83],
[120,98,107,0,90,138,132,93,78],
[137,111,86,120,0,140,106,127,73],
[89,53,44,72,70,0,74,92,69],
[142,82,55,78,104,136,0,111,93],
[126,90,84,117,83,118,99,0,60],
[154,102,127,132,137,141,117,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,96,96,110,94,110,110],
[108,0,119,107,104,106,98,97,106],
[100,91,0,89,102,111,103,87,112],
[114,103,121,0,108,113,114,94,113],
[114,106,108,102,0,113,109,91,112],
[100,104,99,97,97,0,98,87,103],
[116,112,107,96,101,112,0,109,113],
[100,113,123,116,119,123,101,0,116],
[100,104,98,97,98,107,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,105,106,122,115,108,115,96],
[94,0,106,105,103,99,101,98,93],
[105,104,0,108,114,104,106,99,99],
[104,105,102,0,109,104,108,95,116],
[88,107,96,101,0,108,95,89,96],
[95,111,106,106,102,0,113,103,106],
[102,109,104,102,115,97,0,115,102],
[95,112,111,115,121,107,95,0,106],
[114,117,111,94,114,104,108,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,98,99,105,109,119,109],
[87,0,90,95,109,95,84,87,87],
[96,120,0,91,107,110,116,113,103],
[112,115,119,0,105,129,97,113,96],
[111,101,103,105,0,114,85,104,109],
[105,115,100,81,96,0,99,110,104],
[101,126,94,113,125,111,0,107,137],
[91,123,97,97,106,100,103,0,113],
[101,123,107,114,101,106,73,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,106,106,106,106,110,106,110],
[135,0,73,144,73,73,73,73,73],
[104,137,0,113,144,210,137,171,113],
[104,66,97,0,73,101,101,97,39],
[104,137,66,137,0,66,137,137,4],
[104,137,0,109,144,0,75,71,75],
[100,137,73,109,73,135,0,171,38],
[104,137,39,113,73,139,39,0,4],
[100,137,97,171,206,135,172,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,104,120,114,109,128,109],
[101,0,114,101,116,120,108,132,107],
[108,96,0,115,122,126,111,130,109],
[106,109,95,0,124,112,101,123,101],
[90,94,88,86,0,116,94,108,91],
[96,90,84,98,94,0,85,99,82],
[101,102,99,109,116,125,0,124,121],
[82,78,80,87,102,111,86,0,92],
[101,103,101,109,119,128,89,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,114,99,105,106,109,110],
[108,0,87,99,106,111,96,100,107],
[117,123,0,117,102,112,118,109,108],
[96,111,93,0,97,105,93,99,103],
[111,104,108,113,0,109,109,114,103],
[105,99,98,105,101,0,111,110,100],
[104,114,92,117,101,99,0,99,105],
[101,110,101,111,96,100,111,0,98],
[100,103,102,107,107,110,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,114,100,121,110,125,118,117],
[86,0,109,93,123,94,112,107,93],
[96,101,0,97,118,123,111,121,100],
[110,117,113,0,132,105,113,126,116],
[89,87,92,78,0,83,105,106,90],
[100,116,87,105,127,0,124,118,96],
[85,98,99,97,105,86,0,111,94],
[92,103,89,84,104,92,99,0,80],
[93,117,110,94,120,114,116,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,108,96,106,101,106,103],
[98,0,113,96,100,114,96,108,95],
[104,97,0,100,95,101,93,99,79],
[102,114,110,0,97,107,97,106,88],
[114,110,115,113,0,107,97,109,99],
[104,96,109,103,103,0,97,105,88],
[109,114,117,113,113,113,0,116,105],
[104,102,111,104,101,105,94,0,96],
[107,115,131,122,111,122,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,126,121,137,102,106,111,114],
[89,0,102,97,113,86,105,88,100],
[84,108,0,93,121,81,120,108,106],
[89,113,117,0,132,109,121,95,123],
[73,97,89,78,0,97,100,83,99],
[108,124,129,101,113,0,115,99,125],
[104,105,90,89,110,95,0,86,104],
[99,122,102,115,127,111,124,0,119],
[96,110,104,87,111,85,106,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,102,105,106,109,104,103],
[104,0,108,103,107,90,115,102,92],
[99,102,0,97,107,92,112,109,104],
[108,107,113,0,101,101,118,99,100],
[105,103,103,109,0,104,116,109,104],
[104,120,118,109,106,0,117,116,107],
[101,95,98,92,94,93,0,108,98],
[106,108,101,111,101,94,102,0,92],
[107,118,106,110,106,103,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,131,112,110,105,123,88,120],
[113,0,110,107,91,93,125,98,108],
[79,100,0,103,93,99,102,88,109],
[98,103,107,0,89,95,104,98,103],
[100,119,117,121,0,89,125,105,122],
[105,117,111,115,121,0,125,101,112],
[87,85,108,106,85,85,0,107,108],
[122,112,122,112,105,109,103,0,116],
[90,102,101,107,88,98,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,140,105,117,114,90,46,124],
[59,0,28,107,47,76,50,21,100],
[70,182,0,120,86,111,61,88,146],
[105,103,90,0,96,98,55,73,146],
[93,163,124,114,0,128,141,88,153],
[96,134,99,112,82,0,80,93,152],
[120,160,149,155,69,130,0,136,152],
[164,189,122,137,122,117,74,0,146],
[86,110,64,64,57,58,58,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,71,104,84,105,104,105,108],
[106,0,84,93,77,78,97,95,126],
[139,126,0,115,116,110,99,98,127],
[106,117,95,0,107,96,115,114,112],
[126,133,94,103,0,125,113,90,123],
[105,132,100,114,85,0,96,105,115],
[106,113,111,95,97,114,0,111,139],
[105,115,112,96,120,105,99,0,137],
[102,84,83,98,87,95,71,73,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,85,110,0,25,85,105,105],
[100,0,80,25,0,25,0,105,80],
[125,130,0,45,20,45,25,125,125],
[100,185,165,0,20,20,0,100,100],
[210,210,190,190,0,105,190,105,105],
[185,185,165,190,105,0,85,100,100],
[125,210,185,210,20,125,0,125,125],
[105,105,85,110,105,110,85,0,80],
[105,130,85,110,105,110,85,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,92,87,76,97,68,84,92],
[112,0,84,87,108,94,87,96,84],
[118,126,0,101,118,116,101,114,101],
[123,123,109,0,118,114,102,112,97],
[134,102,92,92,0,102,81,101,89],
[113,116,94,96,108,0,104,99,87],
[142,123,109,108,129,106,0,101,104],
[126,114,96,98,109,111,109,0,107],
[118,126,109,113,121,123,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,92,104,100,104,102,98],
[105,0,107,109,96,97,110,111,99],
[108,103,0,117,108,91,107,89,101],
[118,101,93,0,101,102,115,105,86],
[106,114,102,109,0,111,112,111,104],
[110,113,119,108,99,0,118,108,102],
[106,100,103,95,98,92,0,86,93],
[108,99,121,105,99,102,124,0,109],
[112,111,109,124,106,108,117,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,112,103,97,108,94,94,98],
[107,0,103,105,88,99,96,95,99],
[98,107,0,115,107,103,108,100,107],
[107,105,95,0,124,112,115,99,99],
[113,122,103,86,0,110,106,103,103],
[102,111,107,98,100,0,106,105,98],
[116,114,102,95,104,104,0,101,102],
[116,115,110,111,107,105,109,0,101],
[112,111,103,111,107,112,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,108,132,102,119,130,98,118],
[90,0,97,111,115,113,114,106,106],
[102,113,0,136,114,122,133,117,96],
[78,99,74,0,92,111,99,91,89],
[108,95,96,118,0,102,117,97,100],
[91,97,88,99,108,0,98,106,87],
[80,96,77,111,93,112,0,94,91],
[112,104,93,119,113,104,116,0,109],
[92,104,114,121,110,123,119,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,127,95,111,89,123,105,98],
[100,0,146,126,139,91,139,122,93],
[83,64,0,95,104,112,97,98,66],
[115,84,115,0,109,115,104,126,92],
[99,71,106,101,0,107,87,109,97],
[121,119,98,95,103,0,118,96,121],
[87,71,113,106,123,92,0,97,116],
[105,88,112,84,101,114,113,0,65],
[112,117,144,118,113,89,94,145,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,122,106,85,86,88,91],
[112,0,104,115,92,105,98,95,120],
[113,106,0,124,111,103,117,110,103],
[88,95,86,0,75,68,95,76,99],
[104,118,99,135,0,108,111,89,118],
[125,105,107,142,102,0,116,111,117],
[124,112,93,115,99,94,0,109,128],
[122,115,100,134,121,99,101,0,108],
[119,90,107,111,92,93,82,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,104,100,110,108,95,101],
[103,0,95,97,89,108,101,101,101],
[112,115,0,104,101,110,111,98,108],
[106,113,106,0,102,108,106,102,99],
[110,121,109,108,0,112,104,109,111],
[100,102,100,102,98,0,99,95,98],
[102,109,99,104,106,111,0,96,101],
[115,109,112,108,101,115,114,0,103],
[109,109,102,111,99,112,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,105,102,104,110,106,136,107],
[113,0,107,106,91,104,88,115,111],
[105,103,0,103,107,125,97,121,97],
[108,104,107,0,98,113,110,112,100],
[106,119,103,112,0,110,86,133,103],
[100,106,85,97,100,0,94,125,96],
[104,122,113,100,124,116,0,121,105],
[74,95,89,98,77,85,89,0,92],
[103,99,113,110,107,114,105,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,115,105,106,105,133,104,99],
[99,0,108,119,118,126,143,96,94],
[95,102,0,113,96,102,103,87,108],
[105,91,97,0,104,101,115,115,106],
[104,92,114,106,0,114,124,99,90],
[105,84,108,109,96,0,109,105,112],
[77,67,107,95,86,101,0,91,94],
[106,114,123,95,111,105,119,0,106],
[111,116,102,104,120,98,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,115,122,116,104,116,106,107],
[96,0,111,117,110,103,104,110,107],
[95,99,0,110,107,101,99,113,108],
[88,93,100,0,99,90,100,100,91],
[94,100,103,111,0,91,102,101,102],
[106,107,109,120,119,0,108,109,101],
[94,106,111,110,108,102,0,110,111],
[104,100,97,110,109,101,100,0,99],
[103,103,102,119,108,109,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,112,112,112,83,0,83],
[98,0,98,127,98,181,98,98,98],
[98,112,0,29,83,112,83,98,98],
[98,83,181,0,181,181,181,98,181],
[98,112,127,29,0,112,181,98,98],
[98,29,98,29,98,0,98,98,98],
[127,112,127,29,29,112,0,127,127],
[210,112,112,112,112,112,83,0,112],
[127,112,112,29,112,112,83,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,103,115,100,96,104,100],
[116,0,103,109,112,105,109,113,100],
[118,107,0,114,123,111,111,105,108],
[107,101,96,0,106,102,105,109,105],
[95,98,87,104,0,91,104,97,95],
[110,105,99,108,119,0,104,113,97],
[114,101,99,105,106,106,0,109,108],
[106,97,105,101,113,97,101,0,98],
[110,110,102,105,115,113,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,110,108,110,99,95,91,96],
[118,0,118,116,114,105,105,103,96],
[100,92,0,122,110,93,95,84,108],
[102,94,88,0,92,97,91,90,87],
[100,96,100,118,0,94,99,91,88],
[111,105,117,113,116,0,94,98,85],
[115,105,115,119,111,116,0,97,106],
[119,107,126,120,119,112,113,0,104],
[114,114,102,123,122,125,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,118,113,111,106,107,114],
[107,0,115,105,102,114,113,114,114],
[99,95,0,111,103,116,106,102,101],
[92,105,99,0,92,106,107,107,92],
[97,108,107,118,0,122,112,108,106],
[99,96,94,104,88,0,112,100,102],
[104,97,104,103,98,98,0,111,97],
[103,96,108,103,102,110,99,0,108],
[96,96,109,118,104,108,113,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,114,110,108,112,103,92],
[107,0,95,109,108,110,108,97,100],
[109,115,0,107,119,113,108,101,98],
[96,101,103,0,102,102,100,96,90],
[100,102,91,108,0,102,105,98,91],
[102,100,97,108,108,0,105,107,97],
[98,102,102,110,105,105,0,95,100],
[107,113,109,114,112,103,115,0,105],
[118,110,112,120,119,113,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,109,101,105,87,117,98,105],
[91,0,91,107,99,85,106,99,104],
[101,119,0,124,110,108,115,111,116],
[109,103,86,0,88,98,97,104,106],
[105,111,100,122,0,98,103,94,103],
[123,125,102,112,112,0,123,103,101],
[93,104,95,113,107,87,0,103,108],
[112,111,99,106,116,107,107,0,98],
[105,106,94,104,107,109,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,96,89,104,96,107,100],
[116,0,118,114,109,117,104,125,107],
[112,92,0,103,102,108,99,108,103],
[114,96,107,0,96,119,107,111,107],
[121,101,108,114,0,114,117,110,110],
[106,93,102,91,96,0,98,101,101],
[114,106,111,103,93,112,0,113,108],
[103,85,102,99,100,109,97,0,98],
[110,103,107,103,100,109,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,89,92,110,125,104,100],
[114,0,95,102,95,106,127,94,114],
[106,115,0,101,110,116,121,100,104],
[121,108,109,0,90,116,116,117,110],
[118,115,100,120,0,111,125,122,126],
[100,104,94,94,99,0,112,96,90],
[85,83,89,94,85,98,0,94,94],
[106,116,110,93,88,114,116,0,109],
[110,96,106,100,84,120,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,111,104,112,106,109,109,113],
[100,0,104,105,118,96,115,111,110],
[99,106,0,102,112,102,104,109,104],
[106,105,108,0,113,98,115,99,109],
[98,92,98,97,0,94,102,98,88],
[104,114,108,112,116,0,119,119,121],
[101,95,106,95,108,91,0,103,107],
[101,99,101,111,112,91,107,0,99],
[97,100,106,101,122,89,103,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,111,114,107,104,113,109],
[110,0,107,110,105,106,98,102,106],
[110,103,0,107,116,114,104,103,112],
[99,100,103,0,104,102,97,91,104],
[96,105,94,106,0,100,99,91,108],
[103,104,96,108,110,0,104,112,110],
[106,112,106,113,111,106,0,105,114],
[97,108,107,119,119,98,105,0,120],
[101,104,98,106,102,100,96,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,108,106,116,98,107,101],
[99,0,109,104,100,115,107,110,99],
[103,101,0,107,114,111,95,111,94],
[102,106,103,0,111,117,101,115,109],
[104,110,96,99,0,113,97,102,105],
[94,95,99,93,97,0,92,99,96],
[112,103,115,109,113,118,0,116,95],
[103,100,99,95,108,111,94,0,98],
[109,111,116,101,105,114,115,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,117,104,104,101,114,106],
[100,0,79,99,89,104,90,108,104],
[118,131,0,132,111,123,83,107,122],
[93,111,78,0,91,103,85,100,85],
[106,121,99,119,0,102,112,99,123],
[106,106,87,107,108,0,102,94,119],
[109,120,127,125,98,108,0,121,113],
[96,102,103,110,111,116,89,0,105],
[104,106,88,125,87,91,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,132,96,149,84,119,58,120],
[142,0,121,107,144,69,135,118,95],
[78,89,0,112,133,107,119,89,87],
[114,103,98,0,121,72,106,66,106],
[61,66,77,89,0,55,98,102,58],
[126,141,103,138,155,0,158,133,124],
[91,75,91,104,112,52,0,80,93],
[152,92,121,144,108,77,130,0,105],
[90,115,123,104,152,86,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,92,110,103,110,106,101],
[110,0,101,108,110,108,113,117,110],
[108,109,0,106,118,104,108,113,103],
[118,102,104,0,110,103,113,106,109],
[100,100,92,100,0,100,101,101,93],
[107,102,106,107,110,0,107,114,98],
[100,97,102,97,109,103,0,93,108],
[104,93,97,104,109,96,117,0,94],
[109,100,107,101,117,112,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,97,102,105,107,85,110],
[97,0,92,107,88,94,94,98,105],
[105,118,0,108,114,109,109,115,100],
[113,103,102,0,102,103,105,89,110],
[108,122,96,108,0,112,114,103,111],
[105,116,101,107,98,0,120,99,107],
[103,116,101,105,96,90,0,98,111],
[125,112,95,121,107,111,112,0,113],
[100,105,110,100,99,103,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,119,109,74,96,105,101,91],
[87,0,104,110,89,106,96,93,114],
[91,106,0,100,93,98,109,100,117],
[101,100,110,0,92,94,102,99,107],
[136,121,117,118,0,105,120,96,113],
[114,104,112,116,105,0,109,92,111],
[105,114,101,108,90,101,0,92,100],
[109,117,110,111,114,118,118,0,100],
[119,96,93,103,97,99,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,105,100,106,105,116,100,96],
[102,0,104,98,110,103,109,102,106],
[105,106,0,107,110,102,109,105,110],
[110,112,103,0,111,106,108,117,109],
[104,100,100,99,0,101,103,91,97],
[105,107,108,104,109,0,107,102,109],
[94,101,101,102,107,103,0,106,101],
[110,108,105,93,119,108,104,0,94],
[114,104,100,101,113,101,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,103,111,99,114,101,109],
[91,0,99,107,100,95,96,95,102],
[105,111,0,97,113,109,111,107,106],
[107,103,113,0,111,106,105,101,102],
[99,110,97,99,0,85,100,99,109],
[111,115,101,104,125,0,107,103,104],
[96,114,99,105,110,103,0,104,103],
[109,115,103,109,111,107,106,0,116],
[101,108,104,108,101,106,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,128,113,97,137,112,114,74],
[106,0,108,89,79,113,74,98,62],
[82,102,0,92,88,105,85,101,74],
[97,121,118,0,102,132,118,128,107],
[113,131,122,108,0,107,112,136,96],
[73,97,105,78,103,0,78,95,68],
[98,136,125,92,98,132,0,127,84],
[96,112,109,82,74,115,83,0,78],
[136,148,136,103,114,142,126,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,107,118,108,106,101,111],
[104,0,116,107,114,113,104,116,109],
[101,94,0,109,110,106,97,103,102],
[103,103,101,0,107,108,108,105,103],
[92,96,100,103,0,102,94,103,101],
[102,97,104,102,108,0,101,104,107],
[104,106,113,102,116,109,0,107,113],
[109,94,107,105,107,106,103,0,104],
[99,101,108,107,109,103,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,91,103,98,97,87,93],
[119,0,115,108,113,101,107,106,120],
[103,95,0,98,101,101,98,90,102],
[119,102,112,0,116,104,110,113,111],
[107,97,109,94,0,92,93,98,105],
[112,109,109,106,118,0,101,106,105],
[113,103,112,100,117,109,0,98,105],
[123,104,120,97,112,104,112,0,110],
[117,90,108,99,105,105,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,86,111,91,112,98,101],
[95,0,93,85,95,100,94,102,99],
[112,117,0,98,118,107,123,116,115],
[124,125,112,0,121,95,122,109,118],
[99,115,92,89,0,85,104,100,111],
[119,110,103,115,125,0,109,114,119],
[98,116,87,88,106,101,0,111,106],
[112,108,94,101,110,96,99,0,103],
[109,111,95,92,99,91,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,106,114,114,116,113,103],
[101,0,104,103,103,100,98,103,99],
[98,106,0,105,107,96,106,106,104],
[104,107,105,0,111,110,103,108,109],
[96,107,103,99,0,98,93,98,91],
[96,110,114,100,112,0,100,108,94],
[94,112,104,107,117,110,0,109,100],
[97,107,104,102,112,102,101,0,94],
[107,111,106,101,119,116,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,85,117,82,101,91,100],
[120,0,91,105,132,108,117,99,105],
[124,119,0,119,137,105,124,108,116],
[125,105,91,0,122,86,122,101,112],
[93,78,73,88,0,76,89,82,88],
[128,102,105,124,134,0,120,103,118],
[109,93,86,88,121,90,0,93,92],
[119,111,102,109,128,107,117,0,100],
[110,105,94,98,122,92,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,112,113,106,116,119,118],
[107,0,105,116,116,113,124,120,126],
[105,105,0,109,104,118,111,117,119],
[98,94,101,0,105,104,108,104,102],
[97,94,106,105,0,114,111,108,121],
[104,97,92,106,96,0,108,112,107],
[94,86,99,102,99,102,0,99,107],
[91,90,93,106,102,98,111,0,103],
[92,84,91,108,89,103,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,100,113,119,107,106,123,116],
[89,0,111,116,126,100,104,123,120],
[110,99,0,132,113,105,116,127,113],
[97,94,78,0,84,95,88,105,103],
[91,84,97,126,0,114,74,110,102],
[103,110,105,115,96,0,109,119,83],
[104,106,94,122,136,101,0,128,111],
[87,87,83,105,100,91,82,0,98],
[94,90,97,107,108,127,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,104,108,113,121,114,128,116],
[86,0,104,86,90,107,104,113,91],
[106,106,0,97,95,105,98,118,104],
[102,124,113,0,110,121,124,119,102],
[97,120,115,100,0,124,107,114,112],
[89,103,105,89,86,0,100,110,90],
[96,106,112,86,103,110,0,111,89],
[82,97,92,91,96,100,99,0,93],
[94,119,106,108,98,120,121,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,55,65,55,44,76,64],
[115,0,100,103,70,95,91,93,99],
[116,110,0,99,126,110,98,143,141],
[155,107,111,0,93,57,99,127,115],
[145,140,84,117,0,82,106,150,119],
[155,115,100,153,128,0,104,139,119],
[166,119,112,111,104,106,0,114,135],
[134,117,67,83,60,71,96,0,117],
[146,111,69,95,91,91,75,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,82,109,119,100,100,111],
[105,0,96,118,101,110,82,80,98],
[97,114,0,119,93,145,92,106,133],
[128,92,91,0,79,112,105,100,136],
[101,109,117,131,0,133,128,89,142],
[91,100,65,98,77,0,73,104,86],
[110,128,118,105,82,137,0,112,139],
[110,130,104,110,121,106,98,0,115],
[99,112,77,74,68,124,71,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,92,102,125,94,110,126,110],
[95,0,92,110,110,100,114,119,121],
[118,118,0,100,114,109,110,111,125],
[108,100,110,0,128,100,104,121,122],
[85,100,96,82,0,83,98,93,95],
[116,110,101,110,127,0,121,121,119],
[100,96,100,106,112,89,0,95,117],
[84,91,99,89,117,89,115,0,110],
[100,89,85,88,115,91,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,123,104,81,107,75,94,126],
[123,0,133,100,89,105,92,97,135],
[87,77,0,82,66,96,63,80,95],
[106,110,128,0,89,101,77,95,112],
[129,121,144,121,0,105,106,111,131],
[103,105,114,109,105,0,88,108,125],
[135,118,147,133,104,122,0,121,134],
[116,113,130,115,99,102,89,0,110],
[84,75,115,98,79,85,76,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,98,91,96,111,125,106],
[96,0,88,100,81,94,91,106,93],
[108,122,0,107,98,106,96,112,105],
[112,110,103,0,110,96,100,105,108],
[119,129,112,100,0,110,111,126,110],
[114,116,104,114,100,0,119,123,106],
[99,119,114,110,99,91,0,112,97],
[85,104,98,105,84,87,98,0,101],
[104,117,105,102,100,104,113,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,92,96,114,82,101,101],
[87,0,94,92,94,89,81,84,79],
[96,116,0,103,100,105,99,99,70],
[118,118,107,0,100,112,111,113,78],
[114,116,110,110,0,123,105,104,101],
[96,121,105,98,87,0,100,88,83],
[128,129,111,99,105,110,0,118,83],
[109,126,111,97,106,122,92,0,117],
[109,131,140,132,109,127,127,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,104,91,109,103,106,94],
[103,0,84,93,103,102,112,105,98],
[106,126,0,107,101,110,111,106,105],
[106,117,103,0,97,104,106,106,102],
[119,107,109,113,0,109,119,106,97],
[101,108,100,106,101,0,105,104,96],
[107,98,99,104,91,105,0,102,84],
[104,105,104,104,104,106,108,0,86],
[116,112,105,108,113,114,126,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,105,118,109,81,92,106],
[112,0,92,109,85,85,105,103,92],
[104,118,0,113,115,88,90,108,111],
[105,101,97,0,91,51,111,118,99],
[92,125,95,119,0,87,87,99,123],
[101,125,122,159,123,0,123,127,131],
[129,105,120,99,123,87,0,120,111],
[118,107,102,92,111,83,90,0,93],
[104,118,99,111,87,79,99,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,104,114,103,103,113,106,113],
[92,0,92,91,103,91,103,87,113],
[106,118,0,103,114,107,115,105,115],
[96,119,107,0,107,102,100,100,119],
[107,107,96,103,0,107,89,107,113],
[107,119,103,108,103,0,106,112,111],
[97,107,95,110,121,104,0,94,115],
[104,123,105,110,103,98,116,0,114],
[97,97,95,91,97,99,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,102,114,106,102,111,109,96],
[101,0,92,109,106,123,110,98,97],
[108,118,0,113,117,116,111,99,107],
[96,101,97,0,109,98,114,92,96],
[104,104,93,101,0,101,111,101,101],
[108,87,94,112,109,0,104,110,89],
[99,100,99,96,99,106,0,116,90],
[101,112,111,118,109,100,94,0,102],
[114,113,103,114,109,121,120,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,93,108,106,109,102,105,103],
[102,0,103,98,114,110,108,111,105],
[117,107,0,101,104,108,104,113,101],
[102,112,109,0,111,112,111,107,99],
[104,96,106,99,0,103,100,103,98],
[101,100,102,98,107,0,103,109,95],
[108,102,106,99,110,107,0,112,110],
[105,99,97,103,107,101,98,0,99],
[107,105,109,111,112,115,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,110,117,102,94,98,97],
[98,0,100,110,102,90,94,112,99],
[107,110,0,118,116,108,109,109,103],
[100,100,92,0,106,94,104,90,99],
[93,108,94,104,0,87,94,97,92],
[108,120,102,116,123,0,101,108,111],
[116,116,101,106,116,109,0,106,103],
[112,98,101,120,113,102,104,0,105],
[113,111,107,111,118,99,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,106,125,112,116,110,98],
[109,0,96,109,110,108,95,116,101],
[101,114,0,112,107,119,110,112,105],
[104,101,98,0,109,107,97,105,102],
[85,100,103,101,0,107,99,102,101],
[98,102,91,103,103,0,88,108,97],
[94,115,100,113,111,122,0,113,108],
[100,94,98,105,108,102,97,0,94],
[112,109,105,108,109,113,102,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,87,93,105,108,113,88,125],
[111,0,113,102,109,131,109,105,126],
[123,97,0,101,111,131,114,107,120],
[117,108,109,0,118,117,104,102,120],
[105,101,99,92,0,127,95,95,119],
[102,79,79,93,83,0,94,90,104],
[97,101,96,106,115,116,0,93,125],
[122,105,103,108,115,120,117,0,125],
[85,84,90,90,91,106,85,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,138,107,140,109,93,92,106],
[94,0,104,136,113,115,93,93,123],
[72,106,0,91,118,70,90,89,85],
[103,74,119,0,116,98,82,79,98],
[70,97,92,94,0,66,54,83,67],
[101,95,140,112,144,0,107,84,150],
[117,117,120,128,156,103,0,107,108],
[118,117,121,131,127,126,103,0,119],
[104,87,125,112,143,60,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,98,101,90,115,112,110,107],
[109,0,92,105,83,109,101,103,106],
[112,118,0,109,101,109,114,109,119],
[109,105,101,0,97,112,108,102,105],
[120,127,109,113,0,116,114,100,114],
[95,101,101,98,94,0,99,103,103],
[98,109,96,102,96,111,0,108,101],
[100,107,101,108,110,107,102,0,106],
[103,104,91,105,96,107,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,99,88,95,105,103,121,93],
[129,0,108,98,115,107,105,115,106],
[111,102,0,104,110,113,108,118,102],
[122,112,106,0,122,105,107,119,113],
[115,95,100,88,0,103,102,115,102],
[105,103,97,105,107,0,102,116,117],
[107,105,102,103,108,108,0,121,111],
[89,95,92,91,95,94,89,0,91],
[117,104,108,97,108,93,99,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,97,114,105,111,106,105],
[103,0,91,112,134,115,97,116,105],
[111,119,0,103,114,111,112,122,102],
[113,98,107,0,125,111,111,121,108],
[96,76,96,85,0,94,93,97,96],
[105,95,99,99,116,0,105,101,106],
[99,113,98,99,117,105,0,113,113],
[104,94,88,89,113,109,97,0,108],
[105,105,108,102,114,104,97,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,91,95,89,105,107,98],
[99,0,92,87,99,88,101,97,94],
[106,118,0,95,112,108,113,105,101],
[119,123,115,0,109,104,121,115,113],
[115,111,98,101,0,96,107,100,101],
[121,122,102,106,114,0,114,108,104],
[105,109,97,89,103,96,0,105,100],
[103,113,105,95,110,102,105,0,94],
[112,116,109,97,109,106,110,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,125,113,88,111,111,119,88],
[117,0,134,96,95,112,127,124,105],
[85,76,0,90,99,92,90,87,66],
[97,114,120,0,94,112,105,93,74],
[122,115,111,116,0,123,121,111,80],
[99,98,118,98,87,0,111,110,67],
[99,83,120,105,89,99,0,91,94],
[91,86,123,117,99,100,119,0,74],
[122,105,144,136,130,143,116,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,122,112,126,126,105,110,101],
[110,0,130,117,120,133,97,113,113],
[88,80,0,82,111,99,97,100,89],
[98,93,128,0,109,120,99,107,110],
[84,90,99,101,0,98,84,87,100],
[84,77,111,90,112,0,100,84,106],
[105,113,113,111,126,110,0,104,114],
[100,97,110,103,123,126,106,0,104],
[109,97,121,100,110,104,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,105,101,100,94,109,98],
[102,0,93,109,103,104,101,109,98],
[106,117,0,110,105,107,99,113,101],
[105,101,100,0,108,112,105,118,88],
[109,107,105,102,0,109,102,106,97],
[110,106,103,98,101,0,90,103,98],
[116,109,111,105,108,120,0,115,107],
[101,101,97,92,104,107,95,0,93],
[112,112,109,122,113,112,103,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,103,112,97,108,97,95,89],
[114,0,110,109,104,108,108,107,106],
[107,100,0,109,103,106,104,108,88],
[98,101,101,0,98,100,108,92,96],
[113,106,107,112,0,109,109,97,101],
[102,102,104,110,101,0,113,109,91],
[113,102,106,102,101,97,0,95,95],
[115,103,102,118,113,101,115,0,100],
[121,104,122,114,109,119,115,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,114,113,99,107,106,115],
[95,0,104,97,112,95,88,100,104],
[94,106,0,111,99,95,100,110,94],
[96,113,99,0,108,105,93,95,95],
[97,98,111,102,0,96,91,93,86],
[111,115,115,105,114,0,109,100,104],
[103,122,110,117,119,101,0,106,108],
[104,110,100,115,117,110,104,0,110],
[95,106,116,115,124,106,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,89,115,110,74,74,128,74],
[146,0,95,110,118,111,94,155,92],
[121,115,0,128,165,163,104,180,134],
[95,100,82,0,70,80,97,129,100],
[100,92,45,140,0,107,80,170,141],
[136,99,47,130,103,0,139,115,87],
[136,116,106,113,130,71,0,160,114],
[82,55,30,81,40,95,50,0,63],
[136,118,76,110,69,123,96,147,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,116,107,100,100,96,112,110],
[141,0,113,135,98,128,113,96,137],
[94,97,0,122,136,109,61,126,99],
[103,75,88,0,126,80,98,61,111],
[110,112,74,84,0,103,94,87,116],
[110,82,101,130,107,0,82,101,95],
[114,97,149,112,116,128,0,112,148],
[98,114,84,149,123,109,98,0,82],
[100,73,111,99,94,115,62,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,109,113,104,107,102,108,112],
[109,0,109,112,107,113,102,101,110],
[101,101,0,120,93,102,109,110,117],
[97,98,90,0,100,105,95,99,104],
[106,103,117,110,0,100,112,102,108],
[103,97,108,105,110,0,103,100,107],
[108,108,101,115,98,107,0,104,114],
[102,109,100,111,108,110,106,0,109],
[98,100,93,106,102,103,96,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,115,127,113,115,118,102],
[104,0,105,114,126,107,108,108,107],
[97,105,0,113,115,103,104,105,104],
[95,96,97,0,113,107,95,95,103],
[83,84,95,97,0,83,91,98,94],
[97,103,107,103,127,0,101,111,110],
[95,102,106,115,119,109,0,106,105],
[92,102,105,115,112,99,104,0,102],
[108,103,106,107,116,100,105,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,99,86,90,84,107,90,94],
[127,0,108,121,114,102,106,108,114],
[111,102,0,119,119,111,115,108,110],
[124,89,91,0,109,78,105,96,102],
[120,96,91,101,0,104,101,100,123],
[126,108,99,132,106,0,111,97,114],
[103,104,95,105,109,99,0,88,111],
[120,102,102,114,110,113,122,0,114],
[116,96,100,108,87,96,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,127,105,113,92,108,99,108],
[98,0,115,98,98,95,112,98,109],
[83,95,0,94,91,91,95,88,91],
[105,112,116,0,108,105,112,109,107],
[97,112,119,102,0,101,95,103,105],
[118,115,119,105,109,0,102,102,110],
[102,98,115,98,115,108,0,98,113],
[111,112,122,101,107,108,112,0,116],
[102,101,119,103,105,100,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,107,113,126,135,121,107],
[110,0,91,105,108,106,96,104,92],
[118,119,0,101,122,128,122,113,114],
[103,105,109,0,109,121,109,88,111],
[97,102,88,101,0,120,99,109,89],
[84,104,82,89,90,0,81,116,96],
[75,114,88,101,111,129,0,98,104],
[89,106,97,122,101,94,112,0,88],
[103,118,96,99,121,114,106,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,110,101,113,89,97,107,105],
[111,0,106,106,103,116,99,113,119],
[100,104,0,92,110,109,100,108,119],
[109,104,118,0,126,113,107,104,133],
[97,107,100,84,0,98,82,101,99],
[121,94,101,97,112,0,92,105,117],
[113,111,110,103,128,118,0,110,115],
[103,97,102,106,109,105,100,0,103],
[105,91,91,77,111,93,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,69,55,119,66,60,57,66],
[119,0,58,164,115,86,138,131,105],
[141,152,0,181,117,114,132,103,141],
[155,46,29,0,108,47,57,69,47],
[91,95,93,102,0,83,114,74,74],
[144,124,96,163,127,0,132,113,120],
[150,72,78,153,96,78,0,105,110],
[153,79,107,141,136,97,105,0,112],
[144,105,69,163,136,90,100,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,105,109,106,106,97,102],
[106,0,114,100,119,107,103,107,113],
[99,96,0,91,101,108,91,101,96],
[105,110,119,0,100,122,100,97,108],
[101,91,109,110,0,105,92,98,101],
[104,103,102,88,105,0,93,92,98],
[104,107,119,110,118,117,0,102,116],
[113,103,109,113,112,118,108,0,106],
[108,97,114,102,109,112,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,94,89,131,82,73,93,118],
[104,0,93,62,94,108,69,68,64],
[116,117,0,106,127,96,129,128,113],
[121,148,104,0,127,117,112,104,83],
[79,116,83,83,0,91,78,82,67],
[128,102,114,93,119,0,86,77,62],
[137,141,81,98,132,124,0,125,90],
[117,142,82,106,128,133,85,0,81],
[92,146,97,127,143,148,120,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,109,114,101,122,97,105],
[107,0,136,119,131,128,144,104,109],
[103,74,0,115,114,74,113,108,117],
[101,91,95,0,98,75,135,74,134],
[96,79,96,112,0,81,113,109,114],
[109,82,136,135,129,0,124,104,134],
[88,66,97,75,97,86,0,95,104],
[113,106,102,136,101,106,115,0,133],
[105,101,93,76,96,76,106,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,85,83,88,96,80,97,87],
[119,0,112,119,97,100,110,104,114],
[125,98,0,105,100,100,93,108,100],
[127,91,105,0,94,106,96,97,91],
[122,113,110,116,0,102,105,117,121],
[114,110,110,104,108,0,106,109,101],
[130,100,117,114,105,104,0,117,109],
[113,106,102,113,93,101,93,0,93],
[123,96,110,119,89,109,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,141,126,146,114,105,118,130],
[107,0,119,92,86,118,90,96,110],
[69,91,0,92,115,95,80,70,90],
[84,118,118,0,119,110,92,117,105],
[64,124,95,91,0,111,76,87,108],
[96,92,115,100,99,0,93,107,105],
[105,120,130,118,134,117,0,116,104],
[92,114,140,93,123,103,94,0,139],
[80,100,120,105,102,105,106,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,126,107,107,117,99,109,94],
[92,0,115,84,108,106,86,98,81],
[84,95,0,95,104,65,87,63,90],
[103,126,115,0,99,103,107,105,119],
[103,102,106,111,0,92,93,92,106],
[93,104,145,107,118,0,94,113,92],
[111,124,123,103,117,116,0,98,110],
[101,112,147,105,118,97,112,0,103],
[116,129,120,91,104,118,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,120,104,112,114,110,109,116],
[73,0,98,83,94,90,94,90,87],
[90,112,0,100,101,95,89,98,84],
[106,127,110,0,109,107,108,94,93],
[98,116,109,101,0,112,112,117,115],
[96,120,115,103,98,0,105,112,98],
[100,116,121,102,98,105,0,109,79],
[101,120,112,116,93,98,101,0,103],
[94,123,126,117,95,112,131,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,108,101,105,106,103,116],
[100,0,98,103,95,109,97,109,106],
[103,112,0,107,96,112,95,104,111],
[102,107,103,0,105,98,101,108,105],
[109,115,114,105,0,118,99,106,107],
[105,101,98,112,92,0,102,104,110],
[104,113,115,109,111,108,0,108,113],
[107,101,106,102,104,106,102,0,105],
[94,104,99,105,103,100,97,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,117,129,110,121,104,116,121],
[84,0,93,127,95,117,118,113,136],
[93,117,0,131,86,111,116,96,106],
[81,83,79,0,70,93,99,75,81],
[100,115,124,140,0,122,123,120,114],
[89,93,99,117,88,0,104,105,99],
[106,92,94,111,87,106,0,97,97],
[94,97,114,135,90,105,113,0,116],
[89,74,104,129,96,111,113,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,109,95,110,122,101,99],
[107,0,104,117,105,113,115,116,105],
[107,106,0,108,98,112,117,99,102],
[101,93,102,0,89,104,108,101,96],
[115,105,112,121,0,110,109,109,108],
[100,97,98,106,100,0,103,98,93],
[88,95,93,102,101,107,0,106,103],
[109,94,111,109,101,112,104,0,93],
[111,105,108,114,102,117,107,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,114,93,118,109,113,124],
[104,0,122,147,107,125,103,125,125],
[105,88,0,132,92,125,99,111,125],
[96,63,78,0,73,102,66,108,100],
[117,103,118,137,0,146,118,148,133],
[92,85,85,108,64,0,80,117,106],
[101,107,111,144,92,130,0,122,146],
[97,85,99,102,62,93,88,0,103],
[86,85,85,110,77,104,64,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,104,112,104,120,102,109],
[106,0,106,114,101,101,116,97,96],
[102,104,0,97,94,95,107,99,101],
[106,96,113,0,99,105,112,95,104],
[98,109,116,111,0,109,102,101,107],
[106,109,115,105,101,0,109,105,93],
[90,94,103,98,108,101,0,98,98],
[108,113,111,115,109,105,112,0,106],
[101,114,109,106,103,117,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,118,107,100,102,85,87,104],
[93,0,116,99,103,119,103,90,106],
[92,94,0,83,92,85,89,61,89],
[103,111,127,0,114,117,108,76,125],
[110,107,118,96,0,107,99,82,96],
[108,91,125,93,103,0,93,93,105],
[125,107,121,102,111,117,0,114,108],
[123,120,149,134,128,117,96,0,138],
[106,104,121,85,114,105,102,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,114,105,127,118,109,109],
[98,0,100,95,99,113,97,108,93],
[96,110,0,104,100,114,107,97,96],
[96,115,106,0,108,117,110,106,104],
[105,111,110,102,0,113,111,104,104],
[83,97,96,93,97,0,98,101,92],
[92,113,103,100,99,112,0,104,111],
[101,102,113,104,106,109,106,0,105],
[101,117,114,106,106,118,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,100,79,92,94,98,105,100],
[97,0,93,68,93,80,79,87,98],
[110,117,0,100,96,94,102,98,110],
[131,142,110,0,99,118,112,118,130],
[118,117,114,111,0,89,135,107,104],
[116,130,116,92,121,0,122,118,132],
[112,131,108,98,75,88,0,99,113],
[105,123,112,92,103,92,111,0,121],
[110,112,100,80,106,78,97,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,104,88,86,90,104,88,89],
[100,0,96,85,86,99,93,108,93],
[106,114,0,94,114,121,103,111,105],
[122,125,116,0,108,113,116,119,103],
[124,124,96,102,0,103,107,107,105],
[120,111,89,97,107,0,107,108,110],
[106,117,107,94,103,103,0,125,89],
[122,102,99,91,103,102,85,0,106],
[121,117,105,107,105,100,121,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,114,110,100,102,107,110,112],
[90,0,102,98,92,86,97,91,86],
[96,108,0,108,89,98,102,106,97],
[100,112,102,0,107,98,104,102,104],
[110,118,121,103,0,113,107,107,105],
[108,124,112,112,97,0,105,115,98],
[103,113,108,106,103,105,0,108,101],
[100,119,104,108,103,95,102,0,107],
[98,124,113,106,105,112,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,130,136,136,128,142,101,110],
[97,0,115,109,110,95,100,92,106],
[80,95,0,123,110,109,108,88,84],
[74,101,87,0,124,92,105,114,84],
[74,100,100,86,0,99,92,86,110],
[82,115,101,118,111,0,114,97,89],
[68,110,102,105,118,96,0,91,85],
[109,118,122,96,124,113,119,0,99],
[100,104,126,126,100,121,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,92,91,108,88,84,88,115],
[118,0,115,112,98,101,109,93,119],
[118,95,0,99,104,96,93,102,108],
[119,98,111,0,116,101,100,93,121],
[102,112,106,94,0,102,109,107,120],
[122,109,114,109,108,0,102,109,126],
[126,101,117,110,101,108,0,100,115],
[122,117,108,117,103,101,110,0,106],
[95,91,102,89,90,84,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,95,97,93,94,104,86,108],
[110,0,108,102,102,110,107,106,122],
[115,102,0,114,99,107,103,98,108],
[113,108,96,0,101,100,102,96,115],
[117,108,111,109,0,98,102,105,117],
[116,100,103,110,112,0,102,107,115],
[106,103,107,108,108,108,0,105,117],
[124,104,112,114,105,103,105,0,105],
[102,88,102,95,93,95,93,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,106,108,108,108,109,96],
[109,0,109,114,104,112,107,104,108],
[95,101,0,106,100,97,103,95,108],
[104,96,104,0,103,97,105,104,105],
[102,106,110,107,0,106,111,99,110],
[102,98,113,113,104,0,109,107,103],
[102,103,107,105,99,101,0,100,105],
[101,106,115,106,111,103,110,0,106],
[114,102,102,105,100,107,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,93,119,98,108,105,105],
[111,0,103,110,115,96,104,106,105],
[109,107,0,105,104,97,107,112,101],
[117,100,105,0,115,114,112,120,115],
[91,95,106,95,0,84,111,106,110],
[112,114,113,96,126,0,109,119,119],
[102,106,103,98,99,101,0,102,115],
[105,104,98,90,104,91,108,0,100],
[105,105,109,95,100,91,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,120,107,99,109,104,108],
[99,0,106,97,96,104,112,97,98],
[98,104,0,103,80,97,93,97,88],
[90,113,107,0,106,96,104,96,98],
[103,114,130,104,0,109,113,106,98],
[111,106,113,114,101,0,115,103,98],
[101,98,117,106,97,95,0,105,96],
[106,113,113,114,104,107,105,0,97],
[102,112,122,112,112,112,114,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,117,107,99,108,109,108],
[102,0,104,108,99,105,100,106,91],
[96,106,0,105,90,99,98,102,105],
[93,102,105,0,95,95,105,104,96],
[103,111,120,115,0,104,109,106,117],
[111,105,111,115,106,0,109,118,108],
[102,110,112,105,101,101,0,106,107],
[101,104,108,106,104,92,104,0,108],
[102,119,105,114,93,102,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,115,111,112,108,111,110],
[104,0,107,110,116,106,97,97,105],
[114,103,0,118,120,123,104,110,111],
[95,100,92,0,99,102,91,85,96],
[99,94,90,111,0,103,95,93,108],
[98,104,87,108,107,0,95,105,104],
[102,113,106,119,115,115,0,101,116],
[99,113,100,125,117,105,109,0,102],
[100,105,99,114,102,106,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,111,106,114,112,104,92,114],
[93,0,106,90,100,110,107,98,109],
[99,104,0,102,117,111,122,93,111],
[104,120,108,0,117,118,103,105,112],
[96,110,93,93,0,109,104,98,105],
[98,100,99,92,101,0,95,98,104],
[106,103,88,107,106,115,0,107,115],
[118,112,117,105,112,112,103,0,116],
[96,101,99,98,105,106,95,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,113,106,115,97,104,123],
[110,0,115,99,108,110,103,103,112],
[97,95,0,93,92,103,84,80,104],
[97,111,117,0,96,107,97,97,110],
[104,102,118,114,0,102,97,100,113],
[95,100,107,103,108,0,93,99,109],
[113,107,126,113,113,117,0,105,116],
[106,107,130,113,110,111,105,0,121],
[87,98,106,100,97,101,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,109,104,106,104,107,99],
[101,0,133,105,108,104,109,107,93],
[98,77,0,98,100,92,95,98,80],
[101,105,112,0,100,96,97,99,96],
[106,102,110,110,0,115,114,106,106],
[104,106,118,114,95,0,106,109,104],
[106,101,115,113,96,104,0,118,111],
[103,103,112,111,104,101,92,0,99],
[111,117,130,114,104,106,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,85,97,80,97,87,98,88],
[114,0,105,98,98,110,104,117,100],
[125,105,0,96,98,107,112,113,113],
[113,112,114,0,108,115,105,118,108],
[130,112,112,102,0,111,106,123,119],
[113,100,103,95,99,0,97,119,104],
[123,106,98,105,104,113,0,108,104],
[112,93,97,92,87,91,102,0,95],
[122,110,97,102,91,106,106,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,125,119,116,101,108,118,113],
[89,0,75,104,107,106,100,113,115],
[85,135,0,125,104,103,107,110,109],
[91,106,85,0,104,107,96,110,121],
[94,103,106,106,0,91,110,109,119],
[109,104,107,103,119,0,112,111,120],
[102,110,103,114,100,98,0,102,113],
[92,97,100,100,101,99,108,0,100],
[97,95,101,89,91,90,97,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,116,115,103,109,104,104],
[103,0,104,116,117,104,116,113,106],
[106,106,0,121,114,105,103,117,113],
[94,94,89,0,111,91,87,100,105],
[95,93,96,99,0,93,102,101,93],
[107,106,105,119,117,0,97,114,107],
[101,94,107,123,108,113,0,105,106],
[106,97,93,110,109,96,105,0,101],
[106,104,97,105,117,103,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,88,86,85,91,94,84,107],
[111,0,97,104,114,108,112,113,109],
[122,113,0,111,115,105,119,111,122],
[124,106,99,0,99,102,116,108,115],
[125,96,95,111,0,105,106,98,106],
[119,102,105,108,105,0,120,101,111],
[116,98,91,94,104,90,0,94,107],
[126,97,99,102,112,109,116,0,102],
[103,101,88,95,104,99,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,101,124,110,107,107,124],
[103,0,97,110,117,113,104,103,124],
[101,113,0,115,130,119,104,100,121],
[109,100,95,0,113,111,106,106,116],
[86,93,80,97,0,92,95,90,103],
[100,97,91,99,118,0,99,96,111],
[103,106,106,104,115,111,0,113,114],
[103,107,110,104,120,114,97,0,107],
[86,86,89,94,107,99,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,82,82,106,81,97,80],
[120,0,118,106,99,110,85,99,102],
[124,92,0,87,84,122,78,96,91],
[128,104,123,0,101,130,100,120,111],
[128,111,126,109,0,125,110,115,104],
[104,100,88,80,85,0,84,93,85],
[129,125,132,110,100,126,0,122,109],
[113,111,114,90,95,117,88,0,111],
[130,108,119,99,106,125,101,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,96,79,90,105,93,103,100],
[107,0,112,75,97,118,114,117,115],
[114,98,0,100,91,124,117,119,107],
[131,135,110,0,121,117,106,122,104],
[120,113,119,89,0,120,105,107,126],
[105,92,86,93,90,0,111,125,110],
[117,96,93,104,105,99,0,105,117],
[107,93,91,88,103,85,105,0,124],
[110,95,103,106,84,100,93,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,69,87,91,92,118,108,87],
[133,0,109,98,113,143,145,124,126],
[141,101,0,96,113,126,136,116,125],
[123,112,114,0,136,119,127,84,119],
[119,97,97,74,0,129,150,108,113],
[118,67,84,91,81,0,111,106,90],
[92,65,74,83,60,99,0,75,110],
[102,86,94,126,102,104,135,0,110],
[123,84,85,91,97,120,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,109,101,112,104,97,114],
[103,0,106,110,101,111,89,106,105],
[102,104,0,105,105,111,100,95,102],
[101,100,105,0,106,114,97,98,102],
[109,109,105,104,0,102,90,91,96],
[98,99,99,96,108,0,97,96,97],
[106,121,110,113,120,113,0,102,100],
[113,104,115,112,119,114,108,0,118],
[96,105,108,108,114,113,110,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,102,115,121,135,102,113,131],
[87,0,110,93,101,142,94,125,119],
[108,100,0,106,135,117,106,131,123],
[95,117,104,0,129,113,79,106,109],
[89,109,75,81,0,127,87,85,105],
[75,68,93,97,83,0,87,90,111],
[108,116,104,131,123,123,0,129,130],
[97,85,79,104,125,120,81,0,111],
[79,91,87,101,105,99,80,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,114,114,109,100,112,107],
[101,0,107,105,104,111,99,101,102],
[105,103,0,118,107,109,113,117,114],
[96,105,92,0,101,102,94,106,103],
[96,106,103,109,0,110,99,105,97],
[101,99,101,108,100,0,105,107,106],
[110,111,97,116,111,105,0,111,112],
[98,109,93,104,105,103,99,0,107],
[103,108,96,107,113,104,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,97,94,106,100,101,108],
[104,0,98,86,92,110,89,90,107],
[108,112,0,102,107,102,100,106,107],
[113,124,108,0,102,98,95,93,101],
[116,118,103,108,0,115,109,115,114],
[104,100,108,112,95,0,104,104,105],
[110,121,110,115,101,106,0,109,113],
[109,120,104,117,95,106,101,0,103],
[102,103,103,109,96,105,97,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,67,102,158,91,113,95,90,116],
[143,0,109,151,113,123,113,100,91],
[108,101,0,148,92,106,98,106,113],
[52,59,62,0,66,84,69,72,67],
[119,97,118,144,0,136,121,111,100],
[97,87,104,126,74,0,103,97,103],
[115,97,112,141,89,107,0,96,108],
[120,110,104,138,99,113,114,0,124],
[94,119,97,143,110,107,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,93,107,97,99,113,91,99],
[111,0,102,104,112,104,104,97,122],
[117,108,0,104,100,113,106,108,108],
[103,106,106,0,108,100,103,93,106],
[113,98,110,102,0,107,113,101,112],
[111,106,97,110,103,0,98,102,113],
[97,106,104,107,97,112,0,96,107],
[119,113,102,117,109,108,114,0,119],
[111,88,102,104,98,97,103,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,122,104,103,132,95,123,106],
[100,0,103,129,96,129,110,109,101],
[88,107,0,122,114,117,121,114,111],
[106,81,88,0,78,103,80,97,69],
[107,114,96,132,0,125,106,117,103],
[78,81,93,107,85,0,78,95,80],
[115,100,89,130,104,132,0,128,101],
[87,101,96,113,93,115,82,0,115],
[104,109,99,141,107,130,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,103,85,81,88,104,100],
[100,0,98,105,91,106,102,123,107],
[117,112,0,109,84,89,114,119,118],
[107,105,101,0,84,108,76,103,86],
[125,119,126,126,0,96,114,144,119],
[129,104,121,102,114,0,124,98,130],
[122,108,96,134,96,86,0,117,132],
[106,87,91,107,66,112,93,0,102],
[110,103,92,124,91,80,78,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,85,103,105,98,116,104,113],
[94,0,78,98,112,116,110,79,95],
[125,132,0,109,120,121,135,99,117],
[107,112,101,0,107,118,125,108,121],
[105,98,90,103,0,95,123,81,107],
[112,94,89,92,115,0,114,71,106],
[94,100,75,85,87,96,0,74,84],
[106,131,111,102,129,139,136,0,107],
[97,115,93,89,103,104,126,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,105,96,109,114,110,103],
[103,0,108,115,103,103,118,114,103],
[113,102,0,113,116,115,121,109,120],
[105,95,97,0,98,103,106,112,99],
[114,107,94,112,0,109,112,113,102],
[101,107,95,107,101,0,103,110,106],
[96,92,89,104,98,107,0,100,92],
[100,96,101,98,97,100,110,0,102],
[107,107,90,111,108,104,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,98,98,104,114,94,100],
[106,0,103,127,121,106,92,101,103],
[100,107,0,106,101,115,120,115,91],
[112,83,104,0,91,96,91,108,90],
[112,89,109,119,0,112,127,106,105],
[106,104,95,114,98,0,105,95,95],
[96,118,90,119,83,105,0,105,89],
[116,109,95,102,104,115,105,0,108],
[110,107,119,120,105,115,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,137,112,109,109,95,117,109],
[88,0,128,96,105,104,89,130,110],
[73,82,0,50,66,84,65,64,94],
[98,114,160,0,131,122,110,155,114],
[101,105,144,79,0,101,85,115,105],
[101,106,126,88,109,0,85,120,101],
[115,121,145,100,125,125,0,133,97],
[93,80,146,55,95,90,77,0,110],
[101,100,116,96,105,109,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,120,107,106,97,116,97,104],
[119,0,108,107,110,105,126,103,121],
[90,102,0,101,102,105,100,98,107],
[103,103,109,0,99,99,122,97,107],
[104,100,108,111,0,100,110,106,104],
[113,105,105,111,110,0,112,104,119],
[94,84,110,88,100,98,0,100,101],
[113,107,112,113,104,106,110,0,119],
[106,89,103,103,106,91,109,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,96,94,99,111,102,81],
[101,0,79,109,79,98,112,113,87],
[98,131,0,93,107,96,107,116,105],
[114,101,117,0,104,114,128,124,116],
[116,131,103,106,0,104,125,111,96],
[111,112,114,96,106,0,98,123,101],
[99,98,103,82,85,112,0,101,94],
[108,97,94,86,99,87,109,0,92],
[129,123,105,94,114,109,116,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,96,78,59,93,100,114,58],
[142,0,140,87,106,130,144,165,90],
[114,70,0,92,81,106,102,100,66],
[132,123,118,0,82,128,115,100,75],
[151,104,129,128,0,156,163,142,141],
[117,80,104,82,54,0,138,130,93],
[110,66,108,95,47,72,0,81,60],
[96,45,110,110,68,80,129,0,107],
[152,120,144,135,69,117,150,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,66,98,115,93,76,83,100],
[121,0,101,122,94,96,98,79,100],
[144,109,0,110,123,107,112,100,115],
[112,88,100,0,89,99,108,111,116],
[95,116,87,121,0,108,101,92,128],
[117,114,103,111,102,0,122,99,123],
[134,112,98,102,109,88,0,90,102],
[127,131,110,99,118,111,120,0,120],
[110,110,95,94,82,87,108,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,114,128,106,106,105,125,109],
[118,0,127,134,134,105,144,116,118],
[96,83,0,127,93,84,114,103,103],
[82,76,83,0,92,71,109,93,91],
[104,76,117,118,0,99,115,105,115],
[104,105,126,139,111,0,146,125,121],
[105,66,96,101,95,64,0,91,94],
[85,94,107,117,105,85,119,0,88],
[101,92,107,119,95,89,116,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,103,91,101,110,91,95],
[93,0,98,109,94,89,100,94,82],
[113,112,0,113,100,103,112,114,103],
[107,101,97,0,91,97,110,92,90],
[119,116,110,119,0,110,120,110,94],
[109,121,107,113,100,0,101,100,95],
[100,110,98,100,90,109,0,92,99],
[119,116,96,118,100,110,118,0,109],
[115,128,107,120,116,115,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,129,104,102,92,105,102,88],
[119,0,117,79,97,100,97,88,106],
[81,93,0,91,85,86,94,83,80],
[106,131,119,0,101,109,109,108,105],
[108,113,125,109,0,115,114,116,103],
[118,110,124,101,95,0,108,99,97],
[105,113,116,101,96,102,0,90,112],
[108,122,127,102,94,111,120,0,100],
[122,104,130,105,107,113,98,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,116,111,108,112,110,100],
[114,0,95,115,115,115,98,107,108],
[108,115,0,105,105,110,104,107,117],
[94,95,105,0,106,101,110,97,108],
[99,95,105,104,0,116,107,96,108],
[102,95,100,109,94,0,101,104,101],
[98,112,106,100,103,109,0,110,119],
[100,103,103,113,114,106,100,0,108],
[110,102,93,102,102,109,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,109,105,110,105,115,111],
[99,0,101,100,93,113,101,110,107],
[102,109,0,99,102,113,102,116,108],
[101,110,111,0,107,124,106,127,109],
[105,117,108,103,0,124,104,122,110],
[100,97,97,86,86,0,96,104,99],
[105,109,108,104,106,114,0,114,112],
[95,100,94,83,88,106,96,0,97],
[99,103,102,101,100,111,98,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,107,108,114,102,99,111],
[100,0,104,105,110,113,112,110,120],
[105,106,0,97,96,103,99,98,108],
[103,105,113,0,103,112,114,109,113],
[102,100,114,107,0,112,109,108,124],
[96,97,107,98,98,0,97,111,106],
[108,98,111,96,101,113,0,107,112],
[111,100,112,101,102,99,103,0,107],
[99,90,102,97,86,104,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,92,128,107,106,100,109],
[86,0,100,89,100,88,88,85,98],
[99,110,0,92,121,88,100,93,105],
[118,121,118,0,117,115,107,97,116],
[82,110,89,93,0,94,93,87,91],
[103,122,122,95,116,0,103,96,117],
[104,122,110,103,117,107,0,109,116],
[110,125,117,113,123,114,101,0,116],
[101,112,105,94,119,93,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,116,113,107,114,126,108],
[105,0,101,111,108,102,108,106,106],
[95,109,0,102,109,106,102,116,98],
[94,99,108,0,108,93,111,114,108],
[97,102,101,102,0,111,104,124,102],
[103,108,104,117,99,0,108,123,105],
[96,102,108,99,106,102,0,114,120],
[84,104,94,96,86,87,96,0,94],
[102,104,112,102,108,105,90,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,88,101,93,87,103,98,94],
[113,0,88,105,118,107,108,105,113],
[122,122,0,119,120,98,108,109,114],
[109,105,91,0,112,102,106,100,101],
[117,92,90,98,0,99,99,106,101],
[123,103,112,108,111,0,104,103,108],
[107,102,102,104,111,106,0,102,98],
[112,105,101,110,104,107,108,0,106],
[116,97,96,109,109,102,112,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,115,120,120,120,110,112],
[105,0,107,111,116,123,115,116,114],
[95,103,0,106,106,114,106,96,99],
[95,99,104,0,105,106,113,117,103],
[90,94,104,105,0,89,106,105,101],
[90,87,96,104,121,0,103,94,100],
[90,95,104,97,104,107,0,107,104],
[100,94,114,93,105,116,103,0,99],
[98,96,111,107,109,110,106,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,105,104,111,102,106,97],
[111,0,106,109,110,117,101,107,108],
[111,104,0,101,99,117,102,100,107],
[105,101,109,0,94,120,106,111,102],
[106,100,111,116,0,124,103,108,116],
[99,93,93,90,86,0,108,93,98],
[108,109,108,104,107,102,0,103,117],
[104,103,110,99,102,117,107,0,104],
[113,102,103,108,94,112,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,113,107,108,109,101,130],
[97,0,124,123,114,118,99,109,112],
[98,86,0,94,105,90,80,93,93],
[97,87,116,0,109,109,79,101,114],
[103,96,105,101,0,111,105,97,117],
[102,92,120,101,99,0,105,102,99],
[101,111,130,131,105,105,0,101,123],
[109,101,117,109,113,108,109,0,117],
[80,98,117,96,93,111,87,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,88,108,116,107,102,114],
[106,0,96,107,118,95,114,107,87],
[106,114,0,93,94,101,108,115,106],
[122,103,117,0,102,99,121,119,111],
[102,92,116,108,0,106,97,109,103],
[94,115,109,111,104,0,108,118,110],
[103,96,102,89,113,102,0,114,100],
[108,103,95,91,101,92,96,0,99],
[96,123,104,99,107,100,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,83,89,87,120,96,107,102],
[109,0,115,96,102,122,86,115,118],
[127,95,0,95,90,134,112,114,128],
[121,114,115,0,98,141,101,117,127],
[123,108,120,112,0,118,95,122,109],
[90,88,76,69,92,0,78,83,102],
[114,124,98,109,115,132,0,114,124],
[103,95,96,93,88,127,96,0,104],
[108,92,82,83,101,108,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,112,113,116,105,112,130],
[99,0,98,105,114,107,95,112,128],
[96,112,0,109,116,119,112,111,123],
[98,105,101,0,107,107,97,105,116],
[97,96,94,103,0,108,93,103,113],
[94,103,91,103,102,0,93,105,112],
[105,115,98,113,117,117,0,120,124],
[98,98,99,105,107,105,90,0,117],
[80,82,87,94,97,98,86,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,119,104,106,105,105,112],
[101,0,108,106,108,100,94,95,113],
[103,102,0,114,105,115,105,109,106],
[91,104,96,0,111,99,93,99,95],
[106,102,105,99,0,109,97,100,113],
[104,110,95,111,101,0,96,96,104],
[105,116,105,117,113,114,0,105,116],
[105,115,101,111,110,114,105,0,110],
[98,97,104,115,97,106,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,111,102,105,107,108,100,95],
[106,0,100,98,93,100,105,98,93],
[99,110,0,107,104,114,105,103,105],
[108,112,103,0,98,108,106,107,101],
[105,117,106,112,0,115,111,105,111],
[103,110,96,102,95,0,93,102,96],
[102,105,105,104,99,117,0,104,98],
[110,112,107,103,105,108,106,0,99],
[115,117,105,109,99,114,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,104,116,107,111,112,104],
[96,0,99,86,104,90,91,87,86],
[108,111,0,117,110,100,114,104,114],
[106,124,93,0,119,96,106,105,105],
[94,106,100,91,0,94,105,92,93],
[103,120,110,114,116,0,117,113,103],
[99,119,96,104,105,93,0,106,104],
[98,123,106,105,118,97,104,0,124],
[106,124,96,105,117,107,106,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,104,101,98,108,114,105],
[105,0,107,105,107,106,102,105,102],
[109,103,0,101,104,106,99,108,106],
[106,105,109,0,97,107,111,107,107],
[109,103,106,113,0,112,110,107,96],
[112,104,104,103,98,0,100,96,99],
[102,108,111,99,100,110,0,111,105],
[96,105,102,103,103,114,99,0,104],
[105,108,104,103,114,111,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,106,101,105,116,93,109,112],
[122,0,109,104,106,128,111,115,109],
[104,101,0,102,94,110,112,118,100],
[109,106,108,0,107,123,96,112,106],
[105,104,116,103,0,125,98,111,113],
[94,82,100,87,85,0,83,96,92],
[117,99,98,114,112,127,0,125,112],
[101,95,92,98,99,114,85,0,102],
[98,101,110,104,97,118,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,114,116,116,124,117,115,119],
[107,0,100,107,100,104,109,105,114],
[96,110,0,120,105,110,102,119,110],
[94,103,90,0,97,101,99,102,103],
[94,110,105,113,0,106,103,105,114],
[86,106,100,109,104,0,98,120,111],
[93,101,108,111,107,112,0,106,98],
[95,105,91,108,105,90,104,0,101],
[91,96,100,107,96,99,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,123,108,85,125,90,94,88],
[121,0,121,114,114,136,97,110,106],
[87,89,0,100,81,106,84,74,84],
[102,96,110,0,121,131,82,103,112],
[125,96,129,89,0,124,107,121,108],
[85,74,104,79,86,0,55,57,98],
[120,113,126,128,103,155,0,132,83],
[116,100,136,107,89,153,78,0,117],
[122,104,126,98,102,112,127,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,108,133,134,104,106,91],
[104,0,81,68,120,122,80,114,105],
[91,129,0,77,137,123,116,88,112],
[102,142,133,0,124,138,141,129,95],
[77,90,73,86,0,89,100,67,64],
[76,88,87,72,121,0,101,94,99],
[106,130,94,69,110,109,0,96,107],
[104,96,122,81,143,116,114,0,108],
[119,105,98,115,146,111,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,110,115,129,114,129,98,113],
[105,0,108,97,110,111,114,121,106],
[100,102,0,106,100,105,119,108,106],
[95,113,104,0,122,118,122,109,111],
[81,100,110,88,0,107,109,92,87],
[96,99,105,92,103,0,115,107,95],
[81,96,91,88,101,95,0,85,100],
[112,89,102,101,118,103,125,0,98],
[97,104,104,99,123,115,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,121,106,119,107,115,103],
[111,0,113,118,105,124,102,111,98],
[105,97,0,99,104,105,95,107,95],
[89,92,111,0,97,107,98,102,91],
[104,105,106,113,0,127,109,115,108],
[91,86,105,103,83,0,100,100,89],
[103,108,115,112,101,110,0,97,95],
[95,99,103,108,95,110,113,0,106],
[107,112,115,119,102,121,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,108,104,92,94,90,94,118],
[117,0,121,119,99,113,102,104,121],
[102,89,0,100,85,87,102,99,110],
[106,91,110,0,93,92,99,96,105],
[118,111,125,117,0,111,111,101,124],
[116,97,123,118,99,0,87,107,126],
[120,108,108,111,99,123,0,105,106],
[116,106,111,114,109,103,105,0,119],
[92,89,100,105,86,84,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,106,111,108,110,111,97,109],
[84,0,92,96,96,100,87,96,89],
[104,118,0,109,99,98,107,91,114],
[99,114,101,0,106,105,120,103,106],
[102,114,111,104,0,106,122,96,103],
[100,110,112,105,104,0,102,103,108],
[99,123,103,90,88,108,0,109,100],
[113,114,119,107,114,107,101,0,103],
[101,121,96,104,107,102,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,154,87,99,104,87,96,104],
[114,0,154,90,106,154,90,146,151],
[56,56,0,96,59,56,143,96,120],
[123,120,114,0,59,123,103,59,120],
[111,104,151,151,0,151,151,207,104],
[106,56,154,87,59,0,87,143,104],
[123,120,67,107,59,123,0,123,64],
[114,64,114,151,3,67,87,0,64],
[106,59,90,90,106,106,146,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,100,103,103,105,107,103],
[108,0,112,110,104,98,107,113,99],
[104,98,0,117,105,100,99,109,105],
[110,100,93,0,100,87,100,96,91],
[107,106,105,110,0,95,100,110,99],
[107,112,110,123,115,0,110,112,97],
[105,103,111,110,110,100,0,109,99],
[103,97,101,114,100,98,101,0,93],
[107,111,105,119,111,113,111,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,107,94,110,115,108,116,111],
[91,0,96,105,109,100,107,114,104],
[103,114,0,105,112,97,111,106,102],
[116,105,105,0,114,112,106,120,107],
[100,101,98,96,0,92,99,117,99],
[95,110,113,98,118,0,109,122,110],
[102,103,99,104,111,101,0,119,109],
[94,96,104,90,93,88,91,0,102],
[99,106,108,103,111,100,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,112,113,127,112,111,101],
[103,0,119,108,124,128,108,108,110],
[100,91,0,104,97,123,107,97,114],
[98,102,106,0,115,119,100,109,109],
[97,86,113,95,0,114,90,100,106],
[83,82,87,91,96,0,95,94,96],
[98,102,103,110,120,115,0,94,105],
[99,102,113,101,110,116,116,0,114],
[109,100,96,101,104,114,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,109,99,99,90,106,101],
[107,0,110,113,94,108,108,124,106],
[110,100,0,103,103,93,86,99,101],
[101,97,107,0,106,103,111,120,105],
[111,116,107,104,0,105,103,109,101],
[111,102,117,107,105,0,107,101,94],
[120,102,124,99,107,103,0,108,113],
[104,86,111,90,101,109,102,0,97],
[109,104,109,105,109,116,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,121,109,95,111,91,95,94],
[122,0,134,122,118,127,86,109,129],
[89,76,0,100,98,73,73,79,105],
[101,88,110,0,90,97,90,90,113],
[115,92,112,120,0,111,106,111,103],
[99,83,137,113,99,0,85,91,97],
[119,124,137,120,104,125,0,97,114],
[115,101,131,120,99,119,113,0,110],
[116,81,105,97,107,113,96,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,93,89,99,92,107,90],
[113,0,103,111,95,108,108,112,87],
[116,107,0,103,105,116,110,117,105],
[117,99,107,0,114,123,117,110,111],
[121,115,105,96,0,112,95,114,102],
[111,102,94,87,98,0,102,102,92],
[118,102,100,93,115,108,0,101,99],
[103,98,93,100,96,108,109,0,100],
[120,123,105,99,108,118,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,114,101,108,104,101,100,112],
[108,0,117,93,80,91,91,100,93],
[96,93,0,90,77,88,83,94,95],
[109,117,120,0,110,107,98,106,106],
[102,130,133,100,0,100,106,111,109],
[106,119,122,103,110,0,108,98,113],
[109,119,127,112,104,102,0,109,107],
[110,110,116,104,99,112,101,0,107],
[98,117,115,104,101,97,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,102,83,99,104,108,106],
[93,0,93,88,97,96,95,103,99],
[103,117,0,105,96,111,109,103,123],
[108,122,105,0,102,107,110,100,112],
[127,113,114,108,0,119,124,115,101],
[111,114,99,103,91,0,108,101,104],
[106,115,101,100,86,102,0,107,97],
[102,107,107,110,95,109,103,0,117],
[104,111,87,98,109,106,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,101,90,78,128,93,110],
[117,0,119,134,102,124,150,119,137],
[106,91,0,116,88,102,123,64,122],
[109,76,94,0,94,82,131,97,106],
[120,108,122,116,0,98,145,118,123],
[132,86,108,128,112,0,147,103,126],
[82,60,87,79,65,63,0,78,79],
[117,91,146,113,92,107,132,0,124],
[100,73,88,104,87,84,131,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,104,123,109,102,103,119],
[101,0,99,84,122,108,95,97,102],
[107,111,0,107,115,100,113,98,103],
[106,126,103,0,120,99,105,111,109],
[87,88,95,90,0,93,95,84,101],
[101,102,110,111,117,0,103,97,102],
[108,115,97,105,115,107,0,100,131],
[107,113,112,99,126,113,110,0,106],
[91,108,107,101,109,108,79,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,91,93,100,126,85,105,83],
[130,0,101,94,125,143,107,100,102],
[119,109,0,104,131,145,112,119,111],
[117,116,106,0,122,133,106,90,107],
[110,85,79,88,0,113,86,89,91],
[84,67,65,77,97,0,76,70,71],
[125,103,98,104,124,134,0,98,108],
[105,110,91,120,121,140,112,0,106],
[127,108,99,103,119,139,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,123,103,122,103,112,103],
[96,0,103,98,94,98,93,97,94],
[88,107,0,105,104,114,87,104,100],
[87,112,105,0,93,112,96,107,88],
[107,116,106,117,0,117,101,100,99],
[88,112,96,98,93,0,81,96,78],
[107,117,123,114,109,129,0,111,105],
[98,113,106,103,110,114,99,0,100],
[107,116,110,122,111,132,105,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,108,96,100,103,109,97,108],
[92,0,99,86,96,93,106,95,103],
[102,111,0,92,94,106,115,95,105],
[114,124,118,0,104,114,116,109,112],
[110,114,116,106,0,106,112,101,108],
[107,117,104,96,104,0,106,95,97],
[101,104,95,94,98,104,0,99,104],
[113,115,115,101,109,115,111,0,120],
[102,107,105,98,102,113,106,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,104,110,135,126,73,126,141],
[89,0,96,113,103,143,118,118,150],
[106,114,0,105,105,130,106,110,129],
[100,97,105,0,83,115,111,117,128],
[75,107,105,127,0,116,90,97,139],
[84,67,80,95,94,0,102,96,133],
[137,92,104,99,120,108,0,116,117],
[84,92,100,93,113,114,94,0,123],
[69,60,81,82,71,77,93,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,120,106,114,97,104,112],
[99,0,118,107,103,111,106,108,105],
[96,92,0,99,103,104,94,92,95],
[90,103,111,0,105,108,95,92,93],
[104,107,107,105,0,108,104,102,101],
[96,99,106,102,102,0,93,98,98],
[113,104,116,115,106,117,0,105,106],
[106,102,118,118,108,112,105,0,107],
[98,105,115,117,109,112,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,86,90,104,106,145,118,131],
[90,0,106,88,77,87,156,90,116],
[124,104,0,103,92,118,140,112,106],
[120,122,107,0,90,126,158,118,109],
[106,133,118,120,0,103,173,142,108],
[104,123,92,84,107,0,145,114,113],
[65,54,70,52,37,65,0,42,71],
[92,120,98,92,68,96,168,0,112],
[79,94,104,101,102,97,139,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,123,108,114,107,126,111,103],
[95,0,121,113,111,105,133,109,120],
[87,89,0,85,87,91,105,82,94],
[102,97,125,0,100,114,123,108,112],
[96,99,123,110,0,117,122,100,115],
[103,105,119,96,93,0,116,102,115],
[84,77,105,87,88,94,0,82,105],
[99,101,128,102,110,108,128,0,120],
[107,90,116,98,95,95,105,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,116,107,99,105,126,118,115],
[103,0,116,114,107,114,114,125,115],
[94,94,0,88,92,112,113,117,104],
[103,96,122,0,99,107,119,120,115],
[111,103,118,111,0,114,119,124,115],
[105,96,98,103,96,0,116,116,111],
[84,96,97,91,91,94,0,105,99],
[92,85,93,90,86,94,105,0,107],
[95,95,106,95,95,99,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,98,93,101,97,104,97],
[117,0,112,121,109,110,110,112,101],
[117,98,0,115,104,101,108,106,107],
[112,89,95,0,90,96,101,102,106],
[117,101,106,120,0,114,105,107,107],
[109,100,109,114,96,0,110,109,101],
[113,100,102,109,105,100,0,109,107],
[106,98,104,108,103,101,101,0,103],
[113,109,103,104,103,109,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,118,114,104,92,108,111,109],
[113,0,136,113,107,94,107,117,108],
[92,74,0,81,85,91,88,92,99],
[96,97,129,0,97,106,113,110,120],
[106,103,125,113,0,110,113,112,114],
[118,116,119,104,100,0,118,98,111],
[102,103,122,97,97,92,0,114,112],
[99,93,118,100,98,112,96,0,121],
[101,102,111,90,96,99,98,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,87,92,97,110,109,100,107],
[105,0,96,99,96,94,119,91,103],
[123,114,0,103,120,111,128,127,110],
[118,111,107,0,124,104,109,118,104],
[113,114,90,86,0,87,97,100,111],
[100,116,99,106,123,0,111,98,108],
[101,91,82,101,113,99,0,86,94],
[110,119,83,92,110,112,124,0,109],
[103,107,100,106,99,102,116,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,112,122,110,109,127,103,105],
[94,0,103,108,101,108,114,107,95],
[98,107,0,93,89,98,100,111,96],
[88,102,117,0,102,97,107,106,108],
[100,109,121,108,0,111,111,126,124],
[101,102,112,113,99,0,100,124,103],
[83,96,110,103,99,110,0,117,109],
[107,103,99,104,84,86,93,0,99],
[105,115,114,102,86,107,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,107,100,97,104,96,106],
[109,0,96,107,93,81,88,89,92],
[117,114,0,115,105,113,111,103,110],
[103,103,95,0,104,90,97,98,107],
[110,117,105,106,0,103,92,114,108],
[113,129,97,120,107,0,115,108,122],
[106,122,99,113,118,95,0,106,100],
[114,121,107,112,96,102,104,0,110],
[104,118,100,103,102,88,110,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,114,91,111,106,95,100],
[107,0,110,111,96,127,103,102,119],
[105,100,0,117,102,109,104,106,106],
[96,99,93,0,91,111,93,93,94],
[119,114,108,119,0,128,104,117,111],
[99,83,101,99,82,0,95,100,94],
[104,107,106,117,106,115,0,106,103],
[115,108,104,117,93,110,104,0,100],
[110,91,104,116,99,116,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,115,99,109,111,96,109,107],
[110,0,112,104,109,103,94,112,114],
[95,98,0,101,102,91,95,106,101],
[111,106,109,0,103,104,105,112,103],
[101,101,108,107,0,99,99,108,112],
[99,107,119,106,111,0,104,117,111],
[114,116,115,105,111,106,0,116,107],
[101,98,104,98,102,93,94,0,108],
[103,96,109,107,98,99,103,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,123,130,88,168,148,183,145],
[102,0,75,95,77,129,99,95,121],
[87,135,0,140,115,138,145,153,145],
[80,115,70,0,64,138,99,134,121],
[122,133,95,146,0,140,101,121,116],
[42,81,72,72,70,0,66,79,148],
[62,111,65,111,109,144,0,140,121],
[27,115,57,76,89,131,70,0,108],
[65,89,65,89,94,62,89,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,115,113,107,108,106,107,92],
[104,0,123,110,127,95,112,121,104],
[95,87,0,91,108,84,89,84,84],
[97,100,119,0,111,87,98,113,80],
[103,83,102,99,0,98,116,101,106],
[102,115,126,123,112,0,107,109,112],
[104,98,121,112,94,103,0,114,99],
[103,89,126,97,109,101,96,0,90],
[118,106,126,130,104,98,111,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,102,83,93,73,67,74,78],
[137,0,112,125,122,101,109,107,118],
[108,98,0,92,112,83,91,92,81],
[127,85,118,0,119,112,101,105,100],
[117,88,98,91,0,84,91,86,108],
[137,109,127,98,126,0,93,112,110],
[143,101,119,109,119,117,0,119,92],
[136,103,118,105,124,98,91,0,115],
[132,92,129,110,102,100,118,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,84,85,108,107,105,88,112],
[109,0,102,102,106,107,102,108,108],
[126,108,0,111,121,118,102,104,114],
[125,108,99,0,111,110,98,99,107],
[102,104,89,99,0,118,100,106,106],
[103,103,92,100,92,0,103,87,90],
[105,108,108,112,110,107,0,104,107],
[122,102,106,111,104,123,106,0,113],
[98,102,96,103,104,120,103,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,85,84,96,85,95,117,82],
[104,0,98,111,104,77,111,122,108],
[125,112,0,97,107,97,95,113,96],
[126,99,113,0,94,109,108,125,95],
[114,106,103,116,0,97,121,136,84],
[125,133,113,101,113,0,103,126,82],
[115,99,115,102,89,107,0,137,89],
[93,88,97,85,74,84,73,0,75],
[128,102,114,115,126,128,121,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,111,120,108,95,117,126,113],
[87,0,91,124,87,70,78,94,91],
[99,119,0,120,102,102,80,94,104],
[90,86,90,0,84,87,65,100,77],
[102,123,108,126,0,107,99,98,110],
[115,140,108,123,103,0,100,104,115],
[93,132,130,145,111,110,0,105,113],
[84,116,116,110,112,106,105,0,124],
[97,119,106,133,100,95,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,119,114,117,119,112,107],
[110,0,97,114,103,115,117,107,115],
[101,113,0,112,96,110,119,95,101],
[91,96,98,0,100,101,111,100,102],
[96,107,114,110,0,107,119,100,102],
[93,95,100,109,103,0,114,93,96],
[91,93,91,99,91,96,0,101,91],
[98,103,115,110,110,117,109,0,102],
[103,95,109,108,108,114,119,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,126,118,108,114,115,104,119],
[98,0,114,110,104,106,108,105,108],
[84,96,0,105,87,89,105,100,94],
[92,100,105,0,100,102,101,100,100],
[102,106,123,110,0,111,113,103,105],
[96,104,121,108,99,0,109,105,99],
[95,102,105,109,97,101,0,103,103],
[106,105,110,110,107,105,107,0,106],
[91,102,116,110,105,111,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,138,110,104,112,127,130,108],
[76,0,107,90,76,94,100,99,83],
[72,103,0,88,90,80,90,91,93],
[100,120,122,0,107,112,127,114,110],
[106,134,120,103,0,122,117,118,119],
[98,116,130,98,88,0,121,118,104],
[83,110,120,83,93,89,0,89,95],
[80,111,119,96,92,92,121,0,99],
[102,127,117,100,91,106,115,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,106,114,99,119,114,106,131],
[93,0,112,104,81,106,87,92,92],
[104,98,0,108,102,123,78,118,99],
[96,106,102,0,102,116,102,104,108],
[111,129,108,108,0,124,101,120,113],
[91,104,87,94,86,0,107,120,110],
[96,123,132,108,109,103,0,124,126],
[104,118,92,106,90,90,86,0,103],
[79,118,111,102,97,100,84,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,120,113,102,115,110,112,120],
[101,0,112,108,114,108,103,102,118],
[90,98,0,94,95,103,83,99,99],
[97,102,116,0,96,99,97,99,116],
[108,96,115,114,0,102,95,105,111],
[95,102,107,111,108,0,91,106,111],
[100,107,127,113,115,119,0,119,119],
[98,108,111,111,105,104,91,0,115],
[90,92,111,94,99,99,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,89,91,105,84,100,87],
[103,0,102,110,99,103,93,89,97],
[114,108,0,106,100,111,103,105,98],
[121,100,104,0,102,104,100,101,90],
[119,111,110,108,0,114,101,108,96],
[105,107,99,106,96,0,107,96,97],
[126,117,107,110,109,103,0,113,94],
[110,121,105,109,102,114,97,0,106],
[123,113,112,120,114,113,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,98,93,105,93,90,104],
[112,0,101,104,97,100,112,95,115],
[117,109,0,101,108,103,113,113,110],
[112,106,109,0,98,94,110,103,110],
[117,113,102,112,0,99,112,103,106],
[105,110,107,116,111,0,99,92,104],
[117,98,97,100,98,111,0,99,108],
[120,115,97,107,107,118,111,0,107],
[106,95,100,100,104,106,102,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,93,101,85,92,86,107,115],
[124,0,108,104,120,97,112,104,130],
[117,102,0,94,113,101,104,106,103],
[109,106,116,0,97,108,102,102,109],
[125,90,97,113,0,115,105,113,108],
[118,113,109,102,95,0,104,96,106],
[124,98,106,108,105,106,0,125,106],
[103,106,104,108,97,114,85,0,106],
[95,80,107,101,102,104,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,108,103,91,84,85,99],
[103,0,86,101,107,94,92,87,90],
[111,124,0,106,101,122,107,101,104],
[102,109,104,0,112,112,106,77,93],
[107,103,109,98,0,111,93,75,103],
[119,116,88,98,99,0,105,91,114],
[126,118,103,104,117,105,0,105,106],
[125,123,109,133,135,119,105,0,119],
[111,120,106,117,107,96,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,102,104,104,90,94,100],
[103,0,95,99,97,96,96,87,97],
[107,115,0,105,104,103,105,97,103],
[108,111,105,0,116,106,107,100,110],
[106,113,106,94,0,114,100,99,110],
[106,114,107,104,96,0,100,95,107],
[120,114,105,103,110,110,0,110,106],
[116,123,113,110,111,115,100,0,107],
[110,113,107,100,100,103,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,115,115,119,109,109,97,120],
[107,0,113,108,108,104,105,107,102],
[95,97,0,106,104,99,100,97,97],
[95,102,104,0,89,103,98,94,106],
[91,102,106,121,0,116,109,94,108],
[101,106,111,107,94,0,93,97,98],
[101,105,110,112,101,117,0,88,112],
[113,103,113,116,116,113,122,0,125],
[90,108,113,104,102,112,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,112,86,111,126,112,92],
[109,0,106,90,110,101,109,106,96],
[114,104,0,110,107,112,130,120,102],
[98,120,100,0,96,102,122,104,101],
[124,100,103,114,0,105,129,105,96],
[99,109,98,108,105,0,120,116,109],
[84,101,80,88,81,90,0,91,87],
[98,104,90,106,105,94,119,0,103],
[118,114,108,109,114,101,123,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,103,104,104,91,108,116,107],
[94,0,100,110,96,93,89,97,98],
[107,110,0,93,105,90,82,89,95],
[106,100,117,0,108,105,95,95,101],
[106,114,105,102,0,103,100,112,105],
[119,117,120,105,107,0,106,100,103],
[102,121,128,115,110,104,0,112,108],
[94,113,121,115,98,110,98,0,103],
[103,112,115,109,105,107,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,43,93,92,96,86,99,88],
[135,0,110,110,96,143,123,108,110],
[167,100,0,99,122,127,102,126,110],
[117,100,111,0,104,111,91,131,116],
[118,114,88,106,0,84,77,95,123],
[114,67,83,99,126,0,82,110,86],
[124,87,108,119,133,128,0,104,99],
[111,102,84,79,115,100,106,0,78],
[122,100,100,94,87,124,111,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,81,92,121,85,114,90,97,93],
[129,0,122,121,104,136,120,107,107],
[118,88,0,108,82,114,104,100,108],
[89,89,102,0,98,107,100,96,84],
[125,106,128,112,0,105,106,109,111],
[96,74,96,103,105,0,83,96,85],
[120,90,106,110,104,127,0,102,92],
[113,103,110,114,101,114,108,0,100],
[117,103,102,126,99,125,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,97,106,121,95,103,112,113],
[74,0,100,92,104,100,81,89,82],
[113,110,0,86,124,76,99,116,112],
[104,118,124,0,116,107,120,109,105],
[89,106,86,94,0,89,88,96,76],
[115,110,134,103,121,0,88,116,117],
[107,129,111,90,122,122,0,121,114],
[98,121,94,101,114,94,89,0,101],
[97,128,98,105,134,93,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,110,110,114,106,111,105,113],
[101,0,105,118,108,115,110,105,111],
[100,105,0,101,105,100,105,94,109],
[100,92,109,0,96,93,102,99,101],
[96,102,105,114,0,97,103,104,98],
[104,95,110,117,113,0,103,105,106],
[99,100,105,108,107,107,0,92,104],
[105,105,116,111,106,105,118,0,117],
[97,99,101,109,112,104,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,91,88,105,100,111,104,114],
[106,0,98,106,91,100,120,116,109],
[119,112,0,103,132,127,120,126,113],
[122,104,107,0,108,106,109,115,115],
[105,119,78,102,0,126,118,120,110],
[110,110,83,104,84,0,106,108,103],
[99,90,90,101,92,104,0,115,102],
[106,94,84,95,90,102,95,0,94],
[96,101,97,95,100,107,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,124,124,100,109,117,109,110],
[100,0,100,109,98,105,100,100,98],
[86,110,0,110,97,104,85,97,99],
[86,101,100,0,95,103,102,99,97],
[110,112,113,115,0,108,99,104,104],
[101,105,106,107,102,0,99,89,96],
[93,110,125,108,111,111,0,102,106],
[101,110,113,111,106,121,108,0,119],
[100,112,111,113,106,114,104,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,88,92,97,103,103,96,86],
[121,0,98,108,108,110,107,102,100],
[122,112,0,123,104,111,111,107,94],
[118,102,87,0,106,110,108,106,99],
[113,102,106,104,0,106,101,104,96],
[107,100,99,100,104,0,110,109,106],
[107,103,99,102,109,100,0,111,107],
[114,108,103,104,106,101,99,0,92],
[124,110,116,111,114,104,103,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,106,113,76,120,124,119,96],
[76,0,102,81,60,147,67,65,62],
[104,108,0,101,71,146,112,112,91],
[97,129,109,0,84,145,73,91,47],
[134,150,139,126,0,147,106,119,101],
[90,63,64,65,63,0,86,76,45],
[86,143,98,137,104,124,0,154,94],
[91,145,98,119,91,134,56,0,124],
[114,148,119,163,109,165,116,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,100,98,105,87,104,111],
[111,0,107,107,105,106,100,108,113],
[107,103,0,103,103,105,104,110,112],
[110,103,107,0,114,105,107,119,115],
[112,105,107,96,0,100,95,114,111],
[105,104,105,105,110,0,104,108,105],
[123,110,106,103,115,106,0,106,111],
[106,102,100,91,96,102,104,0,105],
[99,97,98,95,99,105,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,91,88,88,107,122,77,90],
[123,0,95,73,107,115,129,71,91],
[119,115,0,106,121,139,134,105,135],
[122,137,104,0,109,107,134,98,88],
[122,103,89,101,0,123,98,83,98],
[103,95,71,103,87,0,120,77,89],
[88,81,76,76,112,90,0,69,84],
[133,139,105,112,127,133,141,0,123],
[120,119,75,122,112,121,126,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,109,106,102,96,96,107,110],
[104,0,104,117,112,102,100,102,113],
[101,106,0,107,106,97,99,97,110],
[104,93,103,0,100,98,97,98,99],
[108,98,104,110,0,91,99,91,105],
[114,108,113,112,119,0,104,107,117],
[114,110,111,113,111,106,0,93,111],
[103,108,113,112,119,103,117,0,108],
[100,97,100,111,105,93,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,86,130,101,104,100,116],
[98,0,92,91,118,87,98,104,110],
[105,118,0,108,133,110,105,107,120],
[124,119,102,0,120,108,116,120,118],
[80,92,77,90,0,87,79,104,98],
[109,123,100,102,123,0,106,104,108],
[106,112,105,94,131,104,0,107,119],
[110,106,103,90,106,106,103,0,100],
[94,100,90,92,112,102,91,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,90,113,100,109,98,96,112],
[126,0,106,119,111,118,100,112,107],
[120,104,0,119,114,112,111,106,105],
[97,91,91,0,97,109,86,93,109],
[110,99,96,113,0,104,85,98,112],
[101,92,98,101,106,0,89,104,107],
[112,110,99,124,125,121,0,108,113],
[114,98,104,117,112,106,102,0,116],
[98,103,105,101,98,103,97,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,111,103,97,102,106,110],
[108,0,109,111,98,102,103,106,105],
[102,101,0,112,94,100,115,110,110],
[99,99,98,0,83,93,94,95,100],
[107,112,116,127,0,107,109,104,110],
[113,108,110,117,103,0,120,123,113],
[108,107,95,116,101,90,0,109,104],
[104,104,100,115,106,87,101,0,97],
[100,105,100,110,100,97,106,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,117,92,120,112,103,111,133],
[95,0,125,106,109,111,101,112,126],
[93,85,0,104,110,99,88,109,116],
[118,104,106,0,118,122,104,114,116],
[90,101,100,92,0,82,98,95,99],
[98,99,111,88,128,0,102,104,117],
[107,109,122,106,112,108,0,100,110],
[99,98,101,96,115,106,110,0,116],
[77,84,94,94,111,93,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,113,99,96,106,110,95],
[103,0,103,107,122,97,103,114,103],
[112,107,0,109,114,100,104,119,105],
[97,103,101,0,111,88,109,109,101],
[111,88,96,99,0,96,99,99,104],
[114,113,110,122,114,0,108,114,103],
[104,107,106,101,111,102,0,122,98],
[100,96,91,101,111,96,88,0,87],
[115,107,105,109,106,107,112,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,112,108,105,105,94,109,108],
[105,0,105,98,104,104,104,104,99],
[98,105,0,108,108,105,112,108,98],
[102,112,102,0,122,106,103,108,108],
[105,106,102,88,0,102,104,106,98],
[105,106,105,104,108,0,114,110,108],
[116,106,98,107,106,96,0,110,104],
[101,106,102,102,104,100,100,0,104],
[102,111,112,102,112,102,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,101,97,109,106,111,108,120],
[92,0,95,94,91,85,108,92,114],
[109,115,0,84,94,108,89,85,117],
[113,116,126,0,104,101,102,99,118],
[101,119,116,106,0,111,119,103,128],
[104,125,102,109,99,0,114,93,116],
[99,102,121,108,91,96,0,83,105],
[102,118,125,111,107,117,127,0,114],
[90,96,93,92,82,94,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,108,106,113,107,105,114],
[107,0,115,99,109,112,106,99,109],
[101,95,0,110,101,111,106,100,114],
[102,111,100,0,104,109,109,101,98],
[104,101,109,106,0,108,106,105,118],
[97,98,99,101,102,0,104,102,107],
[103,104,104,101,104,106,0,101,105],
[105,111,110,109,105,108,109,0,114],
[96,101,96,112,92,103,105,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,125,124,91,102,92,110,105],
[90,0,125,114,107,105,105,103,132],
[85,85,0,87,88,96,92,80,99],
[86,96,123,0,79,83,93,114,108],
[119,103,122,131,0,116,101,115,122],
[108,105,114,127,94,0,103,102,126],
[118,105,118,117,109,107,0,126,110],
[100,107,130,96,95,108,84,0,101],
[105,78,111,102,88,84,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,45,101,81,73,86,34,85,94],
[165,0,133,157,116,120,95,142,174],
[109,77,0,93,52,143,54,102,104],
[129,53,117,0,96,106,73,101,95],
[137,94,158,114,0,133,109,82,122],
[124,90,67,104,77,0,87,87,137],
[176,115,156,137,101,123,0,168,162],
[125,68,108,109,128,123,42,0,110],
[116,36,106,115,88,73,48,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,83,95,114,108,115,92,117],
[123,0,93,95,100,83,124,117,103],
[127,117,0,107,105,95,134,145,132],
[115,115,103,0,92,118,105,120,114],
[96,110,105,118,0,94,112,113,119],
[102,127,115,92,116,0,106,134,113],
[95,86,76,105,98,104,0,112,112],
[118,93,65,90,97,76,98,0,115],
[93,107,78,96,91,97,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,109,106,110,101,110,93,111],
[101,0,109,98,104,101,108,94,105],
[101,101,0,105,99,103,106,96,110],
[104,112,105,0,110,108,103,100,108],
[100,106,111,100,0,100,102,98,112],
[109,109,107,102,110,0,114,94,105],
[100,102,104,107,108,96,0,105,116],
[117,116,114,110,112,116,105,0,120],
[99,105,100,102,98,105,94,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,131,128,121,127,108,102,113],
[95,0,116,115,123,104,96,96,113],
[79,94,0,109,112,104,95,96,104],
[82,95,101,0,108,99,87,92,104],
[89,87,98,102,0,95,89,88,93],
[83,106,106,111,115,0,99,98,100],
[102,114,115,123,121,111,0,109,110],
[108,114,114,118,122,112,101,0,109],
[97,97,106,106,117,110,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,101,103,105,94,109,110],
[106,0,110,105,106,104,94,106,109],
[109,100,0,105,114,104,106,111,103],
[109,105,105,0,99,102,87,108,96],
[107,104,96,111,0,94,92,109,107],
[105,106,106,108,116,0,98,105,94],
[116,116,104,123,118,112,0,126,116],
[101,104,99,102,101,105,84,0,109],
[100,101,107,114,103,116,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,128,117,113,96,101,116,115],
[94,0,94,98,97,97,89,84,81],
[82,116,0,96,84,101,93,76,87],
[93,112,114,0,113,92,98,110,105],
[97,113,126,97,0,97,104,99,110],
[114,113,109,118,113,0,102,108,97],
[109,121,117,112,106,108,0,84,105],
[94,126,134,100,111,102,126,0,109],
[95,129,123,105,100,113,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,86,102,106,108,97,105,108],
[112,0,99,100,102,103,101,96,93],
[124,111,0,102,109,101,93,113,112],
[108,110,108,0,110,105,105,109,105],
[104,108,101,100,0,105,97,101,96],
[102,107,109,105,105,0,98,118,108],
[113,109,117,105,113,112,0,106,106],
[105,114,97,101,109,92,104,0,114],
[102,117,98,105,114,102,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,118,111,107,113,104,104],
[103,0,110,113,101,109,104,107,111],
[96,100,0,110,99,95,103,101,105],
[92,97,100,0,91,103,99,99,91],
[99,109,111,119,0,105,110,115,109],
[103,101,115,107,105,0,92,107,113],
[97,106,107,111,100,118,0,110,112],
[106,103,109,111,95,103,100,0,96],
[106,99,105,119,101,97,98,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,87,133,103,113,130,113,113],
[109,0,97,114,102,111,122,116,120],
[123,113,0,122,110,116,130,138,104],
[77,96,88,0,80,103,97,102,95],
[107,108,100,130,0,107,131,117,115],
[97,99,94,107,103,0,112,114,97],
[80,88,80,113,79,98,0,96,95],
[97,94,72,108,93,96,114,0,86],
[97,90,106,115,95,113,115,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,71,117,121,85,75,102,56],
[115,0,97,125,96,62,65,128,79],
[139,113,0,142,127,109,116,168,105],
[93,85,68,0,101,94,104,102,55],
[89,114,83,109,0,84,90,137,60],
[125,148,101,116,126,0,131,125,102],
[135,145,94,106,120,79,0,103,82],
[108,82,42,108,73,85,107,0,101],
[154,131,105,155,150,108,128,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,116,104,105,110,103,106],
[112,0,114,121,102,125,119,118,118],
[115,96,0,121,105,120,112,104,121],
[94,89,89,0,100,110,97,102,110],
[106,108,105,110,0,123,113,109,106],
[105,85,90,100,87,0,95,93,96],
[100,91,98,113,97,115,0,107,95],
[107,92,106,108,101,117,103,0,116],
[104,92,89,100,104,114,115,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,64,87,82,79,76,112,99],
[124,0,104,114,118,101,102,126,127],
[146,106,0,107,113,106,101,127,126],
[123,96,103,0,103,91,93,114,117],
[128,92,97,107,0,87,118,103,105],
[131,109,104,119,123,0,112,126,117],
[134,108,109,117,92,98,0,113,122],
[98,84,83,96,107,84,97,0,107],
[111,83,84,93,105,93,88,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,117,96,117,106,107,125,93],
[83,0,97,92,113,105,93,114,91],
[93,113,0,114,119,108,108,116,95],
[114,118,96,0,122,109,104,122,113],
[93,97,91,88,0,101,93,94,102],
[104,105,102,101,109,0,96,113,82],
[103,117,102,106,117,114,0,108,101],
[85,96,94,88,116,97,102,0,83],
[117,119,115,97,108,128,109,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,115,109,104,111,103,106],
[108,0,102,107,114,111,103,108,109],
[105,108,0,112,107,103,105,103,106],
[95,103,98,0,98,100,95,91,103],
[101,96,103,112,0,105,107,99,100],
[106,99,107,110,105,0,107,92,107],
[99,107,105,115,103,103,0,102,107],
[107,102,107,119,111,118,108,0,110],
[104,101,104,107,110,103,103,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,99,96,98,95,93,112,103],
[96,0,89,87,95,94,94,96,97],
[111,121,0,101,112,105,99,102,107],
[114,123,109,0,107,102,110,114,106],
[112,115,98,103,0,100,101,106,114],
[115,116,105,108,110,0,107,111,111],
[117,116,111,100,109,103,0,104,108],
[98,114,108,96,104,99,106,0,105],
[107,113,103,104,96,99,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,126,122,103,115,104,87],
[106,0,123,121,112,91,115,89,105],
[98,87,0,123,112,106,115,88,112],
[84,89,87,0,98,92,93,93,87],
[88,98,98,112,0,80,94,99,86],
[107,119,104,118,130,0,116,112,107],
[95,95,95,117,116,94,0,110,102],
[106,121,122,117,111,98,100,0,108],
[123,105,98,123,124,103,108,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,117,106,108,114,93,109],
[105,0,92,118,91,110,98,94,109],
[97,118,0,110,104,98,108,105,107],
[93,92,100,0,96,97,87,85,96],
[104,119,106,114,0,109,108,102,112],
[102,100,112,113,101,0,111,107,105],
[96,112,102,123,102,99,0,110,113],
[117,116,105,125,108,103,100,0,120],
[101,101,103,114,98,105,97,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,107,101,108,110,111,97],
[107,0,99,89,100,85,113,105,90],
[90,111,0,101,101,82,90,94,88],
[103,121,109,0,120,99,117,100,100],
[109,110,109,90,0,91,96,110,88],
[102,125,128,111,119,0,113,113,100],
[100,97,120,93,114,97,0,112,106],
[99,105,116,110,100,97,98,0,97],
[113,120,122,110,122,110,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,112,88,111,114,117,102,104],
[118,0,119,122,100,99,125,97,114],
[98,91,0,99,77,94,99,88,117],
[122,88,111,0,100,94,117,106,110],
[99,110,133,110,0,99,128,103,129],
[96,111,116,116,111,0,122,110,119],
[93,85,111,93,82,88,0,93,107],
[108,113,122,104,107,100,117,0,116],
[106,96,93,100,81,91,103,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,108,105,96,103,108,104],
[99,0,119,108,115,106,99,109,110],
[102,91,0,103,102,97,98,100,100],
[102,102,107,0,107,102,108,101,103],
[105,95,108,103,0,105,107,99,106],
[114,104,113,108,105,0,93,108,103],
[107,111,112,102,103,117,0,100,102],
[102,101,110,109,111,102,110,0,97],
[106,100,110,107,104,107,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,129,114,92,104,102,108],
[98,0,104,109,96,95,112,95,109],
[107,106,0,114,107,102,103,103,105],
[81,101,96,0,90,88,99,93,96],
[96,114,103,120,0,96,112,101,114],
[118,115,108,122,114,0,105,111,111],
[106,98,107,111,98,105,0,103,105],
[108,115,107,117,109,99,107,0,112],
[102,101,105,114,96,99,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,98,111,100,99,95,97],
[113,0,106,110,112,101,110,99,109],
[107,104,0,103,101,93,89,91,113],
[112,100,107,0,121,101,104,85,105],
[99,98,109,89,0,100,97,97,108],
[110,109,117,109,110,0,105,108,113],
[111,100,121,106,113,105,0,102,108],
[115,111,119,125,113,102,108,0,119],
[113,101,97,105,102,97,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,96,96,97,103,99,83,100],
[118,0,106,116,113,118,111,98,109],
[114,104,0,122,102,101,105,111,106],
[114,94,88,0,95,109,96,100,98],
[113,97,108,115,0,111,100,102,111],
[107,92,109,101,99,0,103,88,104],
[111,99,105,114,110,107,0,102,111],
[127,112,99,110,108,122,108,0,107],
[110,101,104,112,99,106,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,96,112,112,109,111,115,100],
[104,0,116,119,106,111,115,119,117],
[114,94,0,121,110,111,115,128,128],
[98,91,89,0,96,99,90,104,102],
[98,104,100,114,0,113,114,120,109],
[101,99,99,111,97,0,105,112,110],
[99,95,95,120,96,105,0,99,101],
[95,91,82,106,90,98,111,0,101],
[110,93,82,108,101,100,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,111,112,104,119,112,113,107],
[104,0,125,99,104,114,111,119,109],
[99,85,0,93,89,104,97,97,97],
[98,111,117,0,107,102,98,110,100],
[106,106,121,103,0,110,110,114,95],
[91,96,106,108,100,0,109,107,103],
[98,99,113,112,100,101,0,112,111],
[97,91,113,100,96,103,98,0,88],
[103,101,113,110,115,107,99,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,113,102,114,110,116,115,106],
[107,0,109,117,106,103,111,120,110],
[97,101,0,118,113,99,118,116,109],
[108,93,92,0,97,99,118,111,93],
[96,104,97,113,0,91,110,112,100],
[100,107,111,111,119,0,115,119,105],
[94,99,92,92,100,95,0,114,97],
[95,90,94,99,98,91,96,0,96],
[104,100,101,117,110,105,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,112,136,105,123,102,114,122],
[67,0,78,80,76,82,94,108,91],
[98,132,0,104,88,100,108,123,114],
[74,130,106,0,97,109,103,94,95],
[105,134,122,113,0,139,131,113,115],
[87,128,110,101,71,0,95,110,98],
[108,116,102,107,79,115,0,89,86],
[96,102,87,116,97,100,121,0,143],
[88,119,96,115,95,112,124,67,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,105,109,116,106,94,103,105],
[110,0,111,115,120,108,93,104,112],
[105,99,0,105,113,105,97,95,104],
[101,95,105,0,107,100,97,98,101],
[94,90,97,103,0,104,85,91,97],
[104,102,105,110,106,0,99,87,100],
[116,117,113,113,125,111,0,100,111],
[107,106,115,112,119,123,110,0,105],
[105,98,106,109,113,110,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,110,109,96,102,94,123,104],
[117,0,111,113,105,102,100,109,109],
[100,99,0,103,102,98,97,109,105],
[101,97,107,0,105,91,103,110,109],
[114,105,108,105,0,103,112,112,106],
[108,108,112,119,107,0,100,115,111],
[116,110,113,107,98,110,0,113,107],
[87,101,101,100,98,95,97,0,96],
[106,101,105,101,104,99,103,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,74,116,106,80,98,99,80],
[108,0,110,136,98,125,106,126,98],
[136,100,0,119,106,113,101,93,92],
[94,74,91,0,88,96,69,96,76],
[104,112,104,122,0,101,96,120,108],
[130,85,97,114,109,0,99,113,96],
[112,104,109,141,114,111,0,102,87],
[111,84,117,114,90,97,108,0,76],
[130,112,118,134,102,114,123,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,120,89,106,112,127,87,101],
[74,0,89,73,100,111,106,112,60],
[90,121,0,122,101,119,101,88,101],
[121,137,88,0,138,102,114,105,121],
[104,110,109,72,0,74,126,63,47],
[98,99,91,108,136,0,121,108,122],
[83,104,109,96,84,89,0,85,55],
[123,98,122,105,147,102,125,0,91],
[109,150,109,89,163,88,155,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,89,97,110,90,122,96],
[98,0,65,92,86,85,108,104,80],
[110,145,0,92,144,117,132,136,104],
[121,118,118,0,140,94,116,151,109],
[113,124,66,70,0,81,116,83,79],
[100,125,93,116,129,0,115,136,78],
[120,102,78,94,94,95,0,115,83],
[88,106,74,59,127,74,95,0,60],
[114,130,106,101,131,132,127,150,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,115,101,103,119,120,108],
[98,0,107,83,96,88,107,86,97],
[91,103,0,89,93,96,108,101,97],
[95,127,121,0,110,105,109,97,98],
[109,114,117,100,0,99,118,105,114],
[107,122,114,105,111,0,113,113,113],
[91,103,102,101,92,97,0,107,101],
[90,124,109,113,105,97,103,0,102],
[102,113,113,112,96,97,109,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,108,119,96,107,107,98],
[105,0,106,117,117,95,106,116,89],
[115,104,0,104,105,112,106,111,116],
[102,93,106,0,107,96,94,90,88],
[91,93,105,103,0,106,102,101,107],
[114,115,98,114,104,0,108,116,102],
[103,104,104,116,108,102,0,106,101],
[103,94,99,120,109,94,104,0,96],
[112,121,94,122,103,108,109,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,68,86,45,88,100,100,101],
[77,0,77,96,48,45,127,109,88],
[142,133,0,59,100,122,158,106,103],
[124,114,151,0,90,113,131,156,98],
[165,162,110,120,0,93,155,137,125],
[122,165,88,97,117,0,147,122,132],
[110,83,52,79,55,63,0,89,100],
[110,101,104,54,73,88,121,0,74],
[109,122,107,112,85,78,110,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,104,79,109,78,74,105,89],
[141,0,113,115,116,116,97,114,117],
[106,97,0,94,105,87,90,80,106],
[131,95,116,0,130,97,80,106,107],
[101,94,105,80,0,104,99,88,94],
[132,94,123,113,106,0,109,105,127],
[136,113,120,130,111,101,0,135,130],
[105,96,130,104,122,105,75,0,100],
[121,93,104,103,116,83,80,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,100,110,117,129,122,135,134],
[98,0,103,118,111,123,110,136,120],
[110,107,0,105,99,113,117,124,145],
[100,92,105,0,82,112,86,135,112],
[93,99,111,128,0,134,109,126,125],
[81,87,97,98,76,0,97,98,118],
[88,100,93,124,101,113,0,120,117],
[75,74,86,75,84,112,90,0,110],
[76,90,65,98,85,92,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,134,112,98,114,98,116,110],
[71,0,125,76,76,94,72,114,103],
[76,85,0,90,75,100,86,107,106],
[98,134,120,0,120,125,101,117,140],
[112,134,135,90,0,104,110,120,125],
[96,116,110,85,106,0,92,113,114],
[112,138,124,109,100,118,0,122,139],
[94,96,103,93,90,97,88,0,98],
[100,107,104,70,85,96,71,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,196,136,113,81,88,49,57],
[123,0,186,96,68,113,52,64,13],
[14,24,0,57,68,50,57,3,6],
[74,114,153,0,98,113,85,82,74],
[97,142,142,112,0,136,90,89,49],
[129,97,160,97,74,0,50,73,50],
[122,158,153,125,120,160,0,31,26],
[161,146,207,128,121,137,179,0,105],
[153,197,204,136,161,160,184,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,73,128,135,84,124,171,73,120],
[137,0,117,135,118,113,170,103,123],
[82,93,0,171,69,129,140,68,158],
[75,75,39,0,75,72,140,75,135],
[126,92,141,135,0,144,171,66,98],
[86,97,81,138,66,0,136,71,106],
[39,40,70,70,39,74,0,40,74],
[137,107,142,135,144,139,170,0,100],
[90,87,52,75,112,104,136,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,108,107,98,120,108,113,114],
[103,0,128,106,88,105,99,99,119],
[102,82,0,97,93,84,86,92,91],
[103,104,113,0,91,108,86,110,105],
[112,122,117,119,0,108,98,118,120],
[90,105,126,102,102,0,108,99,115],
[102,111,124,124,112,102,0,110,115],
[97,111,118,100,92,111,100,0,102],
[96,91,119,105,90,95,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,104,107,104,100,110,106,117],
[84,0,85,91,90,97,94,98,96],
[106,125,0,123,114,99,106,88,108],
[103,119,87,0,97,101,106,94,107],
[106,120,96,113,0,102,105,97,101],
[110,113,111,109,108,0,116,105,114],
[100,116,104,104,105,94,0,102,86],
[104,112,122,116,113,105,108,0,107],
[93,114,102,103,109,96,124,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,121,96,96,99,98,99,116],
[126,0,130,91,107,115,97,113,115],
[89,80,0,103,97,97,82,111,96],
[114,119,107,0,119,104,102,122,111],
[114,103,113,91,0,89,89,110,102],
[111,95,113,106,121,0,98,113,117],
[112,113,128,108,121,112,0,110,103],
[111,97,99,88,100,97,100,0,106],
[94,95,114,99,108,93,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,128,114,119,105,114,117],
[99,0,98,105,97,99,106,90,96],
[96,112,0,114,104,110,113,99,117],
[82,105,96,0,95,102,90,88,100],
[96,113,106,115,0,110,104,86,113],
[91,111,100,108,100,0,110,103,110],
[105,104,97,120,106,100,0,96,113],
[96,120,111,122,124,107,114,0,114],
[93,114,93,110,97,100,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,119,111,117,124,118,104,102],
[74,0,92,123,108,73,102,101,119],
[91,118,0,82,110,122,105,78,95],
[99,87,128,0,114,101,128,114,102],
[93,102,100,96,0,52,78,102,82],
[86,137,88,109,158,0,108,92,105],
[92,108,105,82,132,102,0,97,106],
[106,109,132,96,108,118,113,0,97],
[108,91,115,108,128,105,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,65,100,128,94,77,110,104,126],
[145,0,124,113,115,106,123,91,140],
[110,86,0,124,126,103,122,89,157],
[82,97,86,0,96,106,121,119,116],
[116,95,84,114,0,84,88,101,102],
[133,104,107,104,126,0,105,84,120],
[100,87,88,89,122,105,0,85,130],
[106,119,121,91,109,126,125,0,153],
[84,70,53,94,108,90,80,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,90,104,99,102,91,99],
[114,0,103,104,87,108,97,84,95],
[104,107,0,111,101,110,107,86,104],
[120,106,99,0,107,110,104,91,109],
[106,123,109,103,0,121,107,105,104],
[111,102,100,100,89,0,107,98,108],
[108,113,103,106,103,103,0,97,114],
[119,126,124,119,105,112,113,0,115],
[111,115,106,101,106,102,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,103,99,106,126,82,102,99],
[113,0,119,99,117,108,90,134,128],
[107,91,0,119,94,127,86,122,108],
[111,111,91,0,99,102,93,107,94],
[104,93,116,111,0,104,105,106,112],
[84,102,83,108,106,0,106,111,110],
[128,120,124,117,105,104,0,117,121],
[108,76,88,103,104,99,93,0,88],
[111,82,102,116,98,100,89,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,101,107,97,102,120,102],
[105,0,108,99,102,98,111,112,101],
[113,102,0,105,103,102,109,108,106],
[109,111,105,0,123,104,115,120,99],
[103,108,107,87,0,101,114,122,96],
[113,112,108,106,109,0,113,116,101],
[108,99,101,95,96,97,0,122,97],
[90,98,102,90,88,94,88,0,89],
[108,109,104,111,114,109,113,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,53,110,79,131,101,108,122],
[112,0,131,128,97,144,157,152,134],
[157,79,0,110,131,140,165,106,122],
[100,82,100,0,111,149,107,128,116],
[131,113,79,99,0,150,130,134,95],
[79,66,70,61,60,0,119,47,74],
[109,53,45,103,80,91,0,80,73],
[102,58,104,82,76,163,130,0,102],
[88,76,88,94,115,136,137,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,95,93,97,106,107,107,98],
[120,0,104,111,124,118,122,115,109],
[115,106,0,97,120,113,116,109,106],
[117,99,113,0,117,116,116,108,107],
[113,86,90,93,0,109,92,99,93],
[104,92,97,94,101,0,100,108,100],
[103,88,94,94,118,110,0,102,95],
[103,95,101,102,111,102,108,0,97],
[112,101,104,103,117,110,115,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,75,76,86,120,123,75,68,168],
[135,0,105,132,166,152,133,121,160],
[134,105,0,132,125,114,91,87,133],
[124,78,78,0,106,84,92,92,122],
[90,44,85,104,0,91,103,86,138],
[87,58,96,126,119,0,81,108,112],
[135,77,119,118,107,129,0,109,133],
[142,89,123,118,124,102,101,0,127],
[42,50,77,88,72,98,77,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,106,116,107,112,101,97,89],
[109,0,112,106,123,98,100,107,126],
[104,98,0,110,104,112,89,96,89],
[94,104,100,0,99,106,102,91,98],
[103,87,106,111,0,94,96,103,100],
[98,112,98,104,116,0,85,100,116],
[109,110,121,108,114,125,0,97,113],
[113,103,114,119,107,110,113,0,106],
[121,84,121,112,110,94,97,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,110,95,95,108,94,103,95],
[109,0,104,95,97,97,112,101,112],
[100,106,0,101,108,110,97,97,108],
[115,115,109,0,105,108,106,105,100],
[115,113,102,105,0,111,106,100,108],
[102,113,100,102,99,0,97,96,104],
[116,98,113,104,104,113,0,98,103],
[107,109,113,105,110,114,112,0,111],
[115,98,102,110,102,106,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,89,107,133,111,112,122,104],
[93,0,80,116,134,90,87,93,109],
[121,130,0,129,135,104,106,111,97],
[103,94,81,0,117,85,84,94,80],
[77,76,75,93,0,77,66,74,70],
[99,120,106,125,133,0,101,117,104],
[98,123,104,126,144,109,0,137,82],
[88,117,99,116,136,93,73,0,97],
[106,101,113,130,140,106,128,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,95,103,86,101,94,89,103],
[112,0,105,119,101,112,108,95,113],
[115,105,0,107,99,101,107,105,114],
[107,91,103,0,98,112,112,86,105],
[124,109,111,112,0,109,110,103,118],
[109,98,109,98,101,0,95,88,102],
[116,102,103,98,100,115,0,101,111],
[121,115,105,124,107,122,109,0,115],
[107,97,96,105,92,108,99,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,103,110,105,101,113,97],
[107,0,117,111,116,138,100,108,108],
[108,93,0,101,100,114,100,105,98],
[107,99,109,0,101,123,95,121,92],
[100,94,110,109,0,136,105,106,113],
[105,72,96,87,74,0,80,110,79],
[109,110,110,115,105,130,0,111,110],
[97,102,105,89,104,100,99,0,77],
[113,102,112,118,97,131,100,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,61,62,41,84,21,62,127,63],
[149,0,84,107,106,105,84,148,84],
[148,126,0,108,106,127,65,128,85],
[169,103,102,0,146,125,124,168,124],
[126,104,104,64,0,83,106,190,126],
[189,105,83,85,127,0,105,169,126],
[148,126,145,86,104,105,0,169,105],
[83,62,82,42,20,41,41,0,40],
[147,126,125,86,84,84,105,170,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,123,105,113,109,104,99],
[99,0,108,114,116,100,105,115,97],
[93,102,0,111,111,111,113,117,101],
[87,96,99,0,108,92,99,95,86],
[105,94,99,102,0,88,95,102,95],
[97,110,99,118,122,0,113,113,101],
[101,105,97,111,115,97,0,107,113],
[106,95,93,115,108,97,103,0,89],
[111,113,109,124,115,109,97,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,101,105,97,112,89,114],
[111,0,103,89,106,102,122,95,103],
[111,107,0,94,116,98,106,97,104],
[109,121,116,0,111,100,116,109,107],
[105,104,94,99,0,99,108,93,118],
[113,108,112,110,111,0,123,102,114],
[98,88,104,94,102,87,0,86,86],
[121,115,113,101,117,108,124,0,113],
[96,107,106,103,92,96,124,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,91,109,114,86,96,109,84],
[99,0,96,116,127,108,110,91,103],
[119,114,0,98,112,120,133,110,111],
[101,94,112,0,121,113,116,117,100],
[96,83,98,89,0,100,98,90,87],
[124,102,90,97,110,0,115,105,83],
[114,100,77,94,112,95,0,122,99],
[101,119,100,93,120,105,88,0,85],
[126,107,99,110,123,127,111,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,88,109,113,85,99,107,105],
[100,0,87,130,108,94,96,101,103],
[122,123,0,129,129,103,114,113,105],
[101,80,81,0,120,98,82,90,97],
[97,102,81,90,0,88,95,94,89],
[125,116,107,112,122,0,108,105,109],
[111,114,96,128,115,102,0,101,101],
[103,109,97,120,116,105,109,0,99],
[105,107,105,113,121,101,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,109,107,110,100,96,107,113],
[113,0,118,104,125,102,120,105,117],
[101,92,0,95,113,81,94,104,107],
[103,106,115,0,118,100,111,106,109],
[100,85,97,92,0,105,110,96,101],
[110,108,129,110,105,0,106,99,116],
[114,90,116,99,100,104,0,100,118],
[103,105,106,104,114,111,110,0,113],
[97,93,103,101,109,94,92,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,100,111,110,112,105,108],
[103,0,113,101,112,113,105,107,107],
[98,97,0,90,108,99,98,90,97],
[110,109,120,0,115,108,114,104,107],
[99,98,102,95,0,110,108,107,102],
[100,97,111,102,100,0,96,102,111],
[98,105,112,96,102,114,0,109,103],
[105,103,120,106,103,108,101,0,115],
[102,103,113,103,108,99,107,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,154,124,109,133,108,128,99],
[109,0,110,97,124,145,106,125,105],
[56,100,0,106,110,107,107,116,80],
[86,113,104,0,93,113,83,101,125],
[101,86,100,117,0,101,82,119,101],
[77,65,103,97,109,0,89,130,63],
[102,104,103,127,128,121,0,118,109],
[82,85,94,109,91,80,92,0,74],
[111,105,130,85,109,147,101,136,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,99,88,104,101,94,104,102],
[109,0,132,111,111,113,87,117,107],
[111,78,0,82,88,85,99,107,95],
[122,99,128,0,115,119,106,132,99],
[106,99,122,95,0,98,104,115,109],
[109,97,125,91,112,0,84,114,105],
[116,123,111,104,106,126,0,113,106],
[106,93,103,78,95,96,97,0,93],
[108,103,115,111,101,105,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,101,95,97,105,106,102],
[99,0,98,104,93,109,103,104,97],
[104,112,0,104,93,103,112,106,101],
[109,106,106,0,96,100,107,103,92],
[115,117,117,114,0,100,115,105,111],
[113,101,107,110,110,0,113,114,111],
[105,107,98,103,95,97,0,96,95],
[104,106,104,107,105,96,114,0,95],
[108,113,109,118,99,99,115,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,101,112,96,86,101,104,109],
[96,0,89,117,101,83,92,108,92],
[109,121,0,107,87,95,102,95,105],
[98,93,103,0,95,87,92,97,103],
[114,109,123,115,0,101,109,112,110],
[124,127,115,123,109,0,106,101,111],
[109,118,108,118,101,104,0,111,106],
[106,102,115,113,98,109,99,0,104],
[101,118,105,107,100,99,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,111,121,94,104,95,100],
[119,0,122,110,97,99,89,80,81],
[103,88,0,88,97,103,99,103,97],
[99,100,122,0,111,106,105,105,107],
[89,113,113,99,0,118,97,79,110],
[116,111,107,104,92,0,102,101,98],
[106,121,111,105,113,108,0,87,95],
[115,130,107,105,131,109,123,0,112],
[110,129,113,103,100,112,115,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,131,109,126,118,97,116,116],
[88,0,110,121,134,101,96,86,85],
[79,100,0,141,113,116,89,67,111],
[101,89,69,0,107,87,97,96,111],
[84,76,97,103,0,84,78,111,126],
[92,109,94,123,126,0,104,91,103],
[113,114,121,113,132,106,0,102,103],
[94,124,143,114,99,119,108,0,111],
[94,125,99,99,84,107,107,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,102,88,112,99,98,96,93],
[112,0,98,88,101,93,97,94,80],
[108,112,0,103,112,105,101,98,108],
[122,122,107,0,116,107,111,99,111],
[98,109,98,94,0,94,102,97,100],
[111,117,105,103,116,0,101,111,106],
[112,113,109,99,108,109,0,100,96],
[114,116,112,111,113,99,110,0,104],
[117,130,102,99,110,104,114,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,89,113,97,108,105,115],
[114,0,117,113,117,110,111,92,106],
[101,93,0,94,103,97,100,73,98],
[121,97,116,0,108,106,111,86,121],
[97,93,107,102,0,104,104,99,113],
[113,100,113,104,106,0,107,96,110],
[102,99,110,99,106,103,0,94,116],
[105,118,137,124,111,114,116,0,116],
[95,104,112,89,97,100,94,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,134,98,97,97,90,99,88],
[95,0,108,81,106,72,100,72,79],
[76,102,0,95,83,79,73,77,66],
[112,129,115,0,112,103,95,99,96],
[113,104,127,98,0,105,91,102,80],
[113,138,131,107,105,0,99,102,92],
[120,110,137,115,119,111,0,96,103],
[111,138,133,111,108,108,114,0,105],
[122,131,144,114,130,118,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,95,102,103,113,110,113,111],
[95,0,95,104,102,98,100,98,102],
[115,115,0,108,113,104,101,111,115],
[108,106,102,0,103,108,96,92,100],
[107,108,97,107,0,113,104,100,115],
[97,112,106,102,97,0,100,107,120],
[100,110,109,114,106,110,0,101,111],
[97,112,99,118,110,103,109,0,99],
[99,108,95,110,95,90,99,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,109,102,105,114,114,110,106],
[114,0,122,105,112,119,113,120,122],
[101,88,0,91,104,111,113,102,105],
[108,105,119,0,108,116,114,121,117],
[105,98,106,102,0,114,112,107,111],
[96,91,99,94,96,0,100,98,107],
[96,97,97,96,98,110,0,117,124],
[100,90,108,89,103,112,93,0,105],
[104,88,105,93,99,103,86,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,94,84,107,96,100,93,98],
[92,0,94,91,116,85,98,85,106],
[116,116,0,74,107,90,96,91,91],
[126,119,136,0,127,117,115,101,123],
[103,94,103,83,0,95,90,94,94],
[114,125,120,93,115,0,106,112,86],
[110,112,114,95,120,104,0,75,105],
[117,125,119,109,116,98,135,0,99],
[112,104,119,87,116,124,105,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,142,98,120,112,86,165,132],
[99,0,143,109,122,133,111,164,123],
[68,67,0,54,67,102,89,130,89],
[112,101,156,0,130,134,110,143,112],
[90,88,143,80,0,114,67,144,103],
[98,77,108,76,96,0,86,132,100],
[124,99,121,100,143,124,0,153,101],
[45,46,80,67,66,78,57,0,71],
[78,87,121,98,107,110,109,139,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,95,112,112,111,110,109],
[103,0,118,107,97,118,119,108,119],
[93,92,0,79,108,114,110,99,103],
[115,103,131,0,121,117,124,116,104],
[98,113,102,89,0,114,112,100,101],
[98,92,96,93,96,0,103,88,114],
[99,91,100,86,98,107,0,102,98],
[100,102,111,94,110,122,108,0,101],
[101,91,107,106,109,96,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,91,105,106,103,106,91,106],
[118,0,60,107,106,104,105,107,122],
[119,150,0,122,91,105,105,136,135],
[105,103,88,0,119,106,88,135,164],
[104,104,119,91,0,121,105,105,150],
[107,106,105,104,89,0,120,105,121],
[104,105,105,122,105,90,0,105,150],
[119,103,74,75,105,105,105,0,106],
[104,88,75,46,60,89,60,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,101,116,110,94,109,102,97],
[113,0,102,106,110,115,105,110,103],
[109,108,0,109,118,113,104,117,105],
[94,104,101,0,90,108,98,93,96],
[100,100,92,120,0,112,104,103,107],
[116,95,97,102,98,0,99,100,101],
[101,105,106,112,106,111,0,110,100],
[108,100,93,117,107,110,100,0,103],
[113,107,105,114,103,109,110,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,89,101,91,99,93,80,99],
[107,0,101,114,90,108,111,114,107],
[121,109,0,134,111,126,124,104,104],
[109,96,76,0,100,109,89,84,85],
[119,120,99,110,0,121,112,99,109],
[111,102,84,101,89,0,86,86,87],
[117,99,86,121,98,124,0,81,97],
[130,96,106,126,111,124,129,0,109],
[111,103,106,125,101,123,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,87,109,113,107,112,108,97],
[110,0,103,106,115,109,119,107,105],
[123,107,0,116,115,102,102,117,110],
[101,104,94,0,102,103,100,77,97],
[97,95,95,108,0,102,118,94,93],
[103,101,108,107,108,0,109,109,103],
[98,91,108,110,92,101,0,94,85],
[102,103,93,133,116,101,116,0,94],
[113,105,100,113,117,107,125,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,99,124,104,109,99,121],
[92,0,100,91,111,91,91,110,100],
[104,110,0,113,131,101,95,101,116],
[111,119,97,0,127,97,107,88,123],
[86,99,79,83,0,81,82,81,99],
[106,119,109,113,129,0,105,117,115],
[101,119,115,103,128,105,0,107,108],
[111,100,109,122,129,93,103,0,114],
[89,110,94,87,111,95,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,113,114,108,113,109,104,116],
[94,0,119,113,94,118,108,98,110],
[97,91,0,106,92,109,98,99,98],
[96,97,104,0,99,114,98,105,114],
[102,116,118,111,0,127,109,109,113],
[97,92,101,96,83,0,96,89,101],
[101,102,112,112,101,114,0,104,115],
[106,112,111,105,101,121,106,0,125],
[94,100,112,96,97,109,95,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,90,97,98,89,99,92],
[113,0,105,101,97,100,107,104,109],
[119,105,0,97,108,101,96,97,102],
[120,109,113,0,112,104,111,106,113],
[113,113,102,98,0,111,108,112,105],
[112,110,109,106,99,0,101,111,110],
[121,103,114,99,102,109,0,99,116],
[111,106,113,104,98,99,111,0,119],
[118,101,108,97,105,100,94,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,115,127,129,99,102,116],
[105,0,110,100,132,128,107,98,121],
[109,100,0,117,112,115,106,103,109],
[95,110,93,0,131,113,108,92,127],
[83,78,98,79,0,103,74,85,100],
[81,82,95,97,107,0,87,105,115],
[111,103,104,102,136,123,0,126,123],
[108,112,107,118,125,105,84,0,125],
[94,89,101,83,110,95,87,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,106,100,102,99,108,101],
[98,0,103,106,96,94,96,111,95],
[94,107,0,104,95,104,99,100,104],
[104,104,106,0,95,103,105,99,105],
[110,114,115,115,0,91,101,104,87],
[108,116,106,107,119,0,110,115,103],
[111,114,111,105,109,100,0,100,93],
[102,99,110,111,106,95,110,0,91],
[109,115,106,105,123,107,117,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,111,114,100,109,115,108,112],
[96,0,99,104,101,112,99,96,97],
[99,111,0,112,105,113,104,89,104],
[96,106,98,0,103,120,103,96,112],
[110,109,105,107,0,117,107,99,103],
[101,98,97,90,93,0,104,96,97],
[95,111,106,107,103,106,0,101,106],
[102,114,121,114,111,114,109,0,112],
[98,113,106,98,107,113,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,109,100,108,95,102,97,94],
[97,0,112,107,102,100,99,96,102],
[101,98,0,116,121,105,107,106,106],
[110,103,94,0,124,104,111,109,111],
[102,108,89,86,0,105,90,100,107],
[115,110,105,106,105,0,95,120,103],
[108,111,103,99,120,115,0,99,97],
[113,114,104,101,110,90,111,0,107],
[116,108,104,99,103,107,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,121,106,120,103,109,117],
[103,0,103,103,103,106,98,99,102],
[107,107,0,104,102,101,105,105,103],
[89,107,106,0,99,97,98,104,97],
[104,107,108,111,0,101,104,113,103],
[90,104,109,113,109,0,100,96,108],
[107,112,105,112,106,110,0,104,107],
[101,111,105,106,97,114,106,0,104],
[93,108,107,113,107,102,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,101,90,65,97,93,92],
[103,0,88,101,97,85,117,113,98],
[113,122,0,116,117,107,120,116,102],
[109,109,94,0,100,100,120,121,100],
[120,113,93,110,0,90,125,121,117],
[145,125,103,110,120,0,133,132,112],
[113,93,90,90,85,77,0,100,99],
[117,97,94,89,89,78,110,0,101],
[118,112,108,110,93,98,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,108,109,98,109,107,109,111],
[95,0,104,101,98,99,95,109,107],
[102,106,0,100,85,101,97,114,99],
[101,109,110,0,105,106,117,110,115],
[112,112,125,105,0,116,102,121,105],
[101,111,109,104,94,0,103,110,110],
[103,115,113,93,108,107,0,110,109],
[101,101,96,100,89,100,100,0,101],
[99,103,111,95,105,100,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,83,107,101,104,97,94,117],
[100,0,95,110,117,103,100,93,109],
[127,115,0,122,101,120,118,106,123],
[103,100,88,0,106,92,88,84,109],
[109,93,109,104,0,114,86,89,116],
[106,107,90,118,96,0,89,86,113],
[113,110,92,122,124,121,0,89,116],
[116,117,104,126,121,124,121,0,121],
[93,101,87,101,94,97,94,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,115,112,101,106,115,121,101],
[111,0,116,116,101,104,103,105,102],
[95,94,0,116,98,99,95,106,81],
[98,94,94,0,87,101,96,104,94],
[109,109,112,123,0,115,116,126,100],
[104,106,111,109,95,0,100,106,105],
[95,107,115,114,94,110,0,93,101],
[89,105,104,106,84,104,117,0,84],
[109,108,129,116,110,105,109,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,91,69,108,77,85,96,84],
[128,0,107,116,100,105,93,119,123],
[119,103,0,108,100,93,89,111,119],
[141,94,102,0,109,102,114,129,116],
[102,110,110,101,0,109,87,91,104],
[133,105,117,108,101,0,101,126,110],
[125,117,121,96,123,109,0,127,125],
[114,91,99,81,119,84,83,0,88],
[126,87,91,94,106,100,85,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,123,100,101,121,113,108,110],
[100,0,105,91,97,113,111,106,96],
[87,105,0,92,88,116,106,104,93],
[110,119,118,0,101,123,115,113,95],
[109,113,122,109,0,118,120,121,100],
[89,97,94,87,92,0,96,106,87],
[97,99,104,95,90,114,0,108,96],
[102,104,106,97,89,104,102,0,90],
[100,114,117,115,110,123,114,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,108,102,104,103,85,114,125],
[118,0,95,127,117,111,107,114,120],
[102,115,0,110,93,111,81,90,118],
[108,83,100,0,113,106,76,86,108],
[106,93,117,97,0,107,77,96,147],
[107,99,99,104,103,0,67,87,118],
[125,103,129,134,133,143,0,141,156],
[96,96,120,124,114,123,69,0,119],
[85,90,92,102,63,92,54,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,104,112,99,127,119,107],
[99,0,89,98,98,102,114,97,93],
[96,121,0,100,107,108,129,110,103],
[106,112,110,0,110,99,127,125,113],
[98,112,103,100,0,96,122,102,100],
[111,108,102,111,114,0,129,111,103],
[83,96,81,83,88,81,0,91,85],
[91,113,100,85,108,99,119,0,90],
[103,117,107,97,110,107,125,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,105,91,88,84,100,78,81],
[122,0,99,105,114,93,96,100,90],
[105,111,0,84,97,94,105,92,76],
[119,105,126,0,94,105,98,115,87],
[122,96,113,116,0,105,101,96,94],
[126,117,116,105,105,0,111,104,89],
[110,114,105,112,109,99,0,97,106],
[132,110,118,95,114,106,113,0,99],
[129,120,134,123,116,121,104,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,105,123,122,102,105,113,101],
[99,0,98,119,102,98,84,98,90],
[105,112,0,117,115,102,89,117,104],
[87,91,93,0,89,87,88,96,77],
[88,108,95,121,0,93,91,105,102],
[108,112,108,123,117,0,97,117,102],
[105,126,121,122,119,113,0,119,113],
[97,112,93,114,105,93,91,0,98],
[109,120,106,133,108,108,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,120,118,99,106,102,114,102],
[94,0,98,119,94,95,98,101,102],
[90,112,0,121,101,111,95,96,101],
[92,91,89,0,103,89,100,80,98],
[111,116,109,107,0,105,107,121,117],
[104,115,99,121,105,0,113,106,119],
[108,112,115,110,103,97,0,111,111],
[96,109,114,130,89,104,99,0,113],
[108,108,109,112,93,91,99,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,91,99,106,122,103,105],
[117,0,99,95,103,117,109,93,109],
[121,111,0,110,109,123,126,101,109],
[119,115,100,0,92,98,114,90,109],
[111,107,101,118,0,120,122,106,127],
[104,93,87,112,90,0,113,83,98],
[88,101,84,96,88,97,0,101,101],
[107,117,109,120,104,127,109,0,122],
[105,101,101,101,83,112,109,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,107,105,108,112,99,107,101],
[108,0,114,106,107,126,100,106,106],
[103,96,0,93,90,111,91,101,94],
[105,104,117,0,110,113,108,109,103],
[102,103,120,100,0,119,102,101,103],
[98,84,99,97,91,0,101,95,95],
[111,110,119,102,108,109,0,113,101],
[103,104,109,101,109,115,97,0,101],
[109,104,116,107,107,115,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,106,116,110,109,107,114,100],
[100,0,118,110,92,110,103,100,99],
[104,92,0,107,91,105,99,101,92],
[94,100,103,0,89,104,88,106,93],
[100,118,119,121,0,114,105,101,107],
[101,100,105,106,96,0,96,104,93],
[103,107,111,122,105,114,0,120,103],
[96,110,109,104,109,106,90,0,100],
[110,111,118,117,103,117,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,99,111,115,107,113,115,114],
[100,0,106,106,103,97,112,108,108],
[111,104,0,110,90,97,117,108,116],
[99,104,100,0,118,105,110,116,123],
[95,107,120,92,0,106,120,102,113],
[103,113,113,105,104,0,117,109,118],
[97,98,93,100,90,93,0,103,106],
[95,102,102,94,108,101,107,0,107],
[96,102,94,87,97,92,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,121,103,98,97,103,108,104],
[107,0,107,106,105,104,95,108,110],
[89,103,0,102,82,91,99,98,100],
[107,104,108,0,106,110,101,106,106],
[112,105,128,104,0,95,107,114,116],
[113,106,119,100,115,0,108,112,108],
[107,115,111,109,103,102,0,108,101],
[102,102,112,104,96,98,102,0,116],
[106,100,110,104,94,102,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,108,115,105,105,123,111],
[89,0,102,95,100,106,102,109,108],
[101,108,0,105,101,104,117,103,114],
[102,115,105,0,103,111,109,111,107],
[95,110,109,107,0,117,107,112,107],
[105,104,106,99,93,0,106,112,114],
[105,108,93,101,103,104,0,104,97],
[87,101,107,99,98,98,106,0,109],
[99,102,96,103,103,96,113,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,121,114,101,109,97,107],
[113,0,106,120,111,99,105,89,99],
[104,104,0,123,119,107,101,97,93],
[89,90,87,0,112,101,108,98,92],
[96,99,91,98,0,84,98,98,86],
[109,111,103,109,126,0,114,99,85],
[101,105,109,102,112,96,0,102,103],
[113,121,113,112,112,111,108,0,105],
[103,111,117,118,124,125,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,103,116,118,123,103,108,118],
[93,0,96,102,106,114,98,94,101],
[107,114,0,104,113,121,114,110,114],
[94,108,106,0,112,119,102,105,118],
[92,104,97,98,0,115,99,98,114],
[87,96,89,91,95,0,80,86,95],
[107,112,96,108,111,130,0,100,111],
[102,116,100,105,112,124,110,0,109],
[92,109,96,92,96,115,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,99,116,101,101,85,75,124],
[93,0,130,121,103,116,108,121,116],
[111,80,0,100,88,111,88,76,110],
[94,89,110,0,120,110,93,90,107],
[109,107,122,90,0,101,98,90,99],
[109,94,99,100,109,0,92,90,116],
[125,102,122,117,112,118,0,104,110],
[135,89,134,120,120,120,106,0,126],
[86,94,100,103,111,94,100,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,119,109,113,120,117,97],
[118,0,111,116,109,104,119,114,113],
[110,99,0,107,110,108,114,111,103],
[91,94,103,0,100,97,108,105,105],
[101,101,100,110,0,103,110,113,107],
[97,106,102,113,107,0,126,120,113],
[90,91,96,102,100,84,0,106,107],
[93,96,99,105,97,90,104,0,97],
[113,97,107,105,103,97,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,105,95,86,116,100,126],
[114,0,108,101,105,103,115,121,137],
[106,102,0,82,99,111,118,106,112],
[105,109,128,0,111,108,132,115,142],
[115,105,111,99,0,106,115,120,124],
[124,107,99,102,104,0,122,128,121],
[94,95,92,78,95,88,0,100,114],
[110,89,104,95,90,82,110,0,115],
[84,73,98,68,86,89,96,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,119,105,98,102,103,104],
[102,0,125,118,100,99,100,108,104],
[106,85,0,101,94,92,97,102,109],
[91,92,109,0,97,86,96,93,110],
[105,110,116,113,0,118,109,105,108],
[112,111,118,124,92,0,110,102,100],
[108,110,113,114,101,100,0,107,106],
[107,102,108,117,105,108,103,0,104],
[106,106,101,100,102,110,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,120,96,123,102,121,108,109],
[80,0,102,97,110,92,107,109,95],
[90,108,0,99,121,90,108,102,104],
[114,113,111,0,127,105,131,114,122],
[87,100,89,83,0,93,102,105,90],
[108,118,120,105,117,0,112,106,122],
[89,103,102,79,108,98,0,117,104],
[102,101,108,96,105,104,93,0,105],
[101,115,106,88,120,88,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,100,96,101,102,99,99,97],
[118,0,108,115,110,116,103,105,110],
[110,102,0,98,102,104,106,109,104],
[114,95,112,0,108,112,97,100,113],
[109,100,108,102,0,102,98,101,96],
[108,94,106,98,108,0,100,104,116],
[111,107,104,113,112,110,0,107,101],
[111,105,101,110,109,106,103,0,99],
[113,100,106,97,114,94,109,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,104,100,104,104,117,102,111],
[101,0,100,99,92,105,121,97,94],
[106,110,0,101,106,117,110,103,107],
[110,111,109,0,103,109,115,108,101],
[106,118,104,107,0,117,113,101,105],
[106,105,93,101,93,0,113,101,102],
[93,89,100,95,97,97,0,79,88],
[108,113,107,102,109,109,131,0,107],
[99,116,103,109,105,108,122,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,105,110,101,113,97,110],
[114,0,119,124,118,121,107,99,114],
[100,91,0,119,105,99,98,89,101],
[105,86,91,0,93,101,98,90,115],
[100,92,105,117,0,110,90,98,97],
[109,89,111,109,100,0,93,90,89],
[97,103,112,112,120,117,0,98,111],
[113,111,121,120,112,120,112,0,105],
[100,96,109,95,113,121,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,97,109,107,88,91,88,97],
[115,0,104,107,115,97,102,104,101],
[113,106,0,108,100,99,110,97,100],
[101,103,102,0,106,84,98,94,91],
[103,95,110,104,0,93,98,101,94],
[122,113,111,126,117,0,109,102,116],
[119,108,100,112,112,101,0,115,91],
[122,106,113,116,109,108,95,0,96],
[113,109,110,119,116,94,119,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,76,105,117,112,109,105],
[107,0,113,112,98,121,96,129,102],
[103,97,0,99,93,113,113,124,93],
[134,98,111,0,103,141,109,131,99],
[105,112,117,107,0,105,98,139,101],
[93,89,97,69,105,0,94,123,99],
[98,114,97,101,112,116,0,148,111],
[101,81,86,79,71,87,62,0,72],
[105,108,117,111,109,111,99,138,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,99,104,105,106,101,112,104],
[121,0,113,110,99,107,115,106,109],
[111,97,0,110,99,95,111,105,111],
[106,100,100,0,95,95,111,103,98],
[105,111,111,115,0,110,110,126,111],
[104,103,115,115,100,0,113,114,111],
[109,95,99,99,100,97,0,97,99],
[98,104,105,107,84,96,113,0,97],
[106,101,99,112,99,99,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,91,87,101,104,97,100],
[118,0,111,108,98,116,111,114,102],
[109,99,0,104,103,113,97,99,113],
[119,102,106,0,110,124,106,111,114],
[123,112,107,100,0,126,118,115,108],
[109,94,97,86,84,0,87,96,95],
[106,99,113,104,92,123,0,106,103],
[113,96,111,99,95,114,104,0,105],
[110,108,97,96,102,115,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,89,96,101,87,103,104,103],
[115,0,102,113,105,100,109,106,105],
[121,108,0,121,109,105,109,107,105],
[114,97,89,0,103,96,105,103,110],
[109,105,101,107,0,97,105,118,110],
[123,110,105,114,113,0,118,111,121],
[107,101,101,105,105,92,0,99,101],
[106,104,103,107,92,99,111,0,106],
[107,105,105,100,100,89,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,115,99,110,105,106,103],
[102,0,111,107,105,96,95,109,114],
[103,99,0,106,100,106,107,98,105],
[95,103,104,0,95,99,102,100,102],
[111,105,110,115,0,111,115,101,112],
[100,114,104,111,99,0,100,103,114],
[105,115,103,108,95,110,0,109,111],
[104,101,112,110,109,107,101,0,106],
[107,96,105,108,98,96,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,95,115,100,97,96,95,92],
[106,0,101,119,96,115,112,88,94],
[115,109,0,113,106,121,108,98,98],
[95,91,97,0,88,98,112,93,101],
[110,114,104,122,0,103,114,110,102],
[113,95,89,112,107,0,122,88,116],
[114,98,102,98,96,88,0,99,97],
[115,122,112,117,100,122,111,0,104],
[118,116,112,109,108,94,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,99,104,98,112,110,96],
[100,0,92,94,90,90,108,107,84],
[117,118,0,100,101,104,117,115,109],
[111,116,110,0,104,100,123,105,105],
[106,120,109,106,0,98,115,108,102],
[112,120,106,110,112,0,117,110,105],
[98,102,93,87,95,93,0,102,94],
[100,103,95,105,102,100,108,0,96],
[114,126,101,105,108,105,116,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,92,106,83,113,92,93,107],
[116,0,90,114,99,103,119,101,121],
[118,120,0,116,112,123,112,105,129],
[104,96,94,0,102,102,98,94,115],
[127,111,98,108,0,109,115,100,114],
[97,107,87,108,101,0,100,94,114],
[118,91,98,112,95,110,0,90,117],
[117,109,105,116,110,116,120,0,120],
[103,89,81,95,96,96,93,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,115,105,106,105,102,105],
[102,0,104,106,117,112,109,110,111],
[112,106,0,100,108,111,107,102,105],
[95,104,110,0,114,101,105,104,106],
[105,93,102,96,0,104,101,100,98],
[104,98,99,109,106,0,105,100,108],
[105,101,103,105,109,105,0,101,112],
[108,100,108,106,110,110,109,0,112],
[105,99,105,104,112,102,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,78,103,101,102,97,118,92],
[106,0,100,117,101,101,107,116,107],
[132,110,0,105,113,108,114,121,115],
[107,93,105,0,110,105,100,109,109],
[109,109,97,100,0,103,98,118,97],
[108,109,102,105,107,0,117,129,111],
[113,103,96,110,112,93,0,120,110],
[92,94,89,101,92,81,90,0,98],
[118,103,95,101,113,99,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,108,111,110,96,109,119],
[99,0,109,93,107,106,91,104,111],
[97,101,0,85,105,95,88,99,100],
[102,117,125,0,124,119,107,115,109],
[99,103,105,86,0,106,99,108,97],
[100,104,115,91,104,0,88,112,115],
[114,119,122,103,111,122,0,104,110],
[101,106,111,95,102,98,106,0,88],
[91,99,110,101,113,95,100,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,70,104,105,210,175,69,140],
[141,0,70,141,71,175,175,106,141],
[140,140,0,140,140,175,140,105,140],
[106,69,70,0,140,175,175,140,175],
[105,139,70,70,0,174,139,70,70],
[0,35,35,35,36,0,35,0,35],
[35,35,70,35,71,175,0,0,36],
[141,104,105,70,140,210,210,0,141],
[70,69,70,35,140,175,174,69,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,91,98,95,100,107,95],
[109,0,94,99,97,100,94,88,98],
[113,116,0,92,104,88,96,98,86],
[119,111,118,0,98,101,112,108,112],
[112,113,106,112,0,101,108,101,101],
[115,110,122,109,109,0,120,102,107],
[110,116,114,98,102,90,0,98,91],
[103,122,112,102,109,108,112,0,97],
[115,112,124,98,109,103,119,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,92,104,105,103,102,110],
[104,0,109,107,107,104,104,98,101],
[108,101,0,104,110,95,100,108,110],
[118,103,106,0,110,113,103,119,105],
[106,103,100,100,0,101,114,100,109],
[105,106,115,97,109,0,104,98,103],
[107,106,110,107,96,106,0,103,96],
[108,112,102,91,110,112,107,0,95],
[100,109,100,105,101,107,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,105,107,122,107,114,106],
[112,0,104,110,98,118,104,105,108],
[93,106,0,107,86,109,95,103,91],
[105,100,103,0,94,113,105,104,103],
[103,112,124,116,0,113,110,100,109],
[88,92,101,97,97,0,89,84,87],
[103,106,115,105,100,121,0,103,112],
[96,105,107,106,110,126,107,0,113],
[104,102,119,107,101,123,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,105,103,86,83,104,81],
[115,0,122,134,116,128,114,105,111],
[110,88,0,120,112,92,104,103,75],
[105,76,90,0,114,97,96,88,89],
[107,94,98,96,0,94,101,103,100],
[124,82,118,113,116,0,121,107,110],
[127,96,106,114,109,89,0,109,102],
[106,105,107,122,107,103,101,0,99],
[129,99,135,121,110,100,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,109,120,125,113,103,119],
[97,0,100,103,115,115,114,111,108],
[97,110,0,103,117,113,111,93,112],
[101,107,107,0,118,110,113,102,115],
[90,95,93,92,0,96,94,88,100],
[85,95,97,100,114,0,93,96,121],
[97,96,99,97,116,117,0,96,117],
[107,99,117,108,122,114,114,0,114],
[91,102,98,95,110,89,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,106,127,106,105,119,124,128],
[83,0,101,107,109,97,107,121,113],
[104,109,0,122,119,98,117,125,123],
[83,103,88,0,95,86,88,97,111],
[104,101,91,115,0,87,103,112,119],
[105,113,112,124,123,0,116,125,127],
[91,103,93,122,107,94,0,109,115],
[86,89,85,113,98,85,101,0,109],
[82,97,87,99,91,83,95,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,111,116,99,103,122,109],
[107,0,113,104,121,115,110,117,116],
[90,97,0,98,99,102,103,96,105],
[99,106,112,0,120,114,113,118,109],
[94,89,111,90,0,93,98,108,101],
[111,95,108,96,117,0,107,114,107],
[107,100,107,97,112,103,0,106,107],
[88,93,114,92,102,96,104,0,97],
[101,94,105,101,109,103,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,95,109,111,96,117,103,98],
[96,0,89,108,112,95,105,101,104],
[115,121,0,114,120,113,117,98,99],
[101,102,96,0,120,99,110,101,101],
[99,98,90,90,0,110,88,87,90],
[114,115,97,111,100,0,110,103,93],
[93,105,93,100,122,100,0,101,111],
[107,109,112,109,123,107,109,0,96],
[112,106,111,109,120,117,99,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,113,113,107,93,114,103,103],
[117,0,110,114,110,105,121,113,103],
[97,100,0,110,115,108,115,95,97],
[97,96,100,0,106,94,111,97,97],
[103,100,95,104,0,94,106,106,103],
[117,105,102,116,116,0,118,100,102],
[96,89,95,99,104,92,0,89,97],
[107,97,115,113,104,110,121,0,106],
[107,107,113,113,107,108,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,118,93,108,111,110,113,106],
[117,0,120,104,99,119,110,105,101],
[92,90,0,96,105,105,93,92,89],
[117,106,114,0,102,120,112,100,106],
[102,111,105,108,0,112,102,96,89],
[99,91,105,90,98,0,100,87,92],
[100,100,117,98,108,110,0,114,96],
[97,105,118,110,114,123,96,0,98],
[104,109,121,104,121,118,114,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,106,109,105,114,112,113],
[102,0,89,92,98,101,110,101,100],
[98,121,0,113,120,100,114,106,115],
[104,118,97,0,109,116,112,106,112],
[101,112,90,101,0,98,103,87,97],
[105,109,110,94,112,0,103,90,106],
[96,100,96,98,107,107,0,105,104],
[98,109,104,104,123,120,105,0,127],
[97,110,95,98,113,104,106,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,99,117,106,109,104,98],
[114,0,101,96,115,113,106,102,98],
[111,109,0,103,119,122,104,107,108],
[111,114,107,0,127,130,107,109,105],
[93,95,91,83,0,101,103,100,83],
[104,97,88,80,109,0,105,104,83],
[101,104,106,103,107,105,0,105,100],
[106,108,103,101,110,106,105,0,98],
[112,112,102,105,127,127,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,100,106,106,106,108,101],
[104,0,100,92,112,97,103,103,93],
[98,110,0,102,98,94,102,94,88],
[110,118,108,0,107,101,107,95,87],
[104,98,112,103,0,95,104,100,94],
[104,113,116,109,115,0,113,100,106],
[104,107,108,103,106,97,0,100,90],
[102,107,116,115,110,110,110,0,95],
[109,117,122,123,116,104,120,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,78,105,104,93,96,114,88],
[125,0,96,114,114,106,118,99,105],
[132,114,0,129,116,110,118,104,110],
[105,96,81,0,120,104,94,92,94],
[106,96,94,90,0,95,98,86,93],
[117,104,100,106,115,0,110,98,98],
[114,92,92,116,112,100,0,107,100],
[96,111,106,118,124,112,103,0,104],
[122,105,100,116,117,112,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,101,108,112,109,99,112,121],
[86,0,84,84,97,94,89,93,78],
[109,126,0,100,115,118,108,107,103],
[102,126,110,0,115,106,100,115,92],
[98,113,95,95,0,101,101,112,111],
[101,116,92,104,109,0,101,112,98],
[111,121,102,110,109,109,0,107,125],
[98,117,103,95,98,98,103,0,91],
[89,132,107,118,99,112,85,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,96,104,91,101,93,99,100],
[116,0,105,110,113,112,109,101,112],
[114,105,0,117,104,111,108,101,102],
[106,100,93,0,109,109,98,96,94],
[119,97,106,101,0,113,101,105,100],
[109,98,99,101,97,0,103,101,98],
[117,101,102,112,109,107,0,101,113],
[111,109,109,114,105,109,109,0,113],
[110,98,108,116,110,112,97,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,117,119,118,105,111,110,119],
[94,0,112,110,110,107,98,121,115],
[93,98,0,98,104,99,105,112,101],
[91,100,112,0,106,113,99,117,106],
[92,100,106,104,0,92,102,105,98],
[105,103,111,97,118,0,100,114,113],
[99,112,105,111,108,110,0,119,108],
[100,89,98,93,105,96,91,0,106],
[91,95,109,104,112,97,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,123,81,122,95,94,104],
[105,0,107,98,103,97,121,79,114],
[112,103,0,106,82,103,94,95,119],
[87,112,104,0,87,94,108,117,93],
[129,107,128,123,0,88,139,94,130],
[88,113,107,116,122,0,113,97,121],
[115,89,116,102,71,97,0,75,101],
[116,131,115,93,116,113,135,0,113],
[106,96,91,117,80,89,109,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,63,64,65,85,105,105,107],
[124,0,83,0,124,104,144,104,105],
[147,127,0,105,127,105,103,147,149],
[146,210,105,0,168,148,166,148,126],
[145,86,83,42,0,83,124,127,107],
[125,106,105,62,127,0,166,84,127],
[105,66,107,44,86,44,0,64,87],
[105,106,63,62,83,126,146,0,85],
[103,105,61,84,103,83,123,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,157,52,157,104,105,0,157,104],
[53,0,105,105,104,105,0,157,52],
[158,105,0,105,104,105,52,157,104],
[53,105,105,0,52,52,53,105,105],
[106,106,106,158,0,105,106,210,158],
[105,105,105,158,105,0,105,105,105],
[210,210,158,157,104,105,0,157,157],
[53,53,53,105,0,105,53,0,0],
[106,158,106,105,52,105,53,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,113,100,91,105,94,106],
[107,0,109,112,94,102,109,106,108],
[99,101,0,102,102,99,100,98,103],
[97,98,108,0,100,98,99,100,99],
[110,116,108,110,0,105,118,113,115],
[119,108,111,112,105,0,124,107,107],
[105,101,110,111,92,86,0,97,101],
[116,104,112,110,97,103,113,0,106],
[104,102,107,111,95,103,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,109,108,109,97,104,114],
[116,0,101,109,107,120,107,111,105],
[109,109,0,100,100,106,111,104,106],
[101,101,110,0,104,106,103,104,111],
[102,103,110,106,0,112,116,105,110],
[101,90,104,104,98,0,92,101,106],
[113,103,99,107,94,118,0,106,108],
[106,99,106,106,105,109,104,0,98],
[96,105,104,99,100,104,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,116,107,102,135,101,121,110],
[93,0,112,108,88,103,92,103,111],
[94,98,0,101,97,114,94,93,108],
[103,102,109,0,92,107,101,105,111],
[108,122,113,118,0,145,114,105,123],
[75,107,96,103,65,0,84,87,98],
[109,118,116,109,96,126,0,106,109],
[89,107,117,105,105,123,104,0,104],
[100,99,102,99,87,112,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,124,94,118,104,109,111],
[110,0,117,116,100,129,95,105,109],
[104,93,0,133,84,116,114,103,89],
[86,94,77,0,81,106,74,84,81],
[116,110,126,129,0,139,108,121,103],
[92,81,94,104,71,0,72,95,81],
[106,115,96,136,102,138,0,109,84],
[101,105,107,126,89,115,101,0,112],
[99,101,121,129,107,129,126,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,130,106,120,100,101,103],
[102,0,103,121,86,127,86,94,100],
[108,107,0,125,120,126,110,103,117],
[80,89,85,0,70,102,74,74,103],
[104,124,90,140,0,116,119,113,107],
[90,83,84,108,94,0,82,92,91],
[110,124,100,136,91,128,0,114,98],
[109,116,107,136,97,118,96,0,105],
[107,110,93,107,103,119,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,91,99,114,101,103,101,105],
[114,0,109,108,117,106,114,102,116],
[119,101,0,103,115,103,108,104,113],
[111,102,107,0,109,105,105,97,102],
[96,93,95,101,0,106,104,99,100],
[109,104,107,105,104,0,102,107,117],
[107,96,102,105,106,108,0,102,102],
[109,108,106,113,111,103,108,0,103],
[105,94,97,108,110,93,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,99,125,115,106,112,115],
[88,0,101,98,102,79,87,88,101],
[98,109,0,94,111,94,109,109,109],
[111,112,116,0,119,119,105,111,107],
[85,108,99,91,0,105,89,98,95],
[95,131,116,91,105,0,101,101,119],
[104,123,101,105,121,109,0,98,117],
[98,122,101,99,112,109,112,0,103],
[95,109,101,103,115,91,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,110,114,116,123,100,111],
[107,0,101,104,123,113,112,109,103],
[101,109,0,108,107,105,110,118,112],
[100,106,102,0,120,105,115,107,109],
[96,87,103,90,0,123,109,102,103],
[94,97,105,105,87,0,107,104,117],
[87,98,100,95,101,103,0,93,96],
[110,101,92,103,108,106,117,0,114],
[99,107,98,101,107,93,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,99,102,80,90,87,99,81],
[117,0,107,113,97,115,107,121,102],
[111,103,0,99,104,112,90,102,109],
[108,97,111,0,106,108,114,114,111],
[130,113,106,104,0,103,106,115,116],
[120,95,98,102,107,0,96,109,97],
[123,103,120,96,104,114,0,107,110],
[111,89,108,96,95,101,103,0,98],
[129,108,101,99,94,113,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,105,96,94,96,106,98],
[107,0,107,99,93,97,106,101,109],
[102,103,0,99,97,106,91,109,108],
[105,111,111,0,108,100,109,109,111],
[114,117,113,102,0,111,111,114,110],
[116,113,104,110,99,0,104,110,113],
[114,104,119,101,99,106,0,106,101],
[104,109,101,101,96,100,104,0,95],
[112,101,102,99,100,97,109,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,87,106,87,122,69,104,70],
[86,0,69,86,104,68,104,104,103],
[123,141,0,140,121,156,120,120,85],
[104,124,70,0,86,70,120,87,53],
[123,106,89,124,0,70,71,69,106],
[88,142,54,140,140,0,122,122,122],
[141,106,90,90,139,88,0,70,71],
[106,106,90,123,141,88,140,0,106],
[140,107,125,157,104,88,139,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,107,94,104,107,119,114],
[101,0,114,88,92,109,119,124,107],
[93,96,0,93,94,96,108,111,104],
[103,122,117,0,108,118,117,122,122],
[116,118,116,102,0,106,121,127,117],
[106,101,114,92,104,0,104,116,111],
[103,91,102,93,89,106,0,115,119],
[91,86,99,88,83,94,95,0,112],
[96,103,106,88,93,99,91,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,101,97,140,113,116,102],
[102,0,113,104,89,135,107,115,126],
[94,97,0,102,100,95,84,98,94],
[109,106,108,0,111,96,118,102,105],
[113,121,110,99,0,112,102,122,101],
[70,75,115,114,98,0,115,100,102],
[97,103,126,92,108,95,0,94,103],
[94,95,112,108,88,110,116,0,102],
[108,84,116,105,109,108,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,126,126,107,132,94,93,106],
[114,0,145,133,117,126,124,104,104],
[84,65,0,94,75,120,84,62,82],
[84,77,116,0,94,127,93,105,93],
[103,93,135,116,0,139,104,94,101],
[78,84,90,83,71,0,81,79,48],
[116,86,126,117,106,129,0,85,116],
[117,106,148,105,116,131,125,0,93],
[104,106,128,117,109,162,94,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,93,102,102,91,103,93,93],
[121,0,96,117,108,107,109,116,120],
[117,114,0,120,101,106,93,109,102],
[108,93,90,0,100,80,89,105,95],
[108,102,109,110,0,93,99,107,110],
[119,103,104,130,117,0,110,122,103],
[107,101,117,121,111,100,0,112,103],
[117,94,101,105,103,88,98,0,100],
[117,90,108,115,100,107,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,97,87,99,110,95,100,113],
[110,0,96,102,101,112,114,104,122],
[113,114,0,110,107,117,111,101,121],
[123,108,100,0,104,118,110,103,112],
[111,109,103,106,0,115,117,110,109],
[100,98,93,92,95,0,106,93,104],
[115,96,99,100,93,104,0,95,120],
[110,106,109,107,100,117,115,0,107],
[97,88,89,98,101,106,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,114,108,98,101,96,105,108],
[115,0,135,121,125,115,105,125,117],
[96,75,0,89,98,86,86,96,94],
[102,89,121,0,120,103,96,112,109],
[112,85,112,90,0,93,92,101,89],
[109,95,124,107,117,0,104,113,111],
[114,105,124,114,118,106,0,104,114],
[105,85,114,98,109,97,106,0,107],
[102,93,116,101,121,99,96,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,121,109,117,100,109,115,116],
[101,0,99,109,112,96,102,104,112],
[89,111,0,101,111,107,102,111,96],
[101,101,109,0,110,103,104,110,116],
[93,98,99,100,0,89,96,93,96],
[110,114,103,107,121,0,114,108,110],
[101,108,108,106,114,96,0,110,104],
[95,106,99,100,117,102,100,0,113],
[94,98,114,94,114,100,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,118,111,116,97,103,114],
[113,0,116,92,140,115,91,117,111],
[119,94,0,111,116,117,86,103,122],
[92,118,99,0,102,123,109,124,138],
[99,70,94,108,0,131,55,118,101],
[94,95,93,87,79,0,66,103,97],
[113,119,124,101,155,144,0,116,129],
[107,93,107,86,92,107,94,0,98],
[96,99,88,72,109,113,81,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,108,110,107,107,104,121],
[103,0,105,104,115,92,100,105,107],
[106,105,0,113,98,88,99,113,105],
[102,106,97,0,97,91,90,105,102],
[100,95,112,113,0,97,99,111,104],
[103,118,122,119,113,0,108,121,114],
[103,110,111,120,111,102,0,104,115],
[106,105,97,105,99,89,106,0,103],
[89,103,105,108,106,96,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,108,107,111,116,119,109,93],
[99,0,107,95,97,99,100,96,93],
[102,103,0,115,101,103,102,103,112],
[103,115,95,0,90,101,89,97,91],
[99,113,109,120,0,108,109,105,115],
[94,111,107,109,102,0,103,107,105],
[91,110,108,121,101,107,0,115,85],
[101,114,107,113,105,103,95,0,99],
[117,117,98,119,95,105,125,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,114,113,99,112,96,108],
[108,0,112,114,129,108,112,105,109],
[94,98,0,101,110,90,101,86,114],
[96,96,109,0,108,105,106,98,109],
[97,81,100,102,0,83,90,95,107],
[111,102,120,105,127,0,110,116,103],
[98,98,109,104,120,100,0,92,109],
[114,105,124,112,115,94,118,0,108],
[102,101,96,101,103,107,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,108,121,104,100,106,100,106],
[100,0,121,112,101,97,105,108,115],
[102,89,0,103,86,90,98,93,93],
[89,98,107,0,101,83,90,92,101],
[106,109,124,109,0,108,104,105,103],
[110,113,120,127,102,0,106,107,103],
[104,105,112,120,106,104,0,105,111],
[110,102,117,118,105,103,105,0,109],
[104,95,117,109,107,107,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,110,120,101,110,126,109,117],
[114,0,120,118,112,88,118,119,116],
[100,90,0,107,110,89,106,108,116],
[90,92,103,0,108,92,116,95,108],
[109,98,100,102,0,99,111,93,98],
[100,122,121,118,111,0,126,104,130],
[84,92,104,94,99,84,0,82,115],
[101,91,102,115,117,106,128,0,107],
[93,94,94,102,112,80,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,90,83,89,85,92,102,76],
[97,0,83,86,77,81,84,86,82],
[120,127,0,105,102,101,102,89,88],
[127,124,105,0,114,90,119,107,94],
[121,133,108,96,0,100,112,95,97],
[125,129,109,120,110,0,108,104,97],
[118,126,108,91,98,102,0,107,107],
[108,124,121,103,115,106,103,0,107],
[134,128,122,116,113,113,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,103,86,109,112,96,107],
[104,0,105,106,108,102,119,98,99],
[107,105,0,105,102,92,121,109,121],
[107,104,105,0,104,108,102,102,104],
[124,102,108,106,0,109,128,105,124],
[101,108,118,102,101,0,113,118,97],
[98,91,89,108,82,97,0,102,89],
[114,112,101,108,105,92,108,0,100],
[103,111,89,106,86,113,121,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,90,98,118,95,94,98],
[114,0,109,93,110,119,102,109,110],
[111,101,0,107,124,118,109,113,101],
[120,117,103,0,103,129,113,111,107],
[112,100,86,107,0,115,106,106,98],
[92,91,92,81,95,0,83,102,95],
[115,108,101,97,104,127,0,118,113],
[116,101,97,99,104,108,92,0,97],
[112,100,109,103,112,115,97,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,107,116,110,121,128,120,99],
[82,0,68,99,77,82,95,88,72],
[103,142,0,130,114,129,108,111,114],
[94,111,80,0,85,108,92,106,90],
[100,133,96,125,0,137,120,112,82],
[89,128,81,102,73,0,97,116,81],
[82,115,102,118,90,113,0,100,88],
[90,122,99,104,98,94,110,0,79],
[111,138,96,120,128,129,122,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,98,89,100,97,95,97],
[115,0,124,115,111,104,104,93,106],
[109,86,0,100,95,102,92,100,100],
[112,95,110,0,107,107,115,108,94],
[121,99,115,103,0,106,101,113,104],
[110,106,108,103,104,0,89,98,108],
[113,106,118,95,109,121,0,110,105],
[115,117,110,102,97,112,100,0,106],
[113,104,110,116,106,102,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,86,83,124,83,42,127,83],
[124,0,126,124,124,124,124,127,83],
[124,84,0,124,124,83,83,127,83],
[127,86,86,0,210,83,86,169,125],
[86,86,86,0,0,42,86,127,83],
[127,86,127,127,168,0,86,127,127],
[168,86,127,124,124,124,0,169,83],
[83,83,83,41,83,83,41,0,83],
[127,127,127,85,127,83,127,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,88,109,108,102,99,113,110],
[101,0,107,102,109,107,113,123,115],
[122,103,0,104,107,101,106,112,128],
[101,108,106,0,94,93,102,111,113],
[102,101,103,116,0,113,108,107,109],
[108,103,109,117,97,0,121,105,126],
[111,97,104,108,102,89,0,107,103],
[97,87,98,99,103,105,103,0,112],
[100,95,82,97,101,84,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,108,129,121,124,111,104,130],
[81,0,97,107,104,104,98,110,135],
[102,113,0,110,115,112,109,134,126],
[81,103,100,0,93,99,86,101,104],
[89,106,95,117,0,99,103,98,124],
[86,106,98,111,111,0,111,100,126],
[99,112,101,124,107,99,0,102,131],
[106,100,76,109,112,110,108,0,111],
[80,75,84,106,86,84,79,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,78,104,52,106,106,52,54],
[156,0,130,156,156,104,132,156,130],
[132,80,0,130,130,78,134,76,78],
[106,54,80,0,50,104,80,50,78],
[158,54,80,160,0,104,106,26,54],
[104,106,132,106,106,0,106,78,78],
[104,78,76,130,104,104,0,76,24],
[158,54,134,160,184,132,134,0,132],
[156,80,132,132,156,132,186,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,115,116,100,119,114,123,117],
[97,0,109,116,105,111,118,117,120],
[95,101,0,123,100,96,95,120,108],
[94,94,87,0,78,75,88,112,102],
[110,105,110,132,0,108,106,110,124],
[91,99,114,135,102,0,116,120,119],
[96,92,115,122,104,94,0,122,122],
[87,93,90,98,100,90,88,0,109],
[93,90,102,108,86,91,88,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,116,112,108,103,108,112],
[98,0,113,105,111,108,101,116,104],
[91,97,0,102,101,100,102,104,99],
[94,105,108,0,102,102,107,104,95],
[98,99,109,108,0,101,100,111,100],
[102,102,110,108,109,0,107,116,102],
[107,109,108,103,110,103,0,114,106],
[102,94,106,106,99,94,96,0,93],
[98,106,111,115,110,108,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,111,108,110,108,116,123,118],
[105,0,111,117,104,106,116,128,115],
[99,99,0,108,98,100,113,127,109],
[102,93,102,0,97,103,99,112,111],
[100,106,112,113,0,102,112,121,121],
[102,104,110,107,108,0,111,130,116],
[94,94,97,111,98,99,0,109,109],
[87,82,83,98,89,80,101,0,100],
[92,95,101,99,89,94,101,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,116,102,108,112,105,114,113],
[101,0,113,96,99,110,106,105,102],
[94,97,0,104,91,95,96,94,98],
[108,114,106,0,92,109,102,109,109],
[102,111,119,118,0,121,123,122,107],
[98,100,115,101,89,0,98,88,103],
[105,104,114,108,87,112,0,102,99],
[96,105,116,101,88,122,108,0,107],
[97,108,112,101,103,107,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,131,117,109,100,113,131],
[109,0,102,98,106,98,104,110,126],
[108,108,0,109,109,92,108,95,125],
[79,112,101,0,97,118,116,104,117],
[93,104,101,113,0,107,94,89,101],
[101,112,118,92,103,0,105,116,112],
[110,106,102,94,116,105,0,101,125],
[97,100,115,106,121,94,109,0,117],
[79,84,85,93,109,98,85,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,109,117,96,101,82,84,111],
[118,0,110,125,115,116,110,88,119],
[101,100,0,109,94,90,94,96,115],
[93,85,101,0,95,77,111,85,101],
[114,95,116,115,0,97,101,91,114],
[109,94,120,133,113,0,112,108,131],
[128,100,116,99,109,98,0,101,109],
[126,122,114,125,119,102,109,0,123],
[99,91,95,109,96,79,101,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,106,106,88,91,112,109,97],
[101,0,104,103,88,99,100,98,95],
[104,106,0,112,105,108,96,119,117],
[104,107,98,0,86,97,95,117,112],
[122,122,105,124,0,108,117,118,120],
[119,111,102,113,102,0,112,99,107],
[98,110,114,115,93,98,0,117,114],
[101,112,91,93,92,111,93,0,97],
[113,115,93,98,90,103,96,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,134,104,94,102,91,107,101],
[88,0,124,101,90,91,78,86,96],
[76,86,0,76,84,99,79,87,79],
[106,109,134,0,114,116,96,120,123],
[116,120,126,96,0,90,105,102,100],
[108,119,111,94,120,0,88,114,110],
[119,132,131,114,105,122,0,118,116],
[103,124,123,90,108,96,92,0,98],
[109,114,131,87,110,100,94,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,121,126,106,114,132,109,95],
[95,0,95,118,98,109,107,101,100],
[89,115,0,116,100,91,118,90,91],
[84,92,94,0,100,96,110,95,90],
[104,112,110,110,0,110,130,100,105],
[96,101,119,114,100,0,123,100,90],
[78,103,92,100,80,87,0,86,70],
[101,109,120,115,110,110,124,0,100],
[115,110,119,120,105,120,140,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,81,115,126,90,104,100,76],
[96,0,94,92,106,82,96,83,101],
[129,116,0,123,143,115,90,94,107],
[95,118,87,0,118,101,103,93,83],
[84,104,67,92,0,89,93,54,94],
[120,128,95,109,121,0,104,100,81],
[106,114,120,107,117,106,0,100,120],
[110,127,116,117,156,110,110,0,102],
[134,109,103,127,116,129,90,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,53,157,106,53,210,105,53],
[104,0,157,157,157,157,157,157,105],
[157,53,0,157,105,52,210,157,0],
[53,53,53,0,53,0,158,105,53],
[104,53,105,157,0,53,210,157,0],
[157,53,158,210,157,0,210,210,105],
[0,53,0,52,0,0,0,53,0],
[105,53,53,105,53,0,157,0,53],
[157,105,210,157,210,105,210,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,106,115,93,96,113,98],
[97,0,116,103,101,105,110,104,96],
[109,94,0,98,86,109,110,104,103],
[104,107,112,0,109,117,121,107,100],
[95,109,124,101,0,110,116,118,114],
[117,105,101,93,100,0,133,107,100],
[114,100,100,89,94,77,0,99,101],
[97,106,106,103,92,103,111,0,101],
[112,114,107,110,96,110,109,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,138,134,105,123,121,135,117],
[81,0,128,99,108,94,106,111,101],
[72,82,0,94,83,84,89,92,83],
[76,111,116,0,104,98,103,110,100],
[105,102,127,106,0,108,99,114,117],
[87,116,126,112,102,0,105,104,110],
[89,104,121,107,111,105,0,118,92],
[75,99,118,100,96,106,92,0,103],
[93,109,127,110,93,100,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,104,107,107,115,114,105,114],
[94,0,100,107,90,101,105,106,101],
[106,110,0,104,101,103,102,109,105],
[103,103,106,0,107,111,108,113,107],
[103,120,109,103,0,115,113,108,100],
[95,109,107,99,95,0,102,100,101],
[96,105,108,102,97,108,0,102,109],
[105,104,101,97,102,110,108,0,118],
[96,109,105,103,110,109,101,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,97,105,98,107,113,94,111],
[102,0,105,96,92,106,104,99,117],
[113,105,0,112,114,107,112,107,121],
[105,114,98,0,109,111,113,111,117],
[112,118,96,101,0,106,115,96,114],
[103,104,103,99,104,0,104,86,105],
[97,106,98,97,95,106,0,88,113],
[116,111,103,99,114,124,122,0,124],
[99,93,89,93,96,105,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,105,105,108,101,100,107,105],
[111,0,99,98,119,107,94,107,106],
[105,111,0,107,107,110,107,107,106],
[105,112,103,0,108,104,102,106,98],
[102,91,103,102,0,104,87,109,111],
[109,103,100,106,106,0,97,113,111],
[110,116,103,108,123,113,0,107,107],
[103,103,103,104,101,97,103,0,101],
[105,104,104,112,99,99,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,103,105,105,102,95,101,93],
[112,0,112,101,100,96,110,114,89],
[107,98,0,119,115,97,97,109,106],
[105,109,91,0,105,106,109,114,100],
[105,110,95,105,0,93,95,100,103],
[108,114,113,104,117,0,99,108,100],
[115,100,113,101,115,111,0,107,109],
[109,96,101,96,110,102,103,0,99],
[117,121,104,110,107,110,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,95,106,96,101,100,112,113],
[105,0,98,110,96,102,98,98,116],
[115,112,0,105,112,114,127,128,116],
[104,100,105,0,105,112,108,124,106],
[114,114,98,105,0,111,119,119,116],
[109,108,96,98,99,0,116,114,111],
[110,112,83,102,91,94,0,96,113],
[98,112,82,86,91,96,114,0,104],
[97,94,94,104,94,99,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,23,71,140,47,71,47,118],
[140,0,69,117,141,118,93,93,141],
[187,141,0,142,164,141,141,70,142],
[139,93,68,0,163,70,117,47,141],
[70,69,46,47,0,70,93,70,94],
[163,92,69,140,140,0,93,92,140],
[139,117,69,93,117,117,0,116,140],
[163,117,140,163,140,118,94,0,140],
[92,69,68,69,116,70,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,113,101,101,90,97,117,111],
[86,0,106,117,106,94,102,104,101],
[97,104,0,112,109,90,88,119,88],
[109,93,98,0,102,97,96,105,93],
[109,104,101,108,0,99,100,114,91],
[120,116,120,113,111,0,114,112,93],
[113,108,122,114,110,96,0,109,106],
[93,106,91,105,96,98,101,0,106],
[99,109,122,117,119,117,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,92,107,104,123,112,103],
[97,0,80,86,77,98,108,96,97],
[97,130,0,97,112,115,110,102,97],
[118,124,113,0,103,109,117,99,99],
[103,133,98,107,0,115,140,95,114],
[106,112,95,101,95,0,118,101,106],
[87,102,100,93,70,92,0,81,86],
[98,114,108,111,115,109,129,0,96],
[107,113,113,111,96,104,124,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,105,113,123,105,130,99],
[99,0,98,100,85,106,106,107,102],
[98,112,0,104,103,108,102,118,106],
[105,110,106,0,91,113,100,121,90],
[97,125,107,119,0,124,112,110,101],
[87,104,102,97,86,0,101,121,94],
[105,104,108,110,98,109,0,118,100],
[80,103,92,89,100,89,92,0,93],
[111,108,104,120,109,116,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,103,97,116,96,102,111,99],
[115,0,125,102,101,114,106,123,105],
[107,85,0,94,96,94,86,104,89],
[113,108,116,0,116,108,105,112,99],
[94,109,114,94,0,97,101,106,94],
[114,96,116,102,113,0,99,107,96],
[108,104,124,105,109,111,0,117,103],
[99,87,106,98,104,103,93,0,98],
[111,105,121,111,116,114,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,92,94,92,99,101,102,100],
[105,0,102,94,102,112,103,102,99],
[118,108,0,109,102,115,104,109,105],
[116,116,101,0,111,111,108,107,104],
[118,108,108,99,0,110,106,108,102],
[111,98,95,99,100,0,94,97,104],
[109,107,106,102,104,116,0,105,110],
[108,108,101,103,102,113,105,0,100],
[110,111,105,106,108,106,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,121,104,120,107,120,115,139],
[93,0,116,123,108,86,121,99,99],
[89,94,0,112,107,85,124,99,106],
[106,87,98,0,84,80,134,119,111],
[90,102,103,126,0,89,124,87,115],
[103,124,125,130,121,0,121,105,107],
[90,89,86,76,86,89,0,75,84],
[95,111,111,91,123,105,135,0,105],
[71,111,104,99,95,103,126,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,112,107,126,115,99,91],
[96,0,106,118,103,101,99,94,90],
[106,104,0,120,88,109,122,118,103],
[98,92,90,0,93,93,99,87,84],
[103,107,122,117,0,114,107,105,108],
[84,109,101,117,96,0,100,102,88],
[95,111,88,111,103,110,0,105,83],
[111,116,92,123,105,108,105,0,108],
[119,120,107,126,102,122,127,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,113,99,98,111,107,112,106],
[110,0,106,113,109,112,113,111,105],
[97,104,0,112,98,118,111,106,96],
[111,97,98,0,105,111,113,111,117],
[112,101,112,105,0,100,110,110,113],
[99,98,92,99,110,0,108,106,100],
[103,97,99,97,100,102,0,110,99],
[98,99,104,99,100,104,100,0,100],
[104,105,114,93,97,110,111,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,100,123,119,112,103,126,117],
[76,0,84,97,83,102,95,93,110],
[110,126,0,101,124,126,114,114,134],
[87,113,109,0,101,106,89,103,112],
[91,127,86,109,0,109,107,93,115],
[98,108,84,104,101,0,116,102,110],
[107,115,96,121,103,94,0,102,119],
[84,117,96,107,117,108,108,0,124],
[93,100,76,98,95,100,91,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,125,109,95,102,94,88,130],
[105,0,114,106,86,83,89,103,120],
[85,96,0,73,81,87,89,89,105],
[101,104,137,0,105,97,67,102,140],
[115,124,129,105,0,110,113,103,122],
[108,127,123,113,100,0,97,111,114],
[116,121,121,143,97,113,0,133,114],
[122,107,121,108,107,99,77,0,119],
[80,90,105,70,88,96,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,118,118,109,118,117,117,94],
[106,0,123,128,92,96,116,118,106],
[92,87,0,85,85,81,103,91,98],
[92,82,125,0,95,100,103,89,88],
[101,118,125,115,0,100,116,95,106],
[92,114,129,110,110,0,96,105,95],
[93,94,107,107,94,114,0,96,76],
[93,92,119,121,115,105,114,0,100],
[116,104,112,122,104,115,134,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,110,120,110,97,97,90,107],
[106,0,116,116,114,102,101,97,120],
[100,94,0,111,94,102,100,105,103],
[90,94,99,0,85,98,86,96,92],
[100,96,116,125,0,96,102,108,100],
[113,108,108,112,114,0,106,107,102],
[113,109,110,124,108,104,0,108,109],
[120,113,105,114,102,103,102,0,110],
[103,90,107,118,110,108,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,106,99,102,101,87,100],
[97,0,107,109,99,103,111,91,96],
[104,103,0,113,103,107,110,94,107],
[104,101,97,0,104,90,93,95,87],
[111,111,107,106,0,103,99,98,98],
[108,107,103,120,107,0,103,98,94],
[109,99,100,117,111,107,0,91,105],
[123,119,116,115,112,112,119,0,105],
[110,114,103,123,112,116,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,67,85,113,80,82,80,99],
[121,0,114,108,131,110,89,114,124],
[143,96,0,114,117,111,106,107,113],
[125,102,96,0,117,100,101,100,103],
[97,79,93,93,0,84,85,96,115],
[130,100,99,110,126,0,110,111,119],
[128,121,104,109,125,100,0,102,115],
[130,96,103,110,114,99,108,0,121],
[111,86,97,107,95,91,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,101,90,99,108,102,106],
[111,0,100,104,94,100,107,104,106],
[104,110,0,93,92,94,109,111,103],
[109,106,117,0,103,108,118,113,102],
[120,116,118,107,0,97,121,112,117],
[111,110,116,102,113,0,112,107,108],
[102,103,101,92,89,98,0,114,111],
[108,106,99,97,98,103,96,0,108],
[104,104,107,108,93,102,99,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,112,114,113,101,111,114],
[105,0,105,108,105,97,105,110,101],
[95,105,0,120,113,101,108,113,100],
[98,102,90,0,102,101,108,106,98],
[96,105,97,108,0,91,97,104,111],
[97,113,109,109,119,0,108,103,109],
[109,105,102,102,113,102,0,106,108],
[99,100,97,104,106,107,104,0,101],
[96,109,110,112,99,101,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,100,100,99,100,101,108],
[109,0,100,90,94,106,103,109,112],
[108,110,0,103,103,106,106,120,112],
[110,120,107,0,107,102,101,117,105],
[110,116,107,103,0,110,103,104,113],
[111,104,104,108,100,0,98,115,114],
[110,107,104,109,107,112,0,117,117],
[109,101,90,93,106,95,93,0,104],
[102,98,98,105,97,96,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,118,95,99,102,86,112,119],
[115,0,118,105,118,137,99,134,136],
[92,92,0,90,104,111,100,116,107],
[115,105,120,0,107,133,93,132,125],
[111,92,106,103,0,118,112,111,122],
[108,73,99,77,92,0,76,109,112],
[124,111,110,117,98,134,0,120,124],
[98,76,94,78,99,101,90,0,97],
[91,74,103,85,88,98,86,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,103,95,100,101,86,94],
[112,0,109,110,114,110,116,114,88],
[97,101,0,101,96,102,112,105,98],
[107,100,109,0,119,121,110,127,102],
[115,96,114,91,0,94,95,91,93],
[110,100,108,89,116,0,124,121,104],
[109,94,98,100,115,86,0,98,94],
[124,96,105,83,119,89,112,0,106],
[116,122,112,108,117,106,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,91,104,108,110,101,112,95],
[106,0,108,110,99,108,110,127,114],
[119,102,0,113,110,104,113,106,103],
[106,100,97,0,91,95,105,99,107],
[102,111,100,119,0,113,107,124,103],
[100,102,106,115,97,0,110,100,102],
[109,100,97,105,103,100,0,102,116],
[98,83,104,111,86,110,108,0,112],
[115,96,107,103,107,108,94,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,126,116,97,96,124,132,140],
[71,0,118,102,90,106,104,118,113],
[84,92,0,103,87,101,94,98,124],
[94,108,107,0,85,118,101,101,110],
[113,120,123,125,0,113,93,109,124],
[114,104,109,92,97,0,84,99,114],
[86,106,116,109,117,126,0,103,124],
[78,92,112,109,101,111,107,0,116],
[70,97,86,100,86,96,86,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,109,109,113,107,120,120,101],
[93,0,106,109,99,103,113,100,100],
[101,104,0,100,106,109,111,105,105],
[101,101,110,0,102,99,101,103,95],
[97,111,104,108,0,108,107,103,96],
[103,107,101,111,102,0,105,104,96],
[90,97,99,109,103,105,0,102,98],
[90,110,105,107,107,106,108,0,99],
[109,110,105,115,114,114,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,101,104,104,109,102,97,114],
[95,0,97,91,91,101,100,83,99],
[109,113,0,103,106,112,111,93,106],
[106,119,107,0,103,107,98,99,104],
[106,119,104,107,0,115,106,109,110],
[101,109,98,103,95,0,103,91,95],
[108,110,99,112,104,107,0,100,99],
[113,127,117,111,101,119,110,0,111],
[96,111,104,106,100,115,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,99,96,101,102,98,96],
[108,0,113,100,86,115,100,104,97],
[99,97,0,98,85,101,90,97,88],
[111,110,112,0,107,119,102,101,103],
[114,124,125,103,0,116,107,110,103],
[109,95,109,91,94,0,92,94,98],
[108,110,120,108,103,118,0,101,105],
[112,106,113,109,100,116,109,0,109],
[114,113,122,107,107,112,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,103,114,106,114,101,94],
[106,0,102,102,115,105,120,105,99],
[103,108,0,108,106,105,117,101,92],
[107,108,102,0,119,112,117,117,105],
[96,95,104,91,0,103,117,103,95],
[104,105,105,98,107,0,115,103,100],
[96,90,93,93,93,95,0,95,85],
[109,105,109,93,107,107,115,0,105],
[116,111,118,105,115,110,125,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,110,112,109,108,109,112,104],
[99,0,92,105,108,97,107,100,109],
[100,118,0,110,109,96,113,113,108],
[98,105,100,0,99,91,106,106,99],
[101,102,101,111,0,91,95,102,91],
[102,113,114,119,119,0,110,122,117],
[101,103,97,104,115,100,0,117,107],
[98,110,97,104,108,88,93,0,101],
[106,101,102,111,119,93,103,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,99,108,87,89,91,109,101],
[126,0,121,127,97,101,97,111,113],
[111,89,0,108,104,107,104,100,107],
[102,83,102,0,87,103,80,97,104],
[123,113,106,123,0,116,110,117,104],
[121,109,103,107,94,0,104,111,122],
[119,113,106,130,100,106,0,112,115],
[101,99,110,113,93,99,98,0,114],
[109,97,103,106,106,88,95,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,94,104,115,124,81,138],
[108,0,103,108,125,158,104,79,114],
[108,107,0,88,94,126,98,80,96],
[116,102,122,0,119,129,102,81,108],
[106,85,116,91,0,138,126,108,109],
[95,52,84,81,72,0,101,44,108],
[86,106,112,108,84,109,0,95,121],
[129,131,130,129,102,166,115,0,155],
[72,96,114,102,101,102,89,55,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,118,123,100,109,107,112,115],
[94,0,115,109,103,115,101,108,114],
[92,95,0,111,106,105,95,102,101],
[87,101,99,0,88,98,108,99,100],
[110,107,104,122,0,132,109,111,103],
[101,95,105,112,78,0,93,92,94],
[103,109,115,102,101,117,0,108,108],
[98,102,108,111,99,118,102,0,98],
[95,96,109,110,107,116,102,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,111,112,104,105,98,99],
[103,0,104,93,121,110,102,101,97],
[106,106,0,105,116,94,100,105,88],
[99,117,105,0,129,99,110,105,105],
[98,89,94,81,0,84,83,95,92],
[106,100,116,111,126,0,112,94,114],
[105,108,110,100,127,98,0,86,97],
[112,109,105,105,115,116,124,0,117],
[111,113,122,105,118,96,113,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,126,120,110,141,107,103,118],
[92,0,107,107,107,110,94,93,102],
[84,103,0,102,95,108,97,89,107],
[90,103,108,0,110,115,103,103,104],
[100,103,115,100,0,117,104,94,113],
[69,100,102,95,93,0,87,83,91],
[103,116,113,107,106,123,0,106,120],
[107,117,121,107,116,127,104,0,112],
[92,108,103,106,97,119,90,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,93,103,90,95,101,89],
[107,0,94,102,104,101,99,117,99],
[108,116,0,101,98,110,94,98,89],
[117,108,109,0,105,116,112,99,105],
[107,106,112,105,0,105,119,109,102],
[120,109,100,94,105,0,97,113,97],
[115,111,116,98,91,113,0,97,100],
[109,93,112,111,101,97,113,0,96],
[121,111,121,105,108,113,110,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,119,103,119,126,127,116,127],
[90,0,109,105,108,116,122,107,124],
[91,101,0,92,101,112,111,97,117],
[107,105,118,0,104,114,130,113,120],
[91,102,109,106,0,108,114,105,116],
[84,94,98,96,102,0,111,96,115],
[83,88,99,80,96,99,0,91,101],
[94,103,113,97,105,114,119,0,108],
[83,86,93,90,94,95,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,101,112,103,105,111,106],
[99,0,107,98,99,101,97,104,100],
[94,103,0,90,105,115,96,105,85],
[109,112,120,0,112,121,101,112,101],
[98,111,105,98,0,102,102,100,89],
[107,109,95,89,108,0,96,112,95],
[105,113,114,109,108,114,0,110,96],
[99,106,105,98,110,98,100,0,99],
[104,110,125,109,121,115,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,112,136,97,173,112,94,94],
[113,0,133,173,116,152,94,132,92],
[98,77,0,97,41,78,73,114,56],
[74,37,113,0,77,115,92,73,73],
[113,94,169,133,0,115,110,130,149],
[37,58,132,95,95,0,74,56,94],
[98,116,137,118,100,136,0,115,96],
[116,78,96,137,80,154,95,0,113],
[116,118,154,137,61,116,114,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,126,113,98,105,105,110,110],
[90,0,99,108,93,96,108,102,85],
[84,111,0,94,90,91,102,88,90],
[97,102,116,0,107,93,121,109,105],
[112,117,120,103,0,116,102,113,104],
[105,114,119,117,94,0,113,106,104],
[105,102,108,89,108,97,0,100,103],
[100,108,122,101,97,104,110,0,100],
[100,125,120,105,106,106,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,125,115,107,106,114,109],
[91,0,100,96,98,91,99,99,108],
[105,110,0,106,108,86,104,115,105],
[85,114,104,0,98,98,96,95,102],
[95,112,102,112,0,93,102,105,104],
[103,119,124,112,117,0,93,102,117],
[104,111,106,114,108,117,0,107,111],
[96,111,95,115,105,108,103,0,112],
[101,102,105,108,106,93,99,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,98,106,105,101,101,106,109],
[100,0,99,106,102,100,102,95,107],
[112,111,0,108,112,104,117,119,117],
[104,104,102,0,111,105,108,103,104],
[105,108,98,99,0,93,98,98,99],
[109,110,106,105,117,0,103,112,115],
[109,108,93,102,112,107,0,100,106],
[104,115,91,107,112,98,110,0,104],
[101,103,93,106,111,95,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,62,72,81,74,73,93,116,83],
[148,0,124,126,93,104,94,127,115],
[138,86,0,95,53,74,95,87,86],
[129,84,115,0,53,106,96,129,96],
[136,117,157,157,0,125,136,116,96],
[137,106,136,104,85,0,83,94,107],
[117,116,115,114,74,127,0,127,116],
[94,83,123,81,94,116,83,0,94],
[127,95,124,114,114,103,94,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,104,123,130,127,117,116,111],
[85,0,88,108,99,100,90,106,97],
[106,122,0,121,112,114,119,115,104],
[87,102,89,0,102,102,107,102,97],
[80,111,98,108,0,105,103,112,92],
[83,110,96,108,105,0,105,108,95],
[93,120,91,103,107,105,0,111,90],
[94,104,95,108,98,102,99,0,99],
[99,113,106,113,118,115,120,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,111,106,102,111,101,112],
[98,0,124,110,120,109,111,102,103],
[108,86,0,108,112,117,114,99,117],
[99,100,102,0,110,106,97,101,109],
[104,90,98,100,0,124,90,110,110],
[108,101,93,104,86,0,101,92,105],
[99,99,96,113,120,109,0,94,107],
[109,108,111,109,100,118,116,0,120],
[98,107,93,101,100,105,103,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,101,101,113,96,98,116],
[99,0,93,89,107,110,104,93,105],
[90,117,0,94,104,106,96,99,111],
[109,121,116,0,120,129,104,110,106],
[109,103,106,90,0,106,114,104,91],
[97,100,104,81,104,0,92,100,94],
[114,106,114,106,96,118,0,98,101],
[112,117,111,100,106,110,112,0,103],
[94,105,99,104,119,116,109,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,102,89,95,108,85,101,109],
[100,0,100,101,111,114,90,102,121],
[108,110,0,97,119,124,106,114,131],
[121,109,113,0,120,113,88,124,113],
[115,99,91,90,0,117,90,96,135],
[102,96,86,97,93,0,96,103,106],
[125,120,104,122,120,114,0,100,134],
[109,108,96,86,114,107,110,0,103],
[101,89,79,97,75,104,76,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,116,106,106,118,96,67,85],
[136,0,126,108,115,126,124,72,94],
[94,84,0,136,116,114,116,105,102],
[104,102,74,0,114,96,123,104,63],
[104,95,94,96,0,105,107,118,71],
[92,84,96,114,105,0,103,106,74],
[114,86,94,87,103,107,0,99,82],
[143,138,105,106,92,104,111,0,114],
[125,116,108,147,139,136,128,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,100,112,96,105,106,93],
[103,0,107,98,101,88,99,88,85],
[103,103,0,98,109,92,101,107,93],
[110,112,112,0,100,107,105,104,94],
[98,109,101,110,0,104,104,103,93],
[114,122,118,103,106,0,111,107,107],
[105,111,109,105,106,99,0,109,100],
[104,122,103,106,107,103,101,0,101],
[117,125,117,116,117,103,110,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,105,109,106,97,102,113],
[108,0,101,96,107,106,96,98,100],
[104,109,0,104,106,88,91,100,111],
[105,114,106,0,103,95,102,103,106],
[101,103,104,107,0,105,106,102,107],
[104,104,122,115,105,0,102,99,109],
[113,114,119,108,104,108,0,102,112],
[108,112,110,107,108,111,108,0,105],
[97,110,99,104,103,101,98,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,124,101,105,114,120,98,117],
[107,0,108,112,109,113,102,99,106],
[86,102,0,100,93,95,122,92,96],
[109,98,110,0,124,106,116,92,116],
[105,101,117,86,0,102,112,101,97],
[96,97,115,104,108,0,116,92,83],
[90,108,88,94,98,94,0,84,92],
[112,111,118,118,109,118,126,0,103],
[93,104,114,94,113,127,118,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,92,125,108,95,105,96,100],
[110,0,95,108,95,99,106,103,103],
[118,115,0,113,103,98,123,107,111],
[85,102,97,0,99,85,84,85,84],
[102,115,107,111,0,109,98,104,96],
[115,111,112,125,101,0,132,106,123],
[105,104,87,126,112,78,0,106,97],
[114,107,103,125,106,104,104,0,106],
[110,107,99,126,114,87,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,103,101,95,98,109,90],
[98,0,93,98,85,103,94,98,107],
[102,117,0,104,97,117,100,119,103],
[107,112,106,0,114,115,100,113,111],
[109,125,113,96,0,105,88,107,101],
[115,107,93,95,105,0,106,111,102],
[112,116,110,110,122,104,0,115,109],
[101,112,91,97,103,99,95,0,104],
[120,103,107,99,109,108,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,105,129,117,117,121,110,102],
[84,0,97,110,107,109,100,95,86],
[105,113,0,118,112,108,118,123,107],
[81,100,92,0,110,110,100,94,77],
[93,103,98,100,0,105,99,104,88],
[93,101,102,100,105,0,106,108,90],
[89,110,92,110,111,104,0,109,83],
[100,115,87,116,106,102,101,0,98],
[108,124,103,133,122,120,127,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,102,114,113,114,93,100,106],
[113,0,101,106,109,101,92,113,108],
[108,109,0,111,117,100,105,113,101],
[96,104,99,0,108,84,98,93,112],
[97,101,93,102,0,93,107,108,104],
[96,109,110,126,117,0,110,103,111],
[117,118,105,112,103,100,0,116,105],
[110,97,97,117,102,107,94,0,103],
[104,102,109,98,106,99,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,98,117,94,135,135,117,156],
[75,0,111,96,78,154,77,80,134],
[112,99,0,98,96,137,117,98,100],
[93,114,112,0,96,133,169,59,131],
[116,132,114,114,0,95,171,114,172],
[75,56,73,77,115,0,95,58,95],
[75,133,93,41,39,115,0,78,115],
[93,130,112,151,96,152,132,0,153],
[54,76,110,79,38,115,95,57,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,92,95,97,120,87,89,113],
[108,0,111,99,106,117,113,95,100],
[118,99,0,109,122,115,118,110,111],
[115,111,101,0,114,120,99,99,109],
[113,104,88,96,0,109,99,102,96],
[90,93,95,90,101,0,99,97,99],
[123,97,92,111,111,111,0,107,103],
[121,115,100,111,108,113,103,0,121],
[97,110,99,101,114,111,107,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,156,157,106,157,103,106,157,106],
[54,0,157,54,105,105,54,105,54],
[53,53,0,107,107,53,107,51,107],
[104,156,103,0,105,103,106,51,103],
[53,105,103,105,0,103,106,103,105],
[107,105,157,107,107,0,54,105,107],
[104,156,103,104,104,156,0,51,156],
[53,105,159,159,107,105,159,0,159],
[104,156,103,107,105,103,54,51,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,89,100,112,105,105,114,107],
[94,0,87,100,98,92,106,107,91],
[121,123,0,105,118,111,113,132,109],
[110,110,105,0,118,106,113,122,103],
[98,112,92,92,0,95,103,99,98],
[105,118,99,104,115,0,107,111,95],
[105,104,97,97,107,103,0,113,103],
[96,103,78,88,111,99,97,0,95],
[103,119,101,107,112,115,107,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,113,112,106,115,109,105,115],
[88,0,112,100,112,108,103,98,97],
[97,98,0,100,97,93,104,98,112],
[98,110,110,0,107,112,108,99,123],
[104,98,113,103,0,108,106,116,116],
[95,102,117,98,102,0,105,97,111],
[101,107,106,102,104,105,0,110,117],
[105,112,112,111,94,113,100,0,113],
[95,113,98,87,94,99,93,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,101,108,112,123,97,91],
[114,0,114,107,111,104,112,113,95],
[115,96,0,102,108,102,108,114,99],
[109,103,108,0,100,104,107,112,103],
[102,99,102,110,0,103,99,96,86],
[98,106,108,106,107,0,117,111,107],
[87,98,102,103,111,93,0,97,91],
[113,97,96,98,114,99,113,0,98],
[119,115,111,107,124,103,119,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,101,122,116,113,113,97],
[104,0,100,91,126,108,108,106,112],
[108,110,0,98,123,125,99,108,98],
[109,119,112,0,118,123,104,118,110],
[88,84,87,92,0,113,86,97,81],
[94,102,85,87,97,0,85,96,93],
[97,102,111,106,124,125,0,118,96],
[97,104,102,92,113,114,92,0,100],
[113,98,112,100,129,117,114,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,95,95,106,103,149,112,120],
[128,0,126,107,122,94,107,96,105],
[115,84,0,104,101,111,122,106,94],
[115,103,106,0,103,86,122,97,110],
[104,88,109,107,0,98,115,89,96],
[107,116,99,124,112,0,133,91,132],
[61,103,88,88,95,77,0,87,86],
[98,114,104,113,121,119,123,0,104],
[90,105,116,100,114,78,124,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,105,118,105,105,111,101,103],
[107,0,105,104,102,108,114,103,112],
[105,105,0,117,104,99,111,100,113],
[92,106,93,0,85,95,115,92,115],
[105,108,106,125,0,105,114,104,120],
[105,102,111,115,105,0,113,108,110],
[99,96,99,95,96,97,0,97,105],
[109,107,110,118,106,102,113,0,98],
[107,98,97,95,90,100,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,90,104,117,81,116,103],
[103,0,112,100,105,112,81,118,93],
[108,98,0,105,114,99,98,112,101],
[120,110,105,0,114,109,94,107,106],
[106,105,96,96,0,110,93,109,96],
[93,98,111,101,100,0,77,106,89],
[129,129,112,116,117,133,0,114,103],
[94,92,98,103,101,104,96,0,100],
[107,117,109,104,114,121,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,127,107,103,112,120,117,104],
[111,0,126,95,103,104,115,101,111],
[83,84,0,89,98,86,114,88,100],
[103,115,121,0,119,114,121,110,125],
[107,107,112,91,0,98,119,99,102],
[98,106,124,96,112,0,128,104,120],
[90,95,96,89,91,82,0,92,108],
[93,109,122,100,111,106,118,0,114],
[106,99,110,85,108,90,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,101,117,123,94,119,122],
[105,0,106,106,117,127,105,101,126],
[96,104,0,105,101,110,110,104,112],
[109,104,105,0,114,113,97,112,121],
[93,93,109,96,0,117,95,107,115],
[87,83,100,97,93,0,90,95,104],
[116,105,100,113,115,120,0,109,115],
[91,109,106,98,103,115,101,0,111],
[88,84,98,89,95,106,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,96,101,97,99,97,90],
[104,0,98,89,92,95,94,104,95],
[112,112,0,102,120,111,94,124,98],
[114,121,108,0,112,119,105,111,115],
[109,118,90,98,0,108,111,105,112],
[113,115,99,91,102,0,111,106,98],
[111,116,116,105,99,99,0,108,112],
[113,106,86,99,105,104,102,0,101],
[120,115,112,95,98,112,98,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,104,117,96,101,98,96,107],
[116,0,112,124,114,108,105,114,99],
[106,98,0,94,96,106,103,111,113],
[93,86,116,0,103,98,102,99,103],
[114,96,114,107,0,119,105,107,105],
[109,102,104,112,91,0,108,98,106],
[112,105,107,108,105,102,0,102,97],
[114,96,99,111,103,112,108,0,95],
[103,111,97,107,105,104,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,91,106,97,137,109,88,91],
[104,0,109,103,86,136,101,101,110],
[119,101,0,90,115,102,98,99,94],
[104,107,120,0,105,129,107,115,95],
[113,124,95,105,0,132,119,118,112],
[73,74,108,81,78,0,87,100,81],
[101,109,112,103,91,123,0,88,91],
[122,109,111,95,92,110,122,0,122],
[119,100,116,115,98,129,119,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,113,123,109,108,111,128],
[113,0,104,124,134,126,108,117,113],
[104,106,0,117,115,116,109,107,111],
[97,86,93,0,111,111,106,95,100],
[87,76,95,99,0,99,97,91,100],
[101,84,94,99,111,0,94,96,93],
[102,102,101,104,113,116,0,92,101],
[99,93,103,115,119,114,118,0,107],
[82,97,99,110,110,117,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,104,155,78,103,130,131,103],
[81,0,106,105,81,103,79,133,79],
[106,104,0,130,79,105,105,133,78],
[55,105,80,0,80,79,105,80,105],
[132,129,131,130,0,130,130,158,103],
[107,107,105,131,80,0,107,81,106],
[80,131,105,105,80,103,0,106,132],
[79,77,77,130,52,129,104,0,78],
[107,131,132,105,107,104,78,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,109,111,104,97,131,100],
[97,0,107,111,110,99,106,109,111],
[89,103,0,105,102,105,98,109,91],
[101,99,105,0,107,99,86,121,106],
[99,100,108,103,0,118,96,121,98],
[106,111,105,111,92,0,100,125,101],
[113,104,112,124,114,110,0,124,114],
[79,101,101,89,89,85,86,0,101],
[110,99,119,104,112,109,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,99,114,122,105,111,127,123],
[101,0,114,119,112,112,118,130,124],
[111,96,0,128,121,106,115,115,124],
[96,91,82,0,108,94,94,102,116],
[88,98,89,102,0,97,108,107,116],
[105,98,104,116,113,0,114,123,118],
[99,92,95,116,102,96,0,110,123],
[83,80,95,108,103,87,100,0,111],
[87,86,86,94,94,92,87,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,105,114,109,104,98,96],
[105,0,104,104,107,108,99,104,106],
[112,106,0,114,100,104,100,90,90],
[105,106,96,0,102,115,98,96,101],
[96,103,110,108,0,111,100,91,96],
[101,102,106,95,99,0,101,92,105],
[106,111,110,112,110,109,0,105,102],
[112,106,120,114,119,118,105,0,115],
[114,104,120,109,114,105,108,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,110,111,114,108,117,107],
[105,0,98,112,120,101,106,120,117],
[104,112,0,113,118,112,107,110,113],
[100,98,97,0,113,119,113,130,132],
[99,90,92,97,0,114,105,106,106],
[96,109,98,91,96,0,94,107,108],
[102,104,103,97,105,116,0,124,111],
[93,90,100,80,104,103,86,0,94],
[103,93,97,78,104,102,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,116,107,108,105,125,108,128],
[74,0,92,92,78,70,99,92,111],
[94,118,0,90,82,114,124,82,106],
[103,118,120,0,94,100,131,105,119],
[102,132,128,116,0,98,110,107,127],
[105,140,96,110,112,0,124,122,137],
[85,111,86,79,100,86,0,99,94],
[102,118,128,105,103,88,111,0,115],
[82,99,104,91,83,73,116,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,101,96,96,103,107,86,93],
[102,0,96,101,100,86,105,95,106],
[109,114,0,96,90,91,91,88,105],
[114,109,114,0,91,106,97,94,97],
[114,110,120,119,0,110,106,104,111],
[107,124,119,104,100,0,111,108,113],
[103,105,119,113,104,99,0,97,93],
[124,115,122,116,106,102,113,0,105],
[117,104,105,113,99,97,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,103,98,114,98,105,118,81],
[103,0,87,89,102,84,100,106,86],
[107,123,0,128,108,86,117,108,107],
[112,121,82,0,110,103,102,100,106],
[96,108,102,100,0,104,118,111,94],
[112,126,124,107,106,0,119,119,94],
[105,110,93,108,92,91,0,98,92],
[92,104,102,110,99,91,112,0,86],
[129,124,103,104,116,116,118,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,88,110,90,111,96,96],
[104,0,116,108,113,103,115,110,105],
[109,94,0,102,104,108,98,91,100],
[122,102,108,0,104,82,99,100,106],
[100,97,106,106,0,102,110,92,101],
[120,107,102,128,108,0,107,104,109],
[99,95,112,111,100,103,0,101,97],
[114,100,119,110,118,106,109,0,103],
[114,105,110,104,109,101,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,119,101,109,90,111,94,95],
[100,0,97,89,87,107,112,106,88],
[91,113,0,108,109,91,95,89,87],
[109,121,102,0,99,90,101,104,108],
[101,123,101,111,0,94,119,106,112],
[120,103,119,120,116,0,105,118,105],
[99,98,115,109,91,105,0,103,110],
[116,104,121,106,104,92,107,0,93],
[115,122,123,102,98,105,100,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,117,114,132,105,116,114,110],
[100,0,106,105,119,106,104,114,96],
[93,104,0,104,111,103,98,103,82],
[96,105,106,0,119,105,104,108,101],
[78,91,99,91,0,90,95,100,99],
[105,104,107,105,120,0,113,109,92],
[94,106,112,106,115,97,0,113,96],
[96,96,107,102,110,101,97,0,95],
[100,114,128,109,111,118,114,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,112,104,113,109,116,121,116],
[102,0,123,117,113,101,105,112,103],
[98,87,0,101,96,107,106,107,95],
[106,93,109,0,100,103,102,98,100],
[97,97,114,110,0,107,106,121,112],
[101,109,103,107,103,0,105,109,106],
[94,105,104,108,104,105,0,105,114],
[89,98,103,112,89,101,105,0,112],
[94,107,115,110,98,104,96,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,105,111,114,94,110,90],
[106,0,100,95,94,109,95,116,103],
[105,110,0,102,109,115,103,114,100],
[105,115,108,0,111,115,97,112,97],
[99,116,101,99,0,112,96,112,97],
[96,101,95,95,98,0,88,103,89],
[116,115,107,113,114,122,0,119,105],
[100,94,96,98,98,107,91,0,95],
[120,107,110,113,113,121,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,119,109,100,120,112,106,109],
[107,0,107,104,104,107,112,111,101],
[91,103,0,95,106,109,94,114,110],
[101,106,115,0,108,110,107,100,109],
[110,106,104,102,0,104,116,104,112],
[90,103,101,100,106,0,86,105,99],
[98,98,116,103,94,124,0,108,107],
[104,99,96,110,106,105,102,0,104],
[101,109,100,101,98,111,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,115,93,119,101,114,112],
[98,0,87,118,93,119,77,113,100],
[105,123,0,109,109,126,108,116,119],
[95,92,101,0,102,84,66,89,99],
[117,117,101,108,0,127,96,112,104],
[91,91,84,126,83,0,93,93,105],
[109,133,102,144,114,117,0,121,110],
[96,97,94,121,98,117,89,0,105],
[98,110,91,111,106,105,100,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,110,114,108,110,114,98,111],
[97,0,112,120,110,127,110,118,110],
[100,98,0,101,105,109,105,97,111],
[96,90,109,0,102,110,101,88,103],
[102,100,105,108,0,115,103,90,99],
[100,83,101,100,95,0,89,94,91],
[96,100,105,109,107,121,0,94,94],
[112,92,113,122,120,116,116,0,110],
[99,100,99,107,111,119,116,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,78,127,93,109,116,109,87,95],
[132,0,117,110,99,126,134,98,132],
[83,93,0,99,76,121,114,97,117],
[117,100,111,0,108,132,116,106,108],
[101,111,134,102,0,114,116,102,106],
[94,84,89,78,96,0,99,73,86],
[101,76,96,94,94,111,0,82,76],
[123,112,113,104,108,137,128,0,89],
[115,78,93,102,104,124,134,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,111,118,114,110,111,86],
[103,0,101,101,106,105,102,115,91],
[106,109,0,108,113,115,99,110,105],
[99,109,102,0,107,116,99,109,92],
[92,104,97,103,0,100,89,106,95],
[96,105,95,94,110,0,87,98,81],
[100,108,111,111,121,123,0,118,102],
[99,95,100,101,104,112,92,0,88],
[124,119,105,118,115,129,108,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,128,143,106,119,107,94,132],
[81,0,116,120,103,79,71,107,117],
[82,94,0,132,70,106,107,72,97],
[67,90,78,0,45,91,95,104,94],
[104,107,140,165,0,119,118,119,142],
[91,131,104,119,91,0,104,117,130],
[103,139,103,115,92,106,0,140,130],
[116,103,138,106,91,93,70,0,117],
[78,93,113,116,68,80,80,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,120,110,110,106,102,107],
[99,0,106,112,106,108,109,98,99],
[104,104,0,115,108,107,117,104,98],
[90,98,95,0,101,92,107,93,92],
[100,104,102,109,0,104,107,95,94],
[100,102,103,118,106,0,106,99,95],
[104,101,93,103,103,104,0,96,94],
[108,112,106,117,115,111,114,0,105],
[103,111,112,118,116,115,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,95,90,88,90,88,94,97],
[109,0,95,96,92,96,98,104,97],
[115,115,0,98,113,111,103,106,109],
[120,114,112,0,101,102,105,113,100],
[122,118,97,109,0,112,101,119,105],
[120,114,99,108,98,0,107,110,97],
[122,112,107,105,109,103,0,111,99],
[116,106,104,97,91,100,99,0,98],
[113,113,101,110,105,113,111,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,102,101,79,104,78,105,92],
[119,0,107,103,88,122,110,107,96],
[108,103,0,116,85,103,97,100,94],
[109,107,94,0,94,92,98,91,101],
[131,122,125,116,0,120,111,105,118],
[106,88,107,118,90,0,85,99,93],
[132,100,113,112,99,125,0,112,105],
[105,103,110,119,105,111,98,0,101],
[118,114,116,109,92,117,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,103,105,96,109,126,102],
[103,0,101,104,113,99,119,116,107],
[108,109,0,107,97,100,108,116,95],
[107,106,103,0,122,111,120,110,100],
[105,97,113,88,0,91,101,110,106],
[114,111,110,99,119,0,125,130,108],
[101,91,102,90,109,85,0,109,92],
[84,94,94,100,100,80,101,0,106],
[108,103,115,110,104,102,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,101,111,99,101,94,110,103],
[107,0,98,109,103,104,102,101,103],
[109,112,0,116,115,101,108,111,106],
[99,101,94,0,113,101,92,102,101],
[111,107,95,97,0,102,98,108,98],
[109,106,109,109,108,0,99,110,108],
[116,108,102,118,112,111,0,107,109],
[100,109,99,108,102,100,103,0,99],
[107,107,104,109,112,102,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,98,116,114,107,101,107,94],
[115,0,105,114,104,104,111,111,96],
[112,105,0,115,111,110,114,116,102],
[94,96,95,0,98,89,102,96,95],
[96,106,99,112,0,97,102,98,106],
[103,106,100,121,113,0,107,114,111],
[109,99,96,108,108,103,0,104,103],
[103,99,94,114,112,96,106,0,90],
[116,114,108,115,104,99,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,101,106,97,104,107,98],
[107,0,108,100,101,106,103,112,108],
[111,102,0,97,102,104,104,103,100],
[109,110,113,0,110,102,109,106,103],
[104,109,108,100,0,96,93,99,100],
[113,104,106,108,114,0,99,108,99],
[106,107,106,101,117,111,0,110,106],
[103,98,107,104,111,102,100,0,102],
[112,102,110,107,110,111,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,99,94,117,100,97,106],
[98,0,116,108,93,112,101,93,101],
[100,94,0,82,96,110,106,99,92],
[111,102,128,0,100,122,100,105,102],
[116,117,114,110,0,117,104,102,113],
[93,98,100,88,93,0,85,96,83],
[110,109,104,110,106,125,0,99,106],
[113,117,111,105,108,114,111,0,105],
[104,109,118,108,97,127,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,90,115,95,97,103,115,105],
[126,0,118,120,107,121,113,131,102],
[120,92,0,107,125,115,115,113,104],
[95,90,103,0,89,101,82,108,95],
[115,103,85,121,0,94,106,79,86],
[113,89,95,109,116,0,90,97,98],
[107,97,95,128,104,120,0,121,107],
[95,79,97,102,131,113,89,0,95],
[105,108,106,115,124,112,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,97,104,114,106,106,106,96],
[101,0,108,103,111,102,115,99,107],
[113,102,0,106,117,109,116,111,119],
[106,107,104,0,114,100,107,106,103],
[96,99,93,96,0,86,104,97,97],
[104,108,101,110,124,0,106,105,101],
[104,95,94,103,106,104,0,93,98],
[104,111,99,104,113,105,117,0,112],
[114,103,91,107,113,109,112,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,95,103,105,97,108,99],
[107,0,108,103,105,121,105,120,94],
[108,102,0,104,95,119,108,120,100],
[115,107,106,0,105,108,111,123,100],
[107,105,115,105,0,123,111,119,112],
[105,89,91,102,87,0,97,114,83],
[113,105,102,99,99,113,0,108,105],
[102,90,90,87,91,96,102,0,87],
[111,116,110,110,98,127,105,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,111,97,108,107,111,111],
[101,0,103,111,100,98,108,107,101],
[105,107,0,112,109,105,104,110,110],
[99,99,98,0,95,106,104,102,94],
[113,110,101,115,0,108,111,108,116],
[102,112,105,104,102,0,103,98,100],
[103,102,106,106,99,107,0,102,104],
[99,103,100,108,102,112,108,0,109],
[99,109,100,116,94,110,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,108,116,123,95,111,105],
[109,0,115,105,122,142,120,115,103],
[103,95,0,101,96,118,96,112,88],
[102,105,109,0,120,126,113,123,120],
[94,88,114,90,0,100,87,100,85],
[87,68,92,84,110,0,79,100,90],
[115,90,114,97,123,131,0,104,111],
[99,95,98,87,110,110,106,0,107],
[105,107,122,90,125,120,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,104,114,96,114,107,103],
[91,0,92,99,100,86,87,92,95],
[105,118,0,117,105,100,109,96,120],
[106,111,93,0,105,86,86,80,106],
[96,110,105,105,0,84,103,94,114],
[114,124,110,124,126,0,104,107,113],
[96,123,101,124,107,106,0,92,97],
[103,118,114,130,116,103,118,0,113],
[107,115,90,104,96,97,113,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,120,99,110,115,112,99],
[102,0,114,110,106,112,118,110,105],
[107,96,0,103,88,106,108,100,105],
[90,100,107,0,95,105,107,102,86],
[111,104,122,115,0,113,109,115,108],
[100,98,104,105,97,0,115,112,89],
[95,92,102,103,101,95,0,101,97],
[98,100,110,108,95,98,109,0,92],
[111,105,105,124,102,121,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,95,98,87,94,103,103,108],
[119,0,122,120,99,101,105,112,124],
[115,88,0,136,105,91,105,105,125],
[112,90,74,0,106,86,97,100,107],
[123,111,105,104,0,80,104,106,111],
[116,109,119,124,130,0,103,130,120],
[107,105,105,113,106,107,0,107,102],
[107,98,105,110,104,80,103,0,96],
[102,86,85,103,99,90,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,119,101,101,112,111,118,110],
[93,0,99,114,97,108,111,123,96],
[91,111,0,105,99,110,107,120,104],
[109,96,105,0,101,116,116,113,106],
[109,113,111,109,0,111,111,121,103],
[98,102,100,94,99,0,113,112,105],
[99,99,103,94,99,97,0,120,103],
[92,87,90,97,89,98,90,0,90],
[100,114,106,104,107,105,107,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,113,100,107,113,106,107],
[101,0,95,103,97,108,105,93,111],
[105,115,0,114,112,107,120,103,113],
[97,107,96,0,103,103,102,99,107],
[110,113,98,107,0,110,117,109,106],
[103,102,103,107,100,0,107,103,107],
[97,105,90,108,93,103,0,103,98],
[104,117,107,111,101,107,107,0,108],
[103,99,97,103,104,103,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,83,88,113,95,125,95,98],
[86,0,65,88,84,77,90,94,88],
[127,145,0,92,82,98,128,81,91],
[122,122,118,0,121,104,98,127,112],
[97,126,128,89,0,105,144,112,105],
[115,133,112,106,105,0,107,122,105],
[85,120,82,112,66,103,0,100,67],
[115,116,129,83,98,88,110,0,97],
[112,122,119,98,105,105,143,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,105,126,108,112,105,109],
[109,0,107,106,122,110,112,104,113],
[103,103,0,93,116,101,109,108,108],
[105,104,117,0,120,99,113,114,108],
[84,88,94,90,0,91,90,90,98],
[102,100,109,111,119,0,113,112,104],
[98,98,101,97,120,97,0,100,101],
[105,106,102,96,120,98,110,0,105],
[101,97,102,102,112,106,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,122,76,117,119,103,124,151],
[108,0,129,103,118,146,129,131,146],
[88,81,0,111,117,130,129,106,122],
[134,107,99,0,115,129,121,110,99],
[93,92,93,95,0,93,91,103,101],
[91,64,80,81,117,0,94,108,114],
[107,81,81,89,119,116,0,114,132],
[86,79,104,100,107,102,96,0,88],
[59,64,88,111,109,96,78,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,115,118,104,114,102,119,111],
[109,0,124,111,119,112,121,119,90],
[95,86,0,98,98,109,103,96,97],
[92,99,112,0,110,109,113,110,101],
[106,91,112,100,0,117,114,121,104],
[96,98,101,101,93,0,91,102,93],
[108,89,107,97,96,119,0,101,95],
[91,91,114,100,89,108,109,0,92],
[99,120,113,109,106,117,115,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,107,100,105,88,98,97],
[108,0,106,108,94,91,91,94,97],
[101,104,0,107,93,99,93,105,98],
[103,102,103,0,89,97,97,109,104],
[110,116,117,121,0,117,108,100,108],
[105,119,111,113,93,0,109,97,110],
[122,119,117,113,102,101,0,104,119],
[112,116,105,101,110,113,106,0,113],
[113,113,112,106,102,100,91,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,101,123,107,108,85,112,93],
[112,0,95,113,99,96,94,131,99],
[109,115,0,117,100,125,114,130,109],
[87,97,93,0,87,88,86,102,100],
[103,111,110,123,0,104,97,139,109],
[102,114,85,122,106,0,96,113,115],
[125,116,96,124,113,114,0,125,109],
[98,79,80,108,71,97,85,0,102],
[117,111,101,110,101,95,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,113,107,103,112,123,118,114],
[99,0,106,97,98,107,122,109,103],
[97,104,0,107,106,112,123,104,111],
[103,113,103,0,103,114,114,106,96],
[107,112,104,107,0,102,119,112,101],
[98,103,98,96,108,0,110,101,103],
[87,88,87,96,91,100,0,102,98],
[92,101,106,104,98,109,108,0,103],
[96,107,99,114,109,107,112,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,122,119,152,152,123,91,151],
[88,0,119,119,122,90,61,90,89],
[88,91,0,90,122,122,93,90,88],
[91,91,120,0,121,150,92,62,120],
[58,88,88,89,0,119,120,89,58],
[58,120,88,60,91,0,91,60,59],
[87,149,117,118,90,119,0,118,58],
[119,120,120,148,121,150,92,0,120],
[59,121,122,90,152,151,152,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,103,94,101,91,104,98,90],
[125,0,110,126,108,108,116,116,105],
[107,100,0,107,104,100,113,101,107],
[116,84,103,0,94,107,113,105,98],
[109,102,106,116,0,106,99,105,109],
[119,102,110,103,104,0,103,103,101],
[106,94,97,97,111,107,0,100,98],
[112,94,109,105,105,107,110,0,105],
[120,105,103,112,101,109,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,104,112,124,131,120,97,110],
[98,0,96,79,109,118,100,82,94],
[106,114,0,110,120,121,132,110,96],
[98,131,100,0,120,122,122,99,105],
[86,101,90,90,0,119,98,95,93],
[79,92,89,88,91,0,105,88,75],
[90,110,78,88,112,105,0,81,78],
[113,128,100,111,115,122,129,0,113],
[100,116,114,105,117,135,132,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,123,118,108,105,112,103,129],
[92,0,121,111,107,94,90,97,114],
[87,89,0,94,94,84,87,89,106],
[92,99,116,0,98,102,86,86,116],
[102,103,116,112,0,92,93,102,122],
[105,116,126,108,118,0,101,109,115],
[98,120,123,124,117,109,0,110,117],
[107,113,121,124,108,101,100,0,114],
[81,96,104,94,88,95,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,125,111,114,112,109,101,113],
[97,0,101,100,106,94,96,96,95],
[85,109,0,102,112,99,98,104,95],
[99,110,108,0,113,98,105,106,101],
[96,104,98,97,0,101,107,100,96],
[98,116,111,112,109,0,108,107,104],
[101,114,112,105,103,102,0,107,112],
[109,114,106,104,110,103,103,0,102],
[97,115,115,109,114,106,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,108,106,94,91,95,107,102],
[119,0,119,106,99,96,103,118,103],
[102,91,0,100,89,94,94,107,93],
[104,104,110,0,96,102,96,116,106],
[116,111,121,114,0,103,104,112,113],
[119,114,116,108,107,0,104,109,113],
[115,107,116,114,106,106,0,112,105],
[103,92,103,94,98,101,98,0,98],
[108,107,117,104,97,97,105,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,109,98,89,93,103,97],
[99,0,105,96,100,85,99,97,107],
[106,105,0,105,103,96,99,94,96],
[101,114,105,0,113,88,110,97,100],
[112,110,107,97,0,82,90,93,106],
[121,125,114,122,128,0,118,100,106],
[117,111,111,100,120,92,0,97,110],
[107,113,116,113,117,110,113,0,104],
[113,103,114,110,104,104,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,133,110,112,104,111,110,112],
[106,0,116,108,112,99,107,102,119],
[77,94,0,97,104,93,99,84,99],
[100,102,113,0,114,92,95,104,111],
[98,98,106,96,0,91,102,91,114],
[106,111,117,118,119,0,104,120,124],
[99,103,111,115,108,106,0,98,111],
[100,108,126,106,119,90,112,0,120],
[98,91,111,99,96,86,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,97,99,96,103,107,99,101],
[113,0,99,97,107,99,109,105,103],
[113,111,0,100,106,96,119,113,101],
[111,113,110,0,118,111,112,112,105],
[114,103,104,92,0,97,114,107,108],
[107,111,114,99,113,0,117,103,105],
[103,101,91,98,96,93,0,101,84],
[111,105,97,98,103,107,109,0,101],
[109,107,109,105,102,105,126,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,126,53,124,113,113,97,142],
[86,0,82,80,112,71,57,96,84],
[84,128,0,41,84,86,101,113,128],
[157,130,169,0,144,102,129,125,158],
[86,98,126,66,0,55,73,81,86],
[97,139,124,108,155,0,85,109,140],
[97,153,109,81,137,125,0,112,127],
[113,114,97,85,129,101,98,0,129],
[68,126,82,52,124,70,83,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,83,84,111,94,105,98],
[106,0,107,100,123,107,118,108,108],
[129,103,0,116,112,129,120,119,107],
[127,110,94,0,109,122,124,116,92],
[126,87,98,101,0,108,123,99,97],
[99,103,81,88,102,0,108,96,91],
[116,92,90,86,87,102,0,85,95],
[105,102,91,94,111,114,125,0,104],
[112,102,103,118,113,119,115,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,106,99,115,102,106,95],
[105,0,101,106,106,112,114,112,99],
[104,109,0,107,122,111,109,110,104],
[104,104,103,0,116,118,108,106,110],
[111,104,88,94,0,103,103,111,99],
[95,98,99,92,107,0,105,108,97],
[108,96,101,102,107,105,0,109,94],
[104,98,100,104,99,102,101,0,95],
[115,111,106,100,111,113,116,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,109,123,111,114,105,120],
[103,0,115,104,113,115,121,113,113],
[98,95,0,114,103,97,104,111,99],
[101,106,96,0,115,111,122,98,107],
[87,97,107,95,0,100,112,107,85],
[99,95,113,99,110,0,115,107,106],
[96,89,106,88,98,95,0,102,102],
[105,97,99,112,103,103,108,0,101],
[90,97,111,103,125,104,108,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,101,102,99,94,101,100],
[104,0,104,109,103,107,118,102,102],
[104,106,0,105,104,105,106,112,110],
[109,101,105,0,108,98,101,101,94],
[108,107,106,102,0,115,105,104,100],
[111,103,105,112,95,0,110,92,111],
[116,92,104,109,105,100,0,88,106],
[109,108,98,109,106,118,122,0,108],
[110,108,100,116,110,99,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,111,111,102,100,104,108],
[106,0,116,119,108,112,105,108,115],
[87,94,0,90,99,98,88,93,98],
[99,91,120,0,104,92,89,108,98],
[99,102,111,106,0,100,100,110,98],
[108,98,112,118,110,0,105,105,106],
[110,105,122,121,110,105,0,112,108],
[106,102,117,102,100,105,98,0,101],
[102,95,112,112,112,104,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,114,91,103,89,93,137,112],
[123,0,115,135,112,102,97,152,139],
[96,95,0,104,104,101,84,118,108],
[119,75,106,0,100,109,107,138,134],
[107,98,106,110,0,114,67,125,110],
[121,108,109,101,96,0,80,121,123],
[117,113,126,103,143,130,0,164,154],
[73,58,92,72,85,89,46,0,89],
[98,71,102,76,100,87,56,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,114,108,119,107,115,108],
[110,0,122,115,122,123,104,116,122],
[111,88,0,98,98,110,104,112,104],
[96,95,112,0,104,107,101,109,95],
[102,88,112,106,0,114,103,108,98],
[91,87,100,103,96,0,94,113,93],
[103,106,106,109,107,116,0,117,105],
[95,94,98,101,102,97,93,0,97],
[102,88,106,115,112,117,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,99,104,108,113,100,105],
[97,0,108,98,104,99,96,100,97],
[103,102,0,95,93,100,102,102,103],
[111,112,115,0,114,112,101,104,116],
[106,106,117,96,0,105,97,103,102],
[102,111,110,98,105,0,104,102,98],
[97,114,108,109,113,106,0,109,106],
[110,110,108,106,107,108,101,0,108],
[105,113,107,94,108,112,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,101,100,114,108,113,86,108],
[94,0,94,93,99,102,89,83,94],
[109,116,0,92,103,113,102,88,101],
[110,117,118,0,104,123,101,103,97],
[96,111,107,106,0,105,97,98,107],
[102,108,97,87,105,0,98,88,92],
[97,121,108,109,113,112,0,106,106],
[124,127,122,107,112,122,104,0,114],
[102,116,109,113,103,118,104,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,103,114,103,92,96,105],
[94,0,88,92,93,95,84,77,91],
[110,122,0,108,106,116,91,95,111],
[107,118,102,0,106,107,93,98,102],
[96,117,104,104,0,107,96,86,97],
[107,115,94,103,103,0,99,100,100],
[118,126,119,117,114,111,0,95,102],
[114,133,115,112,124,110,115,0,105],
[105,119,99,108,113,110,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,106,98,117,101,103,110,99],
[98,0,109,97,105,98,100,90,100],
[104,101,0,99,104,87,103,95,106],
[112,113,111,0,106,109,102,123,114],
[93,105,106,104,0,88,97,91,109],
[109,112,123,101,122,0,111,120,116],
[107,110,107,108,113,99,0,96,117],
[100,120,115,87,119,90,114,0,104],
[111,110,104,96,101,94,93,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,105,123,103,124,121,109,125],
[90,0,95,100,99,114,105,105,107],
[105,115,0,112,107,110,114,110,110],
[87,110,98,0,107,119,114,99,114],
[107,111,103,103,0,100,108,103,105],
[86,96,100,91,110,0,104,99,100],
[89,105,96,96,102,106,0,97,111],
[101,105,100,111,107,111,113,0,117],
[85,103,100,96,105,110,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,101,102,99,108,103,101],
[103,0,109,107,99,107,101,116,115],
[112,101,0,105,102,100,102,110,108],
[109,103,105,0,104,102,106,108,114],
[108,111,108,106,0,107,103,113,114],
[111,103,110,108,103,0,108,111,104],
[102,109,108,104,107,102,0,121,117],
[107,94,100,102,97,99,89,0,103],
[109,95,102,96,96,106,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,84,100,87,106,94,78,93],
[117,0,95,111,89,100,106,92,111],
[126,115,0,113,113,128,107,100,110],
[110,99,97,0,85,105,97,89,108],
[123,121,97,125,0,116,118,109,123],
[104,110,82,105,94,0,92,91,100],
[116,104,103,113,92,118,0,88,99],
[132,118,110,121,101,119,122,0,115],
[117,99,100,102,87,110,111,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,72,71,87,85,85,98,84],
[101,0,100,113,100,75,73,124,124],
[138,110,0,111,136,85,109,112,112],
[139,97,99,0,98,98,98,99,134],
[123,110,74,112,0,124,86,124,125],
[125,135,125,112,86,0,135,147,148],
[125,137,101,112,124,75,0,159,123],
[112,86,98,111,86,63,51,0,96],
[126,86,98,76,85,62,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,127,142,104,119,94,129,93],
[103,0,119,131,131,121,126,137,134],
[83,91,0,111,81,100,85,106,94],
[68,79,99,0,91,106,84,109,99],
[106,79,129,119,0,83,116,127,112],
[91,89,110,104,127,0,114,113,107],
[116,84,125,126,94,96,0,121,141],
[81,73,104,101,83,97,89,0,99],
[117,76,116,111,98,103,69,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,96,111,90,101,113,129],
[115,0,104,113,108,109,110,114,125],
[119,106,0,101,104,104,111,112,113],
[114,97,109,0,111,96,111,115,116],
[99,102,106,99,0,97,95,107,125],
[120,101,106,114,113,0,116,118,122],
[109,100,99,99,115,94,0,121,123],
[97,96,98,95,103,92,89,0,118],
[81,85,97,94,85,88,87,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,108,109,101,100,108,87,106],
[91,0,97,102,95,91,93,90,96],
[102,113,0,98,102,103,109,101,95],
[101,108,112,0,101,101,102,93,93],
[109,115,108,109,0,100,96,98,102],
[110,119,107,109,110,0,110,101,107],
[102,117,101,108,114,100,0,94,104],
[123,120,109,117,112,109,116,0,100],
[104,114,115,117,108,103,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,111,117,105,95,102,111,100],
[90,0,110,102,98,91,98,100,93],
[99,100,0,104,96,86,104,101,97],
[93,108,106,0,103,92,99,101,95],
[105,112,114,107,0,97,106,113,102],
[115,119,124,118,113,0,108,117,99],
[108,112,106,111,104,102,0,107,102],
[99,110,109,109,97,93,103,0,107],
[110,117,113,115,108,111,108,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,122,113,104,96,118,106,105],
[118,0,116,97,112,110,112,120,116],
[88,94,0,82,98,96,99,104,85],
[97,113,128,0,119,110,115,103,109],
[106,98,112,91,0,111,93,111,113],
[114,100,114,100,99,0,102,113,107],
[92,98,111,95,117,108,0,117,105],
[104,90,106,107,99,97,93,0,93],
[105,94,125,101,97,103,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,113,101,107,111,104,91,99],
[100,0,102,96,92,101,95,89,106],
[97,108,0,97,98,111,93,94,107],
[109,114,113,0,110,122,103,108,104],
[103,118,112,100,0,121,99,98,109],
[99,109,99,88,89,0,86,87,98],
[106,115,117,107,111,124,0,105,115],
[119,121,116,102,112,123,105,0,103],
[111,104,103,106,101,112,95,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,26,78,104,53,81,131,106],
[134,0,80,134,107,134,134,160,107],
[184,130,0,159,131,106,108,105,106],
[132,76,51,0,104,106,81,106,106],
[106,103,79,106,0,53,107,132,104],
[157,76,104,104,157,0,132,159,131],
[129,76,102,129,103,78,0,130,102],
[79,50,105,104,78,51,80,0,132],
[104,103,104,104,106,79,108,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,107,96,116,119,112,106,96],
[103,0,104,109,107,118,121,107,98],
[103,106,0,109,112,126,108,114,108],
[114,101,101,0,97,112,103,115,93],
[94,103,98,113,0,115,113,104,105],
[91,92,84,98,95,0,94,94,74],
[98,89,102,107,97,116,0,109,114],
[104,103,96,95,106,116,101,0,85],
[114,112,102,117,105,136,96,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,54,159,105,104,102,52,79,105],
[156,0,184,185,129,156,156,105,157],
[51,26,0,79,52,51,51,54,105],
[105,25,131,0,78,102,78,105,78],
[106,81,158,132,0,78,78,80,132],
[108,54,159,108,132,0,78,54,132],
[158,54,159,132,132,132,0,108,105],
[131,105,156,105,130,156,102,0,130],
[105,53,105,132,78,78,105,80,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,116,118,94,105,111,110,97],
[112,0,104,102,90,108,104,96,100],
[94,106,0,111,86,98,102,109,96],
[92,108,99,0,84,99,109,93,89],
[116,120,124,126,0,104,129,116,123],
[105,102,112,111,106,0,106,102,103],
[99,106,108,101,81,104,0,94,92],
[100,114,101,117,94,108,116,0,112],
[113,110,114,121,87,107,118,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,108,109,113,119,104,96],
[111,0,95,108,110,120,104,90,98],
[99,115,0,97,115,114,109,111,115],
[102,102,113,0,98,115,109,97,117],
[101,100,95,112,0,107,94,107,110],
[97,90,96,95,103,0,104,102,109],
[91,106,101,101,116,106,0,110,105],
[106,120,99,113,103,108,100,0,115],
[114,112,95,93,100,101,105,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,100,93,116,110,99,104],
[101,0,98,106,101,103,94,89,102],
[110,112,0,117,109,112,108,100,108],
[110,104,93,0,90,95,102,89,111],
[117,109,101,120,0,107,109,106,115],
[94,107,98,115,103,0,100,108,111],
[100,116,102,108,101,110,0,94,122],
[111,121,110,121,104,102,116,0,128],
[106,108,102,99,95,99,88,82,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,103,112,111,100,103,103],
[108,0,103,108,111,107,98,102,107],
[100,107,0,96,114,110,93,115,107],
[107,102,114,0,109,116,103,103,113],
[98,99,96,101,0,100,92,94,96],
[99,103,100,94,110,0,95,97,97],
[110,112,117,107,118,115,0,105,105],
[107,108,95,107,116,113,105,0,103],
[107,103,103,97,114,113,105,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,102,111,106,89,95,112,116],
[107,0,105,97,93,84,101,109,103],
[108,105,0,130,109,111,112,120,111],
[99,113,80,0,93,98,89,110,106],
[104,117,101,117,0,109,118,109,105],
[121,126,99,112,101,0,106,116,104],
[115,109,98,121,92,104,0,102,99],
[98,101,90,100,101,94,108,0,97],
[94,107,99,104,105,106,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,135,115,125,105,121,121],
[98,0,96,104,106,127,102,97,96],
[105,114,0,120,125,117,106,131,111],
[75,106,90,0,88,126,95,111,101],
[95,104,85,122,0,118,99,117,101],
[85,83,93,84,92,0,78,101,83],
[105,108,104,115,111,132,0,115,107],
[89,113,79,99,93,109,95,0,111],
[89,114,99,109,109,127,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,100,102,98,111,97,116],
[97,0,109,103,106,101,119,104,97],
[96,101,0,102,107,104,116,101,104],
[110,107,108,0,104,103,120,111,116],
[108,104,103,106,0,100,119,98,103],
[112,109,106,107,110,0,114,98,105],
[99,91,94,90,91,96,0,89,99],
[113,106,109,99,112,112,121,0,112],
[94,113,106,94,107,105,111,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,106,107,117,106,120,109],
[106,0,95,106,105,110,113,106,123],
[109,115,0,100,106,106,104,115,122],
[104,104,110,0,108,106,105,126,122],
[103,105,104,102,0,92,111,126,119],
[93,100,104,104,118,0,96,121,109],
[104,97,106,105,99,114,0,122,101],
[90,104,95,84,84,89,88,0,94],
[101,87,88,88,91,101,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,93,106,111,117,116,97],
[96,0,99,90,101,89,102,112,91],
[107,111,0,101,105,111,112,120,107],
[117,120,109,0,114,111,123,104,107],
[104,109,105,96,0,103,120,117,104],
[99,121,99,99,107,0,120,114,106],
[93,108,98,87,90,90,0,103,93],
[94,98,90,106,93,96,107,0,83],
[113,119,103,103,106,104,117,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,84,105,81,104,119,72,98],
[82,0,91,88,71,98,80,55,90],
[126,119,0,100,82,130,105,109,112],
[105,122,110,0,91,130,85,83,85],
[129,139,128,119,0,116,100,92,95],
[106,112,80,80,94,0,60,86,88],
[91,130,105,125,110,150,0,115,111],
[138,155,101,127,118,124,95,0,117],
[112,120,98,125,115,122,99,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,114,111,110,104,96,87,113],
[117,0,115,112,117,121,105,96,124],
[96,95,0,108,108,98,88,96,108],
[99,98,102,0,114,117,92,97,120],
[100,93,102,96,0,104,93,92,112],
[106,89,112,93,106,0,93,91,112],
[114,105,122,118,117,117,0,112,132],
[123,114,114,113,118,119,98,0,126],
[97,86,102,90,98,98,78,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,93,89,104,88,99,108,111],
[112,0,99,110,107,99,111,110,116],
[117,111,0,114,115,116,104,117,117],
[121,100,96,0,111,104,103,107,108],
[106,103,95,99,0,96,106,106,99],
[122,111,94,106,114,0,94,107,113],
[111,99,106,107,104,116,0,109,106],
[102,100,93,103,104,103,101,0,112],
[99,94,93,102,111,97,104,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,100,81,76,87,98,94,95],
[100,0,111,94,100,89,113,116,102],
[110,99,0,94,89,85,116,103,87],
[129,116,116,0,97,104,109,107,116],
[134,110,121,113,0,95,130,111,101],
[123,121,125,106,115,0,121,110,97],
[112,97,94,101,80,89,0,90,98],
[116,94,107,103,99,100,120,0,99],
[115,108,123,94,109,113,112,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,109,121,104,124,107,113,117],
[89,0,104,99,100,99,91,113,104],
[101,106,0,107,109,109,103,116,106],
[89,111,103,0,97,102,93,111,108],
[106,110,101,113,0,117,99,120,103],
[86,111,101,108,93,0,89,105,112],
[103,119,107,117,111,121,0,115,107],
[97,97,94,99,90,105,95,0,103],
[93,106,104,102,107,98,103,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,94,104,103,94,103,98,106],
[114,0,102,107,107,111,116,97,112],
[116,108,0,111,117,111,120,105,108],
[106,103,99,0,112,98,113,98,104],
[107,103,93,98,0,106,108,98,101],
[116,99,99,112,104,0,109,100,108],
[107,94,90,97,102,101,0,92,89],
[112,113,105,112,112,110,118,0,114],
[104,98,102,106,109,102,121,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,106,101,105,103,95,98,109],
[91,0,103,106,103,93,91,98,108],
[104,107,0,116,103,104,102,101,104],
[109,104,94,0,94,95,104,98,104],
[105,107,107,116,0,106,97,107,92],
[107,117,106,115,104,0,102,100,95],
[115,119,108,106,113,108,0,105,119],
[112,112,109,112,103,110,105,0,96],
[101,102,106,106,118,115,91,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,107,110,101,96,101,105,94],
[109,0,106,106,104,102,101,99,112],
[103,104,0,108,115,97,105,103,101],
[100,104,102,0,102,102,101,96,95],
[109,106,95,108,0,101,103,102,93],
[114,108,113,108,109,0,105,99,107],
[109,109,105,109,107,105,0,96,112],
[105,111,107,114,108,111,114,0,111],
[116,98,109,115,117,103,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,117,106,115,104,102,112],
[96,0,122,122,124,111,105,105,100],
[108,88,0,121,110,102,89,88,98],
[93,88,89,0,101,85,77,69,70],
[104,86,100,109,0,87,92,83,78],
[95,99,108,125,123,0,116,90,93],
[106,105,121,133,118,94,0,99,103],
[108,105,122,141,127,120,111,0,98],
[98,110,112,140,132,117,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,96,95,110,101,96,97],
[113,0,114,105,104,121,114,115,119],
[104,96,0,92,80,105,98,94,103],
[114,105,118,0,113,112,113,105,113],
[115,106,130,97,0,107,111,99,111],
[100,89,105,98,103,0,109,99,102],
[109,96,112,97,99,101,0,97,108],
[114,95,116,105,111,111,113,0,109],
[113,91,107,97,99,108,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,92,104,107,110,104,122],
[105,0,112,100,110,107,97,112,112],
[112,98,0,94,104,108,102,124,107],
[118,110,116,0,102,109,106,120,127],
[106,100,106,108,0,100,101,121,118],
[103,103,102,101,110,0,104,103,125],
[100,113,108,104,109,106,0,124,120],
[106,98,86,90,89,107,86,0,101],
[88,98,103,83,92,85,90,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,124,103,108,112,111,107],
[104,0,99,130,110,108,119,115,110],
[102,111,0,122,105,111,108,111,111],
[86,80,88,0,99,105,92,100,96],
[107,100,105,111,0,103,98,110,115],
[102,102,99,105,107,0,100,106,106],
[98,91,102,118,112,110,0,114,102],
[99,95,99,110,100,104,96,0,94],
[103,100,99,114,95,104,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,91,97,120,88,86,97,105],
[124,0,99,104,114,107,96,109,117],
[119,111,0,113,122,120,105,114,112],
[113,106,97,0,126,116,100,117,121],
[90,96,88,84,0,86,87,91,85],
[122,103,90,94,124,0,86,106,113],
[124,114,105,110,123,124,0,112,119],
[113,101,96,93,119,104,98,0,115],
[105,93,98,89,125,97,91,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,105,82,120,95,99,118,113],
[103,0,97,109,141,125,118,130,120],
[105,113,0,109,140,114,110,133,136],
[128,101,101,0,141,107,110,141,123],
[90,69,70,69,0,83,93,108,90],
[115,85,96,103,127,0,97,129,123],
[111,92,100,100,117,113,0,145,119],
[92,80,77,69,102,81,65,0,66],
[97,90,74,87,120,87,91,144,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,104,104,158,158,104,104,104],
[52,0,156,105,52,53,156,103,105],
[106,54,0,105,54,54,52,0,53],
[106,105,105,0,105,105,51,105,105],
[52,158,156,105,0,53,156,103,104],
[52,157,156,105,157,0,103,103,156],
[106,54,158,159,54,107,0,54,107],
[106,107,210,105,107,107,156,0,53],
[106,105,157,105,106,54,103,157,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,94,93,85,97,97,97],
[117,0,116,102,97,96,104,108,109],
[110,94,0,106,90,81,102,101,109],
[116,108,104,0,99,88,97,107,107],
[117,113,120,111,0,105,108,116,125],
[125,114,129,122,105,0,110,112,121],
[113,106,108,113,102,100,0,108,117],
[113,102,109,103,94,98,102,0,109],
[113,101,101,103,85,89,93,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,110,113,113,105,112,115],
[100,0,107,102,98,115,93,106,106],
[92,103,0,108,105,127,100,116,118],
[100,108,102,0,93,123,91,119,113],
[97,112,105,117,0,113,109,120,114],
[97,95,83,87,97,0,94,87,108],
[105,117,110,119,101,116,0,121,121],
[98,104,94,91,90,123,89,0,105],
[95,104,92,97,96,102,89,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,74,110,109,103,110,82,101],
[119,0,101,140,134,124,130,104,113],
[136,109,0,89,98,118,108,94,133],
[100,70,121,0,108,138,107,94,107],
[101,76,112,102,0,123,80,99,91],
[107,86,92,72,87,0,88,90,104],
[100,80,102,103,130,122,0,105,105],
[128,106,116,116,111,120,105,0,96],
[109,97,77,103,119,106,105,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,96,111,97,87,111,84],
[112,0,107,85,116,109,101,120,99],
[104,103,0,98,113,105,98,115,90],
[114,125,112,0,126,114,114,119,101],
[99,94,97,84,0,92,90,91,89],
[113,101,105,96,118,0,101,122,91],
[123,109,112,96,120,109,0,127,117],
[99,90,95,91,119,88,83,0,94],
[126,111,120,109,121,119,93,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,99,108,105,104,110,107],
[105,0,104,96,107,104,93,105,102],
[104,106,0,94,99,102,78,98,98],
[111,114,116,0,109,102,108,110,109],
[102,103,111,101,0,101,101,101,100],
[105,106,108,108,109,0,109,113,98],
[106,117,132,102,109,101,0,100,112],
[100,105,112,100,109,97,110,0,104],
[103,108,112,101,110,112,98,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,93,61,79,107,60,111,102],
[100,0,96,96,91,118,85,95,105],
[117,114,0,93,101,127,71,122,112],
[149,114,117,0,91,110,106,114,142],
[131,119,109,119,0,111,78,64,138],
[103,92,83,100,99,0,39,90,110],
[150,125,139,104,132,171,0,135,146],
[99,115,88,96,146,120,75,0,105],
[108,105,98,68,72,100,64,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,106,121,100,110,102,123],
[99,0,103,123,113,103,108,101,121],
[101,107,0,103,116,104,83,100,102],
[104,87,107,0,111,96,101,95,105],
[89,97,94,99,0,81,91,83,103],
[110,107,106,114,129,0,97,104,130],
[100,102,127,109,119,113,0,110,116],
[108,109,110,115,127,106,100,0,123],
[87,89,108,105,107,80,94,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,102,105,100,107,112,102],
[101,0,103,105,103,104,91,119,96],
[91,107,0,102,102,104,99,113,97],
[108,105,108,0,103,102,111,119,106],
[105,107,108,107,0,103,105,120,101],
[110,106,106,108,107,0,111,113,105],
[103,119,111,99,105,99,0,120,112],
[98,91,97,91,90,97,90,0,89],
[108,114,113,104,109,105,98,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,106,76,85,90,108,106,105],
[87,0,96,83,86,78,94,108,101],
[104,114,0,89,97,108,82,111,113],
[134,127,121,0,105,107,111,128,119],
[125,124,113,105,0,111,95,110,128],
[120,132,102,103,99,0,100,125,111],
[102,116,128,99,115,110,0,123,115],
[104,102,99,82,100,85,87,0,117],
[105,109,97,91,82,99,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,94,112,114,103,109,117,96],
[97,0,101,100,109,103,92,102,101],
[116,109,0,123,113,109,96,108,108],
[98,110,87,0,105,108,89,102,104],
[96,101,97,105,0,103,102,88,99],
[107,107,101,102,107,0,108,117,103],
[101,118,114,121,108,102,0,119,109],
[93,108,102,108,122,93,91,0,108],
[114,109,102,106,111,107,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,116,104,108,111,99,105,99],
[113,0,119,109,106,109,117,110,103],
[94,91,0,99,102,111,104,110,87],
[106,101,111,0,105,108,99,104,85],
[102,104,108,105,0,106,98,100,102],
[99,101,99,102,104,0,100,91,99],
[111,93,106,111,112,110,0,107,89],
[105,100,100,106,110,119,103,0,108],
[111,107,123,125,108,111,121,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,120,99,102,102,104,115,110],
[108,0,139,121,103,123,110,124,115],
[90,71,0,104,87,94,106,106,110],
[111,89,106,0,92,113,104,102,107],
[108,107,123,118,0,124,112,99,133],
[108,87,116,97,86,0,97,85,119],
[106,100,104,106,98,113,0,104,102],
[95,86,104,108,111,125,106,0,97],
[100,95,100,103,77,91,108,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,103,108,108,118,111,105,108],
[108,0,109,104,99,109,110,97,106],
[107,101,0,95,96,98,112,101,107],
[102,106,115,0,112,103,119,110,112],
[102,111,114,98,0,102,105,97,99],
[92,101,112,107,108,0,104,98,105],
[99,100,98,91,105,106,0,100,100],
[105,113,109,100,113,112,110,0,99],
[102,104,103,98,111,105,110,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,119,111,121,116,90,91],
[97,0,99,90,87,105,98,90,111],
[109,111,0,104,114,118,100,97,105],
[91,120,106,0,93,106,108,111,101],
[99,123,96,117,0,114,100,113,111],
[89,105,92,104,96,0,101,90,86],
[94,112,110,102,110,109,0,108,108],
[120,120,113,99,97,120,102,0,111],
[119,99,105,109,99,124,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,118,98,97,115,99,95,76],
[118,0,118,98,106,107,95,109,97],
[92,92,0,85,92,108,85,106,83],
[112,112,125,0,114,122,112,114,104],
[113,104,118,96,0,121,103,108,104],
[95,103,102,88,89,0,94,89,92],
[111,115,125,98,107,116,0,126,108],
[115,101,104,96,102,121,84,0,97],
[134,113,127,106,106,118,102,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,112,106,106,110,100,103],
[99,0,96,100,97,93,117,97,107],
[107,114,0,100,116,91,106,115,93],
[98,110,110,0,102,104,101,100,101],
[104,113,94,108,0,106,111,95,111],
[104,117,119,106,104,0,106,104,110],
[100,93,104,109,99,104,0,101,102],
[110,113,95,110,115,106,109,0,100],
[107,103,117,109,99,100,108,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,106,129,106,109,154,105,107],
[120,0,104,106,129,111,165,106,106],
[104,106,0,98,105,100,146,107,91],
[81,104,112,0,98,116,114,99,72],
[104,81,105,112,0,118,155,113,89],
[101,99,110,94,92,0,134,83,101],
[56,45,64,96,55,76,0,68,64],
[105,104,103,111,97,127,142,0,79],
[103,104,119,138,121,109,146,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,104,109,94,102,91,89,86],
[127,0,115,106,106,107,113,101,108],
[106,95,0,110,98,94,98,90,102],
[101,104,100,0,94,99,101,98,92],
[116,104,112,116,0,106,102,113,98],
[108,103,116,111,104,0,102,105,109],
[119,97,112,109,108,108,0,113,103],
[121,109,120,112,97,105,97,0,98],
[124,102,108,118,112,101,107,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,100,101,97,96,104,100,99],
[112,0,107,119,93,104,107,91,105],
[110,103,0,113,92,98,103,100,113],
[109,91,97,0,92,103,96,98,110],
[113,117,118,118,0,117,118,98,108],
[114,106,112,107,93,0,115,113,117],
[106,103,107,114,92,95,0,96,97],
[110,119,110,112,112,97,114,0,110],
[111,105,97,100,102,93,113,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,95,104,99,89,119,100,114],
[97,0,94,100,98,86,124,102,88],
[115,116,0,106,109,100,123,91,96],
[106,110,104,0,105,101,123,112,107],
[111,112,101,105,0,101,118,114,104],
[121,124,110,109,109,0,130,120,96],
[91,86,87,87,92,80,0,84,89],
[110,108,119,98,96,90,126,0,112],
[96,122,114,103,106,114,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,135,129,126,85,119,109,124],
[102,0,111,93,103,93,114,110,121],
[75,99,0,88,68,65,77,77,93],
[81,117,122,0,93,66,77,68,111],
[84,107,142,117,0,97,100,103,115],
[125,117,145,144,113,0,116,104,142],
[91,96,133,133,110,94,0,122,138],
[101,100,133,142,107,106,88,0,134],
[86,89,117,99,95,68,72,76,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,102,118,97,99,110,108],
[113,0,104,111,105,107,105,106,99],
[116,106,0,112,116,112,114,111,100],
[108,99,98,0,105,102,109,115,107],
[92,105,94,105,0,96,102,103,101],
[113,103,98,108,114,0,113,115,107],
[111,105,96,101,108,97,0,109,112],
[100,104,99,95,107,95,101,0,110],
[102,111,110,103,109,103,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,123,102,111,100,88,98,91],
[117,0,120,99,113,124,94,109,108],
[87,90,0,94,113,99,103,100,110],
[108,111,116,0,110,113,105,114,108],
[99,97,97,100,0,99,91,91,104],
[110,86,111,97,111,0,97,109,103],
[122,116,107,105,119,113,0,119,103],
[112,101,110,96,119,101,91,0,96],
[119,102,100,102,106,107,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,95,105,101,100,94,98,89],
[111,0,98,105,111,95,98,103,99],
[115,112,0,117,98,105,108,107,108],
[105,105,93,0,100,93,98,106,93],
[109,99,112,110,0,95,108,91,96],
[110,115,105,117,115,0,127,115,111],
[116,112,102,112,102,83,0,103,93],
[112,107,103,104,119,95,107,0,98],
[121,111,102,117,114,99,117,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,81,88,100,105,89,90,83],
[108,0,92,97,92,108,92,101,84],
[129,118,0,107,110,121,112,114,101],
[122,113,103,0,96,139,118,113,97],
[110,118,100,114,0,120,111,101,92],
[105,102,89,71,90,0,97,103,82],
[121,118,98,92,99,113,0,114,106],
[120,109,96,97,109,107,96,0,103],
[127,126,109,113,118,128,104,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,116,99,125,124,109,98,77],
[99,0,112,98,114,111,80,84,105],
[94,98,0,76,71,107,70,70,83],
[111,112,134,0,106,140,94,104,110],
[85,96,139,104,0,101,90,91,85],
[86,99,103,70,109,0,82,91,80],
[101,130,140,116,120,128,0,119,108],
[112,126,140,106,119,119,91,0,87],
[133,105,127,100,125,130,102,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,106,97,101,103,99,100],
[113,0,110,116,108,105,114,115,110],
[116,100,0,100,106,106,100,109,113],
[104,94,110,0,113,97,112,110,112],
[113,102,104,97,0,103,112,114,110],
[109,105,104,113,107,0,93,107,104],
[107,96,110,98,98,117,0,115,109],
[111,95,101,100,96,103,95,0,99],
[110,100,97,98,100,106,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,135,126,114,118,119,135,105,119],
[75,0,103,91,100,104,106,94,97],
[84,107,0,93,106,113,115,102,103],
[96,119,117,0,126,103,124,97,116],
[92,110,104,84,0,87,127,100,97],
[91,106,97,107,123,0,107,92,91],
[75,104,95,86,83,103,0,75,81],
[105,116,108,113,110,118,135,0,106],
[91,113,107,94,113,119,129,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,106,101,111,115,123,85],
[100,0,99,100,90,91,80,103,105],
[115,111,0,98,101,106,104,115,127],
[104,110,112,0,106,94,95,112,104],
[109,120,109,104,0,111,124,109,109],
[99,119,104,116,99,0,104,101,119],
[95,130,106,115,86,106,0,116,109],
[87,107,95,98,101,109,94,0,85],
[125,105,83,106,101,91,101,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,134,115,115,102,113,123,128,116],
[76,0,93,106,104,91,92,101,104],
[95,117,0,118,105,109,109,124,122],
[95,104,92,0,113,106,110,116,110],
[108,106,105,97,0,103,107,115,107],
[97,119,101,104,107,0,111,111,125],
[87,118,101,100,103,99,0,103,122],
[82,109,86,94,95,99,107,0,111],
[94,106,88,100,103,85,88,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,115,93,103,106,98,111,109],
[98,0,101,99,110,103,100,102,107],
[95,109,0,92,104,100,100,105,97],
[117,111,118,0,115,103,110,114,103],
[107,100,106,95,0,95,98,114,84],
[104,107,110,107,115,0,104,109,100],
[112,110,110,100,112,106,0,119,101],
[99,108,105,96,96,101,91,0,91],
[101,103,113,107,126,110,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,111,112,102,87,125,102],
[112,0,99,97,113,111,100,109,97],
[114,111,0,108,113,111,94,115,105],
[99,113,102,0,95,100,86,111,95],
[98,97,97,115,0,101,97,108,100],
[108,99,99,110,109,0,86,104,95],
[123,110,116,124,113,124,0,120,100],
[85,101,95,99,102,106,90,0,107],
[108,113,105,115,110,115,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,67,83,134,148,93,100],
[117,0,83,96,102,117,133,122,113],
[110,127,0,72,94,94,127,85,86],
[143,114,138,0,84,125,155,114,110],
[127,108,116,126,0,124,146,109,99],
[76,93,116,85,86,0,132,88,99],
[62,77,83,55,64,78,0,95,69],
[117,88,125,96,101,122,115,0,111],
[110,97,124,100,111,111,141,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,111,90,108,133,114,87,96],
[114,0,100,75,102,111,101,86,98],
[99,110,0,95,116,106,101,94,93],
[120,135,115,0,113,114,102,117,81],
[102,108,94,97,0,103,91,79,88],
[77,99,104,96,107,0,104,91,91],
[96,109,109,108,119,106,0,96,99],
[123,124,116,93,131,119,114,0,107],
[114,112,117,129,122,119,111,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,102,108,110,101,113,102,108],
[114,0,107,117,115,108,118,98,115],
[108,103,0,106,109,109,103,100,108],
[102,93,104,0,103,97,97,91,106],
[100,95,101,107,0,110,104,94,100],
[109,102,101,113,100,0,115,109,113],
[97,92,107,113,106,95,0,97,104],
[108,112,110,119,116,101,113,0,103],
[102,95,102,104,110,97,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,115,101,126,120,114,107,117],
[82,0,88,87,100,114,95,89,102],
[95,122,0,105,115,132,108,110,120],
[109,123,105,0,124,121,109,106,112],
[84,110,95,86,0,111,103,86,86],
[90,96,78,89,99,0,106,91,103],
[96,115,102,101,107,104,0,80,103],
[103,121,100,104,124,119,130,0,112],
[93,108,90,98,124,107,107,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,102,112,97,109,102,94,102],
[102,0,108,100,97,102,103,99,107],
[108,102,0,106,99,115,108,111,103],
[98,110,104,0,95,105,108,104,98],
[113,113,111,115,0,119,124,115,102],
[101,108,95,105,91,0,107,104,108],
[108,107,102,102,86,103,0,104,97],
[116,111,99,106,95,106,106,0,103],
[108,103,107,112,108,102,113,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,106,98,112,97,96,85,87],
[106,0,108,102,104,101,89,100,84],
[104,102,0,97,107,101,103,95,85],
[112,108,113,0,110,114,114,101,108],
[98,106,103,100,0,105,105,93,91],
[113,109,109,96,105,0,96,92,76],
[114,121,107,96,105,114,0,94,86],
[125,110,115,109,117,118,116,0,99],
[123,126,125,102,119,134,124,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,69,98,100,88,99,100,82,87],
[141,0,121,136,120,138,117,88,105],
[112,89,0,96,99,116,109,93,105],
[110,74,114,0,91,105,109,82,93],
[122,90,111,119,0,121,122,94,101],
[111,72,94,105,89,0,93,88,86],
[110,93,101,101,88,117,0,93,110],
[128,122,117,128,116,122,117,0,99],
[123,105,105,117,109,124,100,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,88,101,98,95,81,101,88],
[117,0,114,103,105,101,105,117,106],
[122,96,0,115,105,109,109,126,104],
[109,107,95,0,95,95,106,112,96],
[112,105,105,115,0,90,100,116,98],
[115,109,101,115,120,0,99,117,108],
[129,105,101,104,110,111,0,118,104],
[109,93,84,98,94,93,92,0,94],
[122,104,106,114,112,102,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,103,102,98,113,112,113],
[113,0,114,74,97,102,117,83,113],
[99,96,0,89,91,99,103,102,125],
[107,136,121,0,120,114,130,104,133],
[108,113,119,90,0,107,109,113,115],
[112,108,111,96,103,0,115,99,119],
[97,93,107,80,101,95,0,103,113],
[98,127,108,106,97,111,107,0,107],
[97,97,85,77,95,91,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,108,134,113,134,112,101],
[92,0,115,83,119,124,120,104,102],
[105,95,0,94,115,106,103,75,85],
[102,127,116,0,128,129,114,114,127],
[76,91,95,82,0,94,81,62,84],
[97,86,104,81,116,0,99,90,95],
[76,90,107,96,129,111,0,98,89],
[98,106,135,96,148,120,112,0,120],
[109,108,125,83,126,115,121,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,79,73,83,117,77,114,48],
[80,0,83,81,82,104,92,80,83],
[131,127,0,93,95,103,78,139,100],
[137,129,117,0,105,102,125,150,104],
[127,128,115,105,0,129,91,103,86],
[93,106,107,108,81,0,104,103,72],
[133,118,132,85,119,106,0,118,109],
[96,130,71,60,107,107,92,0,84],
[162,127,110,106,124,138,101,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,103,101,111,94,109,120,116],
[98,0,92,95,111,89,101,89,101],
[107,118,0,112,119,113,103,117,127],
[109,115,98,0,132,115,108,135,121],
[99,99,91,78,0,100,108,107,125],
[116,121,97,95,110,0,107,104,110],
[101,109,107,102,102,103,0,119,104],
[90,121,93,75,103,106,91,0,107],
[94,109,83,89,85,100,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,94,105,95,111,108,96,82],
[96,0,85,95,88,103,99,100,88],
[116,125,0,103,112,126,118,108,116],
[105,115,107,0,114,120,118,107,97],
[115,122,98,96,0,125,119,106,101],
[99,107,84,90,85,0,111,84,96],
[102,111,92,92,91,99,0,87,83],
[114,110,102,103,104,126,123,0,119],
[128,122,94,113,109,114,127,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,101,102,107,104,112,107],
[105,0,110,104,96,102,89,113,102],
[103,100,0,96,97,94,100,100,89],
[109,106,114,0,111,104,98,122,101],
[108,114,113,99,0,105,99,106,99],
[103,108,116,106,105,0,102,109,95],
[106,121,110,112,111,108,0,116,103],
[98,97,110,88,104,101,94,0,96],
[103,108,121,109,111,115,107,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,112,117,112,108,115,103,113],
[93,0,105,101,93,88,104,105,114],
[98,105,0,108,96,98,101,107,103],
[93,109,102,0,93,99,106,104,107],
[98,117,114,117,0,110,110,107,115],
[102,122,112,111,100,0,120,114,112],
[95,106,109,104,100,90,0,98,111],
[107,105,103,106,103,96,112,0,107],
[97,96,107,103,95,98,99,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,107,108,99,104,108,103,111],
[93,0,103,96,106,90,102,104,101],
[103,107,0,106,86,93,105,85,106],
[102,114,104,0,112,100,111,111,101],
[111,104,124,98,0,92,106,106,107],
[106,120,117,110,118,0,110,98,105],
[102,108,105,99,104,100,0,100,104],
[107,106,125,99,104,112,110,0,105],
[99,109,104,109,103,105,106,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,93,98,110,126,111,139],
[108,0,116,91,105,124,78,115,133],
[101,94,0,101,89,137,117,127,137],
[117,119,109,0,79,118,105,144,124],
[112,105,121,131,0,121,117,137,128],
[100,86,73,92,89,0,108,126,110],
[84,132,93,105,93,102,0,111,140],
[99,95,83,66,73,84,99,0,135],
[71,77,73,86,82,100,70,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,96,106,113,104,107,106,110],
[92,0,85,99,97,102,92,101,92],
[114,125,0,103,105,107,112,123,103],
[104,111,107,0,104,111,112,106,98],
[97,113,105,106,0,96,110,102,99],
[106,108,103,99,114,0,100,111,105],
[103,118,98,98,100,110,0,103,104],
[104,109,87,104,108,99,107,0,109],
[100,118,107,112,111,105,106,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,104,104,119,104,105,107],
[109,0,120,104,111,115,115,116,124],
[106,90,0,93,91,96,97,95,97],
[106,106,117,0,107,106,104,106,106],
[106,99,119,103,0,104,99,104,117],
[91,95,114,104,106,0,99,106,110],
[106,95,113,106,111,111,0,98,114],
[105,94,115,104,106,104,112,0,102],
[103,86,113,104,93,100,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,109,106,139,139,97,117,120],
[78,0,70,79,91,96,76,86,69],
[101,140,0,111,114,127,124,136,97],
[104,131,99,0,121,99,111,108,101],
[71,119,96,89,0,101,89,110,108],
[71,114,83,111,109,0,105,112,92],
[113,134,86,99,121,105,0,120,96],
[93,124,74,102,100,98,90,0,77],
[90,141,113,109,102,118,114,133,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,113,111,101,100,106,105,115],
[105,0,111,107,105,94,96,104,125],
[97,99,0,119,106,103,99,106,108],
[99,103,91,0,94,94,111,95,119],
[109,105,104,116,0,107,96,109,107],
[110,116,107,116,103,0,109,107,118],
[104,114,111,99,114,101,0,105,102],
[105,106,104,115,101,103,105,0,117],
[95,85,102,91,103,92,108,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,114,99,115,96,112,119,107],
[112,0,118,92,105,106,118,114,107],
[96,92,0,86,79,93,109,108,104],
[111,118,124,0,124,94,110,130,105],
[95,105,131,86,0,93,112,131,100],
[114,104,117,116,117,0,107,126,118],
[98,92,101,100,98,103,0,119,104],
[91,96,102,80,79,84,91,0,91],
[103,103,106,105,110,92,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,115,94,100,108,110,104],
[107,0,93,101,87,102,108,102,90],
[112,117,0,112,100,105,111,108,109],
[95,109,98,0,86,96,114,108,91],
[116,123,110,124,0,111,130,119,105],
[110,108,105,114,99,0,116,122,107],
[102,102,99,96,80,94,0,107,102],
[100,108,102,102,91,88,103,0,104],
[106,120,101,119,105,103,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,122,96,131,109,111,124],
[94,0,108,110,99,134,103,112,126],
[103,102,0,115,120,128,108,124,116],
[88,100,95,0,112,114,110,115,122],
[114,111,90,98,0,107,90,112,116],
[79,76,82,96,103,0,96,102,110],
[101,107,102,100,120,114,0,117,123],
[99,98,86,95,98,108,93,0,106],
[86,84,94,88,94,100,87,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,109,112,127,108,94,119],
[94,0,87,83,106,113,105,77,81],
[100,123,0,106,114,121,117,93,90],
[101,127,104,0,114,105,119,111,106],
[98,104,96,96,0,113,97,87,89],
[83,97,89,105,97,0,70,62,72],
[102,105,93,91,113,140,0,74,90],
[116,133,117,99,123,148,136,0,97],
[91,129,120,104,121,138,120,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,88,103,85,77,103,111,94],
[124,0,102,101,97,119,111,111,119],
[122,108,0,119,99,95,84,96,111],
[107,109,91,0,101,121,119,111,106],
[125,113,111,109,0,105,120,98,102],
[133,91,115,89,105,0,113,99,104],
[107,99,126,91,90,97,0,112,102],
[99,99,114,99,112,111,98,0,96],
[116,91,99,104,108,106,108,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,92,108,107,91,95,105,84],
[104,0,83,109,118,98,91,98,123],
[118,127,0,121,121,107,108,105,108],
[102,101,89,0,98,105,86,107,123],
[103,92,89,112,0,113,96,104,117],
[119,112,103,105,97,0,83,112,117],
[115,119,102,124,114,127,0,120,117],
[105,112,105,103,106,98,90,0,103],
[126,87,102,87,93,93,93,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,98,108,87,141,114,96,90],
[104,0,98,84,88,111,96,108,90],
[112,112,0,121,110,119,122,141,103],
[102,126,89,0,88,107,105,125,84],
[123,122,100,122,0,123,95,117,109],
[69,99,91,103,87,0,92,112,78],
[96,114,88,105,115,118,0,136,103],
[114,102,69,85,93,98,74,0,88],
[120,120,107,126,101,132,107,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,81,146,167,126,146,167,122],
[130,0,62,127,128,127,127,148,83],
[129,148,0,149,170,85,127,148,103],
[64,83,61,0,87,106,127,127,103],
[43,82,40,123,0,85,84,105,102],
[84,83,125,104,125,0,105,105,145],
[64,83,83,83,126,105,0,106,125],
[43,62,62,83,105,105,104,0,104],
[88,127,107,107,108,65,85,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,107,96,101,120,89,88,92],
[112,0,114,122,88,112,107,104,111],
[103,96,0,90,106,98,88,90,90],
[114,88,120,0,83,114,105,107,107],
[109,122,104,127,0,109,102,103,110],
[90,98,112,96,101,0,86,79,92],
[121,103,122,105,108,124,0,107,117],
[122,106,120,103,107,131,103,0,107],
[118,99,120,103,100,118,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,112,105,109,93,89,103,108],
[114,0,129,117,117,103,108,112,121],
[98,81,0,103,112,93,101,98,100],
[105,93,107,0,126,101,110,94,108],
[101,93,98,84,0,91,90,96,110],
[117,107,117,109,119,0,103,120,119],
[121,102,109,100,120,107,0,115,108],
[107,98,112,116,114,90,95,0,115],
[102,89,110,102,100,91,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,104,101,98,109,103,94,113],
[95,0,101,90,104,104,109,93,111],
[106,109,0,98,109,114,109,105,112],
[109,120,112,0,102,113,106,99,113],
[112,106,101,108,0,115,106,96,111],
[101,106,96,97,95,0,110,94,100],
[107,101,101,104,104,100,0,94,104],
[116,117,105,111,114,116,116,0,121],
[97,99,98,97,99,110,106,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,87,99,94,99,102,93,90],
[125,0,97,111,107,93,111,110,105],
[123,113,0,110,114,108,105,107,119],
[111,99,100,0,110,99,94,101,106],
[116,103,96,100,0,93,106,95,95],
[111,117,102,111,117,0,103,91,107],
[108,99,105,116,104,107,0,110,102],
[117,100,103,109,115,119,100,0,102],
[120,105,91,104,115,103,108,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,127,92,116,102,100,96,109],
[103,0,117,96,116,105,105,99,111],
[83,93,0,97,105,93,95,91,92],
[118,114,113,0,116,108,108,105,101],
[94,94,105,94,0,99,85,89,96],
[108,105,117,102,111,0,100,102,102],
[110,105,115,102,125,110,0,118,110],
[114,111,119,105,121,108,92,0,114],
[101,99,118,109,114,108,100,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,106,96,95,97,101,101],
[114,0,120,128,120,117,96,110,101],
[111,90,0,107,109,107,100,98,100],
[104,82,103,0,96,102,88,98,92],
[114,90,101,114,0,108,108,106,90],
[115,93,103,108,102,0,94,95,91],
[113,114,110,122,102,116,0,107,110],
[109,100,112,112,104,115,103,0,104],
[109,109,110,118,120,119,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,97,85,87,98,83,113,98],
[97,0,104,102,80,94,100,110,107],
[113,106,0,108,91,102,106,116,101],
[125,108,102,0,117,107,108,129,108],
[123,130,119,93,0,94,105,120,105],
[112,116,108,103,116,0,100,115,116],
[127,110,104,102,105,110,0,121,113],
[97,100,94,81,90,95,89,0,96],
[112,103,109,102,105,94,97,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,116,163,91,162,115,139,93],
[24,0,93,47,69,70,69,47,71],
[94,117,0,117,94,140,118,140,70],
[47,163,93,0,70,139,92,93,93],
[119,141,116,140,0,139,93,116,116],
[48,140,70,71,71,0,93,70,93],
[95,141,92,118,117,117,0,94,71],
[71,163,70,117,94,140,116,0,116],
[117,139,140,117,94,117,139,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,117,105,110,87,117,106,95],
[112,0,111,120,115,112,88,97,108],
[93,99,0,117,121,101,101,98,109],
[105,90,93,0,116,80,104,102,99],
[100,95,89,94,0,76,89,92,85],
[123,98,109,130,134,0,123,131,111],
[93,122,109,106,121,87,0,111,113],
[104,113,112,108,118,79,99,0,104],
[115,102,101,111,125,99,97,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,102,115,98,108,104,101],
[108,0,108,111,118,110,114,108,103],
[105,102,0,108,103,100,113,104,102],
[108,99,102,0,105,102,106,91,97],
[95,92,107,105,0,103,102,98,93],
[112,100,110,108,107,0,113,104,110],
[102,96,97,104,108,97,0,101,101],
[106,102,106,119,112,106,109,0,100],
[109,107,108,113,117,100,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,119,110,83,64,108,108,108],
[120,0,96,110,102,104,120,118,129],
[91,114,0,109,81,92,129,120,101],
[100,100,101,0,118,92,118,103,91],
[127,108,129,92,0,120,112,98,108],
[146,106,118,118,90,0,142,108,110],
[102,90,81,92,98,68,0,85,83],
[102,92,90,107,112,102,125,0,91],
[102,81,109,119,102,100,127,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,104,111,116,106,111,109],
[99,0,112,112,110,115,112,113,95],
[98,98,0,111,104,114,106,104,100],
[106,98,99,0,111,110,104,104,100],
[99,100,106,99,0,111,107,104,101],
[94,95,96,100,99,0,102,101,99],
[104,98,104,106,103,108,0,95,102],
[99,97,106,106,106,109,115,0,103],
[101,115,110,110,109,111,108,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,89,94,106,113,106,102,101],
[108,0,88,83,94,99,98,98,103],
[121,122,0,101,118,103,113,104,114],
[116,127,109,0,111,111,117,95,105],
[104,116,92,99,0,110,106,96,108],
[97,111,107,99,100,0,116,109,104],
[104,112,97,93,104,94,0,106,101],
[108,112,106,115,114,101,104,0,100],
[109,107,96,105,102,106,109,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,100,103,100,112,102,94,102],
[106,0,102,100,98,114,99,99,113],
[110,108,0,108,109,125,90,97,112],
[107,110,102,0,103,112,106,91,114],
[110,112,101,107,0,128,113,100,126],
[98,96,85,98,82,0,95,87,103],
[108,111,120,104,97,115,0,106,108],
[116,111,113,119,110,123,104,0,124],
[108,97,98,96,84,107,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,104,101,103,103,105,108],
[113,0,97,110,97,108,108,106,115],
[103,113,0,110,107,118,114,110,104],
[106,100,100,0,104,101,107,100,107],
[109,113,103,106,0,112,106,105,107],
[107,102,92,109,98,0,100,109,106],
[107,102,96,103,104,110,0,107,109],
[105,104,100,110,105,101,103,0,108],
[102,95,106,103,103,104,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,107,117,106,124,100,100,107],
[98,0,105,93,101,97,88,89,96],
[103,105,0,116,95,103,105,98,103],
[93,117,94,0,103,108,96,97,100],
[104,109,115,107,0,110,106,106,113],
[86,113,107,102,100,0,91,106,106],
[110,122,105,114,104,119,0,107,106],
[110,121,112,113,104,104,103,0,107],
[103,114,107,110,97,104,104,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,88,91,96,93,104,108,102],
[119,0,100,115,105,113,117,115,125],
[122,110,0,118,104,103,129,122,118],
[119,95,92,0,101,89,115,111,113],
[114,105,106,109,0,111,116,111,100],
[117,97,107,121,99,0,127,125,114],
[106,93,81,95,94,83,0,105,90],
[102,95,88,99,99,85,105,0,94],
[108,85,92,97,110,96,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,101,97,102,100,109,110,108],
[115,0,102,103,92,106,98,98,99],
[109,108,0,109,106,113,101,115,110],
[113,107,101,0,104,99,108,105,111],
[108,118,104,106,0,115,110,108,110],
[110,104,97,111,95,0,106,97,101],
[101,112,109,102,100,104,0,109,108],
[100,112,95,105,102,113,101,0,102],
[102,111,100,99,100,109,102,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,76,81,49,67,75,93,43],
[107,0,114,93,80,70,114,90,95],
[134,96,0,89,72,91,105,90,96],
[129,117,121,0,96,97,121,73,92],
[161,130,138,114,0,104,107,94,101],
[143,140,119,113,106,0,95,120,127],
[135,96,105,89,103,115,0,88,90],
[117,120,120,137,116,90,122,0,116],
[167,115,114,118,109,83,120,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,103,98,117,115,99,107,103],
[99,0,101,94,103,106,94,99,104],
[107,109,0,107,109,127,92,106,105],
[112,116,103,0,106,107,121,119,119],
[93,107,101,104,0,108,106,100,113],
[95,104,83,103,102,0,89,94,95],
[111,116,118,89,104,121,0,105,120],
[103,111,104,91,110,116,105,0,108],
[107,106,105,91,97,115,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,107,98,101,111,105,108],
[110,0,105,103,95,95,107,106,108],
[101,105,0,101,99,90,107,98,101],
[103,107,109,0,95,103,104,109,106],
[112,115,111,115,0,98,116,100,119],
[109,115,120,107,112,0,112,96,117],
[99,103,103,106,94,98,0,93,106],
[105,104,112,101,110,114,117,0,108],
[102,102,109,104,91,93,104,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,94,112,105,110,117,105,96],
[122,0,99,124,102,121,123,126,106],
[116,111,0,124,103,116,107,126,102],
[98,86,86,0,92,102,103,116,90],
[105,108,107,118,0,112,122,124,112],
[100,89,94,108,98,0,104,107,94],
[93,87,103,107,88,106,0,107,102],
[105,84,84,94,86,103,103,0,94],
[114,104,108,120,98,116,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,146,103,130,115,107,135,83],
[81,0,131,105,118,108,107,116,91],
[64,79,0,72,81,80,90,65,49],
[107,105,138,0,113,124,104,105,123],
[80,92,129,97,0,96,91,93,71],
[95,102,130,86,114,0,84,96,94],
[103,103,120,106,119,126,0,105,70],
[75,94,145,105,117,114,105,0,111],
[127,119,161,87,139,116,140,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,71,71,0,0,141,71,71],
[139,0,0,69,69,0,70,0,0],
[139,210,0,210,139,139,70,141,210],
[139,141,0,0,70,0,70,70,70],
[210,141,71,140,0,71,141,141,71],
[210,210,71,210,139,0,141,141,210],
[69,140,140,140,69,69,0,71,140],
[139,210,69,140,69,69,139,0,69],
[139,210,0,140,139,0,70,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,99,116,94,98,104,102],
[94,0,97,102,99,99,87,89,88],
[108,113,0,106,106,96,92,93,98],
[111,108,104,0,121,108,98,112,105],
[94,111,104,89,0,94,86,107,88],
[116,111,114,102,116,0,91,107,104],
[112,123,118,112,124,119,0,107,96],
[106,121,117,98,103,103,103,0,92],
[108,122,112,105,122,106,114,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,112,88,127,115,95,107,103],
[116,0,109,115,102,117,87,109,99],
[98,101,0,111,99,115,88,90,96],
[122,95,99,0,114,107,94,100,97],
[83,108,111,96,0,111,81,101,93],
[95,93,95,103,99,0,91,93,106],
[115,123,122,116,129,119,0,110,94],
[103,101,120,110,109,117,100,0,103],
[107,111,114,113,117,104,116,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,116,113,78,97,97,111,112],
[127,0,129,111,116,100,122,118,131],
[94,81,0,99,80,116,94,115,130],
[97,99,111,0,98,110,101,120,106],
[132,94,130,112,0,108,109,118,100],
[113,110,94,100,102,0,102,125,94],
[113,88,116,109,101,108,0,117,104],
[99,92,95,90,92,85,93,0,107],
[98,79,80,104,110,116,106,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,117,91,90,97,105,99,98],
[111,0,103,97,111,91,109,96,105],
[93,107,0,82,105,110,102,101,100],
[119,113,128,0,107,114,114,107,104],
[120,99,105,103,0,102,97,102,103],
[113,119,100,96,108,0,105,89,102],
[105,101,108,96,113,105,0,110,113],
[111,114,109,103,108,121,100,0,98],
[112,105,110,106,107,108,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,106,98,111,111,110,107,112],
[103,0,108,108,108,108,103,100,110],
[104,102,0,94,95,105,103,102,103],
[112,102,116,0,103,113,111,104,112],
[99,102,115,107,0,120,115,106,115],
[99,102,105,97,90,0,107,95,98],
[100,107,107,99,95,103,0,100,108],
[103,110,108,106,104,115,110,0,109],
[98,100,107,98,95,112,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,108,117,107,101,101,111,127],
[94,0,107,112,119,99,106,113,102],
[102,103,0,114,93,89,92,115,98],
[93,98,96,0,101,80,102,113,86],
[103,91,117,109,0,95,91,117,102],
[109,111,121,130,115,0,94,133,111],
[109,104,118,108,119,116,0,120,110],
[99,97,95,97,93,77,90,0,90],
[83,108,112,124,108,99,100,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,125,117,106,112,125,101,123],
[67,0,97,102,88,74,105,84,89],
[85,113,0,107,79,83,97,93,104],
[93,108,103,0,92,84,103,88,107],
[104,122,131,118,0,100,120,108,104],
[98,136,127,126,110,0,117,102,112],
[85,105,113,107,90,93,0,100,106],
[109,126,117,122,102,108,110,0,124],
[87,121,106,103,106,98,104,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,95,106,115,93,107,117],
[103,0,106,96,101,98,97,110,109],
[101,104,0,89,109,105,102,110,102],
[115,114,121,0,122,98,117,118,118],
[104,109,101,88,0,109,92,105,110],
[95,112,105,112,101,0,105,114,114],
[117,113,108,93,118,105,0,110,110],
[103,100,100,92,105,96,100,0,109],
[93,101,108,92,100,96,100,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,124,117,126,111,98,105,104],
[106,0,118,115,109,106,102,106,103],
[86,92,0,104,97,106,100,107,89],
[93,95,106,0,105,122,106,112,100],
[84,101,113,105,0,105,104,109,91],
[99,104,104,88,105,0,95,115,90],
[112,108,110,104,106,115,0,109,107],
[105,104,103,98,101,95,101,0,98],
[106,107,121,110,119,120,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,118,136,107,126,107,121,99],
[87,0,68,88,93,89,72,92,75],
[92,142,0,100,110,132,100,102,110],
[74,122,110,0,100,116,88,95,94],
[103,117,100,110,0,116,106,112,108],
[84,121,78,94,94,0,94,106,81],
[103,138,110,122,104,116,0,115,96],
[89,118,108,115,98,104,95,0,91],
[111,135,100,116,102,129,114,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,108,90,118,100,106,96,100],
[102,0,102,96,118,99,116,103,105],
[102,108,0,100,106,97,105,102,99],
[120,114,110,0,110,105,103,107,94],
[92,92,104,100,0,86,91,95,92],
[110,111,113,105,124,0,112,106,129],
[104,94,105,107,119,98,0,107,110],
[114,107,108,103,115,104,103,0,117],
[110,105,111,116,118,81,100,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,117,115,106,111,107,115],
[111,0,120,129,107,85,111,121,116],
[91,90,0,129,104,99,92,119,119],
[93,81,81,0,88,80,102,102,102],
[95,103,106,122,0,85,124,116,116],
[104,125,111,130,125,0,132,121,134],
[99,99,118,108,86,78,0,97,117],
[103,89,91,108,94,89,113,0,107],
[95,94,91,108,94,76,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,81,100,97,107,106,97,99],
[115,0,101,98,106,109,106,109,100],
[129,109,0,123,108,113,122,120,105],
[110,112,87,0,106,105,114,107,94],
[113,104,102,104,0,105,109,122,101],
[103,101,97,105,105,0,122,109,95],
[104,104,88,96,101,88,0,104,90],
[113,101,90,103,88,101,106,0,87],
[111,110,105,116,109,115,120,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,104,117,121,108,118,107],
[102,0,105,111,106,116,109,113,106],
[106,105,0,108,119,115,112,117,99],
[106,99,102,0,120,116,102,120,118],
[93,104,91,90,0,106,99,107,98],
[89,94,95,94,104,0,106,100,87],
[102,101,98,108,111,104,0,116,91],
[92,97,93,90,103,110,94,0,88],
[103,104,111,92,112,123,119,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,94,110,106,112,111,114],
[106,0,99,90,105,99,96,109,103],
[98,111,0,96,113,84,97,85,109],
[116,120,114,0,107,99,106,106,107],
[100,105,97,103,0,94,100,94,115],
[104,111,126,111,116,0,107,95,122],
[98,114,113,104,110,103,0,94,117],
[99,101,125,104,116,115,116,0,118],
[96,107,101,103,95,88,93,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,102,107,96,96,107,115],
[108,0,85,122,112,104,91,106,98],
[109,125,0,101,125,108,101,120,116],
[108,88,109,0,133,100,100,111,114],
[103,98,85,77,0,81,83,92,99],
[114,106,102,110,129,0,109,124,107],
[114,119,109,110,127,101,0,107,120],
[103,104,90,99,118,86,103,0,111],
[95,112,94,96,111,103,90,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,116,105,102,123,96,99,111],
[108,0,107,108,107,113,102,104,120],
[94,103,0,96,99,109,100,99,107],
[105,102,114,0,109,117,102,103,108],
[108,103,111,101,0,124,106,106,114],
[87,97,101,93,86,0,96,96,97],
[114,108,110,108,104,114,0,110,112],
[111,106,111,107,104,114,100,0,115],
[99,90,103,102,96,113,98,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,35,107,72,107,107,105,103],
[140,0,70,177,105,142,105,35,173],
[175,140,0,175,140,175,175,105,175],
[103,33,35,0,33,105,68,33,33],
[138,105,70,177,0,142,140,70,138],
[103,68,35,105,68,0,103,68,68],
[103,105,35,142,70,107,0,140,138],
[105,175,105,177,140,142,70,0,138],
[107,37,35,177,72,142,72,72,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,117,109,97,107,109,106,112],
[103,0,96,104,103,105,97,111,126],
[93,114,0,92,96,107,107,102,103],
[101,106,118,0,105,95,104,114,129],
[113,107,114,105,0,102,98,110,104],
[103,105,103,115,108,0,89,104,118],
[101,113,103,106,112,121,0,103,140],
[104,99,108,96,100,106,107,0,112],
[98,84,107,81,106,92,70,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,84,79,101,100,92,98,89],
[114,0,94,90,99,102,98,100,86],
[126,116,0,110,98,115,115,103,100],
[131,120,100,0,122,120,127,122,105],
[109,111,112,88,0,127,113,94,92],
[110,108,95,90,83,0,101,101,89],
[118,112,95,83,97,109,0,100,81],
[112,110,107,88,116,109,110,0,95],
[121,124,110,105,118,121,129,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,102,130,107,114,109,122,98],
[120,0,86,133,107,108,105,112,103],
[108,124,0,120,128,94,119,121,120],
[80,77,90,0,89,93,90,87,90],
[103,103,82,121,0,110,104,110,110],
[96,102,116,117,100,0,117,134,105],
[101,105,91,120,106,93,0,117,97],
[88,98,89,123,100,76,93,0,112],
[112,107,90,120,100,105,113,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,104,117,111,94,97,122,111],
[117,0,122,117,127,102,116,118,107],
[106,88,0,106,105,116,113,114,100],
[93,93,104,0,105,102,85,93,93],
[99,83,105,105,0,96,95,109,87],
[116,108,94,108,114,0,104,109,104],
[113,94,97,125,115,106,0,101,103],
[88,92,96,117,101,101,109,0,101],
[99,103,110,117,123,106,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,117,107,116,95,117,106],
[99,0,108,114,108,117,98,112,103],
[104,102,0,101,105,101,94,112,105],
[93,96,109,0,98,102,93,104,97],
[103,102,105,112,0,104,111,117,96],
[94,93,109,108,106,0,103,107,107],
[115,112,116,117,99,107,0,113,106],
[93,98,98,106,93,103,97,0,97],
[104,107,105,113,114,103,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,116,114,100,117,121,126,111],
[95,0,120,98,121,115,114,123,104],
[94,90,0,102,91,106,99,100,79],
[96,112,108,0,113,117,100,112,95],
[110,89,119,97,0,110,115,115,88],
[93,95,104,93,100,0,104,106,87],
[89,96,111,110,95,106,0,114,97],
[84,87,110,98,95,104,96,0,94],
[99,106,131,115,122,123,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,111,117,115,137,114,106],
[105,0,100,111,101,104,107,100,95],
[93,110,0,98,101,92,118,102,95],
[99,99,112,0,104,113,129,99,91],
[93,109,109,106,0,129,125,94,108],
[95,106,118,97,81,0,121,92,96],
[73,103,92,81,85,89,0,80,84],
[96,110,108,111,116,118,130,0,99],
[104,115,115,119,102,114,126,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,104,106,112,103,107,99],
[100,0,110,100,100,106,94,105,97],
[105,100,0,90,95,101,94,98,95],
[106,110,120,0,115,104,102,102,109],
[104,110,115,95,0,97,100,100,103],
[98,104,109,106,113,0,102,114,106],
[107,116,116,108,110,108,0,102,105],
[103,105,112,108,110,96,108,0,93],
[111,113,115,101,107,104,105,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,126,64,42,106,54,84,95],
[125,0,177,158,95,115,104,125,92],
[84,33,0,54,65,73,62,75,83],
[146,52,156,0,86,104,113,105,124],
[168,115,145,124,0,113,101,137,135],
[104,95,137,106,97,0,106,117,107],
[156,106,148,97,109,104,0,149,146],
[126,85,135,105,73,93,61,0,102],
[115,118,127,86,75,103,64,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,99,102,126,111,113,100,97],
[118,0,121,102,124,123,125,101,118],
[111,89,0,111,105,107,113,112,110],
[108,108,99,0,114,94,94,104,104],
[84,86,105,96,0,97,95,100,109],
[99,87,103,116,113,0,118,100,111],
[97,85,97,116,115,92,0,92,105],
[110,109,98,106,110,110,118,0,112],
[113,92,100,106,101,99,105,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,95,97,104,110,108,104,100],
[93,0,100,85,98,86,98,102,95],
[115,110,0,106,111,101,118,105,111],
[113,125,104,0,103,98,115,107,109],
[106,112,99,107,0,85,110,98,100],
[100,124,109,112,125,0,117,108,109],
[102,112,92,95,100,93,0,101,95],
[106,108,105,103,112,102,109,0,94],
[110,115,99,101,110,101,115,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,64,89,76,69,66,92,92,117],
[146,0,105,113,120,107,121,132,130],
[121,105,0,137,119,111,140,128,135],
[134,97,73,0,109,102,109,115,142],
[141,90,91,101,0,93,135,126,141],
[144,103,99,108,117,0,123,141,134],
[118,89,70,101,75,87,0,96,102],
[118,78,82,95,84,69,114,0,110],
[93,80,75,68,69,76,108,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,123,133,100,112,126,125,128],
[91,0,105,125,107,94,102,114,100],
[87,105,0,123,90,115,105,110,121],
[77,85,87,0,98,88,88,100,104],
[110,103,120,112,0,126,105,116,119],
[98,116,95,122,84,0,107,105,110],
[84,108,105,122,105,103,0,109,109],
[85,96,100,110,94,105,101,0,109],
[82,110,89,106,91,100,101,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,97,78,97,83,79,81,81],
[127,0,116,115,125,107,100,101,109],
[113,94,0,100,105,102,90,107,88],
[132,95,110,0,106,91,104,94,115],
[113,85,105,104,0,90,88,83,91],
[127,103,108,119,120,0,117,105,110],
[131,110,120,106,122,93,0,122,111],
[129,109,103,116,127,105,88,0,106],
[129,101,122,95,119,100,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,108,107,99,104,89,105,90],
[101,0,100,110,102,110,98,106,92],
[102,110,0,80,94,101,94,97,78],
[103,100,130,0,110,117,103,104,79],
[111,108,116,100,0,110,99,95,80],
[106,100,109,93,100,0,91,101,87],
[121,112,116,107,111,119,0,116,97],
[105,104,113,106,115,109,94,0,107],
[120,118,132,131,130,123,113,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,105,105,111,108,129,120],
[98,0,86,95,89,108,100,93,109],
[111,124,0,114,97,109,91,110,117],
[105,115,96,0,104,110,95,124,117],
[105,121,113,106,0,117,129,114,118],
[99,102,101,100,93,0,100,111,113],
[102,110,119,115,81,110,0,117,104],
[81,117,100,86,96,99,93,0,103],
[90,101,93,93,92,97,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,107,101,115,107,99,102],
[104,0,97,98,103,101,105,86,96],
[109,113,0,102,107,110,106,116,107],
[103,112,108,0,104,105,109,114,101],
[109,107,103,106,0,102,102,102,99],
[95,109,100,105,108,0,107,101,96],
[103,105,104,101,108,103,0,102,99],
[111,124,94,96,108,109,108,0,111],
[108,114,103,109,111,114,111,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,105,115,95,105,118,124,108],
[115,0,109,122,104,112,124,111,115],
[105,101,0,118,106,108,106,106,101],
[95,88,92,0,98,102,97,97,106],
[115,106,104,112,0,115,125,113,113],
[105,98,102,108,95,0,106,109,111],
[92,86,104,113,85,104,0,98,114],
[86,99,104,113,97,101,112,0,117],
[102,95,109,104,97,99,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,97,104,107,103,96,112],
[116,0,121,102,106,106,113,111,127],
[123,89,0,99,90,104,103,97,111],
[113,108,111,0,99,106,105,105,111],
[106,104,120,111,0,111,111,113,113],
[103,104,106,104,99,0,105,103,107],
[107,97,107,105,99,105,0,115,100],
[114,99,113,105,97,107,95,0,104],
[98,83,99,99,97,103,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,132,94,106,115,104,132,114],
[88,0,104,90,102,95,99,101,112],
[78,106,0,93,87,94,90,86,86],
[116,120,117,0,115,111,100,120,118],
[104,108,123,95,0,102,98,104,96],
[95,115,116,99,108,0,116,112,110],
[106,111,120,110,112,94,0,107,106],
[78,109,124,90,106,98,103,0,111],
[96,98,124,92,114,100,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,95,105,124,136,115,106,109],
[99,0,68,80,113,136,114,107,121],
[115,142,0,118,145,146,115,98,146],
[105,130,92,0,134,125,103,88,117],
[86,97,65,76,0,90,97,66,120],
[74,74,64,85,120,0,85,83,125],
[95,96,95,107,113,125,0,68,125],
[104,103,112,122,144,127,142,0,118],
[101,89,64,93,90,85,85,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,99,109,101,109,115,87,100],
[97,0,100,98,96,110,108,92,90],
[111,110,0,106,100,110,109,91,97],
[101,112,104,0,95,118,103,91,86],
[109,114,110,115,0,131,113,105,106],
[101,100,100,92,79,0,84,93,88],
[95,102,101,107,97,126,0,89,85],
[123,118,119,119,105,117,121,0,103],
[110,120,113,124,104,122,125,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,97,103,106,106,110,103,98],
[107,0,113,97,114,112,112,95,109],
[113,97,0,105,119,108,105,102,101],
[107,113,105,0,115,109,106,109,117],
[104,96,91,95,0,111,109,96,110],
[104,98,102,101,99,0,90,87,106],
[100,98,105,104,101,120,0,108,101],
[107,115,108,101,114,123,102,0,114],
[112,101,109,93,100,104,109,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,88,108,94,91,100,86,99],
[115,0,106,111,123,81,97,85,109],
[122,104,0,136,102,109,115,113,128],
[102,99,74,0,82,96,101,93,84],
[116,87,108,128,0,90,95,84,109],
[119,129,101,114,120,0,98,94,112],
[110,113,95,109,115,112,0,118,118],
[124,125,97,117,126,116,92,0,91],
[111,101,82,126,101,98,92,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,96,94,90,102,106,79,95],
[109,0,99,107,92,105,105,85,104],
[114,111,0,115,104,115,120,107,109],
[116,103,95,0,116,111,113,87,110],
[120,118,106,94,0,113,111,95,104],
[108,105,95,99,97,0,95,91,85],
[104,105,90,97,99,115,0,94,84],
[131,125,103,123,115,119,116,0,110],
[115,106,101,100,106,125,126,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,96,103,108,108,104,107,106],
[101,0,88,110,105,107,98,108,107],
[114,122,0,110,92,104,101,109,108],
[107,100,100,0,97,96,89,108,109],
[102,105,118,113,0,103,98,109,110],
[102,103,106,114,107,0,108,102,114],
[106,112,109,121,112,102,0,113,123],
[103,102,101,102,101,108,97,0,102],
[104,103,102,101,100,96,87,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,109,103,102,99,99,94],
[114,0,115,112,115,107,102,104,102],
[109,95,0,112,120,115,99,109,99],
[101,98,98,0,112,104,88,101,92],
[107,95,90,98,0,85,94,104,94],
[108,103,95,106,125,0,105,109,108],
[111,108,111,122,116,105,0,110,101],
[111,106,101,109,106,101,100,0,94],
[116,108,111,118,116,102,109,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,106,102,96,110,111,102,99],
[104,0,103,101,99,102,111,94,105],
[104,107,0,100,102,113,102,98,105],
[108,109,110,0,102,107,104,105,107],
[114,111,108,108,0,121,113,111,100],
[100,108,97,103,89,0,106,101,98],
[99,99,108,106,97,104,0,100,89],
[108,116,112,105,99,109,110,0,105],
[111,105,105,103,110,112,121,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,99,121,90,86,105,99,86],
[83,0,101,91,130,120,101,118,123],
[111,109,0,105,114,97,110,152,99],
[89,119,105,0,97,116,111,120,111],
[120,80,96,113,0,103,94,101,99],
[124,90,113,94,107,0,103,118,117],
[105,109,100,99,116,107,0,113,116],
[111,92,58,90,109,92,97,0,102],
[124,87,111,99,111,93,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,82,88,85,88,96,86,92],
[115,0,95,94,100,95,109,107,96],
[128,115,0,124,118,114,121,105,117],
[122,116,86,0,107,103,123,106,103],
[125,110,92,103,0,99,122,97,98],
[122,115,96,107,111,0,115,114,110],
[114,101,89,87,88,95,0,103,110],
[124,103,105,104,113,96,107,0,107],
[118,114,93,107,112,100,100,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,105,102,109,95,104,112,109],
[100,0,112,97,104,96,90,100,106],
[105,98,0,94,111,86,100,105,96],
[108,113,116,0,124,102,96,118,111],
[101,106,99,86,0,83,93,109,96],
[115,114,124,108,127,0,111,122,105],
[106,120,110,114,117,99,0,117,105],
[98,110,105,92,101,88,93,0,95],
[101,104,114,99,114,105,105,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,107,101,96,98,97,119,100],
[87,0,96,81,90,92,88,97,97],
[103,114,0,103,102,107,92,109,115],
[109,129,107,0,96,110,102,117,112],
[114,120,108,114,0,108,105,116,111],
[112,118,103,100,102,0,99,116,106],
[113,122,118,108,105,111,0,117,109],
[91,113,101,93,94,94,93,0,90],
[110,113,95,98,99,104,101,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,112,108,105,93,104,105],
[93,0,101,104,104,109,98,95,104],
[112,109,0,116,121,118,106,107,98],
[98,106,94,0,113,105,86,101,102],
[102,106,89,97,0,101,80,94,95],
[105,101,92,105,109,0,73,97,92],
[117,112,104,124,130,137,0,120,111],
[106,115,103,109,116,113,90,0,95],
[105,106,112,108,115,118,99,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,104,113,101,111,120,109,114],
[91,0,98,96,92,87,101,98,100],
[106,112,0,103,101,109,110,108,110],
[97,114,107,0,94,97,115,101,103],
[109,118,109,116,0,103,119,116,118],
[99,123,101,113,107,0,115,113,111],
[90,109,100,95,91,95,0,103,101],
[101,112,102,109,94,97,107,0,108],
[96,110,100,107,92,99,109,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,111,91,114,96,88,93,110],
[125,0,124,88,131,123,125,129,117],
[99,86,0,87,110,103,101,97,130],
[119,122,123,0,131,120,122,113,99],
[96,79,100,79,0,96,92,103,86],
[114,87,107,90,114,0,126,105,107],
[122,85,109,88,118,84,0,88,106],
[117,81,113,97,107,105,122,0,93],
[100,93,80,111,124,103,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,92,113,114,105,102,102,105],
[100,0,95,116,104,90,93,97,111],
[118,115,0,120,111,102,110,109,101],
[97,94,90,0,97,100,104,88,106],
[96,106,99,113,0,94,108,109,102],
[105,120,108,110,116,0,110,110,106],
[108,117,100,106,102,100,0,101,108],
[108,113,101,122,101,100,109,0,119],
[105,99,109,104,108,104,102,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,103,157,52,52,103,156],
[105,0,158,105,105,54,52,105,105],
[105,52,0,51,105,54,52,157,51],
[107,105,159,0,106,54,52,210,210],
[53,105,105,104,0,53,105,156,104],
[158,156,156,156,157,0,105,210,156],
[158,158,158,158,105,105,0,158,158],
[107,105,53,0,54,0,52,0,104],
[54,105,159,0,106,54,52,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,107,122,115,112,106,93],
[96,0,113,107,109,113,121,107,109],
[98,97,0,100,122,106,109,90,92],
[103,103,110,0,109,103,95,93,89],
[88,101,88,101,0,102,109,90,87],
[95,97,104,107,108,0,114,91,89],
[98,89,101,115,101,96,0,81,92],
[104,103,120,117,120,119,129,0,95],
[117,101,118,121,123,121,118,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,97,104,120,103,111,96],
[100,0,106,104,92,110,101,89,98],
[92,104,0,82,88,122,94,103,92],
[113,106,128,0,101,124,110,103,117],
[106,118,122,109,0,128,102,97,112],
[90,100,88,86,82,0,81,83,84],
[107,109,116,100,108,129,0,97,99],
[99,121,107,107,113,127,113,0,97],
[114,112,118,93,98,126,111,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,100,105,107,104,90,112,111],
[94,0,108,108,85,102,104,92,97],
[110,102,0,117,98,106,103,105,110],
[105,102,93,0,97,87,107,100,103],
[103,125,112,113,0,102,114,115,116],
[106,108,104,123,108,0,117,124,122],
[120,106,107,103,96,93,0,105,108],
[98,118,105,110,95,86,105,0,112],
[99,113,100,107,94,88,102,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,92,106,98,93,107,108,119],
[101,0,108,88,92,100,106,79,96],
[118,102,0,81,85,111,117,94,106],
[104,122,129,0,111,98,101,99,94],
[112,118,125,99,0,123,109,92,109],
[117,110,99,112,87,0,109,98,103],
[103,104,93,109,101,101,0,85,105],
[102,131,116,111,118,112,125,0,101],
[91,114,104,116,101,107,105,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,92,85,82,113,77,78,95],
[120,0,104,89,121,128,95,111,114],
[118,106,0,87,111,107,110,102,95],
[125,121,123,0,99,119,111,115,115],
[128,89,99,111,0,121,111,102,104],
[97,82,103,91,89,0,75,98,98],
[133,115,100,99,99,135,0,80,117],
[132,99,108,95,108,112,130,0,112],
[115,96,115,95,106,112,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,111,95,97,98,97,109,96],
[97,0,101,98,100,96,95,100,102],
[99,109,0,112,102,106,96,107,103],
[115,112,98,0,110,107,92,120,106],
[113,110,108,100,0,107,107,107,111],
[112,114,104,103,103,0,102,116,105],
[113,115,114,118,103,108,0,113,109],
[101,110,103,90,103,94,97,0,104],
[114,108,107,104,99,105,101,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,74,100,123,123,74,112],
[108,0,135,133,106,120,119,84,134],
[101,75,0,124,87,124,88,62,109],
[136,77,86,0,98,133,109,85,110],
[110,104,123,112,0,135,111,97,121],
[87,90,86,77,75,0,84,110,160],
[87,91,122,101,99,126,0,73,113],
[136,126,148,125,113,100,137,0,124],
[98,76,101,100,89,50,97,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,102,129,112,97,117,121,126],
[111,0,101,100,100,97,113,106,110],
[108,109,0,101,103,102,121,114,118],
[81,110,109,0,99,110,107,106,102],
[98,110,107,111,0,96,90,108,118],
[113,113,108,100,114,0,110,108,102],
[93,97,89,103,120,100,0,111,97],
[89,104,96,104,102,102,99,0,98],
[84,100,92,108,92,108,113,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,118,119,115,97,112,106],
[99,0,106,109,113,102,104,105,101],
[90,104,0,110,103,100,102,109,101],
[92,101,100,0,106,100,103,104,89],
[91,97,107,104,0,100,86,105,97],
[95,108,110,110,110,0,108,103,99],
[113,106,108,107,124,102,0,113,116],
[98,105,101,106,105,107,97,0,103],
[104,109,109,121,113,111,94,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,89,104,99,86,87,96,113],
[119,0,119,106,123,96,105,113,109],
[121,91,0,104,121,105,115,110,115],
[106,104,106,0,104,106,109,122,113],
[111,87,89,106,0,100,98,93,116],
[124,114,105,104,110,0,111,114,125],
[123,105,95,101,112,99,0,120,119],
[114,97,100,88,117,96,90,0,108],
[97,101,95,97,94,85,91,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,107,99,90,110,94,112,115],
[119,0,115,111,105,114,111,114,108],
[103,95,0,107,92,105,106,108,99],
[111,99,103,0,83,118,93,103,99],
[120,105,118,127,0,128,121,122,131],
[100,96,105,92,82,0,96,105,98],
[116,99,104,117,89,114,0,121,117],
[98,96,102,107,88,105,89,0,114],
[95,102,111,111,79,112,93,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,100,109,118,103,104,115],
[114,0,97,108,110,123,101,84,118],
[109,113,0,96,106,111,111,105,120],
[110,102,114,0,117,132,110,116,109],
[101,100,104,93,0,110,92,84,123],
[92,87,99,78,100,0,98,70,96],
[107,109,99,100,118,112,0,95,117],
[106,126,105,94,126,140,115,0,122],
[95,92,90,101,87,114,93,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,105,105,70,140,140,139,70],
[69,0,104,35,35,70,70,104,105],
[105,106,0,36,36,70,105,105,71],
[105,175,174,0,70,140,140,139,70],
[140,175,174,140,0,105,175,174,70],
[70,140,140,70,105,0,139,139,105],
[70,140,105,70,35,71,0,139,105],
[71,106,105,71,36,71,71,0,35],
[140,105,139,140,140,105,105,175,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,107,96,98,93,117,110],
[114,0,111,130,110,113,102,123,126],
[111,99,0,108,106,120,110,113,130],
[103,80,102,0,90,83,88,97,96],
[114,100,104,120,0,109,112,112,130],
[112,97,90,127,101,0,100,115,119],
[117,108,100,122,98,110,0,114,129],
[93,87,97,113,98,95,96,0,116],
[100,84,80,114,80,91,81,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,91,89,108,101,97,112,94],
[100,0,100,89,111,95,96,102,100],
[119,110,0,105,115,116,120,111,110],
[121,121,105,0,104,106,112,114,120],
[102,99,95,106,0,114,105,115,118],
[109,115,94,104,96,0,100,100,106],
[113,114,90,98,105,110,0,91,109],
[98,108,99,96,95,110,119,0,102],
[116,110,100,90,92,104,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,109,109,107,115,106,112,101],
[107,0,115,109,95,113,115,116,118],
[101,95,0,99,92,105,99,110,103],
[101,101,111,0,89,107,101,109,94],
[103,115,118,121,0,115,109,120,112],
[95,97,105,103,95,0,96,113,103],
[104,95,111,109,101,114,0,119,114],
[98,94,100,101,90,97,91,0,104],
[109,92,107,116,98,107,96,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,109,94,91,99,87,97,100],
[111,0,111,108,100,109,87,101,85],
[101,99,0,93,89,111,91,101,98],
[116,102,117,0,113,103,110,105,108],
[119,110,121,97,0,118,95,99,106],
[111,101,99,107,92,0,105,87,89],
[123,123,119,100,115,105,0,97,100],
[113,109,109,105,111,123,113,0,126],
[110,125,112,102,104,121,110,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,83,99,115,100,68,132,131,148],
[127,0,128,129,130,144,177,98,178],
[111,82,0,113,82,113,97,98,130],
[95,81,97,0,99,113,112,66,132],
[110,80,128,111,0,128,145,114,145],
[142,66,97,97,82,0,112,131,115],
[78,33,113,98,65,98,0,81,83],
[79,112,112,144,96,79,129,0,145],
[62,32,80,78,65,95,127,65,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,111,93,115,82,100,95,104],
[103,0,100,94,110,83,83,86,78],
[99,110,0,100,113,98,95,98,92],
[117,116,110,0,113,115,115,108,97],
[95,100,97,97,0,71,91,95,90],
[128,127,112,95,139,0,119,124,107],
[110,127,115,95,119,91,0,101,91],
[115,124,112,102,115,86,109,0,108],
[106,132,118,113,120,103,119,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,105,98,108,90,108,111,111],
[108,0,111,114,100,95,120,139,100],
[105,99,0,108,99,89,129,134,103],
[112,96,102,0,71,81,104,108,98],
[102,110,111,139,0,118,111,132,115],
[120,115,121,129,92,0,131,123,109],
[102,90,81,106,99,79,0,116,99],
[99,71,76,102,78,87,94,0,89],
[99,110,107,112,95,101,111,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,116,100,107,111,105,98],
[107,0,105,116,100,118,106,115,106],
[110,105,0,116,95,115,106,113,92],
[94,94,94,0,96,107,94,106,99],
[110,110,115,114,0,122,109,113,103],
[103,92,95,103,88,0,96,106,95],
[99,104,104,116,101,114,0,108,106],
[105,95,97,104,97,104,102,0,98],
[112,104,118,111,107,115,104,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,103,99,105,100,103,119],
[108,0,106,106,97,100,104,102,115],
[98,104,0,106,97,98,108,102,95],
[107,104,104,0,106,103,108,99,118],
[111,113,113,104,0,103,105,110,105],
[105,110,112,107,107,0,107,103,119],
[110,106,102,102,105,103,0,107,115],
[107,108,108,111,100,107,103,0,108],
[91,95,115,92,105,91,95,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,95,115,122,130,105,114,126],
[98,0,96,102,108,121,83,103,109],
[115,114,0,104,126,114,113,85,104],
[95,108,106,0,127,122,105,99,124],
[88,102,84,83,0,97,92,93,97],
[80,89,96,88,113,0,69,77,101],
[105,127,97,105,118,141,0,102,99],
[96,107,125,111,117,133,108,0,127],
[84,101,106,86,113,109,111,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,111,95,95,103,92,102,108],
[122,0,115,104,100,100,118,106,116],
[99,95,0,98,90,87,90,97,90],
[115,106,112,0,109,107,102,114,119],
[115,110,120,101,0,96,112,119,94],
[107,110,123,103,114,0,103,118,100],
[118,92,120,108,98,107,0,119,111],
[108,104,113,96,91,92,91,0,90],
[102,94,120,91,116,110,99,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,91,104,91,103,100,110,92],
[97,0,79,77,70,91,86,81,77],
[119,131,0,111,104,130,99,105,102],
[106,133,99,0,100,119,108,109,94],
[119,140,106,110,0,123,104,112,114],
[107,119,80,91,87,0,93,100,99],
[110,124,111,102,106,117,0,112,99],
[100,129,105,101,98,110,98,0,109],
[118,133,108,116,96,111,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,117,105,111,114,117,104,111],
[99,0,101,90,104,108,102,95,107],
[93,109,0,98,99,97,103,89,104],
[105,120,112,0,114,116,120,109,114],
[99,106,111,96,0,109,100,114,107],
[96,102,113,94,101,0,111,104,109],
[93,108,107,90,110,99,0,105,101],
[106,115,121,101,96,106,105,0,110],
[99,103,106,96,103,101,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,96,98,97,111,94,91,124],
[128,0,103,102,112,85,111,88,132],
[114,107,0,108,118,99,91,100,124],
[112,108,102,0,101,89,75,107,125],
[113,98,92,109,0,104,103,97,132],
[99,125,111,121,106,0,104,118,110],
[116,99,119,135,107,106,0,106,120],
[119,122,110,103,113,92,104,0,131],
[86,78,86,85,78,100,90,79,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,92,104,103,103,99,107],
[112,0,106,97,111,102,103,108,107],
[105,104,0,108,107,111,114,111,107],
[118,113,102,0,111,108,118,114,107],
[106,99,103,99,0,110,115,103,103],
[107,108,99,102,100,0,111,102,98],
[107,107,96,92,95,99,0,99,100],
[111,102,99,96,107,108,111,0,102],
[103,103,103,103,107,112,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,116,100,105,100,100,103,115],
[102,0,113,112,110,109,103,107,115],
[94,97,0,97,106,104,99,103,110],
[110,98,113,0,106,115,108,114,114],
[105,100,104,104,0,118,101,114,111],
[110,101,106,95,92,0,102,100,106],
[110,107,111,102,109,108,0,102,118],
[107,103,107,96,96,110,108,0,98],
[95,95,100,96,99,104,92,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,121,93,98,104,102,102,103],
[103,0,104,103,97,96,98,100,108],
[89,106,0,102,95,75,91,99,89],
[117,107,108,0,100,96,97,98,103],
[112,113,115,110,0,97,103,111,100],
[106,114,135,114,113,0,109,100,108],
[108,112,119,113,107,101,0,105,106],
[108,110,111,112,99,110,105,0,105],
[107,102,121,107,110,102,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,106,111,98,108,100,103],
[106,0,112,101,114,117,117,111,108],
[98,98,0,104,103,97,105,101,101],
[104,109,106,0,107,105,112,108,102],
[99,96,107,103,0,108,97,101,104],
[112,93,113,105,102,0,111,114,103],
[102,93,105,98,113,99,0,112,100],
[110,99,109,102,109,96,98,0,104],
[107,102,109,108,106,107,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,110,117,114,97,98,91],
[102,0,117,115,96,122,110,96,81],
[85,93,0,83,90,103,105,85,89],
[100,95,127,0,96,100,113,105,84],
[93,114,120,114,0,126,121,81,106],
[96,88,107,110,84,0,118,98,108],
[113,100,105,97,89,92,0,90,89],
[112,114,125,105,129,112,120,0,109],
[119,129,121,126,104,102,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,102,110,114,121,127,102],
[94,0,92,79,74,100,110,93,105],
[99,118,0,97,105,110,115,77,110],
[108,131,113,0,105,109,113,104,112],
[100,136,105,105,0,103,93,121,101],
[96,110,100,101,107,0,122,104,100],
[89,100,95,97,117,88,0,105,95],
[83,117,133,106,89,106,105,0,115],
[108,105,100,98,109,110,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,108,99,114,103,94,96,98],
[97,0,92,106,96,96,98,108,96],
[102,118,0,97,113,112,106,105,100],
[111,104,113,0,107,109,102,100,107],
[96,114,97,103,0,110,91,99,100],
[107,114,98,101,100,0,99,99,96],
[116,112,104,108,119,111,0,94,110],
[114,102,105,110,111,111,116,0,110],
[112,114,110,103,110,114,100,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,109,131,112,117,120,95,112],
[95,0,112,101,117,106,100,93,113],
[101,98,0,117,108,108,110,106,98],
[79,109,93,0,93,73,98,89,94],
[98,93,102,117,0,106,96,80,85],
[93,104,102,137,104,0,108,93,115],
[90,110,100,112,114,102,0,101,97],
[115,117,104,121,130,117,109,0,114],
[98,97,112,116,125,95,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,131,97,131,116,131,132,164],
[130,0,131,97,129,116,130,115,161],
[79,79,0,96,95,129,115,64,145],
[113,113,114,0,80,116,115,98,147],
[79,81,115,130,0,116,83,97,132],
[94,94,81,94,94,0,96,65,112],
[79,80,95,95,127,114,0,96,142],
[78,95,146,112,113,145,114,0,113],
[46,49,65,63,78,98,68,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,93,55,117,129,93,105,117],
[117,0,117,68,128,163,105,140,107],
[117,93,0,80,104,95,93,129,95],
[155,142,130,0,143,163,94,175,131],
[93,82,106,67,0,117,94,117,104],
[81,47,115,47,93,0,46,94,93],
[117,105,117,116,116,164,0,129,129],
[105,70,81,35,93,116,81,0,69],
[93,103,115,79,106,117,81,141,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,104,106,122,118,115,103,96],
[99,0,103,98,112,103,108,105,91],
[106,107,0,94,102,100,120,104,104],
[104,112,116,0,93,106,123,98,92],
[88,98,108,117,0,107,113,95,84],
[92,107,110,104,103,0,115,91,94],
[95,102,90,87,97,95,0,80,85],
[107,105,106,112,115,119,130,0,106],
[114,119,106,118,126,116,125,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,90,103,110,100,102,101],
[109,0,106,92,98,95,96,85,88],
[107,104,0,84,103,112,97,92,93],
[120,118,126,0,115,110,101,108,103],
[107,112,107,95,0,95,100,97,106],
[100,115,98,100,115,0,102,102,103],
[110,114,113,109,110,108,0,111,89],
[108,125,118,102,113,108,99,0,112],
[109,122,117,107,104,107,121,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,88,99,118,111,95,86,100],
[104,0,92,86,107,105,108,102,101],
[122,118,0,99,112,92,105,115,98],
[111,124,111,0,118,123,126,102,113],
[92,103,98,92,0,109,105,102,99],
[99,105,118,87,101,0,105,108,97],
[115,102,105,84,105,105,0,99,97],
[124,108,95,108,108,102,111,0,105],
[110,109,112,97,111,113,113,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,102,103,91,93,92,95,107],
[117,0,109,108,98,103,109,102,116],
[108,101,0,113,98,88,103,98,110],
[107,102,97,0,100,97,104,97,104],
[119,112,112,110,0,100,102,113,117],
[117,107,122,113,110,0,109,101,106],
[118,101,107,106,108,101,0,104,117],
[115,108,112,113,97,109,106,0,110],
[103,94,100,106,93,104,93,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,89,97,99,104,97,92,89],
[117,0,98,97,103,115,101,101,88],
[121,112,0,98,110,125,109,102,90],
[113,113,112,0,103,115,110,106,92],
[111,107,100,107,0,119,88,96,97],
[106,95,85,95,91,0,97,97,79],
[113,109,101,100,122,113,0,90,90],
[118,109,108,104,114,113,120,0,108],
[121,122,120,118,113,131,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,107,110,102,93,103,100],
[103,0,102,95,108,97,89,100,102],
[110,108,0,92,98,110,96,96,106],
[103,115,118,0,113,118,103,95,105],
[100,102,112,97,0,104,93,99,96],
[108,113,100,92,106,0,97,97,90],
[117,121,114,107,117,113,0,105,111],
[107,110,114,115,111,113,105,0,94],
[110,108,104,105,114,120,99,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,123,118,91,114,117,132],
[105,0,114,109,117,84,104,115,123],
[95,96,0,118,106,105,106,117,114],
[87,101,92,0,113,87,103,103,114],
[92,93,104,97,0,91,97,95,111],
[119,126,105,123,119,0,113,130,115],
[96,106,104,107,113,97,0,115,118],
[93,95,93,107,115,80,95,0,106],
[78,87,96,96,99,95,92,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,94,96,97,112,109,117,105],
[101,0,81,95,95,93,91,98,94],
[116,129,0,102,110,114,106,118,118],
[114,115,108,0,96,106,96,120,115],
[113,115,100,114,0,111,96,108,101],
[98,117,96,104,99,0,94,91,98],
[101,119,104,114,114,116,0,109,110],
[93,112,92,90,102,119,101,0,116],
[105,116,92,95,109,112,100,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,108,98,99,86,104,92,101],
[98,0,95,94,93,89,95,99,95],
[102,115,0,112,103,99,117,104,105],
[112,116,98,0,98,106,107,106,103],
[111,117,107,112,0,99,113,108,110],
[124,121,111,104,111,0,108,111,109],
[106,115,93,103,97,102,0,98,102],
[118,111,106,104,102,99,112,0,113],
[109,115,105,107,100,101,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,111,112,106,121,124,95,128],
[81,0,90,85,95,103,103,98,100],
[99,120,0,88,98,111,106,99,113],
[98,125,122,0,114,121,107,79,131],
[104,115,112,96,0,111,105,106,113],
[89,107,99,89,99,0,97,91,105],
[86,107,104,103,105,113,0,97,110],
[115,112,111,131,104,119,113,0,132],
[82,110,97,79,97,105,100,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,98,114,106,118,104,113,101],
[110,0,95,107,108,103,103,108,116],
[112,115,0,112,108,105,107,106,106],
[96,103,98,0,102,92,99,102,90],
[104,102,102,108,0,101,95,103,102],
[92,107,105,118,109,0,97,93,105],
[106,107,103,111,115,113,0,100,99],
[97,102,104,108,107,117,110,0,104],
[109,94,104,120,108,105,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,99,88,103,103,99,106,104],
[102,0,101,94,110,102,88,87,93],
[111,109,0,106,111,106,112,109,102],
[122,116,104,0,126,113,106,104,91],
[107,100,99,84,0,103,91,99,95],
[107,108,104,97,107,0,101,110,103],
[111,122,98,104,119,109,0,117,109],
[104,123,101,106,111,100,93,0,99],
[106,117,108,119,115,107,101,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,131,121,110,123,100,107,125],
[95,0,121,124,101,112,106,110,114],
[79,89,0,99,76,102,83,78,103],
[89,86,111,0,94,107,103,82,107],
[100,109,134,116,0,106,118,115,116],
[87,98,108,103,104,0,97,99,119],
[110,104,127,107,92,113,0,108,120],
[103,100,132,128,95,111,102,0,123],
[85,96,107,103,94,91,90,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,92,113,87,95,93,105,84],
[109,0,106,120,97,106,106,104,108],
[118,104,0,127,92,122,98,115,116],
[97,90,83,0,91,96,84,92,98],
[123,113,118,119,0,121,119,120,104],
[115,104,88,114,89,0,83,112,104],
[117,104,112,126,91,127,0,104,112],
[105,106,95,118,90,98,106,0,86],
[126,102,94,112,106,106,98,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,102,118,110,115,110,113,106],
[104,0,112,128,114,111,105,122,104],
[108,98,0,120,105,96,117,115,97],
[92,82,90,0,104,92,94,95,92],
[100,96,105,106,0,96,90,104,93],
[95,99,114,118,114,0,111,109,110],
[100,105,93,116,120,99,0,108,97],
[97,88,95,115,106,101,102,0,95],
[104,106,113,118,117,100,113,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,114,96,99,106,99,94,88],
[110,0,114,101,110,111,106,105,106],
[96,96,0,111,108,108,95,97,88],
[114,109,99,0,99,113,106,97,93],
[111,100,102,111,0,110,105,112,85],
[104,99,102,97,100,0,107,110,86],
[111,104,115,104,105,103,0,99,97],
[116,105,113,113,98,100,111,0,104],
[122,104,122,117,125,124,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,121,129,106,110,106,91,113],
[117,0,146,130,135,117,99,114,122],
[89,64,0,113,92,97,82,77,82],
[81,80,97,0,97,97,89,72,107],
[104,75,118,113,0,112,80,72,101],
[100,93,113,113,98,0,83,75,106],
[104,111,128,121,130,127,0,98,105],
[119,96,133,138,138,135,112,0,132],
[97,88,128,103,109,104,105,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,110,108,100,112,106,115,103],
[110,0,99,119,109,106,117,90,100],
[100,111,0,111,114,105,110,107,93],
[102,91,99,0,97,106,110,94,93],
[110,101,96,113,0,99,115,93,100],
[98,104,105,104,111,0,122,97,100],
[104,93,100,100,95,88,0,102,97],
[95,120,103,116,117,113,108,0,114],
[107,110,117,117,110,110,113,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,122,103,100,120,117,136],
[99,0,106,109,116,112,124,108,116],
[89,104,0,108,101,113,131,104,126],
[88,101,102,0,84,116,109,104,108],
[107,94,109,126,0,114,116,110,122],
[110,98,97,94,96,0,127,99,129],
[90,86,79,101,94,83,0,83,108],
[93,102,106,106,100,111,127,0,123],
[74,94,84,102,88,81,102,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,106,93,97,108,95,93,102],
[113,0,126,102,119,110,101,111,103],
[104,84,0,83,93,100,106,100,78],
[117,108,127,0,128,108,102,113,110],
[113,91,117,82,0,100,85,95,104],
[102,100,110,102,110,0,95,95,100],
[115,109,104,108,125,115,0,108,113],
[117,99,110,97,115,115,102,0,114],
[108,107,132,100,106,110,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,117,108,83,108,95,113,93],
[116,0,104,119,104,116,106,113,123],
[93,106,0,115,89,108,100,133,110],
[102,91,95,0,107,108,106,102,106],
[127,106,121,103,0,118,113,97,112],
[102,94,102,102,92,0,90,107,109],
[115,104,110,104,97,120,0,92,109],
[97,97,77,108,113,103,118,0,114],
[117,87,100,104,98,101,101,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,94,127,98,118,110,134,110],
[99,0,114,131,86,117,117,127,90],
[116,96,0,150,100,145,133,143,119],
[83,79,60,0,106,74,108,78,83],
[112,124,110,104,0,105,92,103,129],
[92,93,65,136,105,0,133,112,125],
[100,93,77,102,118,77,0,111,127],
[76,83,67,132,107,98,99,0,92],
[100,120,91,127,81,85,83,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,104,98,91,97,103,87,98],
[108,0,116,101,81,108,93,124,110],
[106,94,0,89,84,125,102,99,99],
[112,109,121,0,98,111,107,96,119],
[119,129,126,112,0,119,109,105,130],
[113,102,85,99,91,0,107,86,74],
[107,117,108,103,101,103,0,100,114],
[123,86,111,114,105,124,110,0,101],
[112,100,111,91,80,136,96,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,99,117,120,81,104,111],
[106,0,94,100,115,112,77,95,89],
[103,116,0,111,122,122,89,126,110],
[111,110,99,0,118,133,106,108,105],
[93,95,88,92,0,114,86,78,88],
[90,98,88,77,96,0,90,91,76],
[129,133,121,104,124,120,0,116,124],
[106,115,84,102,132,119,94,0,100],
[99,121,100,105,122,134,86,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,118,97,129,113,130,101],
[101,0,109,107,82,101,103,107,94],
[99,101,0,97,98,105,112,124,90],
[92,103,113,0,91,105,119,113,116],
[113,128,112,119,0,126,104,123,113],
[81,109,105,105,84,0,116,121,99],
[97,107,98,91,106,94,0,118,113],
[80,103,86,97,87,89,92,0,90],
[109,116,120,94,97,111,97,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,110,102,115,105,92,116,92],
[112,0,98,93,117,102,102,99,76],
[100,112,0,104,126,127,102,111,89],
[108,117,106,0,121,97,107,114,90],
[95,93,84,89,0,92,91,97,79],
[105,108,83,113,118,0,103,109,72],
[118,108,108,103,119,107,0,128,105],
[94,111,99,96,113,101,82,0,83],
[118,134,121,120,131,138,105,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,140,121,123,105,105,123,140],
[105,0,122,121,105,122,140,122,174],
[70,88,0,104,105,35,87,70,105],
[89,89,106,0,105,123,106,106,176],
[87,105,105,105,0,88,123,123,157],
[105,88,175,87,122,0,104,105,174],
[105,70,123,104,87,106,0,105,141],
[87,88,140,104,87,105,105,0,140],
[70,36,105,34,53,36,69,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,112,102,110,96,94,91,113],
[103,0,108,106,100,104,105,96,103],
[98,102,0,103,108,103,98,107,120],
[108,104,107,0,108,100,102,98,120],
[100,110,102,102,0,98,107,100,109],
[114,106,107,110,112,0,102,105,115],
[116,105,112,108,103,108,0,95,114],
[119,114,103,112,110,105,115,0,123],
[97,107,90,90,101,95,96,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,75,85,75,105,82,98],
[123,0,105,125,90,101,115,105,127],
[112,105,0,99,92,80,126,117,106],
[135,85,111,0,108,104,119,89,112],
[125,120,118,102,0,109,121,95,99],
[135,109,130,106,101,0,107,110,104],
[105,95,84,91,89,103,0,102,94],
[128,105,93,121,115,100,108,0,105],
[112,83,104,98,111,106,116,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,120,127,106,110,105,95,111],
[88,0,113,100,112,94,134,81,102],
[90,97,0,113,95,89,105,69,104],
[83,110,97,0,113,87,100,91,96],
[104,98,115,97,0,99,117,80,136],
[100,116,121,123,111,0,136,105,140],
[105,76,105,110,93,74,0,78,75],
[115,129,141,119,130,105,132,0,115],
[99,108,106,114,74,70,135,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,104,107,107,105,111,101],
[108,0,101,101,98,103,111,107,104],
[109,109,0,101,103,105,112,113,110],
[106,109,109,0,111,108,116,111,100],
[103,112,107,99,0,114,118,122,109],
[103,107,105,102,96,0,116,112,108],
[105,99,98,94,92,94,0,99,102],
[99,103,97,99,88,98,111,0,92],
[109,106,100,110,101,102,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,84,167,126,169,125,168,210],
[85,0,126,126,169,85,169,43,85],
[126,84,0,126,85,126,126,84,126],
[43,84,84,0,126,126,168,86,128],
[84,41,125,84,0,84,84,84,126],
[41,125,84,84,126,0,125,127,169],
[85,41,84,42,126,85,0,43,85],
[42,167,126,124,126,83,167,0,210],
[0,125,84,82,84,41,125,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,104,119,113,100,111,106,118],
[125,0,109,116,106,101,131,107,103],
[106,101,0,104,94,85,127,100,113],
[91,94,106,0,85,77,106,87,99],
[97,104,116,125,0,100,137,99,109],
[110,109,125,133,110,0,137,103,130],
[99,79,83,104,73,73,0,77,93],
[104,103,110,123,111,107,133,0,110],
[92,107,97,111,101,80,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,102,108,113,101,94,108],
[97,0,108,99,96,101,93,106,107],
[98,102,0,99,95,112,100,90,93],
[108,111,111,0,113,107,101,108,107],
[102,114,115,97,0,115,104,93,116],
[97,109,98,103,95,0,106,95,100],
[109,117,110,109,106,104,0,106,115],
[116,104,120,102,117,115,104,0,107],
[102,103,117,103,94,110,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,103,104,103,103,105,122,109],
[100,0,112,109,109,109,117,123,115],
[107,98,0,104,101,114,104,128,107],
[106,101,106,0,115,118,118,120,108],
[107,101,109,95,0,104,106,116,103],
[107,101,96,92,106,0,106,111,104],
[105,93,106,92,104,104,0,116,106],
[88,87,82,90,94,99,94,0,93],
[101,95,103,102,107,106,104,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,99,97,105,99,110,115,93],
[126,0,115,110,103,122,118,119,109],
[111,95,0,111,103,106,106,108,94],
[113,100,99,0,116,113,107,111,101],
[105,107,107,94,0,105,111,102,103],
[111,88,104,97,105,0,106,106,96],
[100,92,104,103,99,104,0,99,99],
[95,91,102,99,108,104,111,0,102],
[117,101,116,109,107,114,111,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,113,85,106,113,108,105],
[106,0,115,107,95,116,118,103,95],
[108,95,0,108,92,101,97,109,96],
[97,103,102,0,87,92,107,103,92],
[125,115,118,123,0,115,120,117,102],
[104,94,109,118,95,0,122,109,110],
[97,92,113,103,90,88,0,101,108],
[102,107,101,107,93,101,109,0,103],
[105,115,114,118,108,100,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,122,131,110,105,115,110,109],
[96,0,126,92,100,108,108,103,106],
[88,84,0,95,88,103,108,106,98],
[79,118,115,0,112,92,108,117,116],
[100,110,122,98,0,96,106,106,114],
[105,102,107,118,114,0,94,101,113],
[95,102,102,102,104,116,0,107,101],
[100,107,104,93,104,109,103,0,92],
[101,104,112,94,96,97,109,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,94,85,100,91,102,105,104],
[109,0,109,105,100,95,104,108,100],
[116,101,0,102,107,106,118,113,106],
[125,105,108,0,114,106,118,122,112],
[110,110,103,96,0,102,111,120,112],
[119,115,104,104,108,0,109,119,114],
[108,106,92,92,99,101,0,114,103],
[105,102,97,88,90,91,96,0,103],
[106,110,104,98,98,96,107,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,110,99,95,103,96,94,113],
[103,0,97,102,101,103,99,104,106],
[100,113,0,99,108,98,107,103,110],
[111,108,111,0,108,106,105,114,113],
[115,109,102,102,0,107,106,91,112],
[107,107,112,104,103,0,97,108,102],
[114,111,103,105,104,113,0,111,112],
[116,106,107,96,119,102,99,0,110],
[97,104,100,97,98,108,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,85,100,98,103,84,97,109],
[119,0,100,128,113,116,112,113,111],
[125,110,0,123,105,110,89,99,104],
[110,82,87,0,97,94,88,91,88],
[112,97,105,113,0,121,93,105,116],
[107,94,100,116,89,0,88,97,90],
[126,98,121,122,117,122,0,99,119],
[113,97,111,119,105,113,111,0,104],
[101,99,106,122,94,120,91,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,93,100,106,94,89,103],
[107,0,86,102,99,95,103,109,110],
[117,124,0,105,111,120,105,112,125],
[117,108,105,0,110,113,110,116,115],
[110,111,99,100,0,102,111,104,104],
[104,115,90,97,108,0,108,109,121],
[116,107,105,100,99,102,0,107,116],
[121,101,98,94,106,101,103,0,109],
[107,100,85,95,106,89,94,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,127,119,92,97,86,102,95],
[130,0,122,126,113,111,107,104,92],
[83,88,0,102,92,122,102,101,89],
[91,84,108,0,103,90,73,96,77],
[118,97,118,107,0,117,94,107,105],
[113,99,88,120,93,0,91,96,87],
[124,103,108,137,116,119,0,137,105],
[108,106,109,114,103,114,73,0,97],
[115,118,121,133,105,123,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,111,95,86,85,89,109,111],
[87,0,159,97,121,108,85,111,125],
[99,51,0,72,62,72,36,62,89],
[115,113,138,0,98,123,90,98,137],
[124,89,148,112,0,124,99,125,103],
[125,102,138,87,86,0,89,87,111],
[121,125,174,120,111,121,0,97,149],
[101,99,148,112,85,123,113,0,125],
[99,85,121,73,107,99,61,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,123,99,101,93,101,115],
[110,0,97,115,110,105,103,107,109],
[117,113,0,116,100,98,117,98,115],
[87,95,94,0,98,84,96,81,99],
[111,100,110,112,0,109,109,105,95],
[109,105,112,126,101,0,120,105,120],
[117,107,93,114,101,90,0,103,102],
[109,103,112,129,105,105,107,0,116],
[95,101,95,111,115,90,108,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,104,114,106,90,103,109,104],
[103,0,96,108,110,103,105,105,106],
[106,114,0,110,119,110,119,104,118],
[96,102,100,0,118,109,105,111,111],
[104,100,91,92,0,91,108,101,90],
[120,107,100,101,119,0,110,102,102],
[107,105,91,105,102,100,0,102,99],
[101,105,106,99,109,108,108,0,104],
[106,104,92,99,120,108,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,110,106,107,107,96,96,92],
[120,0,116,113,112,102,112,109,115],
[100,94,0,105,102,108,98,95,99],
[104,97,105,0,102,111,105,106,99],
[103,98,108,108,0,97,107,96,104],
[103,108,102,99,113,0,107,95,102],
[114,98,112,105,103,103,0,97,107],
[114,101,115,104,114,115,113,0,112],
[118,95,111,111,106,108,103,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,102,114,131,126,127,122,126],
[96,0,108,111,116,119,132,118,101],
[108,102,0,124,122,111,140,129,112],
[96,99,86,0,114,119,131,123,87],
[79,94,88,96,0,93,122,116,101],
[84,91,99,91,117,0,114,108,94],
[83,78,70,79,88,96,0,88,94],
[88,92,81,87,94,102,122,0,91],
[84,109,98,123,109,116,116,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,66,99,116,103,127,101,115],
[82,0,96,109,121,100,130,109,115],
[144,114,0,103,124,103,134,107,123],
[111,101,107,0,108,137,129,125,102],
[94,89,86,102,0,109,125,105,129],
[107,110,107,73,101,0,132,99,118],
[83,80,76,81,85,78,0,91,106],
[109,101,103,85,105,111,119,0,104],
[95,95,87,108,81,92,104,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,106,111,107,108,88,111],
[113,0,101,102,110,113,90,89,101],
[119,109,0,114,104,127,102,96,111],
[104,108,96,0,111,111,97,99,110],
[99,100,106,99,0,115,102,97,117],
[103,97,83,99,95,0,93,91,105],
[102,120,108,113,108,117,0,111,117],
[122,121,114,111,113,119,99,0,126],
[99,109,99,100,93,105,93,84,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,129,115,91,113,125,121],
[96,0,126,135,116,100,116,114,110],
[107,84,0,102,107,87,105,119,109],
[81,75,108,0,95,81,96,107,85],
[95,94,103,115,0,102,122,103,105],
[119,110,123,129,108,0,116,121,101],
[97,94,105,114,88,94,0,118,99],
[85,96,91,103,107,89,92,0,103],
[89,100,101,125,105,109,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,119,99,109,94,130,103],
[111,0,105,123,121,94,108,106,119],
[110,105,0,115,94,113,100,117,105],
[91,87,95,0,71,82,82,113,102],
[111,89,116,139,0,100,99,106,98],
[101,116,97,128,110,0,105,122,117],
[116,102,110,128,111,105,0,131,109],
[80,104,93,97,104,88,79,0,84],
[107,91,105,108,112,93,101,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,124,114,112,115,108,104,108],
[99,0,117,105,105,114,103,102,108],
[86,93,0,106,106,102,106,100,93],
[96,105,104,0,104,104,111,110,108],
[98,105,104,106,0,97,97,111,107],
[95,96,108,106,113,0,111,107,95],
[102,107,104,99,113,99,0,106,102],
[106,108,110,100,99,103,104,0,105],
[102,102,117,102,103,115,108,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,123,128,93,113,103,128,97],
[90,0,116,118,102,112,108,117,81],
[87,94,0,95,101,98,81,101,80],
[82,92,115,0,103,106,87,96,81],
[117,108,109,107,0,106,104,105,89],
[97,98,112,104,104,0,97,108,113],
[107,102,129,123,106,113,0,109,96],
[82,93,109,114,105,102,101,0,103],
[113,129,130,129,121,97,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,125,107,132,110,107,126,86],
[67,0,81,89,105,89,78,79,60],
[85,129,0,103,115,112,96,108,92],
[103,121,107,0,105,116,98,105,112],
[78,105,95,105,0,97,95,86,94],
[100,121,98,94,113,0,96,97,93],
[103,132,114,112,115,114,0,142,119],
[84,131,102,105,124,113,68,0,86],
[124,150,118,98,116,117,91,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,93,94,115,93,138,139,138],
[95,0,94,142,163,93,115,163,138],
[117,116,0,95,116,69,138,140,91],
[116,68,115,0,93,91,114,116,91],
[95,47,94,117,0,70,93,115,93],
[117,117,141,119,140,0,210,164,92],
[72,95,72,96,117,0,0,94,47],
[71,47,70,94,95,46,116,0,93],
[72,72,119,119,117,118,163,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,100,115,98,95,101,99,102],
[111,0,108,115,97,109,112,107,112],
[110,102,0,111,98,107,99,102,117],
[95,95,99,0,99,104,90,89,110],
[112,113,112,111,0,106,110,93,113],
[115,101,103,106,104,0,100,100,110],
[109,98,111,120,100,110,0,101,111],
[111,103,108,121,117,110,109,0,120],
[108,98,93,100,97,100,99,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,113,99,115,119,124,113,96],
[90,0,100,77,107,103,103,105,106],
[97,110,0,89,123,104,112,113,99],
[111,133,121,0,136,123,120,128,105],
[95,103,87,74,0,102,103,95,89],
[91,107,106,87,108,0,102,102,98],
[86,107,98,90,107,108,0,114,104],
[97,105,97,82,115,108,96,0,100],
[114,104,111,105,121,112,106,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,87,86,93,91,77,109,71],
[107,0,89,104,106,90,88,110,72],
[123,121,0,96,127,121,97,121,106],
[124,106,114,0,108,112,102,110,85],
[117,104,83,102,0,104,95,105,114],
[119,120,89,98,106,0,77,100,97],
[133,122,113,108,115,133,0,105,117],
[101,100,89,100,105,110,105,0,82],
[139,138,104,125,96,113,93,128,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,109,103,103,98,96,99],
[103,0,98,128,95,106,105,106,98],
[101,112,0,118,105,109,90,104,83],
[101,82,92,0,98,86,98,107,98],
[107,115,105,112,0,106,98,105,95],
[107,104,101,124,104,0,101,111,96],
[112,105,120,112,112,109,0,106,106],
[114,104,106,103,105,99,104,0,85],
[111,112,127,112,115,114,104,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,106,106,107,106,52,158,106],
[130,0,51,76,80,54,76,103,102],
[104,159,0,131,106,80,130,159,79],
[104,134,79,0,106,55,76,132,79],
[103,130,104,104,0,105,78,104,103],
[104,156,130,155,105,0,103,129,76],
[158,134,80,134,132,107,0,159,80],
[52,107,51,78,106,81,51,0,26],
[104,108,131,131,107,134,130,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,113,113,117,110,107,117],
[107,0,83,94,100,100,95,98,104],
[104,127,0,105,113,112,110,111,109],
[97,116,105,0,109,114,103,104,117],
[97,110,97,101,0,114,105,96,111],
[93,110,98,96,96,0,114,99,106],
[100,115,100,107,105,96,0,103,112],
[103,112,99,106,114,111,107,0,106],
[93,106,101,93,99,104,98,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,103,119,92,109,113,101],
[109,0,100,105,110,102,107,130,109],
[108,110,0,115,108,107,116,118,104],
[107,105,95,0,112,103,109,122,114],
[91,100,102,98,0,94,103,113,119],
[118,108,103,107,116,0,121,132,119],
[101,103,94,101,107,89,0,112,103],
[97,80,92,88,97,78,98,0,94],
[109,101,106,96,91,91,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,91,90,108,98,98,90,86],
[102,0,95,98,98,93,96,97,88],
[119,115,0,106,113,103,106,101,103],
[120,112,104,0,108,100,113,103,93],
[102,112,97,102,0,99,112,108,99],
[112,117,107,110,111,0,107,98,99],
[112,114,104,97,98,103,0,103,107],
[120,113,109,107,102,112,107,0,98],
[124,122,107,117,111,111,103,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,105,116,94,110,115,105,102],
[101,0,107,108,107,114,121,111,107],
[105,103,0,111,109,118,111,123,114],
[94,102,99,0,94,105,96,103,94],
[116,103,101,116,0,121,125,108,108],
[100,96,92,105,89,0,108,106,98],
[95,89,99,114,85,102,0,103,97],
[105,99,87,107,102,104,107,0,92],
[108,103,96,116,102,112,113,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,99,111,107,109,117,115,108],
[104,0,106,105,104,97,112,98,115],
[111,104,0,103,101,113,113,101,102],
[99,105,107,0,108,102,104,96,112],
[103,106,109,102,0,104,107,104,105],
[101,113,97,108,106,0,101,97,108],
[93,98,97,106,103,109,0,92,94],
[95,112,109,114,106,113,118,0,119],
[102,95,108,98,105,102,116,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,92,104,100,95,82,97],
[105,0,107,97,117,114,91,93,99],
[109,103,0,104,115,92,98,106,101],
[118,113,106,0,127,111,120,115,103],
[106,93,95,83,0,95,96,90,89],
[110,96,118,99,115,0,100,110,103],
[115,119,112,90,114,110,0,93,105],
[128,117,104,95,120,100,117,0,110],
[113,111,109,107,121,107,105,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,92,95,92,90,108,90,93],
[130,0,93,94,88,102,111,98,98],
[118,117,0,93,108,111,116,114,107],
[115,116,117,0,95,124,129,125,113],
[118,122,102,115,0,108,130,111,106],
[120,108,99,86,102,0,122,114,104],
[102,99,94,81,80,88,0,81,79],
[120,112,96,85,99,96,129,0,99],
[117,112,103,97,104,106,131,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,66,48,71,114,116,69,114,95],
[144,0,120,71,119,93,95,138,144],
[162,90,0,139,139,117,118,136,188],
[139,139,71,0,139,70,70,113,167],
[96,91,71,71,0,118,69,112,144],
[94,117,93,140,92,0,91,113,118],
[141,115,92,140,141,119,0,113,142],
[96,72,74,97,98,97,97,0,121],
[115,66,22,43,66,92,68,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,119,112,103,98,100,98,119],
[104,0,122,111,112,87,101,92,116],
[91,88,0,95,94,81,89,89,105],
[98,99,115,0,107,93,108,92,116],
[107,98,116,103,0,87,95,103,100],
[112,123,129,117,123,0,114,96,125],
[110,109,121,102,115,96,0,115,129],
[112,118,121,118,107,114,95,0,117],
[91,94,105,94,110,85,81,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,117,93,106,118,107,127],
[116,0,118,111,103,118,117,112,109],
[109,92,0,107,98,110,121,101,134],
[93,99,103,0,107,109,101,119,122],
[117,107,112,103,0,104,125,107,119],
[104,92,100,101,106,0,121,113,130],
[92,93,89,109,85,89,0,104,122],
[103,98,109,91,103,97,106,0,123],
[83,101,76,88,91,80,88,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,102,106,101,107,102,93,104],
[110,0,106,106,100,110,112,102,104],
[108,104,0,111,101,111,101,98,112],
[104,104,99,0,90,112,107,86,98],
[109,110,109,120,0,112,104,105,115],
[103,100,99,98,98,0,98,101,108],
[108,98,109,103,106,112,0,107,108],
[117,108,112,124,105,109,103,0,106],
[106,106,98,112,95,102,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,126,104,124,106,116,113,113],
[95,0,119,104,92,113,112,108,95],
[84,91,0,92,88,94,91,105,96],
[106,106,118,0,109,98,105,103,95],
[86,118,122,101,0,95,88,113,96],
[104,97,116,112,115,0,100,115,93],
[94,98,119,105,122,110,0,112,100],
[97,102,105,107,97,95,98,0,93],
[97,115,114,115,114,117,110,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,99,108,104,107,106,122,90],
[114,0,106,116,116,118,102,128,103],
[111,104,0,115,118,115,111,123,110],
[102,94,95,0,97,98,104,97,93],
[106,94,92,113,0,99,111,106,93],
[103,92,95,112,111,0,86,110,99],
[104,108,99,106,99,124,0,110,106],
[88,82,87,113,104,100,100,0,86],
[120,107,100,117,117,111,104,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,103,104,107,73,89,109,89],
[104,0,98,92,92,70,100,105,99],
[107,112,0,120,96,100,79,101,109],
[106,118,90,0,98,98,111,94,104],
[103,118,114,112,0,101,111,93,103],
[137,140,110,112,109,0,107,99,117],
[121,110,131,99,99,103,0,112,117],
[101,105,109,116,117,111,98,0,90],
[121,111,101,106,107,93,93,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,90,97,112,95,103,90,94],
[112,0,90,98,112,84,89,104,105],
[120,120,0,122,111,103,110,108,114],
[113,112,88,0,99,96,100,89,96],
[98,98,99,111,0,86,97,87,94],
[115,126,107,114,124,0,112,105,109],
[107,121,100,110,113,98,0,99,104],
[120,106,102,121,123,105,111,0,117],
[116,105,96,114,116,101,106,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,87,101,110,104,102,112],
[106,0,112,106,104,116,122,104,118],
[105,98,0,95,94,112,110,101,103],
[123,104,115,0,108,125,129,105,119],
[109,106,116,102,0,128,120,111,120],
[100,94,98,85,82,0,105,98,101],
[106,88,100,81,90,105,0,96,102],
[108,106,109,105,99,112,114,0,113],
[98,92,107,91,90,109,108,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,134,97,128,100,121,88,89],
[120,0,122,87,110,108,123,111,88],
[76,88,0,82,109,83,105,101,72],
[113,123,128,0,141,116,111,120,96],
[82,100,101,69,0,76,87,79,66],
[110,102,127,94,134,0,105,99,94],
[89,87,105,99,123,105,0,93,75],
[122,99,109,90,131,111,117,0,115],
[121,122,138,114,144,116,135,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,140,70,210,140,70,140,140],
[140,0,140,70,140,140,70,140,140],
[70,70,0,140,140,140,70,140,70],
[140,140,70,0,140,210,140,70,140],
[0,70,70,70,0,70,70,70,140],
[70,70,70,0,140,0,70,70,70],
[140,140,140,70,140,140,0,140,70],
[70,70,70,140,140,140,70,0,70],
[70,70,140,70,70,140,140,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,123,59,88,143,111,109],
[106,0,102,126,118,88,136,105,109],
[102,108,0,118,81,100,112,143,81],
[87,84,92,0,103,80,133,122,111],
[151,92,129,107,0,78,122,115,115],
[122,122,110,130,132,0,116,118,92],
[67,74,98,77,88,94,0,108,107],
[99,105,67,88,95,92,102,0,94],
[101,101,129,99,95,118,103,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,117,120,100,110,108,113],
[96,0,103,86,99,95,101,93,105],
[103,107,0,94,111,97,101,90,103],
[93,124,116,0,111,101,114,98,106],
[90,111,99,99,0,107,108,92,106],
[110,115,113,109,103,0,107,104,107],
[100,109,109,96,102,103,0,116,105],
[102,117,120,112,118,106,94,0,107],
[97,105,107,104,104,103,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,116,103,104,114,94,102,120],
[111,0,110,115,105,112,99,107,114],
[94,100,0,107,96,95,93,106,116],
[107,95,103,0,102,101,80,96,102],
[106,105,114,108,0,111,106,111,113],
[96,98,115,109,99,0,92,121,121],
[116,111,117,130,104,118,0,122,125],
[108,103,104,114,99,89,88,0,109],
[90,96,94,108,97,89,85,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,121,116,102,91,108,101],
[110,0,87,109,98,104,112,97,100],
[111,123,0,127,115,99,99,100,118],
[89,101,83,0,107,94,88,92,86],
[94,112,95,103,0,90,87,92,91],
[108,106,111,116,120,0,99,93,117],
[119,98,111,122,123,111,0,117,112],
[102,113,110,118,118,117,93,0,109],
[109,110,92,124,119,93,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,133,95,94,130,106,99,121,114],
[77,0,86,102,110,79,94,100,109],
[115,124,0,107,142,108,104,115,143],
[116,108,103,0,125,99,121,118,129],
[80,100,68,85,0,66,83,90,101],
[104,131,102,111,144,0,104,118,124],
[111,116,106,89,127,106,0,124,145],
[89,110,95,92,120,92,86,0,92],
[96,101,67,81,109,86,65,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,115,115,95,117,97,99,106],
[105,0,110,107,104,113,112,113,107],
[95,100,0,98,96,103,108,106,108],
[95,103,112,0,104,104,100,103,102],
[115,106,114,106,0,114,112,104,111],
[93,97,107,106,96,0,102,99,102],
[113,98,102,110,98,108,0,110,111],
[111,97,104,107,106,111,100,0,105],
[104,103,102,108,99,108,99,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,114,92,100,99,110,93,108],
[106,0,109,101,101,102,112,104,121],
[96,101,0,101,98,98,91,104,99],
[118,109,109,0,116,105,112,103,110],
[110,109,112,94,0,91,118,105,124],
[111,108,112,105,119,0,119,117,111],
[100,98,119,98,92,91,0,106,107],
[117,106,106,107,105,93,104,0,102],
[102,89,111,100,86,99,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,141,122,138,95,95,98,114,114],
[69,0,82,105,94,102,106,95,108],
[88,128,0,114,138,128,117,138,134],
[72,105,96,0,94,96,100,88,80],
[115,116,72,116,0,123,131,116,101],
[115,108,82,114,87,0,97,107,82],
[112,104,93,110,79,113,0,102,88],
[96,115,72,122,94,103,108,0,90],
[96,102,76,130,109,128,122,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,101,87,110,103,104,104,91],
[118,0,112,108,112,124,121,111,105],
[109,98,0,100,119,106,112,111,97],
[123,102,110,0,113,120,128,112,116],
[100,98,91,97,0,99,99,100,96],
[107,86,104,90,111,0,109,102,99],
[106,89,98,82,111,101,0,104,101],
[106,99,99,98,110,108,106,0,105],
[119,105,113,94,114,111,109,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,116,121,122,123,114,106,104],
[104,0,100,99,112,106,105,102,113],
[94,110,0,120,116,116,105,112,113],
[89,111,90,0,116,102,98,94,95],
[88,98,94,94,0,97,97,93,100],
[87,104,94,108,113,0,109,102,96],
[96,105,105,112,113,101,0,103,110],
[104,108,98,116,117,108,107,0,113],
[106,97,97,115,110,114,100,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,84,107,128,109,112,128],
[124,0,121,104,108,123,112,118,124],
[109,89,0,84,82,110,106,117,135],
[126,106,126,0,103,107,108,133,120],
[103,102,128,107,0,120,104,123,119],
[82,87,100,103,90,0,118,100,128],
[101,98,104,102,106,92,0,106,121],
[98,92,93,77,87,110,104,0,135],
[82,86,75,90,91,82,89,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,116,121,114,105,112,125,111],
[87,0,105,87,106,106,92,101,108],
[94,105,0,100,100,105,103,103,95],
[89,123,110,0,115,118,98,111,113],
[96,104,110,95,0,112,92,102,97],
[105,104,105,92,98,0,89,106,105],
[98,118,107,112,118,121,0,117,118],
[85,109,107,99,108,104,93,0,105],
[99,102,115,97,113,105,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,98,100,96,96,94,98,102],
[107,0,101,99,100,83,104,108,100],
[112,109,0,110,95,95,107,109,107],
[110,111,100,0,111,98,95,107,105],
[114,110,115,99,0,93,103,118,111],
[114,127,115,112,117,0,99,115,110],
[116,106,103,115,107,111,0,108,97],
[112,102,101,103,92,95,102,0,106],
[108,110,103,105,99,100,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,102,98,97,99,102,88],
[116,0,119,116,106,121,118,99,108],
[109,91,0,94,101,96,100,94,96],
[108,94,116,0,107,110,108,109,105],
[112,104,109,103,0,118,117,106,106],
[113,89,114,100,92,0,108,98,97],
[111,92,110,102,93,102,0,98,89],
[108,111,116,101,104,112,112,0,95],
[122,102,114,105,104,113,121,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,104,104,109,87,111,119],
[97,0,111,106,95,114,94,97,108],
[103,99,0,103,100,115,85,105,100],
[106,104,107,0,114,105,114,104,99],
[106,115,110,96,0,106,103,111,97],
[101,96,95,105,104,0,98,104,99],
[123,116,125,96,107,112,0,135,130],
[99,113,105,106,99,106,75,0,97],
[91,102,110,111,113,111,80,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,100,109,89,92,105,93],
[115,0,115,112,116,105,102,118,104],
[119,95,0,111,114,110,89,103,93],
[110,98,99,0,115,95,92,105,107],
[101,94,96,95,0,85,89,99,91],
[121,105,100,115,125,0,105,107,113],
[118,108,121,118,121,105,0,120,110],
[105,92,107,105,111,103,90,0,98],
[117,106,117,103,119,97,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,105,108,89,114,110,103,108],
[89,0,110,101,119,92,103,111,103],
[105,100,0,106,111,116,122,122,123],
[102,109,104,0,116,121,127,107,104],
[121,91,99,94,0,97,124,126,113],
[96,118,94,89,113,0,96,93,104],
[100,107,88,83,86,114,0,118,92],
[107,99,88,103,84,117,92,0,106],
[102,107,87,106,97,106,118,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,110,107,105,100,107,100],
[111,0,110,104,113,119,122,116,102],
[103,100,0,114,114,108,106,106,97],
[100,106,96,0,103,109,112,99,106],
[103,97,96,107,0,104,98,99,97],
[105,91,102,101,106,0,99,112,93],
[110,88,104,98,112,111,0,107,96],
[103,94,104,111,111,98,103,0,96],
[110,108,113,104,113,117,114,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,108,106,113,107,103,117],
[107,0,124,115,102,122,103,98,124],
[104,86,0,105,94,119,106,102,125],
[102,95,105,0,105,109,110,102,118],
[104,108,116,105,0,116,108,108,129],
[97,88,91,101,94,0,90,89,107],
[103,107,104,100,102,120,0,112,112],
[107,112,108,108,102,121,98,0,129],
[93,86,85,92,81,103,98,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,210,105,105,105,210,105,210],
[0,0,105,105,105,105,210,0,0],
[0,105,0,105,105,0,105,0,105],
[105,105,105,0,0,105,105,0,105],
[105,105,105,210,0,105,105,105,105],
[105,105,210,105,105,0,105,105,105],
[0,0,105,105,105,105,0,0,0],
[105,210,210,210,105,105,210,0,210],
[0,210,105,105,105,105,210,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,112,104,111,108,109,123,124],
[97,0,100,100,110,95,97,121,110],
[98,110,0,110,107,96,108,130,112],
[106,110,100,0,116,114,113,127,120],
[99,100,103,94,0,88,94,119,111],
[102,115,114,96,122,0,105,123,109],
[101,113,102,97,116,105,0,116,107],
[87,89,80,83,91,87,94,0,84],
[86,100,98,90,99,101,103,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,110,113,107,116,115,121,120],
[108,0,109,106,107,107,104,116,123],
[100,101,0,103,88,100,101,113,106],
[97,104,107,0,101,104,104,110,120],
[103,103,122,109,0,113,106,108,116],
[94,103,110,106,97,0,102,114,122],
[95,106,109,106,104,108,0,119,121],
[89,94,97,100,102,96,91,0,104],
[90,87,104,90,94,88,89,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,125,113,102,110,117,112,119],
[102,0,120,103,112,95,108,103,117],
[85,90,0,103,86,91,97,98,104],
[97,107,107,0,93,99,106,98,109],
[108,98,124,117,0,101,110,107,112],
[100,115,119,111,109,0,111,99,99],
[93,102,113,104,100,99,0,107,102],
[98,107,112,112,103,111,103,0,99],
[91,93,106,101,98,111,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,95,109,104,83,98,107,101],
[114,0,112,112,101,106,101,103,100],
[115,98,0,107,97,102,100,111,103],
[101,98,103,0,93,98,97,95,92],
[106,109,113,117,0,102,102,106,103],
[127,104,108,112,108,0,111,105,107],
[112,109,110,113,108,99,0,110,102],
[103,107,99,115,104,105,100,0,98],
[109,110,107,118,107,103,108,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,125,106,132,107,131,126,129],
[115,0,119,93,114,114,115,112,114],
[85,91,0,81,93,99,135,104,83],
[104,117,129,0,117,111,121,111,83],
[78,96,117,93,0,99,99,84,98],
[103,96,111,99,111,0,124,120,99],
[79,95,75,89,111,86,0,94,74],
[84,98,106,99,126,90,116,0,87],
[81,96,127,127,112,111,136,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,115,103,111,106,114,104,120],
[113,0,133,106,98,116,117,114,131],
[95,77,0,94,86,98,96,112,103],
[107,104,116,0,83,107,83,106,83],
[99,112,124,127,0,123,132,127,123],
[104,94,112,103,87,0,91,78,72],
[96,93,114,127,78,119,0,94,98],
[106,96,98,104,83,132,116,0,122],
[90,79,107,127,87,138,112,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,115,113,108,113,105,104,120],
[103,0,108,103,101,111,101,106,112],
[95,102,0,109,95,116,102,99,114],
[97,107,101,0,101,102,86,100,111],
[102,109,115,109,0,107,100,109,110],
[97,99,94,108,103,0,96,100,103],
[105,109,108,124,110,114,0,106,115],
[106,104,111,110,101,110,104,0,117],
[90,98,96,99,100,107,95,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,101,96,114,131,109,110,105],
[114,0,119,116,121,117,98,116,118],
[109,91,0,117,118,122,95,128,113],
[114,94,93,0,109,119,89,114,105],
[96,89,92,101,0,107,105,98,113],
[79,93,88,91,103,0,90,93,88],
[101,112,115,121,105,120,0,103,118],
[100,94,82,96,112,117,107,0,93],
[105,92,97,105,97,122,92,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,111,125,109,109,98,104,110],
[101,0,108,120,103,102,103,99,115],
[99,102,0,113,106,101,100,107,109],
[85,90,97,0,98,96,91,100,103],
[101,107,104,112,0,104,99,120,119],
[101,108,109,114,106,0,99,101,110],
[112,107,110,119,111,111,0,105,115],
[106,111,103,110,90,109,105,0,107],
[100,95,101,107,91,100,95,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,89,91,107,105,94,85,100],
[122,0,108,116,112,111,103,114,101],
[121,102,0,98,113,106,99,106,108],
[119,94,112,0,109,103,97,104,106],
[103,98,97,101,0,88,91,93,93],
[105,99,104,107,122,0,107,102,112],
[116,107,111,113,119,103,0,109,96],
[125,96,104,106,117,108,101,0,105],
[110,109,102,104,117,98,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,109,91,86,105,103,94,95],
[103,0,117,96,97,119,111,108,107],
[101,93,0,101,82,112,103,110,100],
[119,114,109,0,105,117,123,104,110],
[124,113,128,105,0,122,120,105,117],
[105,91,98,93,88,0,112,98,114],
[107,99,107,87,90,98,0,114,108],
[116,102,100,106,105,112,96,0,120],
[115,103,110,100,93,96,102,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,134,89,103,114,77,92,86],
[119,0,119,116,127,133,97,116,103],
[76,91,0,83,79,103,86,97,91],
[121,94,127,0,115,133,117,109,109],
[107,83,131,95,0,132,94,90,88],
[96,77,107,77,78,0,79,101,68],
[133,113,124,93,116,131,0,124,93],
[118,94,113,101,120,109,86,0,94],
[124,107,119,101,122,142,117,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,127,107,102,116,112,101,110,105],
[83,0,96,94,105,93,96,96,95],
[103,114,0,106,111,122,104,116,102],
[108,116,104,0,109,118,97,111,99],
[94,105,99,101,0,111,98,102,88],
[98,117,88,92,99,0,99,105,101],
[109,114,106,113,112,111,0,106,89],
[100,114,94,99,108,105,104,0,92],
[105,115,108,111,122,109,121,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,145,93,117,105,124,124,124],
[70,0,112,84,84,112,104,98,89],
[65,98,0,76,72,99,97,87,84],
[117,126,134,0,114,125,116,112,87],
[93,126,138,96,0,123,115,100,98],
[105,98,111,85,87,0,105,105,78],
[86,106,113,94,95,105,0,91,95],
[86,112,123,98,110,105,119,0,106],
[86,121,126,123,112,132,115,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,111,109,106,90,107,97,106],
[98,0,83,89,97,83,102,87,104],
[99,127,0,96,100,88,104,84,109],
[101,121,114,0,91,79,113,84,105],
[104,113,110,119,0,100,112,100,118],
[120,127,122,131,110,0,121,105,124],
[103,108,106,97,98,89,0,83,108],
[113,123,126,126,110,105,127,0,116],
[104,106,101,105,92,86,102,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,102,98,87,86,91,83,99],
[119,0,93,113,108,118,99,107,109],
[108,117,0,105,90,100,94,125,108],
[112,97,105,0,114,101,94,110,104],
[123,102,120,96,0,103,113,111,103],
[124,92,110,109,107,0,104,117,107],
[119,111,116,116,97,106,0,107,90],
[127,103,85,100,99,93,103,0,101],
[111,101,102,106,107,103,120,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,119,100,114,114,119,103,110],
[102,0,104,90,96,89,94,96,95],
[91,106,0,88,110,101,103,101,96],
[110,120,122,0,124,100,110,113,115],
[96,114,100,86,0,99,106,99,92],
[96,121,109,110,111,0,110,104,102],
[91,116,107,100,104,100,0,91,103],
[107,114,109,97,111,106,119,0,100],
[100,115,114,95,118,108,107,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,101,127,103,116,104,127,96],
[90,0,85,96,104,86,88,106,80],
[109,125,0,124,124,99,115,102,107],
[83,114,86,0,84,108,85,90,91],
[107,106,86,126,0,98,86,95,86],
[94,124,111,102,112,0,89,108,93],
[106,122,95,125,124,121,0,113,110],
[83,104,108,120,115,102,97,0,100],
[114,130,103,119,124,117,100,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,114,131,116,121,109,107,92],
[121,0,131,120,104,121,127,103,111],
[96,79,0,129,100,127,118,98,114],
[79,90,81,0,99,115,94,90,93],
[94,106,110,111,0,125,119,106,113],
[89,89,83,95,85,0,102,110,92],
[101,83,92,116,91,108,0,104,87],
[103,107,112,120,104,100,106,0,107],
[118,99,96,117,97,118,123,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,106,109,106,92,104,107],
[98,0,128,102,109,110,106,107,121],
[96,82,0,91,102,86,89,99,98],
[104,108,119,0,112,104,106,112,103],
[101,101,108,98,0,88,79,104,108],
[104,100,124,106,122,0,98,104,101],
[118,104,121,104,131,112,0,111,115],
[106,103,111,98,106,106,99,0,120],
[103,89,112,107,102,109,95,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,149,139,92,95,135,88,110],
[71,0,65,85,38,60,78,48,69],
[61,145,0,121,88,96,109,97,77],
[71,125,89,0,88,100,87,59,69],
[118,172,122,122,0,117,132,92,122],
[115,150,114,110,93,0,125,103,102],
[75,132,101,123,78,85,0,83,104],
[122,162,113,151,118,107,127,0,86],
[100,141,133,141,88,108,106,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,119,101,100,89,63,94,103],
[98,0,100,96,105,83,91,96,101],
[91,110,0,98,86,83,82,76,96],
[109,114,112,0,103,97,94,99,91],
[110,105,124,107,0,95,105,106,101],
[121,127,127,113,115,0,119,98,122],
[147,119,128,116,105,91,0,100,103],
[116,114,134,111,104,112,110,0,117],
[107,109,114,119,109,88,107,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,105,109,103,99,114,102,123],
[112,0,107,114,99,116,108,118,123],
[105,103,0,113,104,101,114,105,114],
[101,96,97,0,95,92,105,102,111],
[107,111,106,115,0,106,103,108,109],
[111,94,109,118,104,0,113,106,118],
[96,102,96,105,107,97,0,106,98],
[108,92,105,108,102,104,104,0,108],
[87,87,96,99,101,92,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,106,117,111,107,110,120],
[105,0,125,108,138,121,142,120,122],
[88,85,0,84,92,92,100,71,106],
[104,102,126,0,111,125,114,124,108],
[93,72,118,99,0,105,83,102,117],
[99,89,118,85,105,0,98,100,115],
[103,68,110,96,127,112,0,83,119],
[100,90,139,86,108,110,127,0,125],
[90,88,104,102,93,95,91,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,126,116,105,111,124,116,119],
[106,0,108,102,112,103,108,113,105],
[84,102,0,92,99,95,100,114,99],
[94,108,118,0,115,109,114,104,106],
[105,98,111,95,0,102,108,114,99],
[99,107,115,101,108,0,114,107,98],
[86,102,110,96,102,96,0,101,98],
[94,97,96,106,96,103,109,0,88],
[91,105,111,104,111,112,112,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,106,116,125,125,105,124,92],
[92,0,85,94,103,103,89,89,96],
[104,125,0,88,102,99,92,93,96],
[94,116,122,0,118,98,108,118,133],
[85,107,108,92,0,123,87,117,114],
[85,107,111,112,87,0,103,115,117],
[105,121,118,102,123,107,0,123,122],
[86,121,117,92,93,95,87,0,83],
[118,114,114,77,96,93,88,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,116,98,122,105,106,110,113],
[88,0,113,94,108,103,103,109,116],
[94,97,0,94,102,89,101,97,108],
[112,116,116,0,120,124,103,117,115],
[88,102,108,90,0,90,99,89,102],
[105,107,121,86,120,0,99,101,118],
[104,107,109,107,111,111,0,111,112],
[100,101,113,93,121,109,99,0,110],
[97,94,102,95,108,92,98,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,114,106,114,95,98,109,120],
[104,0,107,122,114,103,104,115,113],
[96,103,0,112,112,107,103,107,110],
[104,88,98,0,102,106,108,97,111],
[96,96,98,108,0,103,104,102,113],
[115,107,103,104,107,0,92,112,117],
[112,106,107,102,106,118,0,107,111],
[101,95,103,113,108,98,103,0,106],
[90,97,100,99,97,93,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,86,43,43,43,43,43,43],
[124,0,127,41,41,84,41,43,84],
[124,83,0,124,83,43,83,83,42],
[167,169,86,0,83,86,43,126,128],
[167,169,127,127,0,127,84,43,127],
[167,126,167,124,83,0,167,126,126],
[167,169,127,167,126,43,0,169,126],
[167,167,127,84,167,84,41,0,84],
[167,126,168,82,83,84,84,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,86,101,90,98,83,81,86,98],
[124,0,105,97,102,96,92,102,103],
[109,105,0,103,112,98,109,100,100],
[120,113,107,0,131,96,112,112,116],
[112,108,98,79,0,96,99,89,80],
[127,114,112,114,114,0,111,105,113],
[129,118,101,98,111,99,0,103,110],
[124,108,110,98,121,105,107,0,121],
[112,107,110,94,130,97,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,115,111,118,107,117,106,103],
[108,0,112,104,121,122,107,99,101],
[95,98,0,90,122,94,80,103,94],
[99,106,120,0,126,115,98,93,96],
[92,89,88,84,0,96,95,77,76],
[103,88,116,95,114,0,113,100,106],
[93,103,130,112,115,97,0,111,123],
[104,111,107,117,133,110,99,0,114],
[107,109,116,114,134,104,87,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,98,99,114,112,56,97,126],
[139,0,82,98,124,113,85,85,97],
[112,128,0,127,111,116,111,85,139],
[111,112,83,0,110,84,82,41,111],
[96,86,99,100,0,99,99,115,141],
[98,97,94,126,111,0,95,69,122],
[154,125,99,128,111,115,0,97,111],
[113,125,125,169,95,141,113,0,152],
[84,113,71,99,69,88,99,58,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,120,108,117,103,107,122,118],
[92,0,97,108,81,100,100,109,99],
[90,113,0,94,85,112,96,96,101],
[102,102,116,0,95,113,106,117,97],
[93,129,125,115,0,126,115,117,109],
[107,110,98,97,84,0,91,94,93],
[103,110,114,104,95,119,0,108,97],
[88,101,114,93,93,116,102,0,99],
[92,111,109,113,101,117,113,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,91,92,86,117,103,97],
[105,0,107,82,90,88,99,97,82],
[92,103,0,86,84,91,94,96,80],
[119,128,124,0,101,124,120,106,95],
[118,120,126,109,0,103,111,107,121],
[124,122,119,86,107,0,110,107,97],
[93,111,116,90,99,100,0,87,81],
[107,113,114,104,103,103,123,0,107],
[113,128,130,115,89,113,129,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,96,109,109,105,117,103,103],
[114,0,119,125,99,105,118,126,114],
[114,91,0,113,92,91,100,112,104],
[101,85,97,0,95,100,98,107,97],
[101,111,118,115,0,104,114,114,114],
[105,105,119,110,106,0,114,118,120],
[93,92,110,112,96,96,0,112,109],
[107,84,98,103,96,92,98,0,101],
[107,96,106,113,96,90,101,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,87,112,93,89,84,89,86],
[117,0,102,113,85,124,108,108,105],
[123,108,0,127,110,122,130,104,118],
[98,97,83,0,102,94,88,92,85],
[117,125,100,108,0,89,111,103,116],
[121,86,88,116,121,0,111,97,91],
[126,102,80,122,99,99,0,118,112],
[121,102,106,118,107,113,92,0,109],
[124,105,92,125,94,119,98,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,95,86,87,107,99,95,98],
[100,0,98,99,95,97,100,90,100],
[115,112,0,96,109,105,111,100,99],
[124,111,114,0,98,101,117,112,107],
[123,115,101,112,0,106,120,110,98],
[103,113,105,109,104,0,108,112,104],
[111,110,99,93,90,102,0,100,96],
[115,120,110,98,100,98,110,0,110],
[112,110,111,103,112,106,114,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,123,125,97,105,109,107,118],
[115,0,124,120,87,106,111,104,121],
[87,86,0,102,86,87,95,89,96],
[85,90,108,0,84,82,88,79,94],
[113,123,124,126,0,105,112,112,113],
[105,104,123,128,105,0,107,106,99],
[101,99,115,122,98,103,0,90,102],
[103,106,121,131,98,104,120,0,104],
[92,89,114,116,97,111,108,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,103,108,108,94,108,115,119],
[106,0,95,101,107,107,101,116,120],
[107,115,0,93,121,109,104,106,97],
[102,109,117,0,111,108,120,115,99],
[102,103,89,99,0,102,116,116,103],
[116,103,101,102,108,0,128,111,110],
[102,109,106,90,94,82,0,97,106],
[95,94,104,95,94,99,113,0,85],
[91,90,113,111,107,100,104,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,108,118,109,97,108,104,106],
[108,0,123,112,105,114,122,109,109],
[102,87,0,112,105,88,117,94,106],
[92,98,98,0,88,95,110,106,105],
[101,105,105,122,0,107,109,103,126],
[113,96,122,115,103,0,105,117,118],
[102,88,93,100,101,105,0,98,108],
[106,101,116,104,107,93,112,0,109],
[104,101,104,105,84,92,102,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,111,106,114,122,106,105],
[108,0,105,110,100,118,108,109,111],
[99,105,0,117,110,113,110,96,114],
[99,100,93,0,99,103,107,98,114],
[104,110,100,111,0,111,109,107,113],
[96,92,97,107,99,0,103,94,113],
[88,102,100,103,101,107,0,99,107],
[104,101,114,112,103,116,111,0,109],
[105,99,96,96,97,97,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,104,118,110,131,109,114],
[96,0,93,101,126,96,118,86,124],
[106,117,0,118,137,101,136,105,142],
[106,109,92,0,125,98,126,113,117],
[92,84,73,85,0,85,102,87,97],
[100,114,109,112,125,0,112,91,117],
[79,92,74,84,108,98,0,92,101],
[101,124,105,97,123,119,118,0,129],
[96,86,68,93,113,93,109,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,120,100,79,116,112,139,105],
[86,0,93,93,71,70,89,107,87],
[90,117,0,93,77,92,93,101,90],
[110,117,117,0,91,110,107,118,72],
[131,139,133,119,0,127,138,129,99],
[94,140,118,100,83,0,107,133,87],
[98,121,117,103,72,103,0,126,94],
[71,103,109,92,81,77,84,0,90],
[105,123,120,138,111,123,116,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,112,87,107,118,96,103,112],
[106,0,127,88,94,109,79,101,92],
[98,83,0,78,87,97,84,82,78],
[123,122,132,0,97,111,97,120,101],
[103,116,123,113,0,136,102,121,115],
[92,101,113,99,74,0,82,95,94],
[114,131,126,113,108,128,0,112,100],
[107,109,128,90,89,115,98,0,102],
[98,118,132,109,95,116,110,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,112,104,112,116,105,101,115],
[98,0,104,106,111,111,110,111,112],
[98,106,0,106,105,113,117,105,111],
[106,104,104,0,109,110,118,114,120],
[98,99,105,101,0,113,102,107,110],
[94,99,97,100,97,0,102,105,101],
[105,100,93,92,108,108,0,104,109],
[109,99,105,96,103,105,106,0,110],
[95,98,99,90,100,109,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,85,104,125,103,125,146,126],
[128,0,129,86,108,108,84,170,126],
[125,81,0,124,126,125,123,189,166],
[106,124,86,0,107,106,106,169,125],
[85,102,84,103,0,85,105,125,147],
[107,102,85,104,125,0,105,168,146],
[85,126,87,104,105,105,0,148,106],
[64,40,21,41,85,42,62,0,127],
[84,84,44,85,63,64,104,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,101,110,103,124,114,120,108],
[103,0,108,117,106,112,105,109,102],
[109,102,0,120,103,109,110,118,109],
[100,93,90,0,103,110,111,99,102],
[107,104,107,107,0,118,117,109,102],
[86,98,101,100,92,0,101,92,90],
[96,105,100,99,93,109,0,106,105],
[90,101,92,111,101,118,104,0,104],
[102,108,101,108,108,120,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,98,104,98,106,102,101,116],
[101,0,95,104,109,94,93,94,113],
[112,115,0,121,109,100,110,109,113],
[106,106,89,0,91,95,84,96,105],
[112,101,101,119,0,100,119,115,122],
[104,116,110,115,110,0,99,116,111],
[108,117,100,126,91,111,0,109,109],
[109,116,101,114,95,94,101,0,110],
[94,97,97,105,88,99,101,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,107,93,93,103,112,103,113],
[110,0,117,111,111,101,121,116,118],
[103,93,0,85,100,94,115,97,99],
[117,99,125,0,118,101,121,105,126],
[117,99,110,92,0,103,110,94,123],
[107,109,116,109,107,0,123,99,130],
[98,89,95,89,100,87,0,94,101],
[107,94,113,105,116,111,116,0,117],
[97,92,111,84,87,80,109,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,109,101,113,115,118,107,113],
[99,0,104,107,116,115,102,109,117],
[101,106,0,113,109,136,124,108,111],
[109,103,97,0,117,106,112,111,108],
[97,94,101,93,0,116,116,112,113],
[95,95,74,104,94,0,103,103,109],
[92,108,86,98,94,107,0,99,110],
[103,101,102,99,98,107,111,0,118],
[97,93,99,102,97,101,100,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,102,116,94,97,97,110,97],
[95,0,115,117,99,105,102,103,100],
[108,95,0,119,111,117,98,98,104],
[94,93,91,0,104,112,100,99,92],
[116,111,99,106,0,97,99,104,101],
[113,105,93,98,113,0,109,113,106],
[113,108,112,110,111,101,0,123,106],
[100,107,112,111,106,97,87,0,97],
[113,110,106,118,109,104,104,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,101,112,98,98,102,118,90],
[116,0,96,112,96,111,119,109,109],
[109,114,0,95,112,116,112,126,110],
[98,98,115,0,109,96,113,114,111],
[112,114,98,101,0,110,115,117,115],
[112,99,94,114,100,0,113,120,116],
[108,91,98,97,95,97,0,99,97],
[92,101,84,96,93,90,111,0,90],
[120,101,100,99,95,94,113,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,100,102,108,106,108,101,95],
[115,0,109,114,113,106,114,107,95],
[110,101,0,106,112,102,115,99,105],
[108,96,104,0,113,90,108,97,96],
[102,97,98,97,0,105,98,99,90],
[104,104,108,120,105,0,115,96,94],
[102,96,95,102,112,95,0,93,94],
[109,103,111,113,111,114,117,0,102],
[115,115,105,114,120,116,116,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,104,118,112,115,104,104,102],
[109,0,112,110,130,109,101,106,97],
[106,98,0,113,117,118,105,107,106],
[92,100,97,0,111,101,101,95,100],
[98,80,93,99,0,106,95,96,95],
[95,101,92,109,104,0,103,100,96],
[106,109,105,109,115,107,0,101,102],
[106,104,103,115,114,110,109,0,99],
[108,113,104,110,115,114,108,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,111,95,101,110,113,101,108],
[120,0,106,102,112,121,132,107,107],
[99,104,0,109,95,107,115,83,91],
[115,108,101,0,95,110,110,97,102],
[109,98,115,115,0,120,128,120,115],
[100,89,103,100,90,0,108,105,103],
[97,78,95,100,82,102,0,85,96],
[109,103,127,113,90,105,125,0,103],
[102,103,119,108,95,107,114,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,122,99,110,127,101,99,103],
[106,0,113,91,107,117,109,105,84],
[88,97,0,97,100,106,108,95,96],
[111,119,113,0,115,123,121,103,105],
[100,103,110,95,0,122,113,96,103],
[83,93,104,87,88,0,90,101,89],
[109,101,102,89,97,120,0,94,92],
[111,105,115,107,114,109,116,0,100],
[107,126,114,105,107,121,118,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,98,124,76,100,99,109],
[116,0,96,114,117,98,97,96,104],
[112,114,0,96,135,95,100,87,126],
[112,96,114,0,132,105,111,113,113],
[86,93,75,78,0,71,92,75,96],
[134,112,115,105,139,0,103,123,131],
[110,113,110,99,118,107,0,113,135],
[111,114,123,97,135,87,97,0,121],
[101,106,84,97,114,79,75,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,122,100,100,118,110,102,120],
[101,0,125,119,109,114,114,99,109],
[88,85,0,88,94,89,84,83,105],
[110,91,122,0,107,103,113,105,110],
[110,101,116,103,0,119,105,107,107],
[92,96,121,107,91,0,100,90,105],
[100,96,126,97,105,110,0,105,101],
[108,111,127,105,103,120,105,0,123],
[90,101,105,100,103,105,109,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,109,101,101,107,105,108],
[100,0,106,107,95,103,103,107,112],
[114,104,0,107,98,103,107,108,105],
[101,103,103,0,96,99,101,113,101],
[109,115,112,114,0,106,103,118,128],
[109,107,107,111,104,0,103,116,115],
[103,107,103,109,107,107,0,112,115],
[105,103,102,97,92,94,98,0,104],
[102,98,105,109,82,95,95,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,115,115,102,106,107,107],
[102,0,106,120,111,120,108,100,108],
[103,104,0,110,107,111,102,99,105],
[95,90,100,0,110,92,99,99,105],
[95,99,103,100,0,117,105,109,111],
[108,90,99,118,93,0,102,99,105],
[104,102,108,111,105,108,0,108,100],
[103,110,111,111,101,111,102,0,105],
[103,102,105,105,99,105,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,94,117,91,118,90,115,103],
[93,0,107,116,107,112,103,119,107],
[116,103,0,124,100,127,121,111,128],
[93,94,86,0,85,94,84,99,110],
[119,103,110,125,0,116,113,133,116],
[92,98,83,116,94,0,75,101,110],
[120,107,89,126,97,135,0,137,116],
[95,91,99,111,77,109,73,0,104],
[107,103,82,100,94,100,94,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,110,89,98,99,104,106,110],
[115,0,119,110,108,106,122,94,105],
[100,91,0,90,114,99,107,93,101],
[121,100,120,0,103,113,109,103,118],
[112,102,96,107,0,112,121,103,99],
[111,104,111,97,98,0,112,111,110],
[106,88,103,101,89,98,0,106,100],
[104,116,117,107,107,99,104,0,88],
[100,105,109,92,111,100,110,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,96,103,134,111,89,97,103],
[134,0,103,136,128,144,110,122,118],
[114,107,0,106,104,134,95,112,134],
[107,74,104,0,128,102,91,112,94],
[76,82,106,82,0,119,98,107,105],
[99,66,76,108,91,0,82,102,81],
[121,100,115,119,112,128,0,110,106],
[113,88,98,98,103,108,100,0,91],
[107,92,76,116,105,129,104,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,109,132,120,114,115,117,108],
[105,0,110,111,127,120,113,114,113],
[101,100,0,129,129,119,110,97,100],
[78,99,81,0,101,104,99,94,100],
[90,83,81,109,0,96,92,76,101],
[96,90,91,106,114,0,106,106,92],
[95,97,100,111,118,104,0,89,105],
[93,96,113,116,134,104,121,0,108],
[102,97,110,110,109,118,105,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,97,96,107,100,102,94,114],
[105,0,108,113,113,101,112,97,108],
[113,102,0,107,114,110,117,103,116],
[114,97,103,0,99,105,110,105,106],
[103,97,96,111,0,111,107,107,113],
[110,109,100,105,99,0,101,94,113],
[108,98,93,100,103,109,0,92,112],
[116,113,107,105,103,116,118,0,114],
[96,102,94,104,97,97,98,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,131,92,109,126,119,103,105],
[93,0,110,105,94,108,112,105,91],
[79,100,0,76,94,109,98,96,92],
[118,105,134,0,121,127,122,118,100],
[101,116,116,89,0,122,111,98,89],
[84,102,101,83,88,0,101,88,88],
[91,98,112,88,99,109,0,111,92],
[107,105,114,92,112,122,99,0,91],
[105,119,118,110,121,122,118,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,147,147,105,106,147,105,106,168],
[63,0,128,64,63,104,21,63,146],
[63,82,0,84,84,103,42,63,125],
[105,146,126,0,64,167,64,106,146],
[104,147,126,146,0,167,103,147,147],
[63,106,107,43,43,0,64,43,105],
[105,189,168,146,107,146,0,126,189],
[104,147,147,104,63,167,84,0,167],
[42,64,85,64,63,105,21,43,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,86,88,95,86,83,98,70],
[115,0,80,85,85,95,84,91,73],
[124,130,0,119,89,105,112,113,98],
[122,125,91,0,94,113,84,124,110],
[115,125,121,116,0,117,122,100,105],
[124,115,105,97,93,0,97,117,116],
[127,126,98,126,88,113,0,98,102],
[112,119,97,86,110,93,112,0,91],
[140,137,112,100,105,94,108,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,102,97,99,99,96,118],
[98,0,105,121,95,107,107,102,104],
[100,105,0,114,93,110,98,109,108],
[108,89,96,0,102,107,109,98,105],
[113,115,117,108,0,104,101,103,117],
[111,103,100,103,106,0,104,102,110],
[111,103,112,101,109,106,0,100,108],
[114,108,101,112,107,108,110,0,114],
[92,106,102,105,93,100,102,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,105,111,109,117,109,108],
[96,0,86,105,103,92,111,113,117],
[103,124,0,123,114,105,122,115,117],
[105,105,87,0,98,105,93,110,112],
[99,107,96,112,0,94,111,114,110],
[101,118,105,105,116,0,110,110,120],
[93,99,88,117,99,100,0,112,111],
[101,97,95,100,96,100,98,0,110],
[102,93,93,98,100,90,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,108,109,101,133,117,111],
[101,0,100,109,103,99,118,120,109],
[103,110,0,110,106,110,117,111,105],
[102,101,100,0,98,97,118,111,103],
[101,107,104,112,0,108,121,121,105],
[109,111,100,113,102,0,126,113,106],
[77,92,93,92,89,84,0,101,98],
[93,90,99,99,89,97,109,0,108],
[99,101,105,107,105,104,112,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,97,82,108,92,89,97,76],
[109,0,105,89,116,106,106,110,91],
[113,105,0,101,133,118,111,114,94],
[128,121,109,0,113,104,113,110,113],
[102,94,77,97,0,101,85,95,82],
[118,104,92,106,109,0,98,104,77],
[121,104,99,97,125,112,0,94,89],
[113,100,96,100,115,106,116,0,96],
[134,119,116,97,128,133,121,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,106,128,116,91,90,119,85],
[115,0,107,120,111,87,111,104,99],
[104,103,0,125,118,113,112,121,106],
[82,90,85,0,113,108,104,106,86],
[94,99,92,97,0,87,94,109,93],
[119,123,97,102,123,0,102,111,110],
[120,99,98,106,116,108,0,119,102],
[91,106,89,104,101,99,91,0,92],
[125,111,104,124,117,100,108,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,111,104,108,108,97,100,109],
[115,0,121,105,102,103,116,121,115],
[99,89,0,98,81,90,97,114,97],
[106,105,112,0,102,111,107,114,123],
[102,108,129,108,0,104,98,117,106],
[102,107,120,99,106,0,100,110,113],
[113,94,113,103,112,110,0,114,108],
[110,89,96,96,93,100,96,0,111],
[101,95,113,87,104,97,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,94,109,103,101,95,115],
[103,0,111,97,102,109,98,105,110],
[108,99,0,97,104,110,104,91,110],
[116,113,113,0,112,121,101,117,116],
[101,108,106,98,0,106,97,94,115],
[107,101,100,89,104,0,95,93,109],
[109,112,106,109,113,115,0,101,127],
[115,105,119,93,116,117,109,0,120],
[95,100,100,94,95,101,83,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,90,116,82,100,102,80,106],
[81,0,81,74,50,77,67,82,86],
[120,129,0,118,105,109,114,123,119],
[94,136,92,0,75,98,98,98,103],
[128,160,105,135,0,103,113,112,107],
[110,133,101,112,107,0,115,100,116],
[108,143,96,112,97,95,0,103,117],
[130,128,87,112,98,110,107,0,108],
[104,124,91,107,103,94,93,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,98,87,102,93,94,113,92],
[114,0,114,86,104,107,100,113,102],
[112,96,0,90,105,109,97,112,118],
[123,124,120,0,109,104,111,126,104],
[108,106,105,101,0,95,86,107,103],
[117,103,101,106,115,0,98,120,112],
[116,110,113,99,124,112,0,124,121],
[97,97,98,84,103,90,86,0,103],
[118,108,92,106,107,98,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,101,105,116,97,124,91,104],
[97,0,90,113,107,65,116,86,92],
[109,120,0,111,102,109,115,123,115],
[105,97,99,0,104,94,99,104,114],
[94,103,108,106,0,89,98,78,113],
[113,145,101,116,121,0,121,103,116],
[86,94,95,111,112,89,0,83,101],
[119,124,87,106,132,107,127,0,116],
[106,118,95,96,97,94,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,137,95,106,117,101,111,128],
[101,0,150,108,89,112,101,108,107],
[73,60,0,80,71,82,81,78,88],
[115,102,130,0,89,97,124,104,114],
[104,121,139,121,0,113,114,101,122],
[93,98,128,113,97,0,106,107,111],
[109,109,129,86,96,104,0,116,116],
[99,102,132,106,109,103,94,0,110],
[82,103,122,96,88,99,94,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,87,85,96,87,89,94,94],
[121,0,98,102,93,102,105,96,102],
[123,112,0,100,106,88,107,105,107],
[125,108,110,0,108,109,98,118,113],
[114,117,104,102,0,99,109,108,118],
[123,108,122,101,111,0,100,111,108],
[121,105,103,112,101,110,0,114,103],
[116,114,105,92,102,99,96,0,101],
[116,108,103,97,92,102,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,98,101,96,108,102,90,102],
[123,0,105,110,111,113,121,92,115],
[112,105,0,104,110,120,116,102,107],
[109,100,106,0,101,108,108,92,105],
[114,99,100,109,0,103,103,103,101],
[102,97,90,102,107,0,92,98,107],
[108,89,94,102,107,118,0,105,101],
[120,118,108,118,107,112,105,0,118],
[108,95,103,105,109,103,109,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,107,127,111,108,95,98,107],
[99,0,94,113,105,100,94,105,106],
[103,116,0,120,104,97,109,104,114],
[83,97,90,0,101,101,92,85,98],
[99,105,106,109,0,112,101,96,109],
[102,110,113,109,98,0,97,100,112],
[115,116,101,118,109,113,0,112,115],
[112,105,106,125,114,110,98,0,97],
[103,104,96,112,101,98,95,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,109,113,103,106,105,102],
[105,0,113,115,107,102,117,112,107],
[105,97,0,109,106,94,107,104,107],
[101,95,101,0,109,99,107,109,98],
[97,103,104,101,0,100,106,103,93],
[107,108,116,111,110,0,113,105,109],
[104,93,103,103,104,97,0,109,90],
[105,98,106,101,107,105,101,0,94],
[108,103,103,112,117,101,120,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,81,102,110,109,90,107,103],
[106,0,94,93,104,94,107,81,87],
[129,116,0,105,118,100,116,96,101],
[108,117,105,0,108,89,108,96,87],
[100,106,92,102,0,88,107,92,93],
[101,116,110,121,122,0,133,98,109],
[120,103,94,102,103,77,0,88,91],
[103,129,114,114,118,112,122,0,115],
[107,123,109,123,117,101,119,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,104,117,111,124,129,127,120],
[88,0,78,105,90,112,106,106,111],
[106,132,0,120,100,122,121,120,130],
[93,105,90,0,81,105,89,106,94],
[99,120,110,129,0,119,128,130,123],
[86,98,88,105,91,0,97,119,113],
[81,104,89,121,82,113,0,100,112],
[83,104,90,104,80,91,110,0,88],
[90,99,80,116,87,97,98,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,106,111,116,99,111,122,115],
[107,0,101,111,109,103,105,114,111],
[104,109,0,115,110,103,105,105,119],
[99,99,95,0,111,109,101,109,102],
[94,101,100,99,0,107,99,104,102],
[111,107,107,101,103,0,111,104,107],
[99,105,105,109,111,99,0,110,107],
[88,96,105,101,106,106,100,0,104],
[95,99,91,108,108,103,103,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,103,101,109,105,108,97,114],
[109,0,100,104,98,109,107,98,110],
[107,110,0,100,101,108,116,102,110],
[109,106,110,0,102,104,108,111,113],
[101,112,109,108,0,104,102,98,109],
[105,101,102,106,106,0,100,93,108],
[102,103,94,102,108,110,0,89,103],
[113,112,108,99,112,117,121,0,116],
[96,100,100,97,101,102,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,122,104,87,106,113,97,107],
[109,0,119,103,93,95,105,114,114],
[88,91,0,100,91,98,101,91,94],
[106,107,110,0,105,103,102,95,112],
[123,117,119,105,0,116,109,118,115],
[104,115,112,107,94,0,110,112,104],
[97,105,109,108,101,100,0,95,110],
[113,96,119,115,92,98,115,0,104],
[103,96,116,98,95,106,100,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,119,112,107,113,110,93,117],
[101,0,106,111,93,107,95,95,93],
[91,104,0,99,101,97,93,87,98],
[98,99,111,0,100,97,94,94,98],
[103,117,109,110,0,105,95,101,105],
[97,103,113,113,105,0,98,102,112],
[100,115,117,116,115,112,0,116,114],
[117,115,123,116,109,108,94,0,111],
[93,117,112,112,105,98,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,118,110,105,85,102,95,101],
[110,0,106,103,109,97,109,99,116],
[92,104,0,106,97,90,106,83,106],
[100,107,104,0,100,102,101,102,109],
[105,101,113,110,0,106,112,105,114],
[125,113,120,108,104,0,109,115,115],
[108,101,104,109,98,101,0,92,107],
[115,111,127,108,105,95,118,0,124],
[109,94,104,101,96,95,103,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,178,120,91,178,148,146,146,120],
[32,0,88,32,62,180,30,117,91],
[90,122,0,32,90,121,58,88,62],
[119,178,178,0,117,148,117,146,88],
[32,148,120,93,0,148,61,148,88],
[62,30,89,62,62,0,30,60,62],
[64,180,152,93,149,180,0,178,120],
[64,93,122,64,62,150,32,0,91],
[90,119,148,122,122,148,90,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,114,133,102,125,103,108,133],
[99,0,114,121,95,108,107,111,112],
[96,96,0,109,101,108,108,103,107],
[77,89,101,0,87,100,86,86,107],
[108,115,109,123,0,122,103,113,123],
[85,102,102,110,88,0,95,92,111],
[107,103,102,124,107,115,0,107,127],
[102,99,107,124,97,118,103,0,114],
[77,98,103,103,87,99,83,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,117,139,94,138,138,140,71],
[118,0,119,94,118,94,141,140,96],
[93,91,0,117,95,115,117,140,71],
[71,116,93,0,69,67,118,69,93],
[116,92,115,141,0,140,141,92,114],
[72,116,95,143,70,0,143,162,118],
[72,69,93,92,69,67,0,92,69],
[70,70,70,141,118,48,118,0,94],
[139,114,139,117,96,92,141,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,106,134,115,113,115,112,115],
[105,0,109,119,111,108,118,106,106],
[104,101,0,118,115,112,105,104,106],
[76,91,92,0,103,94,92,86,83],
[95,99,95,107,0,99,100,102,99],
[97,102,98,116,111,0,100,102,93],
[95,92,105,118,110,110,0,105,108],
[98,104,106,124,108,108,105,0,111],
[95,104,104,127,111,117,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,89,118,113,105,91,100],
[107,0,122,96,122,117,100,101,111],
[92,88,0,85,95,96,100,85,86],
[121,114,125,0,131,111,117,104,113],
[92,88,115,79,0,99,92,93,93],
[97,93,114,99,111,0,96,99,105],
[105,110,110,93,118,114,0,96,105],
[119,109,125,106,117,111,114,0,105],
[110,99,124,97,117,105,105,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,69,86,94,117,105,123,71],
[93,0,85,98,111,136,117,137,102],
[141,125,0,125,120,146,147,151,97],
[124,112,85,0,96,113,102,113,102],
[116,99,90,114,0,114,100,137,109],
[93,74,64,97,96,0,104,101,71],
[105,93,63,108,110,106,0,122,101],
[87,73,59,97,73,109,88,0,81],
[139,108,113,108,101,139,109,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,99,92,106,100,118,110],
[110,0,93,106,93,95,106,116,92],
[117,117,0,129,94,111,95,109,105],
[111,104,81,0,88,110,104,113,109],
[118,117,116,122,0,131,104,132,116],
[104,115,99,100,79,0,104,110,99],
[110,104,115,106,106,106,0,128,106],
[92,94,101,97,78,100,82,0,85],
[100,118,105,101,94,111,104,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,114,102,108,105,117,126],
[104,0,115,109,122,109,99,113,114],
[102,95,0,104,111,112,114,112,121],
[96,101,106,0,108,92,100,101,109],
[108,88,99,102,0,101,102,107,111],
[102,101,98,118,109,0,107,112,103],
[105,111,96,110,108,103,0,107,105],
[93,97,98,109,103,98,103,0,107],
[84,96,89,101,99,107,105,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,96,103,102,112,98,104],
[107,0,117,110,98,104,123,105,111],
[103,93,0,91,106,93,97,87,101],
[114,100,119,0,104,101,112,106,119],
[107,112,104,106,0,102,119,108,100],
[108,106,117,109,108,0,114,102,109],
[98,87,113,98,91,96,0,89,103],
[112,105,123,104,102,108,121,0,113],
[106,99,109,91,110,101,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,120,130,130,110,116,121,94],
[100,0,135,122,141,116,132,130,119],
[90,75,0,87,109,84,87,92,94],
[80,88,123,0,114,121,114,114,90],
[80,69,101,96,0,85,108,103,89],
[100,94,126,89,125,0,107,94,99],
[94,78,123,96,102,103,0,97,112],
[89,80,118,96,107,116,113,0,125],
[116,91,116,120,121,111,98,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,149,119,121,91,119,90,150,149],
[61,0,119,90,92,61,120,92,122],
[91,91,0,60,91,30,61,61,61],
[89,120,150,0,120,90,120,121,120],
[119,118,119,90,0,149,149,119,180],
[91,149,180,120,61,0,150,90,150],
[120,90,149,90,61,60,0,121,151],
[60,118,149,89,91,120,89,0,120],
[61,88,149,90,30,60,59,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,97,112,110,113,101,106,114],
[93,0,111,104,106,108,112,109,107],
[113,99,0,108,113,113,110,106,103],
[98,106,102,0,105,114,107,108,105],
[100,104,97,105,0,102,103,102,94],
[97,102,97,96,108,0,98,102,100],
[109,98,100,103,107,112,0,111,112],
[104,101,104,102,108,108,99,0,89],
[96,103,107,105,116,110,98,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,116,113,109,115,114,117,117],
[105,0,112,111,102,119,118,108,113],
[94,98,0,102,101,112,108,103,118],
[97,99,108,0,98,96,107,109,112],
[101,108,109,112,0,108,119,112,117],
[95,91,98,114,102,0,113,111,106],
[96,92,102,103,91,97,0,99,109],
[93,102,107,101,98,99,111,0,108],
[93,97,92,98,93,104,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,100,97,110,91,92,89,107],
[110,0,126,104,111,103,94,104,85],
[110,84,0,93,101,94,97,103,80],
[113,106,117,0,99,106,119,88,101],
[100,99,109,111,0,106,117,103,85],
[119,107,116,104,104,0,116,102,84],
[118,116,113,91,93,94,0,98,100],
[121,106,107,122,107,108,112,0,81],
[103,125,130,109,125,126,110,129,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,113,106,96,111,132,103,109],
[112,0,125,96,101,101,113,92,108],
[97,85,0,73,100,99,111,100,101],
[104,114,137,0,116,124,123,106,121],
[114,109,110,94,0,98,115,103,112],
[99,109,111,86,112,0,105,106,114],
[78,97,99,87,95,105,0,88,102],
[107,118,110,104,107,104,122,0,133],
[101,102,109,89,98,96,108,77,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,105,119,106,113,107,100,122],
[104,0,108,109,106,110,107,108,109],
[105,102,0,116,105,101,115,115,113],
[91,101,94,0,106,97,109,107,110],
[104,104,105,104,0,102,114,114,108],
[97,100,109,113,108,0,107,111,110],
[103,103,95,101,96,103,0,103,99],
[110,102,95,103,96,99,107,0,109],
[88,101,97,100,102,100,111,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,112,89,115,112,106,94],
[109,0,103,103,101,102,98,107,101],
[108,107,0,108,107,115,115,117,97],
[98,107,102,0,95,109,105,103,98],
[121,109,103,115,0,108,120,118,105],
[95,108,95,101,102,0,100,98,97],
[98,112,95,105,90,110,0,103,101],
[104,103,93,107,92,112,107,0,106],
[116,109,113,112,105,113,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,95,95,87,111,97,90,108],
[108,0,101,100,110,99,114,92,105],
[115,109,0,100,88,102,99,91,115],
[115,110,110,0,101,112,106,95,97],
[123,100,122,109,0,108,109,110,126],
[99,111,108,98,102,0,109,92,108],
[113,96,111,104,101,101,0,102,114],
[120,118,119,115,100,118,108,0,117],
[102,105,95,113,84,102,96,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,96,122,112,97,101,120,107],
[100,0,93,123,111,96,110,110,100],
[114,117,0,129,113,106,105,112,107],
[88,87,81,0,97,85,89,101,88],
[98,99,97,113,0,92,102,108,98],
[113,114,104,125,118,0,105,115,111],
[109,100,105,121,108,105,0,112,112],
[90,100,98,109,102,95,98,0,94],
[103,110,103,122,112,99,98,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,85,96,89,100,97,106,85],
[107,0,98,115,113,120,108,110,104],
[125,112,0,100,107,113,109,107,107],
[114,95,110,0,103,119,102,113,104],
[121,97,103,107,0,114,107,121,100],
[110,90,97,91,96,0,83,93,104],
[113,102,101,108,103,127,0,106,108],
[104,100,103,97,89,117,104,0,106],
[125,106,103,106,110,106,102,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,127,126,110,104,112,113,119],
[94,0,116,112,107,103,96,106,106],
[83,94,0,112,97,101,86,90,93],
[84,98,98,0,115,103,97,99,86],
[100,103,113,95,0,90,95,106,107],
[106,107,109,107,120,0,94,111,97],
[98,114,124,113,115,116,0,105,109],
[97,104,120,111,104,99,105,0,93],
[91,104,117,124,103,113,101,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,117,108,118,121,103,112,124],
[101,0,101,105,113,109,110,102,107],
[93,109,0,97,118,104,96,101,113],
[102,105,113,0,115,121,109,121,124],
[92,97,92,95,0,98,86,99,108],
[89,101,106,89,112,0,98,100,110],
[107,100,114,101,124,112,0,108,118],
[98,108,109,89,111,110,102,0,121],
[86,103,97,86,102,100,92,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,115,118,109,101,109,108,117],
[106,0,102,89,86,101,104,99,104],
[95,108,0,110,93,105,98,106,108],
[92,121,100,0,87,80,79,101,106],
[101,124,117,123,0,107,110,117,127],
[109,109,105,130,103,0,123,118,126],
[101,106,112,131,100,87,0,104,114],
[102,111,104,109,93,92,106,0,106],
[93,106,102,104,83,84,96,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,116,107,103,116,100,114],
[103,0,101,111,102,106,116,93,105],
[96,109,0,112,103,114,117,106,112],
[94,99,98,0,105,108,107,96,113],
[103,108,107,105,0,110,99,97,102],
[107,104,96,102,100,0,125,94,99],
[94,94,93,103,111,85,0,91,110],
[110,117,104,114,113,116,119,0,120],
[96,105,98,97,108,111,100,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,118,120,111,126,99,113,109],
[105,0,114,120,114,122,106,108,115],
[92,96,0,107,104,132,89,103,112],
[90,90,103,0,110,124,89,100,88],
[99,96,106,100,0,110,105,94,97],
[84,88,78,86,100,0,79,92,91],
[111,104,121,121,105,131,0,94,127],
[97,102,107,110,116,118,116,0,122],
[101,95,98,122,113,119,83,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,122,127,118,113,104,113,103],
[103,0,92,115,110,106,105,91,85],
[88,118,0,104,112,112,105,111,102],
[83,95,106,0,111,109,84,82,90],
[92,100,98,99,0,112,97,96,102],
[97,104,98,101,98,0,99,98,80],
[106,105,105,126,113,111,0,108,105],
[97,119,99,128,114,112,102,0,97],
[107,125,108,120,108,130,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,83,98,108,101,88,103,93],
[106,0,99,108,106,99,103,98,97],
[127,111,0,114,128,107,108,114,102],
[112,102,96,0,119,99,94,109,100],
[102,104,82,91,0,97,100,90,95],
[109,111,103,111,113,0,107,110,105],
[122,107,102,116,110,103,0,104,111],
[107,112,96,101,120,100,106,0,100],
[117,113,108,110,115,105,99,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,113,109,108,103,116,118,107],
[103,0,98,97,109,115,107,123,102],
[97,112,0,101,94,103,102,101,89],
[101,113,109,0,103,107,111,124,106],
[102,101,116,107,0,118,116,117,114],
[107,95,107,103,92,0,108,110,101],
[94,103,108,99,94,102,0,108,94],
[92,87,109,86,93,100,102,0,85],
[103,108,121,104,96,109,116,125,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,119,92,130,139,82,135,124],
[111,0,127,95,105,137,87,122,101],
[91,83,0,80,81,122,73,85,76],
[118,115,130,0,139,124,100,128,125],
[80,105,129,71,0,137,69,93,93],
[71,73,88,86,73,0,86,101,72],
[128,123,137,110,141,124,0,134,104],
[75,88,125,82,117,109,76,0,79],
[86,109,134,85,117,138,106,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,114,104,88,107,109,121,102],
[102,0,119,102,101,113,104,115,118],
[96,91,0,90,85,96,100,101,92],
[106,108,120,0,94,100,110,110,106],
[122,109,125,116,0,107,108,97,115],
[103,97,114,110,103,0,100,112,111],
[101,106,110,100,102,110,0,113,99],
[89,95,109,100,113,98,97,0,104],
[108,92,118,104,95,99,111,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,114,121,125,127,109,128,120],
[111,0,110,94,114,120,124,134,132],
[96,100,0,113,113,114,116,110,117],
[89,116,97,0,116,120,125,123,124],
[85,96,97,94,0,102,100,119,106],
[83,90,96,90,108,0,95,117,97],
[101,86,94,85,110,115,0,94,103],
[82,76,100,87,91,93,116,0,104],
[90,78,93,86,104,113,107,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,101,99,100,113,93,114,109],
[104,0,108,91,110,107,105,112,96],
[109,102,0,95,89,106,96,101,93],
[111,119,115,0,109,118,103,111,107],
[110,100,121,101,0,109,92,118,102],
[97,103,104,92,101,0,92,107,102],
[117,105,114,107,118,118,0,113,104],
[96,98,109,99,92,103,97,0,94],
[101,114,117,103,108,108,106,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,114,102,103,103,81,102],
[110,0,104,108,92,88,114,99,111],
[104,106,0,117,108,109,108,103,116],
[96,102,93,0,81,87,103,86,93],
[108,118,102,129,0,115,121,98,111],
[107,122,101,123,95,0,120,92,113],
[107,96,102,107,89,90,0,91,108],
[129,111,107,124,112,118,119,0,105],
[108,99,94,117,99,97,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,91,103,105,97,100,104,94],
[94,0,87,92,91,91,99,101,93],
[119,123,0,124,103,112,126,112,112],
[107,118,86,0,90,93,92,104,93],
[105,119,107,120,0,101,105,117,113],
[113,119,98,117,109,0,120,102,105],
[110,111,84,118,105,90,0,110,95],
[106,109,98,106,93,108,100,0,113],
[116,117,98,117,97,105,115,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,115,117,105,142,105,97],
[102,0,106,115,104,131,129,127,130],
[115,104,0,117,127,105,139,114,83],
[95,95,93,0,103,109,129,116,97],
[93,106,83,107,0,104,104,81,106],
[105,79,105,101,106,0,130,79,119],
[68,81,71,81,106,80,0,102,82],
[105,83,96,94,129,131,108,0,109],
[113,80,127,113,104,91,128,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,96,85,85,93,87,94,101],
[106,0,95,95,86,92,102,109,111],
[114,115,0,95,98,106,108,105,110],
[125,115,115,0,97,104,119,115,115],
[125,124,112,113,0,113,119,102,121],
[117,118,104,106,97,0,110,98,118],
[123,108,102,91,91,100,0,99,108],
[116,101,105,95,108,112,111,0,111],
[109,99,100,95,89,92,102,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,123,112,105,98,98,106,99],
[106,0,113,128,130,110,107,99,104],
[87,97,0,107,102,87,92,90,89],
[98,82,103,0,112,107,102,101,106],
[105,80,108,98,0,99,104,103,83],
[112,100,123,103,111,0,97,97,88],
[112,103,118,108,106,113,0,115,99],
[104,111,120,109,107,113,95,0,95],
[111,106,121,104,127,122,111,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,112,103,112,102,113,101,110],
[100,0,109,110,116,105,106,108,111],
[98,101,0,87,107,97,97,98,92],
[107,100,123,0,111,108,105,110,110],
[98,94,103,99,0,97,89,88,99],
[108,105,113,102,113,0,100,106,110],
[97,104,113,105,121,110,0,113,107],
[109,102,112,100,122,104,97,0,107],
[100,99,118,100,111,100,103,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,102,106,117,79,126,89,116],
[128,0,104,99,103,95,106,120,127],
[108,106,0,91,88,85,65,97,118],
[104,111,119,0,119,93,131,94,108],
[93,107,122,91,0,91,105,101,125],
[131,115,125,117,119,0,139,99,139],
[84,104,145,79,105,71,0,104,128],
[121,90,113,116,109,111,106,0,139],
[94,83,92,102,85,71,82,71,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,93,104,100,112,97,100,99],
[107,0,106,113,107,128,109,102,107],
[117,104,0,103,111,113,116,110,101],
[106,97,107,0,110,117,102,105,98],
[110,103,99,100,0,116,96,116,101],
[98,82,97,93,94,0,98,103,103],
[113,101,94,108,114,112,0,109,94],
[110,108,100,105,94,107,101,0,98],
[111,103,109,112,109,107,116,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,98,97,104,111,115,98,107],
[111,0,113,96,109,98,103,121,110],
[112,97,0,95,123,96,119,96,103],
[113,114,115,0,93,102,117,105,114],
[106,101,87,117,0,91,123,87,116],
[99,112,114,108,119,0,118,108,113],
[95,107,91,93,87,92,0,85,99],
[112,89,114,105,123,102,125,0,103],
[103,100,107,96,94,97,111,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,107,94,106,109,107,101,105],
[106,0,98,104,105,104,93,101,128],
[103,112,0,86,94,113,104,87,101],
[116,106,124,0,113,107,94,97,116],
[104,105,116,97,0,119,102,109,115],
[101,106,97,103,91,0,82,90,101],
[103,117,106,116,108,128,0,104,120],
[109,109,123,113,101,120,106,0,114],
[105,82,109,94,95,109,90,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,108,89,102,103,93,106,92],
[122,0,117,127,114,107,106,116,105],
[102,93,0,99,96,98,102,102,95],
[121,83,111,0,104,103,107,100,93],
[108,96,114,106,0,108,115,96,96],
[107,103,112,107,102,0,112,103,92],
[117,104,108,103,95,98,0,103,101],
[104,94,108,110,114,107,107,0,106],
[118,105,115,117,114,118,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,86,85,73,97,87,113],
[119,0,103,114,96,107,111,108,117],
[110,107,0,106,99,103,98,116,100],
[124,96,104,0,115,108,116,114,113],
[125,114,111,95,0,108,118,116,124],
[137,103,107,102,102,0,116,114,121],
[113,99,112,94,92,94,0,105,109],
[123,102,94,96,94,96,105,0,95],
[97,93,110,97,86,89,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,110,125,102,107,115,94,90],
[94,0,105,116,91,101,108,97,101],
[100,105,0,125,102,109,116,96,100],
[85,94,85,0,94,93,89,92,85],
[108,119,108,116,0,111,117,93,104],
[103,109,101,117,99,0,125,101,105],
[95,102,94,121,93,85,0,97,106],
[116,113,114,118,117,109,113,0,105],
[120,109,110,125,106,105,104,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,116,112,128,107,113,119,120],
[109,0,115,118,105,119,111,112,125],
[94,95,0,106,121,107,103,106,122],
[98,92,104,0,109,119,107,110,120],
[82,105,89,101,0,91,101,106,112],
[103,91,103,91,119,0,104,114,114],
[97,99,107,103,109,106,0,110,113],
[91,98,104,100,104,96,100,0,109],
[90,85,88,90,98,96,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,98,109,107,114,117,108],
[102,0,115,100,101,97,99,103,94],
[103,95,0,99,84,91,92,87,99],
[112,110,111,0,111,108,118,103,108],
[101,109,126,99,0,113,109,110,107],
[103,113,119,102,97,0,113,98,105],
[96,111,118,92,101,97,0,108,92],
[93,107,123,107,100,112,102,0,113],
[102,116,111,102,103,105,118,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,113,104,101,115,104,101,120],
[109,0,113,97,112,120,93,105,117],
[97,97,0,107,100,115,94,86,116],
[106,113,103,0,92,122,94,102,106],
[109,98,110,118,0,125,110,98,116],
[95,90,95,88,85,0,93,96,99],
[106,117,116,116,100,117,0,101,124],
[109,105,124,108,112,114,109,0,108],
[90,93,94,104,94,111,86,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,100,105,111,105,109,103,104],
[104,0,104,111,111,108,101,94,107],
[110,106,0,113,105,118,106,109,106],
[105,99,97,0,104,113,101,95,99],
[99,99,105,106,0,106,105,100,103],
[105,102,92,97,104,0,102,100,104],
[101,109,104,109,105,108,0,107,114],
[107,116,101,115,110,110,103,0,102],
[106,103,104,111,107,106,96,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,105,116,93,109,104,95],
[116,0,109,102,108,90,109,102,95],
[105,101,0,101,101,94,93,111,107],
[105,108,109,0,111,100,104,101,93],
[94,102,109,99,0,89,104,94,98],
[117,120,116,110,121,0,120,111,103],
[101,101,117,106,106,90,0,102,87],
[106,108,99,109,116,99,108,0,108],
[115,115,103,117,112,107,123,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,71,92,73,109,77,67,89,84],
[139,0,106,106,114,110,106,108,99],
[118,104,0,75,104,124,68,93,104],
[137,104,135,0,126,134,116,104,116],
[101,96,106,84,0,122,90,95,86],
[133,100,86,76,88,0,84,89,87],
[143,104,142,94,120,126,0,103,108],
[121,102,117,106,115,121,107,0,115],
[126,111,106,94,124,123,102,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,102,104,109,110,108,100,104],
[109,0,96,129,118,118,115,113,102],
[108,114,0,117,129,105,105,105,110],
[106,81,93,0,95,99,109,97,104],
[101,92,81,115,0,101,98,104,94],
[100,92,105,111,109,0,99,107,98],
[102,95,105,101,112,111,0,99,108],
[110,97,105,113,106,103,111,0,101],
[106,108,100,106,116,112,102,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,83,87,90,100,97,95,102],
[108,0,92,99,95,93,115,94,113],
[127,118,0,105,130,117,109,114,120],
[123,111,105,0,117,109,125,113,134],
[120,115,80,93,0,111,111,101,121],
[110,117,93,101,99,0,112,100,116],
[113,95,101,85,99,98,0,102,123],
[115,116,96,97,109,110,108,0,124],
[108,97,90,76,89,94,87,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,118,113,105,106,116,105,123],
[84,0,111,108,98,106,105,104,117],
[92,99,0,88,100,101,104,105,110],
[97,102,122,0,101,97,106,116,124],
[105,112,110,109,0,107,108,103,120],
[104,104,109,113,103,0,99,108,118],
[94,105,106,104,102,111,0,102,113],
[105,106,105,94,107,102,108,0,114],
[87,93,100,86,90,92,97,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,106,96,98,118,95,87,97],
[116,0,115,116,114,126,99,105,120],
[104,95,0,98,93,97,97,87,113],
[114,94,112,0,111,120,100,99,117],
[112,96,117,99,0,109,103,106,108],
[92,84,113,90,101,0,95,70,100],
[115,111,113,110,107,115,0,104,108],
[123,105,123,111,104,140,106,0,105],
[113,90,97,93,102,110,102,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,106,110,105,102,122,107,109],
[95,0,104,116,103,114,110,104,98],
[104,106,0,100,94,106,106,101,108],
[100,94,110,0,97,106,112,105,100],
[105,107,116,113,0,111,116,106,107],
[108,96,104,104,99,0,113,100,109],
[88,100,104,98,94,97,0,90,93],
[103,106,109,105,104,110,120,0,110],
[101,112,102,110,103,101,117,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,113,131,86,90,112,136,97],
[92,0,71,103,68,104,111,147,67],
[97,139,0,133,121,91,155,157,120],
[79,107,77,0,87,87,110,109,53],
[124,142,89,123,0,120,143,143,130],
[120,106,119,123,90,0,128,133,77],
[98,99,55,100,67,82,0,101,43],
[74,63,53,101,67,77,109,0,42],
[113,143,90,157,80,133,167,168,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,108,98,125,115,104,117],
[104,0,102,104,101,106,104,99,102],
[102,108,0,108,96,98,104,93,100],
[102,106,102,0,102,109,102,98,100],
[112,109,114,108,0,114,107,106,101],
[85,104,112,101,96,0,104,103,97],
[95,106,106,108,103,106,0,100,108],
[106,111,117,112,104,107,110,0,110],
[93,108,110,110,109,113,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,98,110,106,104,97,110],
[108,0,102,107,122,94,90,112,110],
[101,108,0,114,125,109,103,123,117],
[112,103,96,0,108,96,107,102,123],
[100,88,85,102,0,82,93,97,95],
[104,116,101,114,128,0,109,88,113],
[106,120,107,103,117,101,0,104,121],
[113,98,87,108,113,122,106,0,118],
[100,100,93,87,115,97,89,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,102,110,114,115,108,114,103],
[94,0,106,112,101,109,96,103,92],
[108,104,0,111,114,116,97,111,109],
[100,98,99,0,106,93,89,101,98],
[96,109,96,104,0,103,95,104,103],
[95,101,94,117,107,0,92,99,102],
[102,114,113,121,115,118,0,114,123],
[96,107,99,109,106,111,96,0,108],
[107,118,101,112,107,108,87,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,114,101,111,97,106,105,91],
[98,0,114,109,118,96,108,106,87],
[96,96,0,93,114,105,93,108,92],
[109,101,117,0,122,109,116,112,110],
[99,92,96,88,0,107,108,105,87],
[113,114,105,101,103,0,106,102,94],
[104,102,117,94,102,104,0,102,90],
[105,104,102,98,105,108,108,0,92],
[119,123,118,100,123,116,120,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,99,110,107,97,94,98],
[94,0,98,98,108,101,85,95,98],
[104,112,0,111,109,105,103,99,104],
[111,112,99,0,110,102,100,93,99],
[100,102,101,100,0,94,88,86,89],
[103,109,105,108,116,0,106,88,110],
[113,125,107,110,122,104,0,88,115],
[116,115,111,117,124,122,122,0,102],
[112,112,106,111,121,100,95,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,108,110,107,102,118,120,82],
[106,0,104,115,114,108,98,106,107],
[102,106,0,108,102,109,96,102,101],
[100,95,102,0,90,92,96,115,87],
[103,96,108,120,0,99,101,117,93],
[108,102,101,118,111,0,111,107,100],
[92,112,114,114,109,99,0,122,85],
[90,104,108,95,93,103,88,0,89],
[128,103,109,123,117,110,125,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,107,125,111,140,116,152,92],
[102,0,92,118,116,113,116,165,111],
[103,118,0,110,103,138,111,154,119],
[85,92,100,0,103,93,106,143,70],
[99,94,107,107,0,119,129,154,96],
[70,97,72,117,91,0,117,138,98],
[94,94,99,104,81,93,0,127,97],
[58,45,56,67,56,72,83,0,97],
[118,99,91,140,114,112,113,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,78,105,105,102,104,104,87],
[89,0,56,97,92,100,94,80,88],
[132,154,0,133,119,118,108,131,103],
[105,113,77,0,96,111,87,119,81],
[105,118,91,114,0,81,81,113,88],
[108,110,92,99,129,0,68,98,67],
[106,116,102,123,129,142,0,101,112],
[106,130,79,91,97,112,109,0,116],
[123,122,107,129,122,143,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,114,102,104,113,107,111,118],
[97,0,111,103,100,100,103,107,104],
[96,99,0,98,110,101,98,109,106],
[108,107,112,0,107,107,100,114,111],
[106,110,100,103,0,107,105,109,113],
[97,110,109,103,103,0,109,110,110],
[103,107,112,110,105,101,0,116,103],
[99,103,101,96,101,100,94,0,116],
[92,106,104,99,97,100,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,94,89,109,113,89,100,110],
[115,0,102,129,108,126,111,111,128],
[116,108,0,112,119,118,102,116,123],
[121,81,98,0,104,106,84,97,110],
[101,102,91,106,0,105,82,109,108],
[97,84,92,104,105,0,84,113,102],
[121,99,108,126,128,126,0,121,134],
[110,99,94,113,101,97,89,0,111],
[100,82,87,100,102,108,76,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,105,101,111,105,109,103,109],
[92,0,101,98,111,104,92,99,104],
[105,109,0,108,101,114,102,111,111],
[109,112,102,0,102,105,106,112,113],
[99,99,109,108,0,107,96,109,122],
[105,106,96,105,103,0,107,107,105],
[101,118,108,104,114,103,0,105,119],
[107,111,99,98,101,103,105,0,106],
[101,106,99,97,88,105,91,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,137,108,132,122,136,111,96],
[105,0,116,95,124,92,106,101,95],
[73,94,0,91,88,68,111,94,94],
[102,115,119,0,110,92,111,99,100],
[78,86,122,100,0,90,85,101,87],
[88,118,142,118,120,0,123,108,108],
[74,104,99,99,125,87,0,72,77],
[99,109,116,111,109,102,138,0,106],
[114,115,116,110,123,102,133,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,107,109,104,96,98,96,111],
[105,0,106,116,114,101,109,109,115],
[103,104,0,100,109,97,94,100,109],
[101,94,110,0,101,106,100,98,112],
[106,96,101,109,0,99,105,95,108],
[114,109,113,104,111,0,111,102,111],
[112,101,116,110,105,99,0,114,119],
[114,101,110,112,115,108,96,0,114],
[99,95,101,98,102,99,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,108,105,110,105,110,114,118],
[104,0,102,99,97,109,104,108,113],
[102,108,0,121,105,104,119,118,105],
[105,111,89,0,100,112,105,116,110],
[100,113,105,110,0,111,112,111,110],
[105,101,106,98,99,0,115,112,107],
[100,106,91,105,98,95,0,109,97],
[96,102,92,94,99,98,101,0,94],
[92,97,105,100,100,103,113,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,104,106,96,107,115,95,102],
[102,0,91,101,94,109,107,109,92],
[106,119,0,107,107,101,123,110,109],
[104,109,103,0,106,114,115,102,110],
[114,116,103,104,0,110,109,105,97],
[103,101,109,96,100,0,114,106,96],
[95,103,87,95,101,96,0,89,91],
[115,101,100,108,105,104,121,0,100],
[108,118,101,100,113,114,119,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,89,127,118,107,96,102,107],
[102,0,57,107,88,87,86,58,75],
[121,153,0,111,118,98,109,130,119],
[83,103,99,0,113,67,80,82,99],
[92,122,92,97,0,78,69,81,109],
[103,123,112,143,132,0,102,104,140],
[114,124,101,130,141,108,0,130,90],
[108,152,80,128,129,106,80,0,108],
[103,135,91,111,101,70,120,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,91,104,94,92,87,90,79],
[112,0,109,98,98,92,105,113,112],
[119,101,0,104,97,106,105,108,103],
[106,112,106,0,102,101,89,98,91],
[116,112,113,108,0,101,101,120,104],
[118,118,104,109,109,0,111,103,107],
[123,105,105,121,109,99,0,104,96],
[120,97,102,112,90,107,106,0,99],
[131,98,107,119,106,103,114,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,109,132,114,103,102,109,106],
[116,0,92,107,107,93,102,98,96],
[101,118,0,115,116,103,109,102,92],
[78,103,95,0,102,86,83,102,92],
[96,103,94,108,0,96,96,110,97],
[107,117,107,124,114,0,91,106,124],
[108,108,101,127,114,119,0,108,118],
[101,112,108,108,100,104,102,0,105],
[104,114,118,118,113,86,92,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,107,112,107,100,109,98,102],
[111,0,117,103,108,101,103,99,108],
[103,93,0,102,91,96,103,89,96],
[98,107,108,0,94,101,96,112,100],
[103,102,119,116,0,96,109,104,99],
[110,109,114,109,114,0,102,110,112],
[101,107,107,114,101,108,0,104,109],
[112,111,121,98,106,100,106,0,108],
[108,102,114,110,111,98,101,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,112,101,107,104,103,119],
[96,0,93,100,88,95,108,92,100],
[103,117,0,129,104,117,115,115,138],
[98,110,81,0,94,103,105,88,97],
[109,122,106,116,0,94,127,109,136],
[103,115,93,107,116,0,105,108,103],
[106,102,95,105,83,105,0,93,113],
[107,118,95,122,101,102,117,0,127],
[91,110,72,113,74,107,97,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,93,97,114,97,98,102,118],
[110,0,104,111,117,99,109,99,118],
[117,106,0,108,109,109,96,113,124],
[113,99,102,0,115,117,104,118,116],
[96,93,101,95,0,102,94,106,110],
[113,111,101,93,108,0,104,107,125],
[112,101,114,106,116,106,0,115,115],
[108,111,97,92,104,103,95,0,121],
[92,92,86,94,100,85,95,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,91,87,109,113,100,116,132],
[113,0,100,97,88,101,109,111,116],
[119,110,0,94,103,93,104,113,124],
[123,113,116,0,117,97,104,125,131],
[101,122,107,93,0,95,104,124,121],
[97,109,117,113,115,0,108,118,123],
[110,101,106,106,106,102,0,109,120],
[94,99,97,85,86,92,101,0,108],
[78,94,86,79,89,87,90,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,105,111,110,110,106,103,106],
[118,0,111,112,103,125,118,113,111],
[105,99,0,102,106,112,112,107,117],
[99,98,108,0,103,109,106,105,100],
[100,107,104,107,0,114,117,109,114],
[100,85,98,101,96,0,107,103,102],
[104,92,98,104,93,103,0,101,110],
[107,97,103,105,101,107,109,0,121],
[104,99,93,110,96,108,100,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,106,102,102,114,108,99,110],
[112,0,103,99,96,103,120,112,109],
[104,107,0,110,119,107,107,112,120],
[108,111,100,0,102,105,106,109,107],
[108,114,91,108,0,103,107,102,106],
[96,107,103,105,107,0,104,102,115],
[102,90,103,104,103,106,0,107,112],
[111,98,98,101,108,108,103,0,102],
[100,101,90,103,104,95,98,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,141,117,117,140,118,141,93],
[116,0,140,93,116,116,92,115,116],
[69,70,0,116,69,116,93,92,70],
[93,117,94,0,71,94,94,93,94],
[93,94,141,139,0,92,93,69,117],
[70,94,94,116,118,0,117,93,71],
[92,118,117,116,117,93,0,92,140],
[69,95,118,117,141,117,118,0,140],
[117,94,140,116,93,139,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,90,99,95,89,95,93,72],
[95,0,103,112,98,83,111,96,87],
[120,107,0,95,88,89,100,99,80],
[111,98,115,0,87,90,95,85,78],
[115,112,122,123,0,104,106,104,91],
[121,127,121,120,106,0,107,105,114],
[115,99,110,115,104,103,0,97,85],
[117,114,111,125,106,105,113,0,97],
[138,123,130,132,119,96,125,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,86,109,78,95,103,94,87],
[114,0,103,97,105,97,112,120,112],
[124,107,0,109,97,107,104,105,110],
[101,113,101,0,88,104,110,108,116],
[132,105,113,122,0,99,112,115,122],
[115,113,103,106,111,0,104,113,109],
[107,98,106,100,98,106,0,102,114],
[116,90,105,102,95,97,108,0,99],
[123,98,100,94,88,101,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,88,100,99,97,101,101,85],
[112,0,124,101,87,98,100,94,94],
[122,86,0,95,83,94,97,96,95],
[110,109,115,0,106,105,119,112,112],
[111,123,127,104,0,114,118,104,120],
[113,112,116,105,96,0,114,116,116],
[109,110,113,91,92,96,0,106,103],
[109,116,114,98,106,94,104,0,102],
[125,116,115,98,90,94,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,87,93,99,114,96,77,88],
[105,0,98,91,109,90,106,93,100],
[123,112,0,97,111,99,97,85,119],
[117,119,113,0,139,108,116,85,110],
[111,101,99,71,0,99,99,82,95],
[96,120,111,102,111,0,89,88,102],
[114,104,113,94,111,121,0,112,101],
[133,117,125,125,128,122,98,0,116],
[122,110,91,100,115,108,109,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,120,109,113,122,124,120,117],
[113,0,121,115,109,98,109,116,102],
[90,89,0,88,106,97,98,99,111],
[101,95,122,0,109,107,119,106,127],
[97,101,104,101,0,96,118,98,118],
[88,112,113,103,114,0,100,98,109],
[86,101,112,91,92,110,0,99,111],
[90,94,111,104,112,112,111,0,121],
[93,108,99,83,92,101,99,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,120,105,109,96,114,107,110],
[105,0,107,109,82,85,109,101,91],
[90,103,0,87,79,100,99,96,114],
[105,101,123,0,103,101,147,106,110],
[101,128,131,107,0,104,123,108,109],
[114,125,110,109,106,0,104,101,109],
[96,101,111,63,87,106,0,79,95],
[103,109,114,104,102,109,131,0,115],
[100,119,96,100,101,101,115,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,101,160,120,108,117,140,99],
[70,0,120,85,87,90,88,98,97],
[109,90,0,116,58,67,90,105,67],
[50,125,94,0,94,70,72,110,91],
[90,123,152,116,0,89,100,131,108],
[102,120,143,140,121,0,152,132,112],
[93,122,120,138,110,58,0,140,129],
[70,112,105,100,79,78,70,0,101],
[111,113,143,119,102,98,81,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,109,109,97,106,111,107],
[105,0,104,119,116,96,109,112,110],
[105,106,0,104,102,105,106,113,106],
[101,91,106,0,102,93,97,112,102],
[101,94,108,108,0,101,105,114,96],
[113,114,105,117,109,0,107,125,112],
[104,101,104,113,105,103,0,118,107],
[99,98,97,98,96,85,92,0,102],
[103,100,104,108,114,98,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,143,122,132,99,89,87,121],
[123,0,132,99,119,90,132,123,133],
[67,78,0,65,120,66,101,102,87],
[88,111,145,0,131,120,79,100,123],
[78,91,90,79,0,90,80,112,90],
[111,120,144,90,120,0,89,134,99],
[121,78,109,131,130,121,0,110,87],
[123,87,108,110,98,76,100,0,110],
[89,77,123,87,120,111,123,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,99,107,112,112,119,118,106],
[98,0,104,88,122,80,95,114,112],
[111,106,0,102,109,109,106,114,101],
[103,122,108,0,113,105,112,117,117],
[98,88,101,97,0,102,105,117,104],
[98,130,101,105,108,0,105,115,109],
[91,115,104,98,105,105,0,123,97],
[92,96,96,93,93,95,87,0,91],
[104,98,109,93,106,101,113,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,91,103,111,109,90,106,88],
[93,0,89,94,109,97,88,105,87],
[119,121,0,115,127,111,99,117,102],
[107,116,95,0,122,116,105,108,105],
[99,101,83,88,0,92,82,90,87],
[101,113,99,94,118,0,94,108,82],
[120,122,111,105,128,116,0,122,115],
[104,105,93,102,120,102,88,0,90],
[122,123,108,105,123,128,95,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,95,113,100,99,125,101],
[93,0,96,102,100,91,96,111,107],
[97,114,0,99,109,100,88,110,104],
[115,108,111,0,116,106,100,117,110],
[97,110,101,94,0,107,100,113,107],
[110,119,110,104,103,0,110,123,106],
[111,114,122,110,110,100,0,126,106],
[85,99,100,93,97,87,84,0,95],
[109,103,106,100,103,104,104,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,111,88,109,108,82,103,87],
[118,0,113,113,107,115,102,113,97],
[99,97,0,84,90,99,97,101,89],
[122,97,126,0,101,121,117,107,103],
[101,103,120,109,0,114,102,114,110],
[102,95,111,89,96,0,91,107,79],
[128,108,113,93,108,119,0,116,93],
[107,97,109,103,96,103,94,0,97],
[123,113,121,107,100,131,117,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,96,71,97,73,81,85,107],
[119,0,99,91,108,95,86,97,97],
[114,111,0,100,108,93,83,91,93],
[139,119,110,0,107,93,106,111,117],
[113,102,102,103,0,102,88,93,97],
[137,115,117,117,108,0,82,96,111],
[129,124,127,104,122,128,0,113,132],
[125,113,119,99,117,114,97,0,118],
[103,113,117,93,113,99,78,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,105,93,107,104,78,84,89],
[91,0,91,118,99,97,74,101,87],
[105,119,0,95,127,133,92,119,96],
[117,92,115,0,112,119,95,97,112],
[103,111,83,98,0,87,65,94,77],
[106,113,77,91,123,0,100,101,88],
[132,136,118,115,145,110,0,117,84],
[126,109,91,113,116,109,93,0,111],
[121,123,114,98,133,122,126,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,100,104,101,104,105,112,111],
[103,0,107,111,96,104,115,118,105],
[110,103,0,111,102,108,107,115,98],
[106,99,99,0,110,104,105,111,99],
[109,114,108,100,0,118,113,112,103],
[106,106,102,106,92,0,114,103,99],
[105,95,103,105,97,96,0,105,99],
[98,92,95,99,98,107,105,0,96],
[99,105,112,111,107,111,111,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,104,117,101,103,99,83,87],
[104,0,96,135,101,113,104,110,113],
[106,114,0,118,130,104,119,104,104],
[93,75,92,0,103,92,112,94,114],
[109,109,80,107,0,90,110,98,98],
[107,97,106,118,120,0,110,105,89],
[111,106,91,98,100,100,0,94,92],
[127,100,106,116,112,105,116,0,114],
[123,97,106,96,112,121,118,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,108,97,112,102,106,113],
[107,0,105,108,101,109,109,102,113],
[107,105,0,105,108,104,109,100,111],
[102,102,105,0,94,103,109,91,112],
[113,109,102,116,0,117,116,114,134],
[98,101,106,107,93,0,105,98,116],
[108,101,101,101,94,105,0,105,112],
[104,108,110,119,96,112,105,0,122],
[97,97,99,98,76,94,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,98,97,117,101,121,93,106],
[103,0,85,79,97,100,105,88,98],
[112,125,0,104,120,105,127,120,116],
[113,131,106,0,113,92,102,96,100],
[93,113,90,97,0,88,113,94,113],
[109,110,105,118,122,0,120,108,113],
[89,105,83,108,97,90,0,91,90],
[117,122,90,114,116,102,119,0,120],
[104,112,94,110,97,97,120,90,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,129,130,87,135,103,127,107,82],
[81,0,115,97,121,82,149,104,127],
[80,95,0,85,111,109,131,122,95],
[123,113,125,0,106,111,135,102,112],
[75,89,99,104,0,89,158,100,113],
[107,128,101,99,121,0,116,106,82],
[83,61,79,75,52,94,0,98,67],
[103,106,88,108,110,104,112,0,103],
[128,83,115,98,97,128,143,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,120,110,102,101,111,103,109],
[112,0,112,109,121,123,117,111,103],
[90,98,0,116,114,109,115,107,94],
[100,101,94,0,109,102,100,119,90],
[108,89,96,101,0,109,93,102,98],
[109,87,101,108,101,0,104,100,103],
[99,93,95,110,117,106,0,87,96],
[107,99,103,91,108,110,123,0,105],
[101,107,116,120,112,107,114,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,114,89,109,81,96,105,98],
[113,0,118,90,114,106,102,105,105],
[96,92,0,82,96,89,98,85,111],
[121,120,128,0,118,117,131,104,109],
[101,96,114,92,0,87,103,100,104],
[129,104,121,93,123,0,103,103,119],
[114,108,112,79,107,107,0,86,100],
[105,105,125,106,110,107,124,0,123],
[112,105,99,101,106,91,110,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,70,0,0,70,0,0,140],
[210,0,70,140,210,140,140,140,210],
[140,140,0,140,140,70,70,70,210],
[210,70,70,0,70,140,70,70,210],
[210,0,70,140,0,140,140,70,210],
[140,70,140,70,70,0,70,70,140],
[210,70,140,140,70,140,0,70,140],
[210,70,140,140,140,140,140,0,140],
[70,0,0,0,0,70,70,70,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,114,102,105,120,125,110,117],
[92,0,99,89,92,102,93,101,106],
[96,111,0,90,99,96,106,97,107],
[108,121,120,0,108,105,128,115,112],
[105,118,111,102,0,120,123,112,116],
[90,108,114,105,90,0,114,101,111],
[85,117,104,82,87,96,0,98,100],
[100,109,113,95,98,109,112,0,104],
[93,104,103,98,94,99,110,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,98,95,106,105,83,86,107],
[93,0,91,93,119,104,92,92,91],
[112,119,0,100,111,107,89,99,113],
[115,117,110,0,114,110,100,103,117],
[104,91,99,96,0,99,85,99,93],
[105,106,103,100,111,0,93,116,97],
[127,118,121,110,125,117,0,105,112],
[124,118,111,107,111,94,105,0,107],
[103,119,97,93,117,113,98,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,128,96,111,116,115,116,120],
[111,0,136,109,103,124,114,110,128],
[82,74,0,73,92,100,82,81,91],
[114,101,137,0,101,127,119,97,107],
[99,107,118,109,0,122,94,106,107],
[94,86,110,83,88,0,91,90,98],
[95,96,128,91,116,119,0,98,119],
[94,100,129,113,104,120,112,0,114],
[90,82,119,103,103,112,91,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,107,103,101,87,112,95,88],
[114,0,109,110,110,103,130,113,119],
[103,101,0,99,97,99,104,103,96],
[107,100,111,0,114,100,116,105,91],
[109,100,113,96,0,96,117,87,99],
[123,107,111,110,114,0,116,103,100],
[98,80,106,94,93,94,0,100,81],
[115,97,107,105,123,107,110,0,103],
[122,91,114,119,111,110,129,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,110,92,105,106,110,108],
[103,0,92,94,99,110,118,93,109],
[96,118,0,123,115,126,137,103,124],
[100,116,87,0,108,103,112,109,115],
[118,111,95,102,0,107,107,100,106],
[105,100,84,107,103,0,103,105,101],
[104,92,73,98,103,107,0,100,108],
[100,117,107,101,110,105,110,0,110],
[102,101,86,95,104,109,102,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,110,102,107,103,88,125,101],
[121,0,107,116,119,105,110,121,101],
[100,103,0,93,108,96,106,116,97],
[108,94,117,0,125,109,114,114,125],
[103,91,102,85,0,87,89,106,93],
[107,105,114,101,123,0,107,127,108],
[122,100,104,96,121,103,0,125,105],
[85,89,94,96,104,83,85,0,97],
[109,109,113,85,117,102,105,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,111,107,109,100,117,117,103],
[95,0,110,107,107,99,121,108,112],
[99,100,0,94,112,96,108,93,97],
[103,103,116,0,111,101,110,106,107],
[101,103,98,99,0,90,108,98,107],
[110,111,114,109,120,0,120,99,106],
[93,89,102,100,102,90,0,91,94],
[93,102,117,104,112,111,119,0,106],
[107,98,113,103,103,104,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,84,98,76,89,87,107,74,82],
[126,0,111,114,100,105,104,94,82],
[112,99,0,99,89,101,107,87,84],
[134,96,111,0,114,106,111,105,94],
[121,110,121,96,0,99,90,98,109],
[123,105,109,104,111,0,109,99,89],
[103,106,103,99,120,101,0,100,87],
[136,116,123,105,112,111,110,0,104],
[128,128,126,116,101,121,123,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,120,101,95,96,101,112,100],
[99,0,102,97,96,94,102,106,86],
[90,108,0,93,96,96,96,97,89],
[109,113,117,0,105,109,100,107,106],
[115,114,114,105,0,103,109,114,96],
[114,116,114,101,107,0,109,113,105],
[109,108,114,110,101,101,0,109,100],
[98,104,113,103,96,97,101,0,89],
[110,124,121,104,114,105,110,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,105,109,112,113,106,102,99],
[93,0,109,97,106,111,95,97,106],
[105,101,0,88,110,104,91,95,106],
[101,113,122,0,107,116,99,107,122],
[98,104,100,103,0,99,97,102,98],
[97,99,106,94,111,0,99,101,104],
[104,115,119,111,113,111,0,102,114],
[108,113,115,103,108,109,108,0,111],
[111,104,104,88,112,106,96,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,98,99,112,94,105,99,102],
[113,0,103,102,116,113,113,112,117],
[112,107,0,105,115,113,111,114,116],
[111,108,105,0,102,102,105,97,105],
[98,94,95,108,0,96,103,94,108],
[116,97,97,108,114,0,110,108,107],
[105,97,99,105,107,100,0,103,101],
[111,98,96,113,116,102,107,0,107],
[108,93,94,105,102,103,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,159,53,106,210,159,107,156,210],
[51,0,0,0,105,105,0,104,51],
[157,210,0,106,157,157,54,210,157],
[104,210,104,0,158,158,53,104,104],
[0,105,53,52,0,52,53,156,52],
[51,105,53,52,158,0,53,156,156],
[103,210,156,157,157,157,0,156,157],
[54,106,0,106,54,54,54,0,54],
[0,159,53,106,158,54,53,156,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,103,110,103,114,102,101,108],
[89,0,104,106,102,94,92,97,96],
[107,106,0,115,100,92,89,96,98],
[100,104,95,0,100,87,87,95,101],
[107,108,110,110,0,105,109,104,100],
[96,116,118,123,105,0,107,117,100],
[108,118,121,123,101,103,0,96,106],
[109,113,114,115,106,93,114,0,94],
[102,114,112,109,110,110,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,114,110,105,120,117,114,109],
[100,0,112,104,105,113,123,97,110],
[96,98,0,103,101,109,109,111,115],
[100,106,107,0,110,111,119,108,110],
[105,105,109,100,0,111,113,105,105],
[90,97,101,99,99,0,115,99,100],
[93,87,101,91,97,95,0,91,96],
[96,113,99,102,105,111,119,0,106],
[101,100,95,100,105,110,114,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,52,76,74,88,76,85,52,78],
[158,0,124,137,123,111,148,87,124],
[134,86,0,100,111,111,84,110,112],
[136,73,110,0,64,109,96,115,99],
[122,87,99,146,0,97,123,87,100],
[134,99,99,101,113,0,98,87,114],
[125,62,126,114,87,112,0,89,113],
[158,123,100,95,123,123,121,0,102],
[132,86,98,111,110,96,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,110,120,123,131,112,102],
[107,0,85,99,116,114,115,98,103],
[102,125,0,108,118,115,122,108,114],
[100,111,102,0,106,115,115,102,102],
[90,94,92,104,0,106,97,87,88],
[87,96,95,95,104,0,109,95,80],
[79,95,88,95,113,101,0,97,83],
[98,112,102,108,123,115,113,0,87],
[108,107,96,108,122,130,127,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,86,96,87,100,95,87,105],
[113,0,106,97,104,107,104,90,96],
[124,104,0,96,104,120,117,92,100],
[114,113,114,0,113,122,106,103,104],
[123,106,106,97,0,111,110,103,83],
[110,103,90,88,99,0,93,91,76],
[115,106,93,104,100,117,0,89,93],
[123,120,118,107,107,119,121,0,105],
[105,114,110,106,127,134,117,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,106,104,108,113,107,115,108],
[94,0,90,101,114,104,99,115,107],
[104,120,0,106,119,111,101,115,120],
[106,109,104,0,114,111,113,110,98],
[102,96,91,96,0,101,97,113,102],
[97,106,99,99,109,0,109,126,109],
[103,111,109,97,113,101,0,115,100],
[95,95,95,100,97,84,95,0,100],
[102,103,90,112,108,101,110,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,106,107,112,116,98,98,121],
[97,0,101,112,94,112,107,78,119],
[104,109,0,116,123,130,126,106,122],
[103,98,94,0,101,116,92,84,104],
[98,116,87,109,0,112,97,89,98],
[94,98,80,94,98,0,81,84,100],
[112,103,84,118,113,129,0,101,118],
[112,132,104,126,121,126,109,0,123],
[89,91,88,106,112,110,92,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,103,94,108,104,101,119,107],
[96,0,97,92,107,101,85,110,105],
[107,113,0,94,113,103,102,105,113],
[116,118,116,0,121,103,109,127,118],
[102,103,97,89,0,85,97,111,98],
[106,109,107,107,125,0,90,114,105],
[109,125,108,101,113,120,0,130,124],
[91,100,105,83,99,96,80,0,104],
[103,105,97,92,112,105,86,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,103,95,109,110,109,99,103],
[111,0,113,104,114,107,125,99,108],
[107,97,0,102,107,100,111,106,98],
[115,106,108,0,117,95,119,100,108],
[101,96,103,93,0,99,113,94,101],
[100,103,110,115,111,0,105,110,104],
[101,85,99,91,97,105,0,98,97],
[111,111,104,110,116,100,112,0,106],
[107,102,112,102,109,106,113,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,92,110,112,97,85,99,92],
[114,0,116,97,121,108,109,100,115],
[118,94,0,108,127,103,106,92,115],
[100,113,102,0,122,111,85,113,106],
[98,89,83,88,0,97,101,74,95],
[113,102,107,99,113,0,117,109,124],
[125,101,104,125,109,93,0,101,82],
[111,110,118,97,136,101,109,0,105],
[118,95,95,104,115,86,128,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,111,109,111,97,98,109],
[112,0,105,122,109,102,120,111,120],
[123,105,0,121,119,128,109,118,112],
[99,88,89,0,101,102,83,98,92],
[101,101,91,109,0,86,97,93,101],
[99,108,82,108,124,0,102,101,97],
[113,90,101,127,113,108,0,104,104],
[112,99,92,112,117,109,106,0,104],
[101,90,98,118,109,113,106,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,99,98,109,106,106,106,105],
[103,0,103,106,99,95,102,103,112],
[111,107,0,97,112,104,105,110,111],
[112,104,113,0,97,100,113,103,107],
[101,111,98,113,0,103,106,104,120],
[104,115,106,110,107,0,114,106,113],
[104,108,105,97,104,96,0,114,107],
[104,107,100,107,106,104,96,0,115],
[105,98,99,103,90,97,103,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,112,116,114,108,114,109,102],
[96,0,114,94,90,98,98,90,100],
[98,96,0,113,100,94,95,85,86],
[94,116,97,0,95,92,95,86,91],
[96,120,110,115,0,109,116,106,94],
[102,112,116,118,101,0,119,111,88],
[96,112,115,115,94,91,0,93,81],
[101,120,125,124,104,99,117,0,118],
[108,110,124,119,116,122,129,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,107,95,116,108,119,109,100],
[107,0,123,97,110,99,119,97,101],
[103,87,0,99,103,107,112,111,99],
[115,113,111,0,110,102,101,109,106],
[94,100,107,100,0,105,108,107,109],
[102,111,103,108,105,0,117,104,106],
[91,91,98,109,102,93,0,98,96],
[101,113,99,101,103,106,112,0,114],
[110,109,111,104,101,104,114,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,109,100,123,106,123,113,107],
[96,0,106,100,107,107,112,102,97],
[101,104,0,109,103,83,94,102,97],
[110,110,101,0,94,100,119,109,103],
[87,103,107,116,0,100,127,111,109],
[104,103,127,110,110,0,125,107,111],
[87,98,116,91,83,85,0,83,91],
[97,108,108,101,99,103,127,0,92],
[103,113,113,107,101,99,119,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,113,99,99,124,112,113],
[104,0,107,107,106,95,123,102,104],
[97,103,0,112,105,97,105,96,96],
[97,103,98,0,102,97,108,89,100],
[111,104,105,108,0,97,113,99,111],
[111,115,113,113,113,0,116,102,111],
[86,87,105,102,97,94,0,96,105],
[98,108,114,121,111,108,114,0,106],
[97,106,114,110,99,99,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,108,96,116,121,94,115,89],
[111,0,119,104,111,109,100,120,115],
[102,91,0,107,101,109,91,124,98],
[114,106,103,0,99,101,88,115,111],
[94,99,109,111,0,106,106,110,104],
[89,101,101,109,104,0,85,122,98],
[116,110,119,122,104,125,0,127,118],
[95,90,86,95,100,88,83,0,87],
[121,95,112,99,106,112,92,123,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,82,88,123,88,109,123,81,96],
[128,0,105,124,100,97,113,108,118],
[122,105,0,135,101,98,111,88,110],
[87,86,75,0,63,78,93,85,95],
[122,110,109,147,0,100,126,118,120],
[101,113,112,132,110,0,134,98,90],
[87,97,99,117,84,76,0,95,104],
[129,102,122,125,92,112,115,0,113],
[114,92,100,115,90,120,106,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,99,105,96,94,100,93,99],
[110,0,108,121,112,106,104,109,120],
[111,102,0,112,112,109,109,93,105],
[105,89,98,0,99,104,113,90,87],
[114,98,98,111,0,97,109,91,97],
[116,104,101,106,113,0,110,103,99],
[110,106,101,97,101,100,0,89,92],
[117,101,117,120,119,107,121,0,110],
[111,90,105,123,113,111,118,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,106,107,106,112,109,104,115],
[99,0,118,112,104,117,111,109,114],
[104,92,0,100,98,105,112,100,112],
[103,98,110,0,105,107,105,111,108],
[104,106,112,105,0,107,110,115,116],
[98,93,105,103,103,0,118,106,114],
[101,99,98,105,100,92,0,109,111],
[106,101,110,99,95,104,101,0,106],
[95,96,98,102,94,96,99,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,91,102,130,107,105,94,106],
[123,0,99,120,110,112,96,105,108],
[119,111,0,123,127,125,114,119,105],
[108,90,87,0,105,92,90,81,99],
[80,100,83,105,0,108,90,89,95],
[103,98,85,118,102,0,86,91,93],
[105,114,96,120,120,124,0,120,96],
[116,105,91,129,121,119,90,0,102],
[104,102,105,111,115,117,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,101,101,101,105,93,107,95],
[111,0,105,99,105,98,101,109,99],
[109,105,0,108,93,88,93,103,104],
[109,111,102,0,108,106,103,113,113],
[109,105,117,102,0,106,115,111,107],
[105,112,122,104,104,0,94,122,103],
[117,109,117,107,95,116,0,108,105],
[103,101,107,97,99,88,102,0,104],
[115,111,106,97,103,107,105,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,89,103,98,86,98,92,96],
[109,0,107,110,83,85,102,98,110],
[121,103,0,120,116,108,113,123,120],
[107,100,90,0,96,101,109,103,104],
[112,127,94,114,0,107,105,118,117],
[124,125,102,109,103,0,102,115,118],
[112,108,97,101,105,108,0,115,121],
[118,112,87,107,92,95,95,0,99],
[114,100,90,106,93,92,89,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,102,109,111,90,111,112,111],
[98,0,103,101,109,96,101,103,118],
[108,107,0,110,104,109,100,110,108],
[101,109,100,0,110,101,96,122,117],
[99,101,106,100,0,95,94,103,108],
[120,114,101,109,115,0,105,117,121],
[99,109,110,114,116,105,0,127,123],
[98,107,100,88,107,93,83,0,101],
[99,92,102,93,102,89,87,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,111,110,107,113,115,101,109],
[102,0,113,106,113,112,114,100,114],
[99,97,0,116,112,102,102,96,124],
[100,104,94,0,113,104,95,106,99],
[103,97,98,97,0,92,96,88,112],
[97,98,108,106,118,0,113,102,106],
[95,96,108,115,114,97,0,106,114],
[109,110,114,104,122,108,104,0,119],
[101,96,86,111,98,104,96,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,125,109,114,87,127,110,124,109],
[85,0,103,99,82,101,95,111,96],
[101,107,0,107,99,117,112,115,106],
[96,111,103,0,90,104,114,121,107],
[123,128,111,120,0,120,103,120,116],
[83,109,93,106,90,0,110,100,94],
[100,115,98,96,107,100,0,112,101],
[86,99,95,89,90,110,98,0,91],
[101,114,104,103,94,116,109,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,110,110,104,106,90,108],
[111,0,97,102,119,106,110,102,94],
[104,113,0,111,132,120,123,118,95],
[100,108,99,0,107,111,108,100,101],
[100,91,78,103,0,110,109,97,93],
[106,104,90,99,100,0,107,107,91],
[104,100,87,102,101,103,0,94,102],
[120,108,92,110,113,103,116,0,93],
[102,116,115,109,117,119,108,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,161,144,162,146,96,163,130,145],
[49,0,111,97,66,80,115,113,80],
[66,99,0,115,131,80,131,83,80],
[48,113,95,0,129,96,129,82,112],
[64,144,79,81,0,63,144,80,64],
[114,130,130,114,147,0,163,130,97],
[47,95,79,81,66,47,0,97,80],
[80,97,127,128,130,80,113,0,112],
[65,130,130,98,146,113,130,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,104,99,110,113,88,107],
[110,0,110,113,106,117,108,86,113],
[114,100,0,111,94,111,109,90,107],
[106,97,99,0,98,107,97,84,105],
[111,104,116,112,0,122,117,109,114],
[100,93,99,103,88,0,97,92,101],
[97,102,101,113,93,113,0,91,95],
[122,124,120,126,101,118,119,0,127],
[103,97,103,105,96,109,115,83,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,96,105,91,102,100,101,102],
[103,0,112,101,99,105,102,112,113],
[114,98,0,111,110,104,100,102,107],
[105,109,99,0,106,97,101,97,106],
[119,111,100,104,0,100,102,111,114],
[108,105,106,113,110,0,100,104,104],
[110,108,110,109,108,110,0,108,105],
[109,98,108,113,99,106,102,0,109],
[108,97,103,104,96,106,105,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,112,105,144,109,107,103,123],
[101,0,107,104,118,83,99,96,101],
[98,103,0,97,106,93,95,101,103],
[105,106,113,0,105,103,105,104,99],
[66,92,104,105,0,96,84,85,112],
[101,127,117,107,114,0,92,108,120],
[103,111,115,105,126,118,0,112,140],
[107,114,109,106,125,102,98,0,123],
[87,109,107,111,98,90,70,87,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,113,108,103,103,106,116,100],
[104,0,105,116,113,100,105,112,108],
[97,105,0,106,111,105,106,108,103],
[102,94,104,0,100,98,100,110,95],
[107,97,99,110,0,101,104,109,100],
[107,110,105,112,109,0,106,111,103],
[104,105,104,110,106,104,0,114,109],
[94,98,102,100,101,99,96,0,102],
[110,102,107,115,110,107,101,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,118,130,101,96,101,110,106],
[100,0,115,130,118,99,109,106,89],
[92,95,0,126,96,92,116,103,93],
[80,80,84,0,88,92,81,96,81],
[109,92,114,122,0,95,105,115,101],
[114,111,118,118,115,0,112,117,103],
[109,101,94,129,105,98,0,101,97],
[100,104,107,114,95,93,109,0,96],
[104,121,117,129,109,107,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,109,104,108,98,101,109],
[103,0,91,99,93,108,92,96,92],
[108,119,0,99,107,108,110,105,98],
[101,111,111,0,104,108,104,98,96],
[106,117,103,106,0,101,97,100,102],
[102,102,102,102,109,0,100,97,104],
[112,118,100,106,113,110,0,116,100],
[109,114,105,112,110,113,94,0,98],
[101,118,112,114,108,106,110,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,106,104,94,123,95,110,124],
[108,0,108,110,93,96,86,114,100],
[104,102,0,89,107,104,84,101,96],
[106,100,121,0,108,105,90,107,130],
[116,117,103,102,0,109,102,96,106],
[87,114,106,105,101,0,93,108,102],
[115,124,126,120,108,117,0,104,112],
[100,96,109,103,114,102,106,0,111],
[86,110,114,80,104,108,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,94,92,86,107,99,108],
[105,0,116,87,98,99,100,105,107],
[96,94,0,74,95,87,94,90,100],
[116,123,136,0,116,102,101,117,116],
[118,112,115,94,0,105,108,106,113],
[124,111,123,108,105,0,111,107,116],
[103,110,116,109,102,99,0,107,113],
[111,105,120,93,104,103,103,0,98],
[102,103,110,94,97,94,97,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,113,106,107,106,88,101,108],
[97,0,120,105,108,111,103,97,105],
[97,90,0,90,109,110,94,89,92],
[104,105,120,0,119,118,118,102,110],
[103,102,101,91,0,108,95,97,104],
[104,99,100,92,102,0,100,87,92],
[122,107,116,92,115,110,0,107,112],
[109,113,121,108,113,123,103,0,116],
[102,105,118,100,106,118,98,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,87,99,120,105,96,111,86],
[112,0,120,98,109,109,97,110,108],
[123,90,0,112,122,109,98,89,111],
[111,112,98,0,121,110,97,112,98],
[90,101,88,89,0,75,98,77,113],
[105,101,101,100,135,0,101,113,71],
[114,113,112,113,112,109,0,100,101],
[99,100,121,98,133,97,110,0,89],
[124,102,99,112,97,139,109,121,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,91,100,100,111,107,105,105],
[110,0,114,88,107,110,116,109,101],
[119,96,0,108,110,106,121,114,107],
[110,122,102,0,107,111,121,122,107],
[110,103,100,103,0,109,126,109,99],
[99,100,104,99,101,0,119,110,112],
[103,94,89,89,84,91,0,97,98],
[105,101,96,88,101,100,113,0,100],
[105,109,103,103,111,98,112,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,150,150,150,90,150,120,150],
[91,0,90,90,120,120,90,61,90],
[60,120,0,61,120,121,150,61,91],
[60,120,149,0,150,91,150,30,120],
[60,90,90,60,0,60,120,30,90],
[120,90,89,119,150,0,119,90,119],
[60,120,60,60,90,91,0,0,60],
[90,149,149,180,180,120,210,0,180],
[60,120,119,90,120,91,150,30,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,102,103,98,111,105,93,106],
[105,0,99,105,102,108,108,108,101],
[108,111,0,117,108,119,115,106,103],
[107,105,93,0,97,115,105,93,100],
[112,108,102,113,0,114,113,99,101],
[99,102,91,95,96,0,109,89,102],
[105,102,95,105,97,101,0,92,96],
[117,102,104,117,111,121,118,0,107],
[104,109,107,110,109,108,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,87,106,96,93,98,100,102],
[91,0,114,99,107,86,106,106,108],
[123,96,0,95,100,101,100,112,104],
[104,111,115,0,104,105,113,113,108],
[114,103,110,106,0,105,106,110,109],
[117,124,109,105,105,0,116,110,118],
[112,104,110,97,104,94,0,114,101],
[110,104,98,97,100,100,96,0,104],
[108,102,106,102,101,92,109,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,100,92,112,108,93,92,77],
[117,0,103,106,99,124,110,101,91],
[110,107,0,116,96,106,99,94,95],
[118,104,94,0,108,106,108,94,108],
[98,111,114,102,0,112,94,91,108],
[102,86,104,104,98,0,95,88,99],
[117,100,111,102,116,115,0,98,98],
[118,109,116,116,119,122,112,0,105],
[133,119,115,102,102,111,112,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,102,100,106,97,89,107,95],
[125,0,103,111,113,106,101,113,106],
[108,107,0,100,101,114,105,103,116],
[110,99,110,0,104,106,93,106,96],
[104,97,109,106,0,89,91,108,110],
[113,104,96,104,121,0,105,121,117],
[121,109,105,117,119,105,0,121,117],
[103,97,107,104,102,89,89,0,107],
[115,104,94,114,100,93,93,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,117,97,94,100,116,94,97],
[91,0,96,116,94,102,108,102,106],
[93,114,0,98,84,86,112,87,113],
[113,94,112,0,103,101,108,78,102],
[116,116,126,107,0,101,117,80,101],
[110,108,124,109,109,0,120,105,103],
[94,102,98,102,93,90,0,98,105],
[116,108,123,132,130,105,112,0,121],
[113,104,97,108,109,107,105,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,143,124,115,96,116,105,123],
[86,0,143,107,125,87,105,105,88],
[67,67,0,58,77,49,85,76,57],
[86,103,152,0,125,85,115,96,95],
[95,85,133,85,0,87,87,75,84],
[114,123,161,125,123,0,134,104,124],
[94,105,125,95,123,76,0,103,85],
[105,105,134,114,135,106,107,0,115],
[87,122,153,115,126,86,125,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,111,108,103,79,88,97,121],
[111,0,116,110,97,108,93,105,99],
[99,94,0,106,87,88,89,86,91],
[102,100,104,0,102,94,92,88,106],
[107,113,123,108,0,92,87,100,113],
[131,102,122,116,118,0,111,102,112],
[122,117,121,118,123,99,0,111,123],
[113,105,124,122,110,108,99,0,96],
[89,111,119,104,97,98,87,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,91,62,83,110,81,90,85],
[111,0,123,81,133,121,98,90,110],
[119,87,0,118,114,95,92,109,132],
[148,129,92,0,138,106,110,109,132],
[127,77,96,72,0,111,104,97,128],
[100,89,115,104,99,0,93,84,128],
[129,112,118,100,106,117,0,125,109],
[120,120,101,101,113,126,85,0,125],
[125,100,78,78,82,82,101,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,124,109,119,102,126,109,98],
[95,0,117,102,113,101,115,114,98],
[86,93,0,102,98,86,98,90,86],
[101,108,108,0,102,105,111,93,109],
[91,97,112,108,0,96,106,107,92],
[108,109,124,105,114,0,115,116,103],
[84,95,112,99,104,95,0,91,100],
[101,96,120,117,103,94,119,0,113],
[112,112,124,101,118,107,110,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,99,98,105,108,105,99,103],
[107,0,118,102,109,112,115,101,119],
[111,92,0,106,109,103,107,94,102],
[112,108,104,0,112,107,113,110,111],
[105,101,101,98,0,105,106,106,114],
[102,98,107,103,105,0,104,92,107],
[105,95,103,97,104,106,0,98,108],
[111,109,116,100,104,118,112,0,124],
[107,91,108,99,96,103,102,86,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,107,117,117,113,118,103,114],
[97,0,98,112,97,108,110,91,92],
[103,112,0,115,102,111,122,104,109],
[93,98,95,0,104,106,108,79,108],
[93,113,108,106,0,107,124,87,105],
[97,102,99,104,103,0,114,105,80],
[92,100,88,102,86,96,0,90,106],
[107,119,106,131,123,105,120,0,111],
[96,118,101,102,105,130,104,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,104,104,124,116,120,107,103],
[96,0,105,96,113,106,114,91,90],
[106,105,0,105,118,115,122,114,96],
[106,114,105,0,126,111,121,106,106],
[86,97,92,84,0,103,109,100,90],
[94,104,95,99,107,0,106,100,96],
[90,96,88,89,101,104,0,85,92],
[103,119,96,104,110,110,125,0,102],
[107,120,114,104,120,114,118,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,94,94,118,101,113,121,96],
[102,0,95,107,111,106,127,118,95],
[116,115,0,127,124,104,118,114,118],
[116,103,83,0,123,95,116,96,104],
[92,99,86,87,0,81,104,98,92],
[109,104,106,115,129,0,116,126,112],
[97,83,92,94,106,94,0,109,98],
[89,92,96,114,112,84,101,0,97],
[114,115,92,106,118,98,112,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,113,96,95,105,85,90,104],
[93,0,101,100,104,97,93,96,93],
[97,109,0,97,94,86,89,76,85],
[114,110,113,0,118,107,101,109,121],
[115,106,116,92,0,108,107,85,112],
[105,113,124,103,102,0,98,103,93],
[125,117,121,109,103,112,0,88,101],
[120,114,134,101,125,107,122,0,106],
[106,117,125,89,98,117,109,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,125,111,107,115,102,118,106],
[103,0,112,106,107,105,99,107,109],
[85,98,0,105,102,98,94,96,89],
[99,104,105,0,109,92,93,111,99],
[103,103,108,101,0,94,93,103,105],
[95,105,112,118,116,0,106,108,111],
[108,111,116,117,117,104,0,105,106],
[92,103,114,99,107,102,105,0,102],
[104,101,121,111,105,99,104,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,111,146,116,114,103,100,99],
[86,0,79,122,111,103,111,110,100],
[99,131,0,145,119,141,112,108,106],
[64,88,65,0,95,94,61,105,95],
[94,99,91,115,0,136,98,111,110],
[96,107,69,116,74,0,70,85,100],
[107,99,98,149,112,140,0,115,104],
[110,100,102,105,99,125,95,0,91],
[111,110,104,115,100,110,106,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,98,110,110,108,108,107,113],
[95,0,93,91,92,94,100,99,101],
[112,117,0,105,116,109,104,107,115],
[100,119,105,0,102,109,102,103,107],
[100,118,94,108,0,106,109,102,113],
[102,116,101,101,104,0,93,112,109],
[102,110,106,108,101,117,0,105,112],
[103,111,103,107,108,98,105,0,112],
[97,109,95,103,97,101,98,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,103,90,90,92,98,92,98],
[102,0,96,90,91,96,93,95,100],
[107,114,0,98,103,113,120,101,94],
[120,120,112,0,100,98,109,99,111],
[120,119,107,110,0,98,112,105,101],
[118,114,97,112,112,0,100,104,96],
[112,117,90,101,98,110,0,95,95],
[118,115,109,111,105,106,115,0,103],
[112,110,116,99,109,114,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,89,112,129,105,109,95,100],
[100,0,90,100,122,95,98,103,105],
[121,120,0,109,114,102,100,107,98],
[98,110,101,0,117,82,98,107,95],
[81,88,96,93,0,100,93,94,96],
[105,115,108,128,110,0,102,127,111],
[101,112,110,112,117,108,0,116,112],
[115,107,103,103,116,83,94,0,113],
[110,105,112,115,114,99,98,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,97,109,125,121,120,116,124],
[103,0,101,85,119,110,92,109,113],
[113,109,0,89,130,121,96,112,118],
[101,125,121,0,136,121,112,132,130],
[85,91,80,74,0,109,99,99,104],
[89,100,89,89,101,0,88,99,103],
[90,118,114,98,111,122,0,126,109],
[94,101,98,78,111,111,84,0,105],
[86,97,92,80,106,107,101,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,74,91,120,104,95,95,80,105],
[136,0,105,123,124,123,121,129,119],
[119,105,0,129,120,112,124,108,125],
[90,87,81,0,101,97,92,85,101],
[106,86,90,109,0,109,101,97,107],
[115,87,98,113,101,0,107,91,114],
[115,89,86,118,109,103,0,114,100],
[130,81,102,125,113,119,96,0,125],
[105,91,85,109,103,96,110,85,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,105,100,105,104,102,105,95],
[116,0,118,106,112,112,115,100,108],
[105,92,0,101,101,90,92,95,94],
[110,104,109,0,109,93,106,102,109],
[105,98,109,101,0,111,102,102,93],
[106,98,120,117,99,0,117,111,114],
[108,95,118,104,108,93,0,106,103],
[105,110,115,108,108,99,104,0,107],
[115,102,116,101,117,96,107,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,112,116,99,124,113,103,115],
[99,0,132,100,91,127,106,109,104],
[98,78,0,91,80,95,95,116,98],
[94,110,119,0,102,124,109,102,124],
[111,119,130,108,0,166,95,112,126],
[86,83,115,86,44,0,85,90,86],
[97,104,115,101,115,125,0,102,115],
[107,101,94,108,98,120,108,0,111],
[95,106,112,86,84,124,95,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,109,110,114,104,111,114,98],
[108,0,118,105,105,92,101,107,100],
[101,92,0,106,105,100,98,104,90],
[100,105,104,0,117,107,110,114,98],
[96,105,105,93,0,94,101,109,109],
[106,118,110,103,116,0,100,105,110],
[99,109,112,100,109,110,0,106,103],
[96,103,106,96,101,105,104,0,94],
[112,110,120,112,101,100,107,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,126,120,119,108,102,138,104,113],
[84,0,104,94,83,97,121,83,95],
[90,106,0,98,88,106,137,82,93],
[91,116,112,0,108,110,145,115,109],
[102,127,122,102,0,105,132,103,109],
[108,113,104,100,105,0,122,102,91],
[72,89,73,65,78,88,0,68,67],
[106,127,128,95,107,108,142,0,91],
[97,115,117,101,101,119,143,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,127,107,112,113,122,101,113],
[93,0,98,110,101,93,101,102,96],
[83,112,0,102,109,101,119,110,101],
[103,100,108,0,113,93,109,93,100],
[98,109,101,97,0,99,109,95,92],
[97,117,109,117,111,0,121,97,108],
[88,109,91,101,101,89,0,90,86],
[109,108,100,117,115,113,120,0,99],
[97,114,109,110,118,102,124,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,99,102,109,91,88,92,105],
[108,0,110,100,96,93,82,88,94],
[111,100,0,111,106,85,97,87,103],
[108,110,99,0,100,80,104,105,105],
[101,114,104,110,0,77,107,102,93],
[119,117,125,130,133,0,102,128,119],
[122,128,113,106,103,108,0,98,97],
[118,122,123,105,108,82,112,0,96],
[105,116,107,105,117,91,113,114,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,121,125,113,105,113,121,132],
[97,0,109,112,119,111,112,105,119],
[89,101,0,77,119,87,92,91,118],
[85,98,133,0,120,113,118,103,127],
[97,91,91,90,0,95,104,77,114],
[105,99,123,97,115,0,111,102,113],
[97,98,118,92,106,99,0,85,95],
[89,105,119,107,133,108,125,0,107],
[78,91,92,83,96,97,115,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,100,100,127,117,98,124,112],
[101,0,99,101,103,112,95,109,118],
[110,111,0,116,123,120,104,108,119],
[110,109,94,0,108,102,102,102,119],
[83,107,87,102,0,112,105,114,125],
[93,98,90,108,98,0,93,113,108],
[112,115,106,108,105,117,0,121,124],
[86,101,102,108,96,97,89,0,121],
[98,92,91,91,85,102,86,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,101,116,102,103,119,118,99],
[106,0,105,112,96,108,113,113,93],
[109,105,0,121,115,108,120,107,94],
[94,98,89,0,89,93,122,105,90],
[108,114,95,121,0,113,115,119,99],
[107,102,102,117,97,0,123,112,107],
[91,97,90,88,95,87,0,99,76],
[92,97,103,105,91,98,111,0,110],
[111,117,116,120,111,103,134,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,98,106,102,105,112,111,107],
[96,0,82,105,101,88,106,91,91],
[112,128,0,110,114,101,120,116,109],
[104,105,100,0,103,89,111,107,109],
[108,109,96,107,0,99,105,111,106],
[105,122,109,121,111,0,115,110,109],
[98,104,90,99,105,95,0,106,101],
[99,119,94,103,99,100,104,0,107],
[103,119,101,101,104,101,109,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,119,111,105,109,85,97,80],
[113,0,121,104,103,115,106,108,89],
[91,89,0,100,104,98,88,101,71],
[99,106,110,0,109,99,85,103,94],
[105,107,106,101,0,107,85,93,87],
[101,95,112,111,103,0,93,102,83],
[125,104,122,125,125,117,0,122,106],
[113,102,109,107,117,108,88,0,75],
[130,121,139,116,123,127,104,135,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,112,92,105,104,106,109,110],
[104,0,107,116,106,93,108,108,124],
[98,103,0,88,96,96,101,111,91],
[118,94,122,0,109,115,120,104,108],
[105,104,114,101,0,96,111,114,101],
[106,117,114,95,114,0,119,110,101],
[104,102,109,90,99,91,0,109,107],
[101,102,99,106,96,100,101,0,95],
[100,86,119,102,109,109,103,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,104,113,103,129,119,97,113],
[89,0,101,97,95,101,95,102,85],
[106,109,0,102,94,103,104,107,111],
[97,113,108,0,125,128,131,103,99],
[107,115,116,85,0,116,110,111,115],
[81,109,107,82,94,0,119,93,101],
[91,115,106,79,100,91,0,94,121],
[113,108,103,107,99,117,116,0,103],
[97,125,99,111,95,109,89,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,114,105,115,107,116,111,112],
[105,0,111,105,110,116,123,118,121],
[96,99,0,110,108,107,121,119,115],
[105,105,100,0,115,121,116,121,120],
[95,100,102,95,0,117,121,106,110],
[103,94,103,89,93,0,106,103,110],
[94,87,89,94,89,104,0,93,107],
[99,92,91,89,104,107,117,0,111],
[98,89,95,90,100,100,103,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,92,104,103,96,109,106,104,91],
[118,0,107,107,103,103,106,114,110],
[106,103,0,109,108,97,98,114,105],
[107,103,101,0,108,98,95,95,101],
[114,107,102,102,0,109,103,114,107],
[101,107,113,112,101,0,112,108,111],
[104,104,112,115,107,98,0,100,111],
[106,96,96,115,96,102,110,0,98],
[119,100,105,109,103,99,99,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,111,101,110,111,109,131,98],
[107,0,113,110,115,114,103,119,113],
[99,97,0,102,105,96,99,108,100],
[109,100,108,0,110,109,109,115,100],
[100,95,105,100,0,91,101,107,100],
[99,96,114,101,119,0,104,106,107],
[101,107,111,101,109,106,0,110,107],
[79,91,102,95,103,104,100,0,97],
[112,97,110,110,110,103,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,130,99,106,117,106,105,110,105],
[80,0,97,105,106,98,95,100,73],
[111,113,0,106,126,117,106,111,95],
[104,105,104,0,121,119,90,114,93],
[93,104,84,89,0,104,94,104,89],
[104,112,93,91,106,0,92,110,94],
[105,115,104,120,116,118,0,114,102],
[100,110,99,96,106,100,96,0,80],
[105,137,115,117,121,116,108,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,87,95,110,93,103,102,102],
[116,0,101,100,106,108,113,112,109],
[123,109,0,105,103,94,108,100,97],
[115,110,105,0,104,102,111,106,105],
[100,104,107,106,0,97,101,98,99],
[117,102,116,108,113,0,116,101,120],
[107,97,102,99,109,94,0,109,104],
[108,98,110,104,112,109,101,0,103],
[108,101,113,105,111,90,106,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,117,108,100,106,98,114,117],
[107,0,117,104,104,101,94,106,107],
[93,93,0,95,100,91,78,98,103],
[102,106,115,0,106,103,105,110,103],
[110,106,110,104,0,98,101,115,109],
[104,109,119,107,112,0,99,113,115],
[112,116,132,105,109,111,0,123,120],
[96,104,112,100,95,97,87,0,102],
[93,103,107,107,101,95,90,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,113,119,109,82,78,92,110],
[102,0,108,114,111,96,104,104,108],
[97,102,0,123,101,104,89,81,104],
[91,96,87,0,91,83,109,107,122],
[101,99,109,119,0,112,100,108,87],
[128,114,106,127,98,0,96,110,112],
[132,106,121,101,110,114,0,95,112],
[118,106,129,103,102,100,115,0,129],
[100,102,106,88,123,98,98,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,97,92,96,93,102,108,101],
[117,0,100,90,101,92,107,106,99],
[113,110,0,111,114,107,99,117,108],
[118,120,99,0,113,132,117,112,105],
[114,109,96,97,0,104,93,113,92],
[117,118,103,78,106,0,99,109,91],
[108,103,111,93,117,111,0,109,107],
[102,104,93,98,97,101,101,0,83],
[109,111,102,105,118,119,103,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,103,99,106,104,107,95,94],
[110,0,106,101,101,105,108,106,97],
[107,104,0,101,103,97,108,97,103],
[111,109,109,0,108,103,116,105,106],
[104,109,107,102,0,104,114,106,109],
[106,105,113,107,106,0,113,110,102],
[103,102,102,94,96,97,0,92,93],
[115,104,113,105,104,100,118,0,107],
[116,113,107,104,101,108,117,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,33,36,0,36,69,36,36,104],
[177,0,73,141,107,144,106,106,177],
[174,137,0,141,107,141,177,105,210],
[210,69,69,0,107,142,109,36,177],
[174,103,103,103,0,103,103,103,138],
[141,66,69,68,107,0,69,69,210],
[174,104,33,101,107,141,0,68,141],
[174,104,105,174,107,141,142,0,177],
[106,33,0,33,72,0,69,33,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,119,112,86,102,117,101,110],
[109,0,117,111,102,111,119,130,88],
[91,93,0,99,85,100,102,106,89],
[98,99,111,0,90,104,122,96,96],
[124,108,125,120,0,122,119,121,102],
[108,99,110,106,88,0,105,111,87],
[93,91,108,88,91,105,0,99,83],
[109,80,104,114,89,99,111,0,94],
[100,122,121,114,108,123,127,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,98,84,98,104,99,102,107],
[116,0,112,103,109,117,109,106,110],
[112,98,0,109,107,123,110,117,111],
[126,107,101,0,114,120,113,119,120],
[112,101,103,96,0,123,115,103,112],
[106,93,87,90,87,0,102,107,98],
[111,101,100,97,95,108,0,106,110],
[108,104,93,91,107,103,104,0,102],
[103,100,99,90,98,112,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,140,69,103,69,140,68,69,106],
[70,0,70,69,36,105,34,34,105],
[141,140,0,140,142,106,71,106,108],
[107,141,70,0,36,105,105,70,73],
[141,174,68,174,0,174,105,106,106],
[70,105,104,105,36,0,70,105,71],
[142,176,139,105,105,140,0,105,108],
[141,176,104,140,104,105,105,0,176],
[104,105,102,137,104,139,102,34,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,122,118,94,106,91,127],
[110,0,115,134,99,126,119,111,116],
[114,95,0,114,108,105,107,94,120],
[88,76,96,0,106,85,127,101,93],
[92,111,102,104,0,89,116,98,119],
[116,84,105,125,121,0,102,101,104],
[104,91,103,83,94,108,0,98,112],
[119,99,116,109,112,109,112,0,122],
[83,94,90,117,91,106,98,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,26,103,25,105,26,27,50,51],
[184,0,183,76,130,132,130,157,103],
[107,27,0,51,132,53,27,53,0],
[185,134,159,0,159,159,79,132,105],
[105,80,78,51,0,80,26,78,78],
[184,78,157,51,130,0,104,157,76],
[183,80,183,131,184,106,0,183,129],
[160,53,157,78,132,53,27,0,51],
[159,107,210,105,132,134,81,159,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,97,112,104,103,100,96],
[111,0,109,104,117,111,103,101,101],
[104,101,0,96,114,96,104,106,98],
[113,106,114,0,115,105,101,107,98],
[98,93,96,95,0,103,93,90,95],
[106,99,114,105,107,0,99,105,102],
[107,107,106,109,117,111,0,101,103],
[110,109,104,103,120,105,109,0,105],
[114,109,112,112,115,108,107,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,103,98,98,78,92,108,100],
[105,0,95,98,110,94,111,104,104],
[107,115,0,103,105,107,104,101,110],
[112,112,107,0,111,91,108,96,102],
[112,100,105,99,0,103,102,99,101],
[132,116,103,119,107,0,107,103,117],
[118,99,106,102,108,103,0,111,111],
[102,106,109,114,111,107,99,0,110],
[110,106,100,108,109,93,99,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,123,114,101,117,106,108,124,108],
[87,0,106,100,103,113,91,104,99],
[96,104,0,96,106,118,92,107,112],
[109,110,114,0,108,111,101,113,112],
[93,107,104,102,0,111,96,110,103],
[104,97,92,99,99,0,97,108,103],
[102,119,118,109,114,113,0,110,122],
[86,106,103,97,100,102,100,0,112],
[102,111,98,98,107,107,88,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,53,78,80,53,53,51,130,51],
[157,0,157,131,103,130,130,131,157],
[132,53,0,107,53,107,105,157,105],
[130,79,103,0,129,104,104,77,103],
[157,107,157,81,0,81,132,131,105],
[157,80,103,106,129,0,131,158,130],
[159,80,105,106,78,79,0,158,130],
[80,79,53,133,79,52,52,0,79],
[159,53,105,107,105,80,80,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,93,126,115,84,90,111,101,110],
[117,0,115,123,122,103,112,125,108],
[84,95,0,83,89,97,93,81,100],
[95,87,127,0,95,89,100,95,110],
[126,88,121,115,0,112,96,106,131],
[120,107,113,121,98,0,99,117,113],
[99,98,117,110,114,111,0,107,110],
[109,85,129,115,104,93,103,0,98],
[100,102,110,100,79,97,100,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,110,116,113,110,108,95,103],
[95,0,103,103,111,103,101,84,110],
[100,107,0,109,107,102,99,94,96],
[94,107,101,0,111,104,99,102,101],
[97,99,103,99,0,96,96,86,91],
[100,107,108,106,114,0,96,98,103],
[102,109,111,111,114,114,0,106,101],
[115,126,116,108,124,112,104,0,115],
[107,100,114,109,119,107,109,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,122,116,116,101,108,110,112],
[103,0,120,109,101,95,110,97,116],
[88,90,0,89,101,92,96,89,102],
[94,101,121,0,110,101,105,95,116],
[94,109,109,100,0,88,106,105,114],
[109,115,118,109,122,0,99,94,118],
[102,100,114,105,104,111,0,96,110],
[100,113,121,115,105,116,114,0,102],
[98,94,108,94,96,92,100,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,112,115,94,106,128,132,106],
[88,0,109,82,106,88,121,108,94],
[98,101,0,96,113,88,106,106,119],
[95,128,114,0,100,100,118,118,103],
[116,104,97,110,0,97,109,105,105],
[104,122,122,110,113,0,112,113,115],
[82,89,104,92,101,98,0,91,120],
[78,102,104,92,105,97,119,0,107],
[104,116,91,107,105,95,90,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,105,101,99,110,103,117,102],
[106,0,110,108,91,105,103,106,96],
[105,100,0,83,79,93,116,95,95],
[109,102,127,0,111,109,112,115,98],
[111,119,131,99,0,102,123,132,108],
[100,105,117,101,108,0,116,128,114],
[107,107,94,98,87,94,0,124,109],
[93,104,115,95,78,82,86,0,86],
[108,114,115,112,102,96,101,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,111,105,113,112,92,101,100],
[94,0,91,89,105,110,96,92,86],
[99,119,0,104,103,114,91,103,100],
[105,121,106,0,110,111,107,107,102],
[97,105,107,100,0,102,98,102,95],
[98,100,96,99,108,0,101,107,94],
[118,114,119,103,112,109,0,100,106],
[109,118,107,103,108,103,110,0,106],
[110,124,110,108,115,116,104,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,102,112,72,89,87,108,87],
[108,0,103,88,87,90,92,88,89],
[108,107,0,112,102,96,109,104,85],
[98,122,98,0,92,97,98,97,89],
[138,123,108,118,0,97,109,104,104],
[121,120,114,113,113,0,98,115,105],
[123,118,101,112,101,112,0,112,89],
[102,122,106,113,106,95,98,0,91],
[123,121,125,121,106,105,121,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,86,98,115,92,112,95,106],
[120,0,92,103,125,97,113,119,110],
[124,118,0,99,122,108,120,104,126],
[112,107,111,0,125,107,118,101,111],
[95,85,88,85,0,109,110,99,103],
[118,113,102,103,101,0,112,103,115],
[98,97,90,92,100,98,0,98,111],
[115,91,106,109,111,107,112,0,114],
[104,100,84,99,107,95,99,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,97,93,108,98,108,105,89],
[94,0,99,96,87,94,110,80,85],
[113,111,0,95,101,101,110,109,98],
[117,114,115,0,105,126,130,126,108],
[102,123,109,105,0,118,132,104,97],
[112,116,109,84,92,0,125,96,98],
[102,100,100,80,78,85,0,107,100],
[105,130,101,84,106,114,103,0,76],
[121,125,112,102,113,112,110,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,87,108,122,109,113,102,103,109],
[123,0,99,114,121,116,116,119,117],
[102,111,0,122,110,129,113,120,117],
[88,96,88,0,96,97,111,91,86],
[101,89,100,114,0,114,114,106,105],
[97,94,81,113,96,0,102,78,103],
[108,94,97,99,96,108,0,94,93],
[107,91,90,119,104,132,116,0,113],
[101,93,93,124,105,107,117,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,132,97,98,82,107,85,98,89],
[78,0,81,86,91,90,66,101,89],
[113,129,0,119,109,128,88,124,105],
[112,124,91,0,94,113,92,107,92],
[128,119,101,116,0,106,91,117,110],
[103,120,82,97,104,0,95,97,86],
[125,144,122,118,119,115,0,126,104],
[112,109,86,103,93,113,84,0,90],
[121,121,105,118,100,124,106,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,108,109,115,100,102,93,102],
[114,0,101,108,101,89,98,108,113],
[102,109,0,114,96,97,97,105,107],
[101,102,96,0,102,93,103,99,101],
[95,109,114,108,0,90,98,102,112],
[110,121,113,117,120,0,104,115,114],
[108,112,113,107,112,106,0,103,100],
[117,102,105,111,108,95,107,0,107],
[108,97,103,109,98,96,110,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,72,75,67,90,66,116,48,91],
[138,0,118,90,147,111,148,65,108],
[135,92,0,65,127,112,114,73,109],
[143,120,145,0,98,112,132,111,146],
[120,63,83,112,0,91,116,55,102],
[144,99,98,98,119,0,130,78,97],
[94,62,96,78,94,80,0,79,86],
[162,145,137,99,155,132,131,0,117],
[119,102,101,64,108,113,124,93,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,80,94,106,101,128,97,112],
[95,0,77,81,113,110,99,88,83],
[130,133,0,106,106,138,115,119,100],
[116,129,104,0,132,109,136,112,106],
[104,97,104,78,0,105,97,72,84],
[109,100,72,101,105,0,122,98,99],
[82,111,95,74,113,88,0,100,103],
[113,122,91,98,138,112,110,0,116],
[98,127,110,104,126,111,107,94,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,111,107,102,106,97,105,118],
[108,0,96,105,119,110,100,107,110],
[99,114,0,112,119,106,102,110,116],
[103,105,98,0,111,111,96,101,100],
[108,91,91,99,0,92,88,98,107],
[104,100,104,99,118,0,106,105,116],
[113,110,108,114,122,104,0,104,117],
[105,103,100,109,112,105,106,0,112],
[92,100,94,110,103,94,93,98,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,117,104,119,118,132,118,79],
[105,0,118,78,80,130,120,94,65],
[93,92,0,104,80,116,107,93,66],
[106,132,106,0,93,104,120,81,116],
[91,130,130,117,0,130,107,94,104],
[92,80,94,106,80,0,121,108,40],
[78,90,103,90,103,89,0,105,77],
[92,116,117,129,116,102,105,0,76],
[131,145,144,94,106,170,133,134,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,85,105,109,104,89,116,112,98],
[125,0,110,94,96,96,99,106,99],
[105,100,0,110,78,95,111,118,94],
[101,116,100,0,100,118,114,129,100],
[106,114,132,110,0,110,120,115,95],
[121,114,115,92,100,0,120,114,98],
[94,111,99,96,90,90,0,101,106],
[98,104,92,81,95,96,109,0,94],
[112,111,116,110,115,112,104,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,88,85,96,117,76,104,108,85],
[122,0,121,115,105,110,114,125,102],
[125,89,0,90,95,85,125,109,89],
[114,95,120,0,95,110,109,126,112],
[93,105,115,115,0,92,125,120,113],
[134,100,125,100,118,0,104,90,99],
[106,96,85,101,85,106,0,100,98],
[102,85,101,84,90,120,110,0,84],
[125,108,121,98,97,111,112,126,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,110,128,86,121,116,106,115],
[96,0,121,123,101,132,109,120,110],
[100,89,0,104,104,120,89,87,110],
[82,87,106,0,78,105,92,81,104],
[124,109,106,132,0,139,102,91,105],
[89,78,90,105,71,0,82,74,84],
[94,101,121,118,108,128,0,74,89],
[104,90,123,129,119,136,136,0,109],
[95,100,100,106,105,126,121,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,102,101,101,113,103,112,104],
[103,0,97,104,101,86,94,101,98],
[108,113,0,105,92,107,103,108,102],
[109,106,105,0,102,96,101,114,101],
[109,109,118,108,0,111,112,120,103],
[97,124,103,114,99,0,119,116,107],
[107,116,107,109,98,91,0,121,99],
[98,109,102,96,90,94,89,0,91],
[106,112,108,109,107,103,111,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,98,99,122,104,102,104,111],
[102,0,101,104,103,111,104,115,112],
[112,109,0,104,119,104,110,115,111],
[111,106,106,0,102,105,100,106,117],
[88,107,91,108,0,107,114,120,99],
[106,99,106,105,103,0,107,115,100],
[108,106,100,110,96,103,0,104,103],
[106,95,95,104,90,95,106,0,106],
[99,98,99,93,111,110,107,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,93,108,95,102,101,101,100],
[108,0,87,116,90,109,101,96,90],
[117,123,0,119,115,114,111,104,108],
[102,94,91,0,95,106,99,99,95],
[115,120,95,115,0,114,109,106,112],
[108,101,96,104,96,0,95,92,88],
[109,109,99,111,101,115,0,102,97],
[109,114,106,111,104,118,108,0,100],
[110,120,102,115,98,122,113,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,99,93,91,131,109,104],
[110,0,124,112,95,106,120,112,105],
[104,86,0,86,84,82,104,99,99],
[111,98,124,0,102,110,128,105,111],
[117,115,126,108,0,118,132,113,104],
[119,104,128,100,92,0,113,105,108],
[79,90,106,82,78,97,0,92,98],
[101,98,111,105,97,105,118,0,92],
[106,105,111,99,106,102,112,118,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,120,113,130,106,129,131,92],
[107,0,104,98,97,94,108,110,118],
[90,106,0,98,111,104,116,139,113],
[97,112,112,0,109,84,96,122,101],
[80,113,99,101,0,89,111,121,107],
[104,116,106,126,121,0,124,136,121],
[81,102,94,114,99,86,0,93,85],
[79,100,71,88,89,74,117,0,91],
[118,92,97,109,103,89,125,119,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,111,119,106,109,111,114,116],
[113,0,104,117,103,103,104,111,107],
[99,106,0,127,114,108,98,107,121],
[91,93,83,0,91,94,110,102,89],
[104,107,96,119,0,97,104,100,103],
[101,107,102,116,113,0,96,114,106],
[99,106,112,100,106,114,0,114,113],
[96,99,103,108,110,96,96,0,107],
[94,103,89,121,107,104,97,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,107,101,112,99,98,110,108],
[94,0,107,120,104,104,108,107,98],
[103,103,0,101,118,121,111,112,104],
[109,90,109,0,108,111,106,109,112],
[98,106,92,102,0,107,97,113,99],
[111,106,89,99,103,0,100,111,94],
[112,102,99,104,113,110,0,108,109],
[100,103,98,101,97,99,102,0,103],
[102,112,106,98,111,116,101,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,108,114,120,106,109,103,101],
[107,0,120,104,124,113,112,110,105],
[102,90,0,116,116,124,107,105,111],
[96,106,94,0,100,109,108,96,115],
[90,86,94,110,0,93,101,93,90],
[104,97,86,101,117,0,98,100,109],
[101,98,103,102,109,112,0,107,110],
[107,100,105,114,117,110,103,0,103],
[109,105,99,95,120,101,100,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,100,106,109,95,106,109,123],
[120,0,126,99,105,112,124,114,105],
[110,84,0,106,82,103,104,106,125],
[104,111,104,0,103,111,82,114,103],
[101,105,128,107,0,103,130,98,94],
[115,98,107,99,107,0,111,98,97],
[104,86,106,128,80,99,0,90,95],
[101,96,104,96,112,112,120,0,103],
[87,105,85,107,116,113,115,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,78,105,112,83,92,118,133],
[104,0,78,111,91,72,69,84,108],
[132,132,0,134,105,138,123,131,147],
[105,99,76,0,82,90,75,92,91],
[98,119,105,128,0,113,119,119,126],
[127,138,72,120,97,0,109,121,121],
[118,141,87,135,91,101,0,88,121],
[92,126,79,118,91,89,122,0,98],
[77,102,63,119,84,89,89,112,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,100,99,102,114,91,94,106],
[114,0,109,99,108,122,98,114,122],
[110,101,0,103,124,113,92,109,104],
[111,111,107,0,109,108,106,102,114],
[108,102,86,101,0,106,91,87,109],
[96,88,97,102,104,0,98,92,103],
[119,112,118,104,119,112,0,127,117],
[116,96,101,108,123,118,83,0,121],
[104,88,106,96,101,107,93,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,111,121,112,142,96,119,113,108],
[99,0,99,117,110,89,115,105,108],
[89,111,0,117,124,100,119,101,101],
[98,93,93,0,108,91,115,93,92],
[68,100,86,102,0,95,122,105,86],
[114,121,110,119,115,0,105,111,129],
[91,95,91,95,88,105,0,100,96],
[97,105,109,117,105,99,110,0,107],
[102,102,109,118,124,81,114,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,118,104,110,101,96,107,108],
[107,0,117,99,115,94,100,116,102],
[92,93,0,96,122,87,85,114,103],
[106,111,114,0,137,100,111,128,108],
[100,95,88,73,0,99,88,106,93],
[109,116,123,110,111,0,98,118,121],
[114,110,125,99,122,112,0,119,116],
[103,94,96,82,104,92,91,0,102],
[102,108,107,102,117,89,94,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,112,125,102,116,102,105,117],
[92,0,96,109,99,108,100,97,108],
[98,114,0,117,100,117,112,108,114],
[85,101,93,0,97,95,109,86,101],
[108,111,110,113,0,104,110,91,111],
[94,102,93,115,106,0,109,84,107],
[108,110,98,101,100,101,0,101,98],
[105,113,102,124,119,126,109,0,121],
[93,102,96,109,99,103,112,89,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,104,110,105,121,111,105,86],
[113,0,102,114,102,113,113,99,94],
[106,108,0,108,110,115,105,105,105],
[100,96,102,0,103,102,107,94,80],
[105,108,100,107,0,114,114,98,97],
[89,97,95,108,96,0,99,93,95],
[99,97,105,103,96,111,0,104,90],
[105,111,105,116,112,117,106,0,104],
[124,116,105,130,113,115,120,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,131,102,132,119,109,99,92],
[114,0,124,110,93,129,153,141,97],
[79,86,0,64,101,95,85,87,68],
[108,100,146,0,92,121,117,100,103],
[78,117,109,118,0,119,124,113,106],
[91,81,115,89,91,0,108,96,110],
[101,57,125,93,86,102,0,96,83],
[111,69,123,110,97,114,114,0,93],
[118,113,142,107,104,100,127,117,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,104,102,116,107,105,112,101],
[106,0,112,92,114,110,117,116,99],
[106,98,0,85,114,109,103,116,103],
[108,118,125,0,133,121,102,118,119],
[94,96,96,77,0,87,90,90,102],
[103,100,101,89,123,0,111,109,97],
[105,93,107,108,120,99,0,120,115],
[98,94,94,92,120,101,90,0,100],
[109,111,107,91,108,113,95,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,91,100,103,100,115,113,98,106],
[119,0,102,125,117,124,110,99,104],
[110,108,0,104,103,107,113,114,101],
[107,85,106,0,94,90,92,95,92],
[110,93,107,116,0,97,104,100,105],
[95,86,103,120,113,0,120,96,112],
[97,100,97,118,106,90,0,108,95],
[112,111,96,115,110,114,102,0,101],
[104,106,109,118,105,98,115,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,110,107,110,110,108,125,120,100],
[100,0,105,97,101,102,121,113,106],
[103,105,0,115,119,110,123,117,119],
[100,113,95,0,111,106,115,124,110],
[100,109,91,99,0,105,112,104,97],
[102,108,100,104,105,0,113,113,96],
[85,89,87,95,98,97,0,114,88],
[90,97,93,86,106,97,96,0,94],
[110,104,91,100,113,114,122,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,80,87,99,104,121,79,93],
[131,0,103,82,110,104,110,105,116],
[130,107,0,83,100,120,102,116,108],
[123,128,127,0,101,127,124,126,131],
[111,100,110,109,0,92,95,109,112],
[106,106,90,83,118,0,117,102,113],
[89,100,108,86,115,93,0,107,91],
[131,105,94,84,101,108,103,0,107],
[117,94,102,79,98,97,119,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,142,127,119,105,105,107,113],
[110,0,132,126,109,87,102,89,89],
[68,78,0,87,90,99,97,105,90],
[83,84,123,0,97,92,105,93,88],
[91,101,120,113,0,85,96,110,107],
[105,123,111,118,125,0,102,113,116],
[105,108,113,105,114,108,0,100,107],
[103,121,105,117,100,97,110,0,102],
[97,121,120,122,103,94,103,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,157,157,157,157,157,157,157],
[105,0,157,157,157,210,157,158,210],
[53,53,0,53,105,106,105,106,158],
[53,53,157,0,105,106,105,53,158],
[53,53,105,105,0,105,105,105,105],
[53,0,104,104,105,0,52,53,157],
[53,53,105,105,105,158,0,158,158],
[53,52,104,157,105,157,52,0,157],
[53,0,52,52,105,53,52,53,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,105,132,93,112,113,102,103],
[97,0,88,129,91,90,107,101,84],
[105,122,0,128,97,107,115,110,97],
[78,81,82,0,88,87,76,83,89],
[117,119,113,122,0,111,113,104,119],
[98,120,103,123,99,0,120,107,105],
[97,103,95,134,97,90,0,91,101],
[108,109,100,127,106,103,119,0,110],
[107,126,113,121,91,105,109,100,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,113,117,112,111,105,113,122],
[106,0,108,111,115,103,98,108,111],
[97,102,0,108,107,101,112,108,100],
[93,99,102,0,105,106,108,102,105],
[98,95,103,105,0,110,101,106,108],
[99,107,109,104,100,0,99,105,100],
[105,112,98,102,109,111,0,102,111],
[97,102,102,108,104,105,108,0,109],
[88,99,110,105,102,110,99,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,122,102,108,121,108,119,104],
[105,0,123,103,112,109,99,108,93],
[88,87,0,86,95,105,90,93,92],
[108,107,124,0,107,118,96,109,114],
[102,98,115,103,0,112,100,109,111],
[89,101,105,92,98,0,75,86,98],
[102,111,120,114,110,135,0,113,97],
[91,102,117,101,101,124,97,0,104],
[106,117,118,96,99,112,113,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,107,107,105,113,103,99,94],
[113,0,111,108,104,113,105,105,97],
[103,99,0,101,101,101,103,88,98],
[103,102,109,0,110,113,111,96,96],
[105,106,109,100,0,113,109,98,105],
[97,97,109,97,97,0,109,97,96],
[107,105,107,99,101,101,0,103,109],
[111,105,122,114,112,113,107,0,106],
[116,113,112,114,105,114,101,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,66,78,94,75,78,91,75],
[114,0,119,97,82,94,77,93,108],
[144,91,0,94,98,75,86,76,108],
[132,113,116,0,87,100,103,98,125],
[116,128,112,123,0,99,108,100,122],
[135,116,135,110,111,0,92,116,124],
[132,133,124,107,102,118,0,101,103],
[119,117,134,112,110,94,109,0,135],
[135,102,102,85,88,86,107,75,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,115,113,105,107,99,113,93,112],
[95,0,103,101,98,79,91,81,94],
[97,107,0,102,98,97,97,80,109],
[105,109,108,0,93,110,99,107,106],
[103,112,112,117,0,94,105,97,116],
[111,131,113,100,116,0,115,100,120],
[97,119,113,111,105,95,0,104,115],
[117,129,130,103,113,110,106,0,113],
[98,116,101,104,94,90,95,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,108,107,111,104,107,104,106],
[105,0,104,110,113,107,115,98,106],
[102,106,0,113,108,106,105,97,99],
[103,100,97,0,102,95,102,96,95],
[99,97,102,108,0,105,105,98,97],
[106,103,104,115,105,0,105,108,95],
[103,95,105,108,105,105,0,96,100],
[106,112,113,114,112,102,114,0,105],
[104,104,111,115,113,115,110,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,110,111,107,109,110,118,105],
[98,0,111,103,101,108,111,118,110],
[100,99,0,114,97,98,93,113,96],
[99,107,96,0,100,94,98,99,96],
[103,109,113,110,0,116,106,119,102],
[101,102,112,116,94,0,105,109,102],
[100,99,117,112,104,105,0,103,107],
[92,92,97,111,91,101,107,0,97],
[105,100,114,114,108,108,103,113,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,139,78,125,112,108,119,135,102],
[71,0,86,108,87,71,42,110,84],
[132,124,0,141,102,90,74,124,108],
[85,102,69,0,76,66,77,93,78],
[98,123,108,134,0,79,91,107,98],
[102,139,120,144,131,0,112,135,103],
[91,168,136,133,119,98,0,152,100],
[75,100,86,117,103,75,58,0,83],
[108,126,102,132,112,107,110,127,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,70,70,140,70,0,140,140,140],
[140,0,210,70,140,140,210,210,140],
[140,0,0,70,70,70,70,210,70],
[70,140,140,0,70,70,210,140,140],
[140,70,140,140,0,140,140,140,70],
[210,70,140,140,70,0,140,210,140],
[70,0,140,0,70,70,0,140,0],
[70,0,0,70,70,0,70,0,70],
[70,70,140,70,140,70,210,140,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,126,100,116,112,100,106,107],
[110,0,128,97,119,102,103,105,110],
[84,82,0,86,100,90,77,96,86],
[110,113,124,0,127,113,88,114,113],
[94,91,110,83,0,105,87,88,90],
[98,108,120,97,105,0,86,91,105],
[110,107,133,122,123,124,0,100,115],
[104,105,114,96,122,119,110,0,106],
[103,100,124,97,120,105,95,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,94,53,81,121,54,91,107],
[106,0,41,77,79,68,55,38,67],
[116,169,0,144,64,65,93,78,91],
[157,133,66,0,79,92,94,38,119],
[129,131,146,131,0,105,119,131,158],
[89,142,145,118,105,0,105,76,109],
[156,155,117,116,91,105,0,63,130],
[119,172,132,172,79,134,147,0,146],
[103,143,119,91,52,101,80,64,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,95,109,110,121,119,115,107],
[89,0,91,110,91,96,115,101,112],
[115,119,0,123,108,106,124,94,122],
[101,100,87,0,96,77,111,90,101],
[100,119,102,114,0,121,118,124,120],
[89,114,104,133,89,0,127,94,120],
[91,95,86,99,92,83,0,105,89],
[95,109,116,120,86,116,105,0,107],
[103,98,88,109,90,90,121,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,98,99,111,103,97,120,113],
[105,0,98,100,108,116,106,114,122],
[112,112,0,98,103,110,112,102,114],
[111,110,112,0,118,102,109,110,124],
[99,102,107,92,0,103,101,89,109],
[107,94,100,108,107,0,98,103,110],
[113,104,98,101,109,112,0,109,115],
[90,96,108,100,121,107,101,0,105],
[97,88,96,86,101,100,95,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,118,130,110,96,120,112,133,119],
[92,0,99,92,102,94,108,118,116],
[80,111,0,100,93,84,96,118,110],
[100,118,110,0,115,105,116,119,122],
[114,108,117,95,0,98,118,109,124],
[90,116,126,105,112,0,102,129,138],
[98,102,114,94,92,108,0,119,109],
[77,92,92,91,101,81,91,0,95],
[91,94,100,88,86,72,101,115,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,101,119,105,105,113,115,99],
[105,0,101,98,103,97,111,99,106],
[109,109,0,109,108,102,114,109,107],
[91,112,101,0,102,102,104,99,96],
[105,107,102,108,0,111,112,103,99],
[105,113,108,108,99,0,106,111,101],
[97,99,96,106,98,104,0,103,108],
[95,111,101,111,107,99,107,0,104],
[111,104,103,114,111,109,102,106,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,137,98,102,103,88,122,133],
[107,0,135,89,106,103,112,124,151],
[73,75,0,83,100,79,101,106,129],
[112,121,127,0,126,97,101,115,138],
[108,104,110,84,0,76,75,92,117],
[107,107,131,113,134,0,78,134,125],
[122,98,109,109,135,132,0,140,113],
[88,86,104,95,118,76,70,0,132],
[77,59,81,72,93,85,97,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,94,95,81,100,106,95,84,91],
[116,0,88,92,113,110,112,108,105],
[115,122,0,102,112,109,105,101,84],
[129,118,108,0,122,113,119,111,100],
[110,97,98,88,0,106,102,106,83],
[104,100,101,97,104,0,114,102,87],
[115,98,105,91,108,96,0,89,94],
[126,102,109,99,104,108,121,0,106],
[119,105,126,110,127,123,116,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,110,114,123,111,105,120,126],
[121,0,99,115,120,112,117,107,134],
[100,111,0,118,127,115,112,88,121],
[96,95,92,0,100,116,104,98,110],
[87,90,83,110,0,99,95,102,94],
[99,98,95,94,111,0,103,91,110],
[105,93,98,106,115,107,0,111,122],
[90,103,122,112,108,119,99,0,132],
[84,76,89,100,116,100,88,78,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,106,93,98,116,108,109,110,112],
[104,0,99,95,105,96,94,105,113],
[117,111,0,105,115,112,102,112,128],
[112,115,105,0,114,114,113,114,118],
[94,105,95,96,0,106,100,101,110],
[102,114,98,96,104,0,108,113,113],
[101,116,108,97,110,102,0,102,113],
[100,105,98,96,109,97,108,0,109],
[98,97,82,92,100,97,97,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,122,120,111,121,118,119,115],
[107,0,108,105,107,119,114,101,122],
[88,102,0,99,104,116,105,100,118],
[90,105,111,0,105,114,116,100,109],
[99,103,106,105,0,117,117,96,121],
[89,91,94,96,93,0,89,91,101],
[92,96,105,94,93,121,0,86,107],
[91,109,110,110,114,119,124,0,109],
[95,88,92,101,89,109,103,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,32,89,87,113,122,78,99,89],
[178,0,134,99,156,133,110,122,153],
[121,76,0,110,146,111,111,110,100],
[123,111,100,0,113,100,100,109,100],
[97,54,64,97,0,86,86,74,77],
[88,77,99,110,124,0,112,78,78],
[132,100,99,110,124,98,0,99,112],
[111,88,100,101,136,132,111,0,111],
[121,57,110,110,133,132,98,99,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,97,94,98,93,106,103,108,109],
[113,0,100,113,106,116,124,115,111],
[116,110,0,118,103,112,121,112,108],
[112,97,92,0,93,111,124,109,102],
[117,104,107,117,0,120,119,125,115],
[104,94,98,99,90,0,116,110,107],
[107,86,89,86,91,94,0,105,95],
[102,95,98,101,85,100,105,0,102],
[101,99,102,108,95,103,115,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,93,101,97,91,105,102,94],
[109,0,93,100,93,117,108,115,105],
[117,117,0,110,109,102,107,114,99],
[109,110,100,0,101,102,115,121,100],
[113,117,101,109,0,116,117,116,112],
[119,93,108,108,94,0,112,110,111],
[105,102,103,95,93,98,0,104,91],
[108,95,96,89,94,100,106,0,99],
[116,105,111,110,98,99,119,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,109,109,130,123,112,125,117],
[110,0,97,89,119,107,113,105,125],
[101,113,0,101,118,112,104,112,118],
[101,121,109,0,117,126,114,117,119],
[80,91,92,93,0,100,105,108,99],
[87,103,98,84,110,0,110,118,123],
[98,97,106,96,105,100,0,112,116],
[85,105,98,93,102,92,98,0,106],
[93,85,92,91,111,87,94,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,121,95,105,101,110,108,102],
[96,0,99,93,102,86,103,96,90],
[89,111,0,80,99,87,110,85,94],
[115,117,130,0,122,97,126,114,112],
[105,108,111,88,0,97,107,87,97],
[109,124,123,113,113,0,114,101,102],
[100,107,100,84,103,96,0,95,98],
[102,114,125,96,123,109,115,0,107],
[108,120,116,98,113,108,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,112,106,137,122,101,121,109],
[108,0,96,118,139,116,142,142,119],
[98,114,0,122,133,127,143,134,130],
[104,92,88,0,125,124,112,92,91],
[73,71,77,85,0,110,100,97,88],
[88,94,83,86,100,0,130,120,91],
[109,68,67,98,110,80,0,107,78],
[89,68,76,118,113,90,103,0,90],
[101,91,80,119,122,119,132,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,114,97,114,112,92,106,101],
[103,0,115,104,98,108,90,95,117],
[96,95,0,90,104,98,97,97,98],
[113,106,120,0,106,100,90,103,113],
[96,112,106,104,0,107,111,106,110],
[98,102,112,110,103,0,86,105,104],
[118,120,113,120,99,124,0,96,120],
[104,115,113,107,104,105,114,0,106],
[109,93,112,97,100,106,90,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,96,102,111,140,96,118,98],
[110,0,91,117,115,132,112,112,129],
[114,119,0,128,124,122,103,128,119],
[108,93,82,0,118,129,92,135,122],
[99,95,86,92,0,116,80,97,83],
[70,78,88,81,94,0,80,94,85],
[114,98,107,118,130,130,0,119,121],
[92,98,82,75,113,116,91,0,107],
[112,81,91,88,127,125,89,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,124,86,83,105,105,95,117,91],
[86,0,71,76,95,77,87,88,78],
[124,139,0,103,122,93,123,113,103],
[127,134,107,0,118,101,127,125,108],
[105,115,88,92,0,102,112,115,105],
[105,133,117,109,108,0,116,119,102],
[115,123,87,83,98,94,0,101,96],
[93,122,97,85,95,91,109,0,101],
[119,132,107,102,105,108,114,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,77,99,95,104,95,81,93],
[112,0,98,92,105,115,105,89,112],
[133,112,0,119,135,125,105,118,112],
[111,118,91,0,115,106,105,98,107],
[115,105,75,95,0,94,118,97,86],
[106,95,85,104,116,0,86,93,113],
[115,105,105,105,92,124,0,107,103],
[129,121,92,112,113,117,103,0,113],
[117,98,98,103,124,97,107,97,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,111,98,104,112,105,108],
[98,0,100,99,94,88,92,90,99],
[105,110,0,98,96,97,103,95,103],
[99,111,112,0,98,110,103,103,107],
[112,116,114,112,0,103,111,109,109],
[106,122,113,100,107,0,102,102,103],
[98,118,107,107,99,108,0,96,116],
[105,120,115,107,101,108,114,0,115],
[102,111,107,103,101,107,94,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,100,100,102,112,108,106,108],
[107,0,106,105,102,105,106,98,101],
[110,104,0,113,95,113,108,104,99],
[110,105,97,0,101,106,108,103,100],
[108,108,115,109,0,105,109,116,108],
[98,105,97,104,105,0,98,101,98],
[102,104,102,102,101,112,0,109,99],
[104,112,106,107,94,109,101,0,101],
[102,109,111,110,102,112,111,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,97,107,106,108,94,128,109],
[112,0,99,81,113,88,73,90,90],
[113,111,0,120,136,94,89,118,96],
[103,129,90,0,116,104,107,124,117],
[104,97,74,94,0,83,86,101,87],
[102,122,116,106,127,0,96,125,113],
[116,137,121,103,124,114,0,122,113],
[82,120,92,86,109,85,88,0,80],
[101,120,114,93,123,97,97,130,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,108,95,107,116,98,101,108,93],
[102,0,96,103,111,89,102,87,96],
[115,114,0,115,123,109,105,108,104],
[103,107,95,0,114,95,107,103,98],
[94,99,87,96,0,89,85,89,84],
[112,121,101,115,121,0,115,107,111],
[109,108,105,103,125,95,0,107,103],
[102,123,102,107,121,103,103,0,101],
[117,114,106,112,126,99,107,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,113,77,102,90,93,118,86,93],
[97,0,71,79,85,67,89,84,78],
[133,139,0,110,90,101,112,115,117],
[108,131,100,0,84,87,115,110,93],
[120,125,120,126,0,117,118,127,95],
[117,143,109,123,93,0,126,119,116],
[92,121,98,95,92,84,0,91,97],
[124,126,95,100,83,91,119,0,115],
[117,132,93,117,115,94,113,95,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,103,111,109,113,107,113,101],
[101,0,102,100,120,113,109,116,99],
[107,108,0,108,92,125,116,130,106],
[99,110,102,0,120,122,113,110,104],
[101,90,118,90,0,110,103,112,100],
[97,97,85,88,100,0,94,107,91],
[103,101,94,97,107,116,0,114,92],
[97,94,80,100,98,103,96,0,94],
[109,111,104,106,110,119,118,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,76,94,114,107,119,110,76,101],
[134,0,107,121,83,124,119,108,128],
[116,103,0,110,97,112,99,115,96],
[96,89,100,0,85,106,100,94,92],
[103,127,113,125,0,128,106,109,130],
[91,86,98,104,82,0,81,100,95],
[100,91,111,110,104,129,0,114,118],
[134,102,95,116,101,110,96,0,100],
[109,82,114,118,80,115,92,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,143,82,88,101,112,103,132,90],
[67,0,88,76,97,88,88,107,68],
[128,122,0,106,118,109,89,89,99],
[122,134,104,0,111,112,123,123,101],
[109,113,92,99,0,100,131,122,100],
[98,122,101,98,110,0,132,122,109],
[107,122,121,87,79,78,0,100,89],
[78,103,121,87,88,88,110,0,78],
[120,142,111,109,110,101,121,132,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,106,100,103,111,103,79,95],
[111,0,105,97,103,114,107,99,93],
[104,105,0,95,108,104,106,89,96],
[110,113,115,0,115,114,103,106,124],
[107,107,102,95,0,114,100,97,111],
[99,96,106,96,96,0,104,91,106],
[107,103,104,107,110,106,0,101,104],
[131,111,121,104,113,119,109,0,114],
[115,117,114,86,99,104,106,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,122,115,104,109,107,112,117,111],
[88,0,101,92,106,82,77,102,96],
[95,109,0,83,107,85,91,101,86],
[106,118,127,0,116,107,100,106,109],
[101,104,103,94,0,91,103,110,96],
[103,128,125,103,119,0,112,99,109],
[98,133,119,110,107,98,0,111,110],
[93,108,109,104,100,111,99,0,108],
[99,114,124,101,114,101,100,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,102,101,105,91,106,82,96,100],
[108,0,101,87,97,111,79,99,97],
[109,109,0,89,113,105,94,119,89],
[105,123,121,0,91,121,76,106,100],
[119,113,97,119,0,128,105,112,99],
[104,99,105,89,82,0,85,96,99],
[128,131,116,134,105,125,0,130,106],
[114,111,91,104,98,114,80,0,101],
[110,113,121,110,111,111,104,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,101,111,99,106,97,98,103,114],
[109,0,113,115,101,105,108,110,122],
[99,97,0,102,93,88,102,105,91],
[111,95,108,0,103,92,104,101,115],
[104,109,117,107,0,103,110,114,115],
[113,105,122,118,107,0,110,107,106],
[112,102,108,106,100,100,0,108,103],
[107,100,105,109,96,103,102,0,102],
[96,88,119,95,95,104,107,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,90,101,104,104,108,108,94,94],
[120,0,100,111,120,112,116,108,103],
[109,110,0,110,116,114,118,102,106],
[106,99,100,0,107,101,98,91,108],
[106,90,94,103,0,89,97,91,94],
[102,98,96,109,121,0,104,101,96],
[102,94,92,112,113,106,0,78,98],
[116,102,108,119,119,109,132,0,101],
[116,107,104,102,116,114,112,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,105,100,98,92,99,106,109],
[98,0,94,115,115,108,103,91,99],
[105,116,0,113,98,96,95,103,100],
[110,95,97,0,105,99,100,101,97],
[112,95,112,105,0,106,97,99,113],
[118,102,114,111,104,0,95,97,98],
[111,107,115,110,113,115,0,87,108],
[104,119,107,109,111,113,123,0,108],
[101,111,110,113,97,112,102,102,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,136,117,123,126,105,101,120,121],
[74,0,92,103,97,93,89,100,97],
[93,118,0,114,106,99,92,109,99],
[87,107,96,0,100,84,91,97,94],
[84,113,104,110,0,98,99,105,107],
[105,117,111,126,112,0,109,115,109],
[109,121,118,119,111,101,0,115,108],
[90,110,101,113,105,95,95,0,103],
[89,113,111,116,103,101,102,107,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,106,76,79,87,79,58,92],
[114,0,129,85,105,108,110,126,123],
[104,81,0,56,56,89,75,60,95],
[134,125,154,0,82,115,117,85,129],
[131,105,154,128,0,123,116,121,125],
[123,102,121,95,87,0,108,97,120],
[131,100,135,93,94,102,0,109,137],
[152,84,150,125,89,113,101,0,114],
[118,87,115,81,85,90,73,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,103,103,105,96,106,97],
[106,0,102,113,96,103,107,101,97],
[108,108,0,106,108,116,102,103,95],
[107,97,104,0,103,100,105,85,101],
[107,114,102,107,0,106,110,103,107],
[105,107,94,110,104,0,107,98,91],
[114,103,108,105,100,103,0,102,107],
[104,109,107,125,107,112,108,0,106],
[113,113,115,109,103,119,103,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,89,100,112,94,98,106,96,96],
[121,0,111,103,109,111,107,96,114],
[110,99,0,90,90,99,93,98,103],
[98,107,120,0,107,113,111,115,103],
[116,101,120,103,0,122,109,95,101],
[112,99,111,97,88,0,94,114,103],
[104,103,117,99,101,116,0,106,122],
[114,114,112,95,115,96,104,0,114],
[114,96,107,107,109,107,88,96,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,100,106,106,98,100,100,109,121],
[110,0,76,105,105,109,101,111,103],
[104,134,0,117,119,119,125,132,118],
[104,105,93,0,106,109,107,120,97],
[112,105,91,104,0,94,98,111,111],
[110,101,91,101,116,0,100,105,112],
[110,109,85,103,112,110,0,124,102],
[101,99,78,90,99,105,86,0,94],
[89,107,92,113,99,98,108,116,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,117,114,96,125,109,106,91,108],
[93,0,108,115,122,106,102,99,118],
[96,102,0,102,123,93,111,107,113],
[114,95,108,0,125,90,122,99,115],
[85,88,87,85,0,94,99,76,98],
[101,104,117,120,116,0,117,112,125],
[104,108,99,88,111,93,0,108,105],
[119,111,103,111,134,98,102,0,106],
[102,92,97,95,112,85,105,104,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,103,103,121,111,115,133,118,120],
[107,0,118,115,104,110,126,109,107],
[107,92,0,114,103,109,120,111,102],
[89,95,96,0,94,108,111,100,96],
[99,106,107,116,0,110,127,108,108],
[95,100,101,102,100,0,101,105,93],
[77,84,90,99,83,109,0,100,96],
[92,101,99,110,102,105,110,0,102],
[90,103,108,114,102,117,114,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,98,122,107,121,115,121,100],
[94,0,111,87,107,98,103,121,108],
[112,99,0,86,94,98,109,136,107],
[88,123,124,0,96,115,101,136,103],
[103,103,116,114,0,91,117,127,106],
[89,112,112,95,119,0,114,114,113],
[95,107,101,109,93,96,0,118,100],
[89,89,74,74,83,96,92,0,79],
[110,102,103,107,104,97,110,131,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,116,99,107,112,104,96,106,102],
[94,0,99,104,102,100,103,91,102],
[111,111,0,100,115,99,106,112,105],
[103,106,110,0,97,100,107,96,99],
[98,108,95,113,0,92,98,93,97],
[106,110,111,110,118,0,102,107,110],
[114,107,104,103,112,108,0,106,110],
[104,119,98,114,117,103,104,0,101],
[108,108,105,111,113,100,100,109,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,107,130,79,84,95,113,98,119],
[103,0,119,79,92,104,105,71,79],
[80,91,0,107,68,94,86,84,120],
[131,131,103,0,117,126,117,113,140],
[126,118,142,93,0,103,120,95,117],
[115,106,116,84,107,0,103,92,128],
[97,105,124,93,90,107,0,94,125],
[112,139,126,97,115,118,116,0,151],
[91,131,90,70,93,82,85,59,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,104,102,99,103,103,95,104,89],
[106,0,98,107,90,92,97,101,97],
[108,112,0,115,94,106,108,102,107],
[111,103,95,0,102,111,97,101,102],
[107,120,116,108,0,106,102,97,108],
[107,118,104,99,104,0,97,108,115],
[115,113,102,113,108,113,0,107,108],
[106,109,108,109,113,102,103,0,100],
[121,113,103,108,102,95,102,110,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,151,119,115,107,87,119,106,115],
[59,0,96,78,94,73,101,70,76],
[91,114,0,115,115,92,127,88,107],
[95,132,95,0,115,97,110,84,107],
[103,116,95,95,0,105,119,85,104],
[123,137,118,113,105,0,122,94,111],
[91,109,83,100,91,88,0,86,102],
[104,140,122,126,125,116,124,0,118],
[95,134,103,103,106,99,108,92,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,99,99,102,115,98,102,96,103],
[111,0,108,111,114,109,110,103,110],
[111,102,0,103,118,107,114,111,109],
[108,99,107,0,100,105,104,102,112],
[95,96,92,110,0,94,96,96,102],
[112,101,103,105,116,0,104,94,117],
[108,100,96,106,114,106,0,107,98],
[114,107,99,108,114,116,103,0,109],
[107,100,101,98,108,93,112,101,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,109,107,119,103,108,104,109,110],
[101,0,101,102,83,107,85,98,102],
[103,109,0,108,96,108,92,103,113],
[91,108,102,0,97,100,86,95,103],
[107,127,114,113,0,116,103,116,104],
[102,103,102,110,94,0,101,108,106],
[106,125,118,124,107,109,0,102,114],
[101,112,107,115,94,102,108,0,99],
[100,108,97,107,106,104,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,119,95,97,105,101,94,123,101],
[91,0,104,95,97,102,105,104,99],
[115,106,0,100,108,111,113,114,110],
[113,115,110,0,107,105,101,110,107],
[105,113,102,103,0,103,95,108,103],
[109,108,99,105,107,0,102,120,108],
[116,105,97,109,115,108,0,108,113],
[87,106,96,100,102,90,102,0,102],
[109,111,100,103,107,102,97,108,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,95,91,109,112,98,103,102,101],
[115,0,108,116,133,100,104,90,125],
[119,102,0,106,128,105,97,104,108],
[101,94,104,0,116,101,97,97,114],
[98,77,82,94,0,88,85,94,96],
[112,110,105,109,122,0,102,113,109],
[107,106,113,113,125,108,0,105,114],
[108,120,106,113,116,97,105,0,99],
[109,85,102,96,114,101,96,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,77,107,104,104,115,100,76,124],
[133,0,104,94,128,124,110,119,129],
[103,106,0,125,113,109,82,93,102],
[106,116,85,0,97,103,120,103,113],
[106,82,97,113,0,102,100,109,113],
[95,86,101,107,108,0,114,91,122],
[110,100,128,90,110,96,0,103,106],
[134,91,117,107,101,119,107,0,122],
[86,81,108,97,97,88,104,88,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,98,96,87,93,96,114,96,93],
[112,0,103,102,108,100,93,99,83],
[114,107,0,105,114,102,108,97,100],
[123,108,105,0,106,93,122,103,117],
[117,102,96,104,0,107,126,102,97],
[114,110,108,117,103,0,128,104,113],
[96,117,102,88,84,82,0,95,80],
[114,111,113,107,108,106,115,0,99],
[117,127,110,93,113,97,130,111,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,112,116,100,147,104,125,93,110],
[98,0,106,104,134,92,111,108,94],
[94,104,0,85,111,95,112,86,91],
[110,106,125,0,124,117,120,88,104],
[63,76,99,86,0,74,90,74,84],
[106,118,115,93,136,0,108,77,98],
[85,99,98,90,120,102,0,69,97],
[117,102,124,122,136,133,141,0,129],
[100,116,119,106,126,112,113,81,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,114,107,105,115,102,111,114,91],
[96,0,100,93,123,94,103,105,82],
[103,110,0,108,117,96,109,110,94],
[105,117,102,0,126,107,105,115,111],
[95,87,93,84,0,91,87,102,68],
[108,116,114,103,119,0,107,107,93],
[99,107,101,105,123,103,0,104,89],
[96,105,100,95,108,103,106,0,88],
[119,128,116,99,142,117,121,122,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,105,105,105,105,105,105,105,105],
[105,0,0,0,105,105,105,0,105],
[105,210,0,210,105,210,210,210,105],
[105,210,0,0,105,105,105,0,105],
[105,105,105,105,0,105,105,105,0],
[105,105,0,105,105,0,105,105,105],
[105,105,0,105,105,105,0,105,0],
[105,210,0,210,105,105,105,0,105],
[105,105,105,105,210,105,210,105,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,96,104,111,113,100,104,101,109],
[114,0,93,102,102,99,102,96,100],
[106,117,0,114,109,100,109,99,108],
[99,108,96,0,104,102,103,106,102],
[97,108,101,106,0,108,101,109,99],
[110,111,110,108,102,0,103,99,105],
[106,108,101,107,109,107,0,102,98],
[109,114,111,104,101,111,108,0,107],
[101,110,102,108,111,105,112,103,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([9, 210, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_9_210.csv", index=False, header=False)
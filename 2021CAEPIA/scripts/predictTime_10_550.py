
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,276,292,277,273,261,268,270,290,271],
[274,0,289,253,258,266,260,287,286,276],
[258,261,0,241,269,256,233,246,274,263],
[273,297,309,0,274,282,276,285,299,274],
[277,292,281,276,0,268,281,286,292,275],
[289,284,294,268,282,0,272,285,282,279],
[282,290,317,274,269,278,0,273,279,291],
[280,263,304,265,264,265,277,0,279,285],
[260,264,276,251,258,268,271,271,0,265],
[279,274,287,276,275,271,259,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,285,269,265,276,273,268,287],
[284,0,261,280,245,265,266,273,265,270],
[296,289,0,313,286,262,284,297,301,301],
[265,270,237,0,269,275,282,274,257,278],
[281,305,264,281,0,274,281,290,292,295],
[285,285,288,275,276,0,284,273,279,287],
[274,284,266,268,269,266,0,263,277,292],
[277,277,253,276,260,277,287,0,272,300],
[282,285,249,293,258,271,273,278,0,283],
[263,280,249,272,255,263,258,250,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,286,267,251,246,223,252,263,250],
[296,0,298,288,274,274,285,267,293,267],
[264,252,0,270,252,244,228,262,246,229],
[283,262,280,0,258,260,228,264,269,254],
[299,276,298,292,0,269,258,253,295,233],
[304,276,306,290,281,0,252,273,280,257],
[327,265,322,322,292,298,0,296,303,280],
[298,283,288,286,297,277,254,0,285,251],
[287,257,304,281,255,270,247,265,0,266],
[300,283,321,296,317,293,270,299,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,287,306,293,298,260,314,288,282],
[259,0,283,282,266,274,271,314,273,261],
[263,267,0,281,250,283,251,277,269,259],
[244,268,269,0,258,276,256,297,258,245],
[257,284,300,292,0,295,277,324,301,284],
[252,276,267,274,255,0,268,293,263,261],
[290,279,299,294,273,282,0,323,287,253],
[236,236,273,253,226,257,227,0,258,228],
[262,277,281,292,249,287,263,292,0,274],
[268,289,291,305,266,289,297,322,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,303,259,300,271,298,279,287,254],
[284,0,291,281,275,275,295,292,312,274],
[247,259,0,255,285,254,261,261,289,266],
[291,269,295,0,303,270,306,280,309,269],
[250,275,265,247,0,258,269,262,283,241],
[279,275,296,280,292,0,301,261,294,277],
[252,255,289,244,281,249,0,251,292,254],
[271,258,289,270,288,289,299,0,285,261],
[263,238,261,241,267,256,258,265,0,236],
[296,276,284,281,309,273,296,289,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,205,279,350,509,509,279,435,350],
[200,0,350,41,200,200,465,129,350,159],
[345,200,0,186,386,345,345,200,550,186],
[271,509,364,0,200,386,550,129,435,495],
[200,350,164,350,0,509,350,279,276,350],
[41,350,205,164,41,0,391,129,205,279],
[41,85,205,0,200,159,0,14,364,0],
[271,421,350,421,271,421,536,0,421,421],
[115,200,0,115,274,345,186,129,0,115],
[200,391,364,55,200,271,550,129,435,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,413,278,345,341,254,361,217,398,264],
[137,0,147,191,235,101,184,95,181,64],
[272,403,0,354,288,343,315,168,303,153],
[205,359,196,0,285,212,285,247,361,170],
[209,315,262,265,0,181,251,94,207,284],
[296,449,207,338,369,0,320,144,381,171],
[189,366,235,265,299,230,0,198,347,82],
[333,455,382,303,456,406,352,0,373,274],
[152,369,247,189,343,169,203,177,0,126],
[286,486,397,380,266,379,468,276,424,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,270,275,284,289,282,274,284],
[277,0,269,275,263,275,298,301,282,271],
[267,281,0,253,263,279,270,269,270,269],
[280,275,297,0,264,299,299,295,278,289],
[275,287,287,286,0,265,290,303,262,285],
[266,275,271,251,285,0,288,272,281,283],
[261,252,280,251,260,262,0,285,268,281],
[268,249,281,255,247,278,265,0,249,266],
[276,268,280,272,288,269,282,301,0,294],
[266,279,281,261,265,267,269,284,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,305,260,265,296,249,263,288],
[273,0,258,261,275,259,265,268,232,283],
[273,292,0,305,275,274,311,247,253,315],
[245,289,245,0,262,283,279,247,254,302],
[290,275,275,288,0,266,276,279,252,293],
[285,291,276,267,284,0,302,245,278,293],
[254,285,239,271,274,248,0,264,262,285],
[301,282,303,303,271,305,286,0,248,308],
[287,318,297,296,298,272,288,302,0,300],
[262,267,235,248,257,257,265,242,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,287,390,394,308,379,268,354,327],
[228,0,256,293,357,274,227,281,216,338],
[263,294,0,306,342,373,255,244,286,309],
[160,257,244,0,344,277,294,266,238,313],
[156,193,208,206,0,258,225,200,166,295],
[242,276,177,273,292,0,223,212,200,194],
[171,323,295,256,325,327,0,183,172,294],
[282,269,306,284,350,338,367,0,303,338],
[196,334,264,312,384,350,378,247,0,346],
[223,212,241,237,255,356,256,212,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,303,276,259,304,269,288,234,281],
[291,0,322,279,252,266,243,307,268,280],
[247,228,0,278,235,265,241,255,224,223],
[274,271,272,0,261,270,251,276,254,267],
[291,298,315,289,0,297,287,313,270,277],
[246,284,285,280,253,0,283,287,288,279],
[281,307,309,299,263,267,0,276,284,289],
[262,243,295,274,237,263,274,0,255,278],
[316,282,326,296,280,262,266,295,0,276],
[269,270,327,283,273,271,261,272,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,271,248,260,253,269,274,266],
[292,0,302,267,279,281,267,270,295,293],
[287,248,0,280,295,266,268,279,304,295],
[279,283,270,0,280,285,289,270,282,289],
[302,271,255,270,0,259,270,265,285,268],
[290,269,284,265,291,0,279,267,265,301],
[297,283,282,261,280,271,0,265,278,279],
[281,280,271,280,285,283,285,0,292,290],
[276,255,246,268,265,285,272,258,0,274],
[284,257,255,261,282,249,271,260,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,251,257,269,278,262,259,266,260],
[286,0,280,263,280,287,267,267,273,274],
[299,270,0,270,278,298,273,301,282,290],
[293,287,280,0,269,284,273,288,289,281],
[281,270,272,281,0,293,275,294,286,289],
[272,263,252,266,257,0,260,273,276,271],
[288,283,277,277,275,290,0,284,272,280],
[291,283,249,262,256,277,266,0,276,259],
[284,277,268,261,264,274,278,274,0,278],
[290,276,260,269,261,279,270,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,273,299,264,281,273,273,266,267],
[290,0,275,309,265,285,294,289,265,287],
[277,275,0,279,279,265,288,280,261,280],
[251,241,271,0,260,267,255,271,245,247],
[286,285,271,290,0,277,260,296,279,258],
[269,265,285,283,273,0,272,272,262,268],
[277,256,262,295,290,278,0,283,268,274],
[277,261,270,279,254,278,267,0,261,260],
[284,285,289,305,271,288,282,289,0,273],
[283,263,270,303,292,282,276,290,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,289,289,276,257,282,274,275,257],
[236,0,257,274,263,248,277,243,257,264],
[261,293,0,266,273,269,278,255,255,266],
[261,276,284,0,278,247,304,264,269,254],
[274,287,277,272,0,284,290,263,267,270],
[293,302,281,303,266,0,291,264,266,270],
[268,273,272,246,260,259,0,238,243,234],
[276,307,295,286,287,286,312,0,260,279],
[275,293,295,281,283,284,307,290,0,292],
[293,286,284,296,280,280,316,271,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,281,319,323,262,284,281,279,259],
[248,0,263,285,290,248,225,270,294,210],
[269,287,0,279,298,238,237,243,275,233],
[231,265,271,0,246,248,221,258,277,214],
[227,260,252,304,0,250,248,273,280,207],
[288,302,312,302,300,0,269,289,281,274],
[266,325,313,329,302,281,0,295,316,281],
[269,280,307,292,277,261,255,0,289,273],
[271,256,275,273,270,269,234,261,0,268],
[291,340,317,336,343,276,269,277,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,293,281,282,269,290,290,289,283],
[268,0,266,281,274,262,262,272,281,275],
[257,284,0,274,282,262,266,277,284,284],
[269,269,276,0,247,256,274,265,276,275],
[268,276,268,303,0,274,277,271,268,275],
[281,288,288,294,276,0,254,294,294,282],
[260,288,284,276,273,296,0,290,276,276],
[260,278,273,285,279,256,260,0,270,272],
[261,269,266,274,282,256,274,280,0,255],
[267,275,266,275,275,268,274,278,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,258,225,225,225,137,373,221,200],
[413,0,353,306,289,162,193,452,162,355],
[292,197,0,197,168,137,181,458,168,386],
[325,244,353,0,268,195,193,364,195,193],
[325,261,382,282,0,242,261,290,25,257],
[325,388,413,355,308,0,261,384,119,316],
[413,357,369,357,289,289,0,546,215,408],
[177,98,92,186,260,166,4,0,182,161],
[329,388,382,355,525,431,335,368,0,261],
[350,195,164,357,293,234,142,389,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,275,278,320,291,259,285,297,295],
[295,0,248,296,302,251,272,285,264,249],
[275,302,0,264,287,289,305,281,281,277],
[272,254,286,0,303,275,284,251,251,263],
[230,248,263,247,0,273,253,229,203,184],
[259,299,261,275,277,0,279,276,297,246],
[291,278,245,266,297,271,0,243,243,228],
[265,265,269,299,321,274,307,0,271,256],
[253,286,269,299,347,253,307,279,0,250],
[255,301,273,287,366,304,322,294,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,268,268,272,273,257,265,260,254],
[306,0,264,286,257,286,293,287,268,281],
[282,286,0,278,297,286,271,288,264,285],
[282,264,272,0,259,297,271,265,265,300],
[278,293,253,291,0,287,279,282,276,270],
[277,264,264,253,263,0,256,265,206,252],
[293,257,279,279,271,294,0,262,269,277],
[285,263,262,285,268,285,288,0,240,274],
[290,282,286,285,274,344,281,310,0,268],
[296,269,265,250,280,298,273,276,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,289,299,262,285,292,299,312,268],
[257,0,269,256,227,293,271,284,251,257],
[261,281,0,270,251,293,270,283,271,262],
[251,294,280,0,237,296,261,284,260,248],
[288,323,299,313,0,296,282,309,305,261],
[265,257,257,254,254,0,251,266,257,241],
[258,279,280,289,268,299,0,268,286,285],
[251,266,267,266,241,284,282,0,278,259],
[238,299,279,290,245,293,264,272,0,255],
[282,293,288,302,289,309,265,291,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,283,249,253,286,282,263,279,251],
[304,0,282,264,269,280,289,283,264,260],
[267,268,0,270,254,266,279,261,256,256],
[301,286,280,0,289,281,293,268,290,274],
[297,281,296,261,0,287,301,286,283,286],
[264,270,284,269,263,0,302,262,242,273],
[268,261,271,257,249,248,0,273,249,250],
[287,267,289,282,264,288,277,0,265,263],
[271,286,294,260,267,308,301,285,0,285],
[299,290,294,276,264,277,300,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,270,285,282,262,305,292,303,277],
[260,0,274,270,306,276,293,308,278,305],
[280,276,0,266,296,260,316,303,286,284],
[265,280,284,0,276,254,283,300,275,286],
[268,244,254,274,0,272,277,257,297,278],
[288,274,290,296,278,0,297,252,299,280],
[245,257,234,267,273,253,0,275,263,248],
[258,242,247,250,293,298,275,0,269,264],
[247,272,264,275,253,251,287,281,0,275],
[273,245,266,264,272,270,302,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,315,299,294,314,295,302,230],
[266,0,283,330,270,316,315,279,265,289],
[268,267,0,300,296,255,296,316,303,296],
[235,220,250,0,289,244,270,231,246,244],
[251,280,254,261,0,285,273,257,255,288],
[256,234,295,306,265,0,271,274,264,258],
[236,235,254,280,277,279,0,249,267,265],
[255,271,234,319,293,276,301,0,303,266],
[248,285,247,304,295,286,283,247,0,263],
[320,261,254,306,262,292,285,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,290,288,278,284,309,272,298,286],
[264,0,288,269,273,277,294,266,268,262],
[260,262,0,269,267,248,275,271,263,266],
[262,281,281,0,284,275,277,258,255,253],
[272,277,283,266,0,280,288,271,265,278],
[266,273,302,275,270,0,295,281,285,276],
[241,256,275,273,262,255,0,226,258,254],
[278,284,279,292,279,269,324,0,292,267],
[252,282,287,295,285,265,292,258,0,246],
[264,288,284,297,272,274,296,283,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,269,278,275,255,252,240,290,302],
[297,0,267,295,246,269,269,267,303,282],
[281,283,0,305,275,255,264,270,270,282],
[272,255,245,0,233,239,232,234,273,242],
[275,304,275,317,0,287,276,275,294,282],
[295,281,295,311,263,0,294,299,278,284],
[298,281,286,318,274,256,0,259,275,267],
[310,283,280,316,275,251,291,0,302,304],
[260,247,280,277,256,272,275,248,0,286],
[248,268,268,308,268,266,283,246,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,300,301,291,295,276,294,291,319],
[277,0,277,266,287,288,257,260,274,290],
[250,273,0,267,277,283,252,247,238,271],
[249,284,283,0,265,279,255,269,287,287],
[259,263,273,285,0,282,247,255,266,259],
[255,262,267,271,268,0,249,254,257,271],
[274,293,298,295,303,301,0,269,289,295],
[256,290,303,281,295,296,281,0,275,308],
[259,276,312,263,284,293,261,275,0,279],
[231,260,279,263,291,279,255,242,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,302,289,268,252,292,274,254,275],
[258,0,279,295,262,239,259,251,273,264],
[248,271,0,277,287,278,282,273,269,270],
[261,255,273,0,284,260,246,248,268,246],
[282,288,263,266,0,248,280,241,262,258],
[298,311,272,290,302,0,278,285,268,294],
[258,291,268,304,270,272,0,255,265,291],
[276,299,277,302,309,265,295,0,295,280],
[296,277,281,282,288,282,285,255,0,294],
[275,286,280,304,292,256,259,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,292,284,278,281,260,278,275],
[246,0,260,271,281,282,267,260,272,262],
[271,290,0,274,281,275,273,289,282,273],
[258,279,276,0,282,267,282,262,266,256],
[266,269,269,268,0,261,266,261,272,272],
[272,268,275,283,289,0,282,254,275,263],
[269,283,277,268,284,268,0,272,276,267],
[290,290,261,288,289,296,278,0,279,275],
[272,278,268,284,278,275,274,271,0,266],
[275,288,277,294,278,287,283,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,287,283,276,277,264,266,284],
[265,0,262,276,267,262,279,282,279,270],
[277,288,0,283,276,280,269,270,281,286],
[263,274,267,0,263,276,272,270,262,270],
[267,283,274,287,0,289,271,262,277,278],
[274,288,270,274,261,0,291,271,266,268],
[273,271,281,278,279,259,0,271,278,269],
[286,268,280,280,288,279,279,0,274,286],
[284,271,269,288,273,284,272,276,0,275],
[266,280,264,280,272,282,281,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,269,278,283,281,276,286,259,275],
[288,0,279,283,283,290,290,286,259,282],
[281,271,0,279,291,288,285,303,276,285],
[272,267,271,0,296,280,292,295,253,283],
[267,267,259,254,0,265,285,298,255,289],
[269,260,262,270,285,0,294,298,283,292],
[274,260,265,258,265,256,0,268,254,265],
[264,264,247,255,252,252,282,0,257,264],
[291,291,274,297,295,267,296,293,0,302],
[275,268,265,267,261,258,285,286,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,301,238,281,287,248,288,236,263],
[276,0,286,244,261,278,256,294,262,294],
[249,264,0,251,248,247,262,275,253,271],
[312,306,299,0,289,282,281,304,273,281],
[269,289,302,261,0,287,273,306,264,302],
[263,272,303,268,263,0,265,289,270,286],
[302,294,288,269,277,285,0,290,287,291],
[262,256,275,246,244,261,260,0,236,263],
[314,288,297,277,286,280,263,314,0,311],
[287,256,279,269,248,264,259,287,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,236,260,253,277,263,285,246,261],
[275,0,247,288,240,253,256,250,245,256],
[314,303,0,314,285,289,276,285,270,275],
[290,262,236,0,250,249,271,258,236,246],
[297,310,265,300,0,282,276,280,276,294],
[273,297,261,301,268,0,289,260,290,286],
[287,294,274,279,274,261,0,272,265,262],
[265,300,265,292,270,290,278,0,272,262],
[304,305,280,314,274,260,285,278,0,281],
[289,294,275,304,256,264,288,288,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,290,253,291,309,273,281,257,278],
[287,0,266,275,273,267,274,280,268,289],
[260,284,0,261,292,283,280,326,273,305],
[297,275,289,0,305,239,280,301,293,353],
[259,277,258,245,0,253,292,315,286,295],
[241,283,267,311,297,0,244,275,271,286],
[277,276,270,270,258,306,0,313,286,292],
[269,270,224,249,235,275,237,0,276,305],
[293,282,277,257,264,279,264,274,0,298],
[272,261,245,197,255,264,258,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,274,267,251,276,296,265,256],
[292,0,269,258,269,247,246,268,258,256],
[278,281,0,283,262,267,272,235,262,266],
[276,292,267,0,261,253,286,271,285,265],
[283,281,288,289,0,265,281,280,261,280],
[299,303,283,297,285,0,253,301,279,283],
[274,304,278,264,269,297,0,264,277,305],
[254,282,315,279,270,249,286,0,278,276],
[285,292,288,265,289,271,273,272,0,297],
[294,294,284,285,270,267,245,274,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,274,284,291,283,279,300,308,298],
[285,0,281,271,279,289,287,303,283,297],
[276,269,0,277,294,283,275,283,285,289],
[266,279,273,0,294,285,280,298,269,294],
[259,271,256,256,0,269,272,278,279,268],
[267,261,267,265,281,0,272,283,266,278],
[271,263,275,270,278,278,0,288,286,279],
[250,247,267,252,272,267,262,0,262,276],
[242,267,265,281,271,284,264,288,0,289],
[252,253,261,256,282,272,271,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,284,271,275,260,294,270,291],
[261,0,270,270,293,262,251,268,277,268],
[285,280,0,290,276,280,263,254,273,283],
[266,280,260,0,277,275,290,274,273,272],
[279,257,274,273,0,287,273,262,268,254],
[275,288,270,275,263,0,274,259,274,277],
[290,299,287,260,277,276,0,266,278,288],
[256,282,296,276,288,291,284,0,292,266],
[280,273,277,277,282,276,272,258,0,284],
[259,282,267,278,296,273,262,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,246,253,258,246,268,270,248],
[284,0,279,264,289,292,268,282,257,269],
[266,271,0,277,283,272,267,279,253,261],
[304,286,273,0,277,277,275,299,272,278],
[297,261,267,273,0,278,247,258,257,243],
[292,258,278,273,272,0,255,270,263,262],
[304,282,283,275,303,295,0,297,276,268],
[282,268,271,251,292,280,253,0,260,265],
[280,293,297,278,293,287,274,290,0,268],
[302,281,289,272,307,288,282,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,305,289,261,285,296,286,278],
[268,0,262,309,265,276,261,301,290,289],
[265,288,0,286,265,285,270,291,287,262],
[245,241,264,0,258,252,252,284,264,273],
[261,285,285,292,0,264,273,299,282,272],
[289,274,265,298,286,0,270,306,306,271],
[265,289,280,298,277,280,0,289,291,278],
[254,249,259,266,251,244,261,0,265,255],
[264,260,263,286,268,244,259,285,0,244],
[272,261,288,277,278,279,272,295,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,272,278,266,264,265,271,265],
[272,0,260,261,277,266,279,277,261,270],
[279,290,0,271,279,280,268,293,266,266],
[278,289,279,0,281,275,285,287,284,282],
[272,273,271,269,0,277,281,276,277,290],
[284,284,270,275,273,0,278,280,266,278],
[286,271,282,265,269,272,0,280,274,282],
[285,273,257,263,274,270,270,0,273,273],
[279,289,284,266,273,284,276,277,0,272],
[285,280,284,268,260,272,268,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,259,279,270,272,264,241,274],
[300,0,303,293,264,324,258,293,282,256],
[284,247,0,228,284,263,203,279,270,227],
[291,257,322,0,311,297,243,280,284,240],
[271,286,266,239,0,278,264,248,222,231],
[280,226,287,253,272,0,267,292,256,266],
[278,292,347,307,286,283,0,251,256,294],
[286,257,271,270,302,258,299,0,291,247],
[309,268,280,266,328,294,294,259,0,257],
[276,294,323,310,319,284,256,303,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,256,285,264,250,272,306,292,258],
[287,0,300,292,275,285,288,287,290,274],
[294,250,0,280,247,290,294,289,255,253],
[265,258,270,0,255,235,257,273,301,254],
[286,275,303,295,0,264,252,298,287,263],
[300,265,260,315,286,0,293,287,315,285],
[278,262,256,293,298,257,0,294,259,248],
[244,263,261,277,252,263,256,0,275,225],
[258,260,295,249,263,235,291,275,0,270],
[292,276,297,296,287,265,302,325,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,267,266,246,235,250,234,250,260],
[310,0,297,278,295,266,276,284,292,308],
[283,253,0,251,268,228,236,278,273,267],
[284,272,299,0,274,270,263,284,290,294],
[304,255,282,276,0,250,248,275,278,274],
[315,284,322,280,300,0,272,289,312,295],
[300,274,314,287,302,278,0,292,290,302],
[316,266,272,266,275,261,258,0,293,281],
[300,258,277,260,272,238,260,257,0,262],
[290,242,283,256,276,255,248,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,302,289,284,294,280,265,277,285],
[272,0,279,290,283,264,272,279,259,280],
[248,271,0,273,255,283,258,267,259,278],
[261,260,277,0,280,271,260,267,253,276],
[266,267,295,270,0,264,258,281,275,274],
[256,286,267,279,286,0,266,266,265,278],
[270,278,292,290,292,284,0,268,272,281],
[285,271,283,283,269,284,282,0,281,289],
[273,291,291,297,275,285,278,269,0,282],
[265,270,272,274,276,272,269,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,274,253,264,258,274,280,290],
[280,0,284,272,244,284,261,266,280,286],
[265,266,0,270,239,253,258,261,277,265],
[276,278,280,0,267,270,263,289,286,289],
[297,306,311,283,0,287,272,316,315,306],
[286,266,297,280,263,0,284,271,290,294],
[292,289,292,287,278,266,0,298,292,303],
[276,284,289,261,234,279,252,0,287,278],
[270,270,273,264,235,260,258,263,0,277],
[260,264,285,261,244,256,247,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,283,269,272,260,246,265,272,272],
[245,0,278,262,263,269,267,279,281,270],
[267,272,0,268,260,267,275,302,261,278],
[281,288,282,0,263,266,259,275,280,276],
[278,287,290,287,0,265,263,279,271,280],
[290,281,283,284,285,0,278,269,260,257],
[304,283,275,291,287,272,0,274,277,279],
[285,271,248,275,271,281,276,0,264,277],
[278,269,289,270,279,290,273,286,0,261],
[278,280,272,274,270,293,271,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,280,279,273,273,260,281,290],
[263,0,231,225,258,258,233,229,257,279],
[288,319,0,271,312,286,291,279,308,301],
[270,325,279,0,304,291,291,287,308,291],
[271,292,238,246,0,255,262,252,264,276],
[277,292,264,259,295,0,272,267,264,283],
[277,317,259,259,288,278,0,257,284,293],
[290,321,271,263,298,283,293,0,279,295],
[269,293,242,242,286,286,266,271,0,268],
[260,271,249,259,274,267,257,255,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,267,239,260,269,286,254,293,278],
[287,0,263,277,281,284,291,288,291,284],
[283,287,0,298,259,279,283,267,297,268],
[311,273,252,0,267,279,269,270,301,266],
[290,269,291,283,0,274,276,273,281,263],
[281,266,271,271,276,0,258,275,301,290],
[264,259,267,281,274,292,0,284,285,251],
[296,262,283,280,277,275,266,0,292,285],
[257,259,253,249,269,249,265,258,0,259],
[272,266,282,284,287,260,299,265,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,257,243,324,250,242,263,313,296],
[280,0,273,224,299,262,289,304,293,249],
[293,277,0,283,278,226,298,244,282,263],
[307,326,267,0,293,280,329,263,356,322],
[226,251,272,257,0,205,212,268,269,227],
[300,288,324,270,345,0,293,309,340,323],
[308,261,252,221,338,257,0,271,306,248],
[287,246,306,287,282,241,279,0,327,312],
[237,257,268,194,281,210,244,223,0,238],
[254,301,287,228,323,227,302,238,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,266,247,257,279,278,287,276,284],
[259,0,240,258,269,279,271,291,260,293],
[284,310,0,265,279,299,293,277,284,310],
[303,292,285,0,280,295,291,308,283,275],
[293,281,271,270,0,288,252,304,293,275],
[271,271,251,255,262,0,281,293,263,289],
[272,279,257,259,298,269,0,281,282,276],
[263,259,273,242,246,257,269,0,278,287],
[274,290,266,267,257,287,268,272,0,282],
[266,257,240,275,275,261,274,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,278,278,270,287,273,287,279],
[261,0,267,255,279,274,260,259,295,276],
[273,283,0,273,280,296,286,258,293,280],
[272,295,277,0,262,269,289,270,297,287],
[272,271,270,288,0,276,266,279,295,283],
[280,276,254,281,274,0,265,260,299,294],
[263,290,264,261,284,285,0,253,279,282],
[277,291,292,280,271,290,297,0,305,284],
[263,255,257,253,255,251,271,245,0,255],
[271,274,270,263,267,256,268,266,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,263,263,296,285,281,304,271],
[274,0,262,257,260,284,281,260,272,274],
[267,288,0,298,259,270,284,279,286,298],
[287,293,252,0,268,272,270,261,280,269],
[287,290,291,282,0,298,283,295,289,275],
[254,266,280,278,252,0,277,264,277,273],
[265,269,266,280,267,273,0,266,270,274],
[269,290,271,289,255,286,284,0,280,281],
[246,278,264,270,261,273,280,270,0,261],
[279,276,252,281,275,277,276,269,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,291,241,239,271,272,252,255],
[284,0,293,297,282,261,313,277,301,272],
[267,257,0,272,281,234,284,256,300,289],
[259,253,278,0,254,285,287,277,263,242],
[309,268,269,296,0,275,282,273,273,293],
[311,289,316,265,275,0,269,292,321,261],
[279,237,266,263,268,281,0,272,272,260],
[278,273,294,273,277,258,278,0,263,254],
[298,249,250,287,277,229,278,287,0,272],
[295,278,261,308,257,289,290,296,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,254,277,254,284,285,291,284,273],
[267,0,274,268,259,275,279,289,287,284],
[296,276,0,289,275,280,282,282,285,282],
[273,282,261,0,260,280,290,293,286,279],
[296,291,275,290,0,277,303,300,308,297],
[266,275,270,270,273,0,276,289,294,293],
[265,271,268,260,247,274,0,274,273,269],
[259,261,268,257,250,261,276,0,287,281],
[266,263,265,264,242,256,277,263,0,262],
[277,266,268,271,253,257,281,269,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,279,280,280,281,275,284,275,313],
[281,0,292,263,262,288,270,275,288,307],
[271,258,0,263,271,266,261,265,263,285],
[270,287,287,0,273,271,276,277,279,292],
[270,288,279,277,0,287,279,276,285,305],
[269,262,284,279,263,0,270,260,276,269],
[275,280,289,274,271,280,0,278,284,291],
[266,275,285,273,274,290,272,0,279,303],
[275,262,287,271,265,274,266,271,0,287],
[237,243,265,258,245,281,259,247,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,281,271,263,266,261,257,282,252],
[276,0,281,263,271,263,271,264,283,282],
[269,269,0,257,256,261,255,262,267,262],
[279,287,293,0,272,276,279,270,301,276],
[287,279,294,278,0,295,268,287,284,277],
[284,287,289,274,255,0,276,264,283,269],
[289,279,295,271,282,274,0,277,283,278],
[293,286,288,280,263,286,273,0,287,284],
[268,267,283,249,266,267,267,263,0,264],
[298,268,288,274,273,281,272,266,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,293,277,284,292,289,265,280],
[263,0,258,257,259,269,286,260,257,273],
[271,292,0,267,284,287,290,282,277,290],
[257,293,283,0,282,276,285,269,266,282],
[273,291,266,268,0,285,285,277,280,270],
[266,281,263,274,265,0,290,284,275,268],
[258,264,260,265,265,260,0,270,259,266],
[261,290,268,281,273,266,280,0,275,272],
[285,293,273,284,270,275,291,275,0,287],
[270,277,260,268,280,282,284,278,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,280,273,273,288,282,281,264],
[279,0,270,273,261,269,273,268,260,263],
[265,280,0,267,261,269,278,250,255,286],
[270,277,283,0,274,274,273,286,269,276],
[277,289,289,276,0,285,279,294,269,272],
[277,281,281,276,265,0,281,287,278,297],
[262,277,272,277,271,269,0,269,281,277],
[268,282,300,264,256,263,281,0,278,264],
[269,290,295,281,281,272,269,272,0,268],
[286,287,264,274,278,253,273,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,280,265,308,281,265,265,295,253],
[252,0,254,245,301,269,245,273,272,251],
[270,296,0,264,321,287,292,278,285,268],
[285,305,286,0,317,288,286,273,300,282],
[242,249,229,233,0,239,225,243,242,219],
[269,281,263,262,311,0,267,263,270,253],
[285,305,258,264,325,283,0,273,275,261],
[285,277,272,277,307,287,277,0,283,264],
[255,278,265,250,308,280,275,267,0,247],
[297,299,282,268,331,297,289,286,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,293,279,271,277,282,254,282,273],
[280,0,292,276,278,292,266,270,282,264],
[257,258,0,273,272,281,272,273,271,258],
[271,274,277,0,260,290,263,270,275,271],
[279,272,278,290,0,280,264,278,277,263],
[273,258,269,260,270,0,264,266,279,269],
[268,284,278,287,286,286,0,270,281,274],
[296,280,277,280,272,284,280,0,283,276],
[268,268,279,275,273,271,269,267,0,273],
[277,286,292,279,287,281,276,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,345,287,318,273,334,298,345,301],
[226,0,297,275,298,232,280,279,310,279],
[205,253,0,196,263,214,239,216,275,203],
[263,275,354,0,290,260,248,279,326,316],
[232,252,287,260,0,239,262,262,276,258],
[277,318,336,290,311,0,295,322,362,254],
[216,270,311,302,288,255,0,251,289,247],
[252,271,334,271,288,228,299,0,290,233],
[205,240,275,224,274,188,261,260,0,234],
[249,271,347,234,292,296,303,317,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,273,282,277,277,271,250,276],
[269,0,300,288,256,283,261,279,262,289],
[257,250,0,248,267,242,247,274,249,265],
[277,262,302,0,270,268,264,271,268,274],
[268,294,283,280,0,269,271,286,270,285],
[273,267,308,282,281,0,263,274,271,257],
[273,289,303,286,279,287,0,271,287,285],
[279,271,276,279,264,276,279,0,278,263],
[300,288,301,282,280,279,263,272,0,279],
[274,261,285,276,265,293,265,287,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,302,276,285,268,264,261,252,265],
[273,0,321,311,311,298,290,288,300,296],
[248,229,0,265,282,252,263,251,232,234],
[274,239,285,0,287,251,250,247,258,262],
[265,239,268,263,0,259,250,245,234,238],
[282,252,298,299,291,0,238,278,272,255],
[286,260,287,300,300,312,0,286,274,263],
[289,262,299,303,305,272,264,0,258,274],
[298,250,318,292,316,278,276,292,0,260],
[285,254,316,288,312,295,287,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,267,307,332,248,323,297,313,309],
[231,0,275,291,268,283,285,277,304,288],
[283,275,0,358,177,243,320,284,268,295],
[243,259,192,0,183,186,267,285,231,206],
[218,282,373,367,0,301,357,304,320,324],
[302,267,307,364,249,0,345,320,379,353],
[227,265,230,283,193,205,0,296,299,247],
[253,273,266,265,246,230,254,0,276,294],
[237,246,282,319,230,171,251,274,0,287],
[241,262,255,344,226,197,303,256,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,281,291,286,264,268,289,254,276],
[239,0,253,260,263,263,236,260,255,235],
[269,297,0,268,279,263,256,254,277,257],
[259,290,282,0,272,271,244,267,270,253],
[264,287,271,278,0,263,257,268,258,251],
[286,287,287,279,287,0,262,267,271,261],
[282,314,294,306,293,288,0,300,284,265],
[261,290,296,283,282,283,250,0,261,258],
[296,295,273,280,292,279,266,289,0,268],
[274,315,293,297,299,289,285,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,286,271,291,292,288,266,264],
[279,0,276,282,264,271,278,285,280,263],
[273,274,0,271,257,289,303,300,268,271],
[264,268,279,0,265,280,289,285,275,267],
[279,286,293,285,0,292,292,289,270,282],
[259,279,261,270,258,0,274,275,266,255],
[258,272,247,261,258,276,0,257,264,262],
[262,265,250,265,261,275,293,0,261,259],
[284,270,282,275,280,284,286,289,0,272],
[286,287,279,283,268,295,288,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,268,264,274,292,292,271,264,298],
[306,0,285,285,312,291,283,288,256,303],
[282,265,0,274,274,273,265,287,273,310],
[286,265,276,0,298,269,263,293,278,295],
[276,238,276,252,0,264,267,265,256,273],
[258,259,277,281,286,0,282,290,287,293],
[258,267,285,287,283,268,0,278,263,285],
[279,262,263,257,285,260,272,0,248,301],
[286,294,277,272,294,263,287,302,0,291],
[252,247,240,255,277,257,265,249,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,283,285,270,303,277,293,263,282],
[241,0,266,254,250,267,282,285,251,250],
[267,284,0,273,265,301,287,281,263,295],
[265,296,277,0,278,299,292,288,276,280],
[280,300,285,272,0,294,288,285,273,281],
[247,283,249,251,256,0,280,273,248,279],
[273,268,263,258,262,270,0,291,259,255],
[257,265,269,262,265,277,259,0,250,252],
[287,299,287,274,277,302,291,300,0,281],
[268,300,255,270,269,271,295,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,259,232,265,230,264,249,254],
[281,0,274,286,262,263,264,266,244,238],
[292,276,0,279,251,250,246,272,248,250],
[291,264,271,0,248,255,253,271,265,266],
[318,288,299,302,0,298,283,292,286,269],
[285,287,300,295,252,0,257,264,266,269],
[320,286,304,297,267,293,0,288,276,268],
[286,284,278,279,258,286,262,0,269,271],
[301,306,302,285,264,284,274,281,0,285],
[296,312,300,284,281,281,282,279,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,264,308,269,295,298,253,275,265],
[280,0,283,305,271,285,319,294,286,260],
[286,267,0,307,301,320,321,256,286,250],
[242,245,243,0,252,276,301,256,272,265],
[281,279,249,298,0,282,302,267,282,280],
[255,265,230,274,268,0,302,246,302,248],
[252,231,229,249,248,248,0,241,259,243],
[297,256,294,294,283,304,309,0,306,271],
[275,264,264,278,268,248,291,244,0,233],
[285,290,300,285,270,302,307,279,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,264,278,281,286,284,287,269,271],
[270,0,267,271,271,274,283,283,258,282],
[286,283,0,276,263,284,278,263,277,294],
[272,279,274,0,264,269,271,266,271,264],
[269,279,287,286,0,273,290,275,280,284],
[264,276,266,281,277,0,273,268,284,276],
[266,267,272,279,260,277,0,258,258,267],
[263,267,287,284,275,282,292,0,284,280],
[281,292,273,279,270,266,292,266,0,273],
[279,268,256,286,266,274,283,270,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,281,287,269,277,269,243,256],
[282,0,285,280,274,265,291,276,269,261],
[262,265,0,287,290,267,273,263,266,259],
[269,270,263,0,274,259,283,271,252,260],
[263,276,260,276,0,264,289,256,242,255],
[281,285,283,291,286,0,284,274,243,282],
[273,259,277,267,261,266,0,275,254,269],
[281,274,287,279,294,276,275,0,269,258],
[307,281,284,298,308,307,296,281,0,269],
[294,289,291,290,295,268,281,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,288,298,281,291,318,309,285],
[292,0,280,279,295,275,292,291,292,288],
[269,270,0,311,296,296,310,313,302,288],
[262,271,239,0,294,277,268,304,281,290],
[252,255,254,256,0,282,263,290,288,279],
[269,275,254,273,268,0,285,285,291,288],
[259,258,240,282,287,265,0,298,295,285],
[232,259,237,246,260,265,252,0,283,265],
[241,258,248,269,262,259,255,267,0,279],
[265,262,262,260,271,262,265,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,271,305,259,275,349,256,266,309],
[262,0,298,269,277,271,314,267,259,334],
[279,252,0,290,261,270,309,244,264,292],
[245,281,260,0,270,247,313,207,231,305],
[291,273,289,280,0,213,306,277,273,338],
[275,279,280,303,337,0,290,261,294,334],
[201,236,241,237,244,260,0,238,283,269],
[294,283,306,343,273,289,312,0,307,318],
[284,291,286,319,277,256,267,243,0,309],
[241,216,258,245,212,216,281,232,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,273,276,261,273,288,292,277,299],
[287,0,265,281,263,264,277,294,242,265],
[277,285,0,283,266,286,299,305,285,291],
[274,269,267,0,293,265,301,294,280,294],
[289,287,284,257,0,279,292,297,272,300],
[277,286,264,285,271,0,304,306,277,288],
[262,273,251,249,258,246,0,292,268,265],
[258,256,245,256,253,244,258,0,254,279],
[273,308,265,270,278,273,282,296,0,290],
[251,285,259,256,250,262,285,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,284,290,282,272,277,276,279],
[283,0,286,275,295,271,271,275,275,270],
[270,264,0,278,278,265,259,259,264,264],
[266,275,272,0,285,264,266,269,248,260],
[260,255,272,265,0,265,252,267,264,266],
[268,279,285,286,285,0,273,271,273,280],
[278,279,291,284,298,277,0,276,273,278],
[273,275,291,281,283,279,274,0,268,272],
[274,275,286,302,286,277,277,282,0,272],
[271,280,286,290,284,270,272,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,281,269,285,308,290,283,278,293],
[252,0,279,297,266,307,264,288,280,280],
[269,271,0,296,294,310,274,295,293,277],
[281,253,254,0,288,293,267,300,274,273],
[265,284,256,262,0,297,257,268,239,254],
[242,243,240,257,253,0,230,270,262,271],
[260,286,276,283,293,320,0,297,300,292],
[267,262,255,250,282,280,253,0,282,251],
[272,270,257,276,311,288,250,268,0,276],
[257,270,273,277,296,279,258,299,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,286,264,262,267,258,277,291],
[284,0,270,270,259,272,263,277,273,274],
[288,280,0,276,261,284,275,272,269,281],
[264,280,274,0,266,259,269,292,282,274],
[286,291,289,284,0,261,285,308,266,295],
[288,278,266,291,289,0,295,299,301,280],
[283,287,275,281,265,255,0,286,278,302],
[292,273,278,258,242,251,264,0,272,261],
[273,277,281,268,284,249,272,278,0,275],
[259,276,269,276,255,270,248,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,270,269,284,304,273,248,279],
[266,0,242,254,250,270,282,261,257,241],
[296,308,0,274,287,298,304,272,279,288],
[280,296,276,0,283,286,293,276,269,284],
[281,300,263,267,0,290,283,285,279,283],
[266,280,252,264,260,0,289,280,253,256],
[246,268,246,257,267,261,0,251,258,242],
[277,289,278,274,265,270,299,0,270,272],
[302,293,271,281,271,297,292,280,0,292],
[271,309,262,266,267,294,308,278,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,233,203,214,233,221,266,242,331],
[337,0,257,288,314,282,282,323,285,324],
[317,293,0,233,283,270,242,313,268,282],
[347,262,317,0,327,284,293,342,295,306],
[336,236,267,223,0,239,244,270,260,291],
[317,268,280,266,311,0,218,251,306,304],
[329,268,308,257,306,332,0,288,304,318],
[284,227,237,208,280,299,262,0,292,274],
[308,265,282,255,290,244,246,258,0,311],
[219,226,268,244,259,246,232,276,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,286,265,271,287,287,275,258],
[279,0,282,262,274,263,293,282,283,254],
[267,268,0,276,263,277,271,265,287,272],
[264,288,274,0,270,271,285,275,302,272],
[285,276,287,280,0,271,292,271,289,270],
[279,287,273,279,279,0,294,270,312,276],
[263,257,279,265,258,256,0,272,261,249],
[263,268,285,275,279,280,278,0,284,285],
[275,267,263,248,261,238,289,266,0,265],
[292,296,278,278,280,274,301,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,175,280,258,265,205,294,251,218],
[289,0,242,277,296,302,287,290,301,213],
[375,308,0,279,346,324,304,348,353,256],
[270,273,271,0,303,327,272,313,345,276],
[292,254,204,247,0,250,254,264,303,187],
[285,248,226,223,300,0,251,286,296,239],
[345,263,246,278,296,299,0,347,313,212],
[256,260,202,237,286,264,203,0,261,212],
[299,249,197,205,247,254,237,289,0,234],
[332,337,294,274,363,311,338,338,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,235,295,292,305,269,251,260,252],
[305,0,313,281,324,329,279,251,303,275],
[315,237,0,295,327,333,294,274,277,267],
[255,269,255,0,283,299,302,253,245,264],
[258,226,223,267,0,280,264,310,246,258],
[245,221,217,251,270,0,220,266,214,204],
[281,271,256,248,286,330,0,247,263,247],
[299,299,276,297,240,284,303,0,227,266],
[290,247,273,305,304,336,287,323,0,296],
[298,275,283,286,292,346,303,284,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,294,278,270,289,275,280,316,317],
[258,0,274,283,253,258,272,269,287,303],
[256,276,0,273,267,260,254,276,284,296],
[272,267,277,0,274,266,271,282,308,312],
[280,297,283,276,0,298,271,294,309,310],
[261,292,290,284,252,0,269,269,276,285],
[275,278,296,279,279,281,0,292,295,302],
[270,281,274,268,256,281,258,0,304,288],
[234,263,266,242,241,274,255,246,0,278],
[233,247,254,238,240,265,248,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,269,279,245,282,276,295,294,276],
[247,0,265,277,228,270,283,274,251,272],
[281,285,0,289,290,268,278,325,274,278],
[271,273,261,0,248,253,259,256,266,274],
[305,322,260,302,0,306,287,315,299,319],
[268,280,282,297,244,0,265,301,270,295],
[274,267,272,291,263,285,0,298,280,287],
[255,276,225,294,235,249,252,0,277,267],
[256,299,276,284,251,280,270,273,0,276],
[274,278,272,276,231,255,263,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,305,275,287,273,281,300,304],
[266,0,270,290,259,286,259,281,293,273],
[286,280,0,259,266,281,294,254,290,277],
[245,260,291,0,292,272,273,271,301,256],
[275,291,284,258,0,299,281,289,301,287],
[263,264,269,278,251,0,265,259,302,278],
[277,291,256,277,269,285,0,258,277,310],
[269,269,296,279,261,291,292,0,302,301],
[250,257,260,249,249,248,273,248,0,256],
[246,277,273,294,263,272,240,249,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,296,286,284,277,304,282,266],
[282,0,275,285,287,289,268,305,282,286],
[269,275,0,262,277,271,257,286,282,259],
[254,265,288,0,274,287,270,308,274,276],
[264,263,273,276,0,293,244,291,276,264],
[266,261,279,263,257,0,250,285,261,252],
[273,282,293,280,306,300,0,326,274,281],
[246,245,264,242,259,265,224,0,235,236],
[268,268,268,276,274,289,276,315,0,261],
[284,264,291,274,286,298,269,314,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,253,268,297,253,269,337,315,254],
[223,0,231,238,254,238,238,254,262,274],
[297,319,0,316,359,283,297,318,342,255],
[282,312,234,0,249,269,228,289,304,216],
[253,296,191,301,0,260,228,300,268,279],
[297,312,267,281,290,0,262,276,268,290],
[281,312,253,322,322,288,0,343,311,267],
[213,296,232,261,250,274,207,0,222,240],
[235,288,208,246,282,282,239,328,0,235],
[296,276,295,334,271,260,283,310,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,308,309,304,306,314,258,318],
[262,0,279,248,284,274,292,291,288,276],
[278,271,0,256,273,290,272,298,288,278],
[242,302,294,0,305,345,307,288,276,297],
[241,266,277,245,0,296,295,290,246,298],
[246,276,260,205,254,0,276,249,242,315],
[244,258,278,243,255,274,0,264,271,268],
[236,259,252,262,260,301,286,0,264,288],
[292,262,262,274,304,308,279,286,0,315],
[232,274,272,253,252,235,282,262,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,251,268,285,255,277,245,249,301],
[280,0,277,317,286,287,310,275,265,330],
[299,273,0,289,328,327,321,284,256,316],
[282,233,261,0,274,294,298,263,246,317],
[265,264,222,276,0,250,287,273,246,315],
[295,263,223,256,300,0,308,240,300,286],
[273,240,229,252,263,242,0,245,249,307],
[305,275,266,287,277,310,305,0,289,326],
[301,285,294,304,304,250,301,261,0,339],
[249,220,234,233,235,264,243,224,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,271,276,271,270,253,242,275,260],
[280,0,275,291,273,326,245,273,298,269],
[279,275,0,288,294,302,258,272,277,269],
[274,259,262,0,260,290,253,262,257,262],
[279,277,256,290,0,283,275,270,295,249],
[280,224,248,260,267,0,252,236,256,249],
[297,305,292,297,275,298,0,260,295,288],
[308,277,278,288,280,314,290,0,295,271],
[275,252,273,293,255,294,255,255,0,264],
[290,281,281,288,301,301,262,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,258,282,252,262,279,272,262,259],
[266,0,259,269,264,266,265,280,276,265],
[292,291,0,283,286,291,269,276,286,267],
[268,281,267,0,274,275,267,285,280,278],
[298,286,264,276,0,266,274,283,293,274],
[288,284,259,275,284,0,276,289,289,279],
[271,285,281,283,276,274,0,283,295,289],
[278,270,274,265,267,261,267,0,269,263],
[288,274,264,270,257,261,255,281,0,272],
[291,285,283,272,276,271,261,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,272,280,262,264,271,274,281],
[282,0,285,277,286,273,263,275,274,284],
[280,265,0,272,273,258,270,256,263,280],
[278,273,278,0,285,274,280,285,289,282],
[270,264,277,265,0,259,273,288,266,283],
[288,277,292,276,291,0,271,280,290,303],
[286,287,280,270,277,279,0,271,284,297],
[279,275,294,265,262,270,279,0,295,294],
[276,276,287,261,284,260,266,255,0,270],
[269,266,270,268,267,247,253,256,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,279,293,271,255,292,262,268,288],
[284,0,270,274,278,271,282,291,267,281],
[271,280,0,267,273,271,276,275,265,306],
[257,276,283,0,264,265,302,288,263,288],
[279,272,277,286,0,281,280,288,296,290],
[295,279,279,285,269,0,283,286,268,300],
[258,268,274,248,270,267,0,264,282,300],
[288,259,275,262,262,264,286,0,277,283],
[282,283,285,287,254,282,268,273,0,294],
[262,269,244,262,260,250,250,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,418,344,403,317,326,251,357,307,325],
[132,0,268,298,239,281,246,273,296,276],
[206,282,0,290,204,177,240,291,158,266],
[147,252,260,0,307,244,236,299,188,264],
[233,311,346,243,0,222,309,275,306,350],
[224,269,373,306,328,0,242,320,196,265],
[299,304,310,314,241,308,0,322,229,258],
[193,277,259,251,275,230,228,0,217,299],
[243,254,392,362,244,354,321,333,0,389],
[225,274,284,286,200,285,292,251,161,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,274,275,267,275,272,281,287,267],
[250,0,252,249,257,277,268,262,273,266],
[276,298,0,283,283,273,280,282,292,276],
[275,301,267,0,281,287,291,282,286,279],
[283,293,267,269,0,275,265,270,274,282],
[275,273,277,263,275,0,273,279,269,267],
[278,282,270,259,285,277,0,281,265,278],
[269,288,268,268,280,271,269,0,279,261],
[263,277,258,264,276,281,285,271,0,267],
[283,284,274,271,268,283,272,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,253,291,276,303,251,290,324,317],
[319,0,271,286,233,306,281,335,298,354],
[297,279,0,235,188,278,248,338,241,257],
[259,264,315,0,223,330,223,363,313,262],
[274,317,362,327,0,311,290,291,345,291],
[247,244,272,220,239,0,277,311,245,248],
[299,269,302,327,260,273,0,311,304,297],
[260,215,212,187,259,239,239,0,238,229],
[226,252,309,237,205,305,246,312,0,281],
[233,196,293,288,259,302,253,321,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,312,307,303,273,309,270,272,291],
[277,0,285,277,271,269,279,268,261,281],
[238,265,0,251,244,280,273,255,273,263],
[243,273,299,0,294,278,275,262,278,290],
[247,279,306,256,0,255,268,247,278,268],
[277,281,270,272,295,0,302,239,245,297],
[241,271,277,275,282,248,0,267,250,266],
[280,282,295,288,303,311,283,0,242,335],
[278,289,277,272,272,305,300,308,0,318],
[259,269,287,260,282,253,284,215,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,273,295,253,260,288,273,256],
[284,0,280,285,288,282,277,288,281,270],
[287,270,0,293,302,277,284,282,283,272],
[277,265,257,0,286,276,252,285,273,260],
[255,262,248,264,0,255,253,267,263,262],
[297,268,273,274,295,0,269,268,267,276],
[290,273,266,298,297,281,0,287,287,277],
[262,262,268,265,283,282,263,0,261,261],
[277,269,267,277,287,283,263,289,0,268],
[294,280,278,290,288,274,273,289,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,243,268,237,226,265,260,285,277],
[269,0,267,251,241,218,284,241,288,248],
[307,283,0,269,247,223,258,259,293,267],
[282,299,281,0,248,234,303,269,295,292],
[313,309,303,302,0,267,299,285,320,337],
[324,332,327,316,283,0,301,267,308,315],
[285,266,292,247,251,249,0,252,295,295],
[290,309,291,281,265,283,298,0,314,307],
[265,262,257,255,230,242,255,236,0,233],
[273,302,283,258,213,235,255,243,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,282,269,270,304,280,280,256,285],
[255,0,257,250,265,269,273,282,258,279],
[268,293,0,267,285,284,275,269,276,268],
[281,300,283,0,266,297,286,275,257,298],
[280,285,265,284,0,278,264,271,268,283],
[246,281,266,253,272,0,257,253,241,267],
[270,277,275,264,286,293,0,265,249,271],
[270,268,281,275,279,297,285,0,249,295],
[294,292,274,293,282,309,301,301,0,311],
[265,271,282,252,267,283,279,255,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,281,297,275,260,285,271,279,249],
[278,0,283,309,306,274,289,287,278,248],
[269,267,0,278,256,261,265,271,255,265],
[253,241,272,0,261,265,265,267,266,241],
[275,244,294,289,0,263,267,270,248,255],
[290,276,289,285,287,0,273,277,273,283],
[265,261,285,285,283,277,0,275,275,269],
[279,263,279,283,280,273,275,0,278,270],
[271,272,295,284,302,277,275,272,0,264],
[301,302,285,309,295,267,281,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,306,300,279,288,255,319,272],
[276,0,272,278,295,262,276,259,305,265],
[273,278,0,283,304,286,276,262,291,271],
[244,272,267,0,288,271,286,248,315,278],
[250,255,246,262,0,262,269,251,303,270],
[271,288,264,279,288,0,286,256,307,286],
[262,274,274,264,281,264,0,258,295,272],
[295,291,288,302,299,294,292,0,311,269],
[231,245,259,235,247,243,255,239,0,246],
[278,285,279,272,280,264,278,281,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,279,265,261,249,257,254,259,270],
[298,0,300,280,280,276,292,284,284,274],
[271,250,0,275,267,269,278,279,266,282],
[285,270,275,0,283,256,274,282,283,261],
[289,270,283,267,0,254,274,267,274,283],
[301,274,281,294,296,0,276,284,316,292],
[293,258,272,276,276,274,0,264,293,265],
[296,266,271,268,283,266,286,0,278,273],
[291,266,284,267,276,234,257,272,0,262],
[280,276,268,289,267,258,285,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,234,262,253,263,228,253,254,242],
[287,0,257,279,276,276,226,260,256,281],
[316,293,0,316,284,313,295,284,267,306],
[288,271,234,0,267,288,273,276,258,266],
[297,274,266,283,0,286,260,267,262,268],
[287,274,237,262,264,0,247,239,247,267],
[322,324,255,277,290,303,0,291,284,290],
[297,290,266,274,283,311,259,0,281,293],
[296,294,283,292,288,303,266,269,0,302],
[308,269,244,284,282,283,260,257,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,279,313,279,272,284,318,304,270],
[271,0,273,302,273,295,285,310,262,295],
[271,277,0,325,284,303,311,324,296,288],
[237,248,225,0,234,267,272,294,229,235],
[271,277,266,316,0,319,314,302,283,257],
[278,255,247,283,231,0,273,290,257,270],
[266,265,239,278,236,277,0,293,263,278],
[232,240,226,256,248,260,257,0,251,268],
[246,288,254,321,267,293,287,299,0,255],
[280,255,262,315,293,280,272,282,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,238,258,261,273,257,240,239,275],
[303,0,283,293,274,302,287,284,278,275],
[312,267,0,276,268,317,289,283,309,282],
[292,257,274,0,276,275,287,288,282,282],
[289,276,282,274,0,269,283,272,270,277],
[277,248,233,275,281,0,278,268,297,265],
[293,263,261,263,267,272,0,273,287,283],
[310,266,267,262,278,282,277,0,295,275],
[311,272,241,268,280,253,263,255,0,275],
[275,275,268,268,273,285,267,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,299,288,301,293,268,261,261],
[273,0,283,272,276,299,295,275,268,313],
[278,267,0,282,302,286,305,270,290,258],
[251,278,268,0,248,284,272,262,276,257],
[262,274,248,302,0,272,286,280,240,253],
[249,251,264,266,278,0,261,274,243,244],
[257,255,245,278,264,289,0,284,228,263],
[282,275,280,288,270,276,266,0,277,252],
[289,282,260,274,310,307,322,273,0,279],
[289,237,292,293,297,306,287,298,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,265,275,280,295,275,271,280],
[270,0,269,249,271,267,283,286,267,267],
[266,281,0,267,256,279,287,275,264,271],
[285,301,283,0,276,298,289,284,271,278],
[275,279,294,274,0,272,295,278,286,265],
[270,283,271,252,278,0,281,267,262,257],
[255,267,263,261,255,269,0,281,258,264],
[275,264,275,266,272,283,269,0,275,264],
[279,283,286,279,264,288,292,275,0,279],
[270,283,279,272,285,293,286,286,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,324,317,267,251,270,271,278],
[274,0,238,296,259,236,223,242,255,251],
[274,312,0,318,293,258,277,287,277,288],
[226,254,232,0,265,226,236,227,236,226],
[233,291,257,285,0,233,250,227,249,231],
[283,314,292,324,317,0,259,293,280,286],
[299,327,273,314,300,291,0,278,314,279],
[280,308,263,323,323,257,272,0,297,284],
[279,295,273,314,301,270,236,253,0,238],
[272,299,262,324,319,264,271,266,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,263,293,280,213,262,284,272,323],
[239,0,228,262,258,272,280,275,269,310],
[287,322,0,334,311,288,267,330,313,319],
[257,288,216,0,275,268,282,274,296,262],
[270,292,239,275,0,215,276,249,264,277],
[337,278,262,282,335,0,321,336,328,314],
[288,270,283,268,274,229,0,286,310,301],
[266,275,220,276,301,214,264,0,269,289],
[278,281,237,254,286,222,240,281,0,278],
[227,240,231,288,273,236,249,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,281,287,283,234,252,269,280],
[284,0,252,299,278,289,277,275,281,291],
[287,298,0,311,296,316,272,286,293,312],
[269,251,239,0,277,267,225,268,282,283],
[263,272,254,273,0,288,261,260,270,269],
[267,261,234,283,262,0,247,249,260,266],
[316,273,278,325,289,303,0,301,318,304],
[298,275,264,282,290,301,249,0,280,287],
[281,269,257,268,280,290,232,270,0,272],
[270,259,238,267,281,284,246,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,289,291,261,288,289,290,276,277],
[242,0,252,244,259,254,269,256,246,252],
[261,298,0,248,270,281,283,272,269,296],
[259,306,302,0,301,269,284,261,302,299],
[289,291,280,249,0,269,260,270,265,272],
[262,296,269,281,281,0,278,284,265,291],
[261,281,267,266,290,272,0,271,251,260],
[260,294,278,289,280,266,279,0,282,297],
[274,304,281,248,285,285,299,268,0,276],
[273,298,254,251,278,259,290,253,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,317,240,334,275,234,258,289,270],
[258,0,257,241,297,264,291,221,229,259],
[233,293,0,248,284,283,285,241,249,258],
[310,309,302,0,341,265,289,285,272,271],
[216,253,266,209,0,237,244,262,211,275],
[275,286,267,285,313,0,283,281,251,257],
[316,259,265,261,306,267,0,266,255,245],
[292,329,309,265,288,269,284,0,254,286],
[261,321,301,278,339,299,295,296,0,298],
[280,291,292,279,275,293,305,264,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,262,280,265,279,273,285,297,279],
[229,0,249,250,251,264,253,260,244,236],
[288,301,0,293,291,290,268,295,301,281],
[270,300,257,0,277,266,267,260,268,245],
[285,299,259,273,0,287,280,277,291,271],
[271,286,260,284,263,0,247,277,262,257],
[277,297,282,283,270,303,0,276,262,251],
[265,290,255,290,273,273,274,0,274,264],
[253,306,249,282,259,288,288,276,0,264],
[271,314,269,305,279,293,299,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,287,279,258,252,268,306,296,316],
[263,0,284,246,282,245,258,282,272,277],
[263,266,0,264,251,230,259,282,260,279],
[271,304,286,0,272,258,284,282,279,264],
[292,268,299,278,0,238,295,304,275,274],
[298,305,320,292,312,0,311,310,273,297],
[282,292,291,266,255,239,0,292,277,271],
[244,268,268,268,246,240,258,0,253,254],
[254,278,290,271,275,277,273,297,0,311],
[234,273,271,286,276,253,279,296,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,260,264,274,265,254,269,272,269],
[269,0,250,260,258,252,248,254,260,255],
[290,300,0,289,261,276,260,275,284,283],
[286,290,261,0,262,261,255,269,263,251],
[276,292,289,288,0,272,271,287,281,285],
[285,298,274,289,278,0,265,276,276,272],
[296,302,290,295,279,285,0,293,271,283],
[281,296,275,281,263,274,257,0,263,267],
[278,290,266,287,269,274,279,287,0,266],
[281,295,267,299,265,278,267,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,287,272,265,298,275,278,303],
[277,0,251,272,223,264,295,279,277,275],
[283,299,0,298,250,273,279,286,267,288],
[263,278,252,0,236,269,276,262,249,283],
[278,327,300,314,0,269,290,286,291,318],
[285,286,277,281,281,0,283,284,273,295],
[252,255,271,274,260,267,0,280,265,272],
[275,271,264,288,264,266,270,0,274,269],
[272,273,283,301,259,277,285,276,0,291],
[247,275,262,267,232,255,278,281,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,260,300,313,322,296,309,378,289],
[218,0,268,245,279,288,254,280,258,298],
[290,282,0,268,261,289,225,258,298,288],
[250,305,282,0,328,284,319,298,316,260],
[237,271,289,222,0,236,233,247,287,229],
[228,262,261,266,314,0,294,276,284,280],
[254,296,325,231,317,256,0,292,312,272],
[241,270,292,252,303,274,258,0,344,300],
[172,292,252,234,263,266,238,206,0,292],
[261,252,262,290,321,270,278,250,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,320,314,265,252,249,260,274,255],
[297,0,335,270,263,268,243,272,297,260],
[230,215,0,245,239,243,243,264,240,216],
[236,280,305,0,298,274,231,284,295,260],
[285,287,311,252,0,309,248,283,282,275],
[298,282,307,276,241,0,214,260,274,249],
[301,307,307,319,302,336,0,258,294,246],
[290,278,286,266,267,290,292,0,318,255],
[276,253,310,255,268,276,256,232,0,269],
[295,290,334,290,275,301,304,295,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,293,265,269,281,265,255,272,285],
[307,0,303,289,318,295,268,280,269,286],
[257,247,0,243,284,269,248,254,232,250],
[285,261,307,0,289,284,248,268,270,271],
[281,232,266,261,0,281,241,234,256,261],
[269,255,281,266,269,0,271,256,269,269],
[285,282,302,302,309,279,0,287,276,269],
[295,270,296,282,316,294,263,0,264,298],
[278,281,318,280,294,281,274,286,0,274],
[265,264,300,279,289,281,281,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,292,286,287,296,286,283,273,275],
[264,0,282,291,288,276,280,283,275,267],
[258,268,0,269,264,264,279,265,254,257],
[264,259,281,0,273,278,295,270,253,269],
[263,262,286,277,0,289,296,273,277,254],
[254,274,286,272,261,0,284,262,259,267],
[264,270,271,255,254,266,0,255,251,270],
[267,267,285,280,277,288,295,0,269,266],
[277,275,296,297,273,291,299,281,0,270],
[275,283,293,281,296,283,280,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,268,256,286,283,281,269,285],
[278,0,265,288,279,283,289,278,293,291],
[276,285,0,281,275,262,290,277,279,278],
[282,262,269,0,266,276,281,284,261,275],
[294,271,275,284,0,284,290,293,303,286],
[264,267,288,274,266,0,294,270,261,264],
[267,261,260,269,260,256,0,273,272,275],
[269,272,273,266,257,280,277,0,280,280],
[281,257,271,289,247,289,278,270,0,271],
[265,259,272,275,264,286,275,270,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,280,304,279,287,273,285,282],
[283,0,283,291,301,269,294,284,282,288],
[272,267,0,290,293,288,303,297,288,303],
[270,259,260,0,297,265,267,267,270,293],
[246,249,257,253,0,261,273,256,250,272],
[271,281,262,285,289,0,294,287,293,293],
[263,256,247,283,277,256,0,259,257,283],
[277,266,253,283,294,263,291,0,290,294],
[265,268,262,280,300,257,293,260,0,285],
[268,262,247,257,278,257,267,256,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,241,263,240,235,250,242,237,257],
[289,0,254,267,205,280,217,259,239,253],
[309,296,0,280,292,289,245,266,262,251],
[287,283,270,0,265,236,257,261,274,243],
[310,345,258,285,0,280,258,267,239,259],
[315,270,261,314,270,0,251,288,247,288],
[300,333,305,293,292,299,0,314,253,286],
[308,291,284,289,283,262,236,0,279,283],
[313,311,288,276,311,303,297,271,0,310],
[293,297,299,307,291,262,264,267,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,293,278,276,284,269,280,267],
[270,0,268,281,269,247,244,265,277,272],
[263,282,0,244,278,270,270,253,271,262],
[257,269,306,0,267,271,278,284,284,270],
[272,281,272,283,0,271,277,261,263,277],
[274,303,280,279,279,0,303,287,298,307],
[266,306,280,272,273,247,0,256,295,292],
[281,285,297,266,289,263,294,0,278,275],
[270,273,279,266,287,252,255,272,0,268],
[283,278,288,280,273,243,258,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,216,208,199,249,270,263,192,276],
[316,0,237,277,294,280,304,308,245,304],
[334,313,0,261,289,275,285,308,296,254],
[342,273,289,0,256,280,295,250,236,324],
[351,256,261,294,0,264,299,224,260,298],
[301,270,275,270,286,0,268,263,185,295],
[280,246,265,255,251,282,0,254,265,297],
[287,242,242,300,326,287,296,0,209,303],
[358,305,254,314,290,365,285,341,0,332],
[274,246,296,226,252,255,253,247,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,298,265,265,264,296,305,296,237],
[239,0,261,231,261,251,292,261,282,244],
[252,289,0,259,265,269,294,282,275,252],
[285,319,291,0,317,272,303,292,294,293],
[285,289,285,233,0,242,297,268,288,244],
[286,299,281,278,308,0,316,289,278,265],
[254,258,256,247,253,234,0,241,242,227],
[245,289,268,258,282,261,309,0,237,261],
[254,268,275,256,262,272,308,313,0,262],
[313,306,298,257,306,285,323,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,279,257,264,271,266,275,255,282],
[301,0,277,270,273,266,271,282,289,274],
[271,273,0,241,262,245,263,278,254,263],
[293,280,309,0,265,268,250,268,277,301],
[286,277,288,285,0,282,270,293,294,292],
[279,284,305,282,268,0,270,281,310,292],
[284,279,287,300,280,280,0,281,273,302],
[275,268,272,282,257,269,269,0,294,292],
[295,261,296,273,256,240,277,256,0,267],
[268,276,287,249,258,258,248,258,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,214,153,163,236,292,200,302,206,304],
[336,0,213,224,265,259,310,305,281,365],
[397,337,0,199,195,256,258,360,256,340],
[387,326,351,0,447,237,313,310,336,301],
[314,285,355,103,0,218,212,310,216,320],
[258,291,294,313,332,0,263,239,298,362],
[350,240,292,237,338,287,0,309,287,305],
[248,245,190,240,240,311,241,0,197,341],
[344,269,294,214,334,252,263,353,0,316],
[246,185,210,249,230,188,245,209,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,281,273,271,277,278,287,273],
[276,0,257,276,265,250,281,264,298,251],
[270,293,0,285,280,263,295,271,290,261],
[269,274,265,0,278,265,287,268,286,262],
[277,285,270,272,0,279,299,284,289,257],
[279,300,287,285,271,0,291,277,294,275],
[273,269,255,263,251,259,0,275,277,263],
[272,286,279,282,266,273,275,0,287,271],
[263,252,260,264,261,256,273,263,0,254],
[277,299,289,288,293,275,287,279,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,264,257,269,268,255,278,265,291],
[272,0,275,266,277,269,262,282,261,271],
[286,275,0,262,265,282,244,284,264,293],
[293,284,288,0,290,273,270,286,281,293],
[281,273,285,260,0,284,284,307,276,297],
[282,281,268,277,266,0,251,278,258,279],
[295,288,306,280,266,299,0,296,279,324],
[272,268,266,264,243,272,254,0,260,287],
[285,289,286,269,274,292,271,290,0,298],
[259,279,257,257,253,271,226,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,272,298,273,293,279,291,277,282],
[261,0,256,290,260,282,260,282,286,277],
[278,294,0,300,261,288,261,297,285,272],
[252,260,250,0,247,268,253,262,272,247],
[277,290,289,303,0,284,269,302,282,276],
[257,268,262,282,266,0,246,280,294,262],
[271,290,289,297,281,304,0,286,302,279],
[259,268,253,288,248,270,264,0,292,272],
[273,264,265,278,268,256,248,258,0,253],
[268,273,278,303,274,288,271,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,254,281,279,219,256,218,270,284],
[293,0,320,288,259,278,267,273,298,319],
[296,230,0,238,251,233,250,234,242,286],
[269,262,312,0,296,293,270,277,271,303],
[271,291,299,254,0,272,297,265,303,305],
[331,272,317,257,278,0,269,262,294,310],
[294,283,300,280,253,281,0,281,319,288],
[332,277,316,273,285,288,269,0,296,325],
[280,252,308,279,247,256,231,254,0,302],
[266,231,264,247,245,240,262,225,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,252,265,278,266,268,266,279],
[288,0,278,260,268,281,286,268,258,281],
[277,272,0,277,262,279,281,270,282,262],
[298,290,273,0,277,287,309,282,279,293],
[285,282,288,273,0,291,274,279,261,265],
[272,269,271,263,259,0,259,251,257,272],
[284,264,269,241,276,291,0,265,263,264],
[282,282,280,268,271,299,285,0,287,281],
[284,292,268,271,289,293,287,263,0,287],
[271,269,288,257,285,278,286,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,196,214,182,293,296,188,235,218],
[320,0,256,320,319,279,314,276,281,277],
[354,294,0,268,281,271,304,271,330,284],
[336,230,282,0,291,323,335,230,272,282],
[368,231,269,259,0,273,309,240,255,270],
[257,271,279,227,277,0,280,249,231,236],
[254,236,246,215,241,270,0,206,187,215],
[362,274,279,320,310,301,344,0,257,321],
[315,269,220,278,295,319,363,293,0,275],
[332,273,266,268,280,314,335,229,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,300,275,269,283,272,266,280],
[276,0,287,293,276,290,278,273,271,283],
[268,263,0,299,265,292,292,278,284,290],
[250,257,251,0,257,260,260,259,261,255],
[275,274,285,293,0,280,281,271,295,287],
[281,260,258,290,270,0,260,274,284,266],
[267,272,258,290,269,290,0,267,275,264],
[278,277,272,291,279,276,283,0,281,278],
[284,279,266,289,255,266,275,269,0,280],
[270,267,260,295,263,284,286,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,240,326,294,222,314,296,293,254],
[310,0,269,330,281,271,334,299,302,291],
[310,281,0,291,272,242,312,311,294,286],
[224,220,259,0,256,225,251,285,241,200],
[256,269,278,294,0,238,274,297,268,265],
[328,279,308,325,312,0,333,334,312,261],
[236,216,238,299,276,217,0,326,252,213],
[254,251,239,265,253,216,224,0,263,242],
[257,248,256,309,282,238,298,287,0,251],
[296,259,264,350,285,289,337,308,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,268,278,252,265,252,262,296,280],
[289,0,281,278,269,269,275,262,302,274],
[282,269,0,274,258,274,264,279,271,287],
[272,272,276,0,249,265,257,261,272,275],
[298,281,292,301,0,283,280,265,274,288],
[285,281,276,285,267,0,267,267,291,272],
[298,275,286,293,270,283,0,273,303,318],
[288,288,271,289,285,283,277,0,296,298],
[254,248,279,278,276,259,247,254,0,293],
[270,276,263,275,262,278,232,252,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,267,270,269,273,296,259,258,267],
[264,0,274,271,283,262,296,264,270,268],
[283,276,0,287,292,270,293,280,284,284],
[280,279,263,0,272,275,286,265,272,274],
[281,267,258,278,0,276,280,270,256,267],
[277,288,280,275,274,0,302,264,284,275],
[254,254,257,264,270,248,0,269,256,262],
[291,286,270,285,280,286,281,0,274,288],
[292,280,266,278,294,266,294,276,0,266],
[283,282,266,276,283,275,288,262,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,260,276,263,258,273,283,287],
[264,0,262,249,277,240,261,251,274,256],
[265,288,0,261,268,274,276,287,277,279],
[290,301,289,0,272,286,292,270,279,305],
[274,273,282,278,0,277,276,270,309,297],
[287,310,276,264,273,0,291,282,283,288],
[292,289,274,258,274,259,0,264,279,298],
[277,299,263,280,280,268,286,0,264,280],
[267,276,273,271,241,267,271,286,0,263],
[263,294,271,245,253,262,252,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,255,273,321,298,274,260,291,252],
[299,0,270,231,241,222,273,232,259,248],
[295,280,0,336,376,318,304,270,325,270],
[277,319,214,0,363,316,347,278,336,290],
[229,309,174,187,0,269,256,194,271,249],
[252,328,232,234,281,0,292,233,268,291],
[276,277,246,203,294,258,0,222,298,298],
[290,318,280,272,356,317,328,0,293,276],
[259,291,225,214,279,282,252,257,0,255],
[298,302,280,260,301,259,252,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,293,290,280,291,272,262,290,274],
[264,0,276,273,261,264,271,261,272,257],
[257,274,0,274,270,281,275,276,275,263],
[260,277,276,0,259,281,267,276,280,269],
[270,289,280,291,0,282,286,279,291,264],
[259,286,269,269,268,0,277,272,274,271],
[278,279,275,283,264,273,0,270,275,269],
[288,289,274,274,271,278,280,0,273,276],
[260,278,275,270,259,276,275,277,0,271],
[276,293,287,281,286,279,281,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,267,250,307,282,272,281,296],
[272,0,253,251,253,284,264,237,266,274],
[283,297,0,281,286,292,297,258,291,299],
[283,299,269,0,284,280,278,285,295,308],
[300,297,264,266,0,311,283,273,294,293],
[243,266,258,270,239,0,268,248,272,267],
[268,286,253,272,267,282,0,268,270,284],
[278,313,292,265,277,302,282,0,295,328],
[269,284,259,255,256,278,280,255,0,293],
[254,276,251,242,257,283,266,222,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,290,239,259,267,261,247,241,254],
[306,0,302,277,274,287,289,290,243,274],
[260,248,0,255,271,257,250,268,249,285],
[311,273,295,0,277,282,288,277,263,285],
[291,276,279,273,0,273,295,260,281,269],
[283,263,293,268,277,0,281,274,266,284],
[289,261,300,262,255,269,0,276,250,266],
[303,260,282,273,290,276,274,0,261,294],
[309,307,301,287,269,284,300,289,0,300],
[296,276,265,265,281,266,284,256,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,283,262,276,264,291,268,280],
[270,0,286,289,281,286,279,289,285,276],
[271,264,0,294,270,275,265,281,277,273],
[267,261,256,0,259,275,279,280,268,285],
[288,269,280,291,0,287,276,294,278,285],
[274,264,275,275,263,0,256,274,264,284],
[286,271,285,271,274,294,0,300,262,284],
[259,261,269,270,256,276,250,0,252,266],
[282,265,273,282,272,286,288,298,0,285],
[270,274,277,265,265,266,266,284,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,273,337,297,270,338,292,319,275],
[263,0,263,315,270,241,330,295,289,223],
[277,287,0,348,283,280,329,280,265,304],
[213,235,202,0,227,166,253,256,212,179],
[253,280,267,323,0,223,298,290,267,230],
[280,309,270,384,327,0,333,329,307,340],
[212,220,221,297,252,217,0,230,237,218],
[258,255,270,294,260,221,320,0,279,261],
[231,261,285,338,283,243,313,271,0,249],
[275,327,246,371,320,210,332,289,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,309,270,305,283,295,336,320,358],
[263,0,332,165,145,253,244,301,343,384],
[241,218,0,178,243,173,300,280,269,292],
[280,385,372,0,308,258,295,294,366,413],
[245,405,307,242,0,313,320,366,390,358],
[267,297,377,292,237,0,290,334,338,349],
[255,306,250,255,230,260,0,250,367,349],
[214,249,270,256,184,216,300,0,295,322],
[230,207,281,184,160,212,183,255,0,379],
[192,166,258,137,192,201,201,228,171,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,273,263,277,252,264,265,273],
[277,0,293,268,266,279,260,275,273,281],
[285,257,0,270,257,259,273,257,275,263],
[277,282,280,0,273,283,270,276,296,273],
[287,284,293,277,0,285,273,289,289,269],
[273,271,291,267,265,0,258,273,276,261],
[298,290,277,280,277,292,0,280,301,269],
[286,275,293,274,261,277,270,0,285,277],
[285,277,275,254,261,274,249,265,0,267],
[277,269,287,277,281,289,281,273,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,283,297,282,268,288,281,266],
[292,0,289,286,291,300,270,254,279,281],
[282,261,0,270,291,289,279,269,276,279],
[267,264,280,0,291,268,268,276,275,259],
[253,259,259,259,0,264,237,241,256,266],
[268,250,261,282,286,0,254,272,261,247],
[282,280,271,282,313,296,0,279,282,282],
[262,296,281,274,309,278,271,0,268,282],
[269,271,274,275,294,289,268,282,0,265],
[284,269,271,291,284,303,268,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,289,276,261,271,292,295,289,290],
[264,0,285,255,265,258,284,257,285,255],
[261,265,0,272,269,273,287,276,277,271],
[274,295,278,0,299,273,286,291,287,280],
[289,285,281,251,0,270,282,284,283,269],
[279,292,277,277,280,0,289,288,278,272],
[258,266,263,264,268,261,0,269,271,253],
[255,293,274,259,266,262,281,0,274,269],
[261,265,273,263,267,272,279,276,0,260],
[260,295,279,270,281,278,297,281,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,379,259,322,290,278,289,262,241,319],
[171,0,192,153,217,151,181,179,259,260],
[291,358,0,315,292,250,279,197,221,301],
[228,397,235,0,277,236,228,220,272,322],
[260,333,258,273,0,220,193,236,361,319],
[272,399,300,314,330,0,238,212,303,350],
[261,369,271,322,357,312,0,285,353,386],
[288,371,353,330,314,338,265,0,304,391],
[309,291,329,278,189,247,197,246,0,332],
[231,290,249,228,231,200,164,159,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,47,419,116,113,84,253,297,247],
[253,0,182,292,37,47,212,210,268,187],
[503,368,0,540,294,160,332,368,294,368],
[131,258,10,0,50,94,50,184,228,147],
[434,513,256,500,0,293,300,463,410,456],
[437,503,390,456,257,0,403,334,473,325],
[466,338,218,500,250,147,0,334,301,318],
[297,340,182,366,87,216,216,0,400,147],
[253,282,256,322,140,77,249,150,0,103],
[303,363,182,403,94,225,232,403,447,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,271,256,289,262,261,256,246,290],
[275,0,266,276,271,257,266,272,264,275],
[279,284,0,286,269,266,284,267,265,292],
[294,274,264,0,281,261,287,280,277,295],
[261,279,281,269,0,288,249,285,273,280],
[288,293,284,289,262,0,268,297,256,296],
[289,284,266,263,301,282,0,289,278,290],
[294,278,283,270,265,253,261,0,256,252],
[304,286,285,273,277,294,272,294,0,281],
[260,275,258,255,270,254,260,298,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,273,280,245,256,292,271,294,282],
[281,0,274,264,259,287,285,266,301,297],
[277,276,0,259,258,287,287,276,304,306],
[270,286,291,0,274,246,274,250,299,287],
[305,291,292,276,0,259,289,257,303,293],
[294,263,263,304,291,0,296,268,306,284],
[258,265,263,276,261,254,0,238,270,273],
[279,284,274,300,293,282,312,0,317,291],
[256,249,246,251,247,244,280,233,0,274],
[268,253,244,263,257,266,277,259,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,302,286,272,287,314,289,308,305],
[252,0,295,233,285,288,274,266,275,233],
[248,255,0,264,251,243,272,249,301,225],
[264,317,286,0,266,249,282,289,269,286],
[278,265,299,284,0,297,316,289,255,278],
[263,262,307,301,253,0,299,300,338,248],
[236,276,278,268,234,251,0,275,288,278],
[261,284,301,261,261,250,275,0,272,266],
[242,275,249,281,295,212,262,278,0,257],
[245,317,325,264,272,302,272,284,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,317,283,291,293,323,298,334],
[259,0,264,273,265,311,266,288,317,279],
[278,286,0,295,279,304,284,273,301,318],
[233,277,255,0,247,281,271,244,283,293],
[267,285,271,303,0,283,255,298,308,313],
[259,239,246,269,267,0,252,272,284,265],
[257,284,266,279,295,298,0,286,291,275],
[227,262,277,306,252,278,264,0,295,301],
[252,233,249,267,242,266,259,255,0,262],
[216,271,232,257,237,285,275,249,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,305,280,294,282,209,243,293,312],
[335,0,293,257,250,296,316,284,272,295],
[245,257,0,244,243,285,226,271,249,255],
[270,293,306,0,246,301,216,276,289,328],
[256,300,307,304,0,299,293,295,321,267],
[268,254,265,249,251,0,233,302,301,284],
[341,234,324,334,257,317,0,276,316,285],
[307,266,279,274,255,248,274,0,266,334],
[257,278,301,261,229,249,234,284,0,287],
[238,255,295,222,283,266,265,216,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,224,279,270,260,249,265,298,314],
[273,0,272,278,289,256,284,317,273,300],
[326,278,0,295,282,272,278,293,318,312],
[271,272,255,0,251,258,248,250,266,282],
[280,261,268,299,0,275,229,264,281,295],
[290,294,278,292,275,0,293,277,296,299],
[301,266,272,302,321,257,0,281,301,311],
[285,233,257,300,286,273,269,0,322,306],
[252,277,232,284,269,254,249,228,0,261],
[236,250,238,268,255,251,239,244,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,241,252,263,255,240,246,256,244],
[299,0,268,270,270,268,259,267,282,270],
[309,282,0,281,279,262,271,282,278,292],
[298,280,269,0,277,254,258,258,271,266],
[287,280,271,273,0,278,265,275,270,281],
[295,282,288,296,272,0,292,274,277,267],
[310,291,279,292,285,258,0,275,288,272],
[304,283,268,292,275,276,275,0,274,279],
[294,268,272,279,280,273,262,276,0,261],
[306,280,258,284,269,283,278,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,194,214,280,277,249,287,271,209,228],
[356,0,241,312,299,254,352,284,226,315],
[336,309,0,431,360,374,368,365,271,341],
[270,238,119,0,231,262,261,241,225,155],
[273,251,190,319,0,319,296,313,221,250],
[301,296,176,288,231,0,311,252,211,204],
[263,198,182,289,254,239,0,268,234,259],
[279,266,185,309,237,298,282,0,328,273],
[341,324,279,325,329,339,316,222,0,275],
[322,235,209,395,300,346,291,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,257,286,305,267,313,274,320],
[249,0,297,276,268,313,266,317,271,269],
[265,253,0,260,273,288,265,287,268,267],
[293,274,290,0,276,309,294,304,279,293],
[264,282,277,274,0,287,256,290,274,280],
[245,237,262,241,263,0,241,263,251,268],
[283,284,285,256,294,309,0,320,277,295],
[237,233,263,246,260,287,230,0,246,264],
[276,279,282,271,276,299,273,304,0,274],
[230,281,283,257,270,282,255,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,297,330,275,224,267,305,225],
[268,0,236,246,311,265,210,213,269,222],
[272,314,0,250,331,254,258,249,311,284],
[253,304,300,0,338,299,284,283,248,281],
[220,239,219,212,0,255,211,241,207,177],
[275,285,296,251,295,0,250,236,299,251],
[326,340,292,266,339,300,0,292,307,253],
[283,337,301,267,309,314,258,0,289,275],
[245,281,239,302,343,251,243,261,0,230],
[325,328,266,269,373,299,297,275,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,271,271,324,226,280,300,238,289],
[342,0,334,278,295,264,350,330,319,266],
[279,216,0,299,260,235,257,269,243,248],
[279,272,251,0,285,237,296,302,251,221],
[226,255,290,265,0,224,226,265,240,232],
[324,286,315,313,326,0,309,325,281,254],
[270,200,293,254,324,241,0,266,221,238],
[250,220,281,248,285,225,284,0,255,290],
[312,231,307,299,310,269,329,295,0,273],
[261,284,302,329,318,296,312,260,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,298,299,294,306,309,291,300,297],
[278,0,272,297,310,301,300,290,281,309],
[252,278,0,285,307,300,271,297,275,280],
[251,253,265,0,250,289,286,279,256,289],
[256,240,243,300,0,275,274,275,267,284],
[244,249,250,261,275,0,261,283,280,261],
[241,250,279,264,276,289,0,288,262,279],
[259,260,253,271,275,267,262,0,258,272],
[250,269,275,294,283,270,288,292,0,277],
[253,241,270,261,266,289,271,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,250,261,288,255,270,291,259],
[287,0,286,276,262,270,275,286,319,276],
[284,264,0,274,273,281,283,290,295,270],
[300,274,276,0,277,287,287,292,307,294],
[289,288,277,273,0,280,287,268,301,271],
[262,280,269,263,270,0,271,284,304,266],
[295,275,267,263,263,279,0,275,297,271],
[280,264,260,258,282,266,275,0,279,270],
[259,231,255,243,249,246,253,271,0,253],
[291,274,280,256,279,284,279,280,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,257,278,292,284,282,266,288],
[274,0,264,259,273,271,269,290,274,287],
[283,286,0,282,279,281,279,281,271,288],
[293,291,268,0,295,286,275,288,282,283],
[272,277,271,255,0,270,281,271,276,287],
[258,279,269,264,280,0,266,275,264,292],
[266,281,271,275,269,284,0,276,258,272],
[268,260,269,262,279,275,274,0,260,291],
[284,276,279,268,274,286,292,290,0,297],
[262,263,262,267,263,258,278,259,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,295,266,272,301,274,306,306,300],
[259,0,236,262,250,283,269,298,300,282],
[255,314,0,315,277,301,265,309,297,297],
[284,288,235,0,267,297,263,311,308,291],
[278,300,273,283,0,296,304,317,306,288],
[249,267,249,253,254,0,260,286,277,253],
[276,281,285,287,246,290,0,287,291,307],
[244,252,241,239,233,264,263,0,300,254],
[244,250,253,242,244,273,259,250,0,279],
[250,268,253,259,262,297,243,296,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,243,260,248,247,246,265,253,252],
[295,0,287,262,277,268,267,274,265,278],
[307,263,0,273,270,303,271,261,267,272],
[290,288,277,0,273,272,278,287,286,280],
[302,273,280,277,0,288,264,285,249,256],
[303,282,247,278,262,0,260,288,280,289],
[304,283,279,272,286,290,0,274,275,281],
[285,276,289,263,265,262,276,0,267,273],
[297,285,283,264,301,270,275,283,0,292],
[298,272,278,270,294,261,269,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,260,262,287,267,274,277,269],
[278,0,259,269,261,255,273,278,281,282],
[266,291,0,264,304,274,273,266,285,276],
[290,281,286,0,271,291,290,274,313,284],
[288,289,246,279,0,287,289,259,269,276],
[263,295,276,259,263,0,250,285,257,275],
[283,277,277,260,261,300,0,290,277,302],
[276,272,284,276,291,265,260,0,294,309],
[273,269,265,237,281,293,273,256,0,280],
[281,268,274,266,274,275,248,241,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,238,246,268,234,297,236,225,271],
[283,0,210,186,289,291,258,191,262,266],
[312,340,0,177,277,265,337,252,271,306],
[304,364,373,0,287,313,365,256,287,340],
[282,261,273,263,0,196,338,274,224,220],
[316,259,285,237,354,0,299,290,233,331],
[253,292,213,185,212,251,0,211,247,278],
[314,359,298,294,276,260,339,0,239,272],
[325,288,279,263,326,317,303,311,0,259],
[279,284,244,210,330,219,272,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,318,282,304,307,265,266,308,266],
[256,0,268,273,271,299,268,266,289,275],
[232,282,0,262,284,308,260,251,252,273],
[268,277,288,0,278,311,257,267,307,279],
[246,279,266,272,0,273,269,281,289,270],
[243,251,242,239,277,0,253,233,244,232],
[285,282,290,293,281,297,0,273,274,272],
[284,284,299,283,269,317,277,0,278,288],
[242,261,298,243,261,306,276,272,0,263],
[284,275,277,271,280,318,278,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,279,273,276,288,288,276,282],
[267,0,272,271,267,259,265,284,279,269],
[261,278,0,267,266,253,266,262,261,266],
[271,279,283,0,271,270,264,287,263,282],
[277,283,284,279,0,263,270,282,282,266],
[274,291,297,280,287,0,279,284,281,271],
[262,285,284,286,280,271,0,291,281,277],
[262,266,288,263,268,266,259,0,284,269],
[274,271,289,287,268,269,269,266,0,264],
[268,281,284,268,284,279,273,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,425,425,377,369,222,430,145,369,425],
[125,0,171,118,125,228,302,125,199,357],
[125,379,0,151,199,224,246,134,298,327],
[173,432,399,0,263,253,361,225,346,282],
[181,425,351,287,0,222,430,76,235,299],
[328,322,326,297,328,0,232,380,380,270],
[120,248,304,189,120,318,0,172,246,177],
[405,425,416,325,474,170,378,0,408,373],
[181,351,252,204,315,170,304,142,0,299],
[125,193,223,268,251,280,373,177,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,239,240,260,279,263,281,271],
[291,0,252,278,281,309,284,288,302,272],
[270,298,0,248,264,283,290,246,300,251],
[311,272,302,0,238,285,312,271,328,287],
[310,269,286,312,0,299,298,280,327,299],
[290,241,267,265,251,0,283,268,322,263],
[271,266,260,238,252,267,0,252,287,228],
[287,262,304,279,270,282,298,0,319,271],
[269,248,250,222,223,228,263,231,0,253],
[279,278,299,263,251,287,322,279,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,271,284,265,318,276,278,278],
[258,0,253,250,265,252,311,220,260,250],
[257,297,0,261,262,259,303,265,252,282],
[279,300,289,0,268,298,336,273,251,287],
[266,285,288,282,0,256,295,269,258,263],
[285,298,291,252,294,0,315,266,284,290],
[232,239,247,214,255,235,0,258,242,239],
[274,330,285,277,281,284,292,0,283,245],
[272,290,298,299,292,266,308,267,0,264],
[272,300,268,263,287,260,311,305,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,277,277,293,273,283,282,268],
[269,0,272,294,289,289,279,277,280,282],
[279,278,0,285,282,281,274,287,286,293],
[273,256,265,0,258,281,256,264,273,268],
[273,261,268,292,0,285,269,285,281,278],
[257,261,269,269,265,0,262,266,267,272],
[277,271,276,294,281,288,0,280,278,277],
[267,273,263,286,265,284,270,0,269,278],
[268,270,264,277,269,283,272,281,0,273],
[282,268,257,282,272,278,273,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,269,268,269,266,282,271,254,264],
[260,0,259,262,267,255,274,265,263,260],
[281,291,0,299,285,283,294,293,278,253],
[282,288,251,0,288,280,276,289,257,273],
[281,283,265,262,0,266,269,288,260,248],
[284,295,267,270,284,0,272,294,268,257],
[268,276,256,274,281,278,0,285,265,253],
[279,285,257,261,262,256,265,0,258,247],
[296,287,272,293,290,282,285,292,0,285],
[286,290,297,277,302,293,297,303,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,286,274,304,300,308,301,316,305],
[246,0,253,245,282,270,273,255,297,266],
[264,297,0,273,297,277,290,281,294,294],
[276,305,277,0,285,278,286,291,302,275],
[246,268,253,265,0,235,257,285,252,289],
[250,280,273,272,315,0,281,297,254,275],
[242,277,260,264,293,269,0,272,263,293],
[249,295,269,259,265,253,278,0,275,305],
[234,253,256,248,298,296,287,275,0,282],
[245,284,256,275,261,275,257,245,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,238,266,278,276,289,278,308,297],
[270,0,255,266,302,293,278,247,298,277],
[312,295,0,268,284,298,301,274,303,288],
[284,284,282,0,313,294,297,260,281,292],
[272,248,266,237,0,258,245,233,289,268],
[274,257,252,256,292,0,269,267,281,289],
[261,272,249,253,305,281,0,257,281,254],
[272,303,276,290,317,283,293,0,301,293],
[242,252,247,269,261,269,269,249,0,270],
[253,273,262,258,282,261,296,257,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,253,265,318,266,297,260,263,283],
[285,0,268,275,269,263,249,235,295,297],
[297,282,0,305,286,271,285,250,250,283],
[285,275,245,0,302,281,286,219,249,232],
[232,281,264,248,0,239,274,245,239,247],
[284,287,279,269,311,0,315,287,301,293],
[253,301,265,264,276,235,0,234,275,283],
[290,315,300,331,305,263,316,0,279,279],
[287,255,300,301,311,249,275,271,0,244],
[267,253,267,318,303,257,267,271,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,287,293,201,265,281,264,350,251],
[289,0,308,296,274,339,293,331,248,234],
[263,242,0,275,181,301,312,308,220,248],
[257,254,275,0,227,303,282,330,240,290],
[349,276,369,323,0,271,313,285,284,328],
[285,211,249,247,279,0,266,262,235,247],
[269,257,238,268,237,284,0,217,291,238],
[286,219,242,220,265,288,333,0,294,216],
[200,302,330,310,266,315,259,256,0,255],
[299,316,302,260,222,303,312,334,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,279,255,267,247,292,276,231,307],
[319,0,335,271,317,299,320,305,296,297],
[271,215,0,254,253,245,286,224,217,286],
[295,279,296,0,266,247,327,247,235,320],
[283,233,297,284,0,254,297,271,267,273],
[303,251,305,303,296,0,332,264,256,273],
[258,230,264,223,253,218,0,214,192,241],
[274,245,326,303,279,286,336,0,261,290],
[319,254,333,315,283,294,358,289,0,294],
[243,253,264,230,277,277,309,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,291,221,248,253,270,267,252,254],
[300,0,284,261,301,279,280,250,260,265],
[259,266,0,235,277,251,262,244,282,283],
[329,289,315,0,298,287,291,287,274,307],
[302,249,273,252,0,256,273,271,251,274],
[297,271,299,263,294,0,281,278,269,276],
[280,270,288,259,277,269,0,302,256,306],
[283,300,306,263,279,272,248,0,264,288],
[298,290,268,276,299,281,294,286,0,280],
[296,285,267,243,276,274,244,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,278,285,276,293,286,252,267,305],
[255,0,277,263,267,273,276,267,276,290],
[272,273,0,279,254,274,273,273,260,284],
[265,287,271,0,277,289,282,268,267,289],
[274,283,296,273,0,295,284,283,280,307],
[257,277,276,261,255,0,271,266,263,281],
[264,274,277,268,266,279,0,263,269,293],
[298,283,277,282,267,284,287,0,277,288],
[283,274,290,283,270,287,281,273,0,289],
[245,260,266,261,243,269,257,262,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,288,265,298,248,265,296,278,291],
[266,0,272,259,274,245,267,262,267,298],
[262,278,0,287,275,254,284,304,279,285],
[285,291,263,0,288,244,296,293,278,310],
[252,276,275,262,0,235,271,287,250,261],
[302,305,296,306,315,0,304,313,268,301],
[285,283,266,254,279,246,0,275,231,266],
[254,288,246,257,263,237,275,0,259,253],
[272,283,271,272,300,282,319,291,0,314],
[259,252,265,240,289,249,284,297,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,285,258,273,259,297,262,277,250],
[281,0,277,260,265,278,280,273,292,286],
[265,273,0,252,261,281,303,275,295,281],
[292,290,298,0,278,272,302,295,287,284],
[277,285,289,272,0,268,306,291,300,278],
[291,272,269,278,282,0,319,290,300,291],
[253,270,247,248,244,231,0,258,269,255],
[288,277,275,255,259,260,292,0,295,279],
[273,258,255,263,250,250,281,255,0,264],
[300,264,269,266,272,259,295,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,296,270,287,279,291,298,274],
[268,0,267,301,283,253,288,278,281,261],
[281,283,0,295,276,277,279,285,286,255],
[254,249,255,0,267,253,255,259,265,260],
[280,267,274,283,0,281,272,275,273,287],
[263,297,273,297,269,0,266,264,295,262],
[271,262,271,295,278,284,0,277,293,280],
[259,272,265,291,275,286,273,0,283,278],
[252,269,264,285,277,255,257,267,0,266],
[276,289,295,290,263,288,270,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,262,258,224,313,258,261,295,281],
[283,0,298,277,298,289,273,312,298,261],
[288,252,0,246,272,277,284,276,277,236],
[292,273,304,0,335,319,298,295,313,302],
[326,252,278,215,0,252,216,286,326,265],
[237,261,273,231,298,0,271,260,248,295],
[292,277,266,252,334,279,0,303,309,291],
[289,238,274,255,264,290,247,0,288,195],
[255,252,273,237,224,302,241,262,0,272],
[269,289,314,248,285,255,259,355,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,384,360,335,360,332,294,176,366,379],
[166,0,333,325,509,214,348,307,331,471],
[190,217,0,318,411,191,269,284,372,283],
[215,225,232,0,360,170,236,220,345,383],
[190,41,139,190,0,157,209,264,249,226],
[218,336,359,380,393,0,300,265,438,331],
[256,202,281,314,341,250,0,254,301,415],
[374,243,266,330,286,285,296,0,347,238],
[184,219,178,205,301,112,249,203,0,277],
[171,79,267,167,324,219,135,312,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,288,242,286,272,294,295,301,298],
[243,0,249,258,278,246,291,246,308,325],
[262,301,0,262,260,282,310,258,297,296],
[308,292,288,0,319,305,284,248,308,322],
[264,272,290,231,0,262,257,235,284,286],
[278,304,268,245,288,0,287,259,281,344],
[256,259,240,266,293,263,0,251,292,287],
[255,304,292,302,315,291,299,0,325,331],
[249,242,253,242,266,269,258,225,0,263],
[252,225,254,228,264,206,263,219,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,230,201,191,294,264,285,284,226],
[297,0,300,194,203,292,247,297,266,272],
[320,250,0,198,301,291,211,293,278,329],
[349,356,352,0,338,398,269,347,335,354],
[359,347,249,212,0,341,286,272,318,300],
[256,258,259,152,209,0,199,248,332,281],
[286,303,339,281,264,351,0,262,295,365],
[265,253,257,203,278,302,288,0,268,306],
[266,284,272,215,232,218,255,282,0,256],
[324,278,221,196,250,269,185,244,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,302,243,287,263,266,246,262,261],
[285,0,295,257,286,297,285,293,302,267],
[248,255,0,222,248,240,283,239,262,258],
[307,293,328,0,295,279,298,315,301,272],
[263,264,302,255,0,272,271,262,271,265],
[287,253,310,271,278,0,276,283,293,276],
[284,265,267,252,279,274,0,297,266,259],
[304,257,311,235,288,267,253,0,298,282],
[288,248,288,249,279,257,284,252,0,246],
[289,283,292,278,285,274,291,268,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,245,252,300,273,278,271,266,235],
[261,0,236,285,272,281,246,271,250,249],
[305,314,0,306,323,322,263,293,303,289],
[298,265,244,0,294,290,264,275,272,290],
[250,278,227,256,0,290,264,286,271,247],
[277,269,228,260,260,0,236,263,254,251],
[272,304,287,286,286,314,0,297,288,290],
[279,279,257,275,264,287,253,0,256,256],
[284,300,247,278,279,296,262,294,0,272],
[315,301,261,260,303,299,260,294,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,295,225,259,296,255,271,289],
[289,0,294,293,221,293,292,288,302,329],
[290,256,0,258,247,260,281,252,278,297],
[255,257,292,0,287,278,265,262,308,281],
[325,329,303,263,0,265,287,301,283,298],
[291,257,290,272,285,0,261,258,299,284],
[254,258,269,285,263,289,0,267,262,290],
[295,262,298,288,249,292,283,0,285,327],
[279,248,272,242,267,251,288,265,0,267],
[261,221,253,269,252,266,260,223,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,264,280,339,285,292,267,304,304],
[258,0,241,246,277,259,275,278,292,283],
[286,309,0,307,275,273,337,256,301,300],
[270,304,243,0,262,286,338,243,360,273],
[211,273,275,288,0,269,307,240,298,296],
[265,291,277,264,281,0,310,228,318,292],
[258,275,213,212,243,240,0,230,275,236],
[283,272,294,307,310,322,320,0,309,302],
[246,258,249,190,252,232,275,241,0,215],
[246,267,250,277,254,258,314,248,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,303,283,280,295,262,267,298],
[263,0,272,277,280,262,274,272,291,273],
[274,278,0,286,292,282,277,289,275,290],
[247,273,264,0,261,273,234,250,275,285],
[267,270,258,289,0,264,283,279,283,272],
[270,288,268,277,286,0,278,274,288,281],
[255,276,273,316,267,272,0,276,287,276],
[288,278,261,300,271,276,274,0,276,283],
[283,259,275,275,267,262,263,274,0,275],
[252,277,260,265,278,269,274,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,301,280,301,263,248,271,276,266],
[256,0,273,266,278,265,263,260,261,251],
[249,277,0,273,272,263,261,254,257,256],
[270,284,277,0,297,272,269,273,277,275],
[249,272,278,253,0,265,261,254,252,264],
[287,285,287,278,285,0,258,267,282,264],
[302,287,289,281,289,292,0,266,281,278],
[279,290,296,277,296,283,284,0,279,275],
[274,289,293,273,298,268,269,271,0,266],
[284,299,294,275,286,286,272,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,274,270,261,256,276,272,275,248],
[297,0,256,311,278,283,249,296,257,266],
[276,294,0,253,287,271,278,305,298,273],
[280,239,297,0,275,277,281,321,268,285],
[289,272,263,275,0,265,279,292,312,265],
[294,267,279,273,285,0,265,299,278,274],
[274,301,272,269,271,285,0,284,266,268],
[278,254,245,229,258,251,266,0,284,246],
[275,293,252,282,238,272,284,266,0,242],
[302,284,277,265,285,276,282,304,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,201,185,277,250,246,205,233,295,228],
[349,0,279,305,303,307,259,312,334,291],
[365,271,0,273,270,304,248,279,324,279],
[273,245,277,0,309,287,295,288,302,289],
[300,247,280,241,0,280,263,277,306,311],
[304,243,246,263,270,0,253,281,318,286],
[345,291,302,255,287,297,0,332,325,308],
[317,238,271,262,273,269,218,0,277,270],
[255,216,226,248,244,232,225,273,0,258],
[322,259,271,261,239,264,242,280,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,265,288,273,290,285,308,306,282],
[265,0,253,274,278,288,271,277,294,265],
[285,297,0,295,275,306,292,298,330,290],
[262,276,255,0,254,293,280,305,305,259],
[277,272,275,296,0,281,271,315,301,271],
[260,262,244,257,269,0,300,274,303,262],
[265,279,258,270,279,250,0,272,328,298],
[242,273,252,245,235,276,278,0,274,247],
[244,256,220,245,249,247,222,276,0,264],
[268,285,260,291,279,288,252,303,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,245,268,276,233,273,275,265,273],
[261,0,251,229,253,258,284,272,261,303],
[305,299,0,274,284,289,311,295,298,315],
[282,321,276,0,274,274,305,291,271,321],
[274,297,266,276,0,260,302,304,280,321],
[317,292,261,276,290,0,290,272,268,306],
[277,266,239,245,248,260,0,282,264,295],
[275,278,255,259,246,278,268,0,271,279],
[285,289,252,279,270,282,286,279,0,308],
[277,247,235,229,229,244,255,271,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,267,268,282,268,276,261,265,296],
[287,0,262,291,290,277,276,260,251,301],
[283,288,0,292,282,288,274,273,276,299],
[282,259,258,0,274,269,262,254,288,267],
[268,260,268,276,0,276,275,257,263,288],
[282,273,262,281,274,0,287,260,270,280],
[274,274,276,288,275,263,0,247,253,276],
[289,290,277,296,293,290,303,0,269,298],
[285,299,274,262,287,280,297,281,0,286],
[254,249,251,283,262,270,274,252,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,243,254,283,260,261,259,256],
[275,0,279,247,248,268,272,277,248,254],
[266,271,0,257,246,274,263,272,293,254],
[307,303,293,0,283,291,279,295,299,267],
[296,302,304,267,0,310,290,309,299,270],
[267,282,276,259,240,0,261,280,267,264],
[290,278,287,271,260,289,0,283,287,263],
[289,273,278,255,241,270,267,0,267,263],
[291,302,257,251,251,283,263,283,0,278],
[294,296,296,283,280,286,287,287,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,307,377,284,189,241,283,254,280],
[209,0,292,329,216,253,285,309,225,294],
[243,258,0,290,239,299,271,246,244,219],
[173,221,260,0,215,186,169,215,215,263],
[266,334,311,335,0,309,289,340,235,345],
[361,297,251,364,241,0,275,339,278,248],
[309,265,279,381,261,275,0,315,261,329],
[267,241,304,335,210,211,235,0,257,281],
[296,325,306,335,315,272,289,293,0,304],
[270,256,331,287,205,302,221,269,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,149,132,204,305,283,81,170,193],
[316,0,296,150,375,323,373,262,252,332],
[401,254,0,186,411,359,398,281,337,373],
[418,400,364,0,442,269,400,400,408,397],
[346,175,139,108,0,227,241,64,321,214],
[245,227,191,281,323,0,224,205,236,342],
[267,177,152,150,309,326,0,209,299,298],
[469,288,269,150,486,345,341,0,469,290],
[380,298,213,142,229,314,251,81,0,246],
[357,218,177,153,336,208,252,260,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,286,424,357,382,360,274,315,308],
[212,0,243,379,267,342,260,285,283,253],
[264,307,0,327,248,330,336,290,324,271],
[126,171,223,0,238,318,229,199,282,262],
[193,283,302,312,0,385,292,265,263,290],
[168,208,220,232,165,0,251,276,272,251],
[190,290,214,321,258,299,0,284,274,266],
[276,265,260,351,285,274,266,0,293,260],
[235,267,226,268,287,278,276,257,0,240],
[242,297,279,288,260,299,284,290,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,289,304,289,293,283,263,304],
[254,0,247,272,287,276,268,260,250,281],
[281,303,0,278,302,277,278,284,270,291],
[261,278,272,0,299,271,281,265,253,300],
[246,263,248,251,0,245,255,246,223,259],
[261,274,273,279,305,0,275,271,278,301],
[257,282,272,269,295,275,0,262,262,287],
[267,290,266,285,304,279,288,0,266,303],
[287,300,280,297,327,272,288,284,0,310],
[246,269,259,250,291,249,263,247,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,300,314,296,299,280,272,307,286],
[254,0,264,276,271,284,258,275,270,262],
[250,286,0,292,292,269,267,262,280,264],
[236,274,258,0,282,280,241,249,268,269],
[254,279,258,268,0,277,237,250,265,261],
[251,266,281,270,273,0,254,271,280,273],
[270,292,283,309,313,296,0,296,294,294],
[278,275,288,301,300,279,254,0,298,286],
[243,280,270,282,285,270,256,252,0,267],
[264,288,286,281,289,277,256,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,284,271,287,268,266,257,296],
[266,0,273,282,264,287,275,257,272,276],
[268,277,0,268,274,269,261,267,256,274],
[266,268,282,0,283,287,255,258,264,285],
[279,286,276,267,0,296,274,275,280,277],
[263,263,281,263,254,0,244,233,256,260],
[282,275,289,295,276,306,0,278,289,295],
[284,293,283,292,275,317,272,0,278,310],
[293,278,294,286,270,294,261,272,0,302],
[254,274,276,265,273,290,255,240,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,295,296,264,295,274,268,261,285],
[289,0,293,257,284,282,246,302,264,299],
[255,257,0,297,258,264,265,272,268,278],
[254,293,253,0,281,268,258,272,269,266],
[286,266,292,269,0,290,249,290,273,260],
[255,268,286,282,260,0,250,256,249,254],
[276,304,285,292,301,300,0,262,288,289],
[282,248,278,278,260,294,288,0,279,249],
[289,286,282,281,277,301,262,271,0,290],
[265,251,272,284,290,296,261,301,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,290,278,286,276,273,273,287,287],
[286,0,298,282,286,271,289,306,279,297],
[260,252,0,269,265,257,268,275,249,266],
[272,268,281,0,284,272,292,275,266,278],
[264,264,285,266,0,275,273,276,270,294],
[274,279,293,278,275,0,286,289,275,301],
[277,261,282,258,277,264,0,279,266,283],
[277,244,275,275,274,261,271,0,274,276],
[263,271,301,284,280,275,284,276,0,285],
[263,253,284,272,256,249,267,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,304,324,323,297,292,305,316,290],
[276,0,316,303,308,278,264,274,296,308],
[246,234,0,263,276,256,239,247,242,273],
[226,247,287,0,288,282,253,288,303,264],
[227,242,274,262,0,271,239,226,251,260],
[253,272,294,268,279,0,256,265,272,266],
[258,286,311,297,311,294,0,277,276,298],
[245,276,303,262,324,285,273,0,274,276],
[234,254,308,247,299,278,274,276,0,287],
[260,242,277,286,290,284,252,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,292,244,289,309,293,263,307,282],
[230,0,288,290,265,317,309,224,287,313],
[258,262,0,224,256,243,229,211,234,299],
[306,260,326,0,305,269,370,301,308,317],
[261,285,294,245,0,275,321,200,300,305],
[241,233,307,281,275,0,338,246,272,286],
[257,241,321,180,229,212,0,229,253,279],
[287,326,339,249,350,304,321,0,310,362],
[243,263,316,242,250,278,297,240,0,301],
[268,237,251,233,245,264,271,188,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,265,261,259,252,251,280,264,249],
[272,0,273,274,277,262,272,285,259,275],
[285,277,0,282,271,264,280,284,260,261],
[289,276,268,0,266,273,257,273,259,274],
[291,273,279,284,0,287,259,274,282,280],
[298,288,286,277,263,0,278,281,281,266],
[299,278,270,293,291,272,0,283,278,270],
[270,265,266,277,276,269,267,0,259,255],
[286,291,290,291,268,269,272,291,0,263],
[301,275,289,276,270,284,280,295,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,256,294,272,315,293,261,292,266],
[256,0,255,249,252,280,270,241,234,255],
[294,295,0,263,286,297,310,278,275,266],
[256,301,287,0,268,309,304,271,261,256],
[278,298,264,282,0,303,275,251,279,284],
[235,270,253,241,247,0,310,265,250,284],
[257,280,240,246,275,240,0,254,259,263],
[289,309,272,279,299,285,296,0,278,270],
[258,316,275,289,271,300,291,272,0,254],
[284,295,284,294,266,266,287,280,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,281,278,255,266,284,283,268],
[267,0,267,273,280,271,267,283,286,267],
[272,283,0,292,288,275,261,286,279,272],
[269,277,258,0,276,275,275,285,284,276],
[272,270,262,274,0,253,260,277,274,266],
[295,279,275,275,297,0,278,298,275,280],
[284,283,289,275,290,272,0,286,274,272],
[266,267,264,265,273,252,264,0,252,249],
[267,264,271,266,276,275,276,298,0,255],
[282,283,278,274,284,270,278,301,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,298,283,269,270,266,268,267],
[260,0,254,286,264,271,268,240,262,267],
[279,296,0,318,277,290,272,259,282,284],
[252,264,232,0,246,250,265,246,243,243],
[267,286,273,304,0,264,277,258,262,275],
[281,279,260,300,286,0,276,254,260,277],
[280,282,278,285,273,274,0,278,244,278],
[284,310,291,304,292,296,272,0,275,264],
[282,288,268,307,288,290,306,275,0,309],
[283,283,266,307,275,273,272,286,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,273,290,283,283,276,298,271],
[271,0,268,271,288,260,274,262,288,278],
[284,282,0,272,286,284,278,293,287,277],
[277,279,278,0,283,261,267,272,277,268],
[260,262,264,267,0,256,259,267,275,255],
[267,290,266,289,294,0,277,289,286,269],
[267,276,272,283,291,273,0,259,294,255],
[274,288,257,278,283,261,291,0,290,269],
[252,262,263,273,275,264,256,260,0,246],
[279,272,273,282,295,281,295,281,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,244,230,251,297,255,259,258,251],
[327,0,294,286,273,320,271,323,320,295],
[306,256,0,242,214,287,275,257,291,258],
[320,264,308,0,276,328,241,279,325,312],
[299,277,336,274,0,290,270,302,335,276],
[253,230,263,222,260,0,207,231,316,214],
[295,279,275,309,280,343,0,274,337,277],
[291,227,293,271,248,319,276,0,324,276],
[292,230,259,225,215,234,213,226,0,220],
[299,255,292,238,274,336,273,274,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,281,283,292,275,281,288,267],
[281,0,280,287,278,278,273,274,287,277],
[278,270,0,282,283,289,276,293,275,267],
[269,263,268,0,275,277,268,266,278,254],
[267,272,267,275,0,275,276,272,287,244],
[258,272,261,273,275,0,252,270,280,250],
[275,277,274,282,274,298,0,265,290,276],
[269,276,257,284,278,280,285,0,291,265],
[262,263,275,272,263,270,260,259,0,248],
[283,273,283,296,306,300,274,285,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,274,295,266,283,283,294,278],
[276,0,278,286,284,288,302,283,304,262],
[291,272,0,293,298,276,323,305,302,276],
[276,264,257,0,304,265,293,273,283,266],
[255,266,252,246,0,244,301,273,275,251],
[284,262,274,285,306,0,296,286,295,267],
[267,248,227,257,249,254,0,263,271,253],
[267,267,245,277,277,264,287,0,263,268],
[256,246,248,267,275,255,279,287,0,253],
[272,288,274,284,299,283,297,282,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,353,289,300,313,362,281,292,246,347],
[197,0,231,233,276,238,155,261,198,215],
[261,319,0,226,343,352,197,249,216,244],
[250,317,324,0,289,314,221,313,234,298],
[237,274,207,261,0,289,181,201,209,233],
[188,312,198,236,261,0,257,280,185,298],
[269,395,353,329,369,293,0,345,298,341],
[258,289,301,237,349,270,205,0,206,205],
[304,352,334,316,341,365,252,344,0,297],
[203,335,306,252,317,252,209,345,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,223,205,252,119,417,331,464,332],
[326,0,322,326,351,218,430,430,417,327],
[327,228,0,285,120,310,522,493,418,418],
[345,224,265,0,133,237,436,344,436,241],
[298,199,430,417,0,326,521,430,417,327],
[431,332,240,313,224,0,493,240,436,332],
[133,120,28,114,29,57,0,240,252,133],
[219,120,57,206,120,310,310,0,310,224],
[86,133,132,114,133,114,298,240,0,29],
[218,223,132,309,223,218,417,326,521,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,285,276,254,287,253,263,283],
[283,0,279,272,275,274,294,279,261,294],
[289,271,0,280,274,267,288,297,287,311],
[265,278,270,0,269,285,258,284,275,302],
[274,275,276,281,0,255,266,280,261,265],
[296,276,283,265,295,0,292,285,280,312],
[263,256,262,292,284,258,0,304,273,296],
[297,271,253,266,270,265,246,0,287,274],
[287,289,263,275,289,270,277,263,0,291],
[267,256,239,248,285,238,254,276,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,248,286,280,279,353,309,289,293],
[245,0,257,270,222,266,278,253,311,217],
[302,293,0,274,288,247,335,298,245,269],
[264,280,276,0,317,229,326,302,300,298],
[270,328,262,233,0,254,310,278,342,264],
[271,284,303,321,296,0,362,333,309,310],
[197,272,215,224,240,188,0,264,242,234],
[241,297,252,248,272,217,286,0,296,282],
[261,239,305,250,208,241,308,254,0,246],
[257,333,281,252,286,240,316,268,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,246,253,293,269,263,279,267],
[288,0,279,281,274,271,274,255,319,272],
[278,271,0,266,277,280,284,267,295,263],
[304,269,284,0,279,277,268,265,307,280],
[297,276,273,271,0,277,261,261,300,262],
[257,279,270,273,273,0,271,234,268,283],
[281,276,266,282,289,279,0,237,312,262],
[287,295,283,285,289,316,313,0,313,266],
[271,231,255,243,250,282,238,237,0,265],
[283,278,287,270,288,267,288,284,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,265,273,287,286,288,277,287,286],
[250,0,267,273,264,283,257,260,269,270],
[285,283,0,276,283,305,279,273,274,283],
[277,277,274,0,281,279,270,280,273,290],
[263,286,267,269,0,301,264,263,258,274],
[264,267,245,271,249,0,248,247,264,268],
[262,293,271,280,286,302,0,300,293,289],
[273,290,277,270,287,303,250,0,285,281],
[263,281,276,277,292,286,257,265,0,277],
[264,280,267,260,276,282,261,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,269,271,255,291,270,275,266,265],
[259,0,250,274,257,294,287,269,272,277],
[281,300,0,276,282,301,287,286,271,293],
[279,276,274,0,269,308,279,287,286,259],
[295,293,268,281,0,294,293,290,273,275],
[259,256,249,242,256,0,265,252,268,253],
[280,263,263,271,257,285,0,273,265,262],
[275,281,264,263,260,298,277,0,275,276],
[284,278,279,264,277,282,285,275,0,275],
[285,273,257,291,275,297,288,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,278,279,280,282,279,279,262],
[263,0,269,266,265,276,260,285,275,279],
[271,281,0,290,272,275,284,276,280,280],
[272,284,260,0,279,273,257,262,271,272],
[271,285,278,271,0,280,275,260,270,270],
[270,274,275,277,270,0,268,269,286,269],
[268,290,266,293,275,282,0,280,286,282],
[271,265,274,288,290,281,270,0,271,274],
[271,275,270,279,280,264,264,279,0,273],
[288,271,270,278,280,281,268,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,258,284,259,281,267,279,269,303],
[276,0,235,260,237,282,251,266,291,271],
[292,315,0,296,280,286,268,288,293,317],
[266,290,254,0,279,286,299,260,279,300],
[291,313,270,271,0,283,263,275,288,310],
[269,268,264,264,267,0,273,269,272,295],
[283,299,282,251,287,277,0,284,304,295],
[271,284,262,290,275,281,266,0,288,290],
[281,259,257,271,262,278,246,262,0,283],
[247,279,233,250,240,255,255,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,288,286,293,288,289,278,296],
[271,0,282,288,285,274,295,290,274,285],
[284,268,0,277,283,271,302,297,270,301],
[262,262,273,0,273,272,272,273,279,291],
[264,265,267,277,0,277,270,286,278,296],
[257,276,279,278,273,0,273,278,279,287],
[262,255,248,278,280,277,0,278,278,279],
[261,260,253,277,264,272,272,0,253,289],
[272,276,280,271,272,271,272,297,0,292],
[254,265,249,259,254,263,271,261,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,265,282,267,287,259,274,256],
[282,0,288,298,282,289,286,275,287,279],
[270,262,0,257,266,267,274,253,259,254],
[285,252,293,0,284,285,290,262,268,262],
[268,268,284,266,0,268,276,254,262,254],
[283,261,283,265,282,0,293,259,277,260],
[263,264,276,260,274,257,0,266,265,243],
[291,275,297,288,296,291,284,0,280,287],
[276,263,291,282,288,273,285,270,0,267],
[294,271,296,288,296,290,307,263,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,264,224,249,258,275,257,253,274],
[305,0,288,265,288,272,289,257,302,290],
[286,262,0,259,264,271,288,294,267,306],
[326,285,291,0,272,279,315,315,299,344],
[301,262,286,278,0,267,272,274,291,316],
[292,278,279,271,283,0,280,282,279,321],
[275,261,262,235,278,270,0,251,277,298],
[293,293,256,235,276,268,299,0,259,308],
[297,248,283,251,259,271,273,291,0,314],
[276,260,244,206,234,229,252,242,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,266,284,268,270,287,274,276],
[277,0,286,280,272,282,260,288,274,260],
[271,264,0,268,274,257,252,291,263,266],
[284,270,282,0,269,256,259,285,263,268],
[266,278,276,281,0,259,276,274,265,267],
[282,268,293,294,291,0,251,299,279,265],
[280,290,298,291,274,299,0,284,289,292],
[263,262,259,265,276,251,266,0,260,269],
[276,276,287,287,285,271,261,290,0,268],
[274,290,284,282,283,285,258,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,285,266,292,275,294,278,301,286],
[242,0,274,260,283,260,258,267,272,250],
[265,276,0,262,293,269,277,268,300,255],
[284,290,288,0,305,280,284,282,316,272],
[258,267,257,245,0,258,275,272,285,256],
[275,290,281,270,292,0,272,277,292,272],
[256,292,273,266,275,278,0,287,292,269],
[272,283,282,268,278,273,263,0,288,274],
[249,278,250,234,265,258,258,262,0,253],
[264,300,295,278,294,278,281,276,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,238,259,290,270,249,267,226,270],
[320,0,300,293,315,300,311,287,254,281],
[312,250,0,259,292,278,264,277,282,293],
[291,257,291,0,297,272,288,231,251,261],
[260,235,258,253,0,254,264,260,235,266],
[280,250,272,278,296,0,295,287,268,295],
[301,239,286,262,286,255,0,259,274,281],
[283,263,273,319,290,263,291,0,237,301],
[324,296,268,299,315,282,276,313,0,312],
[280,269,257,289,284,255,269,249,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,267,281,299,266,306,315,273],
[271,0,272,279,260,276,253,266,299,272],
[289,278,0,288,288,317,252,294,318,282],
[283,271,262,0,266,295,263,291,301,270],
[269,290,262,284,0,316,262,278,309,261],
[251,274,233,255,234,0,222,237,262,250],
[284,297,298,287,288,328,0,318,343,266],
[244,284,256,259,272,313,232,0,290,288],
[235,251,232,249,241,288,207,260,0,247],
[277,278,268,280,289,300,284,262,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,243,250,291,279,276,276,292,281],
[308,0,240,259,250,338,290,303,288,240],
[307,310,0,246,251,342,273,304,281,287],
[300,291,304,0,309,330,311,271,270,264],
[259,300,299,241,0,355,299,299,314,287],
[271,212,208,220,195,0,227,239,255,216],
[274,260,277,239,251,323,0,290,295,239],
[274,247,246,279,251,311,260,0,260,281],
[258,262,269,280,236,295,255,290,0,246],
[269,310,263,286,263,334,311,269,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,274,275,255,276,269,270,266],
[284,0,287,280,291,278,288,275,286,268],
[294,263,0,278,280,266,275,242,259,280],
[276,270,272,0,280,289,293,285,267,283],
[275,259,270,270,0,268,265,270,280,284],
[295,272,284,261,282,0,270,275,274,295],
[274,262,275,257,285,280,0,280,279,273],
[281,275,308,265,280,275,270,0,277,284],
[280,264,291,283,270,276,271,273,0,275],
[284,282,270,267,266,255,277,266,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,270,269,272,258,292,228,314,314],
[268,0,269,262,253,241,271,264,280,257],
[280,281,0,274,235,247,255,248,281,277],
[281,288,276,0,250,255,272,254,266,282],
[278,297,315,300,0,268,290,305,294,280],
[292,309,303,295,282,0,312,266,323,303],
[258,279,295,278,260,238,0,254,286,268],
[322,286,302,296,245,284,296,0,288,295],
[236,270,269,284,256,227,264,262,0,252],
[236,293,273,268,270,247,282,255,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,295,280,291,276,269,282,288],
[275,0,290,287,280,291,276,285,275,284],
[273,260,0,280,276,293,260,273,272,264],
[255,263,270,0,270,272,257,256,275,271],
[270,270,274,280,0,274,251,271,277,282],
[259,259,257,278,276,0,271,255,268,258],
[274,274,290,293,299,279,0,294,293,286],
[281,265,277,294,279,295,256,0,262,289],
[268,275,278,275,273,282,257,288,0,280],
[262,266,286,279,268,292,264,261,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,276,267,288,306,257,267,270],
[268,0,278,277,276,281,283,252,266,268],
[267,272,0,278,281,291,278,278,271,289],
[274,273,272,0,275,269,281,262,275,283],
[283,274,269,275,0,300,280,261,282,274],
[262,269,259,281,250,0,265,250,265,277],
[244,267,272,269,270,285,0,253,258,273],
[293,298,272,288,289,300,297,0,279,280],
[283,284,279,275,268,285,292,271,0,283],
[280,282,261,267,276,273,277,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,333,281,304,294,280,290,294,267],
[268,0,329,272,282,295,290,282,326,275],
[217,221,0,226,241,234,283,239,263,226],
[269,278,324,0,281,290,258,259,251,274],
[246,268,309,269,0,260,291,246,288,255],
[256,255,316,260,290,0,275,255,285,255],
[270,260,267,292,259,275,0,261,282,277],
[260,268,311,291,304,295,289,0,309,280],
[256,224,287,299,262,265,268,241,0,264],
[283,275,324,276,295,295,273,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,370,302,309,278,299,273,242,314],
[259,0,318,256,284,265,262,249,239,288],
[180,232,0,249,258,196,239,180,231,204],
[248,294,301,0,245,267,258,243,248,268],
[241,266,292,305,0,299,301,255,265,260],
[272,285,354,283,251,0,251,270,287,293],
[251,288,311,292,249,299,0,236,235,278],
[277,301,370,307,295,280,314,0,254,301],
[308,311,319,302,285,263,315,296,0,317],
[236,262,346,282,290,257,272,249,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,303,279,283,282,286,264,274],
[283,0,273,298,305,301,301,285,282,291],
[270,277,0,309,278,290,285,295,268,288],
[247,252,241,0,260,268,272,248,241,269],
[271,245,272,290,0,265,289,274,261,262],
[267,249,260,282,285,0,282,271,268,268],
[268,249,265,278,261,268,0,271,258,263],
[264,265,255,302,276,279,279,0,255,260],
[286,268,282,309,289,282,292,295,0,275],
[276,259,262,281,288,282,287,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,286,276,300,281,334,251,308,306],
[247,0,258,260,266,272,293,264,271,289],
[264,292,0,278,309,317,291,285,312,304],
[274,290,272,0,293,283,311,242,297,292],
[250,284,241,257,0,293,343,251,288,278],
[269,278,233,267,257,0,294,285,281,237],
[216,257,259,239,207,256,0,233,246,239],
[299,286,265,308,299,265,317,0,290,313],
[242,279,238,253,262,269,304,260,0,259],
[244,261,246,258,272,313,311,237,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,264,284,278,274,267,310,272,271],
[256,0,259,265,266,257,264,285,256,271],
[286,291,0,269,282,274,283,294,266,260],
[266,285,281,0,259,264,273,287,270,275],
[272,284,268,291,0,274,269,297,273,272],
[276,293,276,286,276,0,285,315,269,285],
[283,286,267,277,281,265,0,302,276,276],
[240,265,256,263,253,235,248,0,247,254],
[278,294,284,280,277,281,274,303,0,264],
[279,279,290,275,278,265,274,296,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,264,276,273,277,272,277,269],
[280,0,288,272,267,279,262,280,288,276],
[259,262,0,253,268,251,252,260,262,270],
[286,278,297,0,282,286,273,288,286,270],
[274,283,282,268,0,271,268,285,290,276],
[277,271,299,264,279,0,266,287,286,279],
[273,288,298,277,282,284,0,294,284,288],
[278,270,290,262,265,263,256,0,275,277],
[273,262,288,264,260,264,266,275,0,259],
[281,274,280,280,274,271,262,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,286,236,264,263,279,277,257],
[279,0,278,292,267,282,264,250,281,266],
[264,272,0,297,270,280,274,255,271,243],
[264,258,253,0,257,258,234,244,229,244],
[314,283,280,293,0,306,274,305,301,269],
[286,268,270,292,244,0,248,270,276,279],
[287,286,276,316,276,302,0,266,270,290],
[271,300,295,306,245,280,284,0,302,285],
[273,269,279,321,249,274,280,248,0,265],
[293,284,307,306,281,271,260,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,419,342,232,370,368,229,322,277,433],
[131,0,272,301,130,356,202,246,102,287],
[208,278,0,148,131,370,256,153,227,292],
[318,249,402,0,231,379,223,313,185,382],
[180,420,419,319,0,489,266,287,300,337],
[182,194,180,171,61,0,94,58,74,249],
[321,348,294,327,284,456,0,326,363,233],
[228,304,397,237,263,492,224,0,227,351],
[273,448,323,365,250,476,187,323,0,370],
[117,263,258,168,213,301,317,199,180,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,280,319,278,258,273,286,237],
[277,0,277,302,312,283,272,253,292,248],
[271,273,0,303,303,280,278,288,292,250],
[270,248,247,0,288,306,281,287,294,260],
[231,238,247,262,0,250,224,258,280,216],
[272,267,270,244,300,0,239,271,280,268],
[292,278,272,269,326,311,0,280,293,276],
[277,297,262,263,292,279,270,0,295,269],
[264,258,258,256,270,270,257,255,0,265],
[313,302,300,290,334,282,274,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,263,265,247,305,266,297,293,297],
[290,0,290,291,294,288,289,273,298,301],
[287,260,0,268,283,299,269,275,317,297],
[285,259,282,0,266,320,290,269,317,299],
[303,256,267,284,0,284,270,285,290,285],
[245,262,251,230,266,0,261,229,284,279],
[284,261,281,260,280,289,0,257,300,304],
[253,277,275,281,265,321,293,0,316,299],
[257,252,233,233,260,266,250,234,0,269],
[253,249,253,251,265,271,246,251,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,281,270,286,267,282,281,262,256],
[250,0,275,273,266,260,234,243,244,243],
[269,275,0,272,286,279,269,278,254,267],
[280,277,278,0,287,294,278,289,279,270],
[264,284,264,263,0,267,263,251,247,246],
[283,290,271,256,283,0,274,282,270,269],
[268,316,281,272,287,276,0,270,252,269],
[269,307,272,261,299,268,280,0,260,273],
[288,306,296,271,303,280,298,290,0,285],
[294,307,283,280,304,281,281,277,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,278,300,293,277,279,269,296],
[251,0,278,255,286,262,263,257,258,240],
[278,272,0,256,302,275,280,257,269,277],
[272,295,294,0,289,263,273,269,277,283],
[250,264,248,261,0,256,245,241,238,261],
[257,288,275,287,294,0,259,268,267,264],
[273,287,270,277,305,291,0,265,280,270],
[271,293,293,281,309,282,285,0,256,272],
[281,292,281,273,312,283,270,294,0,295],
[254,310,273,267,289,286,280,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,283,261,275,260,281,277,280],
[269,0,289,289,278,284,269,263,274,287],
[277,261,0,267,258,280,266,264,276,265],
[267,261,283,0,273,277,274,254,258,270],
[289,272,292,277,0,280,260,267,282,260],
[275,266,270,273,270,0,281,251,259,267],
[290,281,284,276,290,269,0,272,268,276],
[269,287,286,296,283,299,278,0,279,293],
[273,276,274,292,268,291,282,271,0,271],
[270,263,285,280,290,283,274,257,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,256,265,285,250,297,264,263],
[283,0,287,274,270,268,284,295,272,282],
[270,263,0,252,265,279,253,266,262,280],
[294,276,298,0,275,292,271,303,283,284],
[285,280,285,275,0,290,278,295,269,281],
[265,282,271,258,260,0,250,285,254,270],
[300,266,297,279,272,300,0,303,280,292],
[253,255,284,247,255,265,247,0,245,255],
[286,278,288,267,281,296,270,305,0,293],
[287,268,270,266,269,280,258,295,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,290,284,269,286,295,277,292,279],
[273,0,293,284,265,293,270,268,289,278],
[260,257,0,272,272,287,246,265,280,247],
[266,266,278,0,262,284,236,247,277,264],
[281,285,278,288,0,298,274,276,295,288],
[264,257,263,266,252,0,243,265,286,266],
[255,280,304,314,276,307,0,268,298,277],
[273,282,285,303,274,285,282,0,292,286],
[258,261,270,273,255,264,252,258,0,238],
[271,272,303,286,262,284,273,264,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,274,258,293,278,269,289,281],
[278,0,255,274,276,281,278,273,282,276],
[285,295,0,285,272,279,290,278,299,288],
[276,276,265,0,278,284,280,279,279,289],
[292,274,278,272,0,282,288,286,294,289],
[257,269,271,266,268,0,271,262,277,274],
[272,272,260,270,262,279,0,265,264,282],
[281,277,272,271,264,288,285,0,284,287],
[261,268,251,271,256,273,286,266,0,274],
[269,274,262,261,261,276,268,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,207,417,295,344,524,308,355,334],
[272,0,276,330,291,266,442,283,427,267],
[343,274,0,408,360,351,481,308,312,238],
[133,220,142,0,306,65,229,138,170,184],
[255,259,190,244,0,214,332,173,172,325],
[206,284,199,485,336,0,425,173,332,278],
[26,108,69,321,218,125,0,133,36,164],
[242,267,242,412,377,377,417,0,301,319],
[195,123,238,380,378,218,514,249,0,291],
[216,283,312,366,225,272,386,231,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,276,286,288,264,290,268,283],
[271,0,272,290,296,293,282,269,277,277],
[274,278,0,290,285,287,260,297,289,275],
[274,260,260,0,276,278,253,256,277,268],
[264,254,265,274,0,274,236,236,270,247],
[262,257,263,272,276,0,255,245,261,267],
[286,268,290,297,314,295,0,270,289,292],
[260,281,253,294,314,305,280,0,285,294],
[282,273,261,273,280,289,261,265,0,265],
[267,273,275,282,303,283,258,256,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,265,275,279,278,271,260,264,279],
[285,0,283,285,276,285,303,294,273,284],
[285,267,0,279,286,274,283,283,277,294],
[275,265,271,0,276,276,283,260,283,275],
[271,274,264,274,0,255,284,262,257,284],
[272,265,276,274,295,0,291,282,285,289],
[279,247,267,267,266,259,0,268,266,299],
[290,256,267,290,288,268,282,0,265,279],
[286,277,273,267,293,265,284,285,0,297],
[271,266,256,275,266,261,251,271,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,246,241,274,264,255,264,250,252],
[297,0,267,273,283,265,257,278,266,245],
[304,283,0,288,303,257,268,280,279,259],
[309,277,262,0,280,280,269,315,291,275],
[276,267,247,270,0,257,243,277,270,252],
[286,285,293,270,293,0,276,300,289,268],
[295,293,282,281,307,274,0,295,273,254],
[286,272,270,235,273,250,255,0,261,264],
[300,284,271,259,280,261,277,289,0,266],
[298,305,291,275,298,282,296,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,336,323,355,216,284,220,283,258],
[236,0,290,265,290,152,171,156,231,263],
[214,260,0,288,303,178,243,165,248,300],
[227,285,262,0,240,220,217,193,251,255],
[195,260,247,310,0,185,197,216,169,332],
[334,398,372,330,365,0,226,246,254,353],
[266,379,307,333,353,324,0,276,337,368],
[330,394,385,357,334,304,274,0,267,269],
[267,319,302,299,381,296,213,283,0,328],
[292,287,250,295,218,197,182,281,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,267,269,261,246,246,278,290,313],
[293,0,346,309,272,287,323,302,288,300],
[283,204,0,240,242,246,255,256,238,264],
[281,241,310,0,282,248,276,290,235,293],
[289,278,308,268,0,276,281,278,270,309],
[304,263,304,302,274,0,254,262,274,299],
[304,227,295,274,269,296,0,294,241,278],
[272,248,294,260,272,288,256,0,255,301],
[260,262,312,315,280,276,309,295,0,291],
[237,250,286,257,241,251,272,249,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,286,228,257,290,257,275,262,227],
[283,0,311,295,267,277,264,286,259,254],
[264,239,0,259,242,276,265,279,246,240],
[322,255,291,0,255,318,281,314,285,258],
[293,283,308,295,0,299,283,314,258,261],
[260,273,274,232,251,0,240,275,246,236],
[293,286,285,269,267,310,0,316,247,245],
[275,264,271,236,236,275,234,0,225,232],
[288,291,304,265,292,304,303,325,0,299],
[323,296,310,292,289,314,305,318,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,311,328,283,296,347,308,298,251],
[277,0,325,311,317,261,329,306,292,283],
[239,225,0,278,314,270,350,291,260,261],
[222,239,272,0,303,233,295,234,313,271],
[267,233,236,247,0,303,287,278,318,294],
[254,289,280,317,247,0,320,250,317,269],
[203,221,200,255,263,230,0,209,248,195],
[242,244,259,316,272,300,341,0,291,292],
[252,258,290,237,232,233,302,259,0,252],
[299,267,289,279,256,281,355,258,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,283,281,277,290,307,258,270],
[273,0,258,302,280,295,290,287,252,272],
[270,292,0,315,283,285,291,298,273,264],
[267,248,235,0,245,256,270,272,248,257],
[269,270,267,305,0,296,290,299,287,287],
[273,255,265,294,254,0,266,287,241,249],
[260,260,259,280,260,284,0,280,261,246],
[243,263,252,278,251,263,270,0,257,250],
[292,298,277,302,263,309,289,293,0,268],
[280,278,286,293,263,301,304,300,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,273,276,281,263,279,273,272,271],
[293,0,256,305,306,294,278,321,275,290],
[277,294,0,294,274,272,274,305,263,255],
[274,245,256,0,259,247,265,279,265,252],
[269,244,276,291,0,256,278,298,280,274],
[287,256,278,303,294,0,245,288,276,261],
[271,272,276,285,272,305,0,316,273,276],
[277,229,245,271,252,262,234,0,242,256],
[278,275,287,285,270,274,277,308,0,265],
[279,260,295,298,276,289,274,294,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,319,296,296,314,367,294,273,332],
[246,0,238,287,271,251,315,220,190,286],
[231,312,0,263,282,314,289,292,258,304],
[254,263,287,0,299,307,299,263,259,300],
[254,279,268,251,0,259,323,232,218,299],
[236,299,236,243,291,0,281,250,242,258],
[183,235,261,251,227,269,0,224,224,259],
[256,330,258,287,318,300,326,0,292,338],
[277,360,292,291,332,308,326,258,0,322],
[218,264,246,250,251,292,291,212,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,256,250,267,267,277,271,276,257],
[286,0,267,275,271,286,259,290,283,269],
[294,283,0,286,260,279,270,287,278,275],
[300,275,264,0,279,286,266,284,282,265],
[283,279,290,271,0,287,263,299,283,269],
[283,264,271,264,263,0,268,303,272,265],
[273,291,280,284,287,282,0,291,299,285],
[279,260,263,266,251,247,259,0,271,254],
[274,267,272,268,267,278,251,279,0,269],
[293,281,275,285,281,285,265,296,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,173,303,206,226,321,248,258,300,321],
[377,0,280,273,279,330,333,274,327,272],
[247,270,0,241,180,353,285,263,295,299],
[344,277,309,0,231,319,260,380,393,297],
[324,271,370,319,0,393,288,339,334,289],
[229,220,197,231,157,0,228,264,286,266],
[302,217,265,290,262,322,0,352,386,262],
[292,276,287,170,211,286,198,0,277,267],
[250,223,255,157,216,264,164,273,0,224],
[229,278,251,253,261,284,288,283,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,279,265,287,267,294,284,265,286],
[291,0,269,263,286,291,298,291,281,309],
[271,281,0,256,294,292,263,295,268,287],
[285,287,294,0,299,300,289,294,271,325],
[263,264,256,251,0,295,269,285,262,283],
[283,259,258,250,255,0,271,281,278,305],
[256,252,287,261,281,279,0,263,267,304],
[266,259,255,256,265,269,287,0,259,282],
[285,269,282,279,288,272,283,291,0,279],
[264,241,263,225,267,245,246,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,290,247,287,269,279,253,252,292],
[234,0,213,223,236,225,273,195,242,238],
[260,337,0,264,299,261,285,232,266,306],
[303,327,286,0,294,243,288,280,283,292],
[263,314,251,256,0,289,302,221,255,263],
[281,325,289,307,261,0,310,248,280,305],
[271,277,265,262,248,240,0,241,243,261],
[297,355,318,270,329,302,309,0,270,292],
[298,308,284,267,295,270,307,280,0,287],
[258,312,244,258,287,245,289,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,298,244,252,251,305,260,262,284],
[309,0,290,283,246,277,289,288,267,285],
[252,260,0,273,219,260,284,249,271,297],
[306,267,277,0,287,285,286,264,284,298],
[298,304,331,263,0,295,293,281,315,295],
[299,273,290,265,255,0,300,281,267,296],
[245,261,266,264,257,250,0,271,265,273],
[290,262,301,286,269,269,279,0,282,312],
[288,283,279,266,235,283,285,268,0,297],
[266,265,253,252,255,254,277,238,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,307,299,289,285,306,290,284,291],
[275,0,281,294,308,272,303,273,290,290],
[243,269,0,256,258,253,270,247,271,246],
[251,256,294,0,271,251,287,251,275,260],
[261,242,292,279,0,254,288,243,288,264],
[265,278,297,299,296,0,317,282,283,301],
[244,247,280,263,262,233,0,250,256,250],
[260,277,303,299,307,268,300,0,291,298],
[266,260,279,275,262,267,294,259,0,284],
[259,260,304,290,286,249,300,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,279,267,283,286,274,274,265],
[265,0,272,262,263,267,268,266,266,284],
[268,278,0,282,251,275,285,274,273,278],
[271,288,268,0,253,269,278,280,271,273],
[283,287,299,297,0,271,286,289,305,299],
[267,283,275,281,279,0,288,283,286,279],
[264,282,265,272,264,262,0,273,274,285],
[276,284,276,270,261,267,277,0,292,279],
[276,284,277,279,245,264,276,258,0,285],
[285,266,272,277,251,271,265,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,284,282,284,260,265,284,297,266],
[231,0,279,265,267,241,241,250,270,255],
[266,271,0,263,252,267,263,248,267,251],
[268,285,287,0,297,261,267,285,308,263],
[266,283,298,253,0,252,275,247,276,262],
[290,309,283,289,298,0,283,275,292,265],
[285,309,287,283,275,267,0,269,295,264],
[266,300,302,265,303,275,281,0,278,285],
[253,280,283,242,274,258,255,272,0,257],
[284,295,299,287,288,285,286,265,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,262,248,236,248,266,267,257],
[269,0,282,273,294,280,252,281,289,291],
[291,268,0,282,272,279,263,266,286,271],
[288,277,268,0,274,271,251,289,259,286],
[302,256,278,276,0,250,242,298,274,252],
[314,270,271,279,300,0,246,269,266,244],
[302,298,287,299,308,304,0,288,286,265],
[284,269,284,261,252,281,262,0,290,275],
[283,261,264,291,276,284,264,260,0,252],
[293,259,279,264,298,306,285,275,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,280,273,280,265,283,275,284,270],
[293,0,286,291,277,283,282,289,292,266],
[270,264,0,269,273,268,283,268,288,264],
[277,259,281,0,277,269,305,265,304,260],
[270,273,277,273,0,273,284,285,280,263],
[285,267,282,281,277,0,291,295,287,289],
[267,268,267,245,266,259,0,275,279,262],
[275,261,282,285,265,255,275,0,283,259],
[266,258,262,246,270,263,271,267,0,277],
[280,284,286,290,287,261,288,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,255,265,245,257,228,250,271,246],
[262,0,243,244,240,246,245,239,260,270],
[295,307,0,274,258,283,278,281,276,265],
[285,306,276,0,261,278,247,275,287,273],
[305,310,292,289,0,275,273,284,274,276],
[293,304,267,272,275,0,281,260,286,280],
[322,305,272,303,277,269,0,283,270,280],
[300,311,269,275,266,290,267,0,274,272],
[279,290,274,263,276,264,280,276,0,279],
[304,280,285,277,274,270,270,278,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,254,276,273,282,265,273,299,293],
[276,0,268,269,271,271,265,265,280,276],
[296,282,0,268,281,275,267,272,289,310],
[274,281,282,0,270,275,270,276,299,294],
[277,279,269,280,0,274,279,273,279,275],
[268,279,275,275,276,0,261,266,272,286],
[285,285,283,280,271,289,0,275,281,283],
[277,285,278,274,277,284,275,0,287,285],
[251,270,261,251,271,278,269,263,0,262],
[257,274,240,256,275,264,267,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,313,308,293,308,299,284,268,308],
[263,0,300,299,272,282,280,267,275,265],
[237,250,0,277,259,266,263,254,265,262],
[242,251,273,0,258,268,249,264,267,279],
[257,278,291,292,0,270,259,274,259,269],
[242,268,284,282,280,0,267,266,271,273],
[251,270,287,301,291,283,0,285,283,283],
[266,283,296,286,276,284,265,0,257,291],
[282,275,285,283,291,279,267,293,0,297],
[242,285,288,271,281,277,267,259,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,270,253,268,274,283,270,280],
[275,0,255,278,259,271,277,258,251,269],
[297,295,0,274,272,280,301,293,293,273],
[280,272,276,0,260,274,283,295,286,282],
[297,291,278,290,0,288,307,275,300,287],
[282,279,270,276,262,0,295,275,263,262],
[276,273,249,267,243,255,0,262,259,254],
[267,292,257,255,275,275,288,0,273,262],
[280,299,257,264,250,287,291,277,0,282],
[270,281,277,268,263,288,296,288,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,288,304,290,284,286,267,273],
[274,0,283,277,325,271,284,279,256,291],
[272,267,0,278,306,317,285,306,287,287],
[262,273,272,0,302,293,271,277,280,274],
[246,225,244,248,0,279,233,236,241,253],
[260,279,233,257,271,0,282,273,252,268],
[266,266,265,279,317,268,0,279,290,305],
[264,271,244,273,314,277,271,0,293,273],
[283,294,263,270,309,298,260,257,0,256],
[277,259,263,276,297,282,245,277,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,281,266,273,274,270,293,301],
[274,0,275,298,284,291,286,298,257,296],
[272,275,0,278,268,241,288,262,282,272],
[269,252,272,0,265,264,269,270,270,283],
[284,266,282,285,0,303,282,273,268,296],
[277,259,309,286,247,0,268,286,265,289],
[276,264,262,281,268,282,0,288,264,283],
[280,252,288,280,277,264,262,0,264,299],
[257,293,268,280,282,285,286,286,0,283],
[249,254,278,267,254,261,267,251,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,297,226,279,266,293,282,261,279],
[267,0,281,263,257,285,301,288,255,263],
[253,269,0,219,267,267,255,276,239,237],
[324,287,331,0,309,332,309,302,251,293],
[271,293,283,241,0,290,309,286,273,268],
[284,265,283,218,260,0,277,278,237,274],
[257,249,295,241,241,273,0,258,264,262],
[268,262,274,248,264,272,292,0,242,263],
[289,295,311,299,277,313,286,308,0,272],
[271,287,313,257,282,276,288,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,293,267,266,282,275,297,299,295],
[299,0,342,245,304,292,256,318,292,304],
[257,208,0,249,271,254,224,261,261,290],
[283,305,301,0,303,283,244,289,309,362],
[284,246,279,247,0,274,259,275,282,322],
[268,258,296,267,276,0,257,296,280,296],
[275,294,326,306,291,293,0,309,309,314],
[253,232,289,261,275,254,241,0,285,308],
[251,258,289,241,268,270,241,265,0,287],
[255,246,260,188,228,254,236,242,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,254,276,258,268,281,266,278,255],
[300,0,281,271,294,289,280,289,312,297],
[296,269,0,271,255,286,269,284,284,297],
[274,279,279,0,280,277,269,259,258,286],
[292,256,295,270,0,282,292,281,287,299],
[282,261,264,273,268,0,273,263,270,278],
[269,270,281,281,258,277,0,287,291,302],
[284,261,266,291,269,287,263,0,294,278],
[272,238,266,292,263,280,259,256,0,271],
[295,253,253,264,251,272,248,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,257,266,281,272,293,260,259,278],
[285,0,302,268,298,320,332,298,293,272],
[293,248,0,275,264,293,289,263,263,248],
[284,282,275,0,287,282,316,268,261,261],
[269,252,286,263,0,258,311,276,275,274],
[278,230,257,268,292,0,321,269,258,283],
[257,218,261,234,239,229,0,213,234,254],
[290,252,287,282,274,281,337,0,292,289],
[291,257,287,289,275,292,316,258,0,281],
[272,278,302,289,276,267,296,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,280,286,280,298,262,284,284,293],
[250,0,269,288,263,283,278,282,276,288],
[270,281,0,294,289,293,280,290,277,302],
[264,262,256,0,265,276,266,264,265,275],
[270,287,261,285,0,294,266,278,265,286],
[252,267,257,274,256,0,255,262,248,268],
[288,272,270,284,284,295,0,280,283,296],
[266,268,260,286,272,288,270,0,260,278],
[266,274,273,285,285,302,267,290,0,295],
[257,262,248,275,264,282,254,272,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,264,281,268,287,288,280,289],
[267,0,280,271,269,273,285,285,287,280],
[268,270,0,274,263,272,281,262,255,263],
[286,279,276,0,271,274,278,287,281,263],
[269,281,287,279,0,282,286,286,271,284],
[282,277,278,276,268,0,274,283,290,276],
[263,265,269,272,264,276,0,276,286,273],
[262,265,288,263,264,267,274,0,267,264],
[270,263,295,269,279,260,264,283,0,269],
[261,270,287,287,266,274,277,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,277,282,298,296,273,290,291,286],
[255,0,261,271,289,269,266,282,303,254],
[273,289,0,289,306,288,267,304,294,276],
[268,279,261,0,296,262,264,290,294,292],
[252,261,244,254,0,269,253,269,271,269],
[254,281,262,288,281,0,255,272,293,261],
[277,284,283,286,297,295,0,289,316,270],
[260,268,246,260,281,278,261,0,299,276],
[259,247,256,256,279,257,234,251,0,262],
[264,296,274,258,281,289,280,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,272,270,268,298,249,291,255],
[288,0,320,295,280,274,292,278,287,259],
[267,230,0,266,265,260,278,266,277,256],
[278,255,284,0,265,265,291,276,278,240],
[280,270,285,285,0,246,276,258,273,257],
[282,276,290,285,304,0,267,262,272,278],
[252,258,272,259,274,283,0,269,284,264],
[301,272,284,274,292,288,281,0,294,279],
[259,263,273,272,277,278,266,256,0,253],
[295,291,294,310,293,272,286,271,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,297,248,278,252,280,267,280],
[275,0,271,296,277,279,282,267,286,280],
[274,279,0,295,263,289,257,280,277,286],
[253,254,255,0,230,255,241,264,232,268],
[302,273,287,320,0,291,295,281,270,291],
[272,271,261,295,259,0,256,265,255,266],
[298,268,293,309,255,294,0,281,246,294],
[270,283,270,286,269,285,269,0,267,279],
[283,264,273,318,280,295,304,283,0,292],
[270,270,264,282,259,284,256,271,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,208,187,132,194,302,189,250,171],
[333,0,246,266,254,200,312,252,343,285],
[342,304,0,225,335,341,265,249,285,309],
[363,284,325,0,224,336,359,296,356,370],
[418,296,215,326,0,299,292,300,308,327],
[356,350,209,214,251,0,254,304,305,251],
[248,238,285,191,258,296,0,280,340,252],
[361,298,301,254,250,246,270,0,254,273],
[300,207,265,194,242,245,210,296,0,239],
[379,265,241,180,223,299,298,277,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,246,263,271,268,266,242,243,270],
[275,0,271,257,262,287,266,277,272,250],
[304,279,0,267,264,270,285,259,290,283],
[287,293,283,0,271,305,302,290,287,283],
[279,288,286,279,0,286,271,283,282,274],
[282,263,280,245,264,0,287,270,262,282],
[284,284,265,248,279,263,0,267,261,285],
[308,273,291,260,267,280,283,0,264,271],
[307,278,260,263,268,288,289,286,0,283],
[280,300,267,267,276,268,265,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,276,270,281,286,286,287,284],
[278,0,267,268,264,260,278,265,266,267],
[284,283,0,265,272,276,280,279,279,288],
[274,282,285,0,270,268,290,285,259,276],
[280,286,278,280,0,292,290,282,275,270],
[269,290,274,282,258,0,280,284,263,284],
[264,272,270,260,260,270,0,280,252,270],
[264,285,271,265,268,266,270,0,257,274],
[263,284,271,291,275,287,298,293,0,273],
[266,283,262,274,280,266,280,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,283,270,285,265,276,269,268,254],
[290,0,291,281,293,266,281,282,288,294],
[267,259,0,271,286,252,262,264,268,279],
[280,269,279,0,287,276,283,281,274,264],
[265,257,264,263,0,253,259,260,256,263],
[285,284,298,274,297,0,292,285,291,283],
[274,269,288,267,291,258,0,273,272,270],
[281,268,286,269,290,265,277,0,289,266],
[282,262,282,276,294,259,278,261,0,253],
[296,256,271,286,287,267,280,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,290,268,279,279,287,262,284],
[275,0,245,267,267,272,285,291,256,260],
[286,305,0,304,276,299,332,305,281,269],
[260,283,246,0,266,245,282,289,271,274],
[282,283,274,284,0,276,290,292,289,287],
[271,278,251,305,274,0,296,280,280,287],
[271,265,218,268,260,254,0,288,266,277],
[263,259,245,261,258,270,262,0,261,270],
[288,294,269,279,261,270,284,289,0,279],
[266,290,281,276,263,263,273,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,285,259,292,279,294,285,283,289],
[290,0,282,275,291,288,305,302,274,302],
[265,268,0,258,274,285,283,280,275,276],
[291,275,292,0,297,295,298,284,282,289],
[258,259,276,253,0,267,296,270,265,269],
[271,262,265,255,283,0,294,284,268,288],
[256,245,267,252,254,256,0,274,250,263],
[265,248,270,266,280,266,276,0,267,271],
[267,276,275,268,285,282,300,283,0,286],
[261,248,274,261,281,262,287,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,254,291,247,235,275,266,269,310],
[260,0,239,273,220,265,306,307,298,300],
[296,311,0,318,284,261,301,369,310,326],
[259,277,232,0,206,228,268,259,275,303],
[303,330,266,344,0,279,305,289,328,298],
[315,285,289,322,271,0,312,317,304,291],
[275,244,249,282,245,238,0,295,324,307],
[284,243,181,291,261,233,255,0,281,228],
[281,252,240,275,222,246,226,269,0,267],
[240,250,224,247,252,259,243,322,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,253,269,300,260,273,274,260],
[272,0,263,278,279,288,276,277,280,253],
[260,287,0,283,264,280,256,270,281,253],
[297,272,267,0,267,295,272,283,279,274],
[281,271,286,283,0,284,269,270,274,274],
[250,262,270,255,266,0,263,260,272,270],
[290,274,294,278,281,287,0,289,282,286],
[277,273,280,267,280,290,261,0,282,264],
[276,270,269,271,276,278,268,268,0,274],
[290,297,297,276,276,280,264,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,269,273,257,279,260,251,276,252],
[285,0,277,267,264,302,298,275,274,301],
[281,273,0,260,259,291,290,268,261,264],
[277,283,290,0,275,295,303,267,284,280],
[293,286,291,275,0,291,300,285,274,296],
[271,248,259,255,259,0,284,241,267,246],
[290,252,260,247,250,266,0,261,271,265],
[299,275,282,283,265,309,289,0,294,270],
[274,276,289,266,276,283,279,256,0,261],
[298,249,286,270,254,304,285,280,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,265,286,279,299,284,305,365],
[276,0,296,324,349,319,273,307,331,336],
[279,254,0,264,291,289,305,252,260,361],
[285,226,286,0,324,315,301,284,285,329],
[264,201,259,226,0,275,236,229,247,277],
[271,231,261,235,275,0,234,278,243,307],
[251,277,245,249,314,316,0,274,229,321],
[266,243,298,266,321,272,276,0,256,286],
[245,219,290,265,303,307,321,294,0,329],
[185,214,189,221,273,243,229,264,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,257,264,263,238,268,278,246,249],
[286,0,268,264,248,258,257,268,268,264],
[293,282,0,262,263,270,270,278,262,294],
[286,286,288,0,278,257,270,282,284,278],
[287,302,287,272,0,265,292,281,275,281],
[312,292,280,293,285,0,276,279,266,278],
[282,293,280,280,258,274,0,281,265,274],
[272,282,272,268,269,271,269,0,266,268],
[304,282,288,266,275,284,285,284,0,278],
[301,286,256,272,269,272,276,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,257,235,257,257,269,249,246],
[283,0,262,277,266,266,279,275,277,289],
[289,288,0,271,262,274,281,294,276,299],
[293,273,279,0,271,272,257,260,272,275],
[315,284,288,279,0,272,293,283,295,297],
[293,284,276,278,278,0,271,276,271,286],
[293,271,269,293,257,279,0,293,268,292],
[281,275,256,290,267,274,257,0,282,280],
[301,273,274,278,255,279,282,268,0,282],
[304,261,251,275,253,264,258,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,278,282,278,276,298,264,285],
[267,0,283,266,288,251,264,305,239,266],
[258,267,0,249,266,268,295,258,257,274],
[272,284,301,0,289,252,273,291,266,292],
[268,262,284,261,0,245,250,280,260,276],
[272,299,282,298,305,0,285,285,277,296],
[274,286,255,277,300,265,0,293,246,281],
[252,245,292,259,270,265,257,0,250,279],
[286,311,293,284,290,273,304,300,0,281],
[265,284,276,258,274,254,269,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,205,262,248,281,287,251,259,279],
[337,0,256,268,325,268,292,224,310,302],
[345,294,0,260,285,288,281,283,314,312],
[288,282,290,0,246,271,283,245,276,302],
[302,225,265,304,0,293,317,300,278,274],
[269,282,262,279,257,0,316,268,267,288],
[263,258,269,267,233,234,0,262,283,319],
[299,326,267,305,250,282,288,0,277,271],
[291,240,236,274,272,283,267,273,0,278],
[271,248,238,248,276,262,231,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,291,241,241,241,289,296,316],
[277,0,304,288,289,247,293,307,289,280],
[286,246,0,318,294,281,219,270,249,299],
[259,262,232,0,225,242,241,274,264,304],
[309,261,256,325,0,280,289,298,305,318],
[309,303,269,308,270,0,277,245,272,305],
[309,257,331,309,261,273,0,266,297,325],
[261,243,280,276,252,305,284,0,298,288],
[254,261,301,286,245,278,253,252,0,309],
[234,270,251,246,232,245,225,262,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,320,303,289,299,297,308,255,280],
[208,0,294,246,229,268,276,232,211,251],
[230,256,0,258,249,289,269,252,247,262],
[247,304,292,0,245,304,310,304,226,295],
[261,321,301,305,0,324,352,307,285,285],
[251,282,261,246,226,0,238,272,241,260],
[253,274,281,240,198,312,0,263,237,199],
[242,318,298,246,243,278,287,0,261,266],
[295,339,303,324,265,309,313,289,0,284],
[270,299,288,255,265,290,351,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,268,270,286,270,284,276,274],
[253,0,273,247,259,268,263,269,267,282],
[266,277,0,253,261,268,263,265,264,270],
[282,303,297,0,279,275,275,280,270,279],
[280,291,289,271,0,273,290,279,290,273],
[264,282,282,275,277,0,289,282,271,279],
[280,287,287,275,260,261,0,267,268,274],
[266,281,285,270,271,268,283,0,280,267],
[274,283,286,280,260,279,282,270,0,254],
[276,268,280,271,277,271,276,283,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,293,294,320,282,295,280,297,247],
[259,0,260,265,317,270,276,234,261,251],
[257,290,0,279,310,292,288,263,299,253],
[256,285,271,0,308,256,268,242,281,221],
[230,233,240,242,0,262,259,220,247,218],
[268,280,258,294,288,0,259,250,265,262],
[255,274,262,282,291,291,0,240,258,266],
[270,316,287,308,330,300,310,0,293,280],
[253,289,251,269,303,285,292,257,0,246],
[303,299,297,329,332,288,284,270,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,363,285,336,322,352,307,321,325],
[280,0,322,250,307,283,304,333,287,322],
[187,228,0,216,234,273,301,256,258,266],
[265,300,334,0,293,311,346,288,277,314],
[214,243,316,257,0,275,313,310,270,290],
[228,267,277,239,275,0,323,259,252,281],
[198,246,249,204,237,227,0,246,235,231],
[243,217,294,262,240,291,304,0,264,269],
[229,263,292,273,280,298,315,286,0,269],
[225,228,284,236,260,269,319,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,276,280,266,267,273,292,290,276],
[261,0,264,264,252,273,269,299,282,273],
[274,286,0,272,258,277,268,285,280,273],
[270,286,278,0,272,269,290,303,275,270],
[284,298,292,278,0,260,275,295,274,298],
[283,277,273,281,290,0,282,293,300,280],
[277,281,282,260,275,268,0,298,280,271],
[258,251,265,247,255,257,252,0,269,273],
[260,268,270,275,276,250,270,281,0,273],
[274,277,277,280,252,270,279,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,253,282,296,296,267,327,294],
[274,0,290,249,291,323,278,258,317,293],
[262,260,0,263,271,277,252,227,259,238],
[297,301,287,0,288,302,297,248,331,287],
[268,259,279,262,0,279,277,235,293,279],
[254,227,273,248,271,0,275,271,265,273],
[254,272,298,253,273,275,0,279,295,287],
[283,292,323,302,315,279,271,0,311,274],
[223,233,291,219,257,285,255,239,0,253],
[256,257,312,263,271,277,263,276,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,300,279,273,296,275,275,264,269],
[241,0,274,272,256,272,266,255,252,269],
[250,276,0,246,270,270,274,266,260,263],
[271,278,304,0,291,301,280,271,284,280],
[277,294,280,259,0,291,275,267,265,276],
[254,278,280,249,259,0,267,260,252,270],
[275,284,276,270,275,283,0,275,266,254],
[275,295,284,279,283,290,275,0,269,270],
[286,298,290,266,285,298,284,281,0,278],
[281,281,287,270,274,280,296,280,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,284,265,353,288,293,398,253,322],
[222,0,276,223,338,256,327,352,269,250],
[266,274,0,252,310,169,314,377,281,276],
[285,327,298,0,298,257,321,379,298,253],
[197,212,240,252,0,200,233,314,276,219],
[262,294,381,293,350,0,337,341,318,381],
[257,223,236,229,317,213,0,296,255,259],
[152,198,173,171,236,209,254,0,261,200],
[297,281,269,252,274,232,295,289,0,282],
[228,300,274,297,331,169,291,350,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,275,288,262,288,304,307,303,272],
[248,0,283,277,261,282,305,288,280,279],
[275,267,0,297,279,272,295,291,290,276],
[262,273,253,0,260,255,273,273,274,268],
[288,289,271,290,0,269,306,282,305,266],
[262,268,278,295,281,0,293,283,278,288],
[246,245,255,277,244,257,0,265,271,263],
[243,262,259,277,268,267,285,0,271,257],
[247,270,260,276,245,272,279,279,0,270],
[278,271,274,282,284,262,287,293,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,305,280,287,261,297,284,285,271],
[276,0,293,273,298,272,286,278,295,264],
[245,257,0,276,265,254,280,269,261,268],
[270,277,274,0,267,275,276,270,286,268],
[263,252,285,283,0,264,266,266,288,254],
[289,278,296,275,286,0,291,300,318,268],
[253,264,270,274,284,259,0,273,286,283],
[266,272,281,280,284,250,277,0,286,271],
[265,255,289,264,262,232,264,264,0,260],
[279,286,282,282,296,282,267,279,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,279,270,294,278,283,295,282,275],
[264,0,277,280,273,262,273,285,282,287],
[271,273,0,266,276,277,294,286,287,287],
[280,270,284,0,285,285,295,289,277,265],
[256,277,274,265,0,269,262,276,270,271],
[272,288,273,265,281,0,292,285,291,289],
[267,277,256,255,288,258,0,287,270,275],
[255,265,264,261,274,265,263,0,264,276],
[268,268,263,273,280,259,280,286,0,277],
[275,263,263,285,279,261,275,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,285,264,273,266,281,284,285,263],
[262,0,264,297,283,263,286,301,303,271],
[265,286,0,264,287,273,284,290,284,262],
[286,253,286,0,279,274,277,293,285,273],
[277,267,263,271,0,270,295,275,277,267],
[284,287,277,276,280,0,300,298,270,290],
[269,264,266,273,255,250,0,285,266,249],
[266,249,260,257,275,252,265,0,280,258],
[265,247,266,265,273,280,284,270,0,259],
[287,279,288,277,283,260,301,292,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,276,278,309,266,250,313,251],
[267,0,266,260,304,309,256,280,319,241],
[277,284,0,262,293,298,276,300,304,285],
[274,290,288,0,287,322,309,295,333,245],
[272,246,257,263,0,284,261,282,291,225],
[241,241,252,228,266,0,230,297,279,219],
[284,294,274,241,289,320,0,271,268,319],
[300,270,250,255,268,253,279,0,285,235],
[237,231,246,217,259,271,282,265,0,261],
[299,309,265,305,325,331,231,315,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,250,303,284,278,250,300,289,290],
[318,0,263,323,304,280,286,312,295,309],
[300,287,0,302,280,298,267,323,309,328],
[247,227,248,0,248,277,236,299,270,284],
[266,246,270,302,0,255,248,323,240,274],
[272,270,252,273,295,0,246,295,270,280],
[300,264,283,314,302,304,0,320,291,319],
[250,238,227,251,227,255,230,0,234,236],
[261,255,241,280,310,280,259,316,0,284],
[260,241,222,266,276,270,231,314,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,264,288,257,292,280,274,283,271],
[270,0,268,296,282,286,277,297,276,257],
[286,282,0,308,273,310,279,312,306,267],
[262,254,242,0,263,263,264,281,251,243],
[293,268,277,287,0,300,279,264,287,277],
[258,264,240,287,250,0,272,263,290,232],
[270,273,271,286,271,278,0,298,271,245],
[276,253,238,269,286,287,252,0,274,250],
[267,274,244,299,263,260,279,276,0,247],
[279,293,283,307,273,318,305,300,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,312,243,285,295,255,257,263,249],
[220,0,260,233,283,251,254,241,247,241],
[238,290,0,285,266,252,254,289,272,301],
[307,317,265,0,303,319,303,261,290,284],
[265,267,284,247,0,257,327,283,265,320],
[255,299,298,231,293,0,301,264,273,274],
[295,296,296,247,223,249,0,272,298,292],
[293,309,261,289,267,286,278,0,282,301],
[287,303,278,260,285,277,252,268,0,298],
[301,309,249,266,230,276,258,249,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,285,279,302,284,277,270,280,266],
[264,0,265,249,255,257,266,231,253,260],
[265,285,0,267,287,287,266,275,277,276],
[271,301,283,0,315,284,275,269,283,274],
[248,295,263,235,0,257,255,249,277,254],
[266,293,263,266,293,0,279,271,269,280],
[273,284,284,275,295,271,0,271,277,281],
[280,319,275,281,301,279,279,0,296,285],
[270,297,273,267,273,281,273,254,0,277],
[284,290,274,276,296,270,269,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,266,261,242,249,272,264,249,260],
[316,0,276,288,275,273,301,295,283,296],
[284,274,0,268,278,269,285,287,285,295],
[289,262,282,0,256,284,286,276,274,287],
[308,275,272,294,0,296,297,304,290,288],
[301,277,281,266,254,0,289,280,274,281],
[278,249,265,264,253,261,0,273,280,272],
[286,255,263,274,246,270,277,0,274,280],
[301,267,265,276,260,276,270,276,0,278],
[290,254,255,263,262,269,278,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,306,301,296,264,276,297,286],
[265,0,277,283,292,295,246,246,292,276],
[255,273,0,278,259,273,255,222,268,242],
[244,267,272,0,281,288,254,239,281,277],
[249,258,291,269,0,292,259,249,249,260],
[254,255,277,262,258,0,235,244,279,253],
[286,304,295,296,291,315,0,264,285,280],
[274,304,328,311,301,306,286,0,309,299],
[253,258,282,269,301,271,265,241,0,266],
[264,274,308,273,290,297,270,251,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,287,292,291,279,262,262,284],
[278,0,267,282,282,273,268,264,256,277],
[274,283,0,274,275,281,275,270,277,291],
[263,268,276,0,280,274,273,277,261,282],
[258,268,275,270,0,269,266,270,270,292],
[259,277,269,276,281,0,284,282,267,280],
[271,282,275,277,284,266,0,281,267,294],
[288,286,280,273,280,268,269,0,265,290],
[288,294,273,289,280,283,283,285,0,301],
[266,273,259,268,258,270,256,260,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,256,247,276,267,276,267,249,270],
[287,0,290,290,271,282,293,272,295,291],
[294,260,0,269,288,298,291,273,259,270],
[303,260,281,0,289,290,288,290,269,269],
[274,279,262,261,0,276,283,279,258,274],
[283,268,252,260,274,0,265,274,267,257],
[274,257,259,262,267,285,0,262,260,259],
[283,278,277,260,271,276,288,0,263,278],
[301,255,291,281,292,283,290,287,0,294],
[280,259,280,281,276,293,291,272,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,261,288,273,253,272,266,254,265],
[261,0,270,260,277,257,275,281,269,270],
[289,280,0,298,302,258,273,286,298,291],
[262,290,252,0,283,251,279,279,260,280],
[277,273,248,267,0,257,263,276,249,270],
[297,293,292,299,293,0,294,272,297,303],
[278,275,277,271,287,256,0,265,269,287],
[284,269,264,271,274,278,285,0,272,297],
[296,281,252,290,301,253,281,278,0,295],
[285,280,259,270,280,247,263,253,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,279,254,291,269,276,279,272,260],
[296,0,300,272,285,272,265,318,303,298],
[271,250,0,274,287,287,260,291,273,278],
[296,278,276,0,315,296,275,288,297,275],
[259,265,263,235,0,261,248,256,263,242],
[281,278,263,254,289,0,267,274,261,270],
[274,285,290,275,302,283,0,294,274,281],
[271,232,259,262,294,276,256,0,255,253],
[278,247,277,253,287,289,276,295,0,272],
[290,252,272,275,308,280,269,297,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,242,282,275,266,303,268,304,260],
[266,0,289,291,296,247,311,312,279,275],
[308,261,0,288,278,267,318,329,287,300],
[268,259,262,0,239,254,295,281,264,236],
[275,254,272,311,0,265,298,289,296,301],
[284,303,283,296,285,0,326,328,318,275],
[247,239,232,255,252,224,0,287,243,233],
[282,238,221,269,261,222,263,0,279,237],
[246,271,263,286,254,232,307,271,0,267],
[290,275,250,314,249,275,317,313,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,266,301,281,280,271,292,287,282],
[260,0,268,273,293,283,284,288,286,276],
[284,282,0,274,292,267,268,289,298,278],
[249,277,276,0,286,248,281,287,298,280],
[269,257,258,264,0,265,258,287,272,262],
[270,267,283,302,285,0,264,297,281,262],
[279,266,282,269,292,286,0,295,282,273],
[258,262,261,263,263,253,255,0,264,276],
[263,264,252,252,278,269,268,286,0,259],
[268,274,272,270,288,288,277,274,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,292,282,283,270,310,310,286],
[282,0,271,259,272,272,281,319,293,310],
[271,279,0,265,290,290,269,299,281,298],
[258,291,285,0,298,296,293,321,287,273],
[268,278,260,252,0,268,241,321,280,280],
[267,278,260,254,282,0,269,314,312,261],
[280,269,281,257,309,281,0,295,273,299],
[240,231,251,229,229,236,255,0,263,271],
[240,257,269,263,270,238,277,287,0,248],
[264,240,252,277,270,289,251,279,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,272,267,271,270,285,264,280],
[279,0,280,265,270,264,258,280,267,284],
[287,270,0,272,275,282,257,283,267,290],
[278,285,278,0,288,268,286,287,275,292],
[283,280,275,262,0,274,276,304,275,292],
[279,286,268,282,276,0,287,286,278,288],
[280,292,293,264,274,263,0,290,270,284],
[265,270,267,263,246,264,260,0,258,269],
[286,283,283,275,275,272,280,292,0,284],
[270,266,260,258,258,262,266,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,299,260,284,240,254,294,246,256],
[333,0,318,285,312,272,312,304,335,277],
[251,232,0,259,270,278,249,271,292,271],
[290,265,291,0,277,260,274,306,271,268],
[266,238,280,273,0,284,267,278,278,223],
[310,278,272,290,266,0,291,270,296,288],
[296,238,301,276,283,259,0,276,264,244],
[256,246,279,244,272,280,274,0,263,256],
[304,215,258,279,272,254,286,287,0,238],
[294,273,279,282,327,262,306,294,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,295,274,292,283,318,276,256],
[268,0,280,271,284,303,300,285,282,278],
[277,270,0,256,284,280,269,285,276,251],
[255,279,294,0,287,284,291,291,293,289],
[276,266,266,263,0,250,280,268,265,252],
[258,247,270,266,300,0,297,294,263,258],
[267,250,281,259,270,253,0,280,276,254],
[232,265,265,259,282,256,270,0,262,256],
[274,268,274,257,285,287,274,288,0,279],
[294,272,299,261,298,292,296,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,273,275,268,272,276,275,270,273],
[261,0,287,265,266,272,281,273,265,282],
[277,263,0,269,264,276,275,277,275,272],
[275,285,281,0,242,261,269,285,270,276],
[282,284,286,308,0,261,271,295,287,283],
[278,278,274,289,289,0,286,291,285,296],
[274,269,275,281,279,264,0,266,285,286],
[275,277,273,265,255,259,284,0,275,267],
[280,285,275,280,263,265,265,275,0,271],
[277,268,278,274,267,254,264,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,265,272,261,285,266,281,295,284],
[277,0,261,275,270,275,268,254,286,272],
[285,289,0,296,271,274,262,270,289,260],
[278,275,254,0,296,263,263,273,281,267],
[289,280,279,254,0,276,267,264,291,260],
[265,275,276,287,274,0,266,255,266,272],
[284,282,288,287,283,284,0,255,293,261],
[269,296,280,277,286,295,295,0,306,288],
[255,264,261,269,259,284,257,244,0,267],
[266,278,290,283,290,278,289,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,254,249,308,251,286,270,259,263],
[302,0,259,264,303,290,289,284,302,276],
[296,291,0,290,328,269,330,298,272,298],
[301,286,260,0,330,287,303,287,265,263],
[242,247,222,220,0,258,284,258,243,234],
[299,260,281,263,292,0,302,282,284,291],
[264,261,220,247,266,248,0,250,264,231],
[280,266,252,263,292,268,300,0,294,288],
[291,248,278,285,307,266,286,256,0,275],
[287,274,252,287,316,259,319,262,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,247,281,270,255,287,252,268,272],
[279,0,232,246,263,246,253,237,263,256],
[303,318,0,309,296,278,305,274,291,296],
[269,304,241,0,292,260,265,250,276,286],
[280,287,254,258,0,261,267,259,280,263],
[295,304,272,290,289,0,298,276,290,282],
[263,297,245,285,283,252,0,244,285,267],
[298,313,276,300,291,274,306,0,297,298],
[282,287,259,274,270,260,265,253,0,260],
[278,294,254,264,287,268,283,252,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,282,280,282,263,285,277,287],
[279,0,274,281,260,271,278,281,279,271],
[284,276,0,297,255,274,292,279,290,279],
[268,269,253,0,266,262,275,275,264,274],
[270,290,295,284,0,288,287,262,266,288],
[268,279,276,288,262,0,274,284,270,292],
[287,272,258,275,263,276,0,288,271,267],
[265,269,271,275,288,266,262,0,262,278],
[273,271,260,286,284,280,279,288,0,266],
[263,279,271,276,262,258,283,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,284,282,272,265,256,277,255,278],
[298,0,272,284,263,267,260,265,261,301],
[266,278,0,275,271,278,278,284,261,272],
[268,266,275,0,279,265,253,272,277,282],
[278,287,279,271,0,277,276,289,307,295],
[285,283,272,285,273,0,253,259,279,276],
[294,290,272,297,274,297,0,263,283,282],
[273,285,266,278,261,291,287,0,290,290],
[295,289,289,273,243,271,267,260,0,292],
[272,249,278,268,255,274,268,260,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,267,293,181,262,170,270,228,258],
[242,0,222,319,176,232,178,247,263,190],
[283,328,0,314,294,280,271,258,351,300],
[257,231,236,0,201,232,216,254,214,183],
[369,374,256,349,0,309,309,314,395,328],
[288,318,270,318,241,0,226,255,276,186],
[380,372,279,334,241,324,0,265,299,303],
[280,303,292,296,236,295,285,0,328,265],
[322,287,199,336,155,274,251,222,0,184],
[292,360,250,367,222,364,247,285,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,257,245,269,280,270,290,256,309],
[242,0,254,269,262,234,236,283,244,279],
[293,296,0,284,273,270,288,287,280,307],
[305,281,266,0,274,274,271,294,267,303],
[281,288,277,276,0,268,274,275,285,304],
[270,316,280,276,282,0,281,289,259,294],
[280,314,262,279,276,269,0,282,266,298],
[260,267,263,256,275,261,268,0,260,278],
[294,306,270,283,265,291,284,290,0,293],
[241,271,243,247,246,256,252,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,272,256,274,257,262,267,263],
[274,0,253,270,270,261,268,264,263,260],
[284,297,0,281,282,273,275,281,295,268],
[278,280,269,0,257,263,271,269,272,264],
[294,280,268,293,0,277,266,271,278,288],
[276,289,277,287,273,0,265,274,299,287],
[293,282,275,279,284,285,0,272,287,290],
[288,286,269,281,279,276,278,0,287,270],
[283,287,255,278,272,251,263,263,0,273],
[287,290,282,286,262,263,260,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,245,282,273,245,249,277,248,272],
[282,0,287,282,284,254,268,276,276,275],
[305,263,0,273,293,289,266,274,269,296],
[268,268,277,0,289,245,277,266,273,275],
[277,266,257,261,0,259,252,258,260,262],
[305,296,261,305,291,0,276,280,293,297],
[301,282,284,273,298,274,0,263,273,281],
[273,274,276,284,292,270,287,0,263,282],
[302,274,281,277,290,257,277,287,0,280],
[278,275,254,275,288,253,269,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,267,273,277,267,278,294,284,293],
[267,0,278,280,269,284,282,275,268,273],
[283,272,0,276,268,287,302,300,274,289],
[277,270,274,0,268,292,277,267,293,285],
[273,281,282,282,0,272,271,276,300,283],
[283,266,263,258,278,0,275,286,270,282],
[272,268,248,273,279,275,0,285,277,299],
[256,275,250,283,274,264,265,0,275,270],
[266,282,276,257,250,280,273,275,0,288],
[257,277,261,265,267,268,251,280,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,285,279,291,278,265,273,273],
[271,0,278,285,271,290,281,260,262,263],
[272,272,0,269,264,284,260,271,278,271],
[265,265,281,0,280,294,263,268,272,257],
[271,279,286,270,0,298,264,262,278,260],
[259,260,266,256,252,0,266,267,261,249],
[272,269,290,287,286,284,0,282,270,272],
[285,290,279,282,288,283,268,0,264,268],
[277,288,272,278,272,289,280,286,0,278],
[277,287,279,293,290,301,278,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,264,271,255,271,347,198,258,326],
[314,0,253,249,254,281,319,212,299,246],
[286,297,0,233,254,259,268,219,270,303],
[279,301,317,0,320,332,312,197,280,321],
[295,296,296,230,0,339,355,252,309,268],
[279,269,291,218,211,0,308,205,243,269],
[203,231,282,238,195,242,0,155,215,229],
[352,338,331,353,298,345,395,0,334,260],
[292,251,280,270,241,307,335,216,0,287],
[224,304,247,229,282,281,321,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,254,307,271,287,281,269,272,267],
[276,0,298,273,282,310,286,291,282,278],
[296,252,0,270,244,250,278,286,291,266],
[243,277,280,0,244,280,233,261,265,263],
[279,268,306,306,0,331,292,301,308,297],
[263,240,300,270,219,0,251,263,256,255],
[269,264,272,317,258,299,0,299,296,285],
[281,259,264,289,249,287,251,0,275,279],
[278,268,259,285,242,294,254,275,0,238],
[283,272,284,287,253,295,265,271,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,252,255,303,282,260,272,225,297],
[292,0,257,311,292,289,315,308,280,312],
[298,293,0,274,303,309,256,285,296,269],
[295,239,276,0,302,310,266,298,314,267],
[247,258,247,248,0,283,252,274,216,274],
[268,261,241,240,267,0,238,276,250,250],
[290,235,294,284,298,312,0,290,285,270],
[278,242,265,252,276,274,260,0,240,249],
[325,270,254,236,334,300,265,310,0,286],
[253,238,281,283,276,300,280,301,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,258,263,249,259,276,253,268],
[282,0,298,285,278,290,285,268,263,292],
[273,252,0,273,262,250,274,251,242,259],
[292,265,277,0,276,267,269,272,267,275],
[287,272,288,274,0,284,295,251,282,275],
[301,260,300,283,266,0,298,283,276,287],
[291,265,276,281,255,252,0,273,271,267],
[274,282,299,278,299,267,277,0,264,277],
[297,287,308,283,268,274,279,286,0,286],
[282,258,291,275,275,263,283,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,230,288,256,236,297,251,269,222],
[274,0,250,323,325,233,284,286,290,275],
[320,300,0,311,346,271,328,318,307,289],
[262,227,239,0,265,256,252,238,291,236],
[294,225,204,285,0,275,251,257,324,251],
[314,317,279,294,275,0,274,277,300,289],
[253,266,222,298,299,276,0,239,290,282],
[299,264,232,312,293,273,311,0,310,258],
[281,260,243,259,226,250,260,240,0,185],
[328,275,261,314,299,261,268,292,365,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,295,278,254,264,302,305,315,286],
[247,0,269,256,280,246,283,275,295,257],
[255,281,0,264,238,262,271,272,279,277],
[272,294,286,0,273,254,330,269,306,293],
[296,270,312,277,0,268,313,291,290,274],
[286,304,288,296,282,0,286,264,298,296],
[248,267,279,220,237,264,0,240,286,286],
[245,275,278,281,259,286,310,0,297,276],
[235,255,271,244,260,252,264,253,0,258],
[264,293,273,257,276,254,264,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,264,296,271,261,277,260,270],
[268,0,269,285,278,274,281,276,252,267],
[266,281,0,285,285,267,280,283,272,263],
[286,265,265,0,261,253,266,283,242,278],
[254,272,265,289,0,279,268,267,275,262],
[279,276,283,297,271,0,285,282,277,293],
[289,269,270,284,282,265,0,286,264,266],
[273,274,267,267,283,268,264,0,264,269],
[290,298,278,308,275,273,286,286,0,277],
[280,283,287,272,288,257,284,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,224,282,344,143,215,313,275,208],
[312,0,298,377,364,220,156,285,292,245],
[326,252,0,308,310,239,226,266,240,238],
[268,173,242,0,326,194,248,173,209,173],
[206,186,240,224,0,159,238,225,182,194],
[407,330,311,356,391,0,235,253,279,271],
[335,394,324,302,312,315,0,316,191,267],
[237,265,284,377,325,297,234,0,218,284],
[275,258,310,341,368,271,359,332,0,331],
[342,305,312,377,356,279,283,266,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,261,266,273,270,280,277,276],
[262,0,265,270,279,267,266,289,279,274],
[270,285,0,271,267,266,271,281,289,273],
[289,280,279,0,278,274,252,289,284,270],
[284,271,283,272,0,269,257,286,275,269],
[277,283,284,276,281,0,262,300,282,285],
[280,284,279,298,293,288,0,305,271,287],
[270,261,269,261,264,250,245,0,256,264],
[273,271,261,266,275,268,279,294,0,273],
[274,276,277,280,281,265,263,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,280,287,268,291,276,288,275],
[271,0,286,274,267,269,268,272,290,278],
[260,264,0,279,288,261,274,279,288,290],
[270,276,271,0,279,281,269,278,278,274],
[263,283,262,271,0,274,268,255,277,271],
[282,281,289,269,276,0,277,285,285,273],
[259,282,276,281,282,273,0,263,270,274],
[274,278,271,272,295,265,287,0,295,278],
[262,260,262,272,273,265,280,255,0,272],
[275,272,260,276,279,277,276,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,284,276,259,242,274,257,249,248],
[293,0,282,279,263,278,289,278,265,264],
[266,268,0,267,267,280,271,253,258,257],
[274,271,283,0,277,265,279,280,258,254],
[291,287,283,273,0,260,290,289,270,281],
[308,272,270,285,290,0,275,293,288,265],
[276,261,279,271,260,275,0,286,264,249],
[293,272,297,270,261,257,264,0,248,253],
[301,285,292,292,280,262,286,302,0,281],
[302,286,293,296,269,285,301,297,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,150,218,92,198,284,106,217,158,160],
[400,0,450,257,153,292,140,339,312,380],
[332,100,0,82,213,234,81,148,201,196],
[458,293,468,0,233,254,426,351,371,240],
[352,397,337,317,0,386,206,388,332,400],
[266,258,316,296,164,0,179,316,238,206],
[444,410,469,124,344,371,0,435,291,357],
[333,211,402,199,162,234,115,0,305,313],
[392,238,349,179,218,312,259,245,0,298],
[390,170,354,310,150,344,193,237,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,263,289,284,281,267,303,276,278],
[250,0,268,265,276,262,257,263,250,280],
[287,282,0,289,303,248,243,276,262,251],
[261,285,261,0,298,253,284,297,269,266],
[266,274,247,252,0,270,257,272,255,251],
[269,288,302,297,280,0,297,295,256,270],
[283,293,307,266,293,253,0,280,266,280],
[247,287,274,253,278,255,270,0,274,264],
[274,300,288,281,295,294,284,276,0,283],
[272,270,299,284,299,280,270,286,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,303,304,293,266,281,257,270,275],
[250,0,256,261,249,250,285,265,275,248],
[247,294,0,266,254,242,260,295,273,273],
[246,289,284,0,249,279,248,254,270,275],
[257,301,296,301,0,287,278,287,280,251],
[284,300,308,271,263,0,305,293,271,300],
[269,265,290,302,272,245,0,314,296,282],
[293,285,255,296,263,257,236,0,267,273],
[280,275,277,280,270,279,254,283,0,240],
[275,302,277,275,299,250,268,277,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,318,235,198,245,207,182,211,304],
[255,0,302,263,137,286,238,295,279,292],
[232,248,0,173,166,195,187,180,214,176],
[315,287,377,0,255,271,287,262,263,280],
[352,413,384,295,0,342,346,277,229,244],
[305,264,355,279,208,0,222,279,239,301],
[343,312,363,263,204,328,0,243,362,292],
[368,255,370,288,273,271,307,0,259,330],
[339,271,336,287,321,311,188,291,0,306],
[246,258,374,270,306,249,258,220,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,255,288,263,250,256,250,270,268],
[286,0,276,273,295,309,254,277,264,273],
[295,274,0,295,295,310,262,272,287,278],
[262,277,255,0,260,305,265,269,283,272],
[287,255,255,290,0,298,319,284,264,257],
[300,241,240,245,252,0,237,243,238,254],
[294,296,288,285,231,313,0,253,294,274],
[300,273,278,281,266,307,297,0,262,293],
[280,286,263,267,286,312,256,288,0,262],
[282,277,272,278,293,296,276,257,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,256,268,273,250,276,278,248,262],
[274,0,261,272,273,276,275,280,256,278],
[294,289,0,287,282,285,307,287,267,299],
[282,278,263,0,283,266,282,265,247,261],
[277,277,268,267,0,273,273,268,275,267],
[300,274,265,284,277,0,284,293,263,292],
[274,275,243,268,277,266,0,277,264,285],
[272,270,263,285,282,257,273,0,255,261],
[302,294,283,303,275,287,286,295,0,270],
[288,272,251,289,283,258,265,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,280,260,289,274,270,271,249],
[281,0,245,281,267,286,261,265,264,257],
[285,305,0,305,293,287,287,278,278,273],
[270,269,245,0,267,287,274,267,269,255],
[290,283,257,283,0,288,279,287,271,247],
[261,264,263,263,262,0,265,277,263,257],
[276,289,263,276,271,285,0,268,272,273],
[280,285,272,283,263,273,282,0,259,265],
[279,286,272,281,279,287,278,291,0,276],
[301,293,277,295,303,293,277,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,287,340,239,266,284,272,290,321],
[238,0,277,277,242,280,320,263,263,312],
[263,273,0,289,269,212,254,281,326,339],
[210,273,261,0,246,262,267,270,247,312],
[311,308,281,304,0,254,317,238,296,296],
[284,270,338,288,296,0,306,299,322,343],
[266,230,296,283,233,244,0,273,339,343],
[278,287,269,280,312,251,277,0,287,278],
[260,287,224,303,254,228,211,263,0,318],
[229,238,211,238,254,207,207,272,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,294,282,283,290,294,315,290,282],
[276,0,279,281,279,275,269,280,265,279],
[256,271,0,265,276,279,265,289,241,251],
[268,269,285,0,272,262,256,293,278,264],
[267,271,274,278,0,270,256,275,276,276],
[260,275,271,288,280,0,273,275,271,259],
[256,281,285,294,294,277,0,292,278,274],
[235,270,261,257,275,275,258,0,247,264],
[260,285,309,272,274,279,272,303,0,272],
[268,271,299,286,274,291,276,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,266,247,270,250,274,262,262,290],
[279,0,275,267,272,272,263,245,266,269],
[284,275,0,256,277,259,302,262,262,299],
[303,283,294,0,270,271,286,255,274,310],
[280,278,273,280,0,281,289,268,263,297],
[300,278,291,279,269,0,305,264,286,317],
[276,287,248,264,261,245,0,271,228,283],
[288,305,288,295,282,286,279,0,244,294],
[288,284,288,276,287,264,322,306,0,288],
[260,281,251,240,253,233,267,256,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,265,283,267,282,265,269,258,283],
[295,0,284,286,269,282,292,278,276,293],
[285,266,0,271,284,271,272,275,279,283],
[267,264,279,0,278,279,267,267,262,285],
[283,281,266,272,0,285,264,279,273,276],
[268,268,279,271,265,0,298,272,270,284],
[285,258,278,283,286,252,0,264,267,272],
[281,272,275,283,271,278,286,0,268,297],
[292,274,271,288,277,280,283,282,0,280],
[267,257,267,265,274,266,278,253,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,268,262,271,277,241,265,248,266],
[309,0,299,293,275,299,288,288,300,291],
[282,251,0,259,296,302,298,281,253,274],
[288,257,291,0,267,289,248,261,260,279],
[279,275,254,283,0,298,255,280,257,293],
[273,251,248,261,252,0,238,273,244,246],
[309,262,252,302,295,312,0,305,287,294],
[285,262,269,289,270,277,245,0,270,273],
[302,250,297,290,293,306,263,280,0,298],
[284,259,276,271,257,304,256,277,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,270,272,232,262,256,247,277,262],
[235,0,230,229,231,260,271,244,247,244],
[280,320,0,266,277,274,293,282,302,239],
[278,321,284,0,279,277,318,292,290,272],
[318,319,273,271,0,255,331,292,260,297],
[288,290,276,273,295,0,305,281,278,266],
[294,279,257,232,219,245,0,269,237,242],
[303,306,268,258,258,269,281,0,291,311],
[273,303,248,260,290,272,313,259,0,246],
[288,306,311,278,253,284,308,239,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,257,268,277,246,275,254,266],
[292,0,257,261,284,287,277,273,275,275],
[277,293,0,274,300,301,261,274,261,279],
[293,289,276,0,297,305,266,292,284,292],
[282,266,250,253,0,291,253,260,265,258],
[273,263,249,245,259,0,245,270,260,278],
[304,273,289,284,297,305,0,283,277,275],
[275,277,276,258,290,280,267,0,263,272],
[296,275,289,266,285,290,273,287,0,283],
[284,275,271,258,292,272,275,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,275,299,282,282,287,265,288,263],
[285,0,307,309,284,294,275,286,288,270],
[275,243,0,298,283,269,288,261,296,260],
[251,241,252,0,254,244,255,246,267,254],
[268,266,267,296,0,274,288,292,287,275],
[268,256,281,306,276,0,267,270,281,256],
[263,275,262,295,262,283,0,259,279,275],
[285,264,289,304,258,280,291,0,307,264],
[262,262,254,283,263,269,271,243,0,266],
[287,280,290,296,275,294,275,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,275,282,306,314,279,260,272],
[274,0,282,311,289,273,283,300,273,302],
[271,268,0,250,278,275,284,293,245,229],
[275,239,300,0,230,265,275,278,257,254],
[268,261,272,320,0,266,281,265,249,267],
[244,277,275,285,284,0,292,282,294,280],
[236,267,266,275,269,258,0,242,250,271],
[271,250,257,272,285,268,308,0,243,255],
[290,277,305,293,301,256,300,307,0,288],
[278,248,321,296,283,270,279,295,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,274,244,257,278,270,266,262],
[275,0,282,273,259,275,266,272,273,277],
[276,268,0,270,250,249,259,258,277,271],
[276,277,280,0,259,272,258,251,284,254],
[306,291,300,291,0,280,273,288,287,279],
[293,275,301,278,270,0,264,277,273,285],
[272,284,291,292,277,286,0,274,284,285],
[280,278,292,299,262,273,276,0,282,276],
[284,277,273,266,263,277,266,268,0,271],
[288,273,279,296,271,265,265,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,273,277,298,275,274,280,272,287],
[263,0,266,274,263,253,257,247,259,274],
[277,284,0,261,267,260,270,283,272,277],
[273,276,289,0,290,263,275,250,269,280],
[252,287,283,260,0,286,274,264,262,288],
[275,297,290,287,264,0,282,271,282,284],
[276,293,280,275,276,268,0,250,254,277],
[270,303,267,300,286,279,300,0,268,287],
[278,291,278,281,288,268,296,282,0,274],
[263,276,273,270,262,266,273,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,275,270,279,262,272,279,283,280],
[263,0,293,253,269,266,285,281,281,284],
[275,257,0,260,271,262,255,270,293,252],
[280,297,290,0,285,259,285,289,306,287],
[271,281,279,265,0,280,267,285,306,273],
[288,284,288,291,270,0,283,286,302,287],
[278,265,295,265,283,267,0,268,296,268],
[271,269,280,261,265,264,282,0,288,280],
[267,269,257,244,244,248,254,262,0,242],
[270,266,298,263,277,263,282,270,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,288,274,294,275,285,268,278],
[264,0,264,261,255,275,255,279,274,260],
[274,286,0,271,257,289,283,275,265,266],
[262,289,279,0,248,284,271,261,249,259],
[276,295,293,302,0,289,278,274,271,281],
[256,275,261,266,261,0,265,252,254,261],
[275,295,267,279,272,285,0,269,275,262],
[265,271,275,289,276,298,281,0,272,277],
[282,276,285,301,279,296,275,278,0,287],
[272,290,284,291,269,289,288,273,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,241,180,332,404,404,266,330,391],
[317,0,425,281,304,324,401,254,340,460],
[309,125,0,243,429,250,347,97,393,393],
[370,269,307,0,248,248,491,182,306,391],
[218,246,121,302,0,249,371,134,406,392],
[146,226,300,302,301,0,364,325,327,322],
[146,149,203,59,179,186,0,203,118,304],
[284,296,453,368,416,225,347,0,393,429],
[220,210,157,244,144,223,432,157,0,282],
[159,90,157,159,158,228,246,121,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,261,265,243,262,262,266,249,239],
[298,0,265,288,273,270,252,266,258,256],
[289,285,0,278,282,282,264,263,260,265],
[285,262,272,0,281,262,243,287,262,257],
[307,277,268,269,0,275,254,267,242,258],
[288,280,268,288,275,0,269,265,257,259],
[288,298,286,307,296,281,0,280,263,278],
[284,284,287,263,283,285,270,0,247,262],
[301,292,290,288,308,293,287,303,0,274],
[311,294,285,293,292,291,272,288,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,298,264,276,281,286,282,277],
[288,0,288,298,253,268,286,292,261,290],
[288,262,0,301,279,277,291,274,252,294],
[252,252,249,0,261,262,252,251,246,282],
[286,297,271,289,0,277,307,276,274,283],
[274,282,273,288,273,0,287,281,269,274],
[269,264,259,298,243,263,0,280,244,261],
[264,258,276,299,274,269,270,0,246,283],
[268,289,298,304,276,281,306,304,0,289],
[273,260,256,268,267,276,289,267,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,292,290,300,282,300,276,278],
[268,0,256,266,276,271,270,284,251,254],
[284,294,0,277,279,310,275,296,258,290],
[258,284,273,0,272,288,264,286,252,279],
[260,274,271,278,0,290,268,281,256,263],
[250,279,240,262,260,0,256,281,245,268],
[268,280,275,286,282,294,0,282,259,266],
[250,266,254,264,269,269,268,0,260,267],
[274,299,292,298,294,305,291,290,0,294],
[272,296,260,271,287,282,284,283,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,243,281,283,249,259,326,287,272],
[283,0,267,284,292,299,278,324,273,324],
[307,283,0,292,269,312,267,289,296,274],
[269,266,258,0,281,275,288,300,264,280],
[267,258,281,269,0,295,259,283,265,310],
[301,251,238,275,255,0,265,305,304,276],
[291,272,283,262,291,285,0,324,309,342],
[224,226,261,250,267,245,226,0,223,249],
[263,277,254,286,285,246,241,327,0,283],
[278,226,276,270,240,274,208,301,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,247,286,262,274,277,253,267],
[282,0,258,266,272,287,252,267,248,243],
[295,292,0,277,309,298,267,281,289,264],
[303,284,273,0,300,295,253,288,289,274],
[264,278,241,250,0,263,254,264,264,239],
[288,263,252,255,287,0,271,282,261,255],
[276,298,283,297,296,279,0,277,272,277],
[273,283,269,262,286,268,273,0,265,244],
[297,302,261,261,286,289,278,285,0,266],
[283,307,286,276,311,295,273,306,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,285,286,320,302,283,258,281],
[285,0,323,274,298,301,296,281,272,269],
[270,227,0,293,282,273,268,262,241,243],
[265,276,257,0,275,279,290,251,240,239],
[264,252,268,275,0,279,298,295,231,250],
[230,249,277,271,271,0,296,267,242,248],
[248,254,282,260,252,254,0,274,209,226],
[267,269,288,299,255,283,276,0,257,264],
[292,278,309,310,319,308,341,293,0,275],
[269,281,307,311,300,302,324,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,280,269,277,300,291,290,277],
[258,0,275,273,256,268,277,293,287,279],
[265,275,0,260,275,280,275,287,296,265],
[270,277,290,0,260,285,287,309,278,268],
[281,294,275,290,0,268,302,300,306,291],
[273,282,270,265,282,0,288,285,286,285],
[250,273,275,263,248,262,0,261,282,290],
[259,257,263,241,250,265,289,0,277,261],
[260,263,254,272,244,264,268,273,0,263],
[273,271,285,282,259,265,260,289,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,281,270,260,258,274,270,266],
[267,0,259,271,266,262,260,269,275,262],
[272,291,0,267,284,279,265,279,281,280],
[269,279,283,0,266,291,256,269,290,272],
[280,284,266,284,0,272,270,285,284,287],
[290,288,271,259,278,0,276,257,271,275],
[292,290,285,294,280,274,0,276,279,285],
[276,281,271,281,265,293,274,0,264,261],
[280,275,269,260,266,279,271,286,0,269],
[284,288,270,278,263,275,265,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,283,289,286,276,270,270,269],
[265,0,267,260,284,275,279,257,256,273],
[277,283,0,280,304,297,282,273,280,276],
[267,290,270,0,288,281,275,256,254,272],
[261,266,246,262,0,274,256,259,259,273],
[264,275,253,269,276,0,272,257,264,275],
[274,271,268,275,294,278,0,273,264,268],
[280,293,277,294,291,293,277,0,264,290],
[280,294,270,296,291,286,286,286,0,292],
[281,277,274,278,277,275,282,260,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,307,287,290,270,296,275,301],
[271,0,276,301,290,311,280,308,292,298],
[279,274,0,310,301,315,290,297,283,287],
[243,249,240,0,267,277,252,250,255,270],
[263,260,249,283,0,260,278,279,283,276],
[260,239,235,273,290,0,276,279,257,304],
[280,270,260,298,272,274,0,288,288,285],
[254,242,253,300,271,271,262,0,281,290],
[275,258,267,295,267,293,262,269,0,277],
[249,252,263,280,274,246,265,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,210,374,180,165,309,223,236,160],
[272,0,159,450,293,201,358,290,318,175],
[340,391,0,465,302,302,199,234,197,232],
[176,100,85,0,55,29,138,144,226,85],
[370,257,248,495,0,332,320,234,336,209],
[385,349,248,521,218,0,353,223,345,198],
[241,192,351,412,230,197,0,200,322,204],
[327,260,316,406,316,327,350,0,316,316],
[314,232,353,324,214,205,228,234,0,243],
[390,375,318,465,341,352,346,234,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,296,283,265,284,280,279,267,270],
[259,0,307,293,280,280,275,268,274,268],
[254,243,0,271,255,254,249,273,276,252],
[267,257,279,0,254,273,256,262,282,250],
[285,270,295,296,0,274,277,269,275,266],
[266,270,296,277,276,0,254,265,293,263],
[270,275,301,294,273,296,0,282,305,281],
[271,282,277,288,281,285,268,0,281,271],
[283,276,274,268,275,257,245,269,0,263],
[280,282,298,300,284,287,269,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,309,275,290,280,295,303,296,291],
[255,0,283,281,259,263,277,298,287,281],
[241,267,0,260,258,251,286,279,298,284],
[275,269,290,0,268,264,283,282,287,281],
[260,291,292,282,0,269,296,311,305,291],
[270,287,299,286,281,0,286,283,293,278],
[255,273,264,267,254,264,0,274,275,265],
[247,252,271,268,239,267,276,0,281,272],
[254,263,252,263,245,257,275,269,0,269],
[259,269,266,269,259,272,285,278,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,297,263,288,264,275,272,266],
[288,0,292,310,278,289,290,268,278,291],
[288,258,0,289,287,284,260,269,270,274],
[253,240,261,0,261,245,256,244,245,271],
[287,272,263,289,0,300,282,274,279,281],
[262,261,266,305,250,0,282,265,283,273],
[286,260,290,294,268,268,0,256,287,285],
[275,282,281,306,276,285,294,0,278,279],
[278,272,280,305,271,267,263,272,0,275],
[284,259,276,279,269,277,265,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,281,256,258,292,286,273,273,263],
[271,0,254,249,247,273,276,268,270,267],
[269,296,0,272,273,284,291,290,251,286],
[294,301,278,0,266,303,310,317,272,266],
[292,303,277,284,0,285,288,296,272,273],
[258,277,266,247,265,0,282,269,260,285],
[264,274,259,240,262,268,0,276,243,254],
[277,282,260,233,254,281,274,0,256,264],
[277,280,299,278,278,290,307,294,0,275],
[287,283,264,284,277,265,296,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,264,253,243,256,234,254,256,246],
[297,0,259,264,280,296,272,294,292,285],
[286,291,0,272,296,300,292,286,295,275],
[297,286,278,0,291,290,283,292,281,270],
[307,270,254,259,0,301,273,279,288,276],
[294,254,250,260,249,0,262,264,275,260],
[316,278,258,267,277,288,0,298,269,271],
[296,256,264,258,271,286,252,0,267,244],
[294,258,255,269,262,275,281,283,0,273],
[304,265,275,280,274,290,279,306,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,271,274,268,286,272,287,277],
[284,0,271,278,280,294,288,272,292,281],
[272,279,0,273,267,286,282,276,271,287],
[279,272,277,0,280,281,282,283,287,270],
[276,270,283,270,0,280,260,270,292,273],
[282,256,264,269,270,0,267,269,266,269],
[264,262,268,268,290,283,0,277,287,268],
[278,278,274,267,280,281,273,0,286,264],
[263,258,279,263,258,284,263,264,0,267],
[273,269,263,280,277,281,282,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,258,278,284,299,270,294,276],
[269,0,243,280,277,290,287,255,280,291],
[281,307,0,302,280,299,298,264,303,281],
[292,270,248,0,274,290,284,276,272,283],
[272,273,270,276,0,276,282,269,285,276],
[266,260,251,260,274,0,278,253,269,274],
[251,263,252,266,268,272,0,259,270,261],
[280,295,286,274,281,297,291,0,292,293],
[256,270,247,278,265,281,280,258,0,259],
[274,259,269,267,274,276,289,257,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,162,294,311,228,99,279,312,294],
[357,0,66,291,212,197,185,89,268,101],
[388,484,0,473,409,372,297,383,364,187],
[256,259,77,0,100,167,185,100,156,167],
[239,338,141,450,0,272,159,227,219,239],
[322,353,178,383,278,0,363,287,233,141],
[451,365,253,365,391,187,0,350,271,253],
[271,461,167,450,323,263,200,0,271,190],
[238,282,186,394,331,317,279,279,0,94],
[256,449,363,383,311,409,297,360,456,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,263,285,284,276,279,268,270,287],
[279,0,286,284,271,283,291,275,292,279],
[287,264,0,305,288,296,286,288,272,291],
[265,266,245,0,269,275,274,271,287,266],
[266,279,262,281,0,264,266,283,274,265],
[274,267,254,275,286,0,272,259,264,268],
[271,259,264,276,284,278,0,286,280,270],
[282,275,262,279,267,291,264,0,281,282],
[280,258,278,263,276,286,270,269,0,285],
[263,271,259,284,285,282,280,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,283,275,317,322,281,307,297],
[254,0,291,265,266,296,297,257,282,262],
[272,259,0,258,251,288,289,249,295,269],
[267,285,292,0,257,290,284,264,316,291],
[275,284,299,293,0,290,328,263,292,267],
[233,254,262,260,260,0,285,252,267,260],
[228,253,261,266,222,265,0,261,271,246],
[269,293,301,286,287,298,289,0,300,274],
[243,268,255,234,258,283,279,250,0,267],
[253,288,281,259,283,290,304,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,232,287,252,219,227,207,226,251],
[225,0,166,208,237,174,112,162,183,166],
[318,384,0,290,296,240,307,275,257,326],
[263,342,260,0,323,273,296,193,209,254],
[298,313,254,227,0,262,261,217,199,320],
[331,376,310,277,288,0,318,245,244,317],
[323,438,243,254,289,232,0,209,278,232],
[343,388,275,357,333,305,341,0,308,324],
[324,367,293,341,351,306,272,242,0,404],
[299,384,224,296,230,233,318,226,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,339,263,263,286,239,300,300,264],
[275,0,337,265,208,280,210,276,270,269],
[211,213,0,221,220,291,230,241,233,214],
[287,285,329,0,247,298,279,306,320,259],
[287,342,330,303,0,312,248,276,338,340],
[264,270,259,252,238,0,262,270,229,261],
[311,340,320,271,302,288,0,266,312,292],
[250,274,309,244,274,280,284,0,332,288],
[250,280,317,230,212,321,238,218,0,253],
[286,281,336,291,210,289,258,262,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,280,262,275,260,292,294,282],
[269,0,282,272,270,267,279,292,279,276],
[267,268,0,270,269,281,261,282,269,267],
[270,278,280,0,292,277,273,283,281,290],
[288,280,281,258,0,274,269,298,271,285],
[275,283,269,273,276,0,273,299,285,283],
[290,271,289,277,281,277,0,307,275,285],
[258,258,268,267,252,251,243,0,257,272],
[256,271,281,269,279,265,275,293,0,276],
[268,274,283,260,265,267,265,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,245,277,268,259,252,298,283,262],
[319,0,268,293,304,296,283,345,292,284],
[305,282,0,305,282,284,264,298,275,287],
[273,257,245,0,243,246,258,287,267,251],
[282,246,268,307,0,251,258,300,262,242],
[291,254,266,304,299,0,266,313,284,265],
[298,267,286,292,292,284,0,300,293,255],
[252,205,252,263,250,237,250,0,240,218],
[267,258,275,283,288,266,257,310,0,259],
[288,266,263,299,308,285,295,332,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,269,288,282,290,298,290,271],
[265,0,283,273,287,275,272,289,275,292],
[284,267,0,285,289,291,285,287,269,278],
[281,277,265,0,275,281,273,283,281,272],
[262,263,261,275,0,284,280,290,287,282],
[268,275,259,269,266,0,274,269,272,272],
[260,278,265,277,270,276,0,294,273,280],
[252,261,263,267,260,281,256,0,277,261],
[260,275,281,269,263,278,277,273,0,271],
[279,258,272,278,268,278,270,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,291,292,285,295,291,280,278,272],
[247,0,258,276,248,280,277,255,265,251],
[259,292,0,282,259,283,279,272,275,274],
[258,274,268,0,260,276,272,256,263,276],
[265,302,291,290,0,277,283,279,285,284],
[255,270,267,274,273,0,272,255,254,272],
[259,273,271,278,267,278,0,272,268,278],
[270,295,278,294,271,295,278,0,286,295],
[272,285,275,287,265,296,282,264,0,281],
[278,299,276,274,266,278,272,255,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,276,267,281,283,277,284,296],
[272,0,283,293,279,280,276,286,290,278],
[273,267,0,283,260,261,244,257,279,262],
[274,257,267,0,249,261,261,254,262,274],
[283,271,290,301,0,293,278,281,289,281],
[269,270,289,289,257,0,266,274,265,270],
[267,274,306,289,272,284,0,271,272,280],
[273,264,293,296,269,276,279,0,267,293],
[266,260,271,288,261,285,278,283,0,279],
[254,272,288,276,269,280,270,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,263,277,274,271,258,296,263],
[280,0,286,263,280,275,269,256,291,278],
[296,264,0,282,279,274,286,265,288,269],
[287,287,268,0,278,288,287,277,286,277],
[273,270,271,272,0,269,280,255,280,274],
[276,275,276,262,281,0,284,262,292,267],
[279,281,264,263,270,266,0,267,279,260],
[292,294,285,273,295,288,283,0,302,273],
[254,259,262,264,270,258,271,248,0,273],
[287,272,281,273,276,283,290,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,335,304,278,301,294,290,268,309],
[250,0,276,272,272,292,237,285,265,237],
[215,274,0,288,281,266,265,295,255,264],
[246,278,262,0,273,283,279,259,270,246],
[272,278,269,277,0,264,263,281,266,289],
[249,258,284,267,286,0,215,260,266,242],
[256,313,285,271,287,335,0,307,305,263],
[260,265,255,291,269,290,243,0,283,274],
[282,285,295,280,284,284,245,267,0,248],
[241,313,286,304,261,308,287,276,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,275,263,300,278,296,280,287,262],
[280,0,287,280,295,270,279,281,293,283],
[275,263,0,266,301,259,306,291,301,294],
[287,270,284,0,295,264,309,282,272,288],
[250,255,249,255,0,231,297,277,245,255],
[272,280,291,286,319,0,300,288,270,285],
[254,271,244,241,253,250,0,261,267,278],
[270,269,259,268,273,262,289,0,280,293],
[263,257,249,278,305,280,283,270,0,281],
[288,267,256,262,295,265,272,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,221,243,326,307,296,290,235,209],
[328,0,261,204,273,277,267,262,225,240],
[329,289,0,271,339,298,261,310,270,308],
[307,346,279,0,322,348,327,308,241,299],
[224,277,211,228,0,252,251,221,168,248],
[243,273,252,202,298,0,302,267,241,209],
[254,283,289,223,299,248,0,327,250,228],
[260,288,240,242,329,283,223,0,249,190],
[315,325,280,309,382,309,300,301,0,271],
[341,310,242,251,302,341,322,360,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,325,289,300,323,290,265,277,292],
[240,0,306,250,283,268,252,267,289,260],
[225,244,0,240,240,248,241,277,225,220],
[261,300,310,0,294,318,238,282,309,261],
[250,267,310,256,0,285,242,267,273,299],
[227,282,302,232,265,0,278,279,298,273],
[260,298,309,312,308,272,0,287,299,299],
[285,283,273,268,283,271,263,0,255,284],
[273,261,325,241,277,252,251,295,0,288],
[258,290,330,289,251,277,251,266,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,271,268,305,283,265,281,244,279],
[304,0,288,275,319,289,271,305,287,280],
[279,262,0,257,312,306,265,272,247,301],
[282,275,293,0,324,299,291,290,283,318],
[245,231,238,226,0,259,251,258,241,269],
[267,261,244,251,291,0,279,272,254,282],
[285,279,285,259,299,271,0,284,250,278],
[269,245,278,260,292,278,266,0,253,269],
[306,263,303,267,309,296,300,297,0,302],
[271,270,249,232,281,268,272,281,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,264,311,278,278,286,287,304,259],
[262,0,255,297,285,267,275,285,269,263],
[286,295,0,291,289,303,272,307,305,285],
[239,253,259,0,267,283,261,270,272,235],
[272,265,261,283,0,281,265,270,277,255],
[272,283,247,267,269,0,268,264,266,242],
[264,275,278,289,285,282,0,279,259,253],
[263,265,243,280,280,286,271,0,271,237],
[246,281,245,278,273,284,291,279,0,262],
[291,287,265,315,295,308,297,313,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,290,276,280,303,246,282,274,270],
[279,0,274,291,260,270,280,285,252,269],
[260,276,0,268,249,278,270,277,244,250],
[274,259,282,0,256,286,231,260,262,258],
[270,290,301,294,0,315,293,288,284,290],
[247,280,272,264,235,0,257,265,243,257],
[304,270,280,319,257,293,0,287,288,267],
[268,265,273,290,262,285,263,0,264,266],
[276,298,306,288,266,307,262,286,0,296],
[280,281,300,292,260,293,283,284,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,262,280,269,275,308,278,300,276],
[254,0,261,270,235,281,268,277,297,284],
[288,289,0,250,278,295,267,283,299,276],
[270,280,300,0,300,294,296,298,328,297],
[281,315,272,250,0,273,291,291,331,271],
[275,269,255,256,277,0,275,275,287,274],
[242,282,283,254,259,275,0,277,288,270],
[272,273,267,252,259,275,273,0,282,276],
[250,253,251,222,219,263,262,268,0,283],
[274,266,274,253,279,276,280,274,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,264,292,281,271,238,245,273,276],
[257,0,293,272,286,264,270,275,261,286],
[286,257,0,278,287,270,275,250,273,280],
[258,278,272,0,261,273,249,226,276,286],
[269,264,263,289,0,285,254,251,270,280],
[279,286,280,277,265,0,268,246,266,270],
[312,280,275,301,296,282,0,250,295,300],
[305,275,300,324,299,304,300,0,295,319],
[277,289,277,274,280,284,255,255,0,259],
[274,264,270,264,270,280,250,231,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,287,300,263,271,271,259,265,282],
[262,0,279,276,271,261,267,270,252,265],
[263,271,0,291,267,280,263,286,262,290],
[250,274,259,0,247,277,253,261,264,260],
[287,279,283,303,0,267,256,275,275,279],
[279,289,270,273,283,0,285,264,286,300],
[279,283,287,297,294,265,0,287,276,294],
[291,280,264,289,275,286,263,0,286,282],
[285,298,288,286,275,264,274,264,0,292],
[268,285,260,290,271,250,256,268,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,296,272,291,312,290,253,269,300],
[292,0,304,286,314,297,315,268,269,308],
[254,246,0,265,307,274,265,245,271,276],
[278,264,285,0,278,316,299,275,282,331],
[259,236,243,272,0,291,261,239,240,266],
[238,253,276,234,259,0,268,210,258,262],
[260,235,285,251,289,282,0,235,255,279],
[297,282,305,275,311,340,315,0,280,309],
[281,281,279,268,310,292,295,270,0,296],
[250,242,274,219,284,288,271,241,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,369,285,320,330,274,338,323,389,282],
[181,0,256,274,264,229,202,201,293,225],
[265,294,0,263,295,279,261,284,294,224],
[230,276,287,0,284,257,240,275,297,234],
[220,286,255,266,0,259,206,231,313,233],
[276,321,271,293,291,0,280,223,318,263],
[212,348,289,310,344,270,0,284,319,323],
[227,349,266,275,319,327,266,0,334,258],
[161,257,256,253,237,232,231,216,0,247],
[268,325,326,316,317,287,227,292,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,289,277,282,263,269,273,291],
[274,0,278,285,291,284,273,277,279,284],
[271,272,0,281,268,281,266,245,292,279],
[261,265,269,0,269,280,266,261,276,273],
[273,259,282,281,0,254,256,259,279,284],
[268,266,269,270,296,0,269,252,285,285],
[287,277,284,284,294,281,0,265,288,313],
[281,273,305,289,291,298,285,0,281,306],
[277,271,258,274,271,265,262,269,0,286],
[259,266,271,277,266,265,237,244,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,278,269,273,268,282,284,292],
[289,0,292,302,292,279,274,291,297,280],
[275,258,0,289,264,264,270,271,290,268],
[272,248,261,0,249,260,247,266,270,256],
[281,258,286,301,0,251,275,265,286,285],
[277,271,286,290,299,0,274,288,277,273],
[282,276,280,303,275,276,0,281,293,288],
[268,259,279,284,285,262,269,0,285,278],
[266,253,260,280,264,273,257,265,0,271],
[258,270,282,294,265,277,262,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,290,275,293,287,277,286,289,288],
[243,0,275,267,273,268,259,267,265,262],
[260,275,0,268,265,266,256,273,260,266],
[275,283,282,0,283,287,273,296,275,290],
[257,277,285,267,0,278,272,281,277,301],
[263,282,284,263,272,0,271,270,281,277],
[273,291,294,277,278,279,0,276,278,284],
[264,283,277,254,269,280,274,0,276,272],
[261,285,290,275,273,269,272,274,0,265],
[262,288,284,260,249,273,266,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,272,281,295,263,296,287,267],
[277,0,271,256,285,294,292,281,269,288],
[286,279,0,267,305,305,269,280,282,279],
[278,294,283,0,293,280,269,262,265,279],
[269,265,245,257,0,275,251,273,263,260],
[255,256,245,270,275,0,269,280,271,254],
[287,258,281,281,299,281,0,270,267,272],
[254,269,270,288,277,270,280,0,278,275],
[263,281,268,285,287,279,283,272,0,282],
[283,262,271,271,290,296,278,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,242,276,265,299,251,265,283,263],
[297,0,243,315,297,308,269,316,295,303],
[308,307,0,324,263,313,253,287,307,269],
[274,235,226,0,269,285,255,262,276,282],
[285,253,287,281,0,297,276,286,295,290],
[251,242,237,265,253,0,262,241,262,228],
[299,281,297,295,274,288,0,264,267,279],
[285,234,263,288,264,309,286,0,271,280],
[267,255,243,274,255,288,283,279,0,255],
[287,247,281,268,260,322,271,270,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,277,299,270,312,256,276,261,260],
[236,0,265,247,260,261,248,225,234,254],
[273,285,0,264,250,248,236,231,234,281],
[251,303,286,0,272,265,268,218,249,256],
[280,290,300,278,0,278,279,256,289,293],
[238,289,302,285,272,0,250,270,249,269],
[294,302,314,282,271,300,0,257,266,281],
[274,325,319,332,294,280,293,0,312,305],
[289,316,316,301,261,301,284,238,0,283],
[290,296,269,294,257,281,269,245,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,278,244,241,274,265,266,271],
[271,0,292,287,280,252,281,287,281,262],
[273,258,0,270,267,242,284,268,275,275],
[272,263,280,0,267,234,268,263,281,271],
[306,270,283,283,0,255,273,272,273,275],
[309,298,308,316,295,0,285,275,297,310],
[276,269,266,282,277,265,0,268,284,289],
[285,263,282,287,278,275,282,0,278,268],
[284,269,275,269,277,253,266,272,0,287],
[279,288,275,279,275,240,261,282,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,271,265,288,265,273,265,278,272],
[299,0,278,253,303,283,279,261,284,269],
[279,272,0,283,318,295,283,280,308,276],
[285,297,267,0,311,280,274,277,303,296],
[262,247,232,239,0,262,239,233,284,254],
[285,267,255,270,288,0,255,248,295,262],
[277,271,267,276,311,295,0,279,313,289],
[285,289,270,273,317,302,271,0,283,276],
[272,266,242,247,266,255,237,267,0,254],
[278,281,274,254,296,288,261,274,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,273,262,254,283,310,243,268],
[256,0,290,264,236,246,280,274,255,270],
[278,260,0,247,253,278,255,271,249,267],
[277,286,303,0,268,287,260,281,277,272],
[288,314,297,282,0,281,272,309,276,294],
[296,304,272,263,269,0,276,274,278,267],
[267,270,295,290,278,274,0,282,279,274],
[240,276,279,269,241,276,268,0,238,269],
[307,295,301,273,274,272,271,312,0,293],
[282,280,283,278,256,283,276,281,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,276,279,229,287,285,255,264,280],
[298,0,281,292,285,293,316,275,287,325],
[274,269,0,256,262,271,267,284,256,328],
[271,258,294,0,288,307,250,258,293,315],
[321,265,288,262,0,284,305,295,294,316],
[263,257,279,243,266,0,296,269,248,268],
[265,234,283,300,245,254,0,272,275,295],
[295,275,266,292,255,281,278,0,280,324],
[286,263,294,257,256,302,275,270,0,303],
[270,225,222,235,234,282,255,226,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,272,300,290,290,282,313,300,290],
[247,0,249,265,273,282,268,270,289,242],
[278,301,0,280,291,268,273,286,282,302],
[250,285,270,0,304,250,283,275,277,280],
[260,277,259,246,0,254,272,262,235,283],
[260,268,282,300,296,0,267,278,282,294],
[268,282,277,267,278,283,0,292,272,271],
[237,280,264,275,288,272,258,0,266,234],
[250,261,268,273,315,268,278,284,0,299],
[260,308,248,270,267,256,279,316,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,260,248,262,257,260,243,272,242],
[311,0,289,264,277,266,290,271,280,237],
[290,261,0,255,279,235,243,237,275,238],
[302,286,295,0,288,264,268,265,288,256],
[288,273,271,262,0,266,255,260,304,265],
[293,284,315,286,284,0,269,249,284,264],
[290,260,307,282,295,281,0,276,308,279],
[307,279,313,285,290,301,274,0,295,268],
[278,270,275,262,246,266,242,255,0,245],
[308,313,312,294,285,286,271,282,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,258,241,250,246,261,252,250,235],
[289,0,232,272,281,260,273,287,275,255],
[292,318,0,295,267,278,312,286,282,286],
[309,278,255,0,269,297,278,289,288,315],
[300,269,283,281,0,276,279,286,282,290],
[304,290,272,253,274,0,268,263,272,282],
[289,277,238,272,271,282,0,277,247,287],
[298,263,264,261,264,287,273,0,269,279],
[300,275,268,262,268,278,303,281,0,262],
[315,295,264,235,260,268,263,271,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,193,235,277,194,237,245,218,204,282],
[357,0,306,285,254,310,264,309,302,277],
[315,244,0,336,242,246,273,184,265,227],
[273,265,214,0,214,168,203,261,224,212],
[356,296,308,336,0,264,334,309,290,287],
[313,240,304,382,286,0,247,305,267,356],
[305,286,277,347,216,303,0,307,312,331],
[332,241,366,289,241,245,243,0,340,349],
[346,248,285,326,260,283,238,210,0,304],
[268,273,323,338,263,194,219,201,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,295,272,287,293,280,277,290],
[275,0,257,300,269,272,275,274,282,292],
[275,293,0,318,278,275,288,287,265,297],
[255,250,232,0,250,261,267,250,248,272],
[278,281,272,300,0,280,298,272,277,284],
[263,278,275,289,270,0,283,278,271,301],
[257,275,262,283,252,267,0,273,265,277],
[270,276,263,300,278,272,277,0,274,286],
[273,268,285,302,273,279,285,276,0,305],
[260,258,253,278,266,249,273,264,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,292,283,261,266,273,263,293,259],
[276,0,280,275,273,288,272,264,279,254],
[258,270,0,268,248,266,257,245,267,256],
[267,275,282,0,259,268,264,256,288,250],
[289,277,302,291,0,284,271,284,273,280],
[284,262,284,282,266,0,262,262,272,242],
[277,278,293,286,279,288,0,259,277,264],
[287,286,305,294,266,288,291,0,289,287],
[257,271,283,262,277,278,273,261,0,261],
[291,296,294,300,270,308,286,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,259,268,297,278,265,278,267,295],
[277,0,282,280,274,287,268,265,285,276],
[291,268,0,287,285,306,275,267,301,308],
[282,270,263,0,293,293,271,260,292,276],
[253,276,265,257,0,260,257,259,273,295],
[272,263,244,257,290,0,274,263,241,263],
[285,282,275,279,293,276,0,278,267,275],
[272,285,283,290,291,287,272,0,288,303],
[283,265,249,258,277,309,283,262,0,281],
[255,274,242,274,255,287,275,247,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,268,255,284,262,280,269,264],
[276,0,268,269,271,273,269,276,281,274],
[286,282,0,273,252,252,273,286,266,283],
[282,281,277,0,282,264,285,291,271,273],
[295,279,298,268,0,277,256,287,266,269],
[266,277,298,286,273,0,274,299,274,280],
[288,281,277,265,294,276,0,299,276,283],
[270,274,264,259,263,251,251,0,246,271],
[281,269,284,279,284,276,274,304,0,283],
[286,276,267,277,281,270,267,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,289,304,284,284,273,288,301,272],
[261,0,249,268,266,264,256,243,262,245],
[261,301,0,312,269,289,288,279,284,260],
[246,282,238,0,249,269,267,262,273,244],
[266,284,281,301,0,286,284,283,282,267],
[266,286,261,281,264,0,274,259,260,270],
[277,294,262,283,266,276,0,288,291,281],
[262,307,271,288,267,291,262,0,277,261],
[249,288,266,277,268,290,259,273,0,255],
[278,305,290,306,283,280,269,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,304,272,277,282,256,305,287,281],
[276,0,271,266,273,264,252,278,278,262],
[246,279,0,262,261,272,236,272,266,260],
[278,284,288,0,299,284,278,291,278,275],
[273,277,289,251,0,258,248,268,251,250],
[268,286,278,266,292,0,256,277,276,272],
[294,298,314,272,302,294,0,296,302,298],
[245,272,278,259,282,273,254,0,273,264],
[263,272,284,272,299,274,248,277,0,260],
[269,288,290,275,300,278,252,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,274,284,240,264,271,255,286,287],
[310,0,286,282,293,262,290,262,294,304],
[276,264,0,287,275,265,289,265,271,269],
[266,268,263,0,236,269,268,251,280,259],
[310,257,275,314,0,286,293,266,297,304],
[286,288,285,281,264,0,291,286,290,307],
[279,260,261,282,257,259,0,282,286,289],
[295,288,285,299,284,264,268,0,293,261],
[264,256,279,270,253,260,264,257,0,280],
[263,246,281,291,246,243,261,289,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,290,268,297,273,278,267,272],
[263,0,267,265,265,258,266,258,257,259],
[272,283,0,284,261,282,267,267,263,269],
[260,285,266,0,264,281,260,257,253,273],
[282,285,289,286,0,269,271,265,253,281],
[253,292,268,269,281,0,273,266,261,256],
[277,284,283,290,279,277,0,275,254,265],
[272,292,283,293,285,284,275,0,263,258],
[283,293,287,297,297,289,296,287,0,273],
[278,291,281,277,269,294,285,292,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,288,273,255,270,271,278,269,267],
[287,0,268,255,268,271,267,273,279,264],
[262,282,0,271,266,276,272,287,261,254],
[277,295,279,0,275,259,270,276,262,285],
[295,282,284,275,0,280,279,285,272,276],
[280,279,274,291,270,0,279,300,292,289],
[279,283,278,280,271,271,0,285,275,266],
[272,277,263,274,265,250,265,0,262,268],
[281,271,289,288,278,258,275,288,0,282],
[283,286,296,265,274,261,284,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,248,250,243,239,234,276,267],
[278,0,289,259,285,286,251,267,273,276],
[264,261,0,250,266,274,229,239,251,260],
[302,291,300,0,293,272,275,302,297,294],
[300,265,284,257,0,282,270,271,271,260],
[307,264,276,278,268,0,248,293,270,276],
[311,299,321,275,280,302,0,296,284,297],
[316,283,311,248,279,257,254,0,273,267],
[274,277,299,253,279,280,266,277,0,262],
[283,274,290,256,290,274,253,283,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,298,288,324,261,322,270,284,321],
[278,0,335,265,310,292,307,260,305,306],
[252,215,0,228,257,241,250,232,267,272],
[262,285,322,0,288,309,293,277,281,293],
[226,240,293,262,0,266,277,247,253,270],
[289,258,309,241,284,0,285,267,297,288],
[228,243,300,257,273,265,0,255,266,271],
[280,290,318,273,303,283,295,0,286,302],
[266,245,283,269,297,253,284,264,0,265],
[229,244,278,257,280,262,279,248,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,294,259,265,274,303,260,275,267],
[274,0,297,255,296,276,283,275,266,268],
[256,253,0,261,261,242,270,235,247,263],
[291,295,289,0,274,290,285,266,299,286],
[285,254,289,276,0,294,270,262,252,288],
[276,274,308,260,256,0,276,261,289,292],
[247,267,280,265,280,274,0,248,273,265],
[290,275,315,284,288,289,302,0,296,301],
[275,284,303,251,298,261,277,254,0,268],
[283,282,287,264,262,258,285,249,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,285,289,269,270,276,271,278],
[271,0,294,287,298,285,281,274,271,298],
[273,256,0,271,281,272,260,261,266,272],
[265,263,279,0,279,279,266,264,262,288],
[261,252,269,271,0,260,258,258,256,274],
[281,265,278,271,290,0,265,261,279,281],
[280,269,290,284,292,285,0,266,281,295],
[274,276,289,286,292,289,284,0,282,302],
[279,279,284,288,294,271,269,268,0,285],
[272,252,278,262,276,269,255,248,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,300,282,285,283,286,266,304,278],
[295,0,309,288,292,273,296,283,302,284],
[250,241,0,241,266,251,269,263,281,265],
[268,262,309,0,283,270,303,273,290,286],
[265,258,284,267,0,246,289,260,287,278],
[267,277,299,280,304,0,289,300,303,278],
[264,254,281,247,261,261,0,256,273,267],
[284,267,287,277,290,250,294,0,295,265],
[246,248,269,260,263,247,277,255,0,256],
[272,266,285,264,272,272,283,285,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,271,258,292,255,280,270,272,303],
[261,0,268,257,299,273,272,269,279,286],
[279,282,0,291,315,268,269,259,293,290],
[292,293,259,0,299,267,272,272,282,300],
[258,251,235,251,0,255,264,260,283,271],
[295,277,282,283,295,0,278,249,286,302],
[270,278,281,278,286,272,0,282,288,274],
[280,281,291,278,290,301,268,0,304,302],
[278,271,257,268,267,264,262,246,0,280],
[247,264,260,250,279,248,276,248,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,253,267,244,246,267,253,258,238],
[303,0,301,293,266,279,280,271,285,243],
[297,249,0,294,255,259,270,256,278,245],
[283,257,256,0,262,260,247,254,287,238],
[306,284,295,288,0,271,288,285,267,279],
[304,271,291,290,279,0,283,288,303,258],
[283,270,280,303,262,267,0,255,266,250],
[297,279,294,296,265,262,295,0,279,280],
[292,265,272,263,283,247,284,271,0,246],
[312,307,305,312,271,292,300,270,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,267,277,296,290,267,272,277,283],
[252,0,276,265,279,265,255,246,265,264],
[283,274,0,259,290,255,256,259,280,264],
[273,285,291,0,303,285,277,282,274,287],
[254,271,260,247,0,258,239,262,273,255],
[260,285,295,265,292,0,264,269,274,270],
[283,295,294,273,311,286,0,282,277,286],
[278,304,291,268,288,281,268,0,277,282],
[273,285,270,276,277,276,273,273,0,281],
[267,286,286,263,295,280,264,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,257,295,246,229,273,181,251,188],
[305,0,214,284,248,323,278,259,325,284],
[293,336,0,255,166,293,277,164,320,219],
[255,266,295,0,249,242,287,229,318,224],
[304,302,384,301,0,303,284,335,347,238],
[321,227,257,308,247,0,263,282,393,208],
[277,272,273,263,266,287,0,225,273,171],
[369,291,386,321,215,268,325,0,281,198],
[299,225,230,232,203,157,277,269,0,213],
[362,266,331,326,312,342,379,352,337,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,319,309,257,273,295,275,349,290],
[264,0,276,318,275,243,318,253,286,307],
[231,274,0,260,234,211,294,222,275,281],
[241,232,290,0,235,291,325,263,277,262],
[293,275,316,315,0,252,329,244,331,313],
[277,307,339,259,298,0,291,288,320,316],
[255,232,256,225,221,259,0,254,252,266],
[275,297,328,287,306,262,296,0,315,320],
[201,264,275,273,219,230,298,235,0,294],
[260,243,269,288,237,234,284,230,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,280,287,272,306,271,276,287],
[276,0,260,282,275,278,302,281,270,272],
[291,290,0,274,279,271,299,281,280,284],
[270,268,276,0,277,257,289,267,263,270],
[263,275,271,273,0,272,298,288,263,285],
[278,272,279,293,278,0,296,289,278,303],
[244,248,251,261,252,254,0,262,265,253],
[279,269,269,283,262,261,288,0,272,275],
[274,280,270,287,287,272,285,278,0,280],
[263,278,266,280,265,247,297,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,267,286,277,258,271,291,262,246],
[259,0,265,248,263,217,265,274,257,232],
[283,285,0,282,267,251,253,298,301,244],
[264,302,268,0,274,270,288,288,287,248],
[273,287,283,276,0,239,266,279,267,261],
[292,333,299,280,311,0,290,292,301,271],
[279,285,297,262,284,260,0,288,288,283],
[259,276,252,262,271,258,262,0,272,257],
[288,293,249,263,283,249,262,278,0,236],
[304,318,306,302,289,279,267,293,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,290,289,296,266,291,266,266,269],
[252,0,264,261,286,252,259,246,261,248],
[260,286,0,280,292,265,280,276,273,280],
[261,289,270,0,294,265,292,280,279,274],
[254,264,258,256,0,252,278,259,251,245],
[284,298,285,285,298,0,285,276,261,283],
[259,291,270,258,272,265,0,260,247,257],
[284,304,274,270,291,274,290,0,268,276],
[284,289,277,271,299,289,303,282,0,282],
[281,302,270,276,305,267,293,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,306,254,263,273,266,271,284,252],
[271,0,302,267,234,256,281,255,277,275],
[244,248,0,260,231,264,233,226,262,236],
[296,283,290,0,262,260,263,269,260,247],
[287,316,319,288,0,278,283,297,291,266],
[277,294,286,290,272,0,280,283,280,257],
[284,269,317,287,267,270,0,265,284,266],
[279,295,324,281,253,267,285,0,285,261],
[266,273,288,290,259,270,266,265,0,256],
[298,275,314,303,284,293,284,289,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,292,287,272,274,298,267,286,298],
[269,0,291,278,277,274,287,282,300,270],
[258,259,0,268,265,254,275,265,270,258],
[263,272,282,0,279,271,287,298,280,278],
[278,273,285,271,0,277,295,273,278,271],
[276,276,296,279,273,0,286,280,278,260],
[252,263,275,263,255,264,0,272,280,274],
[283,268,285,252,277,270,278,0,281,284],
[264,250,280,270,272,272,270,269,0,263],
[252,280,292,272,279,290,276,266,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,278,271,289,283,282,276,265,286],
[259,0,279,271,292,282,280,275,269,293],
[272,271,0,275,281,289,278,272,285,284],
[279,279,275,0,284,262,269,280,272,277],
[261,258,269,266,0,266,269,273,255,287],
[267,268,261,288,284,0,260,270,270,274],
[268,270,272,281,281,290,0,274,267,276],
[274,275,278,270,277,280,276,0,268,282],
[285,281,265,278,295,280,283,282,0,285],
[264,257,266,273,263,276,274,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,296,317,230,296,253,275,266,253],
[292,0,286,286,267,303,267,273,273,279],
[254,264,0,298,256,290,290,264,289,267],
[233,264,252,0,241,257,247,244,253,224],
[320,283,294,309,0,329,283,279,287,272],
[254,247,260,293,221,0,271,230,248,256],
[297,283,260,303,267,279,0,278,275,275],
[275,277,286,306,271,320,272,0,273,279],
[284,277,261,297,263,302,275,277,0,271],
[297,271,283,326,278,294,275,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,301,305,277,278,272,299,269,278],
[278,0,287,278,261,278,287,287,284,256],
[249,263,0,277,259,254,264,287,252,246],
[245,272,273,0,240,246,255,291,247,253],
[273,289,291,310,0,296,277,294,272,266],
[272,272,296,304,254,0,271,298,270,276],
[278,263,286,295,273,279,0,306,265,261],
[251,263,263,259,256,252,244,0,263,229],
[281,266,298,303,278,280,285,287,0,259],
[272,294,304,297,284,274,289,321,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,331,299,255,261,271,284,321,277],
[252,0,299,295,294,270,260,329,269,284],
[219,251,0,264,279,251,229,255,233,248],
[251,255,286,0,253,245,247,268,259,280],
[295,256,271,297,0,275,313,290,280,234],
[289,280,299,305,275,0,255,265,274,241],
[279,290,321,303,237,295,0,294,294,281],
[266,221,295,282,260,285,256,0,259,223],
[229,281,317,291,270,276,256,291,0,264],
[273,266,302,270,316,309,269,327,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,276,235,251,280,274,280,259],
[266,0,286,299,274,267,321,290,286,271],
[281,264,0,284,274,268,298,299,291,271],
[274,251,266,0,273,262,269,267,285,248],
[315,276,276,277,0,280,305,302,299,258],
[299,283,282,288,270,0,291,301,299,280],
[270,229,252,281,245,259,0,261,257,236],
[276,260,251,283,248,249,289,0,281,245],
[270,264,259,265,251,251,293,269,0,252],
[291,279,279,302,292,270,314,305,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,261,275,273,339,287,251,279,273],
[270,0,245,253,237,296,265,247,230,241],
[289,305,0,268,274,301,278,297,232,276],
[275,297,282,0,319,294,279,300,259,293],
[277,313,276,231,0,285,288,254,246,268],
[211,254,249,256,265,0,254,253,248,252],
[263,285,272,271,262,296,0,271,246,257],
[299,303,253,250,296,297,279,0,262,275],
[271,320,318,291,304,302,304,288,0,290],
[277,309,274,257,282,298,293,275,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,236,265,262,266,250,249,236,270],
[278,0,298,275,281,297,271,292,296,265],
[314,252,0,280,258,295,284,266,283,262],
[285,275,270,0,261,284,246,267,277,258],
[288,269,292,289,0,314,253,290,302,258],
[284,253,255,266,236,0,242,246,257,229],
[300,279,266,304,297,308,0,275,299,282],
[301,258,284,283,260,304,275,0,280,243],
[314,254,267,273,248,293,251,270,0,244],
[280,285,288,292,292,321,268,307,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,233,273,266,270,257,278,264],
[274,0,256,252,282,267,249,265,277,264],
[279,294,0,284,296,269,285,272,290,259],
[317,298,266,0,283,288,281,286,290,288],
[277,268,254,267,0,283,249,275,263,257],
[284,283,281,262,267,0,268,270,271,279],
[280,301,265,269,301,282,0,284,285,279],
[293,285,278,264,275,280,266,0,288,269],
[272,273,260,260,287,279,265,262,0,269],
[286,286,291,262,293,271,271,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,304,291,276,282,276,252,256,277],
[303,0,316,321,253,282,290,282,226,269],
[246,234,0,278,220,228,220,237,202,253],
[259,229,272,0,228,256,228,264,209,242],
[274,297,330,322,0,266,293,287,281,288],
[268,268,322,294,284,0,237,299,241,277],
[274,260,330,322,257,313,0,284,248,266],
[298,268,313,286,263,251,266,0,218,292],
[294,324,348,341,269,309,302,332,0,303],
[273,281,297,308,262,273,284,258,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,240,227,208,283,173,291,186,166],
[229,0,165,261,226,298,124,172,262,197],
[310,385,0,270,258,298,274,305,245,291],
[323,289,280,0,228,227,169,314,182,204],
[342,324,292,322,0,323,285,268,293,286],
[267,252,252,323,227,0,284,256,188,258],
[377,426,276,381,265,266,0,286,305,344],
[259,378,245,236,282,294,264,0,239,282],
[364,288,305,368,257,362,245,311,0,260],
[384,353,259,346,264,292,206,268,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,274,274,262,277,288,259,277],
[270,0,279,264,261,254,269,264,261,259],
[277,271,0,278,265,282,284,300,273,274],
[276,286,272,0,272,266,274,284,266,276],
[276,289,285,278,0,274,278,304,282,285],
[288,296,268,284,276,0,283,286,270,273],
[273,281,266,276,272,267,0,275,262,254],
[262,286,250,266,246,264,275,0,262,262],
[291,289,277,284,268,280,288,288,0,280],
[273,291,276,274,265,277,296,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,296,239,281,258,290,253,249,294],
[259,0,272,238,232,253,263,245,267,241],
[254,278,0,241,240,254,266,283,280,280],
[311,312,309,0,289,299,304,284,266,307],
[269,318,310,261,0,291,277,229,293,295],
[292,297,296,251,259,0,274,270,258,291],
[260,287,284,246,273,276,0,234,243,250],
[297,305,267,266,321,280,316,0,276,281],
[301,283,270,284,257,292,307,274,0,296],
[256,309,270,243,255,259,300,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,338,373,229,251,218,258,260,311],
[198,0,296,237,149,250,202,169,263,263],
[212,254,0,280,169,186,224,219,198,231],
[177,313,270,0,188,247,242,227,315,265],
[321,401,381,362,0,277,242,302,411,290],
[299,300,364,303,273,0,259,394,326,326],
[332,348,326,308,308,291,0,204,341,331],
[292,381,331,323,248,156,346,0,343,322],
[290,287,352,235,139,224,209,207,0,250],
[239,287,319,285,260,224,219,228,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,258,272,258,276,232,247,275],
[287,0,287,289,289,264,317,266,265,259],
[278,263,0,254,266,261,283,246,240,256],
[292,261,296,0,286,271,297,266,264,269],
[278,261,284,264,0,258,296,270,254,259],
[292,286,289,279,292,0,294,303,278,272],
[274,233,267,253,254,256,0,252,246,242],
[318,284,304,284,280,247,298,0,269,281],
[303,285,310,286,296,272,304,281,0,290],
[275,291,294,281,291,278,308,269,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,258,263,265,261,269,269,275],
[292,0,302,278,280,289,269,284,283,299],
[272,248,0,265,261,266,264,279,259,285],
[292,272,285,0,286,285,287,287,287,285],
[287,270,289,264,0,287,278,284,283,300],
[285,261,284,265,263,0,265,290,278,284],
[289,281,286,263,272,285,0,295,294,299],
[281,266,271,263,266,260,255,0,280,278],
[281,267,291,263,267,272,256,270,0,270],
[275,251,265,265,250,266,251,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,276,304,289,279,277,284,274],
[262,0,282,291,305,286,279,309,285,291],
[269,268,0,237,287,252,291,276,244,254],
[274,259,313,0,291,233,273,279,265,272],
[246,245,263,259,0,253,266,260,243,260],
[261,264,298,317,297,0,268,282,262,264],
[271,271,259,277,284,282,0,277,275,261],
[273,241,274,271,290,268,273,0,292,293],
[266,265,306,285,307,288,275,258,0,273],
[276,259,296,278,290,286,289,257,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,292,275,311,313,293,300,283,290],
[258,0,280,279,291,285,284,267,289,263],
[258,270,0,282,276,293,285,280,278,265],
[275,271,268,0,280,287,291,279,266,277],
[239,259,274,270,0,267,273,252,262,261],
[237,265,257,263,283,0,263,252,255,268],
[257,266,265,259,277,287,0,269,274,276],
[250,283,270,271,298,298,281,0,275,264],
[267,261,272,284,288,295,276,275,0,274],
[260,287,285,273,289,282,274,286,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,272,291,281,261,271,269,270],
[267,0,284,285,282,262,276,287,273,280],
[276,266,0,284,289,265,273,275,276,282],
[278,265,266,0,290,280,276,268,262,271],
[259,268,261,260,0,264,262,267,255,261],
[269,288,285,270,286,0,281,273,268,279],
[289,274,277,274,288,269,0,275,276,272],
[279,263,275,282,283,277,275,0,274,272],
[281,277,274,288,295,282,274,276,0,281],
[280,270,268,279,289,271,278,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,266,278,237,267,271,270,282,294],
[254,0,265,260,255,233,254,290,257,262],
[284,285,0,284,273,286,309,309,300,305],
[272,290,266,0,248,257,259,266,291,310],
[313,295,277,302,0,268,285,310,241,297],
[283,317,264,293,282,0,292,292,290,299],
[279,296,241,291,265,258,0,274,280,249],
[280,260,241,284,240,258,276,0,284,276],
[268,293,250,259,309,260,270,266,0,260],
[256,288,245,240,253,251,301,274,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,236,170,253,550,346,362,405,253],
[380,0,335,238,238,440,176,440,405,253],
[314,215,0,255,348,457,296,457,500,253],
[380,312,295,0,348,550,186,297,405,312],
[297,312,202,202,0,297,285,202,405,302],
[0,110,93,0,253,0,176,0,296,193],
[204,374,254,364,265,374,0,264,324,457],
[188,110,93,253,348,550,286,0,405,203],
[145,145,50,145,145,254,226,145,0,133],
[297,297,297,238,248,357,93,347,417,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,286,338,369,325,168,256,216,288],
[315,0,268,236,264,289,192,277,313,276],
[264,282,0,237,263,358,247,348,211,258],
[212,314,313,0,275,346,203,324,336,354],
[181,286,287,275,0,268,154,276,283,286],
[225,261,192,204,282,0,144,189,229,180],
[382,358,303,347,396,406,0,280,263,359],
[294,273,202,226,274,361,270,0,285,308],
[334,237,339,214,267,321,287,265,0,275],
[262,274,292,196,264,370,191,242,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,266,256,287,244,258,272,266,263],
[294,0,274,274,298,268,292,289,276,277],
[284,276,0,275,304,289,293,280,297,290],
[294,276,275,0,316,293,278,287,271,273],
[263,252,246,234,0,252,275,262,254,271],
[306,282,261,257,298,0,291,297,289,280],
[292,258,257,272,275,259,0,283,266,274],
[278,261,270,263,288,253,267,0,257,267],
[284,274,253,279,296,261,284,293,0,263],
[287,273,260,277,279,270,276,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,280,264,276,295,293,294,296],
[281,0,275,277,278,276,284,286,270,297],
[279,275,0,280,284,274,278,305,293,295],
[270,273,270,0,263,253,262,283,275,297],
[286,272,266,287,0,279,287,286,284,291],
[274,274,276,297,271,0,306,284,281,294],
[255,266,272,288,263,244,0,308,270,294],
[257,264,245,267,264,266,242,0,266,279],
[256,280,257,275,266,269,280,284,0,289],
[254,253,255,253,259,256,256,271,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,281,265,265,277,267,250,246,264],
[305,0,283,304,296,298,273,276,278,282],
[269,267,0,284,257,319,293,287,253,292],
[285,246,266,0,264,292,230,273,260,269],
[285,254,293,286,0,303,295,285,278,286],
[273,252,231,258,247,0,236,259,222,267],
[283,277,257,320,255,314,0,293,267,301],
[300,274,263,277,265,291,257,0,244,277],
[304,272,297,290,272,328,283,306,0,292],
[286,268,258,281,264,283,249,273,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,286,284,279,281,292,250,316,281],
[276,0,293,293,270,279,295,296,325,304],
[264,257,0,259,260,274,272,279,301,300],
[266,257,291,0,289,272,280,284,300,296],
[271,280,290,261,0,285,299,311,307,298],
[269,271,276,278,265,0,276,274,308,277],
[258,255,278,270,251,274,0,250,290,267],
[300,254,271,266,239,276,300,0,316,289],
[234,225,249,250,243,242,260,234,0,276],
[269,246,250,254,252,273,283,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,232,255,272,364,315,352,377,302],
[305,0,276,244,302,362,266,284,354,306],
[318,274,0,256,267,359,269,288,333,297],
[295,306,294,0,291,353,337,304,388,275],
[278,248,283,259,0,341,244,359,347,314],
[186,188,191,197,209,0,207,237,248,177],
[235,284,281,213,306,343,0,338,364,320],
[198,266,262,246,191,313,212,0,296,155],
[173,196,217,162,203,302,186,254,0,217],
[248,244,253,275,236,373,230,395,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,294,284,273,272,296,293,282,279],
[269,0,275,282,276,272,277,285,274,268],
[256,275,0,272,263,249,267,274,263,255],
[266,268,278,0,273,281,266,282,271,267],
[277,274,287,277,0,276,279,283,271,280],
[278,278,301,269,274,0,276,287,273,278],
[254,273,283,284,271,274,0,286,261,270],
[257,265,276,268,267,263,264,0,261,267],
[268,276,287,279,279,277,289,289,0,274],
[271,282,295,283,270,272,280,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,268,298,308,278,273,257,284,276],
[257,0,267,251,260,259,275,248,265,266],
[282,283,0,299,308,272,298,275,289,285],
[252,299,251,0,291,250,289,249,263,249],
[242,290,242,259,0,248,255,247,254,258],
[272,291,278,300,302,0,295,263,282,277],
[277,275,252,261,295,255,0,243,280,268],
[293,302,275,301,303,287,307,0,292,269],
[266,285,261,287,296,268,270,258,0,266],
[274,284,265,301,292,273,282,281,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,276,273,283,267,236,274,266],
[275,0,262,269,274,284,244,257,282,258],
[282,288,0,281,283,290,249,255,278,262],
[274,281,269,0,245,272,246,243,264,246],
[277,276,267,305,0,304,251,264,285,281],
[267,266,260,278,246,0,244,247,260,272],
[283,306,301,304,299,306,0,269,309,297],
[314,293,295,307,286,303,281,0,297,264],
[276,268,272,286,265,290,241,253,0,267],
[284,292,288,304,269,278,253,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,254,275,287,317,278,298,281,283],
[268,0,298,313,264,332,253,344,275,259],
[296,252,0,324,274,276,232,312,302,232],
[275,237,226,0,236,277,211,299,244,238],
[263,286,276,314,0,320,248,306,304,266],
[233,218,274,273,230,0,234,291,238,199],
[272,297,318,339,302,316,0,353,326,308],
[252,206,238,251,244,259,197,0,259,205],
[269,275,248,306,246,312,224,291,0,250],
[267,291,318,312,284,351,242,345,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,331,305,301,286,285,301,288,274],
[267,0,302,278,281,309,267,290,277,249],
[219,248,0,302,270,286,249,255,270,248],
[245,272,248,0,264,270,240,276,273,258],
[249,269,280,286,0,252,235,263,268,248],
[264,241,264,280,298,0,263,260,260,249],
[265,283,301,310,315,287,0,289,310,293],
[249,260,295,274,287,290,261,0,265,272],
[262,273,280,277,282,290,240,285,0,266],
[276,301,302,292,302,301,257,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,222,288,260,275,256,285,264,251],
[300,0,300,317,273,325,278,303,277,277],
[328,250,0,299,279,302,283,290,286,245],
[262,233,251,0,271,268,280,280,249,272],
[290,277,271,279,0,295,258,293,256,272],
[275,225,248,282,255,0,284,277,253,273],
[294,272,267,270,292,266,0,301,296,264],
[265,247,260,270,257,273,249,0,269,251],
[286,273,264,301,294,297,254,281,0,260],
[299,273,305,278,278,277,286,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,277,287,287,269,318,270,286],
[263,0,301,302,298,278,231,300,296,277],
[266,249,0,272,233,251,209,269,253,260],
[273,248,278,0,280,236,244,315,302,304],
[263,252,317,270,0,252,224,274,244,285],
[263,272,299,314,298,0,287,302,286,278],
[281,319,341,306,326,263,0,302,283,324],
[232,250,281,235,276,248,248,0,252,243],
[280,254,297,248,306,264,267,298,0,289],
[264,273,290,246,265,272,226,307,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,257,270,243,274,265,257,248,258],
[292,0,293,281,269,288,269,259,257,279],
[293,257,0,270,257,282,285,253,257,252],
[280,269,280,0,239,284,271,252,257,275],
[307,281,293,311,0,283,281,277,269,277],
[276,262,268,266,267,0,264,257,238,257],
[285,281,265,279,269,286,0,269,271,273],
[293,291,297,298,273,293,281,0,251,288],
[302,293,293,293,281,312,279,299,0,271],
[292,271,298,275,273,293,277,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,281,249,276,285,266,251,294,266],
[293,0,268,254,255,285,294,269,294,276],
[269,282,0,255,269,263,280,289,301,253],
[301,296,295,0,273,292,291,267,314,283],
[274,295,281,277,0,288,282,262,304,277],
[265,265,287,258,262,0,262,261,300,257],
[284,256,270,259,268,288,0,261,270,273],
[299,281,261,283,288,289,289,0,308,289],
[256,256,249,236,246,250,280,242,0,237],
[284,274,297,267,273,293,277,261,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,277,282,275,276,301,264,278,315],
[294,0,285,309,286,305,298,306,270,289],
[273,265,0,263,251,281,287,284,256,281],
[268,241,287,0,277,281,293,260,257,268],
[275,264,299,273,0,275,267,285,259,283],
[274,245,269,269,275,0,277,288,266,285],
[249,252,263,257,283,273,0,269,250,266],
[286,244,266,290,265,262,281,0,248,280],
[272,280,294,293,291,284,300,302,0,299],
[235,261,269,282,267,265,284,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,292,269,292,264,279,305,246,266],
[281,0,278,261,280,286,296,275,287,280],
[258,272,0,274,280,278,269,272,269,278],
[281,289,276,0,300,281,284,323,280,258],
[258,270,270,250,0,304,275,275,245,252],
[286,264,272,269,246,0,253,286,246,270],
[271,254,281,266,275,297,0,274,267,286],
[245,275,278,227,275,264,276,0,263,279],
[304,263,281,270,305,304,283,287,0,289],
[284,270,272,292,298,280,264,271,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,240,274,259,264,281,260,232,273],
[265,0,279,260,240,269,273,245,240,272],
[310,271,0,271,278,267,293,264,272,301],
[276,290,279,0,243,277,315,221,279,275],
[291,310,272,307,0,285,308,282,283,306],
[286,281,283,273,265,0,282,257,261,294],
[269,277,257,235,242,268,0,240,233,285],
[290,305,286,329,268,293,310,0,285,324],
[318,310,278,271,267,289,317,265,0,312],
[277,278,249,275,244,256,265,226,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,247,252,248,276,275,285,285,255],
[271,0,220,246,237,263,277,272,262,231],
[303,330,0,281,274,310,322,299,307,293],
[298,304,269,0,277,278,304,267,286,285],
[302,313,276,273,0,290,314,277,306,278],
[274,287,240,272,260,0,291,273,293,266],
[275,273,228,246,236,259,0,250,273,244],
[265,278,251,283,273,277,300,0,307,252],
[265,288,243,264,244,257,277,243,0,262],
[295,319,257,265,272,284,306,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,255,280,268,259,237,271,251,265],
[290,0,275,274,259,252,254,287,295,260],
[295,275,0,279,253,280,265,273,255,270],
[270,276,271,0,265,271,258,290,255,252],
[282,291,297,285,0,278,249,263,286,271],
[291,298,270,279,272,0,273,291,267,277],
[313,296,285,292,301,277,0,285,273,295],
[279,263,277,260,287,259,265,0,272,259],
[299,255,295,295,264,283,277,278,0,268],
[285,290,280,298,279,273,255,291,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,299,267,287,258,281,270,329,286],
[250,0,290,235,261,271,263,227,288,246],
[251,260,0,248,255,247,242,237,282,247],
[283,315,302,0,254,281,254,294,302,286],
[263,289,295,296,0,256,272,253,301,266],
[292,279,303,269,294,0,269,305,324,265],
[269,287,308,296,278,281,0,271,303,285],
[280,323,313,256,297,245,279,0,321,267],
[221,262,268,248,249,226,247,229,0,241],
[264,304,303,264,284,285,265,283,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,380,355,308,213,311,354,200,283],
[350,0,384,374,458,262,384,399,282,246],
[170,166,0,346,332,285,284,226,124,207],
[195,176,204,0,274,103,289,376,164,157],
[242,92,218,276,0,216,209,231,215,98],
[337,288,265,447,334,0,314,355,319,315],
[239,166,266,261,341,236,0,210,198,148],
[196,151,324,174,319,195,340,0,182,175],
[350,268,426,386,335,231,352,368,0,264],
[267,304,343,393,452,235,402,375,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,262,264,252,259,256,255,251,260],
[298,0,274,294,272,283,283,286,275,292],
[288,276,0,276,269,295,283,278,269,278],
[286,256,274,0,264,305,267,282,259,279],
[298,278,281,286,0,286,281,278,275,292],
[291,267,255,245,264,0,267,256,266,273],
[294,267,267,283,269,283,0,263,261,295],
[295,264,272,268,272,294,287,0,267,284],
[299,275,281,291,275,284,289,283,0,282],
[290,258,272,271,258,277,255,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,262,294,271,267,279,292,296,287],
[256,0,266,273,301,255,273,250,308,221],
[288,284,0,291,290,263,292,289,306,274],
[256,277,259,0,279,292,293,300,303,277],
[279,249,260,271,0,270,293,282,293,285],
[283,295,287,258,280,0,273,266,296,274],
[271,277,258,257,257,277,0,268,268,255],
[258,300,261,250,268,284,282,0,284,240],
[254,242,244,247,257,254,282,266,0,232],
[263,329,276,273,265,276,295,310,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,291,275,271,252,295,275,276,289],
[257,0,281,258,260,251,275,263,260,266],
[259,269,0,251,256,259,262,257,281,287],
[275,292,299,0,268,279,283,284,272,292],
[279,290,294,282,0,272,289,278,288,292],
[298,299,291,271,278,0,283,292,268,299],
[255,275,288,267,261,267,0,279,267,278],
[275,287,293,266,272,258,271,0,283,285],
[274,290,269,278,262,282,283,267,0,292],
[261,284,263,258,258,251,272,265,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,286,250,259,285,274,287,272,265],
[294,0,274,282,276,287,321,280,253,290],
[264,276,0,266,278,252,307,272,244,246],
[300,268,284,0,289,291,320,276,249,284],
[291,274,272,261,0,295,298,317,289,302],
[265,263,298,259,255,0,293,273,255,267],
[276,229,243,230,252,257,0,233,278,266],
[263,270,278,274,233,277,317,0,249,269],
[278,297,306,301,261,295,272,301,0,287],
[285,260,304,266,248,283,284,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,260,267,277,303,264,267,272,277],
[294,0,255,295,300,295,279,291,276,283],
[290,295,0,273,283,287,277,275,278,279],
[283,255,277,0,285,274,269,280,266,268],
[273,250,267,265,0,264,274,274,270,255],
[247,255,263,276,286,0,290,261,264,269],
[286,271,273,281,276,260,0,257,284,257],
[283,259,275,270,276,289,293,0,270,269],
[278,274,272,284,280,286,266,280,0,275],
[273,267,271,282,295,281,293,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,279,251,259,286,276,290,249],
[281,0,300,289,262,273,295,275,297,277],
[264,250,0,280,248,234,272,251,274,248],
[271,261,270,0,246,269,291,256,282,256],
[299,288,302,304,0,284,309,266,302,285],
[291,277,316,281,266,0,279,255,276,261],
[264,255,278,259,241,271,0,256,274,265],
[274,275,299,294,284,295,294,0,282,258],
[260,253,276,268,248,274,276,268,0,271],
[301,273,302,294,265,289,285,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,255,270,270,275,242,271,262,253],
[258,0,244,268,247,238,228,247,242,237],
[295,306,0,313,301,277,263,288,294,259],
[280,282,237,0,248,277,232,251,241,250],
[280,303,249,302,0,287,287,286,288,271],
[275,312,273,273,263,0,268,267,240,269],
[308,322,287,318,263,282,0,285,299,302],
[279,303,262,299,264,283,265,0,279,257],
[288,308,256,309,262,310,251,271,0,275],
[297,313,291,300,279,281,248,293,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,295,259,260,269,272,266,277],
[268,0,263,301,263,259,262,265,272,278],
[266,287,0,289,255,267,277,275,257,273],
[255,249,261,0,231,246,250,260,236,260],
[291,287,295,319,0,267,269,285,278,290],
[290,291,283,304,283,0,271,277,273,281],
[281,288,273,300,281,279,0,299,267,287],
[278,285,275,290,265,273,251,0,269,259],
[284,278,293,314,272,277,283,281,0,299],
[273,272,277,290,260,269,263,291,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,279,318,192,279,250,157,168,325],
[322,0,425,371,325,335,290,283,208,366],
[271,125,0,196,225,216,308,93,155,190],
[232,179,354,0,186,169,232,116,209,335],
[358,225,325,364,0,418,242,266,305,312],
[271,215,334,381,132,0,354,90,155,312],
[300,260,242,318,308,196,0,176,277,219],
[393,267,457,434,284,460,374,0,284,312],
[382,342,395,341,245,395,273,266,0,273],
[225,184,360,215,238,238,331,238,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,246,275,291,253,279,284,279,258],
[262,0,281,263,240,246,292,283,284,272],
[304,269,0,236,246,252,303,282,291,276],
[275,287,314,0,302,273,323,323,282,306],
[259,310,304,248,0,294,323,289,285,292],
[297,304,298,277,256,0,323,285,293,270],
[271,258,247,227,227,227,0,260,266,228],
[266,267,268,227,261,265,290,0,302,284],
[271,266,259,268,265,257,284,248,0,262],
[292,278,274,244,258,280,322,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,300,285,268,274,294,283,297,277],
[274,0,276,284,269,255,278,266,296,278],
[250,274,0,268,268,256,282,263,280,260],
[265,266,282,0,253,269,280,271,281,262],
[282,281,282,297,0,280,286,280,268,255],
[276,295,294,281,270,0,277,283,291,276],
[256,272,268,270,264,273,0,275,287,261],
[267,284,287,279,270,267,275,0,286,272],
[253,254,270,269,282,259,263,264,0,259],
[273,272,290,288,295,274,289,278,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,312,266,279,269,279,243,307,276],
[282,0,323,297,288,287,294,262,308,278],
[238,227,0,256,256,264,248,235,268,258],
[284,253,294,0,302,294,283,266,288,283],
[271,262,294,248,0,288,267,282,267,281],
[281,263,286,256,262,0,285,256,290,282],
[271,256,302,267,283,265,0,257,282,291],
[307,288,315,284,268,294,293,0,325,295],
[243,242,282,262,283,260,268,225,0,242],
[274,272,292,267,269,268,259,255,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,237,215,243,318,240,213,228,301],
[310,0,257,253,215,331,259,259,180,276],
[313,293,0,240,246,324,308,231,220,250],
[335,297,310,0,201,343,281,228,211,300],
[307,335,304,349,0,409,308,329,257,370],
[232,219,226,207,141,0,232,228,223,227],
[310,291,242,269,242,318,0,276,258,297],
[337,291,319,322,221,322,274,0,281,291],
[322,370,330,339,293,327,292,269,0,320],
[249,274,300,250,180,323,253,259,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,236,264,334,254,304,269,265,258],
[283,0,317,238,307,278,280,295,283,281],
[314,233,0,301,301,291,248,289,287,270],
[286,312,249,0,288,301,239,329,240,238],
[216,243,249,262,0,227,242,271,250,240],
[296,272,259,249,323,0,237,293,217,248],
[246,270,302,311,308,313,0,297,264,250],
[281,255,261,221,279,257,253,0,229,273],
[285,267,263,310,300,333,286,321,0,278],
[292,269,280,312,310,302,300,277,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,247,279,293,277,296,303,261,258],
[295,0,266,285,308,280,297,296,285,268],
[303,284,0,303,317,300,320,287,304,275],
[271,265,247,0,293,269,292,296,283,263],
[257,242,233,257,0,274,271,265,259,242],
[273,270,250,281,276,0,293,306,292,248],
[254,253,230,258,279,257,0,273,249,238],
[247,254,263,254,285,244,277,0,248,245],
[289,265,246,267,291,258,301,302,0,279],
[292,282,275,287,308,302,312,305,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,368,191,235,405,225,85,368,225,320],
[182,0,238,272,47,272,230,367,235,47],
[359,312,0,322,359,349,182,455,177,322],
[315,278,228,0,180,37,172,315,0,278],
[145,503,191,370,0,360,193,455,225,465],
[325,278,201,513,190,0,373,278,191,288],
[465,320,368,378,357,177,0,320,368,320],
[182,183,95,235,95,272,230,0,235,145],
[325,315,373,550,325,359,182,315,0,325],
[230,503,228,272,85,262,230,405,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,274,255,256,261,261,273,275,275],
[299,0,288,270,245,263,269,283,262,279],
[276,262,0,250,251,245,262,259,268,260],
[295,280,300,0,273,295,298,290,287,277],
[294,305,299,277,0,284,301,289,273,280],
[289,287,305,255,266,0,293,282,283,282],
[289,281,288,252,249,257,0,278,262,253],
[277,267,291,260,261,268,272,0,279,259],
[275,288,282,263,277,267,288,271,0,283],
[275,271,290,273,270,268,297,291,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,252,244,273,277,252,231,260],
[298,0,285,276,284,297,300,303,278,267],
[290,265,0,277,257,255,276,273,267,293],
[298,274,273,0,280,307,304,273,262,293],
[306,266,293,270,0,290,297,287,273,297],
[277,253,295,243,260,0,265,257,252,263],
[273,250,274,246,253,285,0,262,252,254],
[298,247,277,277,263,293,288,0,255,283],
[319,272,283,288,277,298,298,295,0,271],
[290,283,257,257,253,287,296,267,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,262,266,274,280,267,259,288,266],
[278,0,263,263,259,277,265,256,271,273],
[288,287,0,283,295,296,275,286,291,295],
[284,287,267,0,292,291,278,290,288,279],
[276,291,255,258,0,283,265,276,293,280],
[270,273,254,259,267,0,264,265,276,270],
[283,285,275,272,285,286,0,284,285,288],
[291,294,264,260,274,285,266,0,292,287],
[262,279,259,262,257,274,265,258,0,266],
[284,277,255,271,270,280,262,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,267,268,282,273,292,275,274,274],
[248,0,245,262,270,243,259,257,258,242],
[283,305,0,289,298,296,305,281,283,274],
[282,288,261,0,289,268,272,276,266,269],
[268,280,252,261,0,265,277,261,259,268],
[277,307,254,282,285,0,277,269,274,268],
[258,291,245,278,273,273,0,272,257,259],
[275,293,269,274,289,281,278,0,275,275],
[276,292,267,284,291,276,293,275,0,256],
[276,308,276,281,282,282,291,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,294,269,307,284,290,285,286,280],
[246,0,274,250,275,267,259,280,282,246],
[256,276,0,260,300,254,271,285,275,274],
[281,300,290,0,306,284,273,293,282,303],
[243,275,250,244,0,256,267,250,274,259],
[266,283,296,266,294,0,296,297,273,299],
[260,291,279,277,283,254,0,257,287,285],
[265,270,265,257,300,253,293,0,276,282],
[264,268,275,268,276,277,263,274,0,269],
[270,304,276,247,291,251,265,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,266,264,274,270,252,252,269],
[291,0,290,279,281,265,276,272,269,278],
[279,260,0,256,277,266,273,267,260,288],
[284,271,294,0,267,277,259,259,269,286],
[286,269,273,283,0,281,280,290,277,304],
[276,285,284,273,269,0,291,279,268,289],
[280,274,277,291,270,259,0,274,282,299],
[298,278,283,291,260,271,276,0,275,307],
[298,281,290,281,273,282,268,275,0,300],
[281,272,262,264,246,261,251,243,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,284,284,285,279,282,279,277],
[277,0,279,283,258,270,238,280,262,265],
[261,271,0,299,266,280,218,269,262,255],
[266,267,251,0,254,282,214,271,235,267],
[266,292,284,296,0,283,272,264,276,286],
[265,280,270,268,267,0,252,261,256,270],
[271,312,332,336,278,298,0,316,283,314],
[268,270,281,279,286,289,234,0,264,262],
[271,288,288,315,274,294,267,286,0,277],
[273,285,295,283,264,280,236,288,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,269,295,287,283,289,305,276,285],
[251,0,263,271,258,264,276,279,276,261],
[281,287,0,280,276,280,280,291,277,271],
[255,279,270,0,269,269,264,278,271,271],
[263,292,274,281,0,285,283,281,302,267],
[267,286,270,281,265,0,280,276,273,270],
[261,274,270,286,267,270,0,278,262,273],
[245,271,259,272,269,274,272,0,266,261],
[274,274,273,279,248,277,288,284,0,267],
[265,289,279,279,283,280,277,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,261,259,265,278,286,255,260,282],
[286,0,258,277,291,274,288,259,279,289],
[289,292,0,269,295,296,294,286,291,294],
[291,273,281,0,292,295,286,273,296,302],
[285,259,255,258,0,264,279,253,261,276],
[272,276,254,255,286,0,274,265,271,268],
[264,262,256,264,271,276,0,246,276,261],
[295,291,264,277,297,285,304,0,293,293],
[290,271,259,254,289,279,274,257,0,284],
[268,261,256,248,274,282,289,257,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,255,262,275,248,247,260,265,269],
[279,0,282,263,279,251,248,265,267,251],
[295,268,0,283,296,272,278,272,277,253],
[288,287,267,0,275,259,252,265,261,254],
[275,271,254,275,0,258,267,265,274,255],
[302,299,278,291,292,0,268,277,268,260],
[303,302,272,298,283,282,0,268,275,278],
[290,285,278,285,285,273,282,0,275,266],
[285,283,273,289,276,282,275,275,0,275],
[281,299,297,296,295,290,272,284,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,269,269,264,278,253,276,273],
[271,0,276,271,275,261,281,265,278,283],
[284,274,0,286,278,282,293,271,289,282],
[281,279,264,0,272,256,269,252,275,279],
[281,275,272,278,0,269,263,262,271,271],
[286,289,268,294,281,0,287,267,283,267],
[272,269,257,281,287,263,0,264,281,257],
[297,285,279,298,288,283,286,0,285,273],
[274,272,261,275,279,267,269,265,0,275],
[277,267,268,271,279,283,293,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,284,277,299,265,284,258,295],
[277,0,259,269,299,283,266,279,271,294],
[273,291,0,302,272,293,272,276,286,300],
[266,281,248,0,270,269,264,311,290,301],
[273,251,278,280,0,270,257,291,289,284],
[251,267,257,281,280,0,275,290,287,290],
[285,284,278,286,293,275,0,282,275,292],
[266,271,274,239,259,260,268,0,247,298],
[292,279,264,260,261,263,275,303,0,300],
[255,256,250,249,266,260,258,252,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,270,281,262,265,274,291,226,248],
[260,0,290,273,290,286,257,293,272,297],
[280,260,0,287,289,292,271,301,260,278],
[269,277,263,0,291,283,275,270,245,264],
[288,260,261,259,0,293,272,270,245,270],
[285,264,258,267,257,0,233,274,225,249],
[276,293,279,275,278,317,0,301,277,293],
[259,257,249,280,280,276,249,0,261,262],
[324,278,290,305,305,325,273,289,0,280],
[302,253,272,286,280,301,257,288,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,323,311,289,313,289,313,291,287],
[275,0,300,305,304,271,305,296,302,295],
[227,250,0,254,306,267,282,271,276,258],
[239,245,296,0,264,248,268,262,280,266],
[261,246,244,286,0,254,282,278,287,242],
[237,279,283,302,296,0,278,273,302,280],
[261,245,268,282,268,272,0,277,275,279],
[237,254,279,288,272,277,273,0,265,254],
[259,248,274,270,263,248,275,285,0,252],
[263,255,292,284,308,270,271,296,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,244,288,232,247,258,268,229,227],
[319,0,261,302,284,254,294,333,292,257],
[306,289,0,263,259,204,294,279,259,241],
[262,248,287,0,287,213,308,332,310,248],
[318,266,291,263,0,247,303,329,276,308],
[303,296,346,337,303,0,321,334,267,264],
[292,256,256,242,247,229,0,274,287,230],
[282,217,271,218,221,216,276,0,224,238],
[321,258,291,240,274,283,263,326,0,247],
[323,293,309,302,242,286,320,312,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,251,292,262,263,258,278,272,289],
[269,0,269,282,278,276,247,281,281,249],
[299,281,0,294,290,272,262,294,282,305],
[258,268,256,0,280,272,255,264,253,268],
[288,272,260,270,0,274,257,284,272,278],
[287,274,278,278,276,0,276,272,273,274],
[292,303,288,295,293,274,0,293,284,288],
[272,269,256,286,266,278,257,0,275,301],
[278,269,268,297,278,277,266,275,0,266],
[261,301,245,282,272,276,262,249,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,224,352,282,235,292,331,281,280],
[285,0,258,407,334,287,316,385,322,347],
[326,292,0,368,376,263,327,415,353,376],
[198,143,182,0,256,172,244,247,231,197],
[268,216,174,294,0,262,186,302,273,240],
[315,263,287,378,288,0,245,362,321,309],
[258,234,223,306,364,305,0,306,228,275],
[219,165,135,303,248,188,244,0,253,223],
[269,228,197,319,277,229,322,297,0,232],
[270,203,174,353,310,241,275,327,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,295,266,280,257,273,247,274,248],
[278,0,289,288,263,279,262,260,269,250],
[255,261,0,275,249,271,257,238,250,254],
[284,262,275,0,258,277,275,271,254,251],
[270,287,301,292,0,276,284,267,273,283],
[293,271,279,273,274,0,272,268,268,259],
[277,288,293,275,266,278,0,254,267,262],
[303,290,312,279,283,282,296,0,289,267],
[276,281,300,296,277,282,283,261,0,269],
[302,300,296,299,267,291,288,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,218,222,244,290,367,297,278,221],
[243,0,218,283,294,252,367,302,227,308],
[332,332,0,291,272,243,372,275,233,313],
[328,267,259,0,333,340,283,340,238,288],
[306,256,278,217,0,327,327,321,204,264],
[260,298,307,210,223,0,350,331,236,222],
[183,183,178,267,223,200,0,186,115,246],
[253,248,275,210,229,219,364,0,253,299],
[272,323,317,312,346,314,435,297,0,363],
[329,242,237,262,286,328,304,251,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,286,281,274,262,272,268,281,279],
[279,0,288,302,289,289,284,272,266,292],
[264,262,0,275,266,282,271,264,256,268],
[269,248,275,0,280,276,285,264,280,294],
[276,261,284,270,0,281,274,261,268,279],
[288,261,268,274,269,0,275,250,266,292],
[278,266,279,265,276,275,0,285,269,285],
[282,278,286,286,289,300,265,0,293,309],
[269,284,294,270,282,284,281,257,0,293],
[271,258,282,256,271,258,265,241,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,254,313,317,321,273,267,245,264],
[296,0,298,253,255,293,268,261,251,279],
[296,252,0,280,320,339,270,276,227,268],
[237,297,270,0,276,294,280,265,235,191],
[233,295,230,274,0,318,247,286,255,241],
[229,257,211,256,232,0,209,302,247,169],
[277,282,280,270,303,341,0,252,269,237],
[283,289,274,285,264,248,298,0,224,212],
[305,299,323,315,295,303,281,326,0,238],
[286,271,282,359,309,381,313,338,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,260,276,276,274,280,272,286],
[269,0,260,250,277,291,267,258,274,259],
[283,290,0,266,275,275,282,273,296,257],
[290,300,284,0,290,279,265,281,290,272],
[274,273,275,260,0,268,256,266,267,270],
[274,259,275,271,282,0,248,271,286,273],
[276,283,268,285,294,302,0,264,284,290],
[270,292,277,269,284,279,286,0,281,275],
[278,276,254,260,283,264,266,269,0,267],
[264,291,293,278,280,277,260,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,288,268,287,279,274,274,280],
[276,0,289,299,270,279,283,286,280,278],
[266,261,0,295,263,280,270,285,271,272],
[262,251,255,0,262,288,267,282,243,258],
[282,280,287,288,0,292,279,281,272,269],
[263,271,270,262,258,0,261,264,270,272],
[271,267,280,283,271,289,0,279,263,260],
[276,264,265,268,269,286,271,0,270,265],
[276,270,279,307,278,280,287,280,0,283],
[270,272,278,292,281,278,290,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,298,366,294,295,378,344,262,324],
[248,0,237,334,288,282,304,253,319,267],
[252,313,0,327,296,248,334,325,356,280],
[184,216,223,0,237,222,235,219,196,256],
[256,262,254,313,0,301,273,267,242,304],
[255,268,302,328,249,0,278,306,282,275],
[172,246,216,315,277,272,0,312,255,218],
[206,297,225,331,283,244,238,0,190,281],
[288,231,194,354,308,268,295,360,0,291],
[226,283,270,294,246,275,332,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,271,311,316,290,292,254,299],
[262,0,301,285,356,294,198,227,268,242],
[266,249,0,325,331,301,278,288,256,263],
[279,265,225,0,387,335,242,274,238,255],
[239,194,219,163,0,231,202,182,224,192],
[234,256,249,215,319,0,222,256,235,213],
[260,352,272,308,348,328,0,235,317,203],
[258,323,262,276,368,294,315,0,238,255],
[296,282,294,312,326,315,233,312,0,295],
[251,308,287,295,358,337,347,295,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,298,273,280,283,290,295,304,299],
[256,0,290,273,279,266,263,273,273,279],
[252,260,0,260,268,263,276,259,267,274],
[277,277,290,0,290,274,282,258,277,283],
[270,271,282,260,0,243,297,267,259,274],
[267,284,287,276,307,0,267,251,281,272],
[260,287,274,268,253,283,0,271,266,277],
[255,277,291,292,283,299,279,0,277,294],
[246,277,283,273,291,269,284,273,0,284],
[251,271,276,267,276,278,273,256,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,296,281,271,261,242,252,269,236],
[294,0,268,279,274,295,264,242,276,306],
[254,282,0,275,271,261,288,266,279,267],
[269,271,275,0,282,276,256,262,250,288],
[279,276,279,268,0,289,249,276,283,270],
[289,255,289,274,261,0,273,282,265,261],
[308,286,262,294,301,277,0,278,291,315],
[298,308,284,288,274,268,272,0,297,285],
[281,274,271,300,267,285,259,253,0,279],
[314,244,283,262,280,289,235,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,325,273,266,254,290,293,330,292],
[241,0,296,275,276,275,263,279,293,289],
[225,254,0,262,232,263,209,233,269,245],
[277,275,288,0,274,256,248,272,282,301],
[284,274,318,276,0,316,260,289,280,272],
[296,275,287,294,234,0,238,278,284,287],
[260,287,341,302,290,312,0,288,302,295],
[257,271,317,278,261,272,262,0,308,293],
[220,257,281,268,270,266,248,242,0,237],
[258,261,305,249,278,263,255,257,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,303,304,290,273,280,289,253,276],
[258,0,272,281,278,293,260,301,273,250],
[247,278,0,266,268,251,255,286,224,254],
[246,269,284,0,259,257,229,295,257,263],
[260,272,282,291,0,281,263,290,250,266],
[277,257,299,293,269,0,261,300,277,288],
[270,290,295,321,287,289,0,305,262,294],
[261,249,264,255,260,250,245,0,231,256],
[297,277,326,293,300,273,288,319,0,277],
[274,300,296,287,284,262,256,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,264,288,277,288,282,266,265],
[284,0,283,273,288,266,271,279,268,267],
[276,267,0,274,271,269,284,279,266,270],
[286,277,276,0,289,273,301,296,259,286],
[262,262,279,261,0,252,272,275,271,265],
[273,284,281,277,298,0,275,291,262,269],
[262,279,266,249,278,275,0,270,264,250],
[268,271,271,254,275,259,280,0,254,257],
[284,282,284,291,279,288,286,296,0,260],
[285,283,280,264,285,281,300,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,259,284,300,276,263,275,261,275],
[266,0,281,249,295,290,260,245,269,274],
[291,269,0,280,290,294,281,268,276,286],
[266,301,270,0,268,296,264,275,258,282],
[250,255,260,282,0,272,242,257,245,267],
[274,260,256,254,278,0,267,261,253,268],
[287,290,269,286,308,283,0,272,283,296],
[275,305,282,275,293,289,278,0,266,283],
[289,281,274,292,305,297,267,284,0,301],
[275,276,264,268,283,282,254,267,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,285,298,289,263,277,292,290],
[260,0,266,273,277,278,246,264,281,269],
[264,284,0,276,291,287,254,269,291,281],
[265,277,274,0,264,260,252,261,274,262],
[252,273,259,286,0,271,249,259,265,274],
[261,272,263,290,279,0,261,279,300,271],
[287,304,296,298,301,289,0,275,292,295],
[273,286,281,289,291,271,275,0,298,283],
[258,269,259,276,285,250,258,252,0,265],
[260,281,269,288,276,279,255,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,295,282,265,282,295,291,273,280],
[261,0,291,258,285,269,285,293,263,278],
[255,259,0,261,269,273,266,284,262,258],
[268,292,289,0,271,275,289,286,272,280],
[285,265,281,279,0,265,303,302,275,291],
[268,281,277,275,285,0,275,295,269,282],
[255,265,284,261,247,275,0,278,255,276],
[259,257,266,264,248,255,272,0,239,265],
[277,287,288,278,275,281,295,311,0,284],
[270,272,292,270,259,268,274,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,238,240,238,301,265,263,235,236],
[299,0,314,261,277,310,266,283,279,270],
[312,236,0,269,272,305,270,283,244,238],
[310,289,281,0,295,338,282,285,253,273],
[312,273,278,255,0,311,257,274,238,274],
[249,240,245,212,239,0,242,232,213,224],
[285,284,280,268,293,308,0,291,263,257],
[287,267,267,265,276,318,259,0,253,279],
[315,271,306,297,312,337,287,297,0,282],
[314,280,312,277,276,326,293,271,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,283,277,270,262,270,275,269],
[284,0,279,279,292,267,270,263,252,277],
[276,271,0,279,279,256,261,285,278,271],
[267,271,271,0,264,256,273,271,251,270],
[273,258,271,286,0,257,267,255,256,272],
[280,283,294,294,293,0,289,281,268,287],
[288,280,289,277,283,261,0,281,277,282],
[280,287,265,279,295,269,269,0,275,258],
[275,298,272,299,294,282,273,275,0,272],
[281,273,279,280,278,263,268,292,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,297,282,275,278,277,281,296,263],
[271,0,279,277,261,265,293,277,287,281],
[253,271,0,260,262,274,290,283,289,271],
[268,273,290,0,262,273,271,308,300,269],
[275,289,288,288,0,292,299,281,304,280],
[272,285,276,277,258,0,270,295,304,287],
[273,257,260,279,251,280,0,264,298,269],
[269,273,267,242,269,255,286,0,273,248],
[254,263,261,250,246,246,252,277,0,234],
[287,269,279,281,270,263,281,302,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,282,270,294,275,292,285,282],
[257,0,262,267,269,276,257,273,267,265],
[268,288,0,277,286,277,285,302,290,310],
[268,283,273,0,266,272,280,297,280,289],
[280,281,264,284,0,289,273,280,265,286],
[256,274,273,278,261,0,267,279,276,265],
[275,293,265,270,277,283,0,288,275,295],
[258,277,248,253,270,271,262,0,264,284],
[265,283,260,270,285,274,275,286,0,280],
[268,285,240,261,264,285,255,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,286,268,248,266,319,320,298,313],
[252,0,307,260,236,249,245,291,243,250],
[264,243,0,191,254,273,270,284,281,268],
[282,290,359,0,293,336,290,291,272,297],
[302,314,296,257,0,331,264,252,289,266],
[284,301,277,214,219,0,248,310,248,295],
[231,305,280,260,286,302,0,337,302,322],
[230,259,266,259,298,240,213,0,288,251],
[252,307,269,278,261,302,248,262,0,281],
[237,300,282,253,284,255,228,299,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,237,240,254,214,260,231,218,246],
[310,0,290,264,263,277,285,245,247,231],
[313,260,0,270,266,265,278,242,260,272],
[310,286,280,0,294,268,302,279,292,285],
[296,287,284,256,0,267,299,269,264,275],
[336,273,285,282,283,0,286,280,259,280],
[290,265,272,248,251,264,0,230,249,246],
[319,305,308,271,281,270,320,0,290,288],
[332,303,290,258,286,291,301,260,0,280],
[304,319,278,265,275,270,304,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,275,282,296,310,284,281,275,275],
[255,0,248,269,271,280,270,247,234,259],
[275,302,0,277,311,302,289,282,266,273],
[268,281,273,0,301,303,294,292,268,269],
[254,279,239,249,0,266,270,255,249,247],
[240,270,248,247,284,0,268,247,237,242],
[266,280,261,256,280,282,0,245,245,266],
[269,303,268,258,295,303,305,0,249,269],
[275,316,284,282,301,313,305,301,0,292],
[275,291,277,281,303,308,284,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,367,351,301,294,349,250,354,319],
[232,0,399,340,294,321,234,260,249,344],
[183,151,0,152,219,257,301,194,203,273],
[199,210,398,0,326,336,301,253,198,315],
[249,256,331,224,0,151,209,199,220,184],
[256,229,293,214,399,0,259,179,140,278],
[201,316,249,249,341,291,0,258,242,288],
[300,290,356,297,351,371,292,0,168,287],
[196,301,347,352,330,410,308,382,0,383],
[231,206,277,235,366,272,262,263,167,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,239,259,246,244,278,275,282,269],
[304,0,248,289,294,250,288,291,294,286],
[311,302,0,277,266,282,280,280,282,271],
[291,261,273,0,244,253,280,286,291,308],
[304,256,284,306,0,262,265,285,276,295],
[306,300,268,297,288,0,311,311,284,302],
[272,262,270,270,285,239,0,295,264,294],
[275,259,270,264,265,239,255,0,256,280],
[268,256,268,259,274,266,286,294,0,287],
[281,264,279,242,255,248,256,270,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,294,243,271,266,275,297,281],
[288,0,287,291,262,290,291,289,301,290],
[270,263,0,268,255,270,294,286,268,280],
[256,259,282,0,255,254,262,257,282,264],
[307,288,295,295,0,280,303,269,299,290],
[279,260,280,296,270,0,259,270,297,280],
[284,259,256,288,247,291,0,283,297,292],
[275,261,264,293,281,280,267,0,289,286],
[253,249,282,268,251,253,253,261,0,280],
[269,260,270,286,260,270,258,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,270,256,269,267,269,250,316,258],
[284,0,284,260,290,272,282,288,306,297],
[280,266,0,266,271,261,293,272,307,280],
[294,290,284,0,288,296,281,272,316,270],
[281,260,279,262,0,273,283,281,321,256],
[283,278,289,254,277,0,290,258,309,280],
[281,268,257,269,267,260,0,257,299,283],
[300,262,278,278,269,292,293,0,319,284],
[234,244,243,234,229,241,251,231,0,247],
[292,253,270,280,294,270,267,266,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,293,256,258,300,264,259,281,255],
[281,0,279,294,273,306,280,303,278,311],
[257,271,0,245,255,289,255,254,239,270],
[294,256,305,0,267,317,294,292,280,299],
[292,277,295,283,0,284,290,294,283,255],
[250,244,261,233,266,0,264,245,255,264],
[286,270,295,256,260,286,0,255,258,290],
[291,247,296,258,256,305,295,0,264,288],
[269,272,311,270,267,295,292,286,0,267],
[295,239,280,251,295,286,260,262,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,252,234,264,253,283,293,251,273],
[302,0,270,275,291,284,291,312,296,319],
[298,280,0,263,274,278,288,272,292,281],
[316,275,287,0,287,260,310,291,302,288],
[286,259,276,263,0,266,293,295,275,290],
[297,266,272,290,284,0,295,307,287,303],
[267,259,262,240,257,255,0,265,274,284],
[257,238,278,259,255,243,285,0,270,292],
[299,254,258,248,275,263,276,280,0,287],
[277,231,269,262,260,247,266,258,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,323,359,273,340,263,371,361,277],
[262,0,427,378,335,352,310,304,338,231],
[227,123,0,362,244,267,104,248,214,166],
[191,172,188,0,155,290,41,149,192,155],
[277,215,306,395,0,344,291,331,289,148],
[210,198,283,260,206,0,125,204,243,190],
[287,240,446,509,259,425,0,324,265,333],
[179,246,302,401,219,346,226,0,324,179],
[189,212,336,358,261,307,285,226,0,237],
[273,319,384,395,402,360,217,371,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,278,278,264,270,241,278,244],
[290,0,283,292,286,276,285,263,278,275],
[283,267,0,274,271,272,264,254,270,289],
[272,258,276,0,255,284,270,260,279,252],
[272,264,279,295,0,278,272,278,286,271],
[286,274,278,266,272,0,257,256,285,277],
[280,265,286,280,278,293,0,260,281,256],
[309,287,296,290,272,294,290,0,278,298],
[272,272,280,271,264,265,269,272,0,272],
[306,275,261,298,279,273,294,252,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,303,294,288,295,284,303,275,300],
[265,0,293,285,286,287,276,283,278,282],
[247,257,0,273,277,271,255,265,273,279],
[256,265,277,0,275,270,266,285,254,286],
[262,264,273,275,0,276,256,260,268,278],
[255,263,279,280,274,0,261,283,268,271],
[266,274,295,284,294,289,0,273,279,292],
[247,267,285,265,290,267,277,0,273,282],
[275,272,277,296,282,282,271,277,0,299],
[250,268,271,264,272,279,258,268,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,269,267,283,264,252,274,291],
[288,0,303,293,294,298,292,269,294,291],
[269,247,0,270,261,286,262,253,271,272],
[281,257,280,0,278,285,264,256,283,277],
[283,256,289,272,0,291,275,269,274,278],
[267,252,264,265,259,0,261,262,267,256],
[286,258,288,286,275,289,0,283,287,298],
[298,281,297,294,281,288,267,0,293,275],
[276,256,279,267,276,283,263,257,0,268],
[259,259,278,273,272,294,252,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,271,270,229,245,275,283,261,236],
[309,0,301,290,250,269,288,284,284,257],
[279,249,0,253,249,244,293,282,263,234],
[280,260,297,0,226,271,309,312,287,236],
[321,300,301,324,0,283,326,320,318,249],
[305,281,306,279,267,0,302,297,278,277],
[275,262,257,241,224,248,0,249,256,208],
[267,266,268,238,230,253,301,0,289,244],
[289,266,287,263,232,272,294,261,0,234],
[314,293,316,314,301,273,342,306,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,277,266,277,270,278,272,282],
[287,0,275,268,264,284,276,279,287,282],
[284,275,0,277,269,284,289,275,276,297],
[273,282,273,0,283,277,294,282,302,285],
[284,286,281,267,0,283,284,284,281,288],
[273,266,266,273,267,0,290,270,274,292],
[280,274,261,256,266,260,0,270,266,271],
[272,271,275,268,266,280,280,0,280,282],
[278,263,274,248,269,276,284,270,0,275],
[268,268,253,265,262,258,279,268,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,174,465,469,550,384,428,433,381],
[205,0,205,465,327,327,246,428,327,327],
[376,345,0,514,550,514,246,428,433,550],
[85,85,36,0,209,166,36,347,207,121],
[81,223,0,341,0,219,0,428,122,219],
[0,223,36,384,331,0,36,347,122,121],
[166,304,304,514,550,514,0,428,514,426],
[122,122,122,203,122,203,122,0,122,122],
[117,223,117,343,428,428,36,428,0,340],
[169,223,0,429,331,429,124,428,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,263,272,272,259,266,274,282,268],
[285,0,267,285,279,284,285,296,294,282],
[287,283,0,274,303,262,288,299,283,278],
[278,265,276,0,281,259,268,279,302,261],
[278,271,247,269,0,258,256,265,284,266],
[291,266,288,291,292,0,281,308,316,279],
[284,265,262,282,294,269,0,277,299,266],
[276,254,251,271,285,242,273,0,288,258],
[268,256,267,248,266,234,251,262,0,260],
[282,268,272,289,284,271,284,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,284,277,257,217,265,272,247],
[288,0,287,273,296,253,271,280,291,295],
[290,263,0,299,288,251,267,289,288,265],
[266,277,251,0,302,239,228,302,284,252],
[273,254,262,248,0,276,224,279,287,296],
[293,297,299,311,274,0,275,306,263,288],
[333,279,283,322,326,275,0,331,296,294],
[285,270,261,248,271,244,219,0,263,248],
[278,259,262,266,263,287,254,287,0,251],
[303,255,285,298,254,262,256,302,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,287,289,286,298,258,270,281,319],
[291,0,280,288,281,300,284,268,265,281],
[263,270,0,252,268,282,262,277,280,299],
[261,262,298,0,280,285,285,278,287,306],
[264,269,282,270,0,292,289,285,276,319],
[252,250,268,265,258,0,252,265,255,291],
[292,266,288,265,261,298,0,289,295,292],
[280,282,273,272,265,285,261,0,268,313],
[269,285,270,263,274,295,255,282,0,286],
[231,269,251,244,231,259,258,237,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,241,255,256,250,261,266,276],
[282,0,276,252,253,277,261,268,268,262],
[285,274,0,279,254,276,275,265,269,270],
[309,298,271,0,259,282,292,269,288,308],
[295,297,296,291,0,293,264,279,295,281],
[294,273,274,268,257,0,268,253,269,273],
[300,289,275,258,286,282,0,275,286,285],
[289,282,285,281,271,297,275,0,288,298],
[284,282,281,262,255,281,264,262,0,279],
[274,288,280,242,269,277,265,252,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,255,270,257,271,272,259,260,244],
[304,0,266,282,271,277,279,262,273,261],
[295,284,0,284,271,292,290,259,276,275],
[280,268,266,0,260,286,283,269,266,268],
[293,279,279,290,0,293,292,272,274,281],
[279,273,258,264,257,0,283,252,255,242],
[278,271,260,267,258,267,0,256,247,253],
[291,288,291,281,278,298,294,0,273,266],
[290,277,274,284,276,295,303,277,0,258],
[306,289,275,282,269,308,297,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,273,296,289,275,276,268,270],
[278,0,258,273,293,267,266,271,276,282],
[275,292,0,273,291,291,294,277,287,298],
[277,277,277,0,287,286,259,273,288,288],
[254,257,259,263,0,259,263,259,266,281],
[261,283,259,264,291,0,263,257,262,290],
[275,284,256,291,287,287,0,285,289,301],
[274,279,273,277,291,293,265,0,287,274],
[282,274,263,262,284,288,261,263,0,289],
[280,268,252,262,269,260,249,276,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,285,281,272,257,282,272,302],
[280,0,265,287,273,270,260,273,249,284],
[274,285,0,280,284,295,274,259,253,292],
[265,263,270,0,283,263,278,273,256,302],
[269,277,266,267,0,279,257,274,286,295],
[278,280,255,287,271,0,252,275,253,288],
[293,290,276,272,293,298,0,286,263,303],
[268,277,291,277,276,275,264,0,256,285],
[278,301,297,294,264,297,287,294,0,297],
[248,266,258,248,255,262,247,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,308,424,388,258,299,401,342,303],
[200,0,190,289,277,251,245,213,309,251],
[242,360,0,335,401,264,333,375,351,254],
[126,261,215,0,205,209,247,226,250,256],
[162,273,149,345,0,187,160,211,222,192],
[292,299,286,341,363,0,251,304,260,336],
[251,305,217,303,390,299,0,308,269,279],
[149,337,175,324,339,246,242,0,292,316],
[208,241,199,300,328,290,281,258,0,245],
[247,299,296,294,358,214,271,234,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,259,253,253,275,276,291,270],
[288,0,285,279,277,288,299,302,307,272],
[285,265,0,259,269,266,277,286,296,259],
[291,271,291,0,281,276,301,300,303,266],
[297,273,281,269,0,273,283,300,296,277],
[297,262,284,274,277,0,290,287,300,272],
[275,251,273,249,267,260,0,277,271,258],
[274,248,264,250,250,263,273,0,273,248],
[259,243,254,247,254,250,279,277,0,259],
[280,278,291,284,273,278,292,302,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,259,303,254,268,274,257,245,275],
[281,0,260,295,285,260,262,270,273,294],
[291,290,0,285,276,286,280,248,267,282],
[247,255,265,0,283,241,250,257,257,276],
[296,265,274,267,0,268,276,260,281,272],
[282,290,264,309,282,0,272,283,280,294],
[276,288,270,300,274,278,0,294,256,277],
[293,280,302,293,290,267,256,0,282,298],
[305,277,283,293,269,270,294,268,0,284],
[275,256,268,274,278,256,273,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,328,292,279,276,268,285,271],
[281,0,280,289,280,270,244,251,286,269],
[270,270,0,298,270,251,242,247,254,278],
[222,261,252,0,265,266,226,207,244,252],
[258,270,280,285,0,262,240,254,260,263],
[271,280,299,284,288,0,247,250,268,251],
[274,306,308,324,310,303,0,273,307,305],
[282,299,303,343,296,300,277,0,256,290],
[265,264,296,306,290,282,243,294,0,283],
[279,281,272,298,287,299,245,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,271,290,277,308,327,294,305,281],
[239,0,257,256,292,293,275,284,277,234],
[279,293,0,268,285,295,299,284,274,273],
[260,294,282,0,275,288,295,297,307,274],
[273,258,265,275,0,258,247,282,262,236],
[242,257,255,262,292,0,277,265,242,249],
[223,275,251,255,303,273,0,241,269,258],
[256,266,266,253,268,285,309,0,263,261],
[245,273,276,243,288,308,281,287,0,291],
[269,316,277,276,314,301,292,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,268,277,272,263,269,253,269,266],
[257,0,260,274,251,261,253,249,259,255],
[282,290,0,267,284,266,295,278,270,271],
[273,276,283,0,284,276,266,275,264,273],
[278,299,266,266,0,276,286,269,254,269],
[287,289,284,274,274,0,294,275,272,282],
[281,297,255,284,264,256,0,270,279,263],
[297,301,272,275,281,275,280,0,273,266],
[281,291,280,286,296,278,271,277,0,273],
[284,295,279,277,281,268,287,284,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,259,315,266,297,279,220,279,322],
[214,0,250,271,254,283,277,260,254,282],
[291,300,0,312,259,338,276,268,201,325],
[235,279,238,0,173,249,266,201,223,268],
[284,296,291,377,0,346,263,311,235,338],
[253,267,212,301,204,0,246,236,204,281],
[271,273,274,284,287,304,0,249,244,299],
[330,290,282,349,239,314,301,0,283,382],
[271,296,349,327,315,346,306,267,0,319],
[228,268,225,282,212,269,251,168,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,262,262,237,272,275,264,277,249],
[279,0,259,264,250,282,294,272,267,262],
[288,291,0,266,253,271,278,269,264,253],
[288,286,284,0,270,292,306,279,277,275],
[313,300,297,280,0,314,323,300,287,273],
[278,268,279,258,236,0,283,249,266,255],
[275,256,272,244,227,267,0,272,237,251],
[286,278,281,271,250,301,278,0,251,256],
[273,283,286,273,263,284,313,299,0,258],
[301,288,297,275,277,295,299,294,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,276,273,261,284,281,273,271],
[277,0,285,278,289,287,274,256,283,272],
[280,265,0,274,253,282,257,266,263,281],
[274,272,276,0,273,276,265,254,279,271],
[277,261,297,277,0,281,275,257,274,267],
[289,263,268,274,269,0,273,252,266,255],
[266,276,293,285,275,277,0,262,261,259],
[269,294,284,296,293,298,288,0,267,289],
[277,267,287,271,276,284,289,283,0,277],
[279,278,269,279,283,295,291,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,290,270,300,274,286,266,284],
[278,0,277,311,293,284,259,275,279,275],
[282,273,0,300,288,286,266,285,287,283],
[260,239,250,0,275,294,256,271,252,270],
[280,257,262,275,0,272,252,263,275,278],
[250,266,264,256,278,0,251,252,254,268],
[276,291,284,294,298,299,0,280,272,282],
[264,275,265,279,287,298,270,0,280,282],
[284,271,263,298,275,296,278,270,0,253],
[266,275,267,280,272,282,268,268,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,265,301,269,233,257,259,284],
[292,0,288,294,326,282,270,309,284,308],
[287,262,0,270,279,266,266,267,270,275],
[285,256,280,0,290,256,261,297,275,301],
[249,224,271,260,0,235,248,247,246,267],
[281,268,284,294,315,0,268,271,271,305],
[317,280,284,289,302,282,0,298,271,298],
[293,241,283,253,303,279,252,0,286,277],
[291,266,280,275,304,279,279,264,0,304],
[266,242,275,249,283,245,252,273,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,246,267,284,274,268,271,239,233],
[284,0,255,251,268,266,243,275,237,260],
[304,295,0,304,294,292,272,319,271,313],
[283,299,246,0,289,282,271,280,277,261],
[266,282,256,261,0,293,257,248,261,270],
[276,284,258,268,257,0,254,266,249,255],
[282,307,278,279,293,296,0,282,272,285],
[279,275,231,270,302,284,268,0,267,267],
[311,313,279,273,289,301,278,283,0,293],
[317,290,237,289,280,295,265,283,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,273,325,293,289,275,325,318],
[254,0,249,236,270,274,263,267,293,280],
[272,301,0,290,307,287,280,285,319,325],
[277,314,260,0,311,286,294,294,315,324],
[225,280,243,239,0,257,262,272,297,290],
[257,276,263,264,293,0,302,308,298,315],
[261,287,270,256,288,248,0,283,310,296],
[275,283,265,256,278,242,267,0,273,287],
[225,257,231,235,253,252,240,277,0,292],
[232,270,225,226,260,235,254,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,236,241,297,305,319,245,326,273],
[300,0,236,342,259,227,334,291,352,268],
[314,314,0,264,294,345,303,209,354,317],
[309,208,286,0,281,277,276,213,292,306],
[253,291,256,269,0,316,308,246,322,233],
[245,323,205,273,234,0,300,213,284,258],
[231,216,247,274,242,250,0,185,261,204],
[305,259,341,337,304,337,365,0,426,281],
[224,198,196,258,228,266,289,124,0,225],
[277,282,233,244,317,292,346,269,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,277,292,288,261,291,303,216,305],
[315,0,333,282,342,322,294,333,272,333],
[273,217,0,286,335,307,282,312,248,311],
[258,268,264,0,316,302,276,284,266,281],
[262,208,215,234,0,279,242,248,205,247],
[289,228,243,248,271,0,283,293,252,259],
[259,256,268,274,308,267,0,301,300,280],
[247,217,238,266,302,257,249,0,209,241],
[334,278,302,284,345,298,250,341,0,308],
[245,217,239,269,303,291,270,309,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,265,283,273,277,284,265,264,267],
[250,0,251,262,260,253,283,253,264,273],
[285,299,0,292,293,274,293,276,281,277],
[267,288,258,0,292,263,277,256,256,264],
[277,290,257,258,0,261,266,261,266,270],
[273,297,276,287,289,0,302,270,271,290],
[266,267,257,273,284,248,0,251,263,273],
[285,297,274,294,289,280,299,0,286,288],
[286,286,269,294,284,279,287,264,0,277],
[283,277,273,286,280,260,277,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,260,270,290,284,285,280,264,310],
[294,0,265,300,317,301,307,314,286,328],
[290,285,0,311,272,280,283,286,271,311],
[280,250,239,0,299,297,281,258,253,289],
[260,233,278,251,0,273,305,264,257,313],
[266,249,270,253,277,0,281,258,265,259],
[265,243,267,269,245,269,0,264,253,293],
[270,236,264,292,286,292,286,0,269,294],
[286,264,279,297,293,285,297,281,0,292],
[240,222,239,261,237,291,257,256,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,264,286,279,256,276,293,278,299],
[276,0,254,279,260,255,246,287,271,261],
[286,296,0,284,285,272,267,305,262,290],
[264,271,266,0,282,263,269,271,266,284],
[271,290,265,268,0,271,278,280,263,291],
[294,295,278,287,279,0,271,301,273,290],
[274,304,283,281,272,279,0,274,262,297],
[257,263,245,279,270,249,276,0,259,302],
[272,279,288,284,287,277,288,291,0,293],
[251,289,260,266,259,260,253,248,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,296,285,255,301,244,293,279],
[264,0,268,271,253,269,266,264,278,262],
[275,282,0,277,279,271,276,259,295,283],
[254,279,273,0,254,234,271,257,280,274],
[265,297,271,296,0,283,290,262,304,280],
[295,281,279,316,267,0,285,277,297,308],
[249,284,274,279,260,265,0,240,272,292],
[306,286,291,293,288,273,310,0,316,294],
[257,272,255,270,246,253,278,234,0,267],
[271,288,267,276,270,242,258,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,311,298,296,279,279,291,288,276],
[281,0,284,308,287,250,286,298,294,273],
[239,266,0,275,261,237,249,267,268,242],
[252,242,275,0,263,253,259,252,285,254],
[254,263,289,287,0,265,264,257,284,239],
[271,300,313,297,285,0,300,301,302,278],
[271,264,301,291,286,250,0,302,293,275],
[259,252,283,298,293,249,248,0,255,241],
[262,256,282,265,266,248,257,295,0,238],
[274,277,308,296,311,272,275,309,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,350,322,297,376,349,301,259,297],
[221,0,305,254,260,310,286,221,234,220],
[200,245,0,251,258,286,307,250,254,222],
[228,296,299,0,239,317,275,265,243,223],
[253,290,292,311,0,362,296,298,306,274],
[174,240,264,233,188,0,235,224,213,196],
[201,264,243,275,254,315,0,192,271,203],
[249,329,300,285,252,326,358,0,259,242],
[291,316,296,307,244,337,279,291,0,281],
[253,330,328,327,276,354,347,308,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,264,274,251,246,297,240,259,225],
[309,0,274,307,283,261,297,274,254,284],
[286,276,0,297,306,286,281,250,269,254],
[276,243,253,0,242,248,225,217,234,240],
[299,267,244,308,0,247,273,315,233,258],
[304,289,264,302,303,0,304,297,265,249],
[253,253,269,325,277,246,0,219,255,257],
[310,276,300,333,235,253,331,0,275,265],
[291,296,281,316,317,285,295,275,0,270],
[325,266,296,310,292,301,293,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,259,270,273,270,241,259,259,239],
[296,0,285,294,324,292,262,299,276,269],
[291,265,0,282,288,281,247,274,279,251],
[280,256,268,0,269,273,246,256,249,223],
[277,226,262,281,0,266,244,277,246,245],
[280,258,269,277,284,0,261,239,241,237],
[309,288,303,304,306,289,0,274,284,292],
[291,251,276,294,273,311,276,0,255,273],
[291,274,271,301,304,309,266,295,0,252],
[311,281,299,327,305,313,258,277,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,260,273,269,292,271,271,268],
[277,0,272,264,266,263,287,262,279,267],
[275,278,0,273,280,257,295,263,264,267],
[290,286,277,0,279,265,289,261,269,283],
[277,284,270,271,0,255,272,269,258,264],
[281,287,293,285,295,0,308,279,284,274],
[258,263,255,261,278,242,0,250,257,261],
[279,288,287,289,281,271,300,0,269,267],
[279,271,286,281,292,266,293,281,0,272],
[282,283,283,267,286,276,289,283,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,263,261,278,281,265,275,287],
[281,0,255,270,288,269,294,277,270,293],
[274,295,0,286,294,276,294,278,291,278],
[287,280,264,0,282,268,287,268,260,265],
[289,262,256,268,0,279,284,279,266,282],
[272,281,274,282,271,0,274,299,267,287],
[269,256,256,263,266,276,0,279,262,266],
[285,273,272,282,271,251,271,0,249,284],
[275,280,259,290,284,283,288,301,0,290],
[263,257,272,285,268,263,284,266,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,288,281,284,259,285,297,290,278],
[284,0,304,295,293,289,288,281,287,265],
[262,246,0,285,291,280,263,278,270,252],
[269,255,265,0,277,278,270,274,274,258],
[266,257,259,273,0,262,256,279,265,258],
[291,261,270,272,288,0,294,272,294,268],
[265,262,287,280,294,256,0,284,276,257],
[253,269,272,276,271,278,266,0,269,250],
[260,263,280,276,285,256,274,281,0,266],
[272,285,298,292,292,282,293,300,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,270,279,283,279,275,281,287],
[269,0,274,277,265,291,273,285,275,279],
[265,276,0,277,279,292,275,263,274,273],
[280,273,273,0,279,277,281,273,282,285],
[271,285,271,271,0,289,281,265,295,266],
[267,259,258,273,261,0,276,267,277,268],
[271,277,275,269,269,274,0,282,281,285],
[275,265,287,277,285,283,268,0,283,281],
[269,275,276,268,255,273,269,267,0,273],
[263,271,277,265,284,282,265,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,267,263,281,282,275,266,249,277],
[285,0,280,286,297,269,290,294,273,307],
[283,270,0,254,281,271,281,273,265,263],
[287,264,296,0,298,283,267,279,278,291],
[269,253,269,252,0,244,255,254,256,271],
[268,281,279,267,306,0,267,279,262,298],
[275,260,269,283,295,283,0,280,271,285],
[284,256,277,271,296,271,270,0,279,275],
[301,277,285,272,294,288,279,271,0,286],
[273,243,287,259,279,252,265,275,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,269,318,290,285,317,318,298,293],
[223,0,268,309,264,253,274,283,302,243],
[281,282,0,268,283,246,281,249,283,246],
[232,241,282,0,296,244,235,257,241,236],
[260,286,267,254,0,224,325,286,286,219],
[265,297,304,306,326,0,258,293,273,297],
[233,276,269,315,225,292,0,255,267,260],
[232,267,301,293,264,257,295,0,283,257],
[252,248,267,309,264,277,283,267,0,265],
[257,307,304,314,331,253,290,293,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,350,272,185,343,297,314,275],
[281,0,259,330,325,262,269,276,274,228],
[253,291,0,283,226,277,353,310,364,319],
[200,220,267,0,355,160,251,238,202,211],
[278,225,324,195,0,199,285,231,328,218],
[365,288,273,390,351,0,340,303,397,237],
[207,281,197,299,265,210,0,274,326,336],
[253,274,240,312,319,247,276,0,192,162],
[236,276,186,348,222,153,224,358,0,156],
[275,322,231,339,332,313,214,388,394,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,263,300,294,240,288,289,227],
[276,0,287,289,304,302,286,317,236,283],
[267,263,0,263,313,266,293,275,231,258],
[287,261,287,0,334,336,283,275,287,271],
[250,246,237,216,0,274,260,272,242,261],
[256,248,284,214,276,0,263,252,231,243],
[310,264,257,267,290,287,0,297,240,266],
[262,233,275,275,278,298,253,0,237,240],
[261,314,319,263,308,319,310,313,0,283],
[323,267,292,279,289,307,284,310,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,234,250,248,260,250,253,247,250],
[288,0,261,277,268,292,275,279,281,286],
[316,289,0,287,268,291,278,286,294,284],
[300,273,263,0,278,284,291,275,272,276],
[302,282,282,272,0,286,283,295,287,280],
[290,258,259,266,264,0,258,271,254,260],
[300,275,272,259,267,292,0,278,271,277],
[297,271,264,275,255,279,272,0,273,262],
[303,269,256,278,263,296,279,277,0,275],
[300,264,266,274,270,290,273,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,251,302,327,320,289,296,271,310],
[281,0,258,252,289,239,266,232,239,285],
[299,292,0,247,282,244,277,271,235,303],
[248,298,303,0,353,302,269,291,289,292],
[223,261,268,197,0,232,289,237,214,254],
[230,311,306,248,318,0,255,303,237,296],
[261,284,273,281,261,295,0,286,224,327],
[254,318,279,259,313,247,264,0,211,272],
[279,311,315,261,336,313,326,339,0,337],
[240,265,247,258,296,254,223,278,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,271,261,295,287,292,291,279,279],
[257,0,260,260,287,263,272,279,257,266],
[279,290,0,271,298,275,282,275,284,283],
[289,290,279,0,296,286,277,290,276,267],
[255,263,252,254,0,259,266,253,266,258],
[263,287,275,264,291,0,281,285,258,281],
[258,278,268,273,284,269,0,258,255,263],
[259,271,275,260,297,265,292,0,265,263],
[271,293,266,274,284,292,295,285,0,274],
[271,284,267,283,292,269,287,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,260,260,288,264,274,261,240,274],
[266,0,245,272,263,271,249,254,245,274],
[290,305,0,283,295,275,280,265,272,309],
[290,278,267,0,295,261,261,266,267,278],
[262,287,255,255,0,251,262,262,268,285],
[286,279,275,289,299,0,278,283,281,280],
[276,301,270,289,288,272,0,279,280,288],
[289,296,285,284,288,267,271,0,288,297],
[310,305,278,283,282,269,270,262,0,286],
[276,276,241,272,265,270,262,253,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,293,295,282,284,256,277,269,278],
[277,0,296,292,287,283,271,285,297,278],
[257,254,0,265,269,268,261,264,283,273],
[255,258,285,0,270,259,269,271,271,261],
[268,263,281,280,0,265,250,271,290,277],
[266,267,282,291,285,0,279,285,293,266],
[294,279,289,281,300,271,0,288,296,289],
[273,265,286,279,279,265,262,0,283,264],
[281,253,267,279,260,257,254,267,0,258],
[272,272,277,289,273,284,261,286,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,264,287,260,283,284,284,259],
[276,0,265,264,268,258,256,281,271,251],
[270,285,0,261,276,250,255,273,277,264],
[286,286,289,0,278,275,272,286,286,290],
[263,282,274,272,0,255,274,254,274,277],
[290,292,300,275,295,0,252,308,289,280],
[267,294,295,278,276,298,0,290,313,291],
[266,269,277,264,296,242,260,0,295,277],
[266,279,273,264,276,261,237,255,0,268],
[291,299,286,260,273,270,259,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,288,309,307,285,334,313,262,335],
[254,0,215,262,264,260,286,276,232,261],
[262,335,0,301,343,322,287,359,288,321],
[241,288,249,0,285,292,277,302,259,258],
[243,286,207,265,0,286,249,269,236,220],
[265,290,228,258,264,0,280,312,245,261],
[216,264,263,273,301,270,0,311,293,293],
[237,274,191,248,281,238,239,0,251,246],
[288,318,262,291,314,305,257,299,0,265],
[215,289,229,292,330,289,257,304,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,295,286,275,300,268,307,290,297],
[255,0,232,264,230,270,237,250,252,250],
[255,318,0,253,254,256,274,286,261,280],
[264,286,297,0,278,298,288,315,286,280],
[275,320,296,272,0,314,294,301,284,287],
[250,280,294,252,236,0,242,278,265,259],
[282,313,276,262,256,308,0,288,265,296],
[243,300,264,235,249,272,262,0,246,262],
[260,298,289,264,266,285,285,304,0,286],
[253,300,270,270,263,291,254,288,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,305,340,267,264,297,323,288,282],
[233,0,255,260,257,294,277,298,253,262],
[245,295,0,268,323,264,295,317,274,312],
[210,290,282,0,315,262,270,297,241,276],
[283,293,227,235,0,254,271,278,203,260],
[286,256,286,288,296,0,314,300,254,290],
[253,273,255,280,279,236,0,300,260,244],
[227,252,233,253,272,250,250,0,256,254],
[262,297,276,309,347,296,290,294,0,290],
[268,288,238,274,290,260,306,296,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,270,266,298,281,272,291,294],
[253,0,241,244,262,256,234,253,273,250],
[258,309,0,263,277,297,272,279,297,288],
[280,306,287,0,296,295,280,268,294,286],
[284,288,273,254,0,287,270,269,293,261],
[252,294,253,255,263,0,248,262,271,278],
[269,316,278,270,280,302,0,283,298,297],
[278,297,271,282,281,288,267,0,296,293],
[259,277,253,256,257,279,252,254,0,257],
[256,300,262,264,289,272,253,257,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,279,283,266,280,251,264,252],
[276,0,304,290,279,272,256,266,268,257],
[273,246,0,270,251,262,257,247,262,239],
[271,260,280,0,261,267,279,263,248,244],
[267,271,299,289,0,238,241,266,238,260],
[284,278,288,283,312,0,269,280,270,261],
[270,294,293,271,309,281,0,313,255,283],
[299,284,303,287,284,270,237,0,264,272],
[286,282,288,302,312,280,295,286,0,248],
[298,293,311,306,290,289,267,278,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,305,275,318,300,302,278,313],
[260,0,305,271,253,267,252,276,249,278],
[260,245,0,263,261,291,284,253,269,281],
[245,279,287,0,264,290,277,267,270,281],
[275,297,289,286,0,285,268,262,271,298],
[232,283,259,260,265,0,262,256,237,252],
[250,298,266,273,282,288,0,281,270,282],
[248,274,297,283,288,294,269,0,273,286],
[272,301,281,280,279,313,280,277,0,302],
[237,272,269,269,252,298,268,264,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,291,251,313,334,273,282,268,270],
[264,0,324,306,334,293,275,290,279,260],
[259,226,0,227,273,288,238,261,288,245],
[299,244,323,0,265,307,307,258,273,298],
[237,216,277,285,0,314,260,257,245,256],
[216,257,262,243,236,0,258,233,254,205],
[277,275,312,243,290,292,0,296,290,284],
[268,260,289,292,293,317,254,0,286,279],
[282,271,262,277,305,296,260,264,0,295],
[280,290,305,252,294,345,266,271,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,284,296,295,300,295,284,267,275],
[256,0,259,301,287,305,310,294,275,290],
[266,291,0,294,283,308,299,268,266,295],
[254,249,256,0,278,291,267,272,272,279],
[255,263,267,272,0,290,281,266,263,261],
[250,245,242,259,260,0,271,259,240,254],
[255,240,251,283,269,279,0,289,240,245],
[266,256,282,278,284,291,261,0,257,260],
[283,275,284,278,287,310,310,293,0,246],
[275,260,255,271,289,296,305,290,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,264,287,303,303,287,288,292,309],
[240,0,253,246,240,244,242,273,256,293],
[286,297,0,241,291,293,284,250,246,294],
[263,304,309,0,283,292,290,294,263,289],
[247,310,259,267,0,286,249,267,250,289],
[247,306,257,258,264,0,273,277,245,294],
[263,308,266,260,301,277,0,259,266,276],
[262,277,300,256,283,273,291,0,271,283],
[258,294,304,287,300,305,284,279,0,309],
[241,257,256,261,261,256,274,267,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,291,294,285,280,283,294,259],
[285,0,280,277,294,285,276,272,279,278],
[274,270,0,251,272,265,289,271,275,268],
[259,273,299,0,282,274,265,264,287,265],
[256,256,278,268,0,278,258,265,281,256],
[265,265,285,276,272,0,255,268,261,251],
[270,274,261,285,292,295,0,273,275,243],
[267,278,279,286,285,282,277,0,291,266],
[256,271,275,263,269,289,275,259,0,263],
[291,272,282,285,294,299,307,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,244,229,302,294,207,156,281,265],
[314,0,270,234,263,264,301,226,239,257],
[306,280,0,282,266,292,309,230,227,303],
[321,316,268,0,309,265,300,227,254,317],
[248,287,284,241,0,274,275,276,269,259],
[256,286,258,285,276,0,262,252,248,238],
[343,249,241,250,275,288,0,225,247,279],
[394,324,320,323,274,298,325,0,296,347],
[269,311,323,296,281,302,303,254,0,274],
[285,293,247,233,291,312,271,203,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,318,336,323,358,294,218,281,268],
[281,0,290,265,344,331,278,268,293,247],
[232,260,0,259,293,271,220,198,197,274],
[214,285,291,0,278,305,267,264,237,269],
[227,206,257,272,0,259,240,203,237,286],
[192,219,279,245,291,0,206,193,257,238],
[256,272,330,283,310,344,0,230,248,319],
[332,282,352,286,347,357,320,0,258,268],
[269,257,353,313,313,293,302,292,0,259],
[282,303,276,281,264,312,231,282,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,250,285,254,315,311,334,296,299],
[262,0,269,297,246,305,309,313,275,314],
[300,281,0,306,260,334,296,296,273,274],
[265,253,244,0,247,282,279,295,230,259],
[296,304,290,303,0,311,310,321,308,256],
[235,245,216,268,239,0,280,286,227,239],
[239,241,254,271,240,270,0,311,278,302],
[216,237,254,255,229,264,239,0,258,284],
[254,275,277,320,242,323,272,292,0,282],
[251,236,276,291,294,311,248,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,290,274,304,270,309,290,279,323],
[253,0,282,251,309,260,283,271,240,237],
[260,268,0,271,306,270,282,278,257,297],
[276,299,279,0,314,299,289,294,268,307],
[246,241,244,236,0,236,247,243,249,263],
[280,290,280,251,314,0,300,290,282,292],
[241,267,268,261,303,250,0,284,290,270],
[260,279,272,256,307,260,266,0,269,271],
[271,310,293,282,301,268,260,281,0,267],
[227,313,253,243,287,258,280,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,273,275,292,281,288,250,260,261],
[286,0,301,305,278,290,278,270,278,290],
[277,249,0,267,256,265,274,283,268,271],
[275,245,283,0,257,268,286,280,275,263],
[258,272,294,293,0,283,274,271,270,292],
[269,260,285,282,267,0,280,286,282,288],
[262,272,276,264,276,270,0,264,257,251],
[300,280,267,270,279,264,286,0,266,258],
[290,272,282,275,280,268,293,284,0,284],
[289,260,279,287,258,262,299,292,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,279,264,248,259,275,275,261,284],
[260,0,269,264,277,274,259,292,283,270],
[271,281,0,279,240,260,271,261,268,262],
[286,286,271,0,290,292,287,290,313,275],
[302,273,310,260,0,288,291,286,302,276],
[291,276,290,258,262,0,301,272,290,283],
[275,291,279,263,259,249,0,256,268,272],
[275,258,289,260,264,278,294,0,296,284],
[289,267,282,237,248,260,282,254,0,262],
[266,280,288,275,274,267,278,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,260,292,274,299,304,265,310],
[264,0,288,292,276,264,303,285,259,286],
[264,262,0,214,222,259,265,266,246,291],
[290,258,336,0,255,297,303,266,284,273],
[258,274,328,295,0,283,308,304,268,279],
[276,286,291,253,267,0,279,288,251,290],
[251,247,285,247,242,271,0,258,259,253],
[246,265,284,284,246,262,292,0,254,274],
[285,291,304,266,282,299,291,296,0,304],
[240,264,259,277,271,260,297,276,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,236,239,239,263,237,236,272],
[267,0,257,234,258,245,250,250,246,268],
[288,293,0,252,279,260,272,276,272,284],
[314,316,298,0,293,293,304,280,264,292],
[311,292,271,257,0,277,285,270,247,289],
[311,305,290,257,273,0,288,273,278,290],
[287,300,278,246,265,262,0,263,283,255],
[313,300,274,270,280,277,287,0,270,301],
[314,304,278,286,303,272,267,280,0,293],
[278,282,266,258,261,260,295,249,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,309,280,278,241,323,275,270,307],
[241,0,314,267,285,241,308,298,296,259],
[241,236,0,212,260,174,299,236,242,207],
[270,283,338,0,273,257,300,292,268,349],
[272,265,290,277,0,311,293,217,239,300],
[309,309,376,293,239,0,369,281,307,313],
[227,242,251,250,257,181,0,219,218,231],
[275,252,314,258,333,269,331,0,262,314],
[280,254,308,282,311,243,332,288,0,268],
[243,291,343,201,250,237,319,236,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,254,259,267,253,236,271,254,252],
[274,0,249,265,279,245,262,245,272,259],
[296,301,0,272,306,303,278,285,296,291],
[291,285,278,0,307,289,267,294,264,286],
[283,271,244,243,0,250,249,282,289,274],
[297,305,247,261,300,0,272,291,283,266],
[314,288,272,283,301,278,0,313,276,289],
[279,305,265,256,268,259,237,0,273,265],
[296,278,254,286,261,267,274,277,0,257],
[298,291,259,264,276,284,261,285,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,288,280,252,319,230,263,336,227],
[303,0,253,231,149,301,234,262,334,261],
[262,297,0,294,301,258,280,306,335,259],
[270,319,256,0,244,306,324,315,359,338],
[298,401,249,306,0,286,245,262,317,256],
[231,249,292,244,264,0,209,290,332,319],
[320,316,270,226,305,341,0,330,329,334],
[287,288,244,235,288,260,220,0,401,342],
[214,216,215,191,233,218,221,149,0,234],
[323,289,291,212,294,231,216,208,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,259,269,263,278,253,242,279,269],
[291,0,275,291,277,276,279,261,290,274],
[291,275,0,275,276,261,271,254,275,281],
[281,259,275,0,269,278,263,262,273,284],
[287,273,274,281,0,271,275,261,269,275],
[272,274,289,272,279,0,287,267,275,293],
[297,271,279,287,275,263,0,276,276,273],
[308,289,296,288,289,283,274,0,279,286],
[271,260,275,277,281,275,274,271,0,268],
[281,276,269,266,275,257,277,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,250,239,215,259,258,268,244,258],
[312,0,286,285,267,282,215,259,267,288],
[300,264,0,295,248,245,255,269,235,231],
[311,265,255,0,280,251,296,279,273,316],
[335,283,302,270,0,299,225,317,290,312],
[291,268,305,299,251,0,267,254,278,315],
[292,335,295,254,325,283,0,338,303,278],
[282,291,281,271,233,296,212,0,287,232],
[306,283,315,277,260,272,247,263,0,311],
[292,262,319,234,238,235,272,318,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,266,278,256,269,274,273,265],
[288,0,266,271,278,270,280,283,275,279],
[285,284,0,273,286,267,291,289,285,275],
[284,279,277,0,290,283,286,260,296,272],
[272,272,264,260,0,260,263,289,284,257],
[294,280,283,267,290,0,276,296,295,268],
[281,270,259,264,287,274,0,284,278,275],
[276,267,261,290,261,254,266,0,276,251],
[277,275,265,254,266,255,272,274,0,257],
[285,271,275,278,293,282,275,299,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,281,276,274,280,262,273,277],
[276,0,282,255,271,257,288,266,286,283],
[266,268,0,268,256,248,273,281,273,274],
[269,295,282,0,266,268,288,268,279,262],
[274,279,294,284,0,275,294,285,283,284],
[276,293,302,282,275,0,297,284,290,280],
[270,262,277,262,256,253,0,270,261,266],
[288,284,269,282,265,266,280,0,283,289],
[277,264,277,271,267,260,289,267,0,277],
[273,267,276,288,266,270,284,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,290,274,257,239,252,225,288,268],
[257,0,344,315,306,281,287,251,286,226],
[260,206,0,318,274,247,270,253,267,257],
[276,235,232,0,261,258,293,228,290,246],
[293,244,276,289,0,279,324,245,300,258],
[311,269,303,292,271,0,285,287,330,258],
[298,263,280,257,226,265,0,220,292,245],
[325,299,297,322,305,263,330,0,320,304],
[262,264,283,260,250,220,258,230,0,261],
[282,324,293,304,292,292,305,246,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,245,283,259,249,311,300,303,360],
[285,0,323,282,267,345,326,349,223,267],
[305,227,0,288,255,313,313,311,271,316],
[267,268,262,0,254,255,286,257,231,304],
[291,283,295,296,0,266,341,313,282,357],
[301,205,237,295,284,0,308,286,280,300],
[239,224,237,264,209,242,0,311,258,345],
[250,201,239,293,237,264,239,0,212,289],
[247,327,279,319,268,270,292,338,0,335],
[190,283,234,246,193,250,205,261,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,266,239,270,239,245,268,251],
[280,0,281,300,270,284,274,258,291,272],
[295,269,0,295,268,283,265,252,297,302],
[284,250,255,0,256,286,245,210,262,266],
[311,280,282,294,0,303,270,243,295,308],
[280,266,267,264,247,0,282,259,267,283],
[311,276,285,305,280,268,0,259,311,268],
[305,292,298,340,307,291,291,0,275,312],
[282,259,253,288,255,283,239,275,0,278],
[299,278,248,284,242,267,282,238,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,171,250,309,276,196,290,303,254,272],
[379,0,266,331,242,293,313,282,288,298],
[300,284,0,327,271,278,312,299,240,258],
[241,219,223,0,221,199,283,254,261,228],
[274,308,279,329,0,237,301,356,285,314],
[354,257,272,351,313,0,302,366,277,309],
[260,237,238,267,249,248,0,303,266,259],
[247,268,251,296,194,184,247,0,250,274],
[296,262,310,289,265,273,284,300,0,212],
[278,252,292,322,236,241,291,276,338,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,265,270,269,275,259,269,259,264],
[289,0,278,260,251,271,271,281,271,267],
[285,272,0,281,276,292,290,314,268,287],
[280,290,269,0,288,257,265,299,269,256],
[281,299,274,262,0,269,287,296,271,275],
[275,279,258,293,281,0,276,305,274,284],
[291,279,260,285,263,274,0,283,266,257],
[281,269,236,251,254,245,267,0,262,239],
[291,279,282,281,279,276,284,288,0,267],
[286,283,263,294,275,266,293,311,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,282,287,281,272,275,294,290,285],
[253,0,259,268,276,262,265,282,256,266],
[268,291,0,287,279,283,267,283,270,263],
[263,282,263,0,281,275,280,292,278,276],
[269,274,271,269,0,275,286,296,282,271],
[278,288,267,275,275,0,286,281,273,299],
[275,285,283,270,264,264,0,291,261,279],
[256,268,267,258,254,269,259,0,243,270],
[260,294,280,272,268,277,289,307,0,283],
[265,284,287,274,279,251,271,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,287,281,287,271,267,270,287,280],
[278,0,276,251,274,275,268,266,268,286],
[263,274,0,265,257,264,278,268,262,282],
[269,299,285,0,278,285,271,281,282,306],
[263,276,293,272,0,271,270,260,283,292],
[279,275,286,265,279,0,267,274,279,298],
[283,282,272,279,280,283,0,286,282,288],
[280,284,282,269,290,276,264,0,302,301],
[263,282,288,268,267,271,268,248,0,280],
[270,264,268,244,258,252,262,249,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,277,280,282,285,288,288,302,268],
[258,0,263,290,274,258,284,283,295,248],
[273,287,0,285,276,267,303,267,301,260],
[270,260,265,0,287,262,310,278,275,272],
[268,276,274,263,0,262,285,264,272,267],
[265,292,283,288,288,0,290,281,301,275],
[262,266,247,240,265,260,0,254,261,262],
[262,267,283,272,286,269,296,0,290,271],
[248,255,249,275,278,249,289,260,0,245],
[282,302,290,278,283,275,288,279,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,286,290,286,291,264,284,290,272],
[259,0,269,259,276,266,267,265,283,245],
[264,281,0,268,276,281,265,254,290,262],
[260,291,282,0,280,274,285,268,274,281],
[264,274,274,270,0,259,250,272,266,245],
[259,284,269,276,291,0,274,275,282,277],
[286,283,285,265,300,276,0,284,297,275],
[266,285,296,282,278,275,266,0,275,287],
[260,267,260,276,284,268,253,275,0,247],
[278,305,288,269,305,273,275,263,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,299,274,272,288,319,312,290,320],
[269,0,294,287,272,300,327,320,283,308],
[251,256,0,258,242,270,291,284,284,291],
[276,263,292,0,277,261,299,286,296,311],
[278,278,308,273,0,308,313,339,293,336],
[262,250,280,289,242,0,327,322,291,312],
[231,223,259,251,237,223,0,286,258,264],
[238,230,266,264,211,228,264,0,264,288],
[260,267,266,254,257,259,292,286,0,288],
[230,242,259,239,214,238,286,262,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,258,276,283,295,274,258,285,267],
[267,0,248,265,293,266,254,250,276,260],
[292,302,0,298,291,290,267,277,291,273],
[274,285,252,0,265,285,268,256,282,271],
[267,257,259,285,0,280,274,274,284,275],
[255,284,260,265,270,0,267,258,283,269],
[276,296,283,282,276,283,0,271,289,265],
[292,300,273,294,276,292,279,0,293,291],
[265,274,259,268,266,267,261,257,0,255],
[283,290,277,279,275,281,285,259,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,256,260,269,263,279,255,268],
[278,0,271,247,252,256,264,274,283,259],
[271,279,0,258,257,292,296,287,262,266],
[294,303,292,0,242,268,266,294,258,265],
[290,298,293,308,0,280,273,277,264,284],
[281,294,258,282,270,0,287,269,263,256],
[287,286,254,284,277,263,0,303,273,265],
[271,276,263,256,273,281,247,0,229,262],
[295,267,288,292,286,287,277,321,0,297],
[282,291,284,285,266,294,285,288,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,273,281,278,271,281,288,254],
[284,0,281,271,290,289,279,275,271,256],
[272,269,0,279,273,258,285,261,275,265],
[277,279,271,0,275,267,265,273,277,275],
[269,260,277,275,0,253,281,272,267,262],
[272,261,292,283,297,0,272,272,273,268],
[279,271,265,285,269,278,0,260,259,265],
[269,275,289,277,278,278,290,0,276,273],
[262,279,275,273,283,277,291,274,0,280],
[296,294,285,275,288,282,285,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,265,260,297,278,264,302,278],
[287,0,264,264,274,249,268,260,291,259],
[295,286,0,266,290,302,296,292,293,295],
[285,286,284,0,269,266,286,276,301,277],
[290,276,260,281,0,311,299,265,301,273],
[253,301,248,284,239,0,261,273,305,259],
[272,282,254,264,251,289,0,284,302,268],
[286,290,258,274,285,277,266,0,287,255],
[248,259,257,249,249,245,248,263,0,257],
[272,291,255,273,277,291,282,295,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,297,284,273,281,290,280,289],
[263,0,268,278,281,268,267,275,290,279],
[271,282,0,276,281,266,274,279,286,274],
[253,272,274,0,269,255,268,253,274,274],
[266,269,269,281,0,277,271,275,277,280],
[277,282,284,295,273,0,276,283,288,290],
[269,283,276,282,279,274,0,277,272,281],
[260,275,271,297,275,267,273,0,270,268],
[270,260,264,276,273,262,278,280,0,264],
[261,271,276,276,270,260,269,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,257,267,292,291,265,286,274,282],
[268,0,246,263,277,265,272,241,257,261],
[293,304,0,293,295,291,294,288,294,259],
[283,287,257,0,290,262,247,300,276,264],
[258,273,255,260,0,278,256,310,256,254],
[259,285,259,288,272,0,284,282,286,266],
[285,278,256,303,294,266,0,297,286,272],
[264,309,262,250,240,268,253,0,267,259],
[276,293,256,274,294,264,264,283,0,253],
[268,289,291,286,296,284,278,291,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,270,279,304,292,316,271,304,333],
[280,0,303,251,298,276,290,268,276,300],
[280,247,0,239,274,256,289,282,282,312],
[271,299,311,0,282,277,299,286,288,292],
[246,252,276,268,0,248,272,257,270,283],
[258,274,294,273,302,0,306,284,306,306],
[234,260,261,251,278,244,0,286,263,289],
[279,282,268,264,293,266,264,0,254,319],
[246,274,268,262,280,244,287,296,0,303],
[217,250,238,258,267,244,261,231,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,290,270,276,242,262,285,294,275],
[301,0,295,287,314,258,288,300,304,305],
[260,255,0,248,287,298,261,296,303,261],
[280,263,302,0,281,281,299,314,292,320],
[274,236,263,269,0,260,251,285,292,277],
[308,292,252,269,290,0,289,281,283,267],
[288,262,289,251,299,261,0,279,289,278],
[265,250,254,236,265,269,271,0,291,285],
[256,246,247,258,258,267,261,259,0,269],
[275,245,289,230,273,283,272,265,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,297,285,274,264,275,274,271],
[275,0,275,280,255,282,261,268,260,274],
[290,275,0,296,272,282,285,282,290,286],
[253,270,254,0,261,265,251,254,268,247],
[265,295,278,289,0,285,285,275,276,279],
[276,268,268,285,265,0,279,255,280,271],
[286,289,265,299,265,271,0,278,281,287],
[275,282,268,296,275,295,272,0,275,285],
[276,290,260,282,274,270,269,275,0,280],
[279,276,264,303,271,279,263,265,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,289,284,273,307,285,314,272,284],
[221,0,253,250,254,260,257,264,224,263],
[261,297,0,275,266,280,271,313,255,280],
[266,300,275,0,280,296,280,288,260,267],
[277,296,284,270,0,299,287,288,280,293],
[243,290,270,254,251,0,259,275,245,261],
[265,293,279,270,263,291,0,284,266,280],
[236,286,237,262,262,275,266,0,248,266],
[278,326,295,290,270,305,284,302,0,260],
[266,287,270,283,257,289,270,284,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,208,241,273,277,247,240,245,222,201],
[342,0,296,296,283,325,323,311,273,300],
[309,254,0,305,249,272,309,272,249,221],
[277,254,245,0,258,202,306,306,218,241],
[273,267,301,292,0,277,259,292,170,234],
[303,225,278,348,273,0,316,338,228,243],
[310,227,241,244,291,234,0,237,204,196],
[305,239,278,244,258,212,313,0,201,256],
[328,277,301,332,380,322,346,349,0,266],
[349,250,329,309,316,307,354,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,336,259,249,326,234,344,267,273],
[267,0,320,229,267,303,289,330,291,269],
[214,230,0,239,230,243,275,279,223,241],
[291,321,311,0,265,277,333,319,276,261],
[301,283,320,285,0,310,264,311,317,327],
[224,247,307,273,240,0,294,300,275,254],
[316,261,275,217,286,256,0,280,247,217],
[206,220,271,231,239,250,270,0,303,265],
[283,259,327,274,233,275,303,247,0,284],
[277,281,309,289,223,296,333,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,295,283,277,255,259,266,290,285],
[294,0,276,256,265,253,268,268,272,274],
[255,274,0,264,258,266,261,246,245,266],
[267,294,286,0,294,265,264,263,268,287],
[273,285,292,256,0,262,258,268,285,273],
[295,297,284,285,288,0,282,282,275,286],
[291,282,289,286,292,268,0,292,277,298],
[284,282,304,287,282,268,258,0,275,294],
[260,278,305,282,265,275,273,275,0,294],
[265,276,284,263,277,264,252,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,277,286,280,279,295,312,300,273],
[233,0,274,270,257,257,264,276,259,237],
[273,276,0,257,275,277,276,314,262,278],
[264,280,293,0,247,259,296,306,259,245],
[270,293,275,303,0,308,318,314,296,263],
[271,293,273,291,242,0,294,294,277,258],
[255,286,274,254,232,256,0,291,255,253],
[238,274,236,244,236,256,259,0,254,251],
[250,291,288,291,254,273,295,296,0,257],
[277,313,272,305,287,292,297,299,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,249,291,242,265,277,254,221],
[285,0,291,216,288,240,296,277,245,252],
[274,259,0,214,269,263,284,288,274,264],
[301,334,336,0,359,275,330,352,310,305],
[259,262,281,191,0,229,245,270,242,235],
[308,310,287,275,321,0,315,309,309,294],
[285,254,266,220,305,235,0,285,273,254],
[273,273,262,198,280,241,265,0,255,235],
[296,305,276,240,308,241,277,295,0,285],
[329,298,286,245,315,256,296,315,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,121,123,229,183,329,174,96,122,222],
[429,0,245,299,277,267,295,277,232,294],
[427,305,0,321,346,307,213,234,266,298],
[321,251,229,0,211,320,219,137,270,181],
[367,273,204,339,0,347,244,281,258,227],
[221,283,243,230,203,0,184,212,180,228],
[376,255,337,331,306,366,0,206,309,339],
[454,273,316,413,269,338,344,0,349,376],
[428,318,284,280,292,370,241,201,0,301],
[328,256,252,369,323,322,211,174,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,265,233,255,272,239,271,253],
[270,0,287,265,269,278,279,260,260,260],
[279,263,0,252,226,266,265,260,260,264],
[285,285,298,0,276,282,274,258,263,270],
[317,281,324,274,0,293,290,277,283,275],
[295,272,284,268,257,0,282,264,269,273],
[278,271,285,276,260,268,0,250,271,256],
[311,290,290,292,273,286,300,0,290,269],
[279,290,290,287,267,281,279,260,0,262],
[297,290,286,280,275,277,294,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,286,274,279,296,289,299,257,305],
[297,0,284,266,296,320,284,287,245,287],
[264,266,0,241,250,284,270,278,249,274],
[276,284,309,0,274,310,303,289,279,309],
[271,254,300,276,0,296,288,287,255,306],
[254,230,266,240,254,0,268,252,255,272],
[261,266,280,247,262,282,0,263,248,271],
[251,263,272,261,263,298,287,0,236,294],
[293,305,301,271,295,295,302,314,0,300],
[245,263,276,241,244,278,279,256,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,267,269,264,261,275,259,270,272],
[297,0,286,267,286,266,285,284,302,290],
[283,264,0,263,266,267,255,265,285,265],
[281,283,287,0,262,271,290,294,291,288],
[286,264,284,288,0,275,284,283,275,286],
[289,284,283,279,275,0,270,274,292,275],
[275,265,295,260,266,280,0,278,273,267],
[291,266,285,256,267,276,272,0,291,275],
[280,248,265,259,275,258,277,259,0,272],
[278,260,285,262,264,275,283,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,342,312,323,313,273,275,305,296],
[271,0,309,304,307,318,284,314,292,298],
[208,241,0,255,264,277,229,263,283,230],
[238,246,295,0,300,281,256,275,267,258],
[227,243,286,250,0,255,218,268,261,231],
[237,232,273,269,295,0,260,251,264,230],
[277,266,321,294,332,290,0,276,315,275],
[275,236,287,275,282,299,274,0,299,306],
[245,258,267,283,289,286,235,251,0,242],
[254,252,320,292,319,320,275,244,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,271,269,281,257,252,257,251,254],
[293,0,289,298,317,293,287,277,269,252],
[279,261,0,259,298,276,272,288,258,258],
[281,252,291,0,286,258,296,267,252,268],
[269,233,252,264,0,254,244,275,260,259],
[293,257,274,292,296,0,279,282,272,292],
[298,263,278,254,306,271,0,291,264,264],
[293,273,262,283,275,268,259,0,283,262],
[299,281,292,298,290,278,286,267,0,276],
[296,298,292,282,291,258,286,288,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,316,242,281,279,256,282,262,298],
[241,0,275,230,257,236,234,229,241,219],
[234,275,0,266,245,251,216,251,244,265],
[308,320,284,0,270,278,271,251,239,286],
[269,293,305,280,0,270,257,295,261,287],
[271,314,299,272,280,0,250,271,279,308],
[294,316,334,279,293,300,0,277,290,264],
[268,321,299,299,255,279,273,0,270,284],
[288,309,306,311,289,271,260,280,0,285],
[252,331,285,264,263,242,286,266,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,302,289,246,249,253,255,291,292],
[277,0,236,273,258,294,248,261,273,263],
[248,314,0,284,284,246,245,244,277,323],
[261,277,266,0,272,267,257,238,279,278],
[304,292,266,278,0,272,265,253,282,277],
[301,256,304,283,278,0,265,286,278,282],
[297,302,305,293,285,285,0,275,283,283],
[295,289,306,312,297,264,275,0,309,290],
[259,277,273,271,268,272,267,241,0,253],
[258,287,227,272,273,268,267,260,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,265,259,257,254,271,249,263],
[277,0,285,254,264,276,254,287,260,258],
[282,265,0,257,266,273,256,292,260,268],
[285,296,293,0,265,295,279,304,280,290],
[291,286,284,285,0,278,299,297,272,291],
[293,274,277,255,272,0,277,292,264,280],
[296,296,294,271,251,273,0,302,271,284],
[279,263,258,246,253,258,248,0,266,270],
[301,290,290,270,278,286,279,284,0,281],
[287,292,282,260,259,270,266,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,286,256,257,291,256,275,246,265],
[292,0,310,276,296,262,281,271,299,283],
[264,240,0,260,270,288,278,286,252,267],
[294,274,290,0,288,286,305,300,272,289],
[293,254,280,262,0,281,285,276,262,251],
[259,288,262,264,269,0,267,272,270,279],
[294,269,272,245,265,283,0,271,244,281],
[275,279,264,250,274,278,279,0,276,256],
[304,251,298,278,288,280,306,274,0,266],
[285,267,283,261,299,271,269,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,268,248,259,250,262,285,258,276],
[271,0,274,266,255,270,266,277,256,266],
[282,276,0,266,278,276,243,281,254,257],
[302,284,284,0,281,281,275,291,265,274],
[291,295,272,269,0,284,271,281,263,254],
[300,280,274,269,266,0,266,280,271,271],
[288,284,307,275,279,284,0,283,277,283],
[265,273,269,259,269,270,267,0,257,260],
[292,294,296,285,287,279,273,293,0,276],
[274,284,293,276,296,279,267,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,228,355,199,331,256,279,283,323],
[303,0,173,274,220,205,239,287,326,259],
[322,377,0,289,342,397,284,245,292,366],
[195,276,261,0,254,220,164,223,210,278],
[351,330,208,296,0,225,175,334,256,288],
[219,345,153,330,325,0,176,197,268,355],
[294,311,266,386,375,374,0,274,347,326],
[271,263,305,327,216,353,276,0,333,287],
[267,224,258,340,294,282,203,217,0,292],
[227,291,184,272,262,195,224,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,265,268,302,238,261,236,252],
[267,0,267,273,249,258,247,234,221,232],
[272,283,0,281,231,261,254,249,271,259],
[285,277,269,0,260,272,275,266,240,261],
[282,301,319,290,0,303,290,265,257,282],
[248,292,289,278,247,0,270,271,261,238],
[312,303,296,275,260,280,0,240,264,253],
[289,316,301,284,285,279,310,0,245,251],
[314,329,279,310,293,289,286,305,0,271],
[298,318,291,289,268,312,297,299,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,289,258,281,290,283,267,265,267],
[274,0,286,268,280,293,295,260,297,301],
[261,264,0,265,265,259,262,263,289,272],
[292,282,285,0,286,312,299,286,271,285],
[269,270,285,264,0,297,257,270,262,278],
[260,257,291,238,253,0,251,267,257,249],
[267,255,288,251,293,299,0,283,273,287],
[283,290,287,264,280,283,267,0,268,282],
[285,253,261,279,288,293,277,282,0,263],
[283,249,278,265,272,301,263,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,294,282,287,278,272,292,294,301],
[257,0,275,278,282,273,232,283,296,276],
[256,275,0,276,292,265,251,290,281,281],
[268,272,274,0,273,264,277,290,293,269],
[263,268,258,277,0,247,242,269,279,271],
[272,277,285,286,303,0,248,296,290,294],
[278,318,299,273,308,302,0,306,306,313],
[258,267,260,260,281,254,244,0,274,271],
[256,254,269,257,271,260,244,276,0,269],
[249,274,269,281,279,256,237,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,266,270,265,270,273,276,267,253],
[263,0,278,294,273,281,295,281,278,276],
[284,272,0,289,241,270,259,272,255,257],
[280,256,261,0,258,259,269,283,254,261],
[285,277,309,292,0,282,289,294,270,261],
[280,269,280,291,268,0,289,285,267,267],
[277,255,291,281,261,261,0,277,263,274],
[274,269,278,267,256,265,273,0,274,251],
[283,272,295,296,280,283,287,276,0,273],
[297,274,293,289,289,283,276,299,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,292,272,265,259,267,249,249,258],
[276,0,264,274,263,251,247,257,258,258],
[258,286,0,267,262,259,270,267,252,264],
[278,276,283,0,279,258,274,263,279,266],
[285,287,288,271,0,257,266,276,273,264],
[291,299,291,292,293,0,266,282,276,279],
[283,303,280,276,284,284,0,258,278,273],
[301,293,283,287,274,268,292,0,290,267],
[301,292,298,271,277,274,272,260,0,278],
[292,292,286,284,286,271,277,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,278,254,258,271,291,275,289],
[273,0,284,264,252,260,268,294,247,267],
[265,266,0,263,256,246,242,279,259,260],
[272,286,287,0,273,276,254,292,266,272],
[296,298,294,277,0,266,275,305,259,285],
[292,290,304,274,284,0,283,299,255,302],
[279,282,308,296,275,267,0,313,265,279],
[259,256,271,258,245,251,237,0,235,250],
[275,303,291,284,291,295,285,315,0,292],
[261,283,290,278,265,248,271,300,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,289,279,288,273,260,261,269],
[278,0,279,262,267,268,271,256,255,275],
[284,271,0,259,253,271,263,274,263,257],
[261,288,291,0,266,285,276,254,266,259],
[271,283,297,284,0,297,263,266,254,263],
[262,282,279,265,253,0,273,270,251,267],
[277,279,287,274,287,277,0,278,286,259],
[290,294,276,296,284,280,272,0,273,287],
[289,295,287,284,296,299,264,277,0,276],
[281,275,293,291,287,283,291,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,265,288,278,275,273,283,278],
[279,0,267,274,266,285,255,279,279,282],
[276,283,0,282,297,285,289,275,288,281],
[285,276,268,0,268,277,266,272,284,282],
[262,284,253,282,0,265,266,267,285,288],
[272,265,265,273,285,0,264,264,270,267],
[275,295,261,284,284,286,0,265,282,289],
[277,271,275,278,283,286,285,0,291,295],
[267,271,262,266,265,280,268,259,0,275],
[272,268,269,268,262,283,261,255,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,264,279,269,270,279,265,254],
[291,0,293,261,287,274,268,270,272,282],
[270,257,0,256,265,255,262,279,268,266],
[286,289,294,0,275,286,284,292,272,296],
[271,263,285,275,0,282,263,274,255,281],
[281,276,295,264,268,0,275,272,268,271],
[280,282,288,266,287,275,0,285,265,269],
[271,280,271,258,276,278,265,0,261,255],
[285,278,282,278,295,282,285,289,0,273],
[296,268,284,254,269,279,281,295,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,302,290,280,270,279,294,275,278],
[270,0,279,262,260,268,256,271,271,272],
[248,271,0,272,258,264,278,270,262,279],
[260,288,278,0,269,274,253,287,271,290],
[270,290,292,281,0,277,275,291,294,289],
[280,282,286,276,273,0,295,285,287,302],
[271,294,272,297,275,255,0,282,268,290],
[256,279,280,263,259,265,268,0,250,267],
[275,279,288,279,256,263,282,300,0,281],
[272,278,271,260,261,248,260,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,289,255,296,270,292,259,266],
[256,0,260,273,271,262,271,272,253,251],
[273,290,0,271,250,284,261,267,266,270],
[261,277,279,0,244,290,266,281,252,253],
[295,279,300,306,0,285,268,291,272,283],
[254,288,266,260,265,0,260,285,267,261],
[280,279,289,284,282,290,0,275,254,257],
[258,278,283,269,259,265,275,0,260,251],
[291,297,284,298,278,283,296,290,0,275],
[284,299,280,297,267,289,293,299,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,271,288,281,270,256,267,284],
[273,0,303,270,295,286,266,267,268,277],
[285,247,0,288,269,284,268,274,263,281],
[279,280,262,0,276,281,273,258,272,276],
[262,255,281,274,0,278,273,267,267,274],
[269,264,266,269,272,0,276,270,256,265],
[280,284,282,277,277,274,0,270,284,272],
[294,283,276,292,283,280,280,0,271,266],
[283,282,287,278,283,294,266,279,0,271],
[266,273,269,274,276,285,278,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,267,279,280,272,270,273,300,238],
[291,0,261,300,308,285,266,273,332,266],
[283,289,0,270,301,297,272,304,336,253],
[271,250,280,0,254,285,246,272,326,275],
[270,242,249,296,0,287,269,292,322,262],
[278,265,253,265,263,0,266,237,310,259],
[280,284,278,304,281,284,0,280,320,252],
[277,277,246,278,258,313,270,0,325,279],
[250,218,214,224,228,240,230,225,0,223],
[312,284,297,275,288,291,298,271,327,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,209,233,284,263,339,227,361,244],
[292,0,245,302,293,295,231,258,298,312],
[341,305,0,278,277,287,275,300,332,290],
[317,248,272,0,318,281,270,324,322,346],
[266,257,273,232,0,296,187,252,286,246],
[287,255,263,269,254,0,261,262,295,289],
[211,319,275,280,363,289,0,277,332,274],
[323,292,250,226,298,288,273,0,314,274],
[189,252,218,228,264,255,218,236,0,264],
[306,238,260,204,304,261,276,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,267,282,271,270,302,278,284,294],
[274,0,274,275,274,271,288,276,286,291],
[283,276,0,278,280,262,274,279,288,287],
[268,275,272,0,280,272,275,277,287,280],
[279,276,270,270,0,279,281,290,285,292],
[280,279,288,278,271,0,290,274,299,288],
[248,262,276,275,269,260,0,272,271,275],
[272,274,271,273,260,276,278,0,282,294],
[266,264,262,263,265,251,279,268,0,284],
[256,259,263,270,258,262,275,256,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,268,276,273,278,280,270,276,281],
[257,0,265,281,270,272,257,273,263,266],
[282,285,0,270,270,269,277,262,275,261],
[274,269,280,0,273,273,255,281,297,278],
[277,280,280,277,0,271,267,280,286,268],
[272,278,281,277,279,0,260,291,287,275],
[270,293,273,295,283,290,0,285,287,282],
[280,277,288,269,270,259,265,0,267,254],
[274,287,275,253,264,263,263,283,0,271],
[269,284,289,272,282,275,268,296,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,281,283,278,278,288,286,277,251],
[294,0,290,281,292,274,288,287,292,274],
[269,260,0,272,262,264,292,279,266,254],
[267,269,278,0,252,269,276,280,275,278],
[272,258,288,298,0,288,293,286,284,263],
[272,276,286,281,262,0,296,291,272,252],
[262,262,258,274,257,254,0,271,277,263],
[264,263,271,270,264,259,279,0,252,257],
[273,258,284,275,266,278,273,298,0,254],
[299,276,296,272,287,298,287,293,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,233,278,280,256,298,257,335],
[277,0,291,243,240,275,240,287,248,256],
[293,259,0,237,283,245,261,279,252,279],
[317,307,313,0,298,309,279,332,259,321],
[272,310,267,252,0,281,263,299,261,288],
[270,275,305,241,269,0,275,304,258,298],
[294,310,289,271,287,275,0,294,278,286],
[252,263,271,218,251,246,256,0,234,245],
[293,302,298,291,289,292,272,316,0,302],
[215,294,271,229,262,252,264,305,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,285,272,274,293,294,309,283,276],
[280,0,285,271,276,279,288,279,268,256],
[265,265,0,285,282,283,290,274,272,277],
[278,279,265,0,274,260,276,266,280,278],
[276,274,268,276,0,275,299,287,283,273],
[257,271,267,290,275,0,276,290,262,273],
[256,262,260,274,251,274,0,281,255,261],
[241,271,276,284,263,260,269,0,269,272],
[267,282,278,270,267,288,295,281,0,260],
[274,294,273,272,277,277,289,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,282,284,294,274,256,280,285,273],
[275,0,253,274,305,265,264,260,264,281],
[268,297,0,280,304,282,285,295,260,272],
[266,276,270,0,271,271,251,270,275,282],
[256,245,246,279,0,272,236,277,249,248],
[276,285,268,279,278,0,262,280,235,261],
[294,286,265,299,314,288,0,281,265,272],
[270,290,255,280,273,270,269,0,263,271],
[265,286,290,275,301,315,285,287,0,288],
[277,269,278,268,302,289,278,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,301,271,336,321,278,331,289,325],
[245,0,273,262,291,281,326,282,287,282],
[249,277,0,308,340,293,340,289,305,233],
[279,288,242,0,269,293,279,309,293,272],
[214,259,210,281,0,288,238,253,203,243],
[229,269,257,257,262,0,238,278,258,268],
[272,224,210,271,312,312,0,282,271,244],
[219,268,261,241,297,272,268,0,223,276],
[261,263,245,257,347,292,279,327,0,283],
[225,268,317,278,307,282,306,274,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,259,258,266,252,234,247,285,260],
[303,0,273,297,275,280,309,275,352,317],
[291,277,0,280,285,246,280,276,293,301],
[292,253,270,0,298,275,275,279,311,282],
[284,275,265,252,0,260,250,265,327,279],
[298,270,304,275,290,0,308,269,334,309],
[316,241,270,275,300,242,0,270,265,285],
[303,275,274,271,285,281,280,0,308,316],
[265,198,257,239,223,216,285,242,0,270],
[290,233,249,268,271,241,265,234,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,265,278,248,260,261,270,270],
[289,0,274,293,269,266,249,277,287,277],
[280,276,0,299,263,255,275,271,276,284],
[285,257,251,0,273,247,257,269,249,263],
[272,281,287,277,0,265,272,269,284,285],
[302,284,295,303,285,0,294,278,274,300],
[290,301,275,293,278,256,0,294,248,286],
[289,273,279,281,281,272,256,0,273,289],
[280,263,274,301,266,276,302,277,0,269],
[280,273,266,287,265,250,264,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,320,311,288,273,267,270,317,317],
[259,0,267,279,267,253,242,268,263,294],
[230,283,0,293,252,252,264,266,251,294],
[239,271,257,0,229,262,262,295,275,328],
[262,283,298,321,0,288,258,294,288,300],
[277,297,298,288,262,0,263,300,262,329],
[283,308,286,288,292,287,0,290,286,274],
[280,282,284,255,256,250,260,0,261,254],
[233,287,299,275,262,288,264,289,0,323],
[233,256,256,222,250,221,276,296,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,265,241,259,274,245,234,265,274],
[307,0,271,292,280,284,266,290,285,272],
[285,279,0,267,269,279,248,278,286,271],
[309,258,283,0,295,275,272,262,279,284],
[291,270,281,255,0,270,261,289,259,288],
[276,266,271,275,280,0,252,245,264,272],
[305,284,302,278,289,298,0,275,272,296],
[316,260,272,288,261,305,275,0,275,275],
[285,265,264,271,291,286,278,275,0,280],
[276,278,279,266,262,278,254,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,283,271,270,286,282,273,275],
[272,0,290,262,294,281,272,263,282,271],
[266,260,0,258,254,284,260,279,288,270],
[267,288,292,0,263,286,264,260,274,266],
[279,256,296,287,0,293,283,287,314,291],
[280,269,266,264,257,0,263,273,275,260],
[264,278,290,286,267,287,0,277,296,289],
[268,287,271,290,263,277,273,0,285,288],
[277,268,262,276,236,275,254,265,0,259],
[275,279,280,284,259,290,261,262,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,269,247,283,297,270,284,281,287],
[286,0,258,281,300,310,277,303,283,276],
[281,292,0,264,299,310,282,281,289,281],
[303,269,286,0,298,317,304,293,294,292],
[267,250,251,252,0,296,247,291,277,257],
[253,240,240,233,254,0,236,271,251,268],
[280,273,268,246,303,314,0,282,290,276],
[266,247,269,257,259,279,268,0,267,270],
[269,267,261,256,273,299,260,283,0,279],
[263,274,269,258,293,282,274,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,253,286,285,283,319,272,285,266],
[267,0,252,255,283,283,271,261,250,259],
[297,298,0,289,313,289,286,268,283,267],
[264,295,261,0,286,288,277,267,257,281],
[265,267,237,264,0,296,265,252,268,261],
[267,267,261,262,254,0,269,256,261,247],
[231,279,264,273,285,281,0,257,289,250],
[278,289,282,283,298,294,293,0,297,268],
[265,300,267,293,282,289,261,253,0,257],
[284,291,283,269,289,303,300,282,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,275,275,281,274,286,291,275,268],
[253,0,283,262,263,258,267,258,272,264],
[275,267,0,278,282,270,264,258,266,273],
[275,288,272,0,273,270,263,262,280,265],
[269,287,268,277,0,253,270,284,267,267],
[276,292,280,280,297,0,275,291,276,285],
[264,283,286,287,280,275,0,284,284,279],
[259,292,292,288,266,259,266,0,281,276],
[275,278,284,270,283,274,266,269,0,282],
[282,286,277,285,283,265,271,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,278,269,269,247,263,250,280],
[288,0,288,274,272,299,275,264,280,269],
[269,262,0,269,275,290,270,271,280,255],
[272,276,281,0,272,302,254,264,261,267],
[281,278,275,278,0,281,253,265,270,258],
[281,251,260,248,269,0,257,253,254,289],
[303,275,280,296,297,293,0,280,270,292],
[287,286,279,286,285,297,270,0,266,275],
[300,270,270,289,280,296,280,284,0,278],
[270,281,295,283,292,261,258,275,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,269,260,270,286,282,264,286,266],
[248,0,269,272,259,282,261,261,281,253],
[281,281,0,279,261,284,280,277,279,275],
[290,278,271,0,280,294,284,270,274,296],
[280,291,289,270,0,284,267,256,291,270],
[264,268,266,256,266,0,255,250,275,253],
[268,289,270,266,283,295,0,270,288,278],
[286,289,273,280,294,300,280,0,286,286],
[264,269,271,276,259,275,262,264,0,272],
[284,297,275,254,280,297,272,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,297,271,281,287,277,276,274,287],
[294,0,281,288,255,277,279,285,274,286],
[253,269,0,280,261,264,273,268,278,265],
[279,262,270,0,261,269,281,268,268,271],
[269,295,289,289,0,281,301,287,292,296],
[263,273,286,281,269,0,294,273,277,269],
[273,271,277,269,249,256,0,270,263,281],
[274,265,282,282,263,277,280,0,275,268],
[276,276,272,282,258,273,287,275,0,289],
[263,264,285,279,254,281,269,282,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,258,283,229,288,267,268,268],
[292,0,277,274,294,252,302,273,297,273],
[284,273,0,274,285,249,293,269,270,268],
[292,276,276,0,296,285,308,279,275,279],
[267,256,265,254,0,261,281,249,272,255],
[321,298,301,265,289,0,289,281,302,284],
[262,248,257,242,269,261,0,260,263,257],
[283,277,281,271,301,269,290,0,269,268],
[282,253,280,275,278,248,287,281,0,264],
[282,277,282,271,295,266,293,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,276,289,299,274,277,300,290],
[279,0,288,279,301,293,288,270,279,283],
[259,262,0,283,286,285,272,265,274,284],
[274,271,267,0,277,279,272,259,278,276],
[261,249,264,273,0,258,249,257,276,278],
[251,257,265,271,292,0,263,257,277,278],
[276,262,278,278,301,287,0,268,287,282],
[273,280,285,291,293,293,282,0,287,297],
[250,271,276,272,274,273,263,263,0,264],
[260,267,266,274,272,272,268,253,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,245,274,282,270,256,256,269,271],
[283,0,265,289,288,277,272,251,270,270],
[305,285,0,275,272,285,275,274,290,278],
[276,261,275,0,279,244,244,260,255,265],
[268,262,278,271,0,276,264,276,260,267],
[280,273,265,306,274,0,267,269,297,272],
[294,278,275,306,286,283,0,274,274,274],
[294,299,276,290,274,281,276,0,278,285],
[281,280,260,295,290,253,276,272,0,250],
[279,280,272,285,283,278,276,265,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,152,104,225,242,129,265,114,171],
[231,0,54,85,210,140,48,90,48,246],
[398,496,0,337,416,423,273,473,273,221],
[446,465,213,0,502,448,338,396,232,355],
[325,340,134,48,0,347,292,241,153,207],
[308,410,127,102,203,0,195,309,112,277],
[421,502,277,212,258,355,0,411,207,244],
[285,460,77,154,309,241,139,0,33,221],
[436,502,277,318,397,438,343,517,0,244],
[379,304,329,195,343,273,306,329,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,254,278,281,288,302,268,264,272],
[240,0,238,253,241,257,285,242,263,256],
[296,312,0,286,289,315,291,284,298,273],
[272,297,264,0,274,273,280,277,264,238],
[269,309,261,276,0,258,290,270,281,266],
[262,293,235,277,292,0,281,258,267,259],
[248,265,259,270,260,269,0,278,233,266],
[282,308,266,273,280,292,272,0,266,292],
[286,287,252,286,269,283,317,284,0,285],
[278,294,277,312,284,291,284,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,252,246,279,271,255,296,267],
[276,0,267,234,260,265,279,272,301,272],
[276,283,0,272,269,272,281,265,288,270],
[298,316,278,0,275,290,298,292,307,306],
[304,290,281,275,0,290,299,290,301,281],
[271,285,278,260,260,0,283,288,288,280],
[279,271,269,252,251,267,0,279,283,271],
[295,278,285,258,260,262,271,0,301,274],
[254,249,262,243,249,262,267,249,0,263],
[283,278,280,244,269,270,279,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,264,286,268,272,266,282,284],
[269,0,266,251,269,254,253,282,278,240],
[274,284,0,263,265,294,254,290,276,267],
[286,299,287,0,278,283,269,271,281,280],
[264,281,285,272,0,288,278,276,267,271],
[282,296,256,267,262,0,262,260,285,269],
[278,297,296,281,272,288,0,275,267,288],
[284,268,260,279,274,290,275,0,286,257],
[268,272,274,269,283,265,283,264,0,272],
[266,310,283,270,279,281,262,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,295,311,264,268,260,266,292,265],
[271,0,301,306,298,284,272,259,292,279],
[255,249,0,285,249,285,257,246,279,249],
[239,244,265,0,241,264,254,242,275,272],
[286,252,301,309,0,272,273,259,279,283],
[282,266,265,286,278,0,256,288,259,265],
[290,278,293,296,277,294,0,287,293,272],
[284,291,304,308,291,262,263,0,300,264],
[258,258,271,275,271,291,257,250,0,277],
[285,271,301,278,267,285,278,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,273,265,263,269,282,266,279],
[280,0,282,281,270,289,277,284,283,281],
[277,268,0,285,280,280,268,282,275,279],
[277,269,265,0,269,271,265,273,278,254],
[285,280,270,281,0,289,265,278,281,277],
[287,261,270,279,261,0,284,272,277,273],
[281,273,282,285,285,266,0,275,289,292],
[268,266,268,277,272,278,275,0,281,271],
[284,267,275,272,269,273,261,269,0,271],
[271,269,271,296,273,277,258,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,433,397,180,268,264,183,120,382],
[365,0,474,397,180,309,314,224,275,474],
[117,76,0,272,187,270,130,151,35,340],
[153,153,278,0,139,227,118,146,146,347],
[370,370,363,411,0,370,370,363,254,363],
[282,241,280,323,180,0,206,265,193,384],
[286,236,420,432,180,344,0,110,79,502],
[367,326,399,404,187,285,440,0,64,399],
[430,275,515,404,296,357,471,486,0,430],
[168,76,210,203,187,166,48,151,120,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,273,281,285,270,266,282,273],
[269,0,265,293,290,280,275,255,268,270],
[283,285,0,292,300,280,288,279,282,270],
[277,257,258,0,272,280,277,257,282,259],
[269,260,250,278,0,275,250,253,276,278],
[265,270,270,270,275,0,277,257,281,262],
[280,275,262,273,300,273,0,255,288,270],
[284,295,271,293,297,293,295,0,303,280],
[268,282,268,268,274,269,262,247,0,266],
[277,280,280,291,272,288,280,270,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,320,291,299,262,320,294,263,265],
[254,0,272,247,277,242,262,243,238,233],
[230,278,0,236,277,244,276,272,265,247],
[259,303,314,0,310,244,306,267,281,287],
[251,273,273,240,0,238,289,234,255,226],
[288,308,306,306,312,0,313,255,288,282],
[230,288,274,244,261,237,0,254,235,237],
[256,307,278,283,316,295,296,0,280,277],
[287,312,285,269,295,262,315,270,0,260],
[285,317,303,263,324,268,313,273,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,267,256,269,268,266,276,278],
[281,0,257,255,253,267,257,261,272,277],
[270,293,0,267,275,269,277,283,265,284],
[283,295,283,0,285,265,279,288,281,289],
[294,297,275,265,0,283,292,285,275,289],
[281,283,281,285,267,0,291,269,286,283],
[282,293,273,271,258,259,0,283,268,275],
[284,289,267,262,265,281,267,0,263,259],
[274,278,285,269,275,264,282,287,0,279],
[272,273,266,261,261,267,275,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,256,258,259,257,256,251,270,273],
[285,0,259,276,283,262,292,278,283,252],
[294,291,0,292,272,282,297,277,291,280],
[292,274,258,0,248,261,277,271,269,262],
[291,267,278,302,0,261,298,274,288,277],
[293,288,268,289,289,0,280,284,298,285],
[294,258,253,273,252,270,0,276,284,269],
[299,272,273,279,276,266,274,0,277,263],
[280,267,259,281,262,252,266,273,0,269],
[277,298,270,288,273,265,281,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,240,283,212,248,260,230,235,286],
[331,0,284,336,301,308,274,284,292,316],
[310,266,0,336,304,345,316,259,268,310],
[267,214,214,0,243,245,232,191,192,248],
[338,249,246,307,0,288,296,287,234,315],
[302,242,205,305,262,0,285,318,272,316],
[290,276,234,318,254,265,0,265,267,297],
[320,266,291,359,263,232,285,0,323,356],
[315,258,282,358,316,278,283,227,0,351],
[264,234,240,302,235,234,253,194,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,280,271,286,285,272,272,270,267],
[285,0,279,277,267,290,265,271,270,273],
[270,271,0,267,278,284,280,272,273,277],
[279,273,283,0,281,280,268,274,280,275],
[264,283,272,269,0,260,270,280,264,259],
[265,260,266,270,290,0,277,252,272,274],
[278,285,270,282,280,273,0,279,267,262],
[278,279,278,276,270,298,271,0,263,275],
[280,280,277,270,286,278,283,287,0,274],
[283,277,273,275,291,276,288,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,251,250,264,284,263,265,256,256],
[266,0,242,258,267,308,259,271,256,256],
[299,308,0,257,278,299,283,278,275,259],
[300,292,293,0,292,307,274,273,268,275],
[286,283,272,258,0,283,279,275,249,255],
[266,242,251,243,267,0,258,260,243,250],
[287,291,267,276,271,292,0,279,271,263],
[285,279,272,277,275,290,271,0,285,273],
[294,294,275,282,301,307,279,265,0,282],
[294,294,291,275,295,300,287,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,277,290,272,265,270,245,304,284],
[245,0,255,258,286,289,249,233,291,253],
[273,295,0,250,260,245,280,261,293,254],
[260,292,300,0,280,272,290,252,316,265],
[278,264,290,270,0,270,292,274,308,250],
[285,261,305,278,280,0,283,290,304,270],
[280,301,270,260,258,267,0,282,297,275],
[305,317,289,298,276,260,268,0,313,278],
[246,259,257,234,242,246,253,237,0,226],
[266,297,296,285,300,280,275,272,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,281,280,273,286,282,292,283],
[272,0,272,294,284,287,280,273,302,275],
[284,278,0,293,276,273,289,285,289,275],
[269,256,257,0,260,260,285,264,276,261],
[270,266,274,290,0,277,289,278,289,270],
[277,263,277,290,273,0,284,273,291,275],
[264,270,261,265,261,266,0,252,283,251],
[268,277,265,286,272,277,298,0,298,276],
[258,248,261,274,261,259,267,252,0,265],
[267,275,275,289,280,275,299,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,271,266,295,282,282,281,283],
[278,0,287,301,284,276,297,301,290,275],
[273,263,0,291,256,269,272,280,280,265],
[279,249,259,0,255,273,266,280,270,266],
[284,266,294,295,0,289,284,301,296,278],
[255,274,281,277,261,0,266,273,265,262],
[268,253,278,284,266,284,0,276,280,274],
[268,249,270,270,249,277,274,0,275,271],
[269,260,270,280,254,285,270,275,0,256],
[267,275,285,284,272,288,276,279,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,271,297,263,298,285,261,267],
[277,0,286,257,304,294,298,268,274,285],
[279,264,0,275,295,275,280,289,277,273],
[279,293,275,0,299,298,285,283,280,267],
[253,246,255,251,0,243,260,248,264,239],
[287,256,275,252,307,0,280,278,278,276],
[252,252,270,265,290,270,0,260,250,258],
[265,282,261,267,302,272,290,0,270,264],
[289,276,273,270,286,272,300,280,0,281],
[283,265,277,283,311,274,292,286,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,274,288,266,276,256,285,279,266],
[252,0,240,265,251,225,277,229,255,232],
[276,310,0,247,304,258,268,307,269,290],
[262,285,303,0,245,240,250,241,263,238],
[284,299,246,305,0,260,289,305,291,271],
[274,325,292,310,290,0,294,282,300,307],
[294,273,282,300,261,256,0,302,296,256],
[265,321,243,309,245,268,248,0,270,257],
[271,295,281,287,259,250,254,280,0,257],
[284,318,260,312,279,243,294,293,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,264,269,262,264,286,273,272,276],
[282,0,258,266,278,260,291,277,283,273],
[286,292,0,269,285,280,315,295,276,289],
[281,284,281,0,273,278,296,297,293,294],
[288,272,265,277,0,282,284,272,294,293],
[286,290,270,272,268,0,289,274,282,282],
[264,259,235,254,266,261,0,270,255,259],
[277,273,255,253,278,276,280,0,268,276],
[278,267,274,257,256,268,295,282,0,274],
[274,277,261,256,257,268,291,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,271,298,264,259,302,259,275,267],
[249,0,271,271,253,233,260,262,283,269],
[279,279,0,292,270,288,292,293,282,278],
[252,279,258,0,275,239,261,264,278,274],
[286,297,280,275,0,279,307,263,282,294],
[291,317,262,311,271,0,293,283,300,285],
[248,290,258,289,243,257,0,252,291,282],
[291,288,257,286,287,267,298,0,289,294],
[275,267,268,272,268,250,259,261,0,272],
[283,281,272,276,256,265,268,256,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,252,271,272,253,253,268,266,248],
[284,0,271,286,286,265,267,274,295,263],
[298,279,0,295,290,263,253,290,311,277],
[279,264,255,0,287,260,271,276,284,255],
[278,264,260,263,0,254,269,270,283,251],
[297,285,287,290,296,0,272,280,293,272],
[297,283,297,279,281,278,0,286,298,272],
[282,276,260,274,280,270,264,0,302,264],
[284,255,239,266,267,257,252,248,0,263],
[302,287,273,295,299,278,278,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,253,265,285,250,253,264,277],
[284,0,258,268,267,268,254,248,248,266],
[286,292,0,295,303,294,275,296,263,266],
[297,282,255,0,274,266,264,260,263,269],
[285,283,247,276,0,277,264,264,255,263],
[265,282,256,284,273,0,274,278,271,269],
[300,296,275,286,286,276,0,281,275,263],
[297,302,254,290,286,272,269,0,260,261],
[286,302,287,287,295,279,275,290,0,269],
[273,284,284,281,287,281,287,289,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,267,267,290,284,253,273,266,292],
[262,0,276,291,298,290,287,279,283,305],
[283,274,0,272,296,293,261,267,272,287],
[283,259,278,0,281,271,259,246,256,289],
[260,252,254,269,0,273,242,268,269,285],
[266,260,257,279,277,0,264,257,275,279],
[297,263,289,291,308,286,0,285,303,312],
[277,271,283,304,282,293,265,0,284,298],
[284,267,278,294,281,275,247,266,0,274],
[258,245,263,261,265,271,238,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,272,261,242,236,281,250,262],
[285,0,268,262,309,272,253,288,268,281],
[274,282,0,264,296,249,260,298,271,274],
[278,288,286,0,307,277,247,273,271,270],
[289,241,254,243,0,246,258,279,293,249],
[308,278,301,273,304,0,258,320,305,295],
[314,297,290,303,292,292,0,308,310,269],
[269,262,252,277,271,230,242,0,235,272],
[300,282,279,279,257,245,240,315,0,286],
[288,269,276,280,301,255,281,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,285,295,264,281,276,260,288],
[264,0,283,279,267,292,277,260,280,278],
[279,267,0,278,278,287,277,287,278,286],
[265,271,272,0,262,289,284,280,275,294],
[255,283,272,288,0,284,288,263,276,295],
[286,258,263,261,266,0,281,239,254,276],
[269,273,273,266,262,269,0,267,267,286],
[274,290,263,270,287,311,283,0,273,301],
[290,270,272,275,274,296,283,277,0,295],
[262,272,264,256,255,274,264,249,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,311,310,298,309,281,251,286,290],
[270,0,279,255,309,288,311,310,270,285],
[239,271,0,271,302,272,262,257,325,285],
[240,295,279,0,296,271,280,265,305,275],
[252,241,248,254,0,236,270,232,260,286],
[241,262,278,279,314,0,297,234,267,297],
[269,239,288,270,280,253,0,282,256,312],
[299,240,293,285,318,316,268,0,333,315],
[264,280,225,245,290,283,294,217,0,310],
[260,265,265,275,264,253,238,235,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,263,295,289,265,266,269,271,271],
[244,0,271,230,266,259,240,253,249,263],
[287,279,0,265,270,265,271,277,255,281],
[255,320,285,0,284,269,278,285,265,284],
[261,284,280,266,0,253,268,272,255,263],
[285,291,285,281,297,0,272,296,282,289],
[284,310,279,272,282,278,0,290,270,305],
[281,297,273,265,278,254,260,0,256,292],
[279,301,295,285,295,268,280,294,0,276],
[279,287,269,266,287,261,245,258,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,296,309,286,259,290,295,300],
[260,0,274,281,275,253,261,265,275,289],
[255,276,0,253,268,232,259,264,253,274],
[254,269,297,0,265,263,249,273,271,266],
[241,275,282,285,0,275,269,265,274,268],
[264,297,318,287,275,0,294,269,287,297],
[291,289,291,301,281,256,0,278,293,303],
[260,285,286,277,285,281,272,0,292,274],
[255,275,297,279,276,263,257,258,0,261],
[250,261,276,284,282,253,247,276,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,249,283,329,363,237,327,352,382],
[263,0,276,310,354,338,254,324,332,357],
[301,274,0,308,291,466,250,426,406,386],
[267,240,242,0,276,289,285,289,241,313],
[221,196,259,274,0,333,298,277,333,338],
[187,212,84,261,217,0,193,268,276,262],
[313,296,300,265,252,357,0,356,323,324],
[223,226,124,261,273,282,194,0,326,268],
[198,218,144,309,217,274,227,224,0,322],
[168,193,164,237,212,288,226,282,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,285,309,290,274,296,279,283,277],
[253,0,272,284,260,270,263,271,284,243],
[265,278,0,282,256,302,285,298,255,247],
[241,266,268,0,253,247,223,241,247,262],
[260,290,294,297,0,275,275,296,272,282],
[276,280,248,303,275,0,270,276,290,282],
[254,287,265,327,275,280,0,316,279,249],
[271,279,252,309,254,274,234,0,259,254],
[267,266,295,303,278,260,271,291,0,290],
[273,307,303,288,268,268,301,296,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,272,258,276,269,268,278,272],
[271,0,284,283,277,275,274,262,268,282],
[268,266,0,274,257,263,264,262,264,266],
[278,267,276,0,263,284,263,266,268,261],
[292,273,293,287,0,276,269,266,266,272],
[274,275,287,266,274,0,270,265,253,264],
[281,276,286,287,281,280,0,258,258,279],
[282,288,288,284,284,285,292,0,266,285],
[272,282,286,282,284,297,292,284,0,281],
[278,268,284,289,278,286,271,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,253,262,250,263,265,258,241,292],
[303,0,278,269,273,307,273,280,290,300],
[297,272,0,288,285,307,267,272,265,292],
[288,281,262,0,288,292,275,271,260,273],
[300,277,265,262,0,304,283,283,283,315],
[287,243,243,258,246,0,256,245,254,287],
[285,277,283,275,267,294,0,273,270,283],
[292,270,278,279,267,305,277,0,291,293],
[309,260,285,290,267,296,280,259,0,294],
[258,250,258,277,235,263,267,257,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,283,285,278,291,271,296,269,262],
[228,0,263,248,194,244,200,267,199,202],
[267,287,0,298,195,255,247,266,247,221],
[265,302,252,0,291,268,246,241,285,257],
[272,356,355,259,0,318,288,285,287,305],
[259,306,295,282,232,0,264,288,263,261],
[279,350,303,304,262,286,0,284,286,273],
[254,283,284,309,265,262,266,0,257,257],
[281,351,303,265,263,287,264,293,0,258],
[288,348,329,293,245,289,277,293,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,248,273,275,293,307,274,288],
[260,0,287,236,276,272,276,280,249,258],
[277,263,0,246,260,262,266,278,260,264],
[302,314,304,0,273,275,299,302,276,277],
[277,274,290,277,0,286,274,290,282,284],
[275,278,288,275,264,0,280,291,263,283],
[257,274,284,251,276,270,0,281,262,266],
[243,270,272,248,260,259,269,0,280,273],
[276,301,290,274,268,287,288,270,0,275],
[262,292,286,273,266,267,284,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,234,257,292,304,260,253,294,264],
[289,0,275,250,279,275,307,253,302,263],
[316,275,0,294,279,295,284,261,296,281],
[293,300,256,0,275,273,280,259,312,247],
[258,271,271,275,0,255,285,277,280,262],
[246,275,255,277,295,0,280,261,280,248],
[290,243,266,270,265,270,0,269,281,248],
[297,297,289,291,273,289,281,0,319,257],
[256,248,254,238,270,270,269,231,0,243],
[286,287,269,303,288,302,302,293,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,255,264,262,229,244,236,290,280],
[279,0,256,268,271,286,280,256,284,292],
[295,294,0,265,312,293,295,275,294,306],
[286,282,285,0,273,290,271,286,289,298],
[288,279,238,277,0,261,255,244,250,289],
[321,264,257,260,289,0,289,270,271,296],
[306,270,255,279,295,261,0,256,269,291],
[314,294,275,264,306,280,294,0,295,329],
[260,266,256,261,300,279,281,255,0,269],
[270,258,244,252,261,254,259,221,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,281,267,303,284,281,308,291,287],
[260,0,279,265,277,280,270,292,274,278],
[269,271,0,259,272,277,279,282,274,270],
[283,285,291,0,283,287,284,307,279,274],
[247,273,278,267,0,285,271,277,286,274],
[266,270,273,263,265,0,263,285,275,283],
[269,280,271,266,279,287,0,294,272,275],
[242,258,268,243,273,265,256,0,242,269],
[259,276,276,271,264,275,278,308,0,275],
[263,272,280,276,276,267,275,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,168,279,188,219,191,234,262,217],
[318,0,184,322,293,229,224,259,262,238],
[382,366,0,329,281,269,279,280,243,267],
[271,228,221,0,212,214,227,218,252,205],
[362,257,269,338,0,301,299,321,324,282],
[331,321,281,336,249,0,290,272,308,285],
[359,326,271,323,251,260,0,317,313,273],
[316,291,270,332,229,278,233,0,272,263],
[288,288,307,298,226,242,237,278,0,272],
[333,312,283,345,268,265,277,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,269,295,276,277,301,263,275,285],
[293,0,259,274,272,280,297,283,282,265],
[281,291,0,280,293,310,298,294,270,272],
[255,276,270,0,289,308,281,275,259,269],
[274,278,257,261,0,295,292,273,279,275],
[273,270,240,242,255,0,283,250,277,257],
[249,253,252,269,258,267,0,274,271,262],
[287,267,256,275,277,300,276,0,271,274],
[275,268,280,291,271,273,279,279,0,275],
[265,285,278,281,275,293,288,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,264,267,262,288,318,284,267],
[274,0,268,281,268,259,282,275,295,282],
[271,282,0,278,243,253,245,269,304,288],
[286,269,272,0,283,279,277,292,284,274],
[283,282,307,267,0,256,278,294,287,274],
[288,291,297,271,294,0,274,291,299,276],
[262,268,305,273,272,276,0,284,282,268],
[232,275,281,258,256,259,266,0,280,265],
[266,255,246,266,263,251,268,270,0,265],
[283,268,262,276,276,274,282,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,275,293,271,295,276,277,286],
[280,0,277,285,306,272,284,265,281,291],
[283,273,0,271,286,272,294,282,267,288],
[275,265,279,0,289,275,277,271,265,286],
[257,244,264,261,0,260,256,250,243,279],
[279,278,278,275,290,0,283,274,253,285],
[255,266,256,273,294,267,0,281,260,262],
[274,285,268,279,300,276,269,0,262,278],
[273,269,283,285,307,297,290,288,0,290],
[264,259,262,264,271,265,288,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,278,276,281,285,273,257,267],
[276,0,281,284,272,273,303,258,257,268],
[277,269,0,265,268,270,284,261,256,271],
[272,266,285,0,274,268,286,257,265,266],
[274,278,282,276,0,287,288,264,254,261],
[269,277,280,282,263,0,302,250,255,272],
[265,247,266,264,262,248,0,251,237,249],
[277,292,289,293,286,300,299,0,280,275],
[293,293,294,285,296,295,313,270,0,277],
[283,282,279,284,289,278,301,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,260,254,276,275,268,286,305,256],
[271,0,270,273,274,271,277,276,270,266],
[290,280,0,292,288,286,270,280,300,269],
[296,277,258,0,293,278,248,299,306,242],
[274,276,262,257,0,254,259,282,270,267],
[275,279,264,272,296,0,256,299,301,273],
[282,273,280,302,291,294,0,305,303,282],
[264,274,270,251,268,251,245,0,280,272],
[245,280,250,244,280,249,247,270,0,253],
[294,284,281,308,283,277,268,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,266,255,282,248,316,224,269,284],
[223,0,265,260,239,260,267,211,321,279],
[284,285,0,256,246,241,238,219,265,264],
[295,290,294,0,299,233,296,253,312,273],
[268,311,304,251,0,221,255,246,271,259],
[302,290,309,317,329,0,308,275,329,285],
[234,283,312,254,295,242,0,226,268,271],
[326,339,331,297,304,275,324,0,321,307],
[281,229,285,238,279,221,282,229,0,249],
[266,271,286,277,291,265,279,243,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,290,277,268,277,308,302,276,292],
[280,0,252,254,272,270,289,282,257,277],
[260,298,0,250,289,266,266,298,268,285],
[273,296,300,0,288,273,283,292,266,295],
[282,278,261,262,0,248,286,295,264,306],
[273,280,284,277,302,0,277,304,279,297],
[242,261,284,267,264,273,0,267,247,282],
[248,268,252,258,255,246,283,0,249,294],
[274,293,282,284,286,271,303,301,0,286],
[258,273,265,255,244,253,268,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,279,298,319,325,272,313,294,275],
[251,0,250,270,290,310,292,256,258,290],
[271,300,0,259,293,309,245,252,258,272],
[252,280,291,0,339,309,296,277,296,292],
[231,260,257,211,0,264,243,260,231,258],
[225,240,241,241,286,0,236,271,260,235],
[278,258,305,254,307,314,0,291,257,279],
[237,294,298,273,290,279,259,0,275,285],
[256,292,292,254,319,290,293,275,0,265],
[275,260,278,258,292,315,271,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,261,282,280,276,282,297,269,278],
[296,0,283,295,291,303,283,296,272,282],
[289,267,0,282,280,297,283,281,279,282],
[268,255,268,0,264,265,282,263,254,290],
[270,259,270,286,0,282,285,300,257,267],
[274,247,253,285,268,0,290,267,261,278],
[268,267,267,268,265,260,0,265,255,282],
[253,254,269,287,250,283,285,0,259,269],
[281,278,271,296,293,289,295,291,0,302],
[272,268,268,260,283,272,268,281,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,276,272,268,270,255,293,280],
[268,0,255,297,268,282,263,273,302,259],
[276,295,0,290,246,281,256,252,281,293],
[274,253,260,0,240,259,257,276,278,271],
[278,282,304,310,0,293,286,291,289,272],
[282,268,269,291,257,0,272,282,299,271],
[280,287,294,293,264,278,0,268,301,298],
[295,277,298,274,259,268,282,0,288,272],
[257,248,269,272,261,251,249,262,0,269],
[270,291,257,279,278,279,252,278,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,294,295,286,263,289,293,296,292],
[251,0,271,265,259,249,265,295,263,251],
[256,279,0,270,262,262,264,288,271,267],
[255,285,280,0,275,258,268,291,285,259],
[264,291,288,275,0,279,287,288,274,265],
[287,301,288,292,271,0,274,316,297,257],
[261,285,286,282,263,276,0,284,288,263],
[257,255,262,259,262,234,266,0,258,261],
[254,287,279,265,276,253,262,292,0,264],
[258,299,283,291,285,293,287,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,237,259,276,192,245,246,258],
[290,0,316,290,322,275,233,248,249,334],
[284,234,0,292,249,275,222,282,272,287],
[313,260,258,0,336,288,238,251,337,255],
[291,228,301,214,0,254,226,242,255,302],
[274,275,275,262,296,0,222,238,246,283],
[358,317,328,312,324,328,0,346,274,342],
[305,302,268,299,308,312,204,0,261,280],
[304,301,278,213,295,304,276,289,0,277],
[292,216,263,295,248,267,208,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,238,253,242,220,210,238,213,250],
[288,0,275,260,254,243,219,251,251,266],
[312,275,0,296,271,276,258,269,295,310],
[297,290,254,0,266,216,250,303,270,266],
[308,296,279,284,0,249,241,282,269,236],
[330,307,274,334,301,0,286,320,267,328],
[340,331,292,300,309,264,0,304,273,324],
[312,299,281,247,268,230,246,0,258,289],
[337,299,255,280,281,283,277,292,0,307],
[300,284,240,284,314,222,226,261,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,303,275,271,292,288,289,288,272],
[255,0,268,242,258,283,257,270,255,232],
[247,282,0,272,255,288,266,281,269,258],
[275,308,278,0,278,277,261,271,271,280],
[279,292,295,272,0,308,287,300,291,286],
[258,267,262,273,242,0,268,281,257,249],
[262,293,284,289,263,282,0,279,276,270],
[261,280,269,279,250,269,271,0,259,251],
[262,295,281,279,259,293,274,291,0,270],
[278,318,292,270,264,301,280,299,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,297,297,298,285,258,286,282,286],
[281,0,295,300,275,281,266,297,290,279],
[253,255,0,270,259,254,257,269,265,258],
[253,250,280,0,264,270,256,280,262,268],
[252,275,291,286,0,283,277,294,270,281],
[265,269,296,280,267,0,270,285,279,266],
[292,284,293,294,273,280,0,304,284,286],
[264,253,281,270,256,265,246,0,266,276],
[268,260,285,288,280,271,266,284,0,279],
[264,271,292,282,269,284,264,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,257,277,296,301,272,281,283,301],
[270,0,263,270,278,253,279,303,269,282],
[293,287,0,302,285,261,303,277,299,315],
[273,280,248,0,281,288,281,288,274,300],
[254,272,265,269,0,293,301,285,263,271],
[249,297,289,262,257,0,252,268,258,298],
[278,271,247,269,249,298,0,282,248,286],
[269,247,273,262,265,282,268,0,241,279],
[267,281,251,276,287,292,302,309,0,303],
[249,268,235,250,279,252,264,271,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,264,300,269,273,259,291,279,273],
[274,0,273,279,269,282,250,299,272,296],
[286,277,0,282,274,281,257,304,274,268],
[250,271,268,0,258,266,239,289,269,260],
[281,281,276,292,0,281,280,305,291,272],
[277,268,269,284,269,0,261,301,287,273],
[291,300,293,311,270,289,0,295,307,275],
[259,251,246,261,245,249,255,0,257,244],
[271,278,276,281,259,263,243,293,0,264],
[277,254,282,290,278,277,275,306,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,330,195,212,290,262,167,279,189],
[280,0,277,268,254,228,220,164,290,180],
[220,273,0,247,165,154,134,229,271,128],
[355,282,303,0,258,194,193,261,255,203],
[338,296,385,292,0,297,226,249,322,222],
[260,322,396,356,253,0,229,227,422,258],
[288,330,416,357,324,321,0,283,377,269],
[383,386,321,289,301,323,267,0,282,278],
[271,260,279,295,228,128,173,268,0,169],
[361,370,422,347,328,292,281,272,381,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,255,254,285,261,259,259,263,272],
[294,0,275,278,307,266,284,278,275,290],
[295,275,0,264,298,267,280,254,267,287],
[296,272,286,0,300,287,276,272,273,295],
[265,243,252,250,0,255,253,232,253,251],
[289,284,283,263,295,0,270,261,261,291],
[291,266,270,274,297,280,0,264,280,292],
[291,272,296,278,318,289,286,0,287,294],
[287,275,283,277,297,289,270,263,0,294],
[278,260,263,255,299,259,258,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,356,349,309,287,334,352,224,262],
[216,0,276,324,258,256,305,364,210,269],
[194,274,0,265,256,217,283,299,252,285],
[201,226,285,0,256,258,305,359,253,260],
[241,292,294,294,0,288,256,366,193,252],
[263,294,333,292,262,0,300,372,268,307],
[216,245,267,245,294,250,0,344,212,236],
[198,186,251,191,184,178,206,0,172,176],
[326,340,298,297,357,282,338,378,0,267],
[288,281,265,290,298,243,314,374,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,267,272,287,253,261,275,252,273],
[297,0,281,307,284,251,264,285,265,286],
[283,269,0,280,271,245,260,254,264,282],
[278,243,270,0,266,252,259,243,247,259],
[263,266,279,284,0,253,277,273,249,268],
[297,299,305,298,297,0,283,305,264,299],
[289,286,290,291,273,267,0,285,280,281],
[275,265,296,307,277,245,265,0,245,293],
[298,285,286,303,301,286,270,305,0,287],
[277,264,268,291,282,251,269,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,204,127,226,287,275,227,229,158,205],
[346,0,258,277,346,321,212,205,296,267],
[423,292,0,308,313,276,328,248,275,212],
[324,273,242,0,351,248,287,265,285,254],
[263,204,237,199,0,249,237,181,236,183],
[275,229,274,302,301,0,193,271,241,245],
[323,338,222,263,313,357,0,285,313,169],
[321,345,302,285,369,279,265,0,288,275],
[392,254,275,265,314,309,237,262,0,245],
[345,283,338,296,367,305,381,275,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,254,251,313,229,269,315,283,253],
[234,0,236,257,292,262,247,256,256,259],
[296,314,0,270,353,263,279,311,302,255],
[299,293,280,0,316,245,258,288,248,258],
[237,258,197,234,0,208,244,244,216,224],
[321,288,287,305,342,0,308,300,288,250],
[281,303,271,292,306,242,0,323,286,271],
[235,294,239,262,306,250,227,0,296,242],
[267,294,248,302,334,262,264,254,0,277],
[297,291,295,292,326,300,279,308,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,264,242,334,234,263,266,268,218],
[263,0,286,272,273,227,246,284,291,243],
[286,264,0,241,286,290,293,239,291,254],
[308,278,309,0,286,282,315,310,298,266],
[216,277,264,264,0,223,268,272,269,247],
[316,323,260,268,327,0,250,279,318,277],
[287,304,257,235,282,300,0,247,247,255],
[284,266,311,240,278,271,303,0,278,286],
[282,259,259,252,281,232,303,272,0,271],
[332,307,296,284,303,273,295,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,270,263,282,254,259,259,261],
[280,0,293,278,261,267,275,272,273,268],
[276,257,0,267,274,275,248,266,274,255],
[280,272,283,0,267,281,267,275,284,276],
[287,289,276,283,0,262,276,258,283,274],
[268,283,275,269,288,0,285,281,280,271],
[296,275,302,283,274,265,0,274,286,282],
[291,278,284,275,292,269,276,0,280,274],
[291,277,276,266,267,270,264,270,0,256],
[289,282,295,274,276,279,268,276,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,280,325,288,291,287,287,303],
[256,0,282,250,311,249,284,256,293,269],
[282,268,0,286,324,279,298,267,299,262],
[270,300,264,0,303,284,315,267,293,267],
[225,239,226,247,0,245,257,223,221,263],
[262,301,271,266,305,0,259,264,298,280],
[259,266,252,235,293,291,0,207,274,264],
[263,294,283,283,327,286,343,0,294,287],
[263,257,251,257,329,252,276,256,0,271],
[247,281,288,283,287,270,286,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,263,273,297,275,275,271,290],
[264,0,272,256,253,282,250,267,260,277],
[253,278,0,256,262,292,262,257,262,254],
[287,294,294,0,273,303,274,272,284,283],
[277,297,288,277,0,283,296,292,270,274],
[253,268,258,247,267,0,255,279,260,251],
[275,300,288,276,254,295,0,274,257,264],
[275,283,293,278,258,271,276,0,285,275],
[279,290,288,266,280,290,293,265,0,272],
[260,273,296,267,276,299,286,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,255,285,277,275,263,295,276,283],
[250,0,258,255,272,291,256,305,260,266],
[295,292,0,289,303,287,275,266,296,284],
[265,295,261,0,306,265,286,255,281,284],
[273,278,247,244,0,268,273,266,275,246],
[275,259,263,285,282,0,294,317,255,276],
[287,294,275,264,277,256,0,284,261,282],
[255,245,284,295,284,233,266,0,264,257],
[274,290,254,269,275,295,289,286,0,296],
[267,284,266,266,304,274,268,293,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,269,252,246,259,268,257,250,252],
[266,0,274,255,272,267,268,249,264,247],
[281,276,0,271,297,294,277,279,254,282],
[298,295,279,0,292,311,291,251,295,282],
[304,278,253,258,0,299,310,276,282,275],
[291,283,256,239,251,0,272,282,296,283],
[282,282,273,259,240,278,0,279,290,257],
[293,301,271,299,274,268,271,0,278,265],
[300,286,296,255,268,254,260,272,0,267],
[298,303,268,268,275,267,293,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,232,236,305,242,252,241,233,247],
[300,0,216,236,307,221,262,223,312,281],
[318,334,0,248,289,274,272,217,251,284],
[314,314,302,0,378,324,268,267,308,380],
[245,243,261,172,0,245,207,249,303,295],
[308,329,276,226,305,0,290,325,289,307],
[298,288,278,282,343,260,0,321,335,346],
[309,327,333,283,301,225,229,0,279,266],
[317,238,299,242,247,261,215,271,0,263],
[303,269,266,170,255,243,204,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,291,274,272,283,280,283,299,294],
[267,0,286,268,255,252,273,264,277,263],
[259,264,0,251,254,278,277,293,270,272],
[276,282,299,0,285,266,281,280,279,290],
[278,295,296,265,0,270,295,276,292,281],
[267,298,272,284,280,0,276,283,278,277],
[270,277,273,269,255,274,0,276,262,271],
[267,286,257,270,274,267,274,0,276,282],
[251,273,280,271,258,272,288,274,0,266],
[256,287,278,260,269,273,279,268,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,257,273,269,291,279,285,271,278],
[262,0,253,255,270,292,288,260,268,259],
[293,297,0,280,276,305,281,275,281,279],
[277,295,270,0,285,291,278,261,261,274],
[281,280,274,265,0,306,273,274,264,276],
[259,258,245,259,244,0,257,255,245,246],
[271,262,269,272,277,293,0,258,265,266],
[265,290,275,289,276,295,292,0,261,268],
[279,282,269,289,286,305,285,289,0,284],
[272,291,271,276,274,304,284,282,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,272,281,254,284,262,292,276],
[272,0,279,282,285,266,293,282,271,279],
[273,271,0,269,271,254,276,268,269,262],
[278,268,281,0,263,280,286,270,274,268],
[269,265,279,287,0,277,281,254,270,273],
[296,284,296,270,273,0,298,277,288,276],
[266,257,274,264,269,252,0,265,261,276],
[288,268,282,280,296,273,285,0,289,289],
[258,279,281,276,280,262,289,261,0,264],
[274,271,288,282,277,274,274,261,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,269,245,229,243,245,271,264,255],
[309,0,290,254,249,266,259,280,291,292],
[281,260,0,263,235,251,232,261,282,268],
[305,296,287,0,250,278,256,254,310,299],
[321,301,315,300,0,302,270,320,325,294],
[307,284,299,272,248,0,283,280,297,301],
[305,291,318,294,280,267,0,313,297,293],
[279,270,289,296,230,270,237,0,296,264],
[286,259,268,240,225,253,253,254,0,267],
[295,258,282,251,256,249,257,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,282,281,272,279,285,289,275,314],
[237,0,247,255,253,264,271,262,286,276],
[268,303,0,276,278,271,294,289,280,300],
[269,295,274,0,282,276,292,280,300,299],
[278,297,272,268,0,285,277,284,286,279],
[271,286,279,274,265,0,293,296,287,279],
[265,279,256,258,273,257,0,265,261,287],
[261,288,261,270,266,254,285,0,264,283],
[275,264,270,250,264,263,289,286,0,293],
[236,274,250,251,271,271,263,267,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,286,271,286,267,284,281,261],
[278,0,276,271,286,285,281,293,280,268],
[277,274,0,256,270,284,255,281,267,273],
[264,279,294,0,297,293,273,283,271,281],
[279,264,280,253,0,285,255,266,258,265],
[264,265,266,257,265,0,268,257,244,266],
[283,269,295,277,295,282,0,279,300,279],
[266,257,269,267,284,293,271,0,272,281],
[269,270,283,279,292,306,250,278,0,273],
[289,282,277,269,285,284,271,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,270,269,277,284,262,283,280],
[271,0,275,284,280,270,289,279,278,281],
[284,275,0,290,282,280,292,270,280,276],
[280,266,260,0,263,267,281,265,297,266],
[281,270,268,287,0,264,278,283,297,290],
[273,280,270,283,286,0,284,270,289,289],
[266,261,258,269,272,266,0,264,277,272],
[288,271,280,285,267,280,286,0,296,275],
[267,272,270,253,253,261,273,254,0,275],
[270,269,274,284,260,261,278,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,280,261,244,242,252,245,292,267],
[278,0,263,300,253,251,267,265,292,279],
[270,287,0,281,280,271,268,263,281,265],
[289,250,269,0,255,252,252,280,265,301],
[306,297,270,295,0,271,266,245,292,291],
[308,299,279,298,279,0,266,265,281,271],
[298,283,282,298,284,284,0,269,274,286],
[305,285,287,270,305,285,281,0,286,298],
[258,258,269,285,258,269,276,264,0,262],
[283,271,285,249,259,279,264,252,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,248,269,259,257,268,268,260,244],
[293,0,270,291,260,276,277,269,271,275],
[302,280,0,294,276,283,264,293,283,275],
[281,259,256,0,249,259,252,271,261,267],
[291,290,274,301,0,285,278,274,276,277],
[293,274,267,291,265,0,266,286,283,263],
[282,273,286,298,272,284,0,293,294,288],
[282,281,257,279,276,264,257,0,264,267],
[290,279,267,289,274,267,256,286,0,260],
[306,275,275,283,273,287,262,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,279,274,277,272,301,284,268,269],
[283,0,285,278,268,283,323,293,288,300],
[271,265,0,278,281,269,305,280,267,281],
[276,272,272,0,274,286,300,283,270,272],
[273,282,269,276,0,274,297,288,256,270],
[278,267,281,264,276,0,292,279,268,273],
[249,227,245,250,253,258,0,258,242,252],
[266,257,270,267,262,271,292,0,267,268],
[282,262,283,280,294,282,308,283,0,292],
[281,250,269,278,280,277,298,282,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,317,293,271,235,223,295,274,272],
[258,0,263,272,221,244,225,266,262,255],
[233,287,0,237,241,214,259,266,238,277],
[257,278,313,0,264,264,234,305,261,273],
[279,329,309,286,0,270,250,293,280,267],
[315,306,336,286,280,0,276,265,263,305],
[327,325,291,316,300,274,0,312,286,336],
[255,284,284,245,257,285,238,0,257,254],
[276,288,312,289,270,287,264,293,0,279],
[278,295,273,277,283,245,214,296,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,263,269,264,272,270,268,289],
[283,0,275,278,281,283,295,285,277,287],
[275,275,0,277,274,287,286,267,284,290],
[287,272,273,0,276,271,283,266,287,277],
[281,269,276,274,0,281,279,267,280,273],
[286,267,263,279,269,0,275,275,281,283],
[278,255,264,267,271,275,0,270,279,283],
[280,265,283,284,283,275,280,0,280,287],
[282,273,266,263,270,269,271,270,0,285],
[261,263,260,273,277,267,267,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,293,269,275,254,252,288,277],
[256,0,261,272,248,256,243,235,255,263],
[262,289,0,289,255,271,256,252,272,275],
[257,278,261,0,252,256,243,261,268,268],
[281,302,295,298,0,268,273,281,299,293],
[275,294,279,294,282,0,266,267,287,287],
[296,307,294,307,277,284,0,262,293,295],
[298,315,298,289,269,283,288,0,299,283],
[262,295,278,282,251,263,257,251,0,267],
[273,287,275,282,257,263,255,267,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,258,307,307,301,288,277,246,264],
[257,0,259,270,273,269,265,266,282,224],
[292,291,0,236,306,244,280,286,270,248],
[243,280,314,0,308,234,292,241,273,290],
[243,277,244,242,0,241,265,259,215,246],
[249,281,306,316,309,0,295,294,292,277],
[262,285,270,258,285,255,0,260,273,228],
[273,284,264,309,291,256,290,0,270,253],
[304,268,280,277,335,258,277,280,0,281],
[286,326,302,260,304,273,322,297,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,281,281,296,271,284,294,286,320],
[255,0,258,243,269,274,250,280,277,284],
[269,292,0,258,278,276,288,302,281,290],
[269,307,292,0,314,281,291,318,303,315],
[254,281,272,236,0,269,275,271,252,282],
[279,276,274,269,281,0,290,297,297,302],
[266,300,262,259,275,260,0,287,244,286],
[256,270,248,232,279,253,263,0,279,290],
[264,273,269,247,298,253,306,271,0,284],
[230,266,260,235,268,248,264,260,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,257,285,274,276,265,271,258,266],
[292,0,268,289,289,280,278,289,272,278],
[293,282,0,305,298,295,282,278,264,280],
[265,261,245,0,257,261,256,267,259,257],
[276,261,252,293,0,280,269,269,259,253],
[274,270,255,289,270,0,273,277,261,260],
[285,272,268,294,281,277,0,289,282,269],
[279,261,272,283,281,273,261,0,267,241],
[292,278,286,291,291,289,268,283,0,270],
[284,272,270,293,297,290,281,309,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,311,247,280,282,269,289,273,253],
[269,0,339,253,308,291,297,298,284,252],
[239,211,0,252,242,273,250,263,233,223],
[303,297,298,0,280,273,282,283,284,239],
[270,242,308,270,0,255,290,267,249,248],
[268,259,277,277,295,0,286,278,276,256],
[281,253,300,268,260,264,0,313,268,295],
[261,252,287,267,283,272,237,0,221,232],
[277,266,317,266,301,274,282,329,0,256],
[297,298,327,311,302,294,255,318,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,282,267,296,316,298,321,277],
[262,0,290,246,233,254,269,236,292,263],
[272,260,0,253,269,274,297,272,291,274],
[268,304,297,0,306,304,303,294,289,274],
[283,317,281,244,0,313,307,285,299,272],
[254,296,276,246,237,0,290,277,283,267],
[234,281,253,247,243,260,0,251,282,249],
[252,314,278,256,265,273,299,0,293,279],
[229,258,259,261,251,267,268,257,0,260],
[273,287,276,276,278,283,301,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,292,265,273,266,267,304,295,303],
[258,0,295,259,262,258,270,286,279,302],
[258,255,0,226,256,264,244,275,258,275],
[285,291,324,0,270,286,291,293,276,297],
[277,288,294,280,0,273,260,308,278,289],
[284,292,286,264,277,0,268,318,286,301],
[283,280,306,259,290,282,0,287,284,288],
[246,264,275,257,242,232,263,0,255,276],
[255,271,292,274,272,264,266,295,0,293],
[247,248,275,253,261,249,262,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,253,269,249,266,266,253,261],
[279,0,281,281,287,267,283,281,274,288],
[296,269,0,281,293,269,287,286,270,292],
[297,269,269,0,277,276,276,297,274,291],
[281,263,257,273,0,254,276,266,282,269],
[301,283,281,274,296,0,286,293,274,293],
[284,267,263,274,274,264,0,280,274,284],
[284,269,264,253,284,257,270,0,258,279],
[297,276,280,276,268,276,276,292,0,284],
[289,262,258,259,281,257,266,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,250,281,266,271,263,245,299,284],
[291,0,279,262,254,269,277,257,273,287],
[300,271,0,267,256,273,258,257,258,260],
[269,288,283,0,265,266,274,281,285,292],
[284,296,294,285,0,270,285,285,280,291],
[279,281,277,284,280,0,251,262,282,274],
[287,273,292,276,265,299,0,281,294,286],
[305,293,293,269,265,288,269,0,297,285],
[251,277,292,265,270,268,256,253,0,270],
[266,263,290,258,259,276,264,265,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,237,263,283,262,263,271,221,264],
[267,0,254,268,281,246,265,261,265,276],
[313,296,0,268,291,294,283,290,277,280],
[287,282,282,0,303,265,254,269,258,277],
[267,269,259,247,0,268,248,267,233,262],
[288,304,256,285,282,0,275,313,267,284],
[287,285,267,296,302,275,0,301,267,294],
[279,289,260,281,283,237,249,0,259,275],
[329,285,273,292,317,283,283,291,0,303],
[286,274,270,273,288,266,256,275,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,304,260,283,283,250,287,286,245],
[271,0,314,287,279,285,275,296,283,293],
[246,236,0,259,259,269,250,261,260,269],
[290,263,291,0,279,286,278,295,285,285],
[267,271,291,271,0,265,266,268,282,282],
[267,265,281,264,285,0,262,262,289,266],
[300,275,300,272,284,288,0,269,266,297],
[263,254,289,255,282,288,281,0,269,284],
[264,267,290,265,268,261,284,281,0,280],
[305,257,281,265,268,284,253,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,287,302,254,257,253,262,289,258],
[251,0,252,262,221,251,264,241,274,244],
[263,298,0,286,261,262,266,279,285,267],
[248,288,264,0,253,260,275,261,271,257],
[296,329,289,297,0,306,275,288,300,293],
[293,299,288,290,244,0,272,291,281,290],
[297,286,284,275,275,278,0,282,274,306],
[288,309,271,289,262,259,268,0,262,283],
[261,276,265,279,250,269,276,288,0,258],
[292,306,283,293,257,260,244,267,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,223,204,213,241,277,243,252,188],
[290,0,273,226,221,282,308,252,295,236],
[327,277,0,236,227,264,280,243,291,220],
[346,324,314,0,308,332,357,301,331,254],
[337,329,323,242,0,331,304,284,292,281],
[309,268,286,218,219,0,300,250,271,225],
[273,242,270,193,246,250,0,232,263,199],
[307,298,307,249,266,300,318,0,322,257],
[298,255,259,219,258,279,287,228,0,241],
[362,314,330,296,269,325,351,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,259,266,283,281,270,271,270],
[278,0,258,249,285,284,281,265,255,274],
[268,292,0,244,268,291,274,290,275,281],
[291,301,306,0,301,288,298,286,283,263],
[284,265,282,249,0,283,278,275,266,262],
[267,266,259,262,267,0,277,285,280,264],
[269,269,276,252,272,273,0,262,265,253],
[280,285,260,264,275,265,288,0,263,284],
[279,295,275,267,284,270,285,287,0,271],
[280,276,269,287,288,286,297,266,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,205,307,267,301,277,254,247,277],
[225,0,220,266,241,314,247,157,277,224],
[345,330,0,265,305,332,345,285,314,299],
[243,284,285,0,237,317,323,206,218,276],
[283,309,245,313,0,292,263,286,231,274],
[249,236,218,233,258,0,288,209,206,262],
[273,303,205,227,287,262,0,219,204,219],
[296,393,265,344,264,341,331,0,276,336],
[303,273,236,332,319,344,346,274,0,280],
[273,326,251,274,276,288,331,214,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,258,288,259,258,299,280,258,272],
[288,0,278,289,291,277,315,283,273,284],
[292,272,0,303,293,278,301,279,276,293],
[262,261,247,0,264,255,285,262,252,249],
[291,259,257,286,0,282,300,274,255,268],
[292,273,272,295,268,0,300,280,272,267],
[251,235,249,265,250,250,0,265,248,253],
[270,267,271,288,276,270,285,0,262,271],
[292,277,274,298,295,278,302,288,0,283],
[278,266,257,301,282,283,297,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,265,265,254,252,259,275,261,264],
[288,0,271,259,254,250,262,280,258,282],
[285,279,0,267,270,261,253,295,268,267],
[285,291,283,0,272,269,277,291,264,269],
[296,296,280,278,0,284,268,291,268,302],
[298,300,289,281,266,0,279,301,268,281],
[291,288,297,273,282,271,0,301,292,279],
[275,270,255,259,259,249,249,0,251,244],
[289,292,282,286,282,282,258,299,0,278],
[286,268,283,281,248,269,271,306,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,296,271,286,277,259,285,278,270],
[307,0,305,272,299,309,271,292,292,292],
[254,245,0,239,292,270,261,273,278,245],
[279,278,311,0,318,272,290,289,288,296],
[264,251,258,232,0,252,268,250,238,261],
[273,241,280,278,298,0,268,269,269,296],
[291,279,289,260,282,282,0,272,288,276],
[265,258,277,261,300,281,278,0,271,301],
[272,258,272,262,312,281,262,279,0,271],
[280,258,305,254,289,254,274,249,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,324,230,266,264,364,233,318,193],
[268,0,325,279,242,246,325,230,342,188],
[226,225,0,195,216,149,193,204,327,119],
[320,271,355,0,246,278,399,262,221,280],
[284,308,334,304,0,186,389,384,268,197],
[286,304,401,272,364,0,445,338,288,232],
[186,225,357,151,161,105,0,198,293,174],
[317,320,346,288,166,212,352,0,346,259],
[232,208,223,329,282,262,257,204,0,290],
[357,362,431,270,353,318,376,291,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,284,262,277,286,264,281,259,281],
[258,0,271,255,275,286,258,274,272,277],
[266,279,0,267,285,293,284,289,278,283],
[288,295,283,0,289,295,271,288,262,280],
[273,275,265,261,0,284,260,262,255,266],
[264,264,257,255,266,0,252,256,255,266],
[286,292,266,279,290,298,0,286,269,296],
[269,276,261,262,288,294,264,0,254,280],
[291,278,272,288,295,295,281,296,0,289],
[269,273,267,270,284,284,254,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,258,261,251,267,278,239,271,236],
[283,0,264,266,271,268,280,245,285,261],
[292,286,0,298,281,285,290,237,296,275],
[289,284,252,0,302,298,295,236,284,243],
[299,279,269,248,0,275,294,243,300,254],
[283,282,265,252,275,0,281,279,276,250],
[272,270,260,255,256,269,0,257,271,273],
[311,305,313,314,307,271,293,0,299,291],
[279,265,254,266,250,274,279,251,0,264],
[314,289,275,307,296,300,277,259,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,264,286,252,258,264,271,277,281],
[279,0,265,288,266,276,268,279,287,278],
[286,285,0,297,272,273,256,274,275,276],
[264,262,253,0,249,258,255,261,257,263],
[298,284,278,301,0,267,275,282,283,296],
[292,274,277,292,283,0,268,300,283,276],
[286,282,294,295,275,282,0,294,298,309],
[279,271,276,289,268,250,256,0,282,282],
[273,263,275,293,267,267,252,268,0,271],
[269,272,274,287,254,274,241,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,284,276,282,295,296,279,271,269],
[262,0,273,257,270,284,281,263,258,252],
[266,277,0,246,262,291,284,244,263,255],
[274,293,304,0,287,299,294,283,299,263],
[268,280,288,263,0,300,284,281,274,273],
[255,266,259,251,250,0,254,263,264,240],
[254,269,266,256,266,296,0,248,273,256],
[271,287,306,267,269,287,302,0,276,286],
[279,292,287,251,276,286,277,274,0,268],
[281,298,295,287,277,310,294,264,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,261,273,252,288,298,276,286,256],
[249,0,263,275,241,268,275,277,273,246],
[289,287,0,282,282,267,282,284,265,231],
[277,275,268,0,249,288,274,283,278,227],
[298,309,268,301,0,285,276,276,316,277],
[262,282,283,262,265,0,312,285,277,246],
[252,275,268,276,274,238,0,277,248,242],
[274,273,266,267,274,265,273,0,264,253],
[264,277,285,272,234,273,302,286,0,231],
[294,304,319,323,273,304,308,297,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,261,272,300,257,248,269,242],
[268,0,271,259,264,239,288,254,293,239],
[274,279,0,249,247,268,256,243,253,245],
[289,291,301,0,283,287,277,270,265,278],
[278,286,303,267,0,294,275,274,275,261],
[250,311,282,263,256,0,269,257,240,255],
[293,262,294,273,275,281,0,257,256,247],
[302,296,307,280,276,293,293,0,274,260],
[281,257,297,285,275,310,294,276,0,261],
[308,311,305,272,289,295,303,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,284,261,274,271,277,271,261,276],
[263,0,281,270,261,273,272,263,260,278],
[266,269,0,269,254,271,267,262,252,249],
[289,280,281,0,266,272,275,283,265,277],
[276,289,296,284,0,276,273,270,271,285],
[279,277,279,278,274,0,261,266,278,273],
[273,278,283,275,277,289,0,260,276,275],
[279,287,288,267,280,284,290,0,263,282],
[289,290,298,285,279,272,274,287,0,281],
[274,272,301,273,265,277,275,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,270,297,275,270,260,283,291,260],
[285,0,270,294,261,264,265,279,289,294],
[280,280,0,265,285,280,278,284,280,288],
[253,256,285,0,278,248,263,274,276,272],
[275,289,265,272,0,256,262,270,276,266],
[280,286,270,302,294,0,260,282,270,267],
[290,285,272,287,288,290,0,275,278,289],
[267,271,266,276,280,268,275,0,276,271],
[259,261,270,274,274,280,272,274,0,274],
[290,256,262,278,284,283,261,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,288,282,296,293,274,284,285,278],
[256,0,265,259,280,281,260,288,273,283],
[262,285,0,287,294,286,284,296,284,290],
[268,291,263,0,270,282,249,276,275,272],
[254,270,256,280,0,270,268,288,291,272],
[257,269,264,268,280,0,280,285,263,267],
[276,290,266,301,282,270,0,290,298,285],
[266,262,254,274,262,265,260,0,262,265],
[265,277,266,275,259,287,252,288,0,288],
[272,267,260,278,278,283,265,285,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,269,263,256,255,273,267,270],
[271,0,275,267,278,277,288,272,283,252],
[268,275,0,282,275,282,281,278,292,262],
[281,283,268,0,269,295,283,286,295,273],
[287,272,275,281,0,281,297,297,288,276],
[294,273,268,255,269,0,265,283,285,270],
[295,262,269,267,253,285,0,274,279,259],
[277,278,272,264,253,267,276,0,291,258],
[283,267,258,255,262,265,271,259,0,239],
[280,298,288,277,274,280,291,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,235,237,240,236,256,234,256,228],
[298,0,276,253,271,272,284,276,284,264],
[315,274,0,269,275,279,288,257,287,258],
[313,297,281,0,293,271,293,276,307,284],
[310,279,275,257,0,283,270,268,278,277],
[314,278,271,279,267,0,266,260,306,265],
[294,266,262,257,280,284,0,254,274,252],
[316,274,293,274,282,290,296,0,312,281],
[294,266,263,243,272,244,276,238,0,268],
[322,286,292,266,273,285,298,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,315,290,333,355,286,305,228,280],
[221,0,249,294,292,304,333,311,218,323],
[235,301,0,297,276,240,296,292,279,281],
[260,256,253,0,280,288,269,250,246,284],
[217,258,274,270,0,283,299,277,219,243],
[195,246,310,262,267,0,283,270,221,237],
[264,217,254,281,251,267,0,259,218,248],
[245,239,258,300,273,280,291,0,240,257],
[322,332,271,304,331,329,332,310,0,342],
[270,227,269,266,307,313,302,293,208,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,267,267,289,270,267,260,275,268],
[278,0,263,254,286,287,282,288,278,271],
[283,287,0,277,274,274,277,274,298,280],
[283,296,273,0,283,292,288,293,285,270],
[261,264,276,267,0,269,273,273,265,252],
[280,263,276,258,281,0,256,267,271,262],
[283,268,273,262,277,294,0,293,291,261],
[290,262,276,257,277,283,257,0,277,275],
[275,272,252,265,285,279,259,273,0,258],
[282,279,270,280,298,288,289,275,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,256,296,263,286,261,254,279],
[262,0,272,275,297,273,266,269,241,260],
[262,278,0,242,288,269,274,278,270,273],
[294,275,308,0,328,291,296,286,268,295],
[254,253,262,222,0,228,248,248,265,239],
[287,277,281,259,322,0,290,296,258,302],
[264,284,276,254,302,260,0,253,259,275],
[289,281,272,264,302,254,297,0,285,314],
[296,309,280,282,285,292,291,265,0,268],
[271,290,277,255,311,248,275,236,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,307,234,283,298,310,422,301,299],
[270,0,269,271,337,252,269,349,298,287],
[243,281,0,263,236,237,241,311,255,268],
[316,279,287,0,265,292,318,311,260,327],
[267,213,314,285,0,266,265,357,205,241],
[252,298,313,258,284,0,218,308,286,240],
[240,281,309,232,285,332,0,293,310,292],
[128,201,239,239,193,242,257,0,194,214],
[249,252,295,290,345,264,240,356,0,289],
[251,263,282,223,309,310,258,336,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,254,252,272,266,299,258,264,278],
[282,0,276,286,255,269,297,255,288,280],
[296,274,0,286,275,277,281,237,282,265],
[298,264,264,0,260,258,277,274,289,273],
[278,295,275,290,0,288,285,266,317,301],
[284,281,273,292,262,0,296,258,294,279],
[251,253,269,273,265,254,0,256,272,251],
[292,295,313,276,284,292,294,0,278,269],
[286,262,268,261,233,256,278,272,0,249],
[272,270,285,277,249,271,299,281,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,258,278,287,251,258,285,243,274],
[277,0,258,280,279,257,265,285,265,277],
[292,292,0,287,295,261,288,292,277,276],
[272,270,263,0,275,256,250,267,257,270],
[263,271,255,275,0,260,261,261,260,288],
[299,293,289,294,290,0,269,297,274,298],
[292,285,262,300,289,281,0,291,288,281],
[265,265,258,283,289,253,259,0,252,264],
[307,285,273,293,290,276,262,298,0,301],
[276,273,274,280,262,252,269,286,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,244,270,268,270,266,284,265,264],
[291,0,258,293,271,288,272,285,285,292],
[306,292,0,288,283,266,294,295,304,315],
[280,257,262,0,263,255,277,276,277,270],
[282,279,267,287,0,275,280,288,290,290],
[280,262,284,295,275,0,285,290,289,290],
[284,278,256,273,270,265,0,278,288,278],
[266,265,255,274,262,260,272,0,277,280],
[285,265,246,273,260,261,262,273,0,270],
[286,258,235,280,260,260,272,270,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,278,272,282,276,255,274,290,280],
[277,0,287,305,272,275,255,282,308,266],
[272,263,0,253,260,282,266,254,270,251],
[278,245,297,0,266,252,281,268,247,278],
[268,278,290,284,0,281,250,279,280,281],
[274,275,268,298,269,0,276,254,284,281],
[295,295,284,269,300,274,0,264,292,299],
[276,268,296,282,271,296,286,0,273,289],
[260,242,280,303,270,266,258,277,0,244],
[270,284,299,272,269,269,251,261,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,258,268,287,267,252,269,270,260],
[283,0,271,270,281,284,281,279,269,263],
[292,279,0,294,290,287,284,283,285,273],
[282,280,256,0,280,266,266,269,279,278],
[263,269,260,270,0,275,265,247,267,268],
[283,266,263,284,275,0,263,256,267,275],
[298,269,266,284,285,287,0,284,288,280],
[281,271,267,281,303,294,266,0,284,269],
[280,281,265,271,283,283,262,266,0,260],
[290,287,277,272,282,275,270,281,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,254,245,271,276,272,302,261,252],
[269,0,296,329,301,285,276,297,330,294],
[296,254,0,302,295,308,341,345,353,288],
[305,221,248,0,253,299,281,287,319,267],
[279,249,255,297,0,312,251,312,312,249],
[274,265,242,251,238,0,311,284,283,258],
[278,274,209,269,299,239,0,326,325,252],
[248,253,205,263,238,266,224,0,283,273],
[289,220,197,231,238,267,225,267,0,232],
[298,256,262,283,301,292,298,277,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,267,253,262,241,268,274,258],
[274,0,289,276,280,292,267,304,304,293],
[284,261,0,287,271,285,274,288,290,303],
[283,274,263,0,284,278,286,283,285,316],
[297,270,279,266,0,284,284,330,296,323],
[288,258,265,272,266,0,278,289,280,292],
[309,283,276,264,266,272,0,292,283,306],
[282,246,262,267,220,261,258,0,260,289],
[276,246,260,265,254,270,267,290,0,293],
[292,257,247,234,227,258,244,261,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,295,280,277,256,271,241,281,285],
[293,0,285,281,280,279,245,276,278,285],
[255,265,0,260,268,237,250,257,247,273],
[270,269,290,0,253,278,275,254,268,286],
[273,270,282,297,0,275,275,322,319,336],
[294,271,313,272,275,0,283,288,286,289],
[279,305,300,275,275,267,0,274,283,278],
[309,274,293,296,228,262,276,0,267,297],
[269,272,303,282,231,264,267,283,0,291],
[265,265,277,264,214,261,272,253,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,270,262,257,269,280,247,273],
[287,0,273,285,267,254,278,280,267,291],
[285,277,0,281,267,265,285,267,260,282],
[280,265,269,0,268,259,283,274,259,270],
[288,283,283,282,0,274,301,278,268,296],
[293,296,285,291,276,0,307,280,264,290],
[281,272,265,267,249,243,0,266,238,265],
[270,270,283,276,272,270,284,0,275,290],
[303,283,290,291,282,286,312,275,0,290],
[277,259,268,280,254,260,285,260,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,308,288,273,289,295,291,306,280],
[261,0,324,313,271,296,294,283,322,297],
[242,226,0,276,241,253,270,272,260,261],
[262,237,274,0,237,258,264,288,266,281],
[277,279,309,313,0,287,280,288,272,267],
[261,254,297,292,263,0,274,259,271,285],
[255,256,280,286,270,276,0,279,271,272],
[259,267,278,262,262,291,271,0,282,295],
[244,228,290,284,278,279,279,268,0,291],
[270,253,289,269,283,265,278,255,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,295,275,285,288,283,291,263,276],
[272,0,283,263,289,293,288,265,255,277],
[255,267,0,260,284,276,275,263,244,265],
[275,287,290,0,292,281,294,276,280,282],
[265,261,266,258,0,282,267,257,262,267],
[262,257,274,269,268,0,268,257,248,260],
[267,262,275,256,283,282,0,272,255,271],
[259,285,287,274,293,293,278,0,279,285],
[287,295,306,270,288,302,295,271,0,289],
[274,273,285,268,283,290,279,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,395,226,226,226,334,395,395,169],
[324,0,277,550,442,324,324,442,216,277],
[155,273,0,273,273,273,381,273,273,216],
[324,0,277,0,0,0,324,216,216,169],
[324,108,277,550,0,277,324,550,216,277],
[324,226,277,550,273,0,324,442,442,169],
[216,226,169,226,226,226,0,442,395,169],
[155,108,277,334,0,108,108,0,169,277],
[155,334,277,334,334,108,155,381,0,277],
[381,273,334,381,273,381,381,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,299,276,212,326,255,350,229],
[293,0,203,269,232,149,244,214,287,191],
[291,347,0,328,313,292,345,293,293,186],
[251,281,222,0,236,226,268,238,256,200],
[274,318,237,314,0,205,354,287,376,233],
[338,401,258,324,345,0,364,393,417,268],
[224,306,205,282,196,186,0,166,341,185],
[295,336,257,312,263,157,384,0,400,282],
[200,263,257,294,174,133,209,150,0,175],
[321,359,364,350,317,282,365,268,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,280,263,285,255,262,269,261,242],
[257,0,290,303,289,286,274,269,280,265],
[270,260,0,283,284,277,256,254,253,255],
[287,247,267,0,271,255,258,257,276,248],
[265,261,266,279,0,265,238,245,245,254],
[295,264,273,295,285,0,268,256,278,267],
[288,276,294,292,312,282,0,264,273,282],
[281,281,296,293,305,294,286,0,279,265],
[289,270,297,274,305,272,277,271,0,270],
[308,285,295,302,296,283,268,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,265,275,303,312,305,310,308,300],
[230,0,226,241,250,244,249,270,242,252],
[285,324,0,278,289,293,280,309,273,286],
[275,309,272,0,295,319,292,312,285,285],
[247,300,261,255,0,314,278,273,268,283],
[238,306,257,231,236,0,257,289,268,239],
[245,301,270,258,272,293,0,306,249,254],
[240,280,241,238,277,261,244,0,244,244],
[242,308,277,265,282,282,301,306,0,261],
[250,298,264,265,267,311,296,306,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,275,287,272,297,286,270,288,277],
[274,0,252,285,276,286,280,283,267,277],
[275,298,0,275,277,303,277,280,293,277],
[263,265,275,0,279,277,270,265,282,278],
[278,274,273,271,0,298,268,265,269,270],
[253,264,247,273,252,0,257,280,245,265],
[264,270,273,280,282,293,0,279,282,285],
[280,267,270,285,285,270,271,0,283,276],
[262,283,257,268,281,305,268,267,0,269],
[273,273,273,272,280,285,265,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,304,293,255,274,268,283,292,288],
[289,0,287,270,249,261,255,291,296,257],
[246,263,0,281,267,260,236,269,275,257],
[257,280,269,0,264,242,244,272,276,257],
[295,301,283,286,0,269,267,277,289,287],
[276,289,290,308,281,0,269,280,311,257],
[282,295,314,306,283,281,0,266,307,280],
[267,259,281,278,273,270,284,0,291,278],
[258,254,275,274,261,239,243,259,0,254],
[262,293,293,293,263,293,270,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,268,266,272,295,273,285,279,281],
[285,0,268,296,285,301,278,271,267,290],
[282,282,0,306,272,287,282,286,262,292],
[284,254,244,0,270,269,244,269,263,257],
[278,265,278,280,0,277,262,270,263,292],
[255,249,263,281,273,0,250,259,234,267],
[277,272,268,306,288,300,0,286,271,272],
[265,279,264,281,280,291,264,0,253,283],
[271,283,288,287,287,316,279,297,0,291],
[269,260,258,293,258,283,278,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,275,270,263,293,261,256,280],
[288,0,279,294,287,256,294,262,277,281],
[278,271,0,295,261,244,277,267,249,283],
[275,256,255,0,274,252,271,240,246,262],
[280,263,289,276,0,261,290,259,253,267],
[287,294,306,298,289,0,287,275,281,285],
[257,256,273,279,260,263,0,246,266,261],
[289,288,283,310,291,275,304,0,269,293],
[294,273,301,304,297,269,284,281,0,283],
[270,269,267,288,283,265,289,257,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,236,267,260,236,245,255,204,244],
[307,0,269,256,260,255,278,254,247,254],
[314,281,0,258,280,268,273,288,264,292],
[283,294,292,0,265,227,252,262,256,252],
[290,290,270,285,0,255,254,283,278,256],
[314,295,282,323,295,0,279,263,288,299],
[305,272,277,298,296,271,0,293,275,278],
[295,296,262,288,267,287,257,0,275,255],
[346,303,286,294,272,262,275,275,0,254],
[306,296,258,298,294,251,272,295,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,348,309,327,246,335,290,383,241],
[292,0,400,191,324,285,227,350,330,310],
[202,150,0,211,211,212,207,184,208,209],
[241,359,339,0,290,253,327,324,274,269],
[223,226,339,260,0,274,223,206,237,243],
[304,265,338,297,276,0,263,313,339,273],
[215,323,343,223,327,287,0,262,352,228],
[260,200,366,226,344,237,288,0,306,306],
[167,220,342,276,313,211,198,244,0,283],
[309,240,341,281,307,277,322,244,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,293,265,263,283,270,291,301,270],
[298,0,292,288,272,302,293,288,301,274],
[257,258,0,262,262,272,271,287,264,253],
[285,262,288,0,256,295,285,297,296,284],
[287,278,288,294,0,287,294,274,292,272],
[267,248,278,255,263,0,264,293,270,264],
[280,257,279,265,256,286,0,271,280,249],
[259,262,263,253,276,257,279,0,282,282],
[249,249,286,254,258,280,270,268,0,256],
[280,276,297,266,278,286,301,268,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,280,293,341,242,266,280,261,254],
[315,0,221,183,308,188,241,220,213,187],
[270,329,0,323,470,310,357,318,302,217],
[257,367,227,0,388,269,234,250,137,249],
[209,242,80,162,0,104,265,136,114,100],
[308,362,240,281,446,0,269,284,191,257],
[284,309,193,316,285,281,0,224,265,212],
[270,330,232,300,414,266,326,0,263,304],
[289,337,248,413,436,359,285,287,0,316],
[296,363,333,301,450,293,338,246,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,302,282,285,308,310,309,293,273],
[260,0,249,249,271,273,266,276,247,254],
[248,301,0,264,276,287,277,289,265,284],
[268,301,286,0,283,307,293,290,299,267],
[265,279,274,267,0,281,282,298,295,295],
[242,277,263,243,269,0,288,287,251,271],
[240,284,273,257,268,262,0,266,262,278],
[241,274,261,260,252,263,284,0,251,254],
[257,303,285,251,255,299,288,299,0,280],
[277,296,266,283,255,279,272,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,259,258,281,265,290,261,274,285],
[283,0,284,293,279,291,321,307,269,324],
[291,266,0,264,293,280,277,278,258,301],
[292,257,286,0,281,284,296,281,262,306],
[269,271,257,269,0,281,266,292,262,289],
[285,259,270,266,269,0,297,270,276,289],
[260,229,273,254,284,253,0,247,250,273],
[289,243,272,269,258,280,303,0,241,270],
[276,281,292,288,288,274,300,309,0,328],
[265,226,249,244,261,261,277,280,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,277,288,280,285,264,283,265],
[277,0,288,284,287,277,280,259,268,276],
[274,262,0,266,282,276,279,268,275,262],
[273,266,284,0,273,270,274,259,272,255],
[262,263,268,277,0,280,271,262,263,266],
[270,273,274,280,270,0,274,273,278,272],
[265,270,271,276,279,276,0,266,285,266],
[286,291,282,291,288,277,284,0,293,270],
[267,282,275,278,287,272,265,257,0,281],
[285,274,288,295,284,278,284,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,308,332,307,288,328,282,296,330],
[275,0,252,286,258,291,265,262,266,314],
[242,298,0,275,262,258,284,236,273,309],
[218,264,275,0,257,262,275,252,257,278],
[243,292,288,293,0,303,292,275,257,312],
[262,259,292,288,247,0,264,255,285,313],
[222,285,266,275,258,286,0,251,259,280],
[268,288,314,298,275,295,299,0,285,325],
[254,284,277,293,293,265,291,265,0,301],
[220,236,241,272,238,237,270,225,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,284,318,285,221,299,253,270],
[262,0,296,271,292,260,248,239,247,301],
[260,254,0,316,303,304,197,255,263,315],
[266,279,234,0,290,239,224,257,211,221],
[232,258,247,260,0,215,175,228,188,239],
[265,290,246,311,335,0,278,260,229,307],
[329,302,353,326,375,272,0,295,283,330],
[251,311,295,293,322,290,255,0,280,305],
[297,303,287,339,362,321,267,270,0,303],
[280,249,235,329,311,243,220,245,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,253,296,280,272,287,273,272,259],
[258,0,279,298,276,270,277,283,259,275],
[297,271,0,308,298,297,321,293,302,303],
[254,252,242,0,258,286,281,255,255,259],
[270,274,252,292,0,284,294,242,269,264],
[278,280,253,264,266,0,281,253,257,272],
[263,273,229,269,256,269,0,247,243,244],
[277,267,257,295,308,297,303,0,276,289],
[278,291,248,295,281,293,307,274,0,296],
[291,275,247,291,286,278,306,261,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,289,275,297,292,269,309,287,303],
[287,0,285,294,310,290,254,307,290,291],
[261,265,0,281,303,303,250,284,310,293],
[275,256,269,0,299,262,277,295,298,283],
[253,240,247,251,0,295,221,292,304,284],
[258,260,247,288,255,0,249,264,272,286],
[281,296,300,273,329,301,0,316,306,330],
[241,243,266,255,258,286,234,0,289,263],
[263,260,240,252,246,278,244,261,0,258],
[247,259,257,267,266,264,220,287,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,262,295,262,272,288,272,269,285],
[274,0,258,261,249,265,268,244,265,243],
[288,292,0,287,272,253,271,273,282,283],
[255,289,263,0,245,264,262,247,266,267],
[288,301,278,305,0,278,273,263,269,281],
[278,285,297,286,272,0,272,278,290,265],
[262,282,279,288,277,278,0,250,287,276],
[278,306,277,303,287,272,300,0,275,278],
[281,285,268,284,281,260,263,275,0,264],
[265,307,267,283,269,285,274,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,252,282,266,244,266,279,258],
[266,0,283,267,297,261,280,268,268,276],
[270,267,0,257,302,285,270,259,265,247],
[298,283,293,0,300,274,277,282,278,257],
[268,253,248,250,0,258,266,262,254,255],
[284,289,265,276,292,0,270,257,276,240],
[306,270,280,273,284,280,0,272,289,263],
[284,282,291,268,288,293,278,0,279,255],
[271,282,285,272,296,274,261,271,0,282],
[292,274,303,293,295,310,287,295,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,314,292,255,322,284,277,331,302],
[288,0,268,266,268,286,301,278,318,300],
[236,282,0,248,227,269,224,228,287,269],
[258,284,302,0,293,341,304,258,335,282],
[295,282,323,257,0,308,252,281,278,325],
[228,264,281,209,242,0,222,237,289,294],
[266,249,326,246,298,328,0,270,296,301],
[273,272,322,292,269,313,280,0,296,282],
[219,232,263,215,272,261,254,254,0,242],
[248,250,281,268,225,256,249,268,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,261,305,298,282,278,286,269],
[269,0,283,253,293,294,274,275,277,277],
[263,267,0,250,289,275,264,267,262,266],
[289,297,300,0,321,320,293,280,272,285],
[245,257,261,229,0,272,258,267,252,260],
[252,256,275,230,278,0,257,262,265,255],
[268,276,286,257,292,293,0,278,269,276],
[272,275,283,270,283,288,272,0,279,285],
[264,273,288,278,298,285,281,271,0,290],
[281,273,284,265,290,295,274,265,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,265,260,269,250,271,271,288,267],
[272,0,266,278,261,254,264,287,286,265],
[285,284,0,289,275,275,281,300,312,276],
[290,272,261,0,266,260,272,296,305,281],
[281,289,275,284,0,269,281,292,301,278],
[300,296,275,290,281,0,283,312,290,265],
[279,286,269,278,269,267,0,298,279,267],
[279,263,250,254,258,238,252,0,286,254],
[262,264,238,245,249,260,271,264,0,249],
[283,285,274,269,272,285,283,296,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,197,233,279,228,273,250,267,286],
[274,0,260,293,300,259,262,257,254,237],
[353,290,0,315,336,298,289,334,267,294],
[317,257,235,0,285,247,241,279,275,263],
[271,250,214,265,0,263,234,251,264,262],
[322,291,252,303,287,0,262,300,292,295],
[277,288,261,309,316,288,0,280,287,317],
[300,293,216,271,299,250,270,0,285,280],
[283,296,283,275,286,258,263,265,0,224],
[264,313,256,287,288,255,233,270,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,272,275,276,288,274,263,256,289],
[266,0,273,245,254,265,255,255,262,274],
[278,277,0,259,264,286,257,263,275,286],
[275,305,291,0,280,287,275,284,266,292],
[274,296,286,270,0,290,265,267,262,291],
[262,285,264,263,260,0,259,265,269,283],
[276,295,293,275,285,291,0,292,271,289],
[287,295,287,266,283,285,258,0,269,305],
[294,288,275,284,288,281,279,281,0,289],
[261,276,264,258,259,267,261,245,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,306,290,316,286,259,315,288,271],
[232,0,251,256,261,237,262,254,265,246],
[244,299,0,322,306,268,291,311,284,277],
[260,294,228,0,298,274,267,285,283,247],
[234,289,244,252,0,270,243,299,268,272],
[264,313,282,276,280,0,277,287,288,287],
[291,288,259,283,307,273,0,297,290,242],
[235,296,239,265,251,263,253,0,263,251],
[262,285,266,267,282,262,260,287,0,265],
[279,304,273,303,278,263,308,299,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,294,280,293,279,271,271,264],
[288,0,296,302,280,296,278,279,269,270],
[267,254,0,265,277,280,253,263,265,269],
[256,248,285,0,274,282,254,265,253,260],
[270,270,273,276,0,283,258,268,260,271],
[257,254,270,268,267,0,254,260,259,264],
[271,272,297,296,292,296,0,279,281,281],
[279,271,287,285,282,290,271,0,285,273],
[279,281,285,297,290,291,269,265,0,288],
[286,280,281,290,279,286,269,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,254,260,253,261,268,279,264],
[284,0,280,277,286,292,273,272,291,274],
[287,270,0,256,270,279,272,283,289,268],
[296,273,294,0,282,281,290,272,301,273],
[290,264,280,268,0,258,262,278,286,269],
[297,258,271,269,292,0,268,258,288,277],
[289,277,278,260,288,282,0,270,283,281],
[282,278,267,278,272,292,280,0,296,274],
[271,259,261,249,264,262,267,254,0,252],
[286,276,282,277,281,273,269,276,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,281,279,295,288,297,283,267,286],
[268,0,282,266,294,282,287,276,278,278],
[269,268,0,269,263,272,270,275,269,272],
[271,284,281,0,293,301,295,291,276,279],
[255,256,287,257,0,272,304,277,267,268],
[262,268,278,249,278,0,272,259,267,285],
[253,263,280,255,246,278,0,268,255,262],
[267,274,275,259,273,291,282,0,260,265],
[283,272,281,274,283,283,295,290,0,285],
[264,272,278,271,282,265,288,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,276,286,297,272,286,270,290],
[270,0,314,276,299,283,285,287,283,276],
[271,236,0,255,274,275,250,279,244,276],
[274,274,295,0,307,316,293,293,286,283],
[264,251,276,243,0,272,258,264,264,269],
[253,267,275,234,278,0,248,276,269,272],
[278,265,300,257,292,302,0,280,264,280],
[264,263,271,257,286,274,270,0,261,272],
[280,267,306,264,286,281,286,289,0,280],
[260,274,274,267,281,278,270,278,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,280,266,250,284,256,265,247,267],
[247,0,262,263,262,249,285,254,255,267],
[270,288,0,294,254,248,281,279,270,268],
[284,287,256,0,253,268,278,269,258,272],
[300,288,296,297,0,286,276,267,284,279],
[266,301,302,282,264,0,302,293,278,298],
[294,265,269,272,274,248,0,271,263,269],
[285,296,271,281,283,257,279,0,298,277],
[303,295,280,292,266,272,287,252,0,275],
[283,283,282,278,271,252,281,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,262,263,258,289,295,273,247],
[286,0,265,264,258,248,283,301,276,258],
[283,285,0,281,275,255,293,291,277,303],
[288,286,269,0,270,264,282,293,265,261],
[287,292,275,280,0,285,271,297,286,283],
[292,302,295,286,265,0,292,305,271,252],
[261,267,257,268,279,258,0,290,257,265],
[255,249,259,257,253,245,260,0,240,256],
[277,274,273,285,264,279,293,310,0,266],
[303,292,247,289,267,298,285,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,246,276,280,280,279,261,251,276],
[271,0,278,279,281,274,273,285,265,300],
[304,272,0,287,278,303,282,302,276,299],
[274,271,263,0,287,277,260,284,270,284],
[270,269,272,263,0,266,264,287,270,282],
[270,276,247,273,284,0,262,285,268,282],
[271,277,268,290,286,288,0,277,270,288],
[289,265,248,266,263,265,273,0,276,274],
[299,285,274,280,280,282,280,274,0,300],
[274,250,251,266,268,268,262,276,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,288,274,292,291,281,277,269],
[276,0,280,280,280,292,296,271,281,268],
[283,270,0,278,254,279,300,272,279,267],
[262,270,272,0,284,287,291,277,287,264],
[276,270,296,266,0,288,294,282,289,273],
[258,258,271,263,262,0,275,262,258,253],
[259,254,250,259,256,275,0,251,249,232],
[269,279,278,273,268,288,299,0,281,278],
[273,269,271,263,261,292,301,269,0,270],
[281,282,283,286,277,297,318,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,250,283,266,301,304,273,304,297],
[251,0,265,253,288,296,272,270,264,280],
[300,285,0,305,274,299,320,292,305,293],
[267,297,245,0,300,278,301,290,276,329],
[284,262,276,250,0,264,279,264,299,282],
[249,254,251,272,286,0,294,257,270,262],
[246,278,230,249,271,256,0,262,258,245],
[277,280,258,260,286,293,288,0,273,271],
[246,286,245,274,251,280,292,277,0,264],
[253,270,257,221,268,288,305,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,271,317,269,288,323,311,281,315],
[250,0,269,304,275,309,301,270,293,291],
[279,281,0,304,257,291,293,271,295,301],
[233,246,246,0,238,268,264,262,265,266],
[281,275,293,312,0,287,312,256,305,285],
[262,241,259,282,263,0,270,270,240,299],
[227,249,257,286,238,280,0,277,254,291],
[239,280,279,288,294,280,273,0,266,294],
[269,257,255,285,245,310,296,284,0,279],
[235,259,249,284,265,251,259,256,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,131,172,120,156,328,48,99,235,141],
[419,0,390,412,389,324,282,96,426,286],
[378,160,0,149,119,253,247,120,207,196],
[430,138,401,0,283,274,318,95,281,182],
[394,161,431,267,0,328,282,99,232,138],
[222,226,297,276,222,0,135,66,330,95],
[502,268,303,232,268,415,0,289,286,225],
[451,454,430,455,451,484,261,0,509,316],
[315,124,343,269,318,220,264,41,0,67],
[409,264,354,368,412,455,325,234,483,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,274,270,265,251,279,279,270],
[273,0,279,300,277,284,279,267,293,248],
[279,271,0,289,255,248,252,271,264,248],
[276,250,261,0,249,244,249,263,264,252],
[280,273,295,301,0,274,275,289,274,275],
[285,266,302,306,276,0,284,273,283,273],
[299,271,298,301,275,266,0,271,280,276],
[271,283,279,287,261,277,279,0,267,273],
[271,257,286,286,276,267,270,283,0,267],
[280,302,302,298,275,277,274,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,282,279,287,277,295,282,314],
[276,0,325,276,270,298,267,280,292,291],
[277,225,0,271,240,263,274,268,270,263],
[268,274,279,0,292,267,247,278,270,252],
[271,280,310,258,0,304,284,302,273,262],
[263,252,287,283,246,0,241,249,255,285],
[273,283,276,303,266,309,0,278,287,270],
[255,270,282,272,248,301,272,0,267,285],
[268,258,280,280,277,295,263,283,0,278],
[236,259,287,298,288,265,280,265,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,276,246,254,288,252,297,286,274],
[317,0,311,272,299,311,299,287,303,316],
[274,239,0,281,252,289,261,295,272,263],
[304,278,269,0,312,295,286,277,276,300],
[296,251,298,238,0,274,245,268,262,288],
[262,239,261,255,276,0,271,277,290,259],
[298,251,289,264,305,279,0,293,256,281],
[253,263,255,273,282,273,257,0,256,249],
[264,247,278,274,288,260,294,294,0,286],
[276,234,287,250,262,291,269,301,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,314,313,299,283,292,281,290],
[262,0,267,291,312,268,274,281,277,273],
[277,283,0,300,312,286,286,299,262,267],
[236,259,250,0,265,279,231,257,255,257],
[237,238,238,285,0,262,245,269,253,266],
[251,282,264,271,288,0,253,286,258,274],
[267,276,264,319,305,297,0,299,274,276],
[258,269,251,293,281,264,251,0,267,283],
[269,273,288,295,297,292,276,283,0,277],
[260,277,283,293,284,276,274,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,246,291,331,307,272,249,226,233],
[324,0,259,287,283,223,296,279,342,269],
[304,291,0,254,292,168,321,264,316,327],
[259,263,296,0,271,276,270,228,317,236],
[219,267,258,279,0,219,303,237,274,273],
[243,327,382,274,331,0,335,299,336,339],
[278,254,229,280,247,215,0,226,290,215],
[301,271,286,322,313,251,324,0,298,265],
[324,208,234,233,276,214,260,252,0,243],
[317,281,223,314,277,211,335,285,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,274,293,285,270,250,239,224,287],
[325,0,279,288,297,293,271,292,282,274],
[276,271,0,280,283,284,286,264,234,295],
[257,262,270,0,283,255,273,254,230,268],
[265,253,267,267,0,262,260,255,233,272],
[280,257,266,295,288,0,281,270,267,289],
[300,279,264,277,290,269,0,272,231,296],
[311,258,286,296,295,280,278,0,256,284],
[326,268,316,320,317,283,319,294,0,351],
[263,276,255,282,278,261,254,266,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,279,270,283,282,248,305,273],
[274,0,287,276,258,271,279,254,278,272],
[271,263,0,278,267,275,262,269,293,255],
[271,274,272,0,284,279,287,246,285,288],
[280,292,283,266,0,290,301,260,327,265],
[267,279,275,271,260,0,266,282,281,286],
[268,271,288,263,249,284,0,236,280,238],
[302,296,281,304,290,268,314,0,321,312],
[245,272,257,265,223,269,270,229,0,254],
[277,278,295,262,285,264,312,238,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,275,322,271,283,281,298,281,306],
[244,0,280,272,239,240,257,258,266,273],
[275,270,0,288,255,243,287,284,246,290],
[228,278,262,0,260,237,258,268,250,271],
[279,311,295,290,0,284,265,286,273,276],
[267,310,307,313,266,0,289,285,280,311],
[269,293,263,292,285,261,0,306,257,286],
[252,292,266,282,264,265,244,0,236,265],
[269,284,304,300,277,270,293,314,0,291],
[244,277,260,279,274,239,264,285,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,302,379,312,288,301,294,384,273],
[210,0,296,288,322,278,281,273,357,306],
[248,254,0,311,310,249,215,234,330,269],
[171,262,239,0,308,247,249,268,337,267],
[238,228,240,242,0,208,223,236,322,267],
[262,272,301,303,342,0,293,286,344,296],
[249,269,335,301,327,257,0,292,328,267],
[256,277,316,282,314,264,258,0,339,257],
[166,193,220,213,228,206,222,211,0,243],
[277,244,281,283,283,254,283,293,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,293,279,276,255,271,245,255],
[266,0,279,277,249,231,255,251,238,242],
[272,271,0,273,266,227,246,249,226,261],
[257,273,277,0,257,236,277,275,257,267],
[271,301,284,293,0,258,260,267,257,285],
[274,319,323,314,292,0,301,302,269,303],
[295,295,304,273,290,249,0,271,282,272],
[279,299,301,275,283,248,279,0,262,261],
[305,312,324,293,293,281,268,288,0,253],
[295,308,289,283,265,247,278,289,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,269,253,270,272,280,277,261,272],
[295,0,270,271,294,286,286,286,265,282],
[281,280,0,269,288,304,290,264,269,280],
[297,279,281,0,260,286,273,270,280,265],
[280,256,262,290,0,286,285,273,256,271],
[278,264,246,264,264,0,265,258,261,254],
[270,264,260,277,265,285,0,265,269,268],
[273,264,286,280,277,292,285,0,278,273],
[289,285,281,270,294,289,281,272,0,254],
[278,268,270,285,279,296,282,277,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,246,280,267,252,273,249,261,282],
[252,0,278,275,268,223,277,255,226,246],
[304,272,0,281,270,263,289,244,245,254],
[270,275,269,0,256,245,264,234,238,273],
[283,282,280,294,0,278,266,261,255,254],
[298,327,287,305,272,0,271,309,258,259],
[277,273,261,286,284,279,0,243,233,233],
[301,295,306,316,289,241,307,0,304,268],
[289,324,305,312,295,292,317,246,0,271],
[268,304,296,277,296,291,317,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,269,290,282,264,301,286,286],
[263,0,265,288,271,262,278,265,276,265],
[264,285,0,277,282,284,263,279,256,280],
[281,262,273,0,287,294,280,300,285,270],
[260,279,268,263,0,275,269,282,261,277],
[268,288,266,256,275,0,243,281,253,256],
[286,272,287,270,281,307,0,274,277,281],
[249,285,271,250,268,269,276,0,271,282],
[264,274,294,265,289,297,273,279,0,288],
[264,285,270,280,273,294,269,268,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,205,256,218,263,236,296,236,215,246],
[345,0,305,278,337,294,275,293,295,276],
[294,245,0,227,265,225,271,252,246,260],
[332,272,323,0,328,293,281,311,278,301],
[287,213,285,222,0,250,246,242,234,245],
[314,256,325,257,300,0,288,255,246,313],
[254,275,279,269,304,262,0,276,255,282],
[314,257,298,239,308,295,274,0,283,282],
[335,255,304,272,316,304,295,267,0,304],
[304,274,290,249,305,237,268,268,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,287,264,290,263,263,263,294,260],
[264,0,278,267,290,254,276,276,275,277],
[263,272,0,261,287,258,270,274,270,262],
[286,283,289,0,291,252,255,280,286,271],
[260,260,263,259,0,251,261,269,285,259],
[287,296,292,298,299,0,285,292,299,272],
[287,274,280,295,289,265,0,284,296,286],
[287,274,276,270,281,258,266,0,287,268],
[256,275,280,264,265,251,254,263,0,229],
[290,273,288,279,291,278,264,282,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,288,286,274,276,275,275,285],
[269,0,272,246,304,277,258,274,281,274],
[272,278,0,259,283,284,239,262,287,302],
[262,304,291,0,306,286,266,264,281,304],
[264,246,267,244,0,272,275,276,259,273],
[276,273,266,264,278,0,263,276,284,296],
[274,292,311,284,275,287,0,291,291,316],
[275,276,288,286,274,274,259,0,286,271],
[275,269,263,269,291,266,259,264,0,279],
[265,276,248,246,277,254,234,279,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,306,298,278,317,273,301,288,270],
[292,0,282,292,304,287,257,322,284,294],
[244,268,0,278,288,266,247,293,284,307],
[252,258,272,0,264,286,256,295,276,275],
[272,246,262,286,0,304,257,292,289,272],
[233,263,284,264,246,0,275,295,275,290],
[277,293,303,294,293,275,0,322,285,313],
[249,228,257,255,258,255,228,0,252,274],
[262,266,266,274,261,275,265,298,0,286],
[280,256,243,275,278,260,237,276,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,271,283,283,284,287,263,286],
[275,0,269,286,266,265,268,280,283,279],
[277,281,0,294,282,281,292,287,270,288],
[279,264,256,0,264,256,272,267,278,271],
[267,284,268,286,0,274,280,291,287,287],
[267,285,269,294,276,0,279,276,267,270],
[266,282,258,278,270,271,0,282,265,277],
[263,270,263,283,259,274,268,0,274,260],
[287,267,280,272,263,283,285,276,0,294],
[264,271,262,279,263,280,273,290,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,293,269,302,271,276,288,280,277],
[243,0,284,253,276,259,256,281,262,275],
[257,266,0,269,283,260,263,299,267,264],
[281,297,281,0,317,276,265,306,276,303],
[248,274,267,233,0,255,256,276,263,266],
[279,291,290,274,295,0,284,281,279,275],
[274,294,287,285,294,266,0,297,274,274],
[262,269,251,244,274,269,253,0,257,261],
[270,288,283,274,287,271,276,293,0,262],
[273,275,286,247,284,275,276,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,272,304,270,294,257,315,299],
[282,0,273,265,295,267,273,247,289,301],
[273,277,0,260,294,278,295,275,297,272],
[278,285,290,0,309,278,298,271,298,312],
[246,255,256,241,0,268,275,244,271,273],
[280,283,272,272,282,0,292,258,289,285],
[256,277,255,252,275,258,0,251,291,287],
[293,303,275,279,306,292,299,0,332,307],
[235,261,253,252,279,261,259,218,0,261],
[251,249,278,238,277,265,263,243,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,305,271,301,303,251,248,292,270],
[276,0,276,270,284,269,279,239,253,273],
[245,274,0,295,261,260,252,254,267,251],
[279,280,255,0,290,259,255,274,267,258],
[249,266,289,260,0,243,226,281,286,261],
[247,281,290,291,307,0,270,279,269,248],
[299,271,298,295,324,280,0,275,259,257],
[302,311,296,276,269,271,275,0,280,249],
[258,297,283,283,264,281,291,270,0,281],
[280,277,299,292,289,302,293,301,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,252,292,280,301,279,278,305,302],
[249,0,305,258,289,265,296,307,268,294],
[298,245,0,273,265,295,257,256,300,289],
[258,292,277,0,285,298,263,298,281,268],
[270,261,285,265,0,294,232,283,293,254],
[249,285,255,252,256,0,257,274,275,286],
[271,254,293,287,318,293,0,279,312,303],
[272,243,294,252,267,276,271,0,276,300],
[245,282,250,269,257,275,238,274,0,267],
[248,256,261,282,296,264,247,250,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,269,265,244,263,254,278,256],
[292,0,253,307,274,288,262,267,260,271],
[286,297,0,293,290,270,295,280,290,282],
[281,243,257,0,267,259,257,254,269,240],
[285,276,260,283,0,250,256,263,245,260],
[306,262,280,291,300,0,279,253,271,278],
[287,288,255,293,294,271,0,261,246,246],
[296,283,270,296,287,297,289,0,273,254],
[272,290,260,281,305,279,304,277,0,270],
[294,279,268,310,290,272,304,296,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,262,261,242,279,290,283,276],
[306,0,301,294,271,275,316,294,297,316],
[301,249,0,262,250,250,286,288,280,282],
[288,256,288,0,300,272,339,307,284,311],
[289,279,300,250,0,270,290,302,285,294],
[308,275,300,278,280,0,299,308,323,317],
[271,234,264,211,260,251,0,283,271,286],
[260,256,262,243,248,242,267,0,273,288],
[267,253,270,266,265,227,279,277,0,286],
[274,234,268,239,256,233,264,262,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,259,269,263,269,277,269,274,295],
[306,0,295,291,276,274,309,290,292,298],
[291,255,0,270,275,267,281,265,290,278],
[281,259,280,0,268,262,263,276,265,279],
[287,274,275,282,0,277,276,283,269,284],
[281,276,283,288,273,0,286,288,276,262],
[273,241,269,287,274,264,0,280,294,288],
[281,260,285,274,267,262,270,0,297,298],
[276,258,260,285,281,274,256,253,0,275],
[255,252,272,271,266,288,262,252,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,342,239,259,255,209,204,325,292],
[300,0,328,325,244,321,287,273,326,379],
[208,222,0,270,264,204,234,220,291,254],
[311,225,280,0,314,262,260,260,304,309],
[291,306,286,236,0,190,280,292,341,302],
[295,229,346,288,360,0,350,224,381,327],
[341,263,316,290,270,200,0,272,346,290],
[346,277,330,290,258,326,278,0,353,285],
[225,224,259,246,209,169,204,197,0,253],
[258,171,296,241,248,223,260,265,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,246,282,244,310,231,273,238,225],
[298,0,268,307,284,334,285,283,281,271],
[304,282,0,309,259,333,308,281,321,271],
[268,243,241,0,238,304,250,249,250,267],
[306,266,291,312,0,347,296,272,304,310],
[240,216,217,246,203,0,241,227,236,254],
[319,265,242,300,254,309,0,300,297,266],
[277,267,269,301,278,323,250,0,276,269],
[312,269,229,300,246,314,253,274,0,268],
[325,279,279,283,240,296,284,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,291,279,321,289,259,269,265,254],
[267,0,292,307,327,272,240,254,265,294],
[259,258,0,260,324,277,253,262,300,290],
[271,243,290,0,290,265,248,253,258,271],
[229,223,226,260,0,290,258,257,271,270],
[261,278,273,285,260,0,239,243,262,278],
[291,310,297,302,292,311,0,267,262,292],
[281,296,288,297,293,307,283,0,245,279],
[285,285,250,292,279,288,288,305,0,276],
[296,256,260,279,280,272,258,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,291,237,295,253,288,284,236],
[249,0,300,265,233,306,255,269,284,237],
[277,250,0,241,233,273,245,269,274,226],
[259,285,309,0,257,320,258,289,306,284],
[313,317,317,293,0,322,292,304,317,263],
[255,244,277,230,228,0,236,220,229,245],
[297,295,305,292,258,314,0,281,282,251],
[262,281,281,261,246,330,269,0,283,265],
[266,266,276,244,233,321,268,267,0,226],
[314,313,324,266,287,305,299,285,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,222,248,248,281,280,288,253,259],
[301,0,266,268,257,301,261,308,289,273],
[328,284,0,272,283,314,273,323,296,294],
[302,282,278,0,265,312,266,319,288,258],
[302,293,267,285,0,317,277,312,284,273],
[269,249,236,238,233,0,253,275,261,263],
[270,289,277,284,273,297,0,319,313,278],
[262,242,227,231,238,275,231,0,271,247],
[297,261,254,262,266,289,237,279,0,257],
[291,277,256,292,277,287,272,303,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,290,280,275,268,272,300,276,271],
[286,0,258,285,263,272,252,272,269,261],
[260,292,0,262,260,262,268,278,284,258],
[270,265,288,0,289,274,267,283,273,264],
[275,287,290,261,0,290,274,297,284,280],
[282,278,288,276,260,0,261,292,299,270],
[278,298,282,283,276,289,0,294,266,262],
[250,278,272,267,253,258,256,0,270,256],
[274,281,266,277,266,251,284,280,0,258],
[279,289,292,286,270,280,288,294,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,285,256,281,271,288,267,289,247],
[257,0,291,247,285,259,283,267,291,274],
[265,259,0,262,267,259,284,258,301,281],
[294,303,288,0,286,295,287,275,310,305],
[269,265,283,264,0,270,278,286,284,237],
[279,291,291,255,280,0,282,238,275,253],
[262,267,266,263,272,268,0,252,265,261],
[283,283,292,275,264,312,298,0,287,308],
[261,259,249,240,266,275,285,263,0,254],
[303,276,269,245,313,297,289,242,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,296,271,291,290,249,286,279,277],
[269,0,279,291,285,295,274,282,292,288],
[254,271,0,261,246,281,255,285,269,272],
[279,259,289,0,272,285,261,280,269,273],
[259,265,304,278,0,282,277,287,287,292],
[260,255,269,265,268,0,233,289,273,282],
[301,276,295,289,273,317,0,297,274,293],
[264,268,265,270,263,261,253,0,259,277],
[271,258,281,281,263,277,276,291,0,283],
[273,262,278,277,258,268,257,273,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,269,303,249,283,248,277,221,240],
[295,0,287,276,230,254,239,293,287,242],
[281,263,0,278,247,280,266,304,274,257],
[247,274,272,0,247,196,271,250,310,272],
[301,320,303,303,0,253,301,284,326,306],
[267,296,270,354,297,0,306,308,299,311],
[302,311,284,279,249,244,0,297,241,287],
[273,257,246,300,266,242,253,0,302,270],
[329,263,276,240,224,251,309,248,0,287],
[310,308,293,278,244,239,263,280,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,295,284,288,276,275,295,282],
[275,0,273,294,294,288,294,281,299,265],
[264,277,0,293,278,292,275,268,314,261],
[255,256,257,0,274,255,266,261,276,248],
[266,256,272,276,0,290,269,258,288,245],
[262,262,258,295,260,0,281,253,291,271],
[274,256,275,284,281,269,0,259,280,255],
[275,269,282,289,292,297,291,0,290,276],
[255,251,236,274,262,259,270,260,0,236],
[268,285,289,302,305,279,295,274,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,272,234,275,302,209,332,248,263],
[330,0,320,398,331,330,309,329,273,269],
[278,230,0,196,249,239,265,252,271,218],
[316,152,354,0,295,290,285,301,231,313],
[275,219,301,255,0,263,257,310,265,261],
[248,220,311,260,287,0,300,298,244,262],
[341,241,285,265,293,250,0,367,254,252],
[218,221,298,249,240,252,183,0,245,244],
[302,277,279,319,285,306,296,305,0,251],
[287,281,332,237,289,288,298,306,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,268,276,260,285,272,262,275,285],
[268,0,259,274,269,269,283,269,269,271],
[282,291,0,267,276,287,270,267,289,292],
[274,276,283,0,267,278,277,273,275,268],
[290,281,274,283,0,295,288,281,278,286],
[265,281,263,272,255,0,273,272,288,275],
[278,267,280,273,262,277,0,274,278,289],
[288,281,283,277,269,278,276,0,284,281],
[275,281,261,275,272,262,272,266,0,282],
[265,279,258,282,264,275,261,269,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,280,249,236,291,259,252,263,286],
[263,0,262,255,268,260,243,232,251,235],
[270,288,0,255,251,260,232,248,251,238],
[301,295,295,0,284,306,258,269,295,282],
[314,282,299,266,0,301,252,273,284,275],
[259,290,290,244,249,0,225,233,262,271],
[291,307,318,292,298,325,0,254,286,292],
[298,318,302,281,277,317,296,0,299,267],
[287,299,299,255,266,288,264,251,0,250],
[264,315,312,268,275,279,258,283,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,278,271,255,287,289,283,307],
[259,0,273,277,268,246,270,280,280,291],
[270,277,0,284,269,260,283,289,269,301],
[272,273,266,0,270,277,292,277,289,273],
[279,282,281,280,0,273,287,293,278,283],
[295,304,290,273,277,0,294,291,275,293],
[263,280,267,258,263,256,0,245,268,291],
[261,270,261,273,257,259,305,0,270,290],
[267,270,281,261,272,275,282,280,0,297],
[243,259,249,277,267,257,259,260,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,246,267,263,277,257,304,281,278],
[281,0,264,278,303,333,304,310,292,276],
[304,286,0,277,275,280,283,310,296,261],
[283,272,273,0,276,336,290,347,286,298],
[287,247,275,274,0,290,270,325,294,298],
[273,217,270,214,260,0,266,282,279,244],
[293,246,267,260,280,284,0,307,300,280],
[246,240,240,203,225,268,243,0,273,254],
[269,258,254,264,256,271,250,277,0,299],
[272,274,289,252,252,306,270,296,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,279,280,273,271,276,276,263,262],
[289,0,283,288,284,275,268,256,265,254],
[271,267,0,293,281,292,280,263,274,270],
[270,262,257,0,272,271,265,248,247,259],
[277,266,269,278,0,258,259,258,271,271],
[279,275,258,279,292,0,285,247,262,248],
[274,282,270,285,291,265,0,257,251,265],
[274,294,287,302,292,303,293,0,282,278],
[287,285,276,303,279,288,299,268,0,271],
[288,296,280,291,279,302,285,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,296,284,302,268,315,301,296,293],
[262,0,280,271,280,269,308,276,287,263],
[254,270,0,252,285,280,309,286,284,273],
[266,279,298,0,275,274,298,308,294,287],
[248,270,265,275,0,259,301,281,278,260],
[282,281,270,276,291,0,310,287,293,299],
[235,242,241,252,249,240,0,263,268,274],
[249,274,264,242,269,263,287,0,261,264],
[254,263,266,256,272,257,282,289,0,285],
[257,287,277,263,290,251,276,286,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,245,246,328,252,265,300,215,227],
[314,0,327,289,317,270,277,285,300,294],
[305,223,0,307,287,252,313,292,307,223],
[304,261,243,0,256,243,270,264,213,288],
[222,233,263,294,0,272,273,230,211,235],
[298,280,298,307,278,0,266,267,242,267],
[285,273,237,280,277,284,0,233,229,209],
[250,265,258,286,320,283,317,0,178,249],
[335,250,243,337,339,308,321,372,0,276],
[323,256,327,262,315,283,341,301,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,390,321,316,287,329,345,220,328,271],
[160,0,281,251,222,258,269,195,245,243],
[229,269,0,316,212,228,248,178,231,194],
[234,299,234,0,197,221,250,170,299,224],
[263,328,338,353,0,267,285,275,329,326],
[221,292,322,329,283,0,294,221,310,218],
[205,281,302,300,265,256,0,196,262,269],
[330,355,372,380,275,329,354,0,335,333],
[222,305,319,251,221,240,288,215,0,224],
[279,307,356,326,224,332,281,217,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,239,242,256,228,252,206,226,242],
[299,0,236,266,250,252,257,215,244,272],
[311,314,0,285,276,264,277,277,285,273],
[308,284,265,0,290,246,264,284,274,318],
[294,300,274,260,0,267,267,233,244,280],
[322,298,286,304,283,0,288,251,279,306],
[298,293,273,286,283,262,0,279,266,312],
[344,335,273,266,317,299,271,0,280,313],
[324,306,265,276,306,271,284,270,0,303],
[308,278,277,232,270,244,238,237,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,275,302,310,301,305,284,299,284],
[227,0,239,278,259,250,256,265,259,268],
[275,311,0,301,298,288,294,284,291,280],
[248,272,249,0,255,255,259,250,254,260],
[240,291,252,295,0,268,285,268,289,274],
[249,300,262,295,282,0,277,291,282,291],
[245,294,256,291,265,273,0,273,279,278],
[266,285,266,300,282,259,277,0,279,282],
[251,291,259,296,261,268,271,271,0,282],
[266,282,270,290,276,259,272,268,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,282,311,315,308,248,279,299,261],
[254,0,206,240,310,275,259,294,281,259],
[268,344,0,262,351,340,263,362,339,294],
[239,310,288,0,336,322,283,322,300,305],
[235,240,199,214,0,238,222,222,286,212],
[242,275,210,228,312,0,220,331,279,281],
[302,291,287,267,328,330,0,318,325,309],
[271,256,188,228,328,219,232,0,217,249],
[251,269,211,250,264,271,225,333,0,279],
[289,291,256,245,338,269,241,301,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,276,263,272,291,284,279,282],
[270,0,277,274,259,292,295,264,286,283],
[271,273,0,271,257,277,286,265,254,272],
[274,276,279,0,248,273,292,273,267,286],
[287,291,293,302,0,286,301,292,267,288],
[278,258,273,277,264,0,283,272,261,292],
[259,255,264,258,249,267,0,257,269,278],
[266,286,285,277,258,278,293,0,274,289],
[271,264,296,283,283,289,281,276,0,282],
[268,267,278,264,262,258,272,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,312,252,267,347,292,304,282,289],
[312,0,338,265,293,321,295,315,271,295],
[238,212,0,233,215,278,226,285,247,251],
[298,285,317,0,262,299,324,319,327,312],
[283,257,335,288,0,315,292,307,280,267],
[203,229,272,251,235,0,270,274,205,259],
[258,255,324,226,258,280,0,318,284,263],
[246,235,265,231,243,276,232,0,230,241],
[268,279,303,223,270,345,266,320,0,288],
[261,255,299,238,283,291,287,309,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,289,287,260,295,287,280,276,278],
[250,0,268,255,241,283,286,270,270,269],
[261,282,0,254,264,287,290,269,257,268],
[263,295,296,0,269,285,286,271,301,282],
[290,309,286,281,0,292,303,262,298,291],
[255,267,263,265,258,0,278,254,294,283],
[263,264,260,264,247,272,0,261,275,282],
[270,280,281,279,288,296,289,0,282,272],
[274,280,293,249,252,256,275,268,0,283],
[272,281,282,268,259,267,268,278,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,286,295,284,289,280,285,287,298],
[277,0,277,271,259,315,287,270,268,277],
[264,273,0,271,259,283,263,267,277,265],
[255,279,279,0,256,289,257,266,282,273],
[266,291,291,294,0,309,276,273,288,288],
[261,235,267,261,241,0,250,246,262,272],
[270,263,287,293,274,300,0,258,285,285],
[265,280,283,284,277,304,292,0,282,284],
[263,282,273,268,262,288,265,268,0,278],
[252,273,285,277,262,278,265,266,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,209,271,207,172,226,309,245],
[270,0,266,233,268,193,212,239,235,232],
[254,284,0,239,262,223,248,301,227,185],
[341,317,311,0,259,349,275,315,291,254],
[279,282,288,291,0,259,302,279,229,203],
[343,357,327,201,291,0,275,288,248,280],
[378,338,302,275,248,275,0,285,249,259],
[324,311,249,235,271,262,265,0,241,225],
[241,315,323,259,321,302,301,309,0,280],
[305,318,365,296,347,270,291,325,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,233,266,284,239,264,289,262,259],
[267,0,255,284,292,259,260,280,268,257],
[317,295,0,294,300,286,262,305,273,270],
[284,266,256,0,293,270,266,289,262,258],
[266,258,250,257,0,256,265,262,237,260],
[311,291,264,280,294,0,293,309,272,290],
[286,290,288,284,285,257,0,293,279,276],
[261,270,245,261,288,241,257,0,245,243],
[288,282,277,288,313,278,271,305,0,291],
[291,293,280,292,290,260,274,307,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,286,293,256,254,254,254,267,285],
[298,0,314,295,281,277,265,277,281,274],
[264,236,0,256,254,250,238,247,253,248],
[257,255,294,0,258,269,252,274,271,268],
[294,269,296,292,0,263,275,267,268,259],
[296,273,300,281,287,0,264,275,284,269],
[296,285,312,298,275,286,0,272,302,294],
[296,273,303,276,283,275,278,0,292,274],
[283,269,297,279,282,266,248,258,0,279],
[265,276,302,282,291,281,256,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,275,282,265,255,270,294,267,261],
[278,0,266,248,246,242,273,266,283,239],
[275,284,0,274,262,256,284,273,292,255],
[268,302,276,0,244,277,283,287,293,243],
[285,304,288,306,0,273,286,300,311,266],
[295,308,294,273,277,0,317,302,301,275],
[280,277,266,267,264,233,0,300,293,255],
[256,284,277,263,250,248,250,0,287,232],
[283,267,258,257,239,249,257,263,0,243],
[289,311,295,307,284,275,295,318,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,281,277,307,310,272,278,340,321],
[259,0,249,232,307,285,282,259,318,287],
[269,301,0,253,295,264,265,313,302,303],
[273,318,297,0,306,298,273,267,307,304],
[243,243,255,244,0,251,298,279,265,277],
[240,265,286,252,299,0,307,258,289,275],
[278,268,285,277,252,243,0,275,306,300],
[272,291,237,283,271,292,275,0,307,311],
[210,232,248,243,285,261,244,243,0,290],
[229,263,247,246,273,275,250,239,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,270,270,254,287,270,287,265,264],
[291,0,279,288,279,286,293,295,275,277],
[280,271,0,287,258,292,273,291,281,260],
[280,262,263,0,263,275,281,277,284,270],
[296,271,292,287,0,286,298,292,282,268],
[263,264,258,275,264,0,267,280,273,259],
[280,257,277,269,252,283,0,279,287,262],
[263,255,259,273,258,270,271,0,280,255],
[285,275,269,266,268,277,263,270,0,253],
[286,273,290,280,282,291,288,295,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,258,251,276,270,256,281,264],
[267,0,257,245,249,266,272,261,266,263],
[269,293,0,301,281,292,283,282,304,301],
[292,305,249,0,289,290,270,274,300,276],
[299,301,269,261,0,271,291,272,296,287],
[274,284,258,260,279,0,276,259,295,274],
[280,278,267,280,259,274,0,272,271,283],
[294,289,268,276,278,291,278,0,285,260],
[269,284,246,250,254,255,279,265,0,267],
[286,287,249,274,263,276,267,290,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,294,261,252,235,233,268,275,277],
[280,0,301,266,287,285,281,291,314,281],
[256,249,0,237,245,253,227,261,251,268],
[289,284,313,0,293,288,255,305,305,287],
[298,263,305,257,0,274,257,288,285,281],
[315,265,297,262,276,0,241,276,284,280],
[317,269,323,295,293,309,0,308,308,290],
[282,259,289,245,262,274,242,0,267,282],
[275,236,299,245,265,266,242,283,0,267],
[273,269,282,263,269,270,260,268,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,277,262,265,247,239,269,277,246],
[294,0,255,284,272,265,266,275,254,267],
[273,295,0,278,301,279,273,288,277,277],
[288,266,272,0,274,257,264,268,265,261],
[285,278,249,276,0,283,256,274,270,262],
[303,285,271,293,267,0,266,277,277,261],
[311,284,277,286,294,284,0,289,266,266],
[281,275,262,282,276,273,261,0,263,264],
[273,296,273,285,280,273,284,287,0,268],
[304,283,273,289,288,289,284,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,316,275,283,292,277,251,290,286],
[249,0,291,250,261,249,233,244,264,271],
[234,259,0,211,268,230,241,248,271,279],
[275,300,339,0,320,268,270,263,268,283],
[267,289,282,230,0,253,267,273,257,260],
[258,301,320,282,297,0,275,253,251,277],
[273,317,309,280,283,275,0,268,307,304],
[299,306,302,287,277,297,282,0,272,306],
[260,286,279,282,293,299,243,278,0,271],
[264,279,271,267,290,273,246,244,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,279,294,290,294,307,284,286],
[274,0,292,298,285,280,281,311,305,291],
[282,258,0,288,259,261,275,286,266,296],
[271,252,262,0,264,277,245,257,263,262],
[256,265,291,286,0,300,287,261,277,288],
[260,270,289,273,250,0,286,283,270,265],
[256,269,275,305,263,264,0,278,274,274],
[243,239,264,293,289,267,272,0,263,281],
[266,245,284,287,273,280,276,287,0,272],
[264,259,254,288,262,285,276,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,283,246,235,245,232,262,253,299],
[312,0,298,277,222,226,252,275,262,258],
[267,252,0,266,261,239,240,253,301,255],
[304,273,284,0,242,235,243,274,281,274],
[315,328,289,308,0,282,266,277,312,294],
[305,324,311,315,268,0,277,313,305,320],
[318,298,310,307,284,273,0,284,317,282],
[288,275,297,276,273,237,266,0,289,272],
[297,288,249,269,238,245,233,261,0,275],
[251,292,295,276,256,230,268,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,255,284,295,265,290,272,289],
[284,0,294,275,312,316,280,300,264,292],
[272,256,0,266,311,274,255,268,269,284],
[295,275,284,0,307,315,278,285,291,259],
[266,238,239,243,0,272,248,272,236,253],
[255,234,276,235,278,0,265,250,266,252],
[285,270,295,272,302,285,0,270,264,279],
[260,250,282,265,278,300,280,0,277,259],
[278,286,281,259,314,284,286,273,0,247],
[261,258,266,291,297,298,271,291,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,262,274,249,263,273,264,258,250],
[280,0,268,268,258,271,291,258,269,269],
[288,282,0,286,272,285,268,284,275,267],
[276,282,264,0,279,284,291,271,276,281],
[301,292,278,271,0,289,285,290,289,298],
[287,279,265,266,261,0,262,271,274,279],
[277,259,282,259,265,288,0,292,276,276],
[286,292,266,279,260,279,258,0,276,268],
[292,281,275,274,261,276,274,274,0,275],
[300,281,283,269,252,271,274,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,260,287,289,289,271,280,253,256],
[269,0,251,276,286,262,253,240,249,230],
[290,299,0,277,295,273,307,272,296,273],
[263,274,273,0,248,258,277,254,258,255],
[261,264,255,302,0,271,267,265,272,229],
[261,288,277,292,279,0,272,250,277,246],
[279,297,243,273,283,278,0,270,271,251],
[270,310,278,296,285,300,280,0,278,264],
[297,301,254,292,278,273,279,272,0,275],
[294,320,277,295,321,304,299,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,262,260,257,271,259,279,255],
[280,0,272,260,270,255,274,279,271,259],
[283,278,0,270,274,269,285,283,260,253],
[288,290,280,0,279,274,268,268,284,273],
[290,280,276,271,0,283,275,280,288,268],
[293,295,281,276,267,0,278,280,282,269],
[279,276,265,282,275,272,0,291,278,280],
[291,271,267,282,270,270,259,0,276,261],
[271,279,290,266,262,268,272,274,0,249],
[295,291,297,277,282,281,270,289,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,245,274,270,250,287,279,269,271],
[288,0,256,282,255,245,300,279,275,307],
[305,294,0,259,266,284,310,307,289,302],
[276,268,291,0,274,293,326,304,300,327],
[280,295,284,276,0,263,301,285,282,270],
[300,305,266,257,287,0,304,292,280,285],
[263,250,240,224,249,246,0,248,240,264],
[271,271,243,246,265,258,302,0,281,269],
[281,275,261,250,268,270,310,269,0,276],
[279,243,248,223,280,265,286,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,260,263,282,274,259,287,248,272],
[270,0,250,228,255,268,250,279,259,257],
[290,300,0,255,283,284,281,295,278,292],
[287,322,295,0,288,300,285,307,272,286],
[268,295,267,262,0,244,234,270,229,255],
[276,282,266,250,306,0,259,276,257,251],
[291,300,269,265,316,291,0,307,285,290],
[263,271,255,243,280,274,243,0,288,277],
[302,291,272,278,321,293,265,262,0,282],
[278,293,258,264,295,299,260,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,281,273,262,290,290,290,275],
[269,0,300,284,280,259,275,253,274,256],
[261,250,0,266,264,279,274,275,269,239],
[269,266,284,0,272,301,278,285,258,274],
[277,270,286,278,0,280,292,301,298,259],
[288,291,271,249,270,0,281,306,278,247],
[260,275,276,272,258,269,0,292,261,251],
[260,297,275,265,249,244,258,0,274,228],
[260,276,281,292,252,272,289,276,0,240],
[275,294,311,276,291,303,299,322,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,277,266,283,270,267,264,268],
[279,0,286,278,273,281,277,247,275,281],
[279,264,0,276,273,278,268,245,286,282],
[273,272,274,0,259,284,270,263,273,281],
[284,277,277,291,0,290,275,277,278,277],
[267,269,272,266,260,0,258,265,260,273],
[280,273,282,280,275,292,0,279,273,284],
[283,303,305,287,273,285,271,0,291,296],
[286,275,264,277,272,290,277,259,0,279],
[282,269,268,269,273,277,266,254,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,287,272,285,303,272,287,289,269],
[258,0,270,278,274,273,282,286,273,254],
[263,280,0,266,275,292,279,287,290,267],
[278,272,284,0,292,287,285,289,268,267],
[265,276,275,258,0,276,268,294,282,275],
[247,277,258,263,274,0,272,281,257,258],
[278,268,271,265,282,278,0,285,293,279],
[263,264,263,261,256,269,265,0,268,263],
[261,277,260,282,268,293,257,282,0,268],
[281,296,283,283,275,292,271,287,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,255,282,246,271,255,246,253,251],
[318,0,269,278,278,280,276,284,282,292],
[295,281,0,277,243,295,304,294,266,301],
[268,272,273,0,282,267,278,277,270,273],
[304,272,307,268,0,299,304,294,301,295],
[279,270,255,283,251,0,285,300,291,291],
[295,274,246,272,246,265,0,292,260,249],
[304,266,256,273,256,250,258,0,249,257],
[297,268,284,280,249,259,290,301,0,269],
[299,258,249,277,255,259,301,293,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,289,280,287,297,273,282,325],
[261,0,267,292,270,283,292,295,284,274],
[269,283,0,300,280,271,291,277,280,292],
[261,258,250,0,272,282,274,291,296,285],
[270,280,270,278,0,250,261,263,267,291],
[263,267,279,268,300,0,273,275,283,281],
[253,258,259,276,289,277,0,275,283,272],
[277,255,273,259,287,275,275,0,267,290],
[268,266,270,254,283,267,267,283,0,268],
[225,276,258,265,259,269,278,260,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,252,266,273,264,226,307,252,249],
[304,0,277,291,330,280,264,316,285,298],
[298,273,0,275,281,275,252,293,268,267],
[284,259,275,0,279,248,265,302,251,264],
[277,220,269,271,0,272,270,270,239,267],
[286,270,275,302,278,0,277,289,289,285],
[324,286,298,285,280,273,0,305,289,287],
[243,234,257,248,280,261,245,0,237,254],
[298,265,282,299,311,261,261,313,0,265],
[301,252,283,286,283,265,263,296,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,323,326,303,282,293,250,277,320],
[291,0,252,268,335,299,380,267,278,289],
[227,298,0,277,310,278,343,304,261,279],
[224,282,273,0,329,263,349,290,304,264],
[247,215,240,221,0,207,270,200,192,256],
[268,251,272,287,343,0,342,303,244,265],
[257,170,207,201,280,208,0,201,174,202],
[300,283,246,260,350,247,349,0,248,249],
[273,272,289,246,358,306,376,302,0,287],
[230,261,271,286,294,285,348,301,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,297,279,283,308,288,272,303,268],
[287,0,287,282,288,307,285,284,294,266],
[253,263,0,287,278,300,284,273,291,278],
[271,268,263,0,281,288,287,258,287,252],
[267,262,272,269,0,289,274,267,293,259],
[242,243,250,262,261,0,256,257,270,245],
[262,265,266,263,276,294,0,255,289,264],
[278,266,277,292,283,293,295,0,295,252],
[247,256,259,263,257,280,261,255,0,244],
[282,284,272,298,291,305,286,298,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,262,274,261,259,322,301,308],
[265,0,315,294,367,290,225,301,394,335],
[277,235,0,264,263,252,265,318,298,246],
[288,256,286,0,272,218,237,296,330,315],
[276,183,287,278,0,293,243,310,306,289],
[289,260,298,332,257,0,285,308,334,342],
[291,325,285,313,307,265,0,292,326,362],
[228,249,232,254,240,242,258,0,300,330],
[249,156,252,220,244,216,224,250,0,270],
[242,215,304,235,261,208,188,220,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,307,254,328,288,276,254,282,263],
[288,0,302,318,288,277,259,279,258,260],
[243,248,0,262,322,282,263,271,274,258],
[296,232,288,0,280,312,267,261,273,225],
[222,262,228,270,0,329,272,285,314,246],
[262,273,268,238,221,0,210,227,253,188],
[274,291,287,283,278,340,0,296,270,271],
[296,271,279,289,265,323,254,0,253,258],
[268,292,276,277,236,297,280,297,0,277],
[287,290,292,325,304,362,279,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,249,285,286,285,274,270,292,276],
[262,0,260,268,283,272,268,266,287,257],
[301,290,0,290,310,293,276,271,296,272],
[265,282,260,0,283,262,267,266,269,263],
[264,267,240,267,0,254,255,252,273,256],
[265,278,257,288,296,0,265,262,284,257],
[276,282,274,283,295,285,0,273,295,293],
[280,284,279,284,298,288,277,0,291,270],
[258,263,254,281,277,266,255,259,0,265],
[274,293,278,287,294,293,257,280,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,269,279,295,291,298,272,279],
[264,0,271,259,285,260,285,279,270,291],
[253,279,0,258,299,258,278,280,277,274],
[281,291,292,0,285,282,335,308,289,265],
[271,265,251,265,0,238,309,279,272,267],
[255,290,292,268,312,0,273,302,273,258],
[259,265,272,215,241,277,0,288,239,266],
[252,271,270,242,271,248,262,0,247,231],
[278,280,273,261,278,277,311,303,0,288],
[271,259,276,285,283,292,284,319,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,254,276,258,253,265,294,254],
[281,0,268,277,281,262,253,270,278,264],
[270,282,0,273,265,276,261,285,289,280],
[296,273,277,0,273,287,291,280,291,272],
[274,269,285,277,0,305,275,274,276,259],
[292,288,274,263,245,0,248,257,285,251],
[297,297,289,259,275,302,0,281,293,276],
[285,280,265,270,276,293,269,0,296,265],
[256,272,261,259,274,265,257,254,0,242],
[296,286,270,278,291,299,274,285,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,257,274,281,265,273,289,272,279],
[263,0,242,284,287,264,270,283,252,264],
[293,308,0,316,289,280,272,291,296,310],
[276,266,234,0,251,250,255,257,244,262],
[269,263,261,299,0,255,251,292,274,269],
[285,286,270,300,295,0,264,280,261,270],
[277,280,278,295,299,286,0,295,268,304],
[261,267,259,293,258,270,255,0,268,278],
[278,298,254,306,276,289,282,282,0,315],
[271,286,240,288,281,280,246,272,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,273,294,195,247,216,296,244,174],
[284,0,293,257,372,348,268,296,288,312],
[277,257,0,306,195,226,180,212,252,190],
[256,293,244,0,261,160,231,294,268,234],
[355,178,355,289,0,285,298,222,266,254],
[303,202,324,390,265,0,270,318,252,230],
[334,282,370,319,252,280,0,299,287,240],
[254,254,338,256,328,232,251,0,245,325],
[306,262,298,282,284,298,263,305,0,239],
[376,238,360,316,296,320,310,225,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,258,270,251,283,269,257,273,254],
[282,0,263,277,279,276,275,271,290,264],
[292,287,0,274,273,295,278,282,290,277],
[280,273,276,0,279,283,286,263,267,277],
[299,271,277,271,0,280,276,270,278,272],
[267,274,255,267,270,0,260,250,272,260],
[281,275,272,264,274,290,0,272,280,258],
[293,279,268,287,280,300,278,0,287,286],
[277,260,260,283,272,278,270,263,0,275],
[296,286,273,273,278,290,292,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,298,259,247,245,289,263,292,268],
[286,0,276,274,276,277,293,282,289,282],
[252,274,0,266,269,265,267,262,254,260],
[291,276,284,0,274,295,295,271,320,291],
[303,274,281,276,0,293,307,274,296,277],
[305,273,285,255,257,0,300,278,304,270],
[261,257,283,255,243,250,0,278,256,238],
[287,268,288,279,276,272,272,0,273,244],
[258,261,296,230,254,246,294,277,0,254],
[282,268,290,259,273,280,312,306,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,256,275,241,254,237,268,221,244],
[305,0,264,271,258,283,245,264,242,258],
[294,286,0,270,273,288,285,307,281,280],
[275,279,280,0,267,260,260,287,273,268],
[309,292,277,283,0,281,279,282,272,274],
[296,267,262,290,269,0,260,278,280,277],
[313,305,265,290,271,290,0,286,274,261],
[282,286,243,263,268,272,264,0,276,268],
[329,308,269,277,278,270,276,274,0,285],
[306,292,270,282,276,273,289,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,303,254,266,284,287,264,268,249],
[284,0,297,260,262,292,281,257,277,247],
[247,253,0,261,251,276,259,253,243,245],
[296,290,289,0,287,288,287,266,268,265],
[284,288,299,263,0,290,288,259,284,277],
[266,258,274,262,260,0,262,278,253,225],
[263,269,291,263,262,288,0,256,270,272],
[286,293,297,284,291,272,294,0,279,249],
[282,273,307,282,266,297,280,271,0,266],
[301,303,305,285,273,325,278,301,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,260,241,249,248,258,262,256,270],
[287,0,251,264,264,254,268,255,257,276],
[290,299,0,259,273,277,278,276,265,286],
[309,286,291,0,270,268,289,284,276,280],
[301,286,277,280,0,267,288,284,286,285],
[302,296,273,282,283,0,271,285,267,290],
[292,282,272,261,262,279,0,282,260,269],
[288,295,274,266,266,265,268,0,275,278],
[294,293,285,274,264,283,290,275,0,280],
[280,274,264,270,265,260,281,272,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,289,257,266,266,284,250,264,256],
[289,0,296,246,255,269,274,270,259,259],
[261,254,0,230,263,265,284,248,271,271],
[293,304,320,0,301,315,321,314,284,270],
[284,295,287,249,0,293,272,287,280,262],
[284,281,285,235,257,0,278,270,297,250],
[266,276,266,229,278,272,0,293,283,275],
[300,280,302,236,263,280,257,0,288,270],
[286,291,279,266,270,253,267,262,0,267],
[294,291,279,280,288,300,275,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,179,277,321,294,304,192,296,273,209],
[371,0,320,263,415,345,402,261,227,343],
[273,230,0,246,337,294,218,237,201,226],
[229,287,304,0,300,406,286,279,211,220],
[256,135,213,250,0,235,176,263,248,281],
[246,205,256,144,315,0,199,53,203,235],
[358,148,332,264,374,351,0,293,265,271],
[254,289,313,271,287,497,257,0,202,250],
[277,323,349,339,302,347,285,348,0,199],
[341,207,324,330,269,315,279,300,351,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,292,276,302,298,277,273,291,266],
[285,0,293,289,316,316,278,307,280,266],
[258,257,0,277,292,282,259,269,248,245],
[274,261,273,0,297,299,265,273,275,249],
[248,234,258,253,0,268,267,252,257,239],
[252,234,268,251,282,0,261,292,258,246],
[273,272,291,285,283,289,0,291,271,267],
[277,243,281,277,298,258,259,0,271,273],
[259,270,302,275,293,292,279,279,0,284],
[284,284,305,301,311,304,283,277,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,221,276,297,271,279,255,252,227],
[277,0,268,293,290,290,269,237,251,283],
[329,282,0,301,344,294,278,281,271,290],
[274,257,249,0,302,274,265,253,232,272],
[253,260,206,248,0,229,237,221,221,209],
[279,260,256,276,321,0,262,271,252,280],
[271,281,272,285,313,288,0,246,264,269],
[295,313,269,297,329,279,304,0,282,278],
[298,299,279,318,329,298,286,268,0,253],
[323,267,260,278,341,270,281,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,282,266,297,283,278,270,327,297],
[255,0,287,263,289,232,271,239,328,254],
[268,263,0,258,318,276,302,268,326,290],
[284,287,292,0,304,255,305,278,333,284],
[253,261,232,246,0,227,257,258,288,270],
[267,318,274,295,323,0,289,272,321,314],
[272,279,248,245,293,261,0,235,320,287],
[280,311,282,272,292,278,315,0,346,309],
[223,222,224,217,262,229,230,204,0,238],
[253,296,260,266,280,236,263,241,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,282,280,249,280,281,271,276,263],
[291,0,292,286,270,302,287,270,294,274],
[268,258,0,263,250,291,257,277,275,258],
[270,264,287,0,255,277,244,279,285,254],
[301,280,300,295,0,310,264,278,305,292],
[270,248,259,273,240,0,250,243,300,256],
[269,263,293,306,286,300,0,270,293,275],
[279,280,273,271,272,307,280,0,288,274],
[274,256,275,265,245,250,257,262,0,256],
[287,276,292,296,258,294,275,276,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,196,292,202,273,192,234,201,228],
[312,0,310,344,244,298,317,272,297,205],
[354,240,0,287,280,278,270,275,338,287],
[258,206,263,0,242,298,311,249,271,218],
[348,306,270,308,0,310,286,256,301,223],
[277,252,272,252,240,0,274,254,274,187],
[358,233,280,239,264,276,0,246,263,276],
[316,278,275,301,294,296,304,0,273,217],
[349,253,212,279,249,276,287,277,0,242],
[322,345,263,332,327,363,274,333,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,276,262,257,289,292,264,305,272],
[260,0,291,272,265,269,313,243,269,259],
[274,259,0,279,271,260,297,285,265,266],
[288,278,271,0,293,283,312,273,308,279],
[293,285,279,257,0,286,301,295,290,264],
[261,281,290,267,264,0,308,274,285,262],
[258,237,253,238,249,242,0,248,278,268],
[286,307,265,277,255,276,302,0,310,278],
[245,281,285,242,260,265,272,240,0,241],
[278,291,284,271,286,288,282,272,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,282,263,248,273,270,268,218,272],
[306,0,291,282,242,287,304,282,270,272],
[268,259,0,276,252,280,274,280,266,248],
[287,268,274,0,245,275,310,281,277,262],
[302,308,298,305,0,280,325,313,290,272],
[277,263,270,275,270,0,284,263,234,241],
[280,246,276,240,225,266,0,246,267,250],
[282,268,270,269,237,287,304,0,256,284],
[332,280,284,273,260,316,283,294,0,298],
[278,278,302,288,278,309,300,266,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,209,203,251,243,266,201,203,253],
[313,0,239,269,318,222,327,245,251,317],
[341,311,0,283,292,238,356,278,259,289],
[347,281,267,0,276,266,321,238,247,264],
[299,232,258,274,0,264,315,250,200,270],
[307,328,312,284,286,0,297,256,276,300],
[284,223,194,229,235,253,0,213,182,233],
[349,305,272,312,300,294,337,0,282,301],
[347,299,291,303,350,274,368,268,0,293],
[297,233,261,286,280,250,317,249,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,268,308,279,290,268,268,311,289],
[308,0,271,316,291,302,281,266,283,279],
[282,279,0,297,276,259,246,259,297,274],
[242,234,253,0,262,257,258,261,254,249],
[271,259,274,288,0,270,274,268,268,272],
[260,248,291,293,280,0,268,282,309,278],
[282,269,304,292,276,282,0,259,293,292],
[282,284,291,289,282,268,291,0,287,287],
[239,267,253,296,282,241,257,263,0,266],
[261,271,276,301,278,272,258,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,297,304,253,282,260,246,285],
[282,0,290,287,314,282,302,303,281,273],
[271,260,0,306,269,290,292,266,259,275],
[253,263,244,0,266,232,261,290,251,230],
[246,236,281,284,0,232,293,292,259,259],
[297,268,260,318,318,0,322,302,297,287],
[268,248,258,289,257,228,0,272,222,248],
[290,247,284,260,258,248,278,0,280,254],
[304,269,291,299,291,253,328,270,0,289],
[265,277,275,320,291,263,302,296,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,195,276,227,262,205,276,207,221],
[306,0,246,302,281,304,277,304,270,304],
[355,304,0,324,301,325,281,303,267,299],
[274,248,226,0,277,299,242,299,243,244],
[323,269,249,273,0,284,270,276,283,319],
[288,246,225,251,266,0,245,261,214,271],
[345,273,269,308,280,305,0,321,276,304],
[274,246,247,251,274,289,229,0,231,252],
[343,280,283,307,267,336,274,319,0,309],
[329,246,251,306,231,279,246,298,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,244,273,298,335,226,283,306,231],
[259,0,293,321,255,332,253,264,329,310],
[306,257,0,256,275,299,268,263,273,254],
[277,229,294,0,278,266,289,267,296,236],
[252,295,275,272,0,278,277,242,295,257],
[215,218,251,284,272,0,267,287,269,294],
[324,297,282,261,273,283,0,274,321,258],
[267,286,287,283,308,263,276,0,325,259],
[244,221,277,254,255,281,229,225,0,178],
[319,240,296,314,293,256,292,291,372,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,276,290,284,271,286,260,271],
[273,0,239,237,237,263,280,262,250,244],
[270,311,0,278,297,292,308,307,273,284],
[274,313,272,0,220,286,280,290,237,258],
[260,313,253,330,0,283,265,284,270,286],
[266,287,258,264,267,0,274,239,261,289],
[279,270,242,270,285,276,0,273,247,254],
[264,288,243,260,266,311,277,0,245,263],
[290,300,277,313,280,289,303,305,0,248],
[279,306,266,292,264,261,296,287,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,354,331,348,233,257,265,260,323],
[293,0,306,219,233,155,146,226,213,175],
[196,244,0,211,256,258,216,191,209,161],
[219,331,339,0,183,195,185,241,247,281],
[202,317,294,367,0,236,321,266,195,269],
[317,395,292,355,314,0,264,249,282,296],
[293,404,334,365,229,286,0,204,261,277],
[285,324,359,309,284,301,346,0,253,265],
[290,337,341,303,355,268,289,297,0,326],
[227,375,389,269,281,254,273,285,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,259,273,298,283,288,260,282,278],
[275,0,285,275,272,279,271,260,281,284],
[291,265,0,293,301,283,290,266,298,281],
[277,275,257,0,283,266,280,271,263,263],
[252,278,249,267,0,271,271,252,267,276],
[267,271,267,284,279,0,258,264,262,273],
[262,279,260,270,279,292,0,261,272,262],
[290,290,284,279,298,286,289,0,281,274],
[268,269,252,287,283,288,278,269,0,283],
[272,266,269,287,274,277,288,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,278,242,280,274,273,256,277],
[286,0,271,313,275,308,252,302,303,296],
[292,279,0,320,274,301,298,297,276,316],
[272,237,230,0,230,257,250,246,249,241],
[308,275,276,320,0,304,289,322,296,271],
[270,242,249,293,246,0,274,273,260,256],
[276,298,252,300,261,276,0,277,273,282],
[277,248,253,304,228,277,273,0,286,271],
[294,247,274,301,254,290,277,264,0,278],
[273,254,234,309,279,294,268,279,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,350,309,277,257,252,320,281,263],
[281,0,266,264,284,233,270,290,236,282],
[200,284,0,280,250,209,226,289,267,231],
[241,286,270,0,229,221,275,300,350,254],
[273,266,300,321,0,260,223,249,325,223],
[293,317,341,329,290,0,312,316,257,214],
[298,280,324,275,327,238,0,311,304,300],
[230,260,261,250,301,234,239,0,226,238],
[269,314,283,200,225,293,246,324,0,272],
[287,268,319,296,327,336,250,312,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,291,240,243,233,284,263,249,284],
[295,0,243,254,279,225,245,242,258,281],
[259,307,0,251,266,268,281,254,258,267],
[310,296,299,0,272,242,261,247,277,299],
[307,271,284,278,0,268,279,280,279,276],
[317,325,282,308,282,0,292,264,290,313],
[266,305,269,289,271,258,0,269,268,317],
[287,308,296,303,270,286,281,0,282,295],
[301,292,292,273,271,260,282,268,0,273],
[266,269,283,251,274,237,233,255,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,294,306,219,268,233,228,315,324],
[313,0,251,257,238,291,319,254,303,324],
[256,299,0,281,242,253,260,279,276,344],
[244,293,269,0,278,294,284,323,268,328],
[331,312,308,272,0,271,260,257,278,322],
[282,259,297,256,279,0,310,250,318,273],
[317,231,290,266,290,240,0,222,268,277],
[322,296,271,227,293,300,328,0,371,329],
[235,247,274,282,272,232,282,179,0,264],
[226,226,206,222,228,277,273,221,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,260,267,279,268,271,283,265,278],
[278,0,245,279,267,267,275,262,274,273],
[290,305,0,286,286,268,279,281,278,303],
[283,271,264,0,267,269,279,262,264,290],
[271,283,264,283,0,264,266,272,292,274],
[282,283,282,281,286,0,281,270,270,293],
[279,275,271,271,284,269,0,280,272,298],
[267,288,269,288,278,280,270,0,287,283],
[285,276,272,286,258,280,278,263,0,279],
[272,277,247,260,276,257,252,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,311,243,306,301,291,310,270,323],
[280,0,291,268,287,288,261,307,291,293],
[239,259,0,258,290,258,256,259,241,282],
[307,282,292,0,295,275,293,311,272,318],
[244,263,260,255,0,263,273,285,276,277],
[249,262,292,275,287,0,259,304,250,282],
[259,289,294,257,277,291,0,274,250,291],
[240,243,291,239,265,246,276,0,259,269],
[280,259,309,278,274,300,300,291,0,311],
[227,257,268,232,273,268,259,281,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,292,292,288,304,286,308,251],
[273,0,290,289,284,293,308,284,305,299],
[268,260,0,276,290,293,284,278,303,281],
[258,261,274,0,280,276,280,270,300,259],
[258,266,260,270,0,267,289,264,311,272],
[262,257,257,274,283,0,284,271,303,260],
[246,242,266,270,261,266,0,250,280,251],
[264,266,272,280,286,279,300,0,305,261],
[242,245,247,250,239,247,270,245,0,247],
[299,251,269,291,278,290,299,289,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,275,300,262,281,258,328,278,244],
[304,0,298,272,298,252,298,323,303,271],
[275,252,0,267,277,256,226,321,287,237],
[250,278,283,0,267,282,273,296,269,284],
[288,252,273,283,0,277,218,301,273,216],
[269,298,294,268,273,0,254,342,301,296],
[292,252,324,277,332,296,0,290,288,245],
[222,227,229,254,249,208,260,0,251,249],
[272,247,263,281,277,249,262,299,0,249],
[306,279,313,266,334,254,305,301,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,245,263,254,261,253,243,244,233],
[280,0,248,282,242,262,268,236,278,230],
[305,302,0,293,270,312,300,295,284,267],
[287,268,257,0,236,264,275,260,256,258],
[296,308,280,314,0,259,275,283,281,274],
[289,288,238,286,291,0,256,255,272,259],
[297,282,250,275,275,294,0,276,266,287],
[307,314,255,290,267,295,274,0,296,268],
[306,272,266,294,269,278,284,254,0,264],
[317,320,283,292,276,291,263,282,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,281,267,257,261,256,268,289],
[276,0,280,293,273,273,279,282,299,299],
[280,270,0,296,288,256,289,265,284,290],
[269,257,254,0,236,237,263,265,262,284],
[283,277,262,314,0,283,263,272,269,294],
[293,277,294,313,267,0,298,287,282,316],
[289,271,261,287,287,252,0,270,304,287],
[294,268,285,285,278,263,280,0,290,292],
[282,251,266,288,281,268,246,260,0,296],
[261,251,260,266,256,234,263,258,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,242,278,286,293,285,308,272,296],
[270,0,275,260,261,277,254,289,298,313],
[308,275,0,285,278,285,267,290,267,282],
[272,290,265,0,273,268,295,271,291,282],
[264,289,272,277,0,292,235,260,272,279],
[257,273,265,282,258,0,271,257,280,271],
[265,296,283,255,315,279,0,270,300,295],
[242,261,260,279,290,293,280,0,285,288],
[278,252,283,259,278,270,250,265,0,297],
[254,237,268,268,271,279,255,262,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,297,319,278,297,350,261,269,276],
[274,0,248,276,317,307,303,215,288,261],
[253,302,0,313,307,241,280,243,298,278],
[231,274,237,0,302,245,280,258,243,208],
[272,233,243,248,0,209,278,249,304,216],
[253,243,309,305,341,0,332,263,271,279],
[200,247,270,270,272,218,0,217,247,226],
[289,335,307,292,301,287,333,0,317,248],
[281,262,252,307,246,279,303,233,0,260],
[274,289,272,342,334,271,324,302,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,282,283,291,290,275,289,295],
[271,0,265,269,310,283,263,270,283,264],
[272,285,0,273,301,282,280,274,274,286],
[268,281,277,0,309,301,309,297,303,297],
[267,240,249,241,0,274,265,276,281,262],
[259,267,268,249,276,0,271,272,270,267],
[260,287,270,241,285,279,0,274,264,267],
[275,280,276,253,274,278,276,0,263,279],
[261,267,276,247,269,280,286,287,0,266],
[255,286,264,253,288,283,283,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,285,308,264,283,265,322,287,338],
[276,0,247,290,246,271,211,301,273,314],
[265,303,0,285,302,278,325,308,325,311],
[242,260,265,0,210,218,264,255,270,280],
[286,304,248,340,0,249,278,337,283,323],
[267,279,272,332,301,0,286,321,292,318],
[285,339,225,286,272,264,0,314,302,333],
[228,249,242,295,213,229,236,0,280,297],
[263,277,225,280,267,258,248,270,0,307],
[212,236,239,270,227,232,217,253,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,283,275,229,305,257,248,258],
[280,0,262,278,293,259,287,264,267,279],
[302,288,0,309,282,294,330,273,318,300],
[267,272,241,0,248,259,293,274,251,275],
[275,257,268,302,0,278,304,258,254,268],
[321,291,256,291,272,0,305,281,273,288],
[245,263,220,257,246,245,0,261,235,254],
[293,286,277,276,292,269,289,0,283,287],
[302,283,232,299,296,277,315,267,0,269],
[292,271,250,275,282,262,296,263,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,275,292,295,272,278,313,279,267],
[318,0,273,295,295,268,260,327,269,266],
[275,277,0,323,299,294,313,349,292,290],
[258,255,227,0,277,246,255,285,262,269],
[255,255,251,273,0,263,249,279,273,261],
[278,282,256,304,287,0,285,319,287,262],
[272,290,237,295,301,265,0,299,278,265],
[237,223,201,265,271,231,251,0,242,211],
[271,281,258,288,277,263,272,308,0,270],
[283,284,260,281,289,288,285,339,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,249,298,236,300,234,252,277],
[285,0,301,279,328,283,308,282,285,265],
[269,249,0,267,302,244,286,248,269,284],
[301,271,283,0,319,259,299,259,273,295],
[252,222,248,231,0,241,275,227,240,246],
[314,267,306,291,309,0,301,271,272,309],
[250,242,264,251,275,249,0,233,247,273],
[316,268,302,291,323,279,317,0,304,297],
[298,265,281,277,310,278,303,246,0,279],
[273,285,266,255,304,241,277,253,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,278,260,281,290,285,280,285,266],
[282,0,284,294,287,296,285,258,284,287],
[272,266,0,283,268,279,270,284,280,297],
[290,256,267,0,258,276,249,264,288,276],
[269,263,282,292,0,270,276,261,280,283],
[260,254,271,274,280,0,280,274,270,266],
[265,265,280,301,274,270,0,267,280,276],
[270,292,266,286,289,276,283,0,293,283],
[265,266,270,262,270,280,270,257,0,284],
[284,263,253,274,267,284,274,267,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,285,234,283,292,262,246,244,250],
[326,0,273,339,325,381,262,322,309,334],
[265,277,0,299,285,326,265,286,298,253],
[316,211,251,0,264,291,239,264,253,229],
[267,225,265,286,0,315,252,238,251,222],
[258,169,224,259,235,0,262,297,233,243],
[288,288,285,311,298,288,0,283,284,262],
[304,228,264,286,312,253,267,0,271,255],
[306,241,252,297,299,317,266,279,0,232],
[300,216,297,321,328,307,288,295,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,277,221,231,244,311,234,227,260],
[251,0,279,258,261,242,340,301,260,313],
[273,271,0,188,229,229,300,248,192,246],
[329,292,362,0,290,269,320,289,303,320],
[319,289,321,260,0,300,373,302,347,387],
[306,308,321,281,250,0,288,289,265,312],
[239,210,250,230,177,262,0,178,206,234],
[316,249,302,261,248,261,372,0,301,290],
[323,290,358,247,203,285,344,249,0,293],
[290,237,304,230,163,238,316,260,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,258,265,292,271,244,296,277,306],
[261,0,281,286,285,296,260,277,283,288],
[292,269,0,301,307,283,277,293,293,313],
[285,264,249,0,262,246,224,274,288,270],
[258,265,243,288,0,269,215,286,284,270],
[279,254,267,304,281,0,260,308,293,306],
[306,290,273,326,335,290,0,297,316,318],
[254,273,257,276,264,242,253,0,285,279],
[273,267,257,262,266,257,234,265,0,298],
[244,262,237,280,280,244,232,271,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,271,275,269,258,286,277,259,255],
[297,0,275,274,283,279,299,286,275,267],
[279,275,0,288,273,281,289,290,272,263],
[275,276,262,0,275,263,286,283,265,269],
[281,267,277,275,0,279,293,292,268,279],
[292,271,269,287,271,0,298,288,268,275],
[264,251,261,264,257,252,0,272,251,254],
[273,264,260,267,258,262,278,0,254,273],
[291,275,278,285,282,282,299,296,0,291],
[295,283,287,281,271,275,296,277,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,288,282,301,271,277,268,263,276],
[281,0,301,285,295,270,292,285,288,272],
[262,249,0,262,295,244,302,284,264,244],
[268,265,288,0,285,258,274,264,268,269],
[249,255,255,265,0,250,274,258,248,249],
[279,280,306,292,300,0,303,297,277,258],
[273,258,248,276,276,247,0,283,270,263],
[282,265,266,286,292,253,267,0,284,264],
[287,262,286,282,302,273,280,266,0,267],
[274,278,306,281,301,292,287,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,260,269,265,266,256,276,274,269],
[278,0,281,278,286,284,277,295,272,285],
[290,269,0,266,259,284,272,273,263,276],
[281,272,284,0,279,273,268,280,275,269],
[285,264,291,271,0,285,277,299,291,275],
[284,266,266,277,265,0,253,277,273,279],
[294,273,278,282,273,297,0,280,285,276],
[274,255,277,270,251,273,270,0,275,279],
[276,278,287,275,259,277,265,275,0,281],
[281,265,274,281,275,271,274,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,302,261,388,341,301,260,281,199],
[184,0,323,267,345,341,281,300,203,200],
[248,227,0,226,306,325,222,263,183,185],
[289,283,324,0,344,343,303,322,303,221],
[162,205,244,206,0,200,281,201,205,161],
[209,209,225,207,350,0,286,204,187,184],
[249,269,328,247,269,264,0,185,165,142],
[290,250,287,228,349,346,365,0,224,283],
[269,347,367,247,345,363,385,326,0,266],
[351,350,365,329,389,366,408,267,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,278,281,312,276,299,297,274,280],
[294,0,306,299,318,272,281,298,276,305],
[272,244,0,282,290,240,291,280,256,271],
[269,251,268,0,291,228,275,285,259,256],
[238,232,260,259,0,239,246,250,225,277],
[274,278,310,322,311,0,289,269,279,305],
[251,269,259,275,304,261,0,285,245,243],
[253,252,270,265,300,281,265,0,272,291],
[276,274,294,291,325,271,305,278,0,281],
[270,245,279,294,273,245,307,259,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,275,280,289,277,270,287,276,268],
[260,0,268,278,258,272,262,276,300,308],
[275,282,0,248,266,268,251,259,260,289],
[270,272,302,0,293,265,283,258,282,282],
[261,292,284,257,0,264,256,262,262,272],
[273,278,282,285,286,0,251,300,258,268],
[280,288,299,267,294,299,0,312,261,292],
[263,274,291,292,288,250,238,0,248,296],
[274,250,290,268,288,292,289,302,0,285],
[282,242,261,268,278,282,258,254,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,273,276,251,251,275,273,245],
[280,0,275,296,277,289,256,303,264,275],
[285,275,0,276,251,273,267,293,273,254],
[277,254,274,0,234,264,253,286,261,270],
[274,273,299,316,0,284,286,322,279,268],
[299,261,277,286,266,0,257,285,283,253],
[299,294,283,297,264,293,0,304,293,282],
[275,247,257,264,228,265,246,0,254,254],
[277,286,277,289,271,267,257,296,0,269],
[305,275,296,280,282,297,268,296,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,267,250,258,265,273,250,264,278],
[299,0,282,281,276,296,288,262,284,297],
[283,268,0,261,261,277,275,273,262,285],
[300,269,289,0,267,283,291,279,275,301],
[292,274,289,283,0,295,298,277,291,306],
[285,254,273,267,255,0,279,267,270,293],
[277,262,275,259,252,271,0,272,265,292],
[300,288,277,271,273,283,278,0,285,302],
[286,266,288,275,259,280,285,265,0,286],
[272,253,265,249,244,257,258,248,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,281,280,302,331,240,281,269,306],
[309,0,292,314,281,330,278,272,313,269],
[269,258,0,255,246,278,288,251,288,315],
[270,236,295,0,299,275,267,220,245,246],
[248,269,304,251,0,306,287,256,310,300],
[219,220,272,275,244,0,211,227,266,239],
[310,272,262,283,263,339,0,263,270,268],
[269,278,299,330,294,323,287,0,309,276],
[281,237,262,305,240,284,280,241,0,288],
[244,281,235,304,250,311,282,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,278,260,256,265,252,279,275],
[278,0,248,277,268,285,259,286,298,246],
[265,302,0,271,261,287,301,266,281,260],
[272,273,279,0,237,243,251,255,273,222],
[290,282,289,313,0,286,283,306,334,258],
[294,265,263,307,264,0,259,285,312,282],
[285,291,249,299,267,291,0,274,306,269],
[298,264,284,295,244,265,276,0,293,259],
[271,252,269,277,216,238,244,257,0,258],
[275,304,290,328,292,268,281,291,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,358,293,360,264,358,313,278,343],
[268,0,330,249,281,250,312,298,279,283],
[192,220,0,236,280,296,250,238,215,281],
[257,301,314,0,266,269,314,332,265,317],
[190,269,270,284,0,286,298,253,312,331],
[286,300,254,281,264,0,281,301,263,301],
[192,238,300,236,252,269,0,204,247,301],
[237,252,312,218,297,249,346,0,212,282],
[272,271,335,285,238,287,303,338,0,333],
[207,267,269,233,219,249,249,268,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,128,171,128,128,129,128,171,127,86],
[422,0,340,170,172,341,129,298,211,255],
[379,210,0,171,171,169,85,213,168,254],
[422,380,379,0,256,296,169,379,211,296],
[422,378,379,294,0,295,294,336,294,251],
[421,209,381,254,255,0,84,381,211,212],
[422,421,465,381,256,466,0,507,337,381],
[379,252,337,171,214,169,43,0,84,212],
[423,339,382,339,256,339,213,466,0,338],
[464,295,296,254,299,338,169,338,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,354,264,320,317,337,310,319,283],
[245,0,300,276,299,296,291,272,298,220],
[196,250,0,197,249,228,269,249,250,200],
[286,274,353,0,285,314,329,288,298,261],
[230,251,301,265,0,269,272,270,285,239],
[233,254,322,236,281,0,277,273,257,232],
[213,259,281,221,278,273,0,234,268,240],
[240,278,301,262,280,277,316,0,311,252],
[231,252,300,252,265,293,282,239,0,203],
[267,330,350,289,311,318,310,298,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,284,275,262,272,280,272,270],
[282,0,262,258,276,259,279,286,269,272],
[275,288,0,274,290,265,280,286,292,297],
[266,292,276,0,279,279,267,272,278,256],
[275,274,260,271,0,270,266,273,268,277],
[288,291,285,271,280,0,275,292,300,281],
[278,271,270,283,284,275,0,280,278,297],
[270,264,264,278,277,258,270,0,289,285],
[278,281,258,272,282,250,272,261,0,258],
[280,278,253,294,273,269,253,265,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,255,289,277,296,255,260,287],
[275,0,278,271,265,315,281,261,262,252],
[282,272,0,259,263,278,269,257,256,302],
[295,279,291,0,292,292,297,284,270,277],
[261,285,287,258,0,283,291,271,239,279],
[273,235,272,258,267,0,272,267,252,268],
[254,269,281,253,259,278,0,264,256,252],
[295,289,293,266,279,283,286,0,284,300],
[290,288,294,280,311,298,294,266,0,293],
[263,298,248,273,271,282,298,250,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,279,291,270,270,264,272,268],
[281,0,281,273,286,266,279,275,269,266],
[278,269,0,294,279,273,277,280,258,259],
[271,277,256,0,276,273,257,254,260,271],
[259,264,271,274,0,286,269,264,250,248],
[280,284,277,277,264,0,266,264,262,248],
[280,271,273,293,281,284,0,264,275,272],
[286,275,270,296,286,286,286,0,264,285],
[278,281,292,290,300,288,275,286,0,273],
[282,284,291,279,302,302,278,265,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,286,280,227,254,247,246,259,280],
[292,0,295,294,267,282,253,231,258,259],
[264,255,0,271,270,278,267,274,246,280],
[270,256,279,0,262,263,278,267,257,289],
[323,283,280,288,0,276,294,291,280,273],
[296,268,272,287,274,0,277,267,267,269],
[303,297,283,272,256,273,0,264,269,294],
[304,319,276,283,259,283,286,0,266,303],
[291,292,304,293,270,283,281,284,0,279],
[270,291,270,261,277,281,256,247,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,273,278,276,297,288,262,274,269],
[278,0,271,272,263,313,272,273,287,267],
[277,279,0,285,270,309,321,262,286,270],
[272,278,265,0,261,316,268,233,263,293],
[274,287,280,289,0,283,297,274,312,300],
[253,237,241,234,267,0,241,249,284,262],
[262,278,229,282,253,309,0,290,305,274],
[288,277,288,317,276,301,260,0,289,280],
[276,263,264,287,238,266,245,261,0,249],
[281,283,280,257,250,288,276,270,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,284,278,280,273,268,292,278,281],
[282,0,264,260,273,278,287,296,275,275],
[266,286,0,282,279,271,282,303,274,280],
[272,290,268,0,269,292,278,280,286,276],
[270,277,271,281,0,277,284,285,286,280],
[277,272,279,258,273,0,283,284,291,278],
[282,263,268,272,266,267,0,280,265,277],
[258,254,247,270,265,266,270,0,275,267],
[272,275,276,264,264,259,285,275,0,278],
[269,275,270,274,270,272,273,283,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,246,231,275,261,227,249,257,247],
[256,0,197,271,283,216,242,242,260,204],
[304,353,0,289,338,239,305,296,297,229],
[319,279,261,0,221,233,219,249,280,234],
[275,267,212,329,0,274,308,247,278,207],
[289,334,311,317,276,0,302,260,252,332],
[323,308,245,331,242,248,0,278,322,252],
[301,308,254,301,303,290,272,0,251,249],
[293,290,253,270,272,298,228,299,0,286],
[303,346,321,316,343,218,298,301,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,298,291,296,293,309,311,289,292],
[279,0,273,270,279,265,306,288,272,270],
[252,277,0,295,307,301,316,312,287,313],
[259,280,255,0,268,283,286,285,276,268],
[254,271,243,282,0,290,302,272,280,283],
[257,285,249,267,260,0,266,260,283,264],
[241,244,234,264,248,284,0,264,227,252],
[239,262,238,265,278,290,286,0,272,252],
[261,278,263,274,270,267,323,278,0,263],
[258,280,237,282,267,286,298,298,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,287,294,343,309,293,245,233,222],
[327,0,319,312,305,318,304,288,301,256],
[263,231,0,291,290,243,305,241,208,242],
[256,238,259,0,227,210,257,236,236,234],
[207,245,260,323,0,234,235,243,244,254],
[241,232,307,340,316,0,327,282,257,249],
[257,246,245,293,315,223,0,232,207,264],
[305,262,309,314,307,268,318,0,294,220],
[317,249,342,314,306,293,343,256,0,287],
[328,294,308,316,296,301,286,330,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,229,251,102,228,214,255,187,163],
[322,0,293,379,293,290,211,339,269,293],
[321,257,0,362,189,322,278,275,251,251],
[299,171,188,0,146,270,195,189,269,210],
[448,257,361,404,0,404,260,317,295,297],
[322,260,228,280,146,0,234,256,272,187],
[336,339,272,355,290,316,0,315,334,273],
[295,211,275,361,233,294,235,0,272,231],
[363,281,299,281,255,278,216,278,0,296],
[387,257,299,340,253,363,277,319,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,275,287,295,285,290,290,292,306],
[257,0,273,262,264,264,257,257,276,294],
[275,277,0,272,274,285,285,279,286,300],
[263,288,278,0,287,268,292,287,284,304],
[255,286,276,263,0,281,276,265,274,293],
[265,286,265,282,269,0,281,283,282,304],
[260,293,265,258,274,269,0,283,295,314],
[260,293,271,263,285,267,267,0,275,290],
[258,274,264,266,276,268,255,275,0,276],
[244,256,250,246,257,246,236,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,293,265,252,253,268,257,255,261],
[254,0,260,256,248,258,255,248,250,239],
[257,290,0,249,251,263,273,262,271,255],
[285,294,301,0,273,249,269,267,277,257],
[298,302,299,277,0,272,284,294,287,270],
[297,292,287,301,278,0,287,267,274,293],
[282,295,277,281,266,263,0,273,270,268],
[293,302,288,283,256,283,277,0,293,271],
[295,300,279,273,263,276,280,257,0,262],
[289,311,295,293,280,257,282,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,275,281,279,251,284,300,277],
[274,0,271,270,274,290,272,254,281,277],
[279,279,0,290,280,282,272,254,281,275],
[275,280,260,0,268,278,248,263,279,251],
[269,276,270,282,0,278,267,260,273,266],
[271,260,268,272,272,0,264,263,272,266],
[299,278,278,302,283,286,0,256,291,270],
[266,296,296,287,290,287,294,0,279,275],
[250,269,269,271,277,278,259,271,0,267],
[273,273,275,299,284,284,280,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,259,277,281,280,299,291,294,256],
[276,0,279,260,277,265,289,278,286,281],
[291,271,0,242,264,263,272,279,276,259],
[273,290,308,0,286,296,287,320,311,288],
[269,273,286,264,0,273,279,302,287,272],
[270,285,287,254,277,0,294,303,289,262],
[251,261,278,263,271,256,0,291,285,249],
[259,272,271,230,248,247,259,0,287,223],
[256,264,274,239,263,261,265,263,0,256],
[294,269,291,262,278,288,301,327,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,296,279,288,277,287,272,277,297],
[293,0,285,282,284,283,290,275,269,296],
[254,265,0,272,275,258,264,265,245,276],
[271,268,278,0,281,253,289,290,267,304],
[262,266,275,269,0,263,280,275,261,275],
[273,267,292,297,287,0,289,295,288,326],
[263,260,286,261,270,261,0,281,256,287],
[278,275,285,260,275,255,269,0,266,288],
[273,281,305,283,289,262,294,284,0,302],
[253,254,274,246,275,224,263,262,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,278,275,258,269,290,267,260],
[278,0,289,281,266,285,281,284,263,263],
[266,261,0,267,274,255,257,280,246,252],
[272,269,283,0,290,273,284,277,274,269],
[275,284,276,260,0,256,258,295,256,250],
[292,265,295,277,294,0,281,289,276,281],
[281,269,293,266,292,269,0,270,257,255],
[260,266,270,273,255,261,280,0,271,261],
[283,287,304,276,294,274,293,279,0,274],
[290,287,298,281,300,269,295,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,273,280,296,308,313,274,286],
[277,0,291,287,270,276,282,287,273,277],
[261,259,0,280,258,297,264,283,254,257],
[277,263,270,0,261,284,281,272,264,267],
[270,280,292,289,0,290,282,296,279,288],
[254,274,253,266,260,0,290,280,261,262],
[242,268,286,269,268,260,0,276,261,259],
[237,263,267,278,254,270,274,0,249,261],
[276,277,296,286,271,289,289,301,0,287],
[264,273,293,283,262,288,291,289,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,273,275,273,261,290,271,256],
[282,0,276,289,265,284,276,295,264,268],
[269,274,0,278,277,281,263,288,263,263],
[277,261,272,0,267,275,267,279,264,272],
[275,285,273,283,0,271,264,286,250,247],
[277,266,269,275,279,0,262,286,262,268],
[289,274,287,283,286,288,0,292,275,272],
[260,255,262,271,264,264,258,0,270,239],
[279,286,287,286,300,288,275,280,0,275],
[294,282,287,278,303,282,278,311,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,271,295,280,283,293,269,272],
[258,0,258,276,290,293,266,270,268,261],
[278,292,0,263,274,275,283,280,292,267],
[279,274,287,0,297,277,295,285,272,288],
[255,260,276,253,0,275,266,276,266,256],
[270,257,275,273,275,0,270,291,283,270],
[267,284,267,255,284,280,0,292,259,269],
[257,280,270,265,274,259,258,0,263,268],
[281,282,258,278,284,267,291,287,0,269],
[278,289,283,262,294,280,281,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,263,261,281,285,279,264,273],
[288,0,283,271,280,303,286,271,273,280],
[274,267,0,293,278,280,287,267,288,272],
[287,279,257,0,286,279,282,259,277,267],
[289,270,272,264,0,290,276,273,281,280],
[269,247,270,271,260,0,284,261,247,266],
[265,264,263,268,274,266,0,269,278,266],
[271,279,283,291,277,289,281,0,274,288],
[286,277,262,273,269,303,272,276,0,278],
[277,270,278,283,270,284,284,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,252,316,276,249,195,210,351],
[275,0,278,255,317,297,235,217,254,355],
[297,272,0,231,316,293,291,216,232,331],
[298,295,319,0,358,338,311,256,293,355],
[234,233,234,192,0,274,212,189,213,267],
[274,253,257,212,276,0,252,235,251,329],
[301,315,259,239,338,298,0,277,236,315],
[355,333,334,294,361,315,273,0,313,335],
[340,296,318,257,337,299,314,237,0,353],
[199,195,219,195,283,221,235,215,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,214,250,212,249,230,225,277,227],
[279,0,172,198,225,253,216,216,238,227],
[336,378,0,283,273,342,299,284,304,291],
[300,352,267,0,280,309,243,276,325,273],
[338,325,277,270,0,281,239,267,276,243],
[301,297,208,241,269,0,227,249,251,211],
[320,334,251,307,311,323,0,275,303,295],
[325,334,266,274,283,301,275,0,290,278],
[273,312,246,225,274,299,247,260,0,253],
[323,323,259,277,307,339,255,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,283,252,266,268,256,251,280,260],
[287,0,288,281,292,281,277,266,278,268],
[267,262,0,255,249,257,239,251,272,265],
[298,269,295,0,286,264,254,272,284,284],
[284,258,301,264,0,252,249,249,264,265],
[282,269,293,286,298,0,274,271,272,260],
[294,273,311,296,301,276,0,270,290,281],
[299,284,299,278,301,279,280,0,301,274],
[270,272,278,266,286,278,260,249,0,264],
[290,282,285,266,285,290,269,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,255,329,241,257,274,328,314,269],
[318,0,311,354,283,269,337,343,309,320],
[295,239,0,312,291,324,328,295,315,284],
[221,196,238,0,193,253,225,283,284,283],
[309,267,259,357,0,298,369,357,317,371],
[293,281,226,297,252,0,312,356,311,322],
[276,213,222,325,181,238,0,311,250,322],
[222,207,255,267,193,194,239,0,238,238],
[236,241,235,266,233,239,300,312,0,268],
[281,230,266,267,179,228,228,312,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,280,262,279,277,278,297,276],
[260,0,286,262,282,272,278,254,296,273],
[267,264,0,263,264,292,295,285,278,274],
[270,288,287,0,282,273,276,299,269,274],
[288,268,286,268,0,287,271,268,275,283],
[271,278,258,277,263,0,264,270,276,268],
[273,272,255,274,279,286,0,254,276,268],
[272,296,265,251,282,280,296,0,279,253],
[253,254,272,281,275,274,274,271,0,265],
[274,277,276,276,267,282,282,297,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,285,308,284,264,264,279,269,276],
[299,0,288,287,295,280,279,255,288,285],
[265,262,0,273,268,262,257,274,250,279],
[242,263,277,0,267,264,277,248,267,263],
[266,255,282,283,0,258,278,286,260,258],
[286,270,288,286,292,0,272,283,291,261],
[286,271,293,273,272,278,0,272,274,289],
[271,295,276,302,264,267,278,0,277,287],
[281,262,300,283,290,259,276,273,0,291],
[274,265,271,287,292,289,261,263,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,328,360,359,296,283,380,265,376],
[255,0,296,297,267,364,268,305,298,267],
[222,254,0,299,279,237,238,305,173,269],
[190,253,251,0,207,238,189,225,192,254],
[191,283,271,343,0,281,268,317,235,281],
[254,186,313,312,269,0,282,271,269,284],
[267,282,312,361,282,268,0,286,266,285],
[170,245,245,325,233,279,264,0,264,264],
[285,252,377,358,315,281,284,286,0,283],
[174,283,281,296,269,266,265,286,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,305,288,271,280,285,291,260],
[270,0,280,267,273,283,294,283,265,285],
[275,270,0,290,281,280,278,282,276,279],
[245,283,260,0,254,264,268,273,250,264],
[262,277,269,296,0,284,279,280,269,271],
[279,267,270,286,266,0,282,285,273,286],
[270,256,272,282,271,268,0,274,273,255],
[265,267,268,277,270,265,276,0,294,267],
[259,285,274,300,281,277,277,256,0,290],
[290,265,271,286,279,264,295,283,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,266,250,243,254,259,278,287,273],
[309,0,290,268,283,268,308,295,311,290],
[284,260,0,249,237,245,276,283,289,260],
[300,282,301,0,287,260,290,316,308,304],
[307,267,313,263,0,287,300,294,311,288],
[296,282,305,290,263,0,289,297,308,309],
[291,242,274,260,250,261,0,288,282,279],
[272,255,267,234,256,253,262,0,269,247],
[263,239,261,242,239,242,268,281,0,271],
[277,260,290,246,262,241,271,303,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,271,320,271,306,276,271,296,316],
[219,0,221,272,252,248,250,225,242,239],
[279,329,0,311,278,307,292,274,290,285],
[230,278,239,0,274,262,235,237,265,248],
[279,298,272,276,0,274,272,262,290,256],
[244,302,243,288,276,0,278,233,245,292],
[274,300,258,315,278,272,0,280,292,277],
[279,325,276,313,288,317,270,0,300,311],
[254,308,260,285,260,305,258,250,0,267],
[234,311,265,302,294,258,273,239,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,267,259,286,248,250,283,272,250],
[304,0,282,297,321,270,268,288,294,286],
[283,268,0,317,319,275,295,299,289,270],
[291,253,233,0,320,251,259,272,278,255],
[264,229,231,230,0,254,246,255,280,240],
[302,280,275,299,296,0,272,290,300,298],
[300,282,255,291,304,278,0,293,294,270],
[267,262,251,278,295,260,257,0,302,253],
[278,256,261,272,270,250,256,248,0,246],
[300,264,280,295,310,252,280,297,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,276,273,295,282,260,288,263],
[288,0,278,277,281,300,302,282,264,292],
[278,272,0,268,276,306,295,261,275,277],
[274,273,282,0,267,293,289,283,269,272],
[277,269,274,283,0,289,299,277,292,278],
[255,250,244,257,261,0,269,263,271,266],
[268,248,255,261,251,281,0,254,275,257],
[290,268,289,267,273,287,296,0,306,285],
[262,286,275,281,258,279,275,244,0,272],
[287,258,273,278,272,284,293,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,271,273,276,281,265,261,295],
[282,0,281,280,280,299,273,262,278,277],
[280,269,0,284,273,270,286,283,267,294],
[279,270,266,0,257,271,278,271,265,288],
[277,270,277,293,0,290,272,253,259,278],
[274,251,280,279,260,0,276,257,274,287],
[269,277,264,272,278,274,0,254,266,286],
[285,288,267,279,297,293,296,0,274,299],
[289,272,283,285,291,276,284,276,0,284],
[255,273,256,262,272,263,264,251,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,319,277,305,279,257,298,271,311],
[250,0,235,252,299,285,240,221,240,273],
[231,315,0,200,291,284,274,278,264,254],
[273,298,350,0,315,331,279,256,299,292],
[245,251,259,235,0,269,265,266,282,263],
[271,265,266,219,281,0,234,224,227,296],
[293,310,276,271,285,316,0,278,297,289],
[252,329,272,294,284,326,272,0,247,266],
[279,310,286,251,268,323,253,303,0,252],
[239,277,296,258,287,254,261,284,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,184,368,275,181,91,91,277,276,458],
[366,0,460,367,366,364,367,184,366,458],
[182,90,0,183,273,273,181,90,182,90],
[275,183,367,0,274,90,181,276,275,274],
[369,184,277,276,0,183,182,277,369,277],
[459,186,277,460,367,0,368,277,278,367],
[459,183,369,369,368,182,0,367,368,367],
[273,366,460,274,273,273,183,0,182,365],
[274,184,368,275,181,272,182,368,0,365],
[92,92,460,276,273,183,183,185,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,317,308,287,269,293,254,275,269],
[292,0,288,308,310,283,320,246,309,304],
[233,262,0,292,258,226,288,257,280,262],
[242,242,258,0,260,265,282,262,267,267],
[263,240,292,290,0,255,309,282,285,276],
[281,267,324,285,295,0,295,304,277,269],
[257,230,262,268,241,255,0,264,254,272],
[296,304,293,288,268,246,286,0,273,274],
[275,241,270,283,265,273,296,277,0,282],
[281,246,288,283,274,281,278,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,237,271,258,267,264,269,269],
[269,0,293,246,288,274,261,272,248,262],
[263,257,0,247,254,260,252,275,259,279],
[313,304,303,0,284,294,285,276,273,281],
[279,262,296,266,0,262,250,288,272,274],
[292,276,290,256,288,0,262,283,259,269],
[283,289,298,265,300,288,0,275,284,295],
[286,278,275,274,262,267,275,0,242,267],
[281,302,291,277,278,291,266,308,0,286],
[281,288,271,269,276,281,255,283,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,290,295,296,256,279,299,270,279],
[285,0,303,276,310,271,279,286,293,267],
[260,247,0,280,273,271,282,267,255,278],
[255,274,270,0,275,281,286,252,290,264],
[254,240,277,275,0,249,274,289,288,282],
[294,279,279,269,301,0,288,280,279,279],
[271,271,268,264,276,262,0,287,261,261],
[251,264,283,298,261,270,263,0,257,282],
[280,257,295,260,262,271,289,293,0,279],
[271,283,272,286,268,271,289,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,275,286,294,242,291,244,261,291],
[299,0,267,288,291,279,284,267,269,290],
[275,283,0,290,270,269,288,280,251,265],
[264,262,260,0,269,231,254,237,233,301],
[256,259,280,281,0,254,291,253,227,267],
[308,271,281,319,296,0,317,264,278,288],
[259,266,262,296,259,233,0,241,256,279],
[306,283,270,313,297,286,309,0,260,316],
[289,281,299,317,323,272,294,290,0,297],
[259,260,285,249,283,262,271,234,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,250,279,244,266,277,282,270,239],
[272,0,254,273,244,250,271,259,267,251],
[300,296,0,286,289,286,289,281,280,271],
[271,277,264,0,242,265,266,270,261,274],
[306,306,261,308,0,288,304,283,264,276],
[284,300,264,285,262,0,261,263,251,264],
[273,279,261,284,246,289,0,270,261,253],
[268,291,269,280,267,287,280,0,263,265],
[280,283,270,289,286,299,289,287,0,281],
[311,299,279,276,274,286,297,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,305,269,294,268,241,275,279],
[277,0,278,281,246,287,245,248,249,304],
[287,272,0,281,237,294,259,258,276,305],
[245,269,269,0,254,266,235,254,273,290],
[281,304,313,296,0,288,275,301,279,309],
[256,263,256,284,262,0,257,294,258,281],
[282,305,291,315,275,293,0,286,301,313],
[309,302,292,296,249,256,264,0,277,322],
[275,301,274,277,271,292,249,273,0,289],
[271,246,245,260,241,269,237,228,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,293,290,298,301,286,290,268,277],
[263,0,253,269,271,256,253,253,247,252],
[257,297,0,301,284,293,291,276,283,268],
[260,281,249,0,260,264,275,268,248,254],
[252,279,266,290,0,266,286,276,262,264],
[249,294,257,286,284,0,283,276,279,286],
[264,297,259,275,264,267,0,260,249,265],
[260,297,274,282,274,274,290,0,286,254],
[282,303,267,302,288,271,301,264,0,277],
[273,298,282,296,286,264,285,296,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,248,276,265,308,226,337,310,284],
[201,0,241,238,168,240,141,267,283,227],
[302,309,0,250,240,256,284,284,316,273],
[274,312,300,0,283,270,228,309,260,314],
[285,382,310,267,0,309,199,270,327,272],
[242,310,294,280,241,0,228,266,311,228],
[324,409,266,322,351,322,0,325,352,242],
[213,283,266,241,280,284,225,0,287,229],
[240,267,234,290,223,239,198,263,0,255],
[266,323,277,236,278,322,308,321,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,302,266,291,285,270,288,276],
[270,0,275,285,258,304,258,291,268,272],
[256,275,0,262,258,267,266,282,269,273],
[248,265,288,0,265,259,259,267,258,256],
[284,292,292,285,0,306,282,278,273,298],
[259,246,283,291,244,0,253,272,261,283],
[265,292,284,291,268,297,0,294,274,295],
[280,259,268,283,272,278,256,0,277,266],
[262,282,281,292,277,289,276,273,0,289],
[274,278,277,294,252,267,255,284,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,320,286,269,299,281,308,293,288],
[240,0,283,290,291,278,269,279,303,276],
[230,267,0,249,241,239,244,275,262,254],
[264,260,301,0,242,265,264,288,285,272],
[281,259,309,308,0,289,277,307,277,282],
[251,272,311,285,261,0,280,297,276,292],
[269,281,306,286,273,270,0,296,289,276],
[242,271,275,262,243,253,254,0,259,287],
[257,247,288,265,273,274,261,291,0,264],
[262,274,296,278,268,258,274,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,302,300,272,314,291,295,295,285],
[241,0,292,273,260,280,264,273,271,250],
[248,258,0,278,250,291,273,256,260,265],
[250,277,272,0,258,275,272,288,261,262],
[278,290,300,292,0,290,287,281,266,268],
[236,270,259,275,260,0,261,271,247,250],
[259,286,277,278,263,289,0,281,271,271],
[255,277,294,262,269,279,269,0,259,268],
[255,279,290,289,284,303,279,291,0,294],
[265,300,285,288,282,300,279,282,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,365,278,256,316,300,258,256,256,253],
[185,0,213,272,250,296,207,166,192,251],
[272,337,0,299,294,274,272,233,219,274],
[294,278,251,0,270,278,249,190,280,252],
[234,300,256,280,0,277,276,214,179,297],
[250,254,276,272,273,0,208,188,237,230],
[292,343,278,301,274,342,0,298,258,231],
[294,384,317,360,336,362,252,0,298,314],
[294,358,331,270,371,313,292,252,0,331],
[297,299,276,298,253,320,319,236,219,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,268,250,251,258,282,275,245,264],
[295,0,283,290,273,297,280,285,279,300],
[282,267,0,281,282,278,279,281,262,269],
[300,260,269,0,281,276,288,264,270,274],
[299,277,268,269,0,262,295,273,266,277],
[292,253,272,274,288,0,295,268,277,277],
[268,270,271,262,255,255,0,265,246,268],
[275,265,269,286,277,282,285,0,273,287],
[305,271,288,280,284,273,304,277,0,287],
[286,250,281,276,273,273,282,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,301,302,293,282,308,275,298,323],
[261,0,273,272,242,281,293,264,280,303],
[249,277,0,268,233,258,312,269,274,309],
[248,278,282,0,237,271,269,266,283,312],
[257,308,317,313,0,262,319,277,316,311],
[268,269,292,279,288,0,278,264,294,304],
[242,257,238,281,231,272,0,248,275,284],
[275,286,281,284,273,286,302,0,291,310],
[252,270,276,267,234,256,275,259,0,282],
[227,247,241,238,239,246,266,240,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,281,290,302,269,299,298,270,277],
[264,0,264,257,278,253,277,255,265,272],
[269,286,0,275,285,268,302,279,272,282],
[260,293,275,0,271,256,293,266,249,282],
[248,272,265,279,0,257,276,261,277,268],
[281,297,282,294,293,0,290,293,271,294],
[251,273,248,257,274,260,0,262,254,266],
[252,295,271,284,289,257,288,0,264,259],
[280,285,278,301,273,279,296,286,0,273],
[273,278,268,268,282,256,284,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,280,237,288,233,278,259,263,255],
[315,0,288,283,302,275,301,265,279,293],
[270,262,0,279,293,235,303,232,295,291],
[313,267,271,0,302,237,277,242,276,254],
[262,248,257,248,0,223,273,239,259,277],
[317,275,315,313,327,0,318,288,300,307],
[272,249,247,273,277,232,0,223,251,278],
[291,285,318,308,311,262,327,0,302,310],
[287,271,255,274,291,250,299,248,0,278],
[295,257,259,296,273,243,272,240,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,263,260,259,268,259,256,266,277],
[262,0,273,261,259,274,269,257,261,277],
[287,277,0,283,276,283,259,267,262,271],
[290,289,267,0,278,265,269,267,276,264],
[291,291,274,272,0,276,264,274,269,273],
[282,276,267,285,274,0,252,261,259,283],
[291,281,291,281,286,298,0,276,268,283],
[294,293,283,283,276,289,274,0,267,273],
[284,289,288,274,281,291,282,283,0,296],
[273,273,279,286,277,267,267,277,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,280,257,277,246,263,261,275],
[274,0,283,257,269,255,259,269,268,256],
[273,267,0,271,260,255,254,273,261,263],
[270,293,279,0,260,268,276,274,268,269],
[293,281,290,290,0,273,263,279,291,274],
[273,295,295,282,277,0,268,286,292,261],
[304,291,296,274,287,282,0,292,287,287],
[287,281,277,276,271,264,258,0,281,280],
[289,282,289,282,259,258,263,269,0,280],
[275,294,287,281,276,289,263,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,266,266,265,265,266,275,275,280],
[265,0,272,266,276,253,270,280,269,295],
[284,278,0,262,270,274,265,289,270,277],
[284,284,288,0,283,276,270,294,278,289],
[285,274,280,267,0,254,266,288,269,282],
[285,297,276,274,296,0,278,303,274,296],
[284,280,285,280,284,272,0,293,278,293],
[275,270,261,256,262,247,257,0,261,270],
[275,281,280,272,281,276,272,289,0,279],
[270,255,273,261,268,254,257,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,300,274,299,305,325,286,292],
[271,0,290,304,271,275,297,296,271,274],
[266,260,0,277,265,273,267,304,262,260],
[250,246,273,0,278,266,284,287,257,240],
[276,279,285,272,0,270,282,306,274,287],
[251,275,277,284,280,0,297,295,283,279],
[245,253,283,266,268,253,0,299,276,282],
[225,254,246,263,244,255,251,0,249,273],
[264,279,288,293,276,267,274,301,0,273],
[258,276,290,310,263,271,268,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,274,256,229,265,237,274,281],
[269,0,265,272,245,239,276,254,244,256],
[263,285,0,269,246,248,268,248,236,269],
[276,278,281,0,253,256,275,249,264,262],
[294,305,304,297,0,275,276,280,284,294],
[321,311,302,294,275,0,303,283,285,310],
[285,274,282,275,274,247,0,244,274,291],
[313,296,302,301,270,267,306,0,275,315],
[276,306,314,286,266,265,276,275,0,288],
[269,294,281,288,256,240,259,235,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,264,281,262,290,302,272,281,255],
[266,0,247,266,231,285,238,270,234,240],
[286,303,0,273,279,312,263,270,289,279],
[269,284,277,0,261,307,269,284,273,244],
[288,319,271,289,0,319,300,302,305,273],
[260,265,238,243,231,0,264,304,251,206],
[248,312,287,281,250,286,0,278,276,234],
[278,280,280,266,248,246,272,0,254,255],
[269,316,261,277,245,299,274,296,0,244],
[295,310,271,306,277,344,316,295,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,295,275,269,256,283,282,279,277],
[271,0,270,274,252,251,276,276,282,274],
[255,280,0,263,259,257,261,275,257,260],
[275,276,287,0,269,254,272,269,265,287],
[281,298,291,281,0,263,265,270,280,268],
[294,299,293,296,287,0,276,288,285,275],
[267,274,289,278,285,274,0,284,276,278],
[268,274,275,281,280,262,266,0,271,288],
[271,268,293,285,270,265,274,279,0,273],
[273,276,290,263,282,275,272,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,242,222,258,280,272,260,294,242],
[288,0,305,255,262,263,278,292,304,226],
[308,245,0,224,251,257,286,260,279,237],
[328,295,326,0,290,330,311,293,308,259],
[292,288,299,260,0,315,281,263,340,288],
[270,287,293,220,235,0,267,254,288,251],
[278,272,264,239,269,283,0,247,294,246],
[290,258,290,257,287,296,303,0,321,276],
[256,246,271,242,210,262,256,229,0,226],
[308,324,313,291,262,299,304,274,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,291,272,274,289,299,259,294,282],
[287,0,287,282,259,270,290,249,270,258],
[259,263,0,251,260,267,280,253,266,257],
[278,268,299,0,278,285,291,258,286,277],
[276,291,290,272,0,284,294,280,303,283],
[261,280,283,265,266,0,280,265,290,262],
[251,260,270,259,256,270,0,264,272,256],
[291,301,297,292,270,285,286,0,289,289],
[256,280,284,264,247,260,278,261,0,266],
[268,292,293,273,267,288,294,261,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,283,299,291,295,270,268,300],
[263,0,270,274,281,251,266,290,251,277],
[288,280,0,284,285,281,295,269,263,282],
[267,276,266,0,261,265,288,267,258,288],
[251,269,265,289,0,285,289,262,260,270],
[259,299,269,285,265,0,291,284,275,257],
[255,284,255,262,261,259,0,256,258,283],
[280,260,281,283,288,266,294,0,265,298],
[282,299,287,292,290,275,292,285,0,284],
[250,273,268,262,280,293,267,252,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,293,301,280,284,284,299,273],
[283,0,286,281,314,289,263,271,300,279],
[266,264,0,257,301,268,270,273,293,281],
[257,269,293,0,276,264,263,286,290,273],
[249,236,249,274,0,274,269,274,267,256],
[270,261,282,286,276,0,275,286,274,280],
[266,287,280,287,281,275,0,269,286,262],
[266,279,277,264,276,264,281,0,283,264],
[251,250,257,260,283,276,264,267,0,271],
[277,271,269,277,294,270,288,286,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,261,265,260,280,259,273,259,274],
[280,0,272,266,274,272,276,292,265,271],
[289,278,0,267,261,277,277,292,271,281],
[285,284,283,0,273,293,301,290,293,301],
[290,276,289,277,0,285,279,294,278,273],
[270,278,273,257,265,0,256,273,272,281],
[291,274,273,249,271,294,0,283,274,276],
[277,258,258,260,256,277,267,0,251,257],
[291,285,279,257,272,278,276,299,0,277],
[276,279,269,249,277,269,274,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,302,307,291,330,356,328,268,281],
[266,0,257,252,253,258,318,276,243,270],
[248,293,0,289,309,282,316,284,221,310],
[243,298,261,0,232,249,320,277,259,291],
[259,297,241,318,0,285,309,253,291,262],
[220,292,268,301,265,0,323,243,257,265],
[194,232,234,230,241,227,0,252,226,232],
[222,274,266,273,297,307,298,0,266,256],
[282,307,329,291,259,293,324,284,0,283],
[269,280,240,259,288,285,318,294,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,283,300,293,287,279,249,328],
[275,0,277,262,303,278,292,298,257,299],
[277,273,0,259,279,290,285,279,251,276],
[267,288,291,0,307,280,298,295,235,309],
[250,247,271,243,0,237,271,259,241,272],
[257,272,260,270,313,0,288,289,281,310],
[263,258,265,252,279,262,0,291,287,283],
[271,252,271,255,291,261,259,0,234,261],
[301,293,299,315,309,269,263,316,0,306],
[222,251,274,241,278,240,267,289,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,272,267,266,254,256,266,270,265],
[263,0,262,267,271,277,257,256,268,273],
[278,288,0,267,251,286,274,255,268,279],
[283,283,283,0,267,263,240,233,242,262],
[284,279,299,283,0,285,269,264,272,279],
[296,273,264,287,265,0,262,251,263,273],
[294,293,276,310,281,288,0,281,266,284],
[284,294,295,317,286,299,269,0,281,271],
[280,282,282,308,278,287,284,269,0,275],
[285,277,271,288,271,277,266,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,281,288,275,272,271,254,264],
[267,0,275,272,284,259,265,259,267,268],
[276,275,0,290,295,263,275,271,265,270],
[269,278,260,0,266,257,263,262,259,256],
[262,266,255,284,0,255,252,258,260,251],
[275,291,287,293,295,0,287,273,262,273],
[278,285,275,287,298,263,0,282,273,275],
[279,291,279,288,292,277,268,0,266,271],
[296,283,285,291,290,288,277,284,0,275],
[286,282,280,294,299,277,275,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,286,272,316,276,296,303,281,279],
[285,0,295,311,293,261,296,294,285,294],
[264,255,0,312,286,280,276,281,286,276],
[278,239,238,0,260,255,265,276,249,259],
[234,257,264,290,0,270,265,268,266,278],
[274,289,270,295,280,0,284,277,278,278],
[254,254,274,285,285,266,0,291,278,271],
[247,256,269,274,282,273,259,0,277,277],
[269,265,264,301,284,272,272,273,0,261],
[271,256,274,291,272,272,279,273,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,219,254,223,262,243,281,241,229],
[306,0,257,281,249,276,263,304,255,268],
[331,293,0,307,246,288,250,295,289,239],
[296,269,243,0,276,253,237,309,234,221],
[327,301,304,274,0,285,241,314,281,284],
[288,274,262,297,265,0,265,305,276,274],
[307,287,300,313,309,285,0,306,279,275],
[269,246,255,241,236,245,244,0,220,248],
[309,295,261,316,269,274,271,330,0,248],
[321,282,311,329,266,276,275,302,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,269,282,268,266,287,268,268],
[268,0,282,275,279,271,265,269,269,270],
[274,268,0,267,282,286,263,288,287,267],
[281,275,283,0,291,272,280,286,276,276],
[268,271,268,259,0,279,263,271,259,273],
[282,279,264,278,271,0,266,290,262,290],
[284,285,287,270,287,284,0,286,273,282],
[263,281,262,264,279,260,264,0,276,264],
[282,281,263,274,291,288,277,274,0,290],
[282,280,283,274,277,260,268,286,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,288,240,287,252,299,268,246,265],
[283,0,293,277,268,284,275,287,255,282],
[262,257,0,233,253,246,262,250,228,262],
[310,273,317,0,291,289,295,294,251,260],
[263,282,297,259,0,273,315,272,255,284],
[298,266,304,261,277,0,295,273,279,286],
[251,275,288,255,235,255,0,245,236,250],
[282,263,300,256,278,277,305,0,270,271],
[304,295,322,299,295,271,314,280,0,265],
[285,268,288,290,266,264,300,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,286,274,284,268,276,247,281,259],
[288,0,286,275,289,280,299,264,277,283],
[264,264,0,273,281,257,280,234,271,267],
[276,275,277,0,299,280,284,264,268,296],
[266,261,269,251,0,269,276,264,252,266],
[282,270,293,270,281,0,292,277,271,277],
[274,251,270,266,274,258,0,233,255,256],
[303,286,316,286,286,273,317,0,290,289],
[269,273,279,282,298,279,295,260,0,282],
[291,267,283,254,284,273,294,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,245,239,259,318,224,267,258,250],
[276,0,278,270,266,282,272,267,261,256],
[305,272,0,293,306,336,290,325,302,306],
[311,280,257,0,312,321,286,300,290,276],
[291,284,244,238,0,285,254,282,274,260],
[232,268,214,229,265,0,224,282,259,253],
[326,278,260,264,296,326,0,271,269,284],
[283,283,225,250,268,268,279,0,253,244],
[292,289,248,260,276,291,281,297,0,264],
[300,294,244,274,290,297,266,306,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,287,260,280,278,287,260,270,287],
[284,0,286,267,283,270,270,271,278,286],
[263,264,0,253,254,257,268,257,266,273],
[290,283,297,0,287,270,279,287,303,289],
[270,267,296,263,0,287,275,269,282,275],
[272,280,293,280,263,0,275,261,273,281],
[263,280,282,271,275,275,0,269,259,275],
[290,279,293,263,281,289,281,0,294,295],
[280,272,284,247,268,277,291,256,0,272],
[263,264,277,261,275,269,275,255,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,272,260,259,276,281,294,273,272],
[306,0,263,272,258,274,273,303,279,275],
[278,287,0,300,274,279,294,281,303,300],
[290,278,250,0,268,265,282,278,261,284],
[291,292,276,282,0,289,275,293,291,270],
[274,276,271,285,261,0,271,322,253,298],
[269,277,256,268,275,279,0,280,278,296],
[256,247,269,272,257,228,270,0,256,283],
[277,271,247,289,259,297,272,294,0,291],
[278,275,250,266,280,252,254,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,279,275,297,269,267,276,279,269],
[288,0,287,280,294,270,271,279,290,280],
[271,263,0,269,284,258,260,267,258,288],
[275,270,281,0,295,292,278,285,296,287],
[253,256,266,255,0,251,259,276,264,272],
[281,280,292,258,299,0,262,290,296,297],
[283,279,290,272,291,288,0,297,292,303],
[274,271,283,265,274,260,253,0,271,269],
[271,260,292,254,286,254,258,279,0,299],
[281,270,262,263,278,253,247,281,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,256,296,264,266,274,298,261,280],
[263,0,268,288,254,269,255,285,255,266],
[294,282,0,290,274,293,270,292,285,283],
[254,262,260,0,265,265,247,268,258,239],
[286,296,276,285,0,293,269,308,287,281],
[284,281,257,285,257,0,280,273,281,263],
[276,295,280,303,281,270,0,299,274,283],
[252,265,258,282,242,277,251,0,263,270],
[289,295,265,292,263,269,276,287,0,270],
[270,284,267,311,269,287,267,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,290,286,296,290,302,275,280,283],
[266,0,280,250,303,262,279,264,293,284],
[260,270,0,294,299,285,304,262,287,265],
[264,300,256,0,306,276,298,269,292,279],
[254,247,251,244,0,265,270,245,252,258],
[260,288,265,274,285,0,300,273,276,268],
[248,271,246,252,280,250,0,260,254,256],
[275,286,288,281,305,277,290,0,290,274],
[270,257,263,258,298,274,296,260,0,283],
[267,266,285,271,292,282,294,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,252,279,279,278,268,267,269,265],
[296,0,273,274,290,302,277,278,295,304],
[298,277,0,281,285,282,273,264,280,283],
[271,276,269,0,286,268,282,247,263,271],
[271,260,265,264,0,291,276,263,270,291],
[272,248,268,282,259,0,253,252,242,285],
[282,273,277,268,274,297,0,271,272,268],
[283,272,286,303,287,298,279,0,291,297],
[281,255,270,287,280,308,278,259,0,275],
[285,246,267,279,259,265,282,253,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,271,264,276,277,240,258,259,262],
[294,0,279,303,288,319,279,273,283,297],
[279,271,0,273,270,286,244,290,289,285],
[286,247,277,0,274,290,277,261,260,279],
[274,262,280,276,0,298,247,275,291,286],
[273,231,264,260,252,0,236,262,272,280],
[310,271,306,273,303,314,0,297,292,286],
[292,277,260,289,275,288,253,0,292,291],
[291,267,261,290,259,278,258,258,0,286],
[288,253,265,271,264,270,264,259,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,294,260,301,269,269,272,285,304],
[282,0,268,284,281,289,263,287,298,295],
[256,282,0,298,276,284,254,282,288,281],
[290,266,252,0,261,273,242,281,285,283],
[249,269,274,289,0,278,280,289,287,281],
[281,261,266,277,272,0,235,252,275,255],
[281,287,296,308,270,315,0,283,290,291],
[278,263,268,269,261,298,267,0,261,256],
[265,252,262,265,263,275,260,289,0,290],
[246,255,269,267,269,295,259,294,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,327,287,270,325,342,256,242,225],
[259,0,324,243,239,293,277,256,210,242],
[223,226,0,255,272,258,242,220,209,286],
[263,307,295,0,258,311,261,223,277,290],
[280,311,278,292,0,294,279,227,278,294],
[225,257,292,239,256,0,274,256,195,242],
[208,273,308,289,271,276,0,239,179,240],
[294,294,330,327,323,294,311,0,275,278],
[308,340,341,273,272,355,371,275,0,339],
[325,308,264,260,256,308,310,272,211,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,335,273,355,274,339,311,272,273],
[238,0,248,229,255,191,295,282,227,200],
[215,302,0,240,303,256,315,294,240,270],
[277,321,310,0,314,290,326,293,237,329],
[195,295,247,236,0,187,265,260,163,185],
[276,359,294,260,363,0,336,312,286,300],
[211,255,235,224,285,214,0,254,203,204],
[239,268,256,257,290,238,296,0,267,217],
[278,323,310,313,387,264,347,283,0,275],
[277,350,280,221,365,250,346,333,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,261,266,271,275,285,282,266,291],
[275,0,278,288,284,284,286,296,282,315],
[289,272,0,284,302,309,308,299,290,295],
[284,262,266,0,288,279,293,294,287,303],
[279,266,248,262,0,286,287,284,265,281],
[275,266,241,271,264,0,254,297,259,288],
[265,264,242,257,263,296,0,280,269,288],
[268,254,251,256,266,253,270,0,276,286],
[284,268,260,263,285,291,281,274,0,320],
[259,235,255,247,269,262,262,264,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,275,271,284,295,272,292,289,289],
[267,0,270,263,271,282,258,292,275,274],
[275,280,0,289,271,284,280,278,280,283],
[279,287,261,0,267,279,287,297,279,281],
[266,279,279,283,0,279,275,281,286,274],
[255,268,266,271,271,0,264,267,260,273],
[278,292,270,263,275,286,0,304,307,292],
[258,258,272,253,269,283,246,0,278,269],
[261,275,270,271,264,290,243,272,0,271],
[261,276,267,269,276,277,258,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,273,282,290,282,305,290,273,293],
[260,0,257,265,286,248,280,274,259,278],
[277,293,0,268,268,279,293,297,275,277],
[268,285,282,0,286,271,304,301,252,278],
[260,264,282,264,0,279,284,309,268,285],
[268,302,271,279,271,0,298,293,267,295],
[245,270,257,246,266,252,0,279,249,271],
[260,276,253,249,241,257,271,0,239,269],
[277,291,275,298,282,283,301,311,0,286],
[257,272,273,272,265,255,279,281,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,288,269,286,256,276,261,286],
[282,0,274,264,291,272,309,314,277,343],
[290,276,0,274,299,296,296,281,270,279],
[262,286,276,0,285,321,322,316,286,280],
[281,259,251,265,0,287,305,303,272,282],
[264,278,254,229,263,0,274,243,282,253],
[294,241,254,228,245,276,0,264,249,273],
[274,236,269,234,247,307,286,0,259,264],
[289,273,280,264,278,268,301,291,0,315],
[264,207,271,270,268,297,277,286,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,271,263,273,291,263,243,280,282],
[269,0,248,254,263,275,272,260,283,273],
[279,302,0,255,265,294,279,284,289,272],
[287,296,295,0,276,300,272,273,295,293],
[277,287,285,274,0,279,280,270,287,282],
[259,275,256,250,271,0,279,263,278,269],
[287,278,271,278,270,271,0,268,274,279],
[307,290,266,277,280,287,282,0,290,289],
[270,267,261,255,263,272,276,260,0,254],
[268,277,278,257,268,281,271,261,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,281,258,256,270,259,276,273],
[278,0,273,283,276,259,264,260,284,270],
[281,277,0,293,282,272,285,282,280,290],
[269,267,257,0,277,275,280,273,277,272],
[292,274,268,273,0,263,288,254,284,276],
[294,291,278,275,287,0,289,269,299,296],
[280,286,265,270,262,261,0,277,286,297],
[291,290,268,277,296,281,273,0,301,283],
[274,266,270,273,266,251,264,249,0,269],
[277,280,260,278,274,254,253,267,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,285,288,255,250,257,290,259,270],
[253,0,289,282,273,261,292,267,280,276],
[265,261,0,265,266,256,269,279,275,265],
[262,268,285,0,264,266,288,295,281,283],
[295,277,284,286,0,267,286,308,278,278],
[300,289,294,284,283,0,296,305,296,272],
[293,258,281,262,264,254,0,297,276,258],
[260,283,271,255,242,245,253,0,283,259],
[291,270,275,269,272,254,274,267,0,281],
[280,274,285,267,272,278,292,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,273,240,302,312,234,226,261,293],
[254,0,305,272,299,276,246,262,273,287],
[277,245,0,257,300,277,229,240,267,242],
[310,278,293,0,273,332,229,269,253,257],
[248,251,250,277,0,249,242,245,257,291],
[238,274,273,218,301,0,212,230,243,263],
[316,304,321,321,308,338,0,298,242,312],
[324,288,310,281,305,320,252,0,294,315],
[289,277,283,297,293,307,308,256,0,294],
[257,263,308,293,259,287,238,235,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,279,286,268,273,305,287,298,265],
[253,0,295,282,256,251,294,270,264,290],
[271,255,0,275,255,250,283,263,272,278],
[264,268,275,0,241,228,268,242,253,254],
[282,294,295,309,0,275,303,279,301,298],
[277,299,300,322,275,0,323,295,299,309],
[245,256,267,282,247,227,0,271,244,253],
[263,280,287,308,271,255,279,0,248,281],
[252,286,278,297,249,251,306,302,0,286],
[285,260,272,296,252,241,297,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,321,303,300,372,312,311,300,289],
[307,0,239,274,314,313,345,270,314,317],
[229,311,0,283,300,309,284,292,320,301],
[247,276,267,0,300,282,321,282,285,318],
[250,236,250,250,0,247,271,248,273,229],
[178,237,241,268,303,0,275,239,288,265],
[238,205,266,229,279,275,0,283,307,247],
[239,280,258,268,302,311,267,0,290,263],
[250,236,230,265,277,262,243,260,0,261],
[261,233,249,232,321,285,303,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,252,260,250,277,271,282,262],
[291,0,255,284,248,261,307,258,274,279],
[295,295,0,267,282,267,300,283,275,279],
[298,266,283,0,267,278,290,260,272,266],
[290,302,268,283,0,280,284,263,275,289],
[300,289,283,272,270,0,284,260,277,276],
[273,243,250,260,266,266,0,254,256,252],
[279,292,267,290,287,290,296,0,302,272],
[268,276,275,278,275,273,294,248,0,272],
[288,271,271,284,261,274,298,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,285,266,269,301,289,263,297,293],
[251,0,252,226,246,270,250,245,260,257],
[265,298,0,254,266,275,262,264,268,286],
[284,324,296,0,273,309,302,298,288,281],
[281,304,284,277,0,303,309,265,286,263],
[249,280,275,241,247,0,268,246,265,259],
[261,300,288,248,241,282,0,285,272,284],
[287,305,286,252,285,304,265,0,271,272],
[253,290,282,262,264,285,278,279,0,268],
[257,293,264,269,287,291,266,278,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,299,280,302,275,285,290,292,300],
[289,0,279,270,277,267,254,265,292,298],
[251,271,0,256,269,268,302,275,280,271],
[270,280,294,0,289,281,280,281,275,277],
[248,273,281,261,0,266,266,279,271,264],
[275,283,282,269,284,0,286,289,293,287],
[265,296,248,270,284,264,0,284,289,279],
[260,285,275,269,271,261,266,0,306,300],
[258,258,270,275,279,257,261,244,0,280],
[250,252,279,273,286,263,271,250,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,274,279,279,271,298,266,248,245],
[292,0,293,257,296,295,305,285,266,279],
[276,257,0,280,266,260,282,269,239,254],
[271,293,270,0,274,268,310,284,276,272],
[271,254,284,276,0,305,287,281,275,273],
[279,255,290,282,245,0,275,271,250,256],
[252,245,268,240,263,275,0,258,233,239],
[284,265,281,266,269,279,292,0,266,254],
[302,284,311,274,275,300,317,284,0,279],
[305,271,296,278,277,294,311,296,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,295,261,290,254,292,259,310,279],
[290,0,311,301,262,260,298,294,265,275],
[255,239,0,251,260,269,264,287,286,263],
[289,249,299,0,262,283,282,310,269,247],
[260,288,290,288,0,238,273,282,310,252],
[296,290,281,267,312,0,272,310,320,254],
[258,252,286,268,277,278,0,259,315,251],
[291,256,263,240,268,240,291,0,295,268],
[240,285,264,281,240,230,235,255,0,231],
[271,275,287,303,298,296,299,282,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,279,261,260,253,233,263,254,236],
[289,0,264,290,292,298,253,299,270,275],
[271,286,0,280,309,289,237,290,269,271],
[289,260,270,0,297,278,246,286,258,259],
[290,258,241,253,0,287,239,277,253,262],
[297,252,261,272,263,0,271,300,263,266],
[317,297,313,304,311,279,0,288,255,272],
[287,251,260,264,273,250,262,0,222,248],
[296,280,281,292,297,287,295,328,0,255],
[314,275,279,291,288,284,278,302,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,272,264,252,252,266,281,261,261],
[272,0,264,263,258,252,270,281,261,265],
[278,286,0,272,261,258,271,278,266,265],
[286,287,278,0,280,262,257,282,269,271],
[298,292,289,270,0,270,282,312,281,296],
[298,298,292,288,280,0,275,314,299,306],
[284,280,279,293,268,275,0,289,263,279],
[269,269,272,268,238,236,261,0,265,258],
[289,289,284,281,269,251,287,285,0,280],
[289,285,285,279,254,244,271,292,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,298,250,285,289,250,303,252,254],
[295,0,292,275,275,307,281,292,299,274],
[252,258,0,261,252,281,259,272,256,255],
[300,275,289,0,289,292,282,297,286,288],
[265,275,298,261,0,278,248,305,270,294],
[261,243,269,258,272,0,240,289,257,259],
[300,269,291,268,302,310,0,289,293,293],
[247,258,278,253,245,261,261,0,272,256],
[298,251,294,264,280,293,257,278,0,263],
[296,276,295,262,256,291,257,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,283,305,273,259,258,257,266,272],
[277,0,354,376,303,259,320,290,325,320],
[267,196,0,280,262,254,264,234,234,260],
[245,174,270,0,249,244,190,245,232,249],
[277,247,288,301,0,261,257,270,283,294],
[291,291,296,306,289,0,249,260,322,296],
[292,230,286,360,293,301,0,257,267,295],
[293,260,316,305,280,290,293,0,288,305],
[284,225,316,318,267,228,283,262,0,300],
[278,230,290,301,256,254,255,245,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,287,271,278,279,286,294,284,296],
[289,0,277,293,283,247,303,294,279,286],
[263,273,0,277,271,255,290,267,282,276],
[279,257,273,0,287,274,314,291,285,293],
[272,267,279,263,0,276,289,272,279,285],
[271,303,295,276,274,0,297,268,271,290],
[264,247,260,236,261,253,0,263,270,274],
[256,256,283,259,278,282,287,0,283,285],
[266,271,268,265,271,279,280,267,0,288],
[254,264,274,257,265,260,276,265,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,295,274,260,272,295,284,274,291],
[262,0,287,251,263,258,270,284,259,269],
[255,263,0,241,243,248,279,261,245,229],
[276,299,309,0,266,302,294,299,289,286],
[290,287,307,284,0,286,305,293,270,287],
[278,292,302,248,264,0,290,294,268,266],
[255,280,271,256,245,260,0,249,255,230],
[266,266,289,251,257,256,301,0,270,241],
[276,291,305,261,280,282,295,280,0,269],
[259,281,321,264,263,284,320,309,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,284,259,277,276,274,299,262,277],
[256,0,282,267,281,286,290,289,245,254],
[266,268,0,283,270,294,294,284,275,266],
[291,283,267,0,274,290,291,284,266,263],
[273,269,280,276,0,285,296,292,257,278],
[274,264,256,260,265,0,287,268,263,251],
[276,260,256,259,254,263,0,264,241,242],
[251,261,266,266,258,282,286,0,248,258],
[288,305,275,284,293,287,309,302,0,282],
[273,296,284,287,272,299,308,292,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,296,298,275,285,298,284,314],
[262,0,284,290,290,267,277,273,266,289],
[271,266,0,286,288,290,280,276,270,310],
[254,260,264,0,274,273,263,263,271,269],
[252,260,262,276,0,264,267,259,270,282],
[275,283,260,277,286,0,277,283,272,283],
[265,273,270,287,283,273,0,287,286,287],
[252,277,274,287,291,267,263,0,280,264],
[266,284,280,279,280,278,264,270,0,289],
[236,261,240,281,268,267,263,286,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,254,264,263,242,290,267,259,254],
[291,0,276,275,264,272,302,281,274,288],
[296,274,0,263,276,268,298,265,259,271],
[286,275,287,0,271,273,311,293,276,274],
[287,286,274,279,0,257,305,279,282,270],
[308,278,282,277,293,0,300,283,277,265],
[260,248,252,239,245,250,0,246,222,243],
[283,269,285,257,271,267,304,0,260,254],
[291,276,291,274,268,273,328,290,0,267],
[296,262,279,276,280,285,307,296,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,267,272,277,280,275,274,276,278],
[252,0,239,264,256,267,262,247,244,260],
[283,311,0,291,257,288,288,277,294,295],
[278,286,259,0,272,283,272,260,285,278],
[273,294,293,278,0,285,286,282,287,299],
[270,283,262,267,265,0,265,274,282,264],
[275,288,262,278,264,285,0,265,270,287],
[276,303,273,290,268,276,285,0,269,272],
[274,306,256,265,263,268,280,281,0,277],
[272,290,255,272,251,286,263,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,268,299,287,291,284,285,274],
[260,0,286,266,294,295,286,270,266,279],
[264,264,0,286,308,299,294,304,289,285],
[282,284,264,0,302,278,277,264,276,289],
[251,256,242,248,0,273,261,268,262,271],
[263,255,251,272,277,0,271,260,263,272],
[259,264,256,273,289,279,0,276,271,273],
[266,280,246,286,282,290,274,0,278,284],
[265,284,261,274,288,287,279,272,0,287],
[276,271,265,261,279,278,277,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,256,265,251,255,262,247,284,229],
[315,0,279,269,272,277,291,279,306,278],
[294,271,0,267,277,278,305,274,283,256],
[285,281,283,0,290,298,297,275,309,261],
[299,278,273,260,0,288,288,257,319,259],
[295,273,272,252,262,0,275,250,312,250],
[288,259,245,253,262,275,0,255,287,243],
[303,271,276,275,293,300,295,0,300,262],
[266,244,267,241,231,238,263,250,0,236],
[321,272,294,289,291,300,307,288,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,241,283,251,241,297,251,248,259],
[299,0,280,267,281,258,276,301,264,295],
[309,270,0,309,282,275,296,295,291,284],
[267,283,241,0,260,259,311,269,268,282],
[299,269,268,290,0,270,313,300,284,284],
[309,292,275,291,280,0,312,290,280,269],
[253,274,254,239,237,238,0,255,237,275],
[299,249,255,281,250,260,295,0,252,271],
[302,286,259,282,266,270,313,298,0,295],
[291,255,266,268,266,281,275,279,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,307,318,257,329,291,328,308,305],
[264,0,296,269,280,270,291,301,284,262],
[243,254,0,238,277,270,267,302,266,251],
[232,281,312,0,266,282,282,297,285,275],
[293,270,273,284,0,335,298,329,280,297],
[221,280,280,268,215,0,278,272,288,288],
[259,259,283,268,252,272,0,284,319,289],
[222,249,248,253,221,278,266,0,248,285],
[242,266,284,265,270,262,231,302,0,265],
[245,288,299,275,253,262,261,265,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,255,259,256,236,240,238,252,253],
[284,0,278,277,267,268,291,270,281,278],
[295,272,0,270,277,267,272,278,275,282],
[291,273,280,0,266,267,259,278,258,274],
[294,283,273,284,0,267,265,259,260,268],
[314,282,283,283,283,0,271,268,270,288],
[310,259,278,291,285,279,0,259,270,270],
[312,280,272,272,291,282,291,0,285,277],
[298,269,275,292,290,280,280,265,0,279],
[297,272,268,276,282,262,280,273,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,278,298,281,280,274,289,286,282],
[291,0,303,298,300,305,292,313,276,274],
[272,247,0,281,283,297,252,265,267,264],
[252,252,269,0,290,289,261,272,251,259],
[269,250,267,260,0,284,248,276,252,276],
[270,245,253,261,266,0,265,260,257,236],
[276,258,298,289,302,285,0,298,270,283],
[261,237,285,278,274,290,252,0,253,265],
[264,274,283,299,298,293,280,297,0,292],
[268,276,286,291,274,314,267,285,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,259,258,275,291,292,278,303],
[277,0,277,248,274,270,287,266,250,278],
[273,273,0,275,265,277,277,283,274,287],
[291,302,275,0,281,275,298,300,288,304],
[292,276,285,269,0,276,278,287,272,308],
[275,280,273,275,274,0,292,275,292,282],
[259,263,273,252,272,258,0,280,246,269],
[258,284,267,250,263,275,270,0,282,274],
[272,300,276,262,278,258,304,268,0,293],
[247,272,263,246,242,268,281,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,293,243,295,279,291,292,286,314],
[262,0,308,257,262,264,263,291,301,296],
[257,242,0,220,281,262,274,278,304,296],
[307,293,330,0,272,274,299,299,331,305],
[255,288,269,278,0,261,297,292,339,319],
[271,286,288,276,289,0,298,292,287,308],
[259,287,276,251,253,252,0,297,298,334],
[258,259,272,251,258,258,253,0,296,290],
[264,249,246,219,211,263,252,254,0,266],
[236,254,254,245,231,242,216,260,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,312,288,308,273,300,276,261,266],
[273,0,316,288,287,276,312,270,271,263],
[238,234,0,247,238,230,277,244,248,233],
[262,262,303,0,280,268,277,292,269,281],
[242,263,312,270,0,275,314,260,261,247],
[277,274,320,282,275,0,318,286,289,289],
[250,238,273,273,236,232,0,247,249,239],
[274,280,306,258,290,264,303,0,272,271],
[289,279,302,281,289,261,301,278,0,281],
[284,287,317,269,303,261,311,279,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,458,367,232,458,277,321,319,276],
[228,0,456,230,275,320,230,184,274,138],
[92,94,0,47,232,230,187,95,137,94],
[183,320,503,0,277,367,322,184,272,275],
[318,275,318,273,0,458,324,276,228,275],
[92,230,320,183,92,0,277,277,182,138],
[273,320,363,228,226,273,0,183,273,183],
[229,366,455,366,274,273,367,0,320,275],
[231,276,413,278,322,368,277,230,0,324],
[274,412,456,275,275,412,367,275,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,253,273,243,295,292,282,272],
[280,0,285,271,279,256,284,301,288,313],
[276,265,0,264,258,250,268,291,267,261],
[297,279,286,0,282,275,283,291,309,273],
[277,271,292,268,0,274,259,301,291,268],
[307,294,300,275,276,0,303,302,304,301],
[255,266,282,267,291,247,0,283,265,286],
[258,249,259,259,249,248,267,0,270,259],
[268,262,283,241,259,246,285,280,0,277],
[278,237,289,277,282,249,264,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,281,283,294,292,294,280,271],
[255,0,253,277,271,279,282,300,268,279],
[276,297,0,290,274,286,274,295,267,275],
[269,273,260,0,263,286,276,299,278,279],
[267,279,276,287,0,281,270,291,279,273],
[256,271,264,264,269,0,262,260,250,270],
[258,268,276,274,280,288,0,290,263,259],
[256,250,255,251,259,290,260,0,249,244],
[270,282,283,272,271,300,287,301,0,289],
[279,271,275,271,277,280,291,306,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,278,282,261,289,306,266,287,277],
[281,0,274,281,257,274,275,276,283,261],
[272,276,0,289,277,267,298,261,295,262],
[268,269,261,0,267,280,283,275,279,266],
[289,293,273,283,0,284,303,286,275,273],
[261,276,283,270,266,0,300,281,273,280],
[244,275,252,267,247,250,0,259,279,265],
[284,274,289,275,264,269,291,0,276,261],
[263,267,255,271,275,277,271,274,0,266],
[273,289,288,284,277,270,285,289,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,283,278,304,294,271,280,290,301],
[248,0,259,274,277,268,242,272,270,275],
[267,291,0,269,284,271,263,267,270,281],
[272,276,281,0,305,272,251,274,289,289],
[246,273,266,245,0,253,256,257,277,280],
[256,282,279,278,297,0,276,281,283,285],
[279,308,287,299,294,274,0,286,305,288],
[270,278,283,276,293,269,264,0,288,292],
[260,280,280,261,273,267,245,262,0,299],
[249,275,269,261,270,265,262,258,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,291,275,288,310,293,295,279,303],
[245,0,257,252,246,279,255,275,252,272],
[259,293,0,255,263,294,280,287,266,291],
[275,298,295,0,295,290,300,299,275,308],
[262,304,287,255,0,298,283,291,272,272],
[240,271,256,260,252,0,257,264,261,274],
[257,295,270,250,267,293,0,289,255,270],
[255,275,263,251,259,286,261,0,242,264],
[271,298,284,275,278,289,295,308,0,278],
[247,278,259,242,278,276,280,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,278,267,294,265,264,291,276,288],
[272,0,279,262,284,278,253,287,273,284],
[272,271,0,258,266,244,244,272,259,254],
[283,288,292,0,289,288,263,288,279,290],
[256,266,284,261,0,245,248,270,258,275],
[285,272,306,262,305,0,275,293,282,264],
[286,297,306,287,302,275,0,290,285,287],
[259,263,278,262,280,257,260,0,261,272],
[274,277,291,271,292,268,265,289,0,294],
[262,266,296,260,275,286,263,278,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,280,260,259,282,283,292,284,281],
[283,0,275,251,263,271,277,278,278,254],
[270,275,0,260,256,278,281,278,252,260],
[290,299,290,0,304,304,312,307,301,273],
[291,287,294,246,0,282,294,296,277,280],
[268,279,272,246,268,0,280,287,262,260],
[267,273,269,238,256,270,0,272,273,251],
[258,272,272,243,254,263,278,0,258,248],
[266,272,298,249,273,288,277,292,0,257],
[269,296,290,277,270,290,299,302,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,260,269,255,261,253,252,274,259],
[300,0,285,276,278,297,280,280,309,264],
[290,265,0,269,267,281,260,274,272,259],
[281,274,281,0,269,287,274,251,296,275],
[295,272,283,281,0,282,265,273,298,264],
[289,253,269,263,268,0,248,252,268,250],
[297,270,290,276,285,302,0,275,302,282],
[298,270,276,299,277,298,275,0,277,269],
[276,241,278,254,252,282,248,273,0,263],
[291,286,291,275,286,300,268,281,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,268,293,244,263,272,272,257,284],
[256,0,265,266,268,258,260,266,278,272],
[282,285,0,282,282,276,281,310,264,288],
[257,284,268,0,262,258,266,264,256,276],
[306,282,268,288,0,271,264,301,266,312],
[287,292,274,292,279,0,264,294,279,289],
[278,290,269,284,286,286,0,290,279,302],
[278,284,240,286,249,256,260,0,270,265],
[293,272,286,294,284,271,271,280,0,301],
[266,278,262,274,238,261,248,285,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,266,238,263,269,268,251,245,255],
[275,0,269,245,251,260,254,256,266,265],
[284,281,0,239,261,271,274,276,254,279],
[312,305,311,0,288,274,283,284,285,300],
[287,299,289,262,0,274,289,284,268,271],
[281,290,279,276,276,0,272,279,281,276],
[282,296,276,267,261,278,0,275,275,268],
[299,294,274,266,266,271,275,0,280,281],
[305,284,296,265,282,269,275,270,0,287],
[295,285,271,250,279,274,282,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,271,278,261,272,299,284,263,272],
[261,0,278,265,260,264,294,281,257,268],
[279,272,0,278,262,294,325,306,280,278],
[272,285,272,0,264,276,322,299,264,268],
[289,290,288,286,0,274,326,307,275,280],
[278,286,256,274,276,0,312,280,267,262],
[251,256,225,228,224,238,0,265,231,241],
[266,269,244,251,243,270,285,0,250,263],
[287,293,270,286,275,283,319,300,0,275],
[278,282,272,282,270,288,309,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,272,271,272,298,284,262,248],
[273,0,275,295,287,321,294,302,276,254],
[277,275,0,265,287,287,322,298,272,281],
[278,255,285,0,229,265,293,306,268,232],
[279,263,263,321,0,268,289,285,284,272],
[278,229,263,285,282,0,294,303,293,252],
[252,256,228,257,261,256,0,266,268,252],
[266,248,252,244,265,247,284,0,255,215],
[288,274,278,282,266,257,282,295,0,260],
[302,296,269,318,278,298,298,335,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,271,280,274,276,292,267,276,274],
[259,0,260,265,277,279,279,274,265,259],
[279,290,0,277,289,272,287,267,280,277],
[270,285,273,0,272,276,282,277,271,267],
[276,273,261,278,0,267,285,274,261,261],
[274,271,278,274,283,0,285,277,279,271],
[258,271,263,268,265,265,0,265,260,266],
[283,276,283,273,276,273,285,0,282,260],
[274,285,270,279,289,271,290,268,0,277],
[276,291,273,283,289,279,284,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,267,276,287,276,283,272,267,282],
[286,0,289,264,282,261,252,272,263,293],
[283,261,0,282,263,280,273,266,246,286],
[274,286,268,0,279,253,263,277,266,290],
[263,268,287,271,0,259,252,261,249,285],
[274,289,270,297,291,0,267,283,283,290],
[267,298,277,287,298,283,0,294,234,286],
[278,278,284,273,289,267,256,0,249,296],
[283,287,304,284,301,267,316,301,0,299],
[268,257,264,260,265,260,264,254,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,248,320,258,244,340,321,258,300],
[238,0,276,238,207,271,288,268,252,296],
[302,274,0,284,271,256,305,296,252,296],
[230,312,266,0,312,281,295,274,243,330],
[292,343,279,238,0,337,322,273,324,360],
[306,279,294,269,213,0,292,287,274,296],
[210,262,245,255,228,258,0,238,226,312],
[229,282,254,276,277,263,312,0,243,285],
[292,298,298,307,226,276,324,307,0,365],
[250,254,254,220,190,254,238,265,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,289,279,262,282,269,270,276],
[284,0,269,290,295,276,311,302,298,297],
[272,281,0,279,291,269,283,299,279,296],
[261,260,271,0,259,257,268,255,264,280],
[271,255,259,291,0,275,271,273,278,276],
[288,274,281,293,275,0,293,295,279,287],
[268,239,267,282,279,257,0,277,260,275],
[281,248,251,295,277,255,273,0,285,278],
[280,252,271,286,272,271,290,265,0,287],
[274,253,254,270,274,263,275,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,282,259,238,272,247,280,273],
[265,0,296,269,299,292,263,264,289,275],
[279,254,0,278,291,281,270,277,305,308],
[268,281,272,0,282,261,266,265,293,291],
[291,251,259,268,0,290,269,281,291,277],
[312,258,269,289,260,0,293,275,302,269],
[278,287,280,284,281,257,0,271,260,277],
[303,286,273,285,269,275,279,0,286,288],
[270,261,245,257,259,248,290,264,0,247],
[277,275,242,259,273,281,273,262,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,295,257,244,257,253,263,241,279],
[294,0,307,293,268,277,287,286,271,276],
[255,243,0,227,179,256,244,251,237,258],
[293,257,323,0,241,301,281,312,274,315],
[306,282,371,309,0,307,275,325,289,339],
[293,273,294,249,243,0,245,295,278,316],
[297,263,306,269,275,305,0,265,277,309],
[287,264,299,238,225,255,285,0,272,281],
[309,279,313,276,261,272,273,278,0,298],
[271,274,292,235,211,234,241,269,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,243,258,275,267,291,289,292,270],
[294,0,259,273,277,274,294,285,281,298],
[307,291,0,271,284,275,284,286,306,292],
[292,277,279,0,270,272,295,289,295,301],
[275,273,266,280,0,278,283,277,282,288],
[283,276,275,278,272,0,291,296,281,294],
[259,256,266,255,267,259,0,275,276,277],
[261,265,264,261,273,254,275,0,274,276],
[258,269,244,255,268,269,274,276,0,284],
[280,252,258,249,262,256,273,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,327,257,289,310,326,309,257,307,342],
[223,0,277,317,282,382,326,278,280,346],
[293,273,0,276,241,308,218,258,292,324],
[261,233,274,0,291,380,238,277,240,286],
[240,268,309,259,0,341,287,274,287,322],
[224,168,242,170,209,0,171,195,173,204],
[241,224,332,312,263,379,0,277,243,307],
[293,272,292,273,276,355,273,0,309,341],
[243,270,258,310,263,377,307,241,0,301],
[208,204,226,264,228,346,243,209,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,303,265,266,289,292,317,317,291],
[216,0,257,240,247,266,207,261,227,293],
[247,293,0,264,300,269,237,311,249,289],
[285,310,286,0,295,314,266,299,292,298],
[284,303,250,255,0,278,290,318,287,317],
[261,284,281,236,272,0,305,296,282,332],
[258,343,313,284,260,245,0,266,252,272],
[233,289,239,251,232,254,284,0,268,258],
[233,323,301,258,263,268,298,282,0,300],
[259,257,261,252,233,218,278,292,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,282,291,306,284,290,267,288,282],
[288,0,300,300,281,299,305,315,308,265],
[268,250,0,260,296,236,292,303,294,252],
[259,250,290,0,278,269,255,265,285,258],
[244,269,254,272,0,246,259,289,277,254],
[266,251,314,281,304,0,289,299,306,278],
[260,245,258,295,291,261,0,284,280,258],
[283,235,247,285,261,251,266,0,276,264],
[262,242,256,265,273,244,270,274,0,267],
[268,285,298,292,296,272,292,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,280,270,289,271,271,280,290],
[271,0,278,286,267,288,294,278,291,298],
[267,272,0,281,269,276,303,271,275,297],
[270,264,269,0,261,275,279,243,264,303],
[280,283,281,289,0,280,295,263,278,297],
[261,262,274,275,270,0,265,264,266,283],
[279,256,247,271,255,285,0,266,272,292],
[279,272,279,307,287,286,284,0,276,293],
[270,259,275,286,272,284,278,274,0,279],
[260,252,253,247,253,267,258,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,262,255,259,257,276,265,262],
[288,0,266,277,265,239,246,260,260,269],
[283,284,0,284,259,259,258,260,261,274],
[288,273,266,0,264,270,259,289,255,280],
[295,285,291,286,0,280,285,273,293,300],
[291,311,291,280,270,0,262,302,277,276],
[293,304,292,291,265,288,0,277,271,271],
[274,290,290,261,277,248,273,0,279,278],
[285,290,289,295,257,273,279,271,0,266],
[288,281,276,270,250,274,279,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,255,223,274,252,263,249,243],
[276,0,280,268,245,300,269,281,277,278],
[266,270,0,287,271,298,291,276,281,295],
[295,282,263,0,287,319,291,286,264,319],
[327,305,279,263,0,283,304,303,301,276],
[276,250,252,231,267,0,273,265,240,259],
[298,281,259,259,246,277,0,285,259,272],
[287,269,274,264,247,285,265,0,233,247],
[301,273,269,286,249,310,291,317,0,280],
[307,272,255,231,274,291,278,303,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,274,276,281,272,256,254,256],
[273,0,254,269,254,264,290,262,257,259],
[285,296,0,270,269,267,299,260,260,250],
[276,281,280,0,273,292,302,273,287,269],
[274,296,281,277,0,263,278,268,259,266],
[269,286,283,258,287,0,285,271,252,256],
[278,260,251,248,272,265,0,246,247,249],
[294,288,290,277,282,279,304,0,268,270],
[296,293,290,263,291,298,303,282,0,275],
[294,291,300,281,284,294,301,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,296,282,268,289,273,294,265,289],
[264,0,285,261,275,290,275,280,259,306],
[254,265,0,270,274,263,252,279,267,278],
[268,289,280,0,284,262,279,310,284,291],
[282,275,276,266,0,274,285,321,268,308],
[261,260,287,288,276,0,288,329,285,298],
[277,275,298,271,265,262,0,290,281,303],
[256,270,271,240,229,221,260,0,274,290],
[285,291,283,266,282,265,269,276,0,302],
[261,244,272,259,242,252,247,260,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,295,290,293,284,274,269,305,289],
[257,0,278,276,278,273,260,284,271,260],
[255,272,0,272,278,252,243,263,277,263],
[260,274,278,0,295,273,275,261,283,259],
[257,272,272,255,0,266,261,280,271,260],
[266,277,298,277,284,0,272,282,298,282],
[276,290,307,275,289,278,0,282,298,285],
[281,266,287,289,270,268,268,0,308,292],
[245,279,273,267,279,252,252,242,0,262],
[261,290,287,291,290,268,265,258,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,264,326,223,265,266,265,393,261],
[308,0,286,283,284,351,241,268,308,330],
[286,264,0,329,244,289,285,311,395,268],
[224,267,221,0,268,271,265,290,376,243],
[327,266,306,282,0,351,241,289,351,328],
[285,199,261,279,199,0,259,221,328,260],
[284,309,265,285,309,291,0,289,352,263],
[285,282,239,260,261,329,261,0,307,238],
[157,242,155,174,199,222,198,243,0,153],
[289,220,282,307,222,290,287,312,397,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,251,289,262,268,261,255,287,305],
[251,0,265,272,279,269,279,250,265,291],
[299,285,0,304,257,255,257,256,295,274],
[261,278,246,0,286,254,229,242,269,273],
[288,271,293,264,0,269,256,244,269,274],
[282,281,295,296,281,0,291,257,272,284],
[289,271,293,321,294,259,0,288,297,295],
[295,300,294,308,306,293,262,0,301,292],
[263,285,255,281,281,278,253,249,0,278],
[245,259,276,277,276,266,255,258,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,254,344,305,286,316,302,190,303],
[247,0,282,296,219,302,250,282,199,216],
[296,268,0,311,236,267,311,264,222,313],
[206,254,239,0,208,271,269,299,208,254],
[245,331,314,342,0,296,295,263,282,279],
[264,248,283,279,254,0,263,295,266,296],
[234,300,239,281,255,287,0,284,208,220],
[248,268,286,251,287,255,266,0,190,249],
[360,351,328,342,268,284,342,360,0,298],
[247,334,237,296,271,254,330,301,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,316,281,279,290,277,288,299,300],
[295,0,275,300,294,295,273,287,303,298],
[234,275,0,290,294,264,259,270,295,253],
[269,250,260,0,283,270,286,272,309,266],
[271,256,256,267,0,260,282,306,306,250],
[260,255,286,280,290,0,286,274,298,262],
[273,277,291,264,268,264,0,285,267,275],
[262,263,280,278,244,276,265,0,262,259],
[251,247,255,241,244,252,283,288,0,276],
[250,252,297,284,300,288,275,291,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,277,277,257,281,285,281,268],
[286,0,283,299,269,287,287,272,297,285],
[288,267,0,264,271,253,269,273,289,256],
[273,251,286,0,298,276,283,275,284,246],
[273,281,279,252,0,262,256,265,281,251],
[293,263,297,274,288,0,297,254,279,262],
[269,263,281,267,294,253,0,263,283,265],
[265,278,277,275,285,296,287,0,296,260],
[269,253,261,266,269,271,267,254,0,243],
[282,265,294,304,299,288,285,290,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,285,265,254,269,267,268,277,270],
[300,0,296,263,252,253,269,266,276,252],
[265,254,0,260,269,277,250,270,298,243],
[285,287,290,0,271,266,267,267,285,279],
[296,298,281,279,0,267,278,276,289,257],
[281,297,273,284,283,0,283,269,302,280],
[283,281,300,283,272,267,0,291,316,281],
[282,284,280,283,274,281,259,0,283,284],
[273,274,252,265,261,248,234,267,0,234],
[280,298,307,271,293,270,269,266,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,275,275,550,550,550,275,275,550],
[0,0,275,275,275,550,550,275,275,0],
[275,275,0,550,275,550,275,275,275,275],
[275,275,0,0,275,275,275,275,275,275],
[0,275,275,275,0,550,550,0,275,275],
[0,0,0,275,0,0,0,0,275,0],
[0,0,275,275,0,550,0,0,275,0],
[275,275,275,275,550,550,550,0,275,275],
[275,275,275,275,275,275,275,275,0,275],
[0,550,275,275,275,550,550,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,284,272,287,275,289,262,289,287],
[253,0,266,233,251,256,275,231,269,263],
[266,284,0,248,272,249,263,258,285,270],
[278,317,302,0,323,277,301,269,309,287],
[263,299,278,227,0,258,276,249,281,279],
[275,294,301,273,292,0,283,282,306,282],
[261,275,287,249,274,267,0,236,275,248],
[288,319,292,281,301,268,314,0,297,301],
[261,281,265,241,269,244,275,253,0,244],
[263,287,280,263,271,268,302,249,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,278,278,268,275,262,290,279,283],
[245,0,252,269,267,251,253,262,264,265],
[272,298,0,282,289,264,263,290,300,275],
[272,281,268,0,286,274,266,284,290,267],
[282,283,261,264,0,264,264,278,287,283],
[275,299,286,276,286,0,280,292,297,283],
[288,297,287,284,286,270,0,293,288,295],
[260,288,260,266,272,258,257,0,271,274],
[271,286,250,260,263,253,262,279,0,263],
[267,285,275,283,267,267,255,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,246,262,273,263,257,269,256,287],
[265,0,259,268,261,260,265,263,268,280],
[304,291,0,268,267,276,274,287,290,314],
[288,282,282,0,245,274,285,291,252,265],
[277,289,283,305,0,286,266,266,266,274],
[287,290,274,276,264,0,265,244,267,274],
[293,285,276,265,284,285,0,277,253,262],
[281,287,263,259,284,306,273,0,243,274],
[294,282,260,298,284,283,297,307,0,282],
[263,270,236,285,276,276,288,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,219,184,255,146,330,181,219,217],
[367,0,293,254,327,254,331,182,365,290],
[331,257,0,366,402,253,368,257,293,363],
[366,296,184,0,255,253,328,181,253,252],
[295,223,148,295,0,220,332,183,292,329],
[404,296,297,297,330,0,257,256,327,220],
[220,219,182,222,218,293,0,216,255,143],
[369,368,293,369,367,294,334,0,367,254],
[331,185,257,297,258,223,295,183,0,256],
[333,260,187,298,221,330,407,296,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,280,268,255,267,295,256,274],
[288,0,279,282,266,281,265,272,277,271],
[282,271,0,282,289,268,275,283,282,280],
[270,268,268,0,268,272,255,275,261,264],
[282,284,261,282,0,257,269,277,282,282],
[295,269,282,278,293,0,274,288,275,288],
[283,285,275,295,281,276,0,288,281,275],
[255,278,267,275,273,262,262,0,263,259],
[294,273,268,289,268,275,269,287,0,277],
[276,279,270,286,268,262,275,291,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,308,278,271,282,266,276,299,275],
[290,0,275,289,283,302,285,293,305,240],
[242,275,0,294,272,272,292,278,307,251],
[272,261,256,0,292,306,302,283,285,246],
[279,267,278,258,0,269,271,264,304,260],
[268,248,278,244,281,0,268,273,264,243],
[284,265,258,248,279,282,0,257,269,242],
[274,257,272,267,286,277,293,0,303,249],
[251,245,243,265,246,286,281,247,0,238],
[275,310,299,304,290,307,308,301,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,249,254,257,262,247,250,250,269],
[303,0,284,270,291,303,274,292,273,300],
[301,266,0,264,272,260,276,282,249,279],
[296,280,286,0,276,302,273,289,270,282],
[293,259,278,274,0,289,274,265,262,277],
[288,247,290,248,261,0,263,287,256,281],
[303,276,274,277,276,287,0,280,280,279],
[300,258,268,261,285,263,270,0,266,267],
[300,277,301,280,288,294,270,284,0,303],
[281,250,271,268,273,269,271,283,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,245,252,306,219,231,271,247,257],
[291,0,280,270,341,228,274,297,276,277],
[305,270,0,251,302,286,282,289,256,274],
[298,280,299,0,295,284,260,286,255,308],
[244,209,248,255,0,215,193,242,231,245],
[331,322,264,266,335,0,242,287,249,317],
[319,276,268,290,357,308,0,300,242,323],
[279,253,261,264,308,263,250,0,250,291],
[303,274,294,295,319,301,308,300,0,316],
[293,273,276,242,305,233,227,259,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,274,256,256,272,275,270,271],
[269,0,289,246,278,248,286,261,267,264],
[267,261,0,260,257,249,263,245,262,257],
[276,304,290,0,285,274,292,280,276,277],
[294,272,293,265,0,276,273,253,284,271],
[294,302,301,276,274,0,294,269,292,277],
[278,264,287,258,277,256,0,265,277,262],
[275,289,305,270,297,281,285,0,272,264],
[280,283,288,274,266,258,273,278,0,276],
[279,286,293,273,279,273,288,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,256,242,255,259,254,281,245],
[286,0,275,280,298,276,303,263,281,230],
[268,275,0,258,257,261,268,234,258,238],
[294,270,292,0,285,309,318,240,325,267],
[308,252,293,265,0,290,321,281,315,272],
[295,274,289,241,260,0,296,281,298,262],
[291,247,282,232,229,254,0,242,254,242],
[296,287,316,310,269,269,308,0,311,278],
[269,269,292,225,235,252,296,239,0,229],
[305,320,312,283,278,288,308,272,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,282,280,279,273,284,282,294],
[270,0,284,249,282,280,286,283,271,288],
[274,266,0,288,279,301,292,302,282,303],
[268,301,262,0,275,258,285,286,289,274],
[270,268,271,275,0,255,259,255,256,281],
[271,270,249,292,295,0,283,299,284,289],
[277,264,258,265,291,267,0,280,278,285],
[266,267,248,264,295,251,270,0,273,252],
[268,279,268,261,294,266,272,277,0,276],
[256,262,247,276,269,261,265,298,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,256,257,270,274,273,285,262,267],
[290,0,261,284,255,257,276,274,263,282],
[294,289,0,283,276,282,310,287,273,286],
[293,266,267,0,284,283,298,286,268,288],
[280,295,274,266,0,283,312,307,289,307],
[276,293,268,267,267,0,282,286,270,269],
[277,274,240,252,238,268,0,274,245,262],
[265,276,263,264,243,264,276,0,266,288],
[288,287,277,282,261,280,305,284,0,269],
[283,268,264,262,243,281,288,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,282,272,260,271,262,280,288],
[277,0,272,277,288,256,285,306,299,297],
[263,278,0,260,265,281,277,275,267,298],
[268,273,290,0,263,255,280,293,280,281],
[278,262,285,287,0,257,273,282,284,264],
[290,294,269,295,293,0,274,287,294,289],
[279,265,273,270,277,276,0,304,265,299],
[288,244,275,257,268,263,246,0,269,284],
[270,251,283,270,266,256,285,281,0,296],
[262,253,252,269,286,261,251,266,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,294,302,278,298,305,282,275,262],
[266,0,282,275,268,280,299,274,256,256],
[256,268,0,273,253,267,279,280,275,260],
[248,275,277,0,270,285,275,269,273,262],
[272,282,297,280,0,287,285,283,276,268],
[252,270,283,265,263,0,278,261,264,249],
[245,251,271,275,265,272,0,277,264,258],
[268,276,270,281,267,289,273,0,270,269],
[275,294,275,277,274,286,286,280,0,283],
[288,294,290,288,282,301,292,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,253,390,389,206,252,343,276,229],
[249,0,345,389,341,249,225,320,295,273],
[297,205,0,366,341,227,206,250,319,203],
[160,161,184,0,227,159,181,158,160,227],
[161,209,209,323,0,163,185,185,230,208],
[344,301,323,391,387,0,209,322,251,321],
[298,325,344,369,365,341,0,343,273,254],
[207,230,300,392,365,228,207,0,252,232],
[274,255,231,390,320,299,277,298,0,251],
[321,277,347,323,342,229,296,318,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,273,278,255,271,272,270,270,264],
[301,0,296,282,268,291,290,283,279,288],
[277,254,0,274,259,281,270,264,277,256],
[272,268,276,0,274,293,281,267,268,276],
[295,282,291,276,0,275,280,282,285,277],
[279,259,269,257,275,0,272,277,268,257],
[278,260,280,269,270,278,0,274,272,267],
[280,267,286,283,268,273,276,0,271,274],
[280,271,273,282,265,282,278,279,0,270],
[286,262,294,274,273,293,283,276,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,319,270,307,386,291,288,330,319],
[245,0,304,256,235,329,263,233,306,259],
[231,246,0,257,278,298,217,215,316,288],
[280,294,293,0,282,399,267,304,276,294],
[243,315,272,268,0,364,271,313,316,298],
[164,221,252,151,186,0,208,161,209,221],
[259,287,333,283,279,342,0,260,345,287],
[262,317,335,246,237,389,290,0,320,287],
[220,244,234,274,234,341,205,230,0,218],
[231,291,262,256,252,329,263,263,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,284,264,244,252,282,242,274],
[279,0,316,281,255,269,252,370,315,279],
[265,234,0,243,281,220,237,310,244,261],
[266,269,307,0,276,233,275,304,208,229],
[286,295,269,274,0,249,280,258,296,244],
[306,281,330,317,301,0,290,317,289,242],
[298,298,313,275,270,260,0,344,305,275],
[268,180,240,246,292,233,206,0,255,237],
[308,235,306,342,254,261,245,295,0,215],
[276,271,289,321,306,308,275,313,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,277,300,282,281,275,280,311],
[265,0,285,277,272,258,254,275,249,301],
[255,265,0,263,271,279,272,272,265,289],
[273,273,287,0,296,274,288,286,259,286],
[250,278,279,254,0,259,260,260,284,300],
[268,292,271,276,291,0,274,284,284,303],
[269,296,278,262,290,276,0,271,268,262],
[275,275,278,264,290,266,279,0,270,280],
[270,301,285,291,266,266,282,280,0,298],
[239,249,261,264,250,247,288,270,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,299,290,280,270,310,297,290,296],
[273,0,314,282,286,268,303,316,278,286],
[251,236,0,257,263,254,273,292,270,255],
[260,268,293,0,254,259,286,276,274,259],
[270,264,287,296,0,292,279,292,271,285],
[280,282,296,291,258,0,294,293,295,283],
[240,247,277,264,271,256,0,276,273,263],
[253,234,258,274,258,257,274,0,271,253],
[260,272,280,276,279,255,277,279,0,273],
[254,264,295,291,265,267,287,297,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,265,261,269,247,260,281,243,274],
[298,0,288,258,282,288,274,286,266,313],
[285,262,0,260,263,258,269,269,271,284],
[289,292,290,0,259,289,277,295,259,284],
[281,268,287,291,0,271,281,284,294,291],
[303,262,292,261,279,0,253,265,276,287],
[290,276,281,273,269,297,0,294,283,292],
[269,264,281,255,266,285,256,0,251,280],
[307,284,279,291,256,274,267,299,0,285],
[276,237,266,266,259,263,258,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,282,294,300,280,254,273,272,282],
[256,0,284,275,258,243,269,268,279,262],
[268,266,0,271,274,263,263,255,268,259],
[256,275,279,0,259,262,266,257,280,269],
[250,292,276,291,0,264,285,277,274,268],
[270,307,287,288,286,0,263,275,274,278],
[296,281,287,284,265,287,0,283,292,286],
[277,282,295,293,273,275,267,0,288,301],
[278,271,282,270,276,276,258,262,0,266],
[268,288,291,281,282,272,264,249,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,301,277,277,268,301,276,276,265],
[292,0,297,271,295,300,322,304,306,297],
[249,253,0,257,257,280,305,256,279,279],
[273,279,293,0,263,271,291,278,300,278],
[273,255,293,287,0,281,295,276,282,282],
[282,250,270,279,269,0,308,266,306,280],
[249,228,245,259,255,242,0,262,262,244],
[274,246,294,272,274,284,288,0,287,260],
[274,244,271,250,268,244,288,263,0,271],
[285,253,271,272,268,270,306,290,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,322,228,174,273,300,329,397,249],
[200,0,298,251,126,227,200,326,325,294],
[228,252,0,129,226,227,201,228,274,253],
[322,299,421,0,248,275,296,328,369,273],
[376,424,324,302,0,298,273,375,325,247],
[277,323,323,275,252,0,148,304,324,300],
[250,350,349,254,277,402,0,377,301,251],
[221,224,322,222,175,246,173,0,272,173],
[153,225,276,181,225,226,249,278,0,200],
[301,256,297,277,303,250,299,377,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,280,284,277,301,276,282,291],
[287,0,291,276,290,283,279,262,281,266],
[268,259,0,281,274,273,297,262,270,270],
[270,274,269,0,266,255,268,249,260,272],
[266,260,276,284,0,277,248,260,273,275],
[273,267,277,295,273,0,269,267,274,283],
[249,271,253,282,302,281,0,253,269,273],
[274,288,288,301,290,283,297,0,277,268],
[268,269,280,290,277,276,281,273,0,278],
[259,284,280,278,275,267,277,282,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,297,269,300,265,278,255,275,259],
[289,0,292,273,325,272,266,257,281,255],
[253,258,0,271,260,260,244,232,257,238],
[281,277,279,0,279,283,279,280,276,242],
[250,225,290,271,0,241,263,258,258,238],
[285,278,290,267,309,0,273,277,278,294],
[272,284,306,271,287,277,0,274,242,249],
[295,293,318,270,292,273,276,0,281,262],
[275,269,293,274,292,272,308,269,0,243],
[291,295,312,308,312,256,301,288,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,269,275,274,261,277,284,267],
[292,0,272,276,284,281,287,277,312,271],
[287,278,0,272,292,291,285,284,295,276],
[281,274,278,0,289,275,277,280,303,281],
[275,266,258,261,0,258,268,270,295,272],
[276,269,259,275,292,0,271,287,297,278],
[289,263,265,273,282,279,0,276,306,272],
[273,273,266,270,280,263,274,0,301,283],
[266,238,255,247,255,253,244,249,0,247],
[283,279,274,269,278,272,278,267,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,306,312,304,295,276,322,275,304],
[273,0,277,283,255,279,254,320,265,290],
[244,273,0,288,266,278,249,284,300,279],
[238,267,262,0,292,272,235,302,282,301],
[246,295,284,258,0,272,274,295,297,283],
[255,271,272,278,278,0,257,287,286,282],
[274,296,301,315,276,293,0,293,308,287],
[228,230,266,248,255,263,257,0,256,272],
[275,285,250,268,253,264,242,294,0,295],
[246,260,271,249,267,268,263,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,281,263,294,257,283,264,260],
[279,0,267,261,287,299,269,296,280,262],
[276,283,0,280,289,288,268,280,271,272],
[269,289,270,0,268,282,282,283,263,272],
[287,263,261,282,0,290,269,280,265,274],
[256,251,262,268,260,0,243,267,249,250],
[293,281,282,268,281,307,0,306,278,283],
[267,254,270,267,270,283,244,0,262,270],
[286,270,279,287,285,301,272,288,0,269],
[290,288,278,278,276,300,267,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,288,266,294,267,273,279,295,274],
[278,0,288,303,282,273,275,295,318,307],
[262,262,0,276,267,257,281,275,311,280],
[284,247,274,0,268,251,255,271,280,258],
[256,268,283,282,0,265,273,288,291,271],
[283,277,293,299,285,0,275,292,292,289],
[277,275,269,295,277,275,0,284,274,291],
[271,255,275,279,262,258,266,0,294,274],
[255,232,239,270,259,258,276,256,0,262],
[276,243,270,292,279,261,259,276,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,256,253,247,270,276,262,263,242],
[279,0,269,250,269,257,279,276,283,281],
[294,281,0,274,257,275,283,279,277,258],
[297,300,276,0,263,278,269,273,289,269],
[303,281,293,287,0,275,272,293,282,276],
[280,293,275,272,275,0,294,279,293,270],
[274,271,267,281,278,256,0,261,300,273],
[288,274,271,277,257,271,289,0,288,257],
[287,267,273,261,268,257,250,262,0,263],
[308,269,292,281,274,280,277,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,306,271,308,300,270,287,297,284],
[208,0,226,215,231,226,245,254,192,236],
[244,324,0,296,292,296,254,265,271,312],
[279,335,254,0,314,276,263,272,257,260],
[242,319,258,236,0,227,235,225,230,233],
[250,324,254,274,323,0,291,281,261,264],
[280,305,296,287,315,259,0,262,268,280],
[263,296,285,278,325,269,288,0,232,255],
[253,358,279,293,320,289,282,318,0,286],
[266,314,238,290,317,286,270,295,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,315,233,364,364,277,232,218,191],
[209,0,233,252,274,280,232,297,190,254],
[235,317,0,123,300,278,212,234,194,233],
[317,298,427,0,384,364,278,274,278,256],
[186,276,250,166,0,297,208,170,189,208],
[186,270,272,186,253,0,168,145,171,190],
[273,318,338,272,342,382,0,298,192,189],
[318,253,316,276,380,405,252,0,212,250],
[332,360,356,272,361,379,358,338,0,338],
[359,296,317,294,342,360,361,300,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,266,274,276,309,261,300,286,276],
[234,0,277,272,292,281,246,269,280,239],
[284,273,0,250,280,295,248,250,302,282],
[276,278,300,0,295,300,259,256,312,274],
[274,258,270,255,0,291,236,256,275,279],
[241,269,255,250,259,0,254,266,277,254],
[289,304,302,291,314,296,0,263,308,289],
[250,281,300,294,294,284,287,0,297,288],
[264,270,248,238,275,273,242,253,0,241],
[274,311,268,276,271,296,261,262,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,264,257,253,267,259,257,256,275],
[292,0,278,285,274,292,282,297,279,291],
[286,272,0,275,279,267,255,279,269,279],
[293,265,275,0,276,252,258,281,258,271],
[297,276,271,274,0,271,288,280,292,282],
[283,258,283,298,279,0,295,278,260,275],
[291,268,295,292,262,255,0,289,272,274],
[293,253,271,269,270,272,261,0,279,270],
[294,271,281,292,258,290,278,271,0,279],
[275,259,271,279,268,275,276,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,273,297,281,271,276,277,288,283],
[265,0,271,277,275,261,267,269,268,275],
[277,279,0,274,288,277,265,283,281,261],
[253,273,276,0,277,260,262,270,276,267],
[269,275,262,273,0,262,269,281,266,274],
[279,289,273,290,288,0,282,280,295,280],
[274,283,285,288,281,268,0,289,277,282],
[273,281,267,280,269,270,261,0,258,263],
[262,282,269,274,284,255,273,292,0,265],
[267,275,289,283,276,270,268,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,299,311,282,282,307,278,264,280],
[272,0,286,296,284,284,272,288,283,273],
[251,264,0,290,252,270,264,257,268,273],
[239,254,260,0,252,275,252,250,254,267],
[268,266,298,298,0,286,306,279,292,292],
[268,266,280,275,264,0,270,247,269,286],
[243,278,286,298,244,280,0,271,261,277],
[272,262,293,300,271,303,279,0,270,275],
[286,267,282,296,258,281,289,280,0,272],
[270,277,277,283,258,264,273,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,290,291,287,271,294,293,296,300],
[265,0,287,272,278,274,275,275,305,290],
[260,263,0,267,266,243,261,266,278,267],
[259,278,283,0,282,264,277,290,290,280],
[263,272,284,268,0,275,268,274,276,275],
[279,276,307,286,275,0,279,280,295,289],
[256,275,289,273,282,271,0,276,296,272],
[257,275,284,260,276,270,274,0,271,276],
[254,245,272,260,274,255,254,279,0,267],
[250,260,283,270,275,261,278,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,254,258,263,259,244,261,258,292],
[286,0,263,241,244,256,252,278,248,251],
[296,287,0,249,274,266,280,267,270,294],
[292,309,301,0,282,285,272,286,268,291],
[287,306,276,268,0,283,261,290,293,313],
[291,294,284,265,267,0,256,289,268,272],
[306,298,270,278,289,294,0,288,272,270],
[289,272,283,264,260,261,262,0,255,275],
[292,302,280,282,257,282,278,295,0,290],
[258,299,256,259,237,278,280,275,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,281,219,231,248,265,249,278,308],
[344,0,278,259,287,291,359,319,341,355],
[269,272,0,288,311,291,302,315,329,333],
[331,291,262,0,299,307,279,320,294,279],
[319,263,239,251,0,281,336,261,292,320],
[302,259,259,243,269,0,328,312,303,315],
[285,191,248,271,214,222,0,285,292,247],
[301,231,235,230,289,238,265,0,263,308],
[272,209,221,256,258,247,258,287,0,318],
[242,195,217,271,230,235,303,242,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,252,275,270,274,263,272,261,264],
[272,0,246,231,262,259,252,280,283,280],
[298,304,0,267,300,275,275,283,277,286],
[275,319,283,0,295,271,288,272,300,286],
[280,288,250,255,0,256,261,276,279,265],
[276,291,275,279,294,0,274,282,272,298],
[287,298,275,262,289,276,0,277,270,255],
[278,270,267,278,274,268,273,0,277,265],
[289,267,273,250,271,278,280,273,0,273],
[286,270,264,264,285,252,295,285,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,272,270,281,270,274,278,267],
[269,0,272,274,282,278,273,270,277,285],
[257,278,0,259,265,282,275,265,270,277],
[278,276,291,0,281,300,267,291,285,276],
[280,268,285,269,0,283,268,286,255,288],
[269,272,268,250,267,0,249,259,282,290],
[280,277,275,283,282,301,0,292,298,293],
[276,280,285,259,264,291,258,0,286,288],
[272,273,280,265,295,268,252,264,0,291],
[283,265,273,274,262,260,257,262,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,269,264,258,292,270,279,244,272],
[273,0,281,245,244,304,263,257,239,271],
[281,269,0,291,301,309,294,300,288,290],
[286,305,259,0,278,292,277,288,273,289],
[292,306,249,272,0,299,293,280,274,281],
[258,246,241,258,251,0,256,261,234,266],
[280,287,256,273,257,294,0,288,263,287],
[271,293,250,262,270,289,262,0,257,269],
[306,311,262,277,276,316,287,293,0,278],
[278,279,260,261,269,284,263,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,264,285,270,284,282,277,277],
[269,0,260,261,272,260,270,265,273,252],
[269,290,0,287,263,289,270,269,286,287],
[286,289,263,0,296,283,270,259,277,278],
[265,278,287,254,0,271,289,270,279,290],
[280,290,261,267,279,0,277,265,289,279],
[266,280,280,280,261,273,0,261,276,267],
[268,285,281,291,280,285,289,0,278,289],
[273,277,264,273,271,261,274,272,0,267],
[273,298,263,272,260,271,283,261,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,286,297,294,270,310,280,290],
[270,0,276,259,282,256,253,286,285,264],
[272,274,0,268,291,280,259,295,280,279],
[264,291,282,0,285,292,285,304,276,271],
[253,268,259,265,0,253,261,265,266,269],
[256,294,270,258,297,0,264,298,284,294],
[280,297,291,265,289,286,0,313,284,283],
[240,264,255,246,285,252,237,0,258,261],
[270,265,270,274,284,266,266,292,0,261],
[260,286,271,279,281,256,267,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,292,305,285,274,311,281,289,326],
[248,0,299,266,269,263,266,250,276,308],
[258,251,0,271,259,264,279,252,266,313],
[245,284,279,0,306,250,287,275,304,326],
[265,281,291,244,0,278,305,278,280,313],
[276,287,286,300,272,0,323,294,276,314],
[239,284,271,263,245,227,0,261,272,311],
[269,300,298,275,272,256,289,0,279,318],
[261,274,284,246,270,274,278,271,0,332],
[224,242,237,224,237,236,239,232,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,300,285,318,279,273,292,294,304],
[262,0,292,273,294,272,275,264,277,273],
[250,258,0,262,284,272,261,273,269,267],
[265,277,288,0,288,282,273,279,285,293],
[232,256,266,262,0,275,251,254,261,266],
[271,278,278,268,275,0,259,269,269,277],
[277,275,289,277,299,291,0,275,284,292],
[258,286,277,271,296,281,275,0,269,284],
[256,273,281,265,289,281,266,281,0,287],
[246,277,283,257,284,273,258,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,267,268,274,267,289,252,260,273],
[302,0,279,286,293,296,302,266,273,281],
[283,271,0,277,279,271,292,269,260,276],
[282,264,273,0,272,267,284,271,253,271],
[276,257,271,278,0,268,285,264,250,263],
[283,254,279,283,282,0,309,284,278,296],
[261,248,258,266,265,241,0,251,236,268],
[298,284,281,279,286,266,299,0,267,293],
[290,277,290,297,300,272,314,283,0,292],
[277,269,274,279,287,254,282,257,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,274,254,287,252,269,271,265],
[289,0,276,304,272,282,274,282,250,256],
[275,274,0,283,250,281,286,282,274,273],
[276,246,267,0,253,263,272,274,250,244],
[296,278,300,297,0,301,275,280,265,277],
[263,268,269,287,249,0,263,278,263,254],
[298,276,264,278,275,287,0,292,258,262],
[281,268,268,276,270,272,258,0,271,248],
[279,300,276,300,285,287,292,279,0,256],
[285,294,277,306,273,296,288,302,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,258,260,262,256,264,274,256,275],
[293,0,281,283,283,286,279,292,262,268],
[292,269,0,267,282,267,290,286,272,280],
[290,267,283,0,284,281,256,290,269,280],
[288,267,268,266,0,260,284,279,268,278],
[294,264,283,269,290,0,285,281,254,278],
[286,271,260,294,266,265,0,299,279,290],
[276,258,264,260,271,269,251,0,253,278],
[294,288,278,281,282,296,271,297,0,296],
[275,282,270,270,272,272,260,272,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,249,292,288,296,276,273,255,278],
[275,0,261,286,273,303,262,267,272,275],
[301,289,0,297,288,306,279,296,265,286],
[258,264,253,0,289,296,249,267,254,278],
[262,277,262,261,0,278,256,271,248,282],
[254,247,244,254,272,0,244,273,247,256],
[274,288,271,301,294,306,0,297,285,285],
[277,283,254,283,279,277,253,0,272,277],
[295,278,285,296,302,303,265,278,0,295],
[272,275,264,272,268,294,265,273,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,273,291,266,286,286,279,282,288],
[267,0,256,281,270,281,276,262,267,284],
[277,294,0,289,290,295,274,286,285,286],
[259,269,261,0,258,277,271,264,271,276],
[284,280,260,292,0,289,268,275,276,300],
[264,269,255,273,261,0,263,258,259,264],
[264,274,276,279,282,287,0,282,296,289],
[271,288,264,286,275,292,268,0,279,287],
[268,283,265,279,274,291,254,271,0,290],
[262,266,264,274,250,286,261,263,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,301,278,274,290,286,287,291,287],
[296,0,303,300,306,287,260,289,326,323],
[249,247,0,272,247,279,258,272,276,271],
[272,250,278,0,296,268,228,297,292,286],
[276,244,303,254,0,264,259,284,278,256],
[260,263,271,282,286,0,252,282,297,299],
[264,290,292,322,291,298,0,309,302,317],
[263,261,278,253,266,268,241,0,267,283],
[259,224,274,258,272,253,248,283,0,274],
[263,227,279,264,294,251,233,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,365,365,272,184,458,365,458,276],
[277,0,183,461,185,369,278,183,185,275],
[185,367,0,458,274,277,278,458,367,370],
[185,89,92,0,185,277,185,183,274,92],
[278,365,276,365,0,277,186,184,366,276],
[366,181,273,273,273,0,366,181,366,184],
[92,272,272,365,364,184,0,180,180,183],
[185,367,92,367,366,369,370,0,459,277],
[92,365,183,276,184,184,370,91,0,183],
[274,275,180,458,274,366,367,273,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,265,275,269,286,256,283,262,260],
[292,0,266,288,280,283,283,297,281,274],
[285,284,0,293,269,295,278,290,288,278],
[275,262,257,0,276,277,272,265,275,266],
[281,270,281,274,0,285,268,275,291,267],
[264,267,255,273,265,0,264,282,278,265],
[294,267,272,278,282,286,0,299,286,274],
[267,253,260,285,275,268,251,0,282,267],
[288,269,262,275,259,272,264,268,0,279],
[290,276,272,284,283,285,276,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,275,271,316,286,309,291,305],
[276,0,263,237,276,286,254,279,289,276],
[271,287,0,281,294,304,278,302,305,304],
[275,313,269,0,294,322,277,310,308,319],
[279,274,256,256,0,281,260,279,295,289],
[234,264,246,228,269,0,257,269,291,273],
[264,296,272,273,290,293,0,289,290,303],
[241,271,248,240,271,281,261,0,256,288],
[259,261,245,242,255,259,260,294,0,277],
[245,274,246,231,261,277,247,262,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,283,280,272,262,315,257,292,291],
[310,0,300,309,292,287,312,275,292,279],
[267,250,0,242,253,249,278,222,283,280],
[270,241,308,0,261,277,278,248,298,246],
[278,258,297,289,0,251,300,285,298,261],
[288,263,301,273,299,0,285,252,286,298],
[235,238,272,272,250,265,0,240,274,273],
[293,275,328,302,265,298,310,0,289,312],
[258,258,267,252,252,264,276,261,0,272],
[259,271,270,304,289,252,277,238,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,275,194,197,196,235,116,273,235],
[196,0,236,195,158,117,354,194,233,315],
[275,314,0,233,78,273,313,117,155,313],
[356,355,317,0,276,237,276,275,314,352],
[353,392,472,274,0,311,432,233,273,354],
[354,433,277,313,239,0,354,234,234,433],
[315,196,237,274,118,196,0,235,234,235],
[434,356,433,275,317,316,315,0,356,354],
[277,317,395,236,277,316,316,194,0,314],
[315,235,237,198,196,117,315,196,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,289,278,303,285,287,288,290,269],
[285,0,283,280,297,277,282,280,288,274],
[261,267,0,274,281,273,281,282,276,264],
[272,270,276,0,295,266,282,275,277,273],
[247,253,269,255,0,276,276,259,266,264],
[265,273,277,284,274,0,277,281,285,280],
[263,268,269,268,274,273,0,276,267,276],
[262,270,268,275,291,269,274,0,291,265],
[260,262,274,273,284,265,283,259,0,257],
[281,276,286,277,286,270,274,285,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,266,273,268,258,251,263,298],
[271,0,270,252,287,252,296,286,263,277],
[280,280,0,269,273,262,271,268,265,281],
[284,298,281,0,291,266,293,278,280,293],
[277,263,277,259,0,256,274,268,261,288],
[282,298,288,284,294,0,299,295,273,299],
[292,254,279,257,276,251,0,257,278,267],
[299,264,282,272,282,255,293,0,277,283],
[287,287,285,270,289,277,272,273,0,284],
[252,273,269,257,262,251,283,267,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,291,295,281,268,280,282,284,274],
[270,0,281,281,266,267,270,264,279,268],
[259,269,0,268,272,282,279,279,277,282],
[255,269,282,0,270,268,275,268,277,259],
[269,284,278,280,0,275,281,276,277,276],
[282,283,268,282,275,0,264,272,265,275],
[270,280,271,275,269,286,0,282,265,280],
[268,286,271,282,274,278,268,0,274,270],
[266,271,273,273,273,285,285,276,0,279],
[276,282,268,291,274,275,270,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,296,282,286,275,290,271,266,282],
[263,0,288,284,250,251,300,255,275,285],
[254,262,0,271,233,261,287,251,270,251],
[268,266,279,0,250,264,289,255,278,258],
[264,300,317,300,0,278,322,284,324,297],
[275,299,289,286,272,0,284,259,279,298],
[260,250,263,261,228,266,0,251,263,251],
[279,295,299,295,266,291,299,0,273,281],
[284,275,280,272,226,271,287,277,0,273],
[268,265,299,292,253,252,299,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,264,262,277,266,262,252,283,302],
[268,0,245,269,297,291,283,268,268,290],
[286,305,0,270,288,306,283,263,281,303],
[288,281,280,0,321,310,266,298,318,318],
[273,253,262,229,0,238,289,245,286,269],
[284,259,244,240,312,0,283,259,265,285],
[288,267,267,284,261,267,0,269,318,285],
[298,282,287,252,305,291,281,0,316,266],
[267,282,269,232,264,285,232,234,0,244],
[248,260,247,232,281,265,265,284,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,279,289,280,273,299,288,265,282],
[261,0,252,267,254,244,296,252,273,261],
[271,298,0,271,286,278,298,279,267,288],
[261,283,279,0,256,279,304,286,269,285],
[270,296,264,294,0,270,311,288,252,284],
[277,306,272,271,280,0,303,281,276,304],
[251,254,252,246,239,247,0,238,232,245],
[262,298,271,264,262,269,312,0,294,285],
[285,277,283,281,298,274,318,256,0,279],
[268,289,262,265,266,246,305,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,241,250,270,276,244,261,245],
[278,0,277,249,263,257,254,291,265,259],
[287,273,0,269,274,278,286,286,277,296],
[309,301,281,0,278,296,294,306,270,281],
[300,287,276,272,0,283,267,314,266,269],
[280,293,272,254,267,0,261,275,256,264],
[274,296,264,256,283,289,0,281,262,284],
[306,259,264,244,236,275,269,0,250,251],
[289,285,273,280,284,294,288,300,0,265],
[305,291,254,269,281,286,266,299,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,276,269,272,259,272,260,249,253],
[269,0,271,264,255,265,245,261,241,258],
[274,279,0,273,281,261,247,278,247,264],
[281,286,277,0,266,248,257,265,242,262],
[278,295,269,284,0,273,266,285,268,271],
[291,285,289,302,277,0,287,288,275,285],
[278,305,303,293,284,263,0,291,267,266],
[290,289,272,285,265,262,259,0,259,254],
[301,309,303,308,282,275,283,291,0,278],
[297,292,286,288,279,265,284,296,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,294,248,262,294,271,258,280,289],
[291,0,275,274,285,279,285,272,302,280],
[256,275,0,255,264,260,255,254,259,262],
[302,276,295,0,280,281,264,268,271,276],
[288,265,286,270,0,269,261,255,284,281],
[256,271,290,269,281,0,268,276,299,261],
[279,265,295,286,289,282,0,279,288,263],
[292,278,296,282,295,274,271,0,284,282],
[270,248,291,279,266,251,262,266,0,271],
[261,270,288,274,269,289,287,268,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,263,277,252,273,261,264,280,287],
[257,0,260,290,272,271,276,279,274,277],
[287,290,0,291,286,295,265,293,292,293],
[273,260,259,0,256,272,250,255,265,268],
[298,278,264,294,0,286,268,277,292,288],
[277,279,255,278,264,0,247,284,276,275],
[289,274,285,300,282,303,0,289,312,308],
[286,271,257,295,273,266,261,0,281,278],
[270,276,258,285,258,274,238,269,0,301],
[263,273,257,282,262,275,242,272,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,269,280,282,279,294,283,276],
[285,0,271,264,278,260,297,291,294,299],
[266,279,0,285,275,277,269,284,296,278],
[281,286,265,0,283,270,310,291,307,293],
[270,272,275,267,0,285,274,282,295,278],
[268,290,273,280,265,0,261,276,303,277],
[271,253,281,240,276,289,0,309,295,275],
[256,259,266,259,268,274,241,0,274,261],
[267,256,254,243,255,247,255,276,0,264],
[274,251,272,257,272,273,275,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,292,299,290,319,278,278,272,294],
[252,0,293,289,296,282,259,291,244,277],
[258,257,0,271,283,293,258,286,272,277],
[251,261,279,0,268,279,264,301,255,280],
[260,254,267,282,0,303,234,248,279,295],
[231,268,257,271,247,0,242,275,243,285],
[272,291,292,286,316,308,0,291,281,320],
[272,259,264,249,302,275,259,0,239,309],
[278,306,278,295,271,307,269,311,0,302],
[256,273,273,270,255,265,230,241,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,292,287,234,275,286,239,262],
[290,0,273,278,276,262,265,323,281,315],
[269,277,0,261,255,225,279,300,256,269],
[258,272,289,0,282,222,261,281,215,272],
[263,274,295,268,0,235,260,253,249,279],
[316,288,325,328,315,0,277,312,275,311],
[275,285,271,289,290,273,0,310,289,315],
[264,227,250,269,297,238,240,0,241,300],
[311,269,294,335,301,275,261,309,0,295],
[288,235,281,278,271,239,235,250,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,284,279,255,261,275,283,296,257],
[245,0,235,257,260,224,275,303,257,260],
[266,315,0,281,273,290,299,307,270,252],
[271,293,269,0,301,268,283,277,278,266],
[295,290,277,249,0,261,298,312,285,270],
[289,326,260,282,289,0,312,315,281,291],
[275,275,251,267,252,238,0,273,270,261],
[267,247,243,273,238,235,277,0,236,276],
[254,293,280,272,265,269,280,314,0,261],
[293,290,298,284,280,259,289,274,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,271,245,262,275,263,284,279,274],
[250,0,270,266,266,264,273,273,263,269],
[279,280,0,293,269,273,271,279,283,270],
[305,284,257,0,290,253,278,278,292,289],
[288,284,281,260,0,271,257,279,282,274],
[275,286,277,297,279,0,267,267,273,284],
[287,277,279,272,293,283,0,276,298,291],
[266,277,271,272,271,283,274,0,291,280],
[271,287,267,258,268,277,252,259,0,256],
[276,281,280,261,276,266,259,270,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,264,257,247,282,253,287,265],
[272,0,265,280,258,264,268,259,287,260],
[279,285,0,271,272,269,285,275,298,279],
[286,270,279,0,255,259,269,262,284,272],
[293,292,278,295,0,271,297,271,297,261],
[303,286,281,291,279,0,275,271,302,279],
[268,282,265,281,253,275,0,282,292,276],
[297,291,275,288,279,279,268,0,299,278],
[263,263,252,266,253,248,258,251,0,259],
[285,290,271,278,289,271,274,272,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,291,275,301,267,280,288,286,273],
[265,0,305,255,293,242,286,279,266,304],
[259,245,0,261,279,252,285,241,252,270],
[275,295,289,0,307,264,285,268,307,273],
[249,257,271,243,0,259,262,254,246,256],
[283,308,298,286,291,0,311,272,305,282],
[270,264,265,265,288,239,0,264,270,274],
[262,271,309,282,296,278,286,0,283,298],
[264,284,298,243,304,245,280,267,0,291],
[277,246,280,277,294,268,276,252,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,301,283,274,274,286,287,290],
[263,0,260,278,268,262,259,269,285,287],
[272,290,0,294,282,287,286,287,282,291],
[249,272,256,0,251,243,262,256,262,283],
[267,282,268,299,0,265,275,284,296,263],
[276,288,263,307,285,0,270,294,278,279],
[276,291,264,288,275,280,0,291,278,281],
[264,281,263,294,266,256,259,0,279,274],
[263,265,268,288,254,272,272,271,0,277],
[260,263,259,267,287,271,269,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,221,244,258,260,272,251,275,275],
[290,0,247,221,297,187,232,224,235,275],
[329,303,0,285,286,275,283,285,326,323],
[306,329,265,0,326,315,267,350,267,325],
[292,253,264,224,0,271,210,263,240,263],
[290,363,275,235,279,0,301,272,240,340],
[278,318,267,283,340,249,0,300,303,325],
[299,326,265,200,287,278,250,0,254,254],
[275,315,224,283,310,310,247,296,0,314],
[275,275,227,225,287,210,225,296,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,254,224,252,254,239,260,236,252],
[291,0,268,292,296,298,285,301,275,251],
[296,282,0,283,293,261,278,272,310,308],
[326,258,267,0,272,269,272,256,277,277],
[298,254,257,278,0,244,272,255,295,253],
[296,252,289,281,306,0,280,276,280,278],
[311,265,272,278,278,270,0,275,294,278],
[290,249,278,294,295,274,275,0,297,278],
[314,275,240,273,255,270,256,253,0,251],
[298,299,242,273,297,272,272,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,264,307,300,253,377,310,311,298],
[237,0,278,262,316,280,325,275,262,295],
[286,272,0,285,287,223,316,250,284,302],
[243,288,265,0,285,284,330,266,281,285],
[250,234,263,265,0,204,299,248,245,280],
[297,270,327,266,346,0,283,311,280,346],
[173,225,234,220,251,267,0,284,265,255],
[240,275,300,284,302,239,266,0,268,332],
[239,288,266,269,305,270,285,282,0,299],
[252,255,248,265,270,204,295,218,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,278,279,279,278,283,267,278,274],
[261,0,268,282,260,281,282,270,268,276],
[272,282,0,279,263,279,274,282,280,289],
[271,268,271,0,287,279,287,269,298,273],
[271,290,287,263,0,294,282,272,273,280],
[272,269,271,271,256,0,273,286,280,270],
[267,268,276,263,268,277,0,277,247,277],
[283,280,268,281,278,264,273,0,266,290],
[272,282,270,252,277,270,303,284,0,271],
[276,274,261,277,270,280,273,260,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,297,273,279,282,279,270,251,261],
[264,0,298,276,267,271,281,278,288,277],
[253,252,0,273,257,270,287,272,257,276],
[277,274,277,0,261,266,269,284,256,285],
[271,283,293,289,0,287,277,292,277,271],
[268,279,280,284,263,0,273,280,274,276],
[271,269,263,281,273,277,0,281,275,282],
[280,272,278,266,258,270,269,0,250,285],
[299,262,293,294,273,276,275,300,0,287],
[289,273,274,265,279,274,268,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,256,239,254,246,253,242,249,269],
[297,0,281,276,270,272,293,259,280,269],
[294,269,0,266,276,266,302,287,288,309],
[311,274,284,0,274,295,273,252,286,313],
[296,280,274,276,0,286,286,273,269,287],
[304,278,284,255,264,0,286,269,301,276],
[297,257,248,277,264,264,0,265,272,280],
[308,291,263,298,277,281,285,0,280,307],
[301,270,262,264,281,249,278,270,0,271],
[281,281,241,237,263,274,270,243,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,293,287,320,305,288,299,275,299],
[264,0,277,274,301,319,281,299,270,321],
[257,273,0,264,273,286,269,265,261,269],
[263,276,286,0,284,291,259,277,272,263],
[230,249,277,266,0,273,249,254,248,295],
[245,231,264,259,277,0,248,272,258,261],
[262,269,281,291,301,302,0,287,267,303],
[251,251,285,273,296,278,263,0,262,270],
[275,280,289,278,302,292,283,288,0,317],
[251,229,281,287,255,289,247,280,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,282,281,282,279,288,269,276,271],
[270,0,279,278,286,276,297,280,292,276],
[268,271,0,275,268,287,287,279,277,265],
[269,272,275,0,283,286,304,283,276,281],
[268,264,282,267,0,271,289,259,286,278],
[271,274,263,264,279,0,280,265,280,280],
[262,253,263,246,261,270,0,267,257,253],
[281,270,271,267,291,285,283,0,277,269],
[274,258,273,274,264,270,293,273,0,269],
[279,274,285,269,272,270,297,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,296,279,300,293,287,281,292,327],
[275,0,275,281,277,281,278,258,271,296],
[254,275,0,257,277,263,284,238,272,302],
[271,269,293,0,275,279,293,251,282,320],
[250,273,273,275,0,268,301,272,245,325],
[257,269,287,271,282,0,259,255,271,295],
[263,272,266,257,249,291,0,251,268,297],
[269,292,312,299,278,295,299,0,309,318],
[258,279,278,268,305,279,282,241,0,318],
[223,254,248,230,225,255,253,232,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,246,273,270,251,239,239,263,230],
[285,0,256,262,267,264,247,288,274,243],
[304,294,0,304,304,277,276,284,306,275],
[277,288,246,0,274,265,251,284,240,256],
[280,283,246,276,0,247,263,269,270,240],
[299,286,273,285,303,0,260,299,302,278],
[311,303,274,299,287,290,0,311,293,266],
[311,262,266,266,281,251,239,0,258,250],
[287,276,244,310,280,248,257,292,0,254],
[320,307,275,294,310,272,284,300,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,269,276,259,269,271,281,268],
[269,0,264,259,276,258,247,261,269,246],
[272,286,0,280,282,272,264,270,254,282],
[281,291,270,0,271,244,245,279,250,275],
[274,274,268,279,0,270,265,287,263,262],
[291,292,278,306,280,0,258,292,243,274],
[281,303,286,305,285,292,0,306,273,293],
[279,289,280,271,263,258,244,0,261,264],
[269,281,296,300,287,307,277,289,0,288],
[282,304,268,275,288,276,257,286,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,308,283,265,276,309,293,272,283],
[274,0,253,274,265,275,279,268,271,276],
[242,297,0,266,272,268,285,277,264,265],
[267,276,284,0,272,283,277,296,272,282],
[285,285,278,278,0,278,303,297,273,283],
[274,275,282,267,272,0,289,276,274,276],
[241,271,265,273,247,261,0,270,255,256],
[257,282,273,254,253,274,280,0,269,265],
[278,279,286,278,277,276,295,281,0,269],
[267,274,285,268,267,274,294,285,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,277,296,283,257,285,281,268],
[270,0,284,258,268,278,264,251,279,253],
[263,266,0,264,286,263,273,259,271,262],
[273,292,286,0,286,278,278,260,285,256],
[254,282,264,264,0,274,277,262,272,264],
[267,272,287,272,276,0,271,243,272,279],
[293,286,277,272,273,279,0,278,267,265],
[265,299,291,290,288,307,272,0,301,264],
[269,271,279,265,278,278,283,249,0,264],
[282,297,288,294,286,271,285,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,275,282,257,280,276,287,271],
[277,0,282,291,278,271,289,278,277,285],
[273,268,0,280,295,271,281,286,283,282],
[275,259,270,0,274,259,264,261,284,260],
[268,272,255,276,0,265,264,280,271,273],
[293,279,279,291,285,0,270,283,295,273],
[270,261,269,286,286,280,0,291,283,282],
[274,272,264,289,270,267,259,0,289,266],
[263,273,267,266,279,255,267,261,0,270],
[279,265,268,290,277,277,268,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,274,284,241,267,248,257,264],
[297,0,318,300,292,268,264,303,269,252],
[275,232,0,282,253,254,255,267,236,252],
[276,250,268,0,260,251,247,271,226,253],
[266,258,297,290,0,268,239,281,253,286],
[309,282,296,299,282,0,266,294,274,264],
[283,286,295,303,311,284,0,292,282,271],
[302,247,283,279,269,256,258,0,270,285],
[293,281,314,324,297,276,268,280,0,296],
[286,298,298,297,264,286,279,265,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,289,281,267,280,218,254,287,285],
[297,0,294,271,311,290,285,269,293,289],
[261,256,0,242,266,239,253,269,292,302],
[269,279,308,0,286,275,230,287,319,278],
[283,239,284,264,0,297,241,293,341,268],
[270,260,311,275,253,0,246,290,290,303],
[332,265,297,320,309,304,0,299,322,318],
[296,281,281,263,257,260,251,0,289,297],
[263,257,258,231,209,260,228,261,0,266],
[265,261,248,272,282,247,232,253,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,263,284,264,303,262,299,297],
[272,0,251,240,262,269,267,257,279,257],
[275,299,0,271,291,277,287,292,287,296],
[287,310,279,0,297,270,307,288,302,269],
[266,288,259,253,0,261,288,268,289,269],
[286,281,273,280,289,0,301,271,302,282],
[247,283,263,243,262,249,0,277,273,263],
[288,293,258,262,282,279,273,0,280,273],
[251,271,263,248,261,248,277,270,0,271],
[253,293,254,281,281,268,287,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,256,269,280,294,265,273,276,304],
[286,0,253,272,286,308,310,290,282,303],
[294,297,0,304,303,304,306,272,300,324],
[281,278,246,0,277,295,298,284,286,283],
[270,264,247,273,0,281,282,257,282,288],
[256,242,246,255,269,0,271,255,275,271],
[285,240,244,252,268,279,0,259,255,273],
[277,260,278,266,293,295,291,0,284,290],
[274,268,250,264,268,275,295,266,0,301],
[246,247,226,267,262,279,277,260,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,278,286,250,283,281,295,291,277],
[269,0,265,280,267,286,289,279,285,259],
[272,285,0,296,254,273,290,284,280,267],
[264,270,254,0,253,240,258,294,278,261],
[300,283,296,297,0,291,265,304,296,286],
[267,264,277,310,259,0,267,290,298,278],
[269,261,260,292,285,283,0,304,297,267],
[255,271,266,256,246,260,246,0,244,264],
[259,265,270,272,254,252,253,306,0,266],
[273,291,283,289,264,272,283,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,312,288,284,286,275,277,275,304],
[257,0,262,284,248,254,252,271,286,266],
[238,288,0,272,265,278,248,312,260,254],
[262,266,278,0,275,298,259,278,280,279],
[266,302,285,275,0,295,272,294,295,300],
[264,296,272,252,255,0,249,266,284,269],
[275,298,302,291,278,301,0,309,286,299],
[273,279,238,272,256,284,241,0,288,275],
[275,264,290,270,255,266,264,262,0,271],
[246,284,296,271,250,281,251,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,285,270,293,293,298,289,285],
[279,0,284,278,278,274,284,288,284,257],
[256,266,0,285,276,278,272,289,262,266],
[265,272,265,0,262,271,254,286,264,272],
[280,272,274,288,0,288,280,294,285,276],
[257,276,272,279,262,0,286,291,271,276],
[257,266,278,296,270,264,0,283,264,258],
[252,262,261,264,256,259,267,0,275,253],
[261,266,288,286,265,279,286,275,0,263],
[265,293,284,278,274,274,292,297,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,248,298,300,304,293,285,292,302],
[269,0,275,294,291,273,289,270,275,275],
[302,275,0,292,290,288,306,280,296,281],
[252,256,258,0,305,264,262,274,292,294],
[250,259,260,245,0,257,291,250,269,279],
[246,277,262,286,293,0,265,268,268,279],
[257,261,244,288,259,285,0,244,280,293],
[265,280,270,276,300,282,306,0,274,282],
[258,275,254,258,281,282,270,276,0,280],
[248,275,269,256,271,271,257,268,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,265,290,257,265,264,269,294,273],
[256,0,248,288,262,266,252,266,259,268],
[285,302,0,303,287,279,277,279,278,275],
[260,262,247,0,248,251,260,250,255,264],
[293,288,263,302,0,291,285,273,272,279],
[285,284,271,299,259,0,277,291,270,281],
[286,298,273,290,265,273,0,270,282,269],
[281,284,271,300,277,259,280,0,278,270],
[256,291,272,295,278,280,268,272,0,280],
[277,282,275,286,271,269,281,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,197,249,303,290,262,273,297,215],
[222,0,209,226,248,244,253,175,281,187],
[353,341,0,288,288,313,286,304,267,276],
[301,324,262,0,220,287,302,260,293,277],
[247,302,262,330,0,265,261,315,271,239],
[260,306,237,263,285,0,263,289,260,210],
[288,297,264,248,289,287,0,302,243,263],
[277,375,246,290,235,261,248,0,241,197],
[253,269,283,257,279,290,307,309,0,233],
[335,363,274,273,311,340,287,353,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,293,287,285,297,277,267,298,260],
[272,0,246,244,260,280,268,261,265,260],
[257,304,0,277,292,287,288,286,284,282],
[263,306,273,0,272,258,285,281,265,266],
[265,290,258,278,0,289,292,278,298,290],
[253,270,263,292,261,0,268,261,284,251],
[273,282,262,265,258,282,0,275,296,263],
[283,289,264,269,272,289,275,0,290,267],
[252,285,266,285,252,266,254,260,0,258],
[290,290,268,284,260,299,287,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,285,271,275,276,289,267,248,269],
[262,0,277,269,265,279,286,266,280,275],
[265,273,0,267,275,281,259,264,250,262],
[279,281,283,0,274,268,274,256,263,266],
[275,285,275,276,0,294,292,278,244,268],
[274,271,269,282,256,0,276,272,246,259],
[261,264,291,276,258,274,0,273,246,263],
[283,284,286,294,272,278,277,0,266,263],
[302,270,300,287,306,304,304,284,0,295],
[281,275,288,284,282,291,287,287,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,257,283,267,274,262,275,273,260],
[277,0,265,268,272,272,264,289,276,265],
[293,285,0,279,287,278,279,285,277,275],
[267,282,271,0,249,258,265,277,275,265],
[283,278,263,301,0,273,274,282,287,263],
[276,278,272,292,277,0,283,291,289,272],
[288,286,271,285,276,267,0,294,276,277],
[275,261,265,273,268,259,256,0,267,266],
[277,274,273,275,263,261,274,283,0,258],
[290,285,275,285,287,278,273,284,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,323,269,264,276,257,263,273,247],
[271,0,289,256,260,256,246,241,267,256],
[227,261,0,236,245,237,239,263,242,227],
[281,294,314,0,264,261,264,269,249,260],
[286,290,305,286,0,275,249,283,263,263],
[274,294,313,289,275,0,263,266,267,248],
[293,304,311,286,301,287,0,282,271,288],
[287,309,287,281,267,284,268,0,267,268],
[277,283,308,301,287,283,279,283,0,261],
[303,294,323,290,287,302,262,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,245,227,260,280,276,266,270,267],
[305,0,306,268,273,285,281,300,301,290],
[305,244,0,259,244,261,275,286,278,236],
[323,282,291,0,282,288,288,308,307,263],
[290,277,306,268,0,285,269,278,303,267],
[270,265,289,262,265,0,272,273,274,261],
[274,269,275,262,281,278,0,310,282,269],
[284,250,264,242,272,277,240,0,276,251],
[280,249,272,243,247,276,268,274,0,217],
[283,260,314,287,283,289,281,299,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,274,281,271,261,276,282,282],
[274,0,277,275,269,276,272,247,273,259],
[291,273,0,274,276,282,264,275,289,263],
[276,275,276,0,262,277,262,266,282,260],
[269,281,274,288,0,291,272,272,300,263],
[279,274,268,273,259,0,285,267,274,253],
[289,278,286,288,278,265,0,277,291,280],
[274,303,275,284,278,283,273,0,284,264],
[268,277,261,268,250,276,259,266,0,257],
[268,291,287,290,287,297,270,286,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,254,243,236,252,260,281,258],
[284,0,294,262,263,244,285,265,276,265],
[267,256,0,218,253,202,238,246,259,230],
[296,288,332,0,297,300,281,262,298,280],
[307,287,297,253,0,259,261,264,286,290],
[314,306,348,250,291,0,310,294,305,272],
[298,265,312,269,289,240,0,263,306,267],
[290,285,304,288,286,256,287,0,292,277],
[269,274,291,252,264,245,244,258,0,263],
[292,285,320,270,260,278,283,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,238,272,264,260,251,239,249,222],
[310,0,282,319,287,273,269,265,282,285],
[312,268,0,290,261,269,255,286,277,245],
[278,231,260,0,248,240,240,258,250,246],
[286,263,289,302,0,259,250,273,273,277],
[290,277,281,310,291,0,286,264,281,255],
[299,281,295,310,300,264,0,287,306,272],
[311,285,264,292,277,286,263,0,284,276],
[301,268,273,300,277,269,244,266,0,258],
[328,265,305,304,273,295,278,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,258,263,273,275,254,277,270],
[265,0,277,266,257,264,254,259,235,263],
[273,273,0,271,259,273,253,244,260,256],
[292,284,279,0,263,281,264,280,263,260],
[287,293,291,287,0,292,253,253,275,255],
[277,286,277,269,258,0,244,268,258,241],
[275,296,297,286,297,306,0,259,276,267],
[296,291,306,270,297,282,291,0,273,268],
[273,315,290,287,275,292,274,277,0,281],
[280,287,294,290,295,309,283,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,283,304,278,288,259,304,282,326],
[206,0,226,266,257,286,238,275,224,268],
[267,324,0,302,332,303,281,293,286,295],
[246,284,248,0,263,257,283,292,290,267],
[272,293,218,287,0,282,259,282,278,320],
[262,264,247,293,268,0,234,334,296,276],
[291,312,269,267,291,316,0,284,292,278],
[246,275,257,258,268,216,266,0,261,246],
[268,326,264,260,272,254,258,289,0,258],
[224,282,255,283,230,274,272,304,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,286,267,244,336,265,292,259],
[278,0,292,257,289,273,318,304,318,274],
[292,258,0,293,283,297,284,278,285,313],
[264,293,257,0,282,298,325,309,300,286],
[283,261,267,268,0,237,286,237,265,252],
[306,277,253,252,313,0,281,323,308,273],
[214,232,266,225,264,269,0,227,255,253],
[285,246,272,241,313,227,323,0,266,249],
[258,232,265,250,285,242,295,284,0,280],
[291,276,237,264,298,277,297,301,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,293,284,311,275,274,288,285,275],
[242,0,290,282,286,287,288,314,271,236],
[257,260,0,302,234,292,302,294,269,270],
[266,268,248,0,273,253,244,231,212,242],
[239,264,316,277,0,261,261,285,243,260],
[275,263,258,297,289,0,287,292,270,270],
[276,262,248,306,289,263,0,250,244,285],
[262,236,256,319,265,258,300,0,258,238],
[265,279,281,338,307,280,306,292,0,279],
[275,314,280,308,290,280,265,312,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,191,290,323,322,229,384,353,288,320],
[359,0,262,454,355,328,517,418,360,322],
[260,288,0,421,322,261,418,352,291,290],
[227,96,129,0,257,260,420,222,130,159],
[228,195,228,293,0,230,323,322,195,258],
[321,222,289,290,320,0,351,287,287,320],
[166,33,132,130,227,199,0,192,132,195],
[197,132,198,328,228,263,358,0,264,262],
[262,190,259,420,355,263,418,286,0,225],
[230,228,260,391,292,230,355,288,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,310,324,294,270,300,313,298,304],
[251,0,286,269,277,262,301,303,281,294],
[240,264,0,270,275,268,286,279,257,303],
[226,281,280,0,272,278,273,273,253,264],
[256,273,275,278,0,272,276,302,276,282],
[280,288,282,272,278,0,292,291,287,261],
[250,249,264,277,274,258,0,302,269,271],
[237,247,271,277,248,259,248,0,275,269],
[252,269,293,297,274,263,281,275,0,275],
[246,256,247,286,268,289,279,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,280,255,264,284,282,279,272],
[279,0,300,288,265,274,286,284,288,298],
[274,250,0,274,239,251,258,266,260,260],
[270,262,276,0,258,259,274,293,284,268],
[295,285,311,292,0,274,286,293,284,289],
[286,276,299,291,276,0,283,280,302,275],
[266,264,292,276,264,267,0,285,279,280],
[268,266,284,257,257,270,265,0,262,249],
[271,262,290,266,266,248,271,288,0,262],
[278,252,290,282,261,275,270,301,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,305,279,292,281,304,266,288,261],
[257,0,280,258,253,239,268,235,256,240],
[245,270,0,265,269,250,290,275,260,237],
[271,292,285,0,285,253,299,278,294,261],
[258,297,281,265,0,246,309,253,271,258],
[269,311,300,297,304,0,317,276,301,283],
[246,282,260,251,241,233,0,257,287,274],
[284,315,275,272,297,274,293,0,299,245],
[262,294,290,256,279,249,263,251,0,256],
[289,310,313,289,292,267,276,305,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,278,281,262,277,275,263,264,297],
[272,0,288,284,280,265,295,264,273,302],
[272,262,0,267,262,264,286,250,263,294],
[269,266,283,0,271,270,276,264,260,286],
[288,270,288,279,0,271,281,267,275,288],
[273,285,286,280,279,0,292,268,265,302],
[275,255,264,274,269,258,0,273,249,285],
[287,286,300,286,283,282,277,0,268,291],
[286,277,287,290,275,285,301,282,0,295],
[253,248,256,264,262,248,265,259,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,301,277,299,289,287,272,299],
[277,0,290,300,284,288,289,284,267,293],
[271,260,0,298,276,273,293,270,276,285],
[249,250,252,0,245,278,272,261,247,262],
[273,266,274,305,0,293,296,300,269,289],
[251,262,277,272,257,0,278,266,265,293],
[261,261,257,278,254,272,0,258,273,290],
[263,266,280,289,250,284,292,0,267,279],
[278,283,274,303,281,285,277,283,0,291],
[251,257,265,288,261,257,260,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,269,257,290,271,275,284,282],
[255,0,277,262,248,271,256,283,285,283],
[266,273,0,274,260,276,261,255,288,294],
[281,288,276,0,252,304,292,275,302,282],
[293,302,290,298,0,289,258,288,311,300],
[260,279,274,246,261,0,263,281,270,280],
[279,294,289,258,292,287,0,285,300,284],
[275,267,295,275,262,269,265,0,279,273],
[266,265,262,248,239,280,250,271,0,265],
[268,267,256,268,250,270,266,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,227,253,270,249,266,243,252,290],
[314,0,278,283,274,266,330,302,269,270],
[323,272,0,297,304,295,311,276,292,298],
[297,267,253,0,293,245,297,290,251,251],
[280,276,246,257,0,287,283,263,262,271],
[301,284,255,305,263,0,313,294,249,260],
[284,220,239,253,267,237,0,260,238,233],
[307,248,274,260,287,256,290,0,240,256],
[298,281,258,299,288,301,312,310,0,279],
[260,280,252,299,279,290,317,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,306,325,287,299,303,275,306,274],
[242,0,332,320,279,297,277,272,299,218],
[244,218,0,289,255,285,268,290,282,231],
[225,230,261,0,244,277,237,232,246,226],
[263,271,295,306,0,274,249,287,284,278],
[251,253,265,273,276,0,271,294,270,264],
[247,273,282,313,301,279,0,285,299,262],
[275,278,260,318,263,256,265,0,267,244],
[244,251,268,304,266,280,251,283,0,247],
[276,332,319,324,272,286,288,306,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,293,287,253,306,284,279,269,282],
[239,0,260,280,242,276,262,268,284,283],
[257,290,0,261,260,280,259,278,261,287],
[263,270,289,0,277,277,278,280,314,298],
[297,308,290,273,0,306,262,286,309,311],
[244,274,270,273,244,0,263,241,273,297],
[266,288,291,272,288,287,0,263,296,311],
[271,282,272,270,264,309,287,0,277,280],
[281,266,289,236,241,277,254,273,0,294],
[268,267,263,252,239,253,239,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,260,263,262,281,276,280,272],
[280,0,274,264,271,277,266,280,279,276],
[272,276,0,260,269,268,272,276,275,274],
[290,286,290,0,277,281,265,275,284,279],
[287,279,281,273,0,291,292,276,290,286],
[288,273,282,269,259,0,271,269,283,274],
[269,284,278,285,258,279,0,280,286,259],
[274,270,274,275,274,281,270,0,268,261],
[270,271,275,266,260,267,264,282,0,267],
[278,274,276,271,264,276,291,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,243,222,202,291,276,239,271,303],
[233,0,244,268,238,276,188,229,263,310],
[307,306,0,328,300,290,248,305,297,357],
[328,282,222,0,241,257,225,255,253,288],
[348,312,250,309,0,256,274,209,301,352],
[259,274,260,293,294,0,224,229,304,355],
[274,362,302,325,276,326,0,292,273,367],
[311,321,245,295,341,321,258,0,289,293],
[279,287,253,297,249,246,277,261,0,321],
[247,240,193,262,198,195,183,257,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,244,248,231,266,262,247,278,273],
[282,0,245,302,244,265,270,270,273,290],
[306,305,0,297,285,272,282,259,290,337],
[302,248,253,0,224,262,234,256,272,311],
[319,306,265,326,0,299,300,293,306,321],
[284,285,278,288,251,0,278,277,297,288],
[288,280,268,316,250,272,0,270,274,311],
[303,280,291,294,257,273,280,0,295,310],
[272,277,260,278,244,253,276,255,0,300],
[277,260,213,239,229,262,239,240,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,268,269,262,284,278,280,301,265],
[296,0,283,290,272,300,284,291,303,297],
[282,267,0,276,281,303,282,269,310,289],
[281,260,274,0,271,286,283,280,301,273],
[288,278,269,279,0,288,281,271,290,269],
[266,250,247,264,262,0,259,258,289,260],
[272,266,268,267,269,291,0,268,302,264],
[270,259,281,270,279,292,282,0,288,275],
[249,247,240,249,260,261,248,262,0,269],
[285,253,261,277,281,290,286,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,237,256,282,268,280,240,289],
[276,0,287,269,282,280,291,283,273,292],
[283,263,0,283,270,289,293,271,260,281],
[313,281,267,0,268,280,295,293,288,292],
[294,268,280,282,0,276,286,296,267,312],
[268,270,261,270,274,0,292,260,241,290],
[282,259,257,255,264,258,0,256,254,286],
[270,267,279,257,254,290,294,0,261,294],
[310,277,290,262,283,309,296,289,0,309],
[261,258,269,258,238,260,264,256,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,268,290,284,303,320,294,271],
[260,0,265,255,251,266,257,307,270,267],
[264,285,0,263,255,270,286,324,281,280],
[282,295,287,0,256,284,303,334,301,287],
[260,299,295,294,0,286,296,300,280,276],
[266,284,280,266,264,0,297,332,275,284],
[247,293,264,247,254,253,0,300,258,254],
[230,243,226,216,250,218,250,0,224,231],
[256,280,269,249,270,275,292,326,0,264],
[279,283,270,263,274,266,296,319,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,231,261,248,244,269,260,258,294],
[286,0,277,298,260,283,285,267,283,312],
[319,273,0,302,271,242,290,273,279,303],
[289,252,248,0,264,271,238,302,261,298],
[302,290,279,286,0,300,281,285,275,323],
[306,267,308,279,250,0,296,295,295,310],
[281,265,260,312,269,254,0,286,258,287],
[290,283,277,248,265,255,264,0,269,283],
[292,267,271,289,275,255,292,281,0,300],
[256,238,247,252,227,240,263,267,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,273,228,272,242,258,314,269,261],
[294,0,310,252,280,255,266,297,269,245],
[277,240,0,249,267,249,270,276,237,251],
[322,298,301,0,284,301,266,294,307,271],
[278,270,283,266,0,260,262,292,268,293],
[308,295,301,249,290,0,261,315,264,288],
[292,284,280,284,288,289,0,318,280,271],
[236,253,274,256,258,235,232,0,260,261],
[281,281,313,243,282,286,270,290,0,285],
[289,305,299,279,257,262,279,289,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,236,262,298,286,261,258,301,251],
[227,0,225,262,255,237,300,273,228,247],
[314,325,0,266,331,339,308,362,359,297],
[288,288,284,0,320,293,263,310,305,295],
[252,295,219,230,0,265,272,308,293,286],
[264,313,211,257,285,0,272,305,300,280],
[289,250,242,287,278,278,0,283,292,246],
[292,277,188,240,242,245,267,0,289,233],
[249,322,191,245,257,250,258,261,0,241],
[299,303,253,255,264,270,304,317,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,247,255,272,278,258,253,267,262],
[300,0,241,260,294,300,265,274,264,292],
[303,309,0,273,306,306,287,289,321,286],
[295,290,277,0,295,297,274,291,304,287],
[278,256,244,255,0,289,273,269,277,278],
[272,250,244,253,261,0,260,258,265,266],
[292,285,263,276,277,290,0,289,270,279],
[297,276,261,259,281,292,261,0,274,279],
[283,286,229,246,273,285,280,276,0,261],
[288,258,264,263,272,284,271,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,273,275,271,243,285,287,282,282],
[224,0,264,244,264,243,239,237,231,264],
[277,286,0,279,243,231,267,272,225,274],
[275,306,271,0,265,272,255,266,272,263],
[279,286,307,285,0,235,280,281,265,275],
[307,307,319,278,315,0,272,297,285,289],
[265,311,283,295,270,278,0,271,244,274],
[263,313,278,284,269,253,279,0,258,292],
[268,319,325,278,285,265,306,292,0,297],
[268,286,276,287,275,261,276,258,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,264,211,233,304,311,256,223,304],
[318,0,286,278,305,321,289,286,245,334],
[286,264,0,280,308,293,320,274,248,315],
[339,272,270,0,280,332,304,251,240,299],
[317,245,242,270,0,264,322,294,288,267],
[246,229,257,218,286,0,255,226,214,266],
[239,261,230,246,228,295,0,249,237,273],
[294,264,276,299,256,324,301,0,248,307],
[327,305,302,310,262,336,313,302,0,349],
[246,216,235,251,283,284,277,243,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,274,284,287,279,274,294,270],
[256,0,271,265,269,292,271,257,272,274],
[278,279,0,259,275,272,272,256,285,262],
[276,285,291,0,268,288,275,271,298,276],
[266,281,275,282,0,286,270,264,300,286],
[263,258,278,262,264,0,269,276,288,259],
[271,279,278,275,280,281,0,271,291,265],
[276,293,294,279,286,274,279,0,297,267],
[256,278,265,252,250,262,259,253,0,258],
[280,276,288,274,264,291,285,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,364,240,285,337,216,285,382,237,268],
[186,0,285,284,285,258,234,284,257,263],
[310,265,0,214,335,241,237,260,214,265],
[265,266,336,0,290,289,286,290,287,267],
[213,265,215,260,0,190,212,238,190,244],
[334,292,309,261,360,0,214,285,189,315],
[265,316,313,264,338,336,0,286,167,289],
[168,266,290,260,312,265,264,0,194,194],
[313,293,336,263,360,361,383,356,0,292],
[282,287,285,283,306,235,261,356,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,264,266,275,279,274,258,281],
[270,0,269,270,285,300,275,275,282,302],
[271,281,0,262,284,272,280,274,284,297],
[286,280,288,0,285,287,267,289,284,293],
[284,265,266,265,0,293,259,260,288,299],
[275,250,278,263,257,0,269,259,274,281],
[271,275,270,283,291,281,0,274,273,294],
[276,275,276,261,290,291,276,0,284,286],
[292,268,266,266,262,276,277,266,0,296],
[269,248,253,257,251,269,256,264,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,299,280,271,256,260,268,251,275],
[271,0,291,311,284,270,282,283,275,276],
[251,259,0,274,275,267,273,270,253,283],
[270,239,276,0,255,277,266,261,248,264],
[279,266,275,295,0,280,296,271,274,274],
[294,280,283,273,270,0,259,269,276,271],
[290,268,277,284,254,291,0,266,275,270],
[282,267,280,289,279,281,284,0,279,278],
[299,275,297,302,276,274,275,271,0,282],
[275,274,267,286,276,279,280,272,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,280,279,268,275,265,272,270,269],
[289,0,283,288,282,270,272,274,278,270],
[270,267,0,281,273,250,268,279,267,264],
[271,262,269,0,254,263,258,262,261,270],
[282,268,277,296,0,263,265,274,272,270],
[275,280,300,287,287,0,284,281,288,271],
[285,278,282,292,285,266,0,292,280,291],
[278,276,271,288,276,269,258,0,275,270],
[280,272,283,289,278,262,270,275,0,272],
[281,280,286,280,280,279,259,280,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,228,268,238,253,251,234,247,255],
[314,0,265,287,277,276,268,262,278,306],
[322,285,0,286,286,305,307,267,277,307],
[282,263,264,0,269,287,275,233,253,277],
[312,273,264,281,0,284,289,248,296,296],
[297,274,245,263,266,0,266,250,251,263],
[299,282,243,275,261,284,0,261,249,276],
[316,288,283,317,302,300,289,0,260,308],
[303,272,273,297,254,299,301,290,0,300],
[295,244,243,273,254,287,274,242,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,304,274,296,265,285,270,281,279],
[266,0,290,294,267,246,286,263,265,303],
[246,260,0,275,255,275,266,247,221,271],
[276,256,275,0,255,259,262,235,251,270],
[254,283,295,295,0,276,258,274,283,307],
[285,304,275,291,274,0,291,292,258,279],
[265,264,284,288,292,259,0,261,272,278],
[280,287,303,315,276,258,289,0,287,311],
[269,285,329,299,267,292,278,263,0,296],
[271,247,279,280,243,271,272,239,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,268,282,278,291,258,273,307],
[273,0,283,284,299,273,278,270,286,311],
[270,267,0,278,277,246,282,259,291,320],
[282,266,272,0,289,268,275,281,278,288],
[268,251,273,261,0,258,249,255,257,268],
[272,277,304,282,292,0,280,264,292,297],
[259,272,268,275,301,270,0,274,286,304],
[292,280,291,269,295,286,276,0,290,320],
[277,264,259,272,293,258,264,260,0,274],
[243,239,230,262,282,253,246,230,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,280,280,258,276,266,274,284,274],
[273,0,295,300,283,280,288,291,272,272],
[270,255,0,289,262,248,267,283,292,268],
[270,250,261,0,290,256,302,256,274,253],
[292,267,288,260,0,284,290,276,266,273],
[274,270,302,294,266,0,281,293,286,284],
[284,262,283,248,260,269,0,262,270,270],
[276,259,267,294,274,257,288,0,286,255],
[266,278,258,276,284,264,280,264,0,279],
[276,278,282,297,277,266,280,295,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,253,256,280,235,277,318,262],
[254,0,251,219,281,265,209,272,284,238],
[255,299,0,252,283,281,292,268,301,252],
[297,331,298,0,310,288,264,318,324,259],
[294,269,267,240,0,240,220,234,285,242],
[270,285,269,262,310,0,263,212,328,273],
[315,341,258,286,330,287,0,298,331,318],
[273,278,282,232,316,338,252,0,317,274],
[232,266,249,226,265,222,219,233,0,238],
[288,312,298,291,308,277,232,276,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,239,263,258,252,263,266,276,259],
[286,0,256,271,266,256,292,281,265,262],
[311,294,0,288,284,282,282,270,293,279],
[287,279,262,0,256,272,264,280,286,237],
[292,284,266,294,0,265,276,293,304,255],
[298,294,268,278,285,0,276,285,293,270],
[287,258,268,286,274,274,0,265,292,260],
[284,269,280,270,257,265,285,0,275,257],
[274,285,257,264,246,257,258,275,0,246],
[291,288,271,313,295,280,290,293,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,297,274,292,292,301,323,284,303],
[273,0,311,302,280,275,298,311,303,286],
[253,239,0,270,266,243,268,273,239,277],
[276,248,280,0,262,269,274,266,290,271],
[258,270,284,288,0,284,250,289,276,283],
[258,275,307,281,266,0,280,295,285,277],
[249,252,282,276,300,270,0,284,281,285],
[227,239,277,284,261,255,266,0,266,260],
[266,247,311,260,274,265,269,284,0,269],
[247,264,273,279,267,273,265,290,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,282,308,285,278,296,285,302],
[266,0,281,266,290,248,284,271,272,298],
[296,269,0,293,304,262,291,271,275,275],
[268,284,257,0,321,294,286,278,264,311],
[242,260,246,229,0,255,272,260,251,313],
[265,302,288,256,295,0,262,277,248,301],
[272,266,259,264,278,288,0,285,262,279],
[254,279,279,272,290,273,265,0,241,264],
[265,278,275,286,299,302,288,309,0,297],
[248,252,275,239,237,249,271,286,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,304,269,267,277,294,279,295],
[254,0,294,269,254,241,260,258,247,278],
[255,256,0,289,257,273,262,259,266,294],
[246,281,261,0,256,234,254,257,226,271],
[281,296,293,294,0,273,270,270,247,307],
[283,309,277,316,277,0,293,287,253,298],
[273,290,288,296,280,257,0,260,255,293],
[256,292,291,293,280,263,290,0,266,281],
[271,303,284,324,303,297,295,284,0,315],
[255,272,256,279,243,252,257,269,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,316,289,285,313,271,295,288,285],
[271,0,299,229,263,295,280,280,257,280],
[234,251,0,213,240,285,247,263,238,247],
[261,321,337,0,266,296,289,310,283,269],
[265,287,310,284,0,293,270,300,274,270],
[237,255,265,254,257,0,269,256,246,265],
[279,270,303,261,280,281,0,292,288,281],
[255,270,287,240,250,294,258,0,241,269],
[262,293,312,267,276,304,262,309,0,292],
[265,270,303,281,280,285,269,281,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,296,271,271,283,298,287,269,282],
[292,0,306,289,314,274,294,265,290,287],
[254,244,0,286,289,245,282,273,258,265],
[279,261,264,0,275,276,301,263,281,263],
[279,236,261,275,0,265,286,264,269,261],
[267,276,305,274,285,0,278,291,276,259],
[252,256,268,249,264,272,0,253,246,265],
[263,285,277,287,286,259,297,0,266,250],
[281,260,292,269,281,274,304,284,0,268],
[268,263,285,287,289,291,285,300,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,250,278,272,263,263,266,275,273],
[279,0,267,291,277,265,267,285,248,263],
[300,283,0,304,304,272,274,296,278,282],
[272,259,246,0,276,237,250,275,254,243],
[278,273,246,274,0,250,257,263,259,253],
[287,285,278,313,300,0,260,283,267,267],
[287,283,276,300,293,290,0,300,274,289],
[284,265,254,275,287,267,250,0,250,255],
[275,302,272,296,291,283,276,300,0,277],
[277,287,268,307,297,283,261,295,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,288,265,269,270,274,251,269,272],
[283,0,287,253,256,296,275,259,272,270],
[262,263,0,253,257,285,278,238,264,264],
[285,297,297,0,272,294,283,293,284,288],
[281,294,293,278,0,299,284,272,285,290],
[280,254,265,256,251,0,270,257,242,272],
[276,275,272,267,266,280,0,259,281,270],
[299,291,312,257,278,293,291,0,290,301],
[281,278,286,266,265,308,269,260,0,287],
[278,280,286,262,260,278,280,249,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,296,265,287,261,279,269,277,257],
[296,0,297,277,281,278,264,273,272,290],
[254,253,0,230,257,251,244,260,246,255],
[285,273,320,0,276,256,261,296,279,283],
[263,269,293,274,0,257,264,265,290,293],
[289,272,299,294,293,0,298,284,272,297],
[271,286,306,289,286,252,0,289,282,278],
[281,277,290,254,285,266,261,0,275,281],
[273,278,304,271,260,278,268,275,0,286],
[293,260,295,267,257,253,272,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,265,278,276,269,285,277,267],
[278,0,273,268,272,265,280,279,274,260],
[267,277,0,281,286,288,288,299,282,265],
[285,282,269,0,276,290,302,289,288,274],
[272,278,264,274,0,261,266,277,275,269],
[274,285,262,260,289,0,284,281,281,275],
[281,270,262,248,284,266,0,276,254,260],
[265,271,251,261,273,269,274,0,263,254],
[273,276,268,262,275,269,296,287,0,268],
[283,290,285,276,281,275,290,296,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,257,262,263,274,256,274,278,292],
[284,0,311,314,311,292,280,303,269,298],
[293,239,0,249,296,268,269,249,297,270],
[288,236,301,0,289,250,294,293,277,288],
[287,239,254,261,0,242,294,255,271,296],
[276,258,282,300,308,0,313,297,260,314],
[294,270,281,256,256,237,0,269,281,296],
[276,247,301,257,295,253,281,0,281,279],
[272,281,253,273,279,290,269,269,0,243],
[258,252,280,262,254,236,254,271,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,305,279,284,269,319,291,274,294],
[285,0,291,268,273,280,312,286,276,309],
[245,259,0,251,251,244,277,268,251,271],
[271,282,299,0,295,282,302,288,279,309],
[266,277,299,255,0,281,305,280,279,292],
[281,270,306,268,269,0,289,285,277,295],
[231,238,273,248,245,261,0,258,247,254],
[259,264,282,262,270,265,292,0,276,294],
[276,274,299,271,271,273,303,274,0,294],
[256,241,279,241,258,255,296,256,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,304,301,264,273,260,293,283],
[275,0,298,270,282,271,283,269,288,272],
[260,252,0,274,276,240,256,246,271,274],
[246,280,276,0,279,270,285,253,297,270],
[249,268,274,271,0,258,276,241,280,247],
[286,279,310,280,292,0,287,264,305,302],
[277,267,294,265,274,263,0,278,281,257],
[290,281,304,297,309,286,272,0,313,281],
[257,262,279,253,270,245,269,237,0,258],
[267,278,276,280,303,248,293,269,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,285,340,349,296,327,205,307,328],
[275,0,286,290,267,261,277,298,336,289],
[265,264,0,306,267,221,236,236,223,248],
[210,260,244,0,291,201,215,192,272,244],
[201,283,283,259,0,177,237,193,251,237],
[254,289,329,349,373,0,337,283,355,346],
[223,273,314,335,313,213,0,285,269,305],
[345,252,314,358,357,267,265,0,328,303],
[243,214,327,278,299,195,281,222,0,298],
[222,261,302,306,313,204,245,247,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,276,291,255,264,293,308,297],
[291,0,273,265,292,289,264,305,286,272],
[295,277,0,273,286,286,265,298,281,286],
[274,285,277,0,280,281,267,295,294,285],
[259,258,264,270,0,257,270,293,284,268],
[295,261,264,269,293,0,277,286,297,283],
[286,286,285,283,280,273,0,312,279,296],
[257,245,252,255,257,264,238,0,275,264],
[242,264,269,256,266,253,271,275,0,279],
[253,278,264,265,282,267,254,286,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,271,266,246,259,261,273,258,265],
[272,0,272,249,254,277,286,268,279,260],
[279,278,0,248,278,286,268,281,290,263],
[284,301,302,0,272,300,281,292,285,271],
[304,296,272,278,0,302,303,278,296,288],
[291,273,264,250,248,0,271,270,266,259],
[289,264,282,269,247,279,0,281,289,264],
[277,282,269,258,272,280,269,0,278,259],
[292,271,260,265,254,284,261,272,0,271],
[285,290,287,279,262,291,286,291,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,283,264,267,291,296,300,271,286],
[291,0,283,279,273,278,307,306,277,263],
[267,267,0,268,274,285,296,291,267,261],
[286,271,282,0,300,282,297,302,278,275],
[283,277,276,250,0,286,277,299,282,278],
[259,272,265,268,264,0,282,301,271,269],
[254,243,254,253,273,268,0,275,259,256],
[250,244,259,248,251,249,275,0,255,254],
[279,273,283,272,268,279,291,295,0,295],
[264,287,289,275,272,281,294,296,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,302,274,263,303,288,293,260,277],
[283,0,295,276,275,314,299,321,295,288],
[248,255,0,259,260,303,290,302,270,284],
[276,274,291,0,280,280,301,305,276,280],
[287,275,290,270,0,287,309,291,283,277],
[247,236,247,270,263,0,256,278,256,277],
[262,251,260,249,241,294,0,284,251,271],
[257,229,248,245,259,272,266,0,242,262],
[290,255,280,274,267,294,299,308,0,315],
[273,262,266,270,273,273,279,288,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,264,269,269,259,259,249,247,255],
[286,0,274,277,275,276,270,291,272,278],
[286,276,0,293,279,264,280,271,263,268],
[281,273,257,0,273,268,270,257,248,252],
[281,275,271,277,0,251,263,260,247,258],
[291,274,286,282,299,0,288,275,278,281],
[291,280,270,280,287,262,0,285,249,271],
[301,259,279,293,290,275,265,0,264,271],
[303,278,287,302,303,272,301,286,0,269],
[295,272,282,298,292,269,279,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,283,290,302,281,275,277,281],
[269,0,283,277,273,285,278,301,276,287],
[283,267,0,271,288,288,274,279,274,290],
[267,273,279,0,272,281,279,283,288,276],
[260,277,262,278,0,293,281,260,260,277],
[248,265,262,269,257,0,274,274,270,278],
[269,272,276,271,269,276,0,288,285,274],
[275,249,271,267,290,276,262,0,274,284],
[273,274,276,262,290,280,265,276,0,281],
[269,263,260,274,273,272,276,266,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,248,261,259,276,294,257,266,264],
[250,0,264,274,234,251,255,253,269,254],
[302,286,0,256,292,298,266,299,287,269],
[289,276,294,0,295,265,308,266,275,315],
[291,316,258,255,0,316,268,296,281,278],
[274,299,252,285,234,0,278,276,277,263],
[256,295,284,242,282,272,0,245,260,293],
[293,297,251,284,254,274,305,0,279,265],
[284,281,263,275,269,273,290,271,0,294],
[286,296,281,235,272,287,257,285,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,322,305,272,340,322,293,314,344],
[268,0,297,295,283,311,290,319,289,336],
[228,253,0,232,244,286,268,280,227,270],
[245,255,318,0,256,312,306,258,244,325],
[278,267,306,294,0,310,281,299,271,322],
[210,239,264,238,240,0,276,243,244,286],
[228,260,282,244,269,274,0,292,268,274],
[257,231,270,292,251,307,258,0,241,285],
[236,261,323,306,279,306,282,309,0,314],
[206,214,280,225,228,264,276,265,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,279,256,268,249,253,267,255,268],
[299,0,268,264,266,293,276,298,256,284],
[271,282,0,266,271,293,261,277,246,277],
[294,286,284,0,289,283,269,292,278,284],
[282,284,279,261,0,273,259,286,283,275],
[301,257,257,267,277,0,262,286,265,255],
[297,274,289,281,291,288,0,271,277,275],
[283,252,273,258,264,264,279,0,258,263],
[295,294,304,272,267,285,273,292,0,271],
[282,266,273,266,275,295,275,287,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,275,251,265,241,263,246,252],
[289,0,291,277,279,288,279,303,271,286],
[286,259,0,274,273,280,265,283,276,269],
[275,273,276,0,260,277,276,274,261,274],
[299,271,277,290,0,283,270,280,278,274],
[285,262,270,273,267,0,258,276,275,262],
[309,271,285,274,280,292,0,276,283,279],
[287,247,267,276,270,274,274,0,277,265],
[304,279,274,289,272,275,267,273,0,271],
[298,264,281,276,276,288,271,285,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,261,270,259,272,261,253,277,274],
[319,0,283,284,292,284,304,271,275,293],
[289,267,0,281,274,270,277,278,274,283],
[280,266,269,0,270,268,273,281,276,281],
[291,258,276,280,0,271,286,273,288,281],
[278,266,280,282,279,0,279,267,274,281],
[289,246,273,277,264,271,0,264,276,284],
[297,279,272,269,277,283,286,0,295,291],
[273,275,276,274,262,276,274,255,0,291],
[276,257,267,269,269,269,266,259,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,384,276,385,274,330,275,329,439],
[220,0,220,219,165,219,220,164,163,275],
[166,330,0,276,167,219,221,275,330,275],
[274,331,274,0,164,218,274,164,274,329],
[165,385,383,386,0,328,220,328,385,274],
[276,331,331,332,222,0,276,221,276,275],
[220,330,329,276,330,274,0,274,220,384],
[275,386,275,386,222,329,276,0,385,275],
[221,387,220,276,165,274,330,165,0,275],
[111,275,275,221,276,275,166,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,264,245,270,275,292,288,257],
[281,0,256,249,257,240,285,290,298,274],
[285,294,0,270,261,256,288,294,289,250],
[286,301,280,0,283,261,305,302,311,270],
[305,293,289,267,0,307,298,312,299,270],
[280,310,294,289,243,0,293,295,301,299],
[275,265,262,245,252,257,0,308,250,273],
[258,260,256,248,238,255,242,0,277,238],
[262,252,261,239,251,249,300,273,0,272],
[293,276,300,280,280,251,277,312,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,393,312,155,274,313,275,234,314],
[392,0,352,313,234,235,353,314,273,275],
[157,198,0,196,115,116,237,235,197,116],
[238,237,354,0,276,276,353,356,315,276],
[395,316,435,274,0,278,315,395,317,395],
[276,315,434,274,272,0,314,315,355,392],
[237,197,313,197,235,236,0,315,237,275],
[275,236,315,194,155,235,235,0,274,272],
[316,277,353,235,233,195,313,276,0,235],
[236,275,434,274,155,158,275,278,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,276,303,243,260,266,323,265,277],
[291,0,282,309,259,254,248,272,257,259],
[274,268,0,318,279,265,250,276,262,276],
[247,241,232,0,229,237,235,276,225,221],
[307,291,271,321,0,244,303,289,278,252],
[290,296,285,313,306,0,260,302,287,251],
[284,302,300,315,247,290,0,314,296,301],
[227,278,274,274,261,248,236,0,246,253],
[285,293,288,325,272,263,254,304,0,288],
[273,291,274,329,298,299,249,297,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,270,279,262,285,253,258,262],
[292,0,290,270,300,288,298,261,278,287],
[282,260,0,269,282,287,292,257,270,265],
[280,280,281,0,300,302,291,278,272,282],
[271,250,268,250,0,276,300,238,273,255],
[288,262,263,248,274,0,279,264,268,271],
[265,252,258,259,250,271,0,246,267,258],
[297,289,293,272,312,286,304,0,289,253],
[292,272,280,278,277,282,283,261,0,255],
[288,263,285,268,295,279,292,297,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,285,287,274,297,283,262,301,297],
[270,0,291,286,292,282,282,280,287,294],
[265,259,0,293,286,283,280,260,291,288],
[263,264,257,0,272,287,276,247,280,282],
[276,258,264,278,0,272,267,260,282,284],
[253,268,267,263,278,0,253,247,265,267],
[267,268,270,274,283,297,0,254,291,291],
[288,270,290,303,290,303,296,0,299,306],
[249,263,259,270,268,285,259,251,0,273],
[253,256,262,268,266,283,259,244,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,276,286,282,296,296,285,273],
[269,0,260,287,279,269,281,293,275,259],
[270,290,0,284,255,267,264,275,268,286],
[274,263,266,0,267,269,271,297,263,264],
[264,271,295,283,0,264,281,258,267,272],
[268,281,283,281,286,0,281,294,278,249],
[254,269,286,279,269,269,0,285,263,271],
[254,257,275,253,292,256,265,0,261,260],
[265,275,282,287,283,272,287,289,0,265],
[277,291,264,286,278,301,279,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,268,287,282,277,275,273,309,271],
[267,0,257,300,278,267,266,270,285,263],
[282,293,0,294,268,265,281,280,287,278],
[263,250,256,0,262,285,258,279,252,268],
[268,272,282,288,0,266,258,299,286,302],
[273,283,285,265,284,0,252,253,286,262],
[275,284,269,292,292,298,0,283,280,299],
[277,280,270,271,251,297,267,0,273,272],
[241,265,263,298,264,264,270,277,0,284],
[279,287,272,282,248,288,251,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,236,258,244,269,262,236,284,255],
[294,0,303,271,284,289,280,267,305,298],
[314,247,0,290,278,282,262,266,303,270],
[292,279,260,0,265,285,269,270,299,264],
[306,266,272,285,0,270,269,296,290,285],
[281,261,268,265,280,0,297,282,294,270],
[288,270,288,281,281,253,0,276,296,276],
[314,283,284,280,254,268,274,0,289,282],
[266,245,247,251,260,256,254,261,0,279],
[295,252,280,286,265,280,274,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,260,286,291,268,292,277,284,270],
[266,0,268,276,306,273,274,279,267,276],
[290,282,0,297,297,280,281,299,277,273],
[264,274,253,0,289,270,279,287,289,262],
[259,244,253,261,0,254,264,270,263,257],
[282,277,270,280,296,0,278,287,274,277],
[258,276,269,271,286,272,0,280,261,277],
[273,271,251,263,280,263,270,0,269,265],
[266,283,273,261,287,276,289,281,0,259],
[280,274,277,288,293,273,273,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,262,280,296,263,287,286,239],
[263,0,290,268,287,301,250,273,283,289],
[258,260,0,253,272,272,288,268,277,256],
[288,282,297,0,274,323,285,282,291,263],
[270,263,278,276,0,294,275,281,303,285],
[254,249,278,227,256,0,265,259,275,237],
[287,300,262,265,275,285,0,282,294,258],
[263,277,282,268,269,291,268,0,286,255],
[264,267,273,259,247,275,256,264,0,272],
[311,261,294,287,265,313,292,295,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,375,374,352,342,307,270,273,321,308],
[175,0,272,238,207,243,236,256,205,272],
[176,278,0,237,244,243,253,229,207,259],
[198,312,313,0,262,297,243,279,294,259],
[208,343,306,288,0,291,220,338,304,257],
[243,307,307,253,259,0,302,353,317,255],
[280,314,297,307,330,248,0,313,296,297],
[277,294,321,271,212,197,237,0,224,256],
[229,345,343,256,246,233,254,326,0,308],
[242,278,291,291,293,295,253,294,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,283,282,302,299,279,285,290,267],
[290,0,278,275,290,288,280,254,276,280],
[267,272,0,252,269,267,264,266,282,301],
[268,275,298,0,290,274,272,246,306,293],
[248,260,281,260,0,270,280,268,291,275],
[251,262,283,276,280,0,258,263,274,275],
[271,270,286,278,270,292,0,264,287,275],
[265,296,284,304,282,287,286,0,290,271],
[260,274,268,244,259,276,263,260,0,264],
[283,270,249,257,275,275,275,279,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,276,290,277,266,257,261,254,269],
[250,0,240,293,271,269,241,247,258,223],
[274,310,0,276,264,294,285,266,303,254],
[260,257,274,0,278,280,230,242,271,275],
[273,279,286,272,0,270,282,238,253,258],
[284,281,256,270,280,0,251,254,269,212],
[293,309,265,320,268,299,0,256,260,253],
[289,303,284,308,312,296,294,0,303,266],
[296,292,247,279,297,281,290,247,0,252],
[281,327,296,275,292,338,297,284,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,256,282,284,271,275,281,279,264],
[290,0,271,299,287,303,286,290,318,270],
[294,279,0,307,304,286,273,298,313,291],
[268,251,243,0,260,279,264,279,287,259],
[266,263,246,290,0,269,262,280,282,268],
[279,247,264,271,281,0,275,277,284,265],
[275,264,277,286,288,275,0,281,291,281],
[269,260,252,271,270,273,269,0,288,254],
[271,232,237,263,268,266,259,262,0,249],
[286,280,259,291,282,285,269,296,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,292,280,289,251,258,268,256,270],
[296,0,301,292,282,277,294,262,273,276],
[258,249,0,271,266,268,268,242,284,280],
[270,258,279,0,300,269,257,258,253,255],
[261,268,284,250,0,255,253,281,278,256],
[299,273,282,281,295,0,296,264,269,266],
[292,256,282,293,297,254,0,270,283,266],
[282,288,308,292,269,286,280,0,284,288],
[294,277,266,297,272,281,267,266,0,283],
[280,274,270,295,294,284,284,262,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,273,282,267,264,252,258,278,270],
[275,0,273,299,293,288,271,268,302,285],
[277,277,0,289,274,283,275,270,276,296],
[268,251,261,0,262,262,238,278,280,280],
[283,257,276,288,0,285,256,267,259,282],
[286,262,267,288,265,0,251,265,282,266],
[298,279,275,312,294,299,0,278,301,284],
[292,282,280,272,283,285,272,0,284,274],
[272,248,274,270,291,268,249,266,0,265],
[280,265,254,270,268,284,266,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,253,278,279,275,286,279,303,266],
[248,0,250,254,259,268,247,258,286,247],
[297,300,0,282,277,298,300,275,312,253],
[272,296,268,0,269,286,277,271,290,255],
[271,291,273,281,0,269,274,271,296,277],
[275,282,252,264,281,0,278,269,292,278],
[264,303,250,273,276,272,0,264,294,270],
[271,292,275,279,279,281,286,0,306,277],
[247,264,238,260,254,258,256,244,0,249],
[284,303,297,295,273,272,280,273,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,299,303,291,287,293,285,289,278],
[278,0,295,286,279,275,287,272,292,281],
[251,255,0,276,272,272,276,274,275,278],
[247,264,274,0,277,258,268,270,249,263],
[259,271,278,273,0,287,257,287,259,278],
[263,275,278,292,263,0,284,285,276,289],
[257,263,274,282,293,266,0,270,267,280],
[265,278,276,280,263,265,280,0,279,280],
[261,258,275,301,291,274,283,271,0,299],
[272,269,272,287,272,261,270,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,307,290,268,293,285,293,299,282],
[264,0,287,282,273,273,277,292,288,272],
[243,263,0,279,261,268,272,288,277,269],
[260,268,271,0,259,273,246,306,275,287],
[282,277,289,291,0,274,285,285,305,284],
[257,277,282,277,276,0,284,292,302,289],
[265,273,278,304,265,266,0,277,268,285],
[257,258,262,244,265,258,273,0,264,260],
[251,262,273,275,245,248,282,286,0,258],
[268,278,281,263,266,261,265,290,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,269,268,269,279,266,236,242,242],
[271,0,278,250,260,278,260,259,256,253],
[281,272,0,269,270,267,284,259,282,263],
[282,300,281,0,253,267,269,228,266,276],
[281,290,280,297,0,281,271,256,276,250],
[271,272,283,283,269,0,253,246,273,246],
[284,290,266,281,279,297,0,281,272,254],
[314,291,291,322,294,304,269,0,280,264],
[308,294,268,284,274,277,278,270,0,264],
[308,297,287,274,300,304,296,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,271,283,253,270,265,276,271],
[291,0,287,276,258,264,266,261,269,262],
[266,263,0,272,279,263,263,260,252,279],
[279,274,278,0,279,261,280,260,276,283],
[267,292,271,271,0,270,276,254,255,286],
[297,286,287,289,280,0,274,267,276,302],
[280,284,287,270,274,276,0,272,259,271],
[285,289,290,290,296,283,278,0,268,276],
[274,281,298,274,295,274,291,282,0,293],
[279,288,271,267,264,248,279,274,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,276,256,258,253,271,282,284,278],
[292,0,261,288,269,289,280,281,286,275],
[274,289,0,275,264,287,288,278,292,269],
[294,262,275,0,276,274,285,284,294,279],
[292,281,286,274,0,291,278,275,278,292],
[297,261,263,276,259,0,266,281,272,264],
[279,270,262,265,272,284,0,273,275,276],
[268,269,272,266,275,269,277,0,265,283],
[266,264,258,256,272,278,275,285,0,279],
[272,275,281,271,258,286,274,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,289,270,280,304,283,313,266,280],
[237,0,272,232,249,255,260,261,228,241],
[261,278,0,268,267,266,296,261,243,288],
[280,318,282,0,293,292,291,302,289,274],
[270,301,283,257,0,298,263,286,270,281],
[246,295,284,258,252,0,287,282,248,267],
[267,290,254,259,287,263,0,285,267,272],
[237,289,289,248,264,268,265,0,252,259],
[284,322,307,261,280,302,283,298,0,284],
[270,309,262,276,269,283,278,291,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,280,276,264,314,334,316,270,290],
[232,0,250,275,240,279,328,303,257,288],
[270,300,0,317,273,330,365,312,303,291],
[274,275,233,0,275,277,304,240,251,256],
[286,310,277,275,0,328,309,313,294,272],
[236,271,220,273,222,0,313,261,220,240],
[216,222,185,246,241,237,0,229,250,272],
[234,247,238,310,237,289,321,0,212,267],
[280,293,247,299,256,330,300,338,0,315],
[260,262,259,294,278,310,278,283,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,291,292,284,293,276,250,260,279],
[272,0,268,281,271,280,267,269,266,274],
[259,282,0,256,292,278,245,251,245,277],
[258,269,294,0,255,278,254,270,264,266],
[266,279,258,295,0,289,266,276,250,275],
[257,270,272,272,261,0,263,226,234,254],
[274,283,305,296,284,287,0,271,272,284],
[300,281,299,280,274,324,279,0,288,290],
[290,284,305,286,300,316,278,262,0,294],
[271,276,273,284,275,296,266,260,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,244,327,296,295,232,268,300,256],
[278,0,213,287,268,317,235,242,250,265],
[306,337,0,337,270,301,266,324,269,271],
[223,263,213,0,246,287,252,230,248,243],
[254,282,280,304,0,284,235,282,312,298],
[255,233,249,263,266,0,276,262,236,266],
[318,315,284,298,315,274,0,282,335,265],
[282,308,226,320,268,288,268,0,288,285],
[250,300,281,302,238,314,215,262,0,307],
[294,285,279,307,252,284,285,265,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,230,301,231,331,371,349,267,283],
[287,0,196,284,269,281,336,372,232,249],
[320,354,0,281,285,317,319,351,268,266],
[249,266,269,0,251,370,392,353,290,265],
[319,281,265,299,0,312,317,318,317,264],
[219,269,233,180,238,0,233,334,201,265],
[179,214,231,158,233,317,0,297,271,231],
[201,178,199,197,232,216,253,0,217,265],
[283,318,282,260,233,349,279,333,0,338],
[267,301,284,285,286,285,319,285,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,251,259,271,269,264,261,260],
[289,0,282,270,278,258,282,257,263,266],
[286,268,0,268,286,263,275,265,274,282],
[299,280,282,0,299,283,296,280,275,279],
[291,272,264,251,0,263,277,269,266,271],
[279,292,287,267,287,0,280,276,257,273],
[281,268,275,254,273,270,0,263,268,267],
[286,293,285,270,281,274,287,0,268,300],
[289,287,276,275,284,293,282,282,0,295],
[290,284,268,271,279,277,283,250,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,278,264,283,261,271,263,257],
[274,0,276,274,267,282,265,272,271,279],
[267,274,0,272,268,288,265,282,269,305],
[272,276,278,0,246,300,257,271,253,259],
[286,283,282,304,0,321,290,296,291,270],
[267,268,262,250,229,0,242,265,258,251],
[289,285,285,293,260,308,0,282,280,291],
[279,278,268,279,254,285,268,0,255,270],
[287,279,281,297,259,292,270,295,0,285],
[293,271,245,291,280,299,259,280,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,274,292,305,275,297,273,302,308],
[281,0,273,289,303,282,309,281,310,321],
[276,277,0,311,295,308,315,270,311,324],
[258,261,239,0,277,266,278,275,285,287],
[245,247,255,273,0,286,276,264,296,284],
[275,268,242,284,264,0,292,261,289,290],
[253,241,235,272,274,258,0,251,280,273],
[277,269,280,275,286,289,299,0,301,320],
[248,240,239,265,254,261,270,249,0,270],
[242,229,226,263,266,260,277,230,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,281,248,292,262,282,295,288],
[267,0,277,269,267,272,260,272,287,264],
[265,273,0,284,248,275,245,264,273,263],
[269,281,266,0,263,264,262,269,269,262],
[302,283,302,287,0,290,267,290,293,282],
[258,278,275,286,260,0,269,271,286,273],
[288,290,305,288,283,281,0,278,268,272],
[268,278,286,281,260,279,272,0,277,286],
[255,263,277,281,257,264,282,273,0,274],
[262,286,287,288,268,277,278,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,273,286,261,285,252,277,258],
[268,0,278,255,281,243,272,220,250,240],
[274,272,0,266,290,254,272,245,250,235],
[277,295,284,0,271,267,292,256,302,261],
[264,269,260,279,0,265,280,280,254,246],
[289,307,296,283,285,0,294,245,304,281],
[265,278,278,258,270,256,0,271,268,266],
[298,330,305,294,270,305,279,0,299,281],
[273,300,300,248,296,246,282,251,0,259],
[292,310,315,289,304,269,284,269,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,300,289,278,289,289,287,272,293],
[267,0,284,281,263,283,278,272,271,280],
[250,266,0,261,259,269,276,266,262,273],
[261,269,289,0,265,278,266,272,294,292],
[272,287,291,285,0,298,278,289,282,303],
[261,267,281,272,252,0,254,273,277,283],
[261,272,274,284,272,296,0,277,270,291],
[263,278,284,278,261,277,273,0,272,265],
[278,279,288,256,268,273,280,278,0,285],
[257,270,277,258,247,267,259,285,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,241,253,262,271,248,258,249],
[276,0,276,255,253,207,231,247,268,268],
[275,274,0,252,259,246,231,267,282,262],
[309,295,298,0,282,259,268,285,297,286],
[297,297,291,268,0,255,246,268,276,246],
[288,343,304,291,295,0,285,282,309,267],
[279,319,319,282,304,265,0,282,294,278],
[302,303,283,265,282,268,268,0,289,294],
[292,282,268,253,274,241,256,261,0,252],
[301,282,288,264,304,283,272,256,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,267,264,298,254,265,274,264,267],
[300,0,265,267,265,272,261,276,249,266],
[283,285,0,258,283,280,277,263,285,274],
[286,283,292,0,283,276,283,283,263,282],
[252,285,267,267,0,265,278,280,267,265],
[296,278,270,274,285,0,280,267,268,286],
[285,289,273,267,272,270,0,295,281,299],
[276,274,287,267,270,283,255,0,277,299],
[286,301,265,287,283,282,269,273,0,271],
[283,284,276,268,285,264,251,251,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,259,271,269,249,289,257,285,271],
[306,0,266,288,275,276,303,284,302,281],
[291,284,0,285,279,262,272,289,301,289],
[279,262,265,0,268,253,277,263,291,251],
[281,275,271,282,0,274,284,295,300,279],
[301,274,288,297,276,0,279,293,310,293],
[261,247,278,273,266,271,0,284,293,276],
[293,266,261,287,255,257,266,0,314,268],
[265,248,249,259,250,240,257,236,0,262],
[279,269,261,299,271,257,274,282,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,289,255,280,280,252,262,283],
[286,0,303,284,278,288,294,276,272,298],
[266,247,0,272,255,256,257,258,258,284],
[261,266,278,0,280,280,271,255,257,263],
[295,272,295,270,0,269,287,277,267,273],
[270,262,294,270,281,0,261,266,262,261],
[270,256,293,279,263,289,0,273,273,284],
[298,274,292,295,273,284,277,0,286,291],
[288,278,292,293,283,288,277,264,0,273],
[267,252,266,287,277,289,266,259,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,292,299,274,292,310,306,272,282],
[253,0,271,267,267,281,261,281,269,281],
[258,279,0,287,265,261,290,288,279,289],
[251,283,263,0,257,264,276,292,273,272],
[276,283,285,293,0,281,290,300,271,288],
[258,269,289,286,269,0,272,277,278,275],
[240,289,260,274,260,278,0,293,268,265],
[244,269,262,258,250,273,257,0,257,259],
[278,281,271,277,279,272,282,293,0,281],
[268,269,261,278,262,275,285,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,186,366,458,458,458,457,367,458,273],
[364,0,272,365,458,458,364,458,458,364],
[184,278,0,369,550,459,366,367,458,273],
[92,185,181,0,274,274,181,367,365,181],
[92,92,0,276,0,459,184,274,365,92],
[92,92,91,276,91,0,184,274,365,92],
[93,186,184,369,366,366,0,367,366,185],
[183,92,183,183,276,276,183,0,365,92],
[92,92,92,185,185,185,184,185,0,92],
[277,186,277,369,458,458,365,458,458,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,171,241,217,243,206,220,203,194],
[294,0,238,287,312,277,240,279,220,197],
[379,312,0,311,384,292,311,313,242,303],
[309,263,239,0,276,219,252,259,206,204],
[333,238,166,274,0,214,192,239,201,208],
[307,273,258,331,336,0,288,315,264,244],
[344,310,239,298,358,262,0,296,279,245],
[330,271,237,291,311,235,254,0,239,272],
[347,330,308,344,349,286,271,311,0,295],
[356,353,247,346,342,306,305,278,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,289,269,298,278,290,294,276,288],
[267,0,283,278,283,264,266,275,269,289],
[261,267,0,267,254,285,270,274,260,295],
[281,272,283,0,303,271,284,273,282,293],
[252,267,296,247,0,261,246,283,272,288],
[272,286,265,279,289,0,268,282,268,289],
[260,284,280,266,304,282,0,272,268,303],
[256,275,276,277,267,268,278,0,270,288],
[274,281,290,268,278,282,282,280,0,291],
[262,261,255,257,262,261,247,262,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,254,243,259,274,245,252,231,240],
[248,0,261,211,229,245,245,219,267,244],
[296,289,0,263,281,266,262,257,281,277],
[307,339,287,0,288,317,283,272,297,303],
[291,321,269,262,0,274,281,272,282,223],
[276,305,284,233,276,0,221,253,242,230],
[305,305,288,267,269,329,0,281,264,315],
[298,331,293,278,278,297,269,0,246,264],
[319,283,269,253,268,308,286,304,0,294],
[310,306,273,247,327,320,235,286,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,312,282,258,288,286,296,302,292],
[258,0,300,265,268,301,286,285,289,274],
[238,250,0,252,275,294,278,278,273,268],
[268,285,298,0,277,282,278,276,279,288],
[292,282,275,273,0,305,278,291,300,285],
[262,249,256,268,245,0,277,279,279,259],
[264,264,272,272,272,273,0,285,282,273],
[254,265,272,274,259,271,265,0,282,275],
[248,261,277,271,250,271,268,268,0,268],
[258,276,282,262,265,291,277,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,271,308,251,248,245,278,247,224],
[282,0,264,335,256,275,244,268,273,284],
[279,286,0,294,276,286,269,278,274,252],
[242,215,256,0,247,268,244,242,267,265],
[299,294,274,303,0,272,275,308,281,254],
[302,275,264,282,278,0,255,275,281,284],
[305,306,281,306,275,295,0,289,285,275],
[272,282,272,308,242,275,261,0,270,249],
[303,277,276,283,269,269,265,280,0,274],
[326,266,298,285,296,266,275,301,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,287,330,285,279,289,326,325,316],
[281,0,258,334,271,314,290,295,306,300],
[263,292,0,293,275,239,280,309,309,254],
[220,216,257,0,228,206,283,268,248,239],
[265,279,275,322,0,306,254,299,282,291],
[271,236,311,344,244,0,294,293,296,272],
[261,260,270,267,296,256,0,255,277,269],
[224,255,241,282,251,257,295,0,285,270],
[225,244,241,302,268,254,273,265,0,273],
[234,250,296,311,259,278,281,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,273,274,269,291,303,286,278],
[262,0,287,274,263,255,275,270,267,269],
[253,263,0,275,251,250,271,279,264,272],
[277,276,275,0,259,261,292,277,261,282],
[276,287,299,291,0,279,272,298,266,263],
[281,295,300,289,271,0,298,290,266,278],
[259,275,279,258,278,252,0,289,259,258],
[247,280,271,273,252,260,261,0,239,258],
[264,283,286,289,284,284,291,311,0,285],
[272,281,278,268,287,272,292,292,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,257,271,264,281,248,241,278,279],
[283,0,305,281,314,261,280,280,275,282],
[293,245,0,248,256,255,243,246,277,266],
[279,269,302,0,312,261,276,253,282,294],
[286,236,294,238,0,258,239,259,258,250],
[269,289,295,289,292,0,272,241,257,267],
[302,270,307,274,311,278,0,241,258,275],
[309,270,304,297,291,309,309,0,268,310],
[272,275,273,268,292,293,292,282,0,296],
[271,268,284,256,300,283,275,240,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,226,259,256,257,237,225,277,264],
[290,0,270,252,245,255,268,246,285,281],
[324,280,0,278,267,319,275,278,301,308],
[291,298,272,0,288,265,257,285,276,264],
[294,305,283,262,0,272,289,288,314,295],
[293,295,231,285,278,0,261,237,301,273],
[313,282,275,293,261,289,0,268,297,288],
[325,304,272,265,262,313,282,0,334,294],
[273,265,249,274,236,249,253,216,0,261],
[286,269,242,286,255,277,262,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,254,270,274,237,309,227,252,291],
[283,0,263,245,233,263,258,238,307,289],
[296,287,0,281,313,263,334,268,287,306],
[280,305,269,0,281,252,312,294,275,297],
[276,317,237,269,0,250,256,269,265,339],
[313,287,287,298,300,0,306,258,328,293],
[241,292,216,238,294,244,0,219,238,296],
[323,312,282,256,281,292,331,0,327,281],
[298,243,263,275,285,222,312,223,0,286],
[259,261,244,253,211,257,254,269,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,264,263,285,253,262,256,269],
[277,0,248,268,272,301,268,279,281,290],
[279,302,0,279,288,299,266,268,273,286],
[286,282,271,0,272,308,284,273,274,282],
[287,278,262,278,0,297,268,270,268,272],
[265,249,251,242,253,0,265,248,239,265],
[297,282,284,266,282,285,0,274,273,258],
[288,271,282,277,280,302,276,0,267,287],
[294,269,277,276,282,311,277,283,0,269],
[281,260,264,268,278,285,292,263,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,247,233,162,260,244,223,284,270],
[343,0,341,299,262,357,339,332,301,272],
[303,209,0,221,168,290,245,275,258,192],
[317,251,329,0,314,316,262,356,301,319],
[388,288,382,236,0,289,275,305,356,289],
[290,193,260,234,261,0,259,263,274,260],
[306,211,305,288,275,291,0,276,277,314],
[327,218,275,194,245,287,274,0,274,263],
[266,249,292,249,194,276,273,276,0,288],
[280,278,358,231,261,290,236,287,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,297,275,277,286,285,310,295,275],
[272,0,274,229,274,260,247,271,262,264],
[253,276,0,255,284,290,278,288,279,284],
[275,321,295,0,299,284,279,312,299,280],
[273,276,266,251,0,271,267,282,272,268],
[264,290,260,266,279,0,258,289,281,291],
[265,303,272,271,283,292,0,296,284,288],
[240,279,262,238,268,261,254,0,280,260],
[255,288,271,251,278,269,266,270,0,272],
[275,286,266,270,282,259,262,290,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,286,297,314,277,294,284,303],
[277,0,257,280,285,272,275,274,259,281],
[280,293,0,277,297,281,283,275,285,301],
[264,270,273,0,273,284,268,263,280,284],
[253,265,253,277,0,279,272,271,255,289],
[236,278,269,266,271,0,284,275,252,286],
[273,275,267,282,278,266,0,276,269,289],
[256,276,275,287,279,275,274,0,269,281],
[266,291,265,270,295,298,281,281,0,297],
[247,269,249,266,261,264,261,269,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,282,283,289,256,261,283,259,265],
[227,0,259,269,281,282,273,269,256,247],
[268,291,0,260,294,314,315,299,256,266],
[267,281,290,0,266,293,249,306,236,246],
[261,269,256,284,0,292,275,275,272,288],
[294,268,236,257,258,0,269,237,220,251],
[289,277,235,301,275,281,0,308,282,278],
[267,281,251,244,275,313,242,0,249,276],
[291,294,294,314,278,330,268,301,0,291],
[285,303,284,304,262,299,272,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,287,286,273,283,297,297,282,284],
[248,0,268,269,279,267,271,269,259,272],
[263,282,0,278,290,278,268,278,271,278],
[264,281,272,0,284,284,260,276,258,286],
[277,271,260,266,0,266,259,273,260,268],
[267,283,272,266,284,0,267,289,275,279],
[253,279,282,290,291,283,0,297,276,279],
[253,281,272,274,277,261,253,0,257,276],
[268,291,279,292,290,275,274,293,0,279],
[266,278,272,264,282,271,271,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,292,282,276,275,292,280,289],
[276,0,288,269,285,275,271,295,284,304],
[266,262,0,274,281,293,290,289,282,298],
[258,281,276,0,274,275,253,280,252,297],
[268,265,269,276,0,262,270,286,289,290],
[274,275,257,275,288,0,278,294,257,280],
[275,279,260,297,280,272,0,302,262,292],
[258,255,261,270,264,256,248,0,250,257],
[270,266,268,298,261,293,288,300,0,286],
[261,246,252,253,260,270,258,293,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,305,285,281,265,298,277,284,281],
[258,0,290,263,258,259,275,263,261,266],
[245,260,0,259,262,260,270,261,261,256],
[265,287,291,0,277,269,272,259,271,279],
[269,292,288,273,0,267,285,275,282,274],
[285,291,290,281,283,0,290,273,276,282],
[252,275,280,278,265,260,0,259,276,274],
[273,287,289,291,275,277,291,0,281,290],
[266,289,289,279,268,274,274,269,0,272],
[269,284,294,271,276,268,276,260,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,278,282,283,283,284,285,274],
[271,0,266,287,270,280,283,278,278,288],
[275,284,0,285,276,275,284,285,270,265],
[272,263,265,0,268,274,274,273,267,288],
[268,280,274,282,0,288,295,279,276,291],
[267,270,275,276,262,0,273,290,268,273],
[267,267,266,276,255,277,0,265,263,263],
[266,272,265,277,271,260,285,0,271,273],
[265,272,280,283,274,282,287,279,0,281],
[276,262,285,262,259,277,287,277,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,267,297,299,257,244,261,233,309],
[348,0,289,316,294,263,312,288,279,293],
[283,261,0,277,282,261,269,286,267,320],
[253,234,273,0,261,261,264,256,209,273],
[251,256,268,289,0,305,299,255,303,275],
[293,287,289,289,245,0,280,242,235,284],
[306,238,281,286,251,270,0,234,248,339],
[289,262,264,294,295,308,316,0,251,324],
[317,271,283,341,247,315,302,299,0,325],
[241,257,230,277,275,266,211,226,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,275,273,284,278,296,293,298],
[276,0,251,260,257,287,285,272,292,262],
[268,299,0,284,282,297,286,290,300,281],
[275,290,266,0,281,292,281,278,280,276],
[277,293,268,269,0,277,265,295,263,277],
[266,263,253,258,273,0,262,278,274,276],
[272,265,264,269,285,288,0,276,261,242],
[254,278,260,272,255,272,274,0,279,270],
[257,258,250,270,287,276,289,271,0,266],
[252,288,269,274,273,274,308,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,288,271,281,282,277,313,267,251],
[261,0,242,239,261,256,265,285,269,244],
[262,308,0,277,283,286,278,313,274,260],
[279,311,273,0,277,290,296,299,279,277],
[269,289,267,273,0,276,251,277,262,251],
[268,294,264,260,274,0,263,293,263,255],
[273,285,272,254,299,287,0,292,276,253],
[237,265,237,251,273,257,258,0,235,237],
[283,281,276,271,288,287,274,315,0,271],
[299,306,290,273,299,295,297,313,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,321,296,297,324,348,276,254,254],
[275,0,343,249,277,344,324,274,275,322],
[229,207,0,248,228,274,321,298,272,226],
[254,301,302,0,257,325,323,300,298,301],
[253,273,322,293,0,346,322,343,227,275],
[226,206,276,225,204,0,300,228,251,162],
[202,226,229,227,228,250,0,273,296,203],
[274,276,252,250,207,322,277,0,228,274],
[296,275,278,252,323,299,254,322,0,251],
[296,228,324,249,275,388,347,276,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,258,288,288,289,282,263,265,282],
[282,0,273,278,267,268,279,264,277,278],
[292,277,0,285,285,282,282,259,286,261],
[262,272,265,0,273,276,286,265,266,267],
[262,283,265,277,0,273,288,271,263,271],
[261,282,268,274,277,0,278,271,291,251],
[268,271,268,264,262,272,0,288,264,259],
[287,286,291,285,279,279,262,0,293,276],
[285,273,264,284,287,259,286,257,0,280],
[268,272,289,283,279,299,291,274,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,258,255,286,255,279,262,268,262],
[285,0,287,261,286,257,277,253,277,269],
[292,263,0,262,289,233,277,257,276,268],
[295,289,288,0,300,286,268,273,304,286],
[264,264,261,250,0,268,288,243,266,260],
[295,293,317,264,282,0,281,295,292,299],
[271,273,273,282,262,269,0,241,269,280],
[288,297,293,277,307,255,309,0,298,284],
[282,273,274,246,284,258,281,252,0,276],
[288,281,282,264,290,251,270,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,273,294,275,262,269,271,275],
[290,0,257,288,275,289,255,272,280,276],
[280,293,0,274,271,273,276,273,260,272],
[277,262,276,0,269,271,269,275,250,261],
[256,275,279,281,0,262,261,267,262,265],
[275,261,277,279,288,0,244,263,275,258],
[288,295,274,281,289,306,0,277,278,275],
[281,278,277,275,283,287,273,0,272,289],
[279,270,290,300,288,275,272,278,0,288],
[275,274,278,289,285,292,275,261,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,272,280,289,275,265,273,237],
[280,0,282,298,269,277,284,277,291,269],
[277,268,0,273,278,278,269,269,271,238],
[278,252,277,0,308,292,273,301,279,234],
[270,281,272,242,0,256,253,230,301,255],
[261,273,272,258,294,0,271,284,281,262],
[275,266,281,277,297,279,0,266,272,236],
[285,273,281,249,320,266,284,0,300,278],
[277,259,279,271,249,269,278,250,0,251],
[313,281,312,316,295,288,314,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,322,280,269,292,284,278,300],
[292,0,293,284,307,272,312,279,309,275],
[268,257,0,279,281,245,249,289,287,277],
[228,266,271,0,286,267,287,260,283,295],
[270,243,269,264,0,248,285,259,295,296],
[281,278,305,283,302,0,271,289,266,300],
[258,238,301,263,265,279,0,284,261,277],
[266,271,261,290,291,261,266,0,293,286],
[272,241,263,267,255,284,289,257,0,284],
[250,275,273,255,254,250,273,264,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,274,283,283,275,259,273,258],
[281,0,276,279,303,284,291,283,267,280],
[292,274,0,299,287,294,297,282,286,275],
[276,271,251,0,283,281,280,267,279,253],
[267,247,263,267,0,272,266,255,269,254],
[267,266,256,269,278,0,263,281,263,271],
[275,259,253,270,284,287,0,264,283,278],
[291,267,268,283,295,269,286,0,281,273],
[277,283,264,271,281,287,267,269,0,257],
[292,270,275,297,296,279,272,277,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,268,269,275,275,272,291,275,287],
[274,0,245,270,288,280,257,292,268,268],
[282,305,0,279,295,279,286,307,282,272],
[281,280,271,0,283,261,286,260,278,288],
[275,262,255,267,0,291,292,289,261,287],
[275,270,271,289,259,0,282,266,265,264],
[278,293,264,264,258,268,0,287,288,257],
[259,258,243,290,261,284,263,0,274,294],
[275,282,268,272,289,285,262,276,0,306],
[263,282,278,262,263,286,293,256,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,267,271,262,281,292,235,255,289],
[271,0,254,279,270,273,318,254,263,278],
[283,296,0,290,264,261,321,297,275,267],
[279,271,260,0,241,292,309,262,258,257],
[288,280,286,309,0,273,284,278,297,285],
[269,277,289,258,277,0,290,299,283,280],
[258,232,229,241,266,260,0,259,270,278],
[315,296,253,288,272,251,291,0,259,279],
[295,287,275,292,253,267,280,291,0,277],
[261,272,283,293,265,270,272,271,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,281,279,275,278,287,272,272],
[261,0,280,269,288,268,285,290,262,281],
[275,270,0,280,281,272,284,285,259,273],
[269,281,270,0,286,271,300,285,273,285],
[271,262,269,264,0,252,263,273,262,265],
[275,282,278,279,298,0,296,290,274,280],
[272,265,266,250,287,254,0,257,245,247],
[263,260,265,265,277,260,293,0,277,262],
[278,288,291,277,288,276,305,273,0,269],
[278,269,277,265,285,270,303,288,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,259,266,265,266,272,268,270,276],
[281,0,282,265,260,268,270,287,265,280],
[291,268,0,272,272,265,283,277,278,276],
[284,285,278,0,275,276,281,269,287,290],
[285,290,278,275,0,278,282,282,292,285],
[284,282,285,274,272,0,276,286,276,272],
[278,280,267,269,268,274,0,270,256,282],
[282,263,273,281,268,264,280,0,286,274],
[280,285,272,263,258,274,294,264,0,274],
[274,270,274,260,265,278,268,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,288,284,299,247,270,278,295,307],
[312,0,289,306,318,268,302,304,309,336],
[262,261,0,266,266,262,266,281,274,308],
[266,244,284,0,270,295,290,284,306,309],
[251,232,284,280,0,270,258,262,253,272],
[303,282,288,255,280,0,293,301,306,322],
[280,248,284,260,292,257,0,288,282,312],
[272,246,269,266,288,249,262,0,255,306],
[255,241,276,244,297,244,268,295,0,317],
[243,214,242,241,278,228,238,244,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,272,275,254,273,284,295,274],
[282,0,264,288,285,281,290,268,291,282],
[280,286,0,276,277,280,282,269,268,268],
[278,262,274,0,265,270,283,278,280,276],
[275,265,273,285,0,273,272,265,286,280],
[296,269,270,280,277,0,289,282,280,280],
[277,260,268,267,278,261,0,275,285,280],
[266,282,281,272,285,268,275,0,275,276],
[255,259,282,270,264,270,265,275,0,262],
[276,268,282,274,270,270,270,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,279,264,235,281,257,303,265,301],
[247,0,347,240,276,282,346,253,283,320],
[271,203,0,246,202,230,248,266,268,241],
[286,310,304,0,256,246,248,270,269,319],
[315,274,348,294,0,271,300,333,313,335],
[269,268,320,304,279,0,310,283,309,319],
[293,204,302,302,250,240,0,305,280,278],
[247,297,284,280,217,267,245,0,245,259],
[285,267,282,281,237,241,270,305,0,304],
[249,230,309,231,215,231,272,291,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,248,344,314,293,384,329,324,316],
[252,0,236,244,277,279,302,270,275,306],
[302,314,0,316,324,251,316,356,315,283],
[206,306,234,0,253,284,307,296,276,276],
[236,273,226,297,0,275,368,298,274,318],
[257,271,299,266,275,0,332,321,283,287],
[166,248,234,243,182,218,0,242,258,262],
[221,280,194,254,252,229,308,0,278,244],
[226,275,235,274,276,267,292,272,0,306],
[234,244,267,274,232,263,288,306,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,265,291,273,297,283,268,248],
[274,0,295,290,282,266,283,273,277,275],
[273,255,0,264,280,281,302,287,267,269],
[285,260,286,0,268,269,293,284,259,271],
[259,268,270,282,0,255,273,268,243,265],
[277,284,269,281,295,0,277,297,262,258],
[253,267,248,257,277,273,0,275,265,248],
[267,277,263,266,282,253,275,0,276,248],
[282,273,283,291,307,288,285,274,0,265],
[302,275,281,279,285,292,302,302,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,261,272,241,234,242,264,254,244],
[256,0,269,284,245,250,268,286,269,268],
[289,281,0,256,243,247,242,279,268,267],
[278,266,294,0,259,287,236,278,252,266],
[309,305,307,291,0,271,278,295,271,295],
[316,300,303,263,279,0,297,278,274,298],
[308,282,308,314,272,253,0,299,290,287],
[286,264,271,272,255,272,251,0,227,274],
[296,281,282,298,279,276,260,323,0,267],
[306,282,283,284,255,252,263,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,264,260,260,271,277,254,237,278],
[279,0,250,262,259,284,280,265,267,273],
[286,300,0,266,274,298,291,281,277,280],
[290,288,284,0,289,308,278,277,275,295],
[290,291,276,261,0,308,282,296,259,300],
[279,266,252,242,242,0,259,252,243,274],
[273,270,259,272,268,291,0,253,263,279],
[296,285,269,273,254,298,297,0,249,291],
[313,283,273,275,291,307,287,301,0,302],
[272,277,270,255,250,276,271,259,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,309,321,245,297,283,294,284,269],
[293,0,304,290,296,296,267,275,310,239],
[241,246,0,257,244,286,206,242,309,180],
[229,260,293,0,294,268,292,255,311,219],
[305,254,306,256,0,343,274,213,299,277],
[253,254,264,282,207,0,277,263,283,248],
[267,283,344,258,276,273,0,278,287,266],
[256,275,308,295,337,287,272,0,323,278],
[266,240,241,239,251,267,263,227,0,253],
[281,311,370,331,273,302,284,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,234,253,244,246,262,241,267,256],
[308,0,279,284,269,287,292,282,295,271],
[316,271,0,284,283,284,295,284,308,281],
[297,266,266,0,266,267,286,275,288,275],
[306,281,267,284,0,267,290,294,289,278],
[304,263,266,283,283,0,296,271,293,281],
[288,258,255,264,260,254,0,259,287,271],
[309,268,266,275,256,279,291,0,287,285],
[283,255,242,262,261,257,263,263,0,254],
[294,279,269,275,272,269,279,265,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,252,281,278,270,283,283,286,280],
[240,0,257,269,297,272,274,307,297,278],
[298,293,0,275,308,313,311,323,310,292],
[269,281,275,0,295,304,291,299,308,299],
[272,253,242,255,0,259,264,285,298,272],
[280,278,237,246,291,0,285,270,274,274],
[267,276,239,259,286,265,0,289,303,259],
[267,243,227,251,265,280,261,0,284,274],
[264,253,240,242,252,276,247,266,0,245],
[270,272,258,251,278,276,291,276,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,270,255,213,285,238,254,310,257],
[309,0,280,282,315,256,281,313,268,280],
[280,270,0,282,267,253,266,284,293,293],
[295,268,268,0,269,257,270,313,309,279],
[337,235,283,281,0,285,282,295,297,267],
[265,294,297,293,265,0,223,268,310,296],
[312,269,284,280,268,327,0,312,322,255],
[296,237,266,237,255,282,238,0,309,252],
[240,282,257,241,253,240,228,241,0,310],
[293,270,257,271,283,254,295,298,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,331,278,292,306,288,249,278,283],
[287,0,330,283,271,295,304,307,304,292],
[219,220,0,236,224,262,267,235,232,236],
[272,267,314,0,291,295,313,267,319,277],
[258,279,326,259,0,288,273,254,280,266],
[244,255,288,255,262,0,262,253,254,264],
[262,246,283,237,277,288,0,236,281,253],
[301,243,315,283,296,297,314,0,289,291],
[272,246,318,231,270,296,269,261,0,264],
[267,258,314,273,284,286,297,259,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,285,265,279,281,304,291,290,254],
[265,0,317,272,306,305,288,280,317,304],
[265,233,0,249,266,273,291,270,287,275],
[285,278,301,0,302,299,310,275,286,278],
[271,244,284,248,0,286,299,272,297,258],
[269,245,277,251,264,0,288,282,268,271],
[246,262,259,240,251,262,0,266,245,266],
[259,270,280,275,278,268,284,0,274,272],
[260,233,263,264,253,282,305,276,0,267],
[296,246,275,272,292,279,284,278,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,254,272,288,251,298,221,235,248],
[306,0,269,262,298,314,320,266,294,297],
[296,281,0,267,304,280,314,313,290,270],
[278,288,283,0,278,275,276,245,283,258],
[262,252,246,272,0,243,288,248,268,271],
[299,236,270,275,307,0,311,268,280,272],
[252,230,236,274,262,239,0,259,271,268],
[329,284,237,305,302,282,291,0,280,259],
[315,256,260,267,282,270,279,270,0,273],
[302,253,280,292,279,278,282,291,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,287,280,288,286,262,276,271,278],
[277,0,270,266,291,286,284,262,268,279],
[263,280,0,279,255,265,261,259,268,246],
[270,284,271,0,284,253,254,253,249,253],
[262,259,295,266,0,284,276,262,285,272],
[264,264,285,297,266,0,256,265,269,271],
[288,266,289,296,274,294,0,287,295,273],
[274,288,291,297,288,285,263,0,302,255],
[279,282,282,301,265,281,255,248,0,264],
[272,271,304,297,278,279,277,295,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,273,288,252,283,303,277,283,286],
[252,0,276,293,269,271,273,258,259,276],
[277,274,0,288,266,286,270,289,282,274],
[262,257,262,0,263,262,262,288,257,272],
[298,281,284,287,0,302,317,296,272,294],
[267,279,264,288,248,0,287,276,286,272],
[247,277,280,288,233,263,0,265,280,281],
[273,292,261,262,254,274,285,0,276,301],
[267,291,268,293,278,264,270,274,0,313],
[264,274,276,278,256,278,269,249,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,301,261,244,276,286,276,268],
[267,0,281,315,272,265,261,274,269,245],
[278,269,0,299,267,303,259,292,248,252],
[249,235,251,0,235,267,251,257,225,216],
[289,278,283,315,0,281,273,289,268,286],
[306,285,247,283,269,0,245,253,281,273],
[274,289,291,299,277,305,0,280,265,278],
[264,276,258,293,261,297,270,0,249,247],
[274,281,302,325,282,269,285,301,0,268],
[282,305,298,334,264,277,272,303,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,270,286,290,275,278,279,278,294],
[287,0,278,284,317,303,277,305,288,272],
[280,272,0,295,299,293,278,291,244,300],
[264,266,255,0,264,273,259,269,247,276],
[260,233,251,286,0,257,257,261,257,251],
[275,247,257,277,293,0,244,281,277,249],
[272,273,272,291,293,306,0,281,261,297],
[271,245,259,281,289,269,269,0,258,271],
[272,262,306,303,293,273,289,292,0,288],
[256,278,250,274,299,301,253,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,285,278,295,347,272,280,304],
[260,0,245,274,274,264,327,247,232,271],
[267,305,0,311,315,299,334,221,280,312],
[265,276,239,0,267,252,296,270,266,285],
[272,276,235,283,0,304,321,279,233,280],
[255,286,251,298,246,0,317,270,263,291],
[203,223,216,254,229,233,0,207,238,266],
[278,303,329,280,271,280,343,0,279,304],
[270,318,270,284,317,287,312,271,0,279],
[246,279,238,265,270,259,284,246,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,255,283,302,285,272,289,281,292],
[303,0,266,272,309,286,283,305,301,283],
[295,284,0,292,319,291,285,302,272,286],
[267,278,258,0,302,251,279,295,281,280],
[248,241,231,248,0,255,253,258,260,256],
[265,264,259,299,295,0,282,312,284,286],
[278,267,265,271,297,268,0,286,272,281],
[261,245,248,255,292,238,264,0,264,261],
[269,249,278,269,290,266,278,286,0,275],
[258,267,264,270,294,264,269,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,206,259,279,254,310,324,292,220,359],
[344,0,242,330,273,324,272,325,274,256],
[291,308,0,276,273,394,309,323,234,359],
[271,220,274,0,275,289,308,287,253,324],
[296,277,277,275,0,347,326,329,262,328],
[240,226,156,261,203,0,217,241,206,309],
[226,278,241,242,224,333,0,276,257,328],
[258,225,227,263,221,309,274,0,294,276],
[330,276,316,297,288,344,293,256,0,297],
[191,294,191,226,222,241,222,274,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,261,322,322,248,287,322,301,354],
[230,0,263,318,267,264,230,337,192,335],
[289,287,0,287,356,233,251,267,284,282],
[228,232,263,0,357,265,265,282,192,372],
[228,283,194,193,0,209,178,285,282,300],
[302,286,317,285,341,0,323,323,269,337],
[263,320,299,285,372,227,0,336,283,354],
[228,213,283,268,265,227,214,0,175,337],
[249,358,266,358,268,281,267,375,0,353],
[196,215,268,178,250,213,196,213,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,298,262,282,297,276,252,281,287],
[242,0,274,283,263,325,287,262,260,263],
[252,276,0,269,282,302,283,236,254,292],
[288,267,281,0,286,289,279,279,288,235],
[268,287,268,264,0,305,285,270,271,265],
[253,225,248,261,245,0,268,260,246,249],
[274,263,267,271,265,282,0,249,235,245],
[298,288,314,271,280,290,301,0,253,280],
[269,290,296,262,279,304,315,297,0,276],
[263,287,258,315,285,301,305,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,272,267,272,275,275,266,258],
[279,0,277,290,279,272,274,298,277,262],
[277,273,0,288,276,277,279,296,281,276],
[278,260,262,0,256,274,269,287,268,266],
[283,271,274,294,0,286,284,297,281,262],
[278,278,273,276,264,0,271,279,262,276],
[275,276,271,281,266,279,0,283,278,277],
[275,252,254,263,253,271,267,0,266,257],
[284,273,269,282,269,288,272,284,0,264],
[292,288,274,284,288,274,273,293,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,272,262,256,277,253,279,278],
[281,0,289,279,280,282,256,267,290,274],
[259,261,0,270,270,265,264,254,269,259],
[278,271,280,0,264,278,270,260,267,260],
[288,270,280,286,0,270,277,265,286,280],
[294,268,285,272,280,0,260,263,287,265],
[273,294,286,280,273,290,0,277,287,273],
[297,283,296,290,285,287,273,0,303,259],
[271,260,281,283,264,263,263,247,0,266],
[272,276,291,290,270,285,277,291,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,305,267,303,244,274,285,313],
[268,0,294,298,264,295,291,296,309,278],
[274,256,0,306,264,294,278,271,291,280],
[245,252,244,0,266,266,265,246,266,264],
[283,286,286,284,0,303,273,290,311,276],
[247,255,256,284,247,0,248,241,285,255],
[306,259,272,285,277,302,0,280,286,287],
[276,254,279,304,260,309,270,0,323,276],
[265,241,259,284,239,265,264,227,0,262],
[237,272,270,286,274,295,263,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,218,261,308,265,276,273,263,249],
[275,0,282,222,323,293,283,245,273,243],
[332,268,0,280,295,300,312,292,281,322],
[289,328,270,0,261,312,305,268,265,272],
[242,227,255,289,0,297,230,269,252,249],
[285,257,250,238,253,0,279,270,255,284],
[274,267,238,245,320,271,0,274,272,237],
[277,305,258,282,281,280,276,0,288,281],
[287,277,269,285,298,295,278,262,0,287],
[301,307,228,278,301,266,313,269,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,271,279,248,241,271,284,258],
[274,0,275,279,268,273,283,269,286,276],
[266,275,0,268,259,279,249,274,296,282],
[279,271,282,0,276,261,263,284,293,271],
[271,282,291,274,0,273,264,279,285,264],
[302,277,271,289,277,0,258,289,298,280],
[309,267,301,287,286,292,0,282,308,297],
[279,281,276,266,271,261,268,0,280,271],
[266,264,254,257,265,252,242,270,0,270],
[292,274,268,279,286,270,253,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,279,265,280,269,282,267,275],
[272,0,274,301,274,262,262,275,274,283],
[275,276,0,263,268,252,268,260,259,273],
[271,249,287,0,262,263,266,275,246,286],
[285,276,282,288,0,267,288,281,252,250],
[270,288,298,287,283,0,294,297,290,288],
[281,288,282,284,262,256,0,293,273,294],
[268,275,290,275,269,253,257,0,283,286],
[283,276,291,304,298,260,277,267,0,273],
[275,267,277,264,300,262,256,264,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,288,267,306,273,253,271,288,287],
[266,0,269,250,282,249,253,254,277,275],
[262,281,0,256,281,266,265,265,275,271],
[283,300,294,0,290,280,260,264,292,286],
[244,268,269,260,0,278,268,267,268,280],
[277,301,284,270,272,0,275,275,266,296],
[297,297,285,290,282,275,0,274,296,308],
[279,296,285,286,283,275,276,0,285,301],
[262,273,275,258,282,284,254,265,0,286],
[263,275,279,264,270,254,242,249,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,289,285,294,284,287,269,285,286],
[230,0,280,238,263,236,249,260,252,278],
[261,270,0,274,275,261,240,264,266,261],
[265,312,276,0,260,259,268,258,263,276],
[256,287,275,290,0,262,266,279,272,273],
[266,314,289,291,288,0,274,249,278,292],
[263,301,310,282,284,276,0,259,297,290],
[281,290,286,292,271,301,291,0,275,283],
[265,298,284,287,278,272,253,275,0,276],
[264,272,289,274,277,258,260,267,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,323,314,295,303,258,282,261,268],
[248,0,310,284,302,340,230,254,269,258],
[227,240,0,248,252,215,219,168,261,171],
[236,266,302,0,268,276,225,243,212,286],
[255,248,298,282,0,285,233,269,282,270],
[247,210,335,274,265,0,259,279,260,260],
[292,320,331,325,317,291,0,296,315,265],
[268,296,382,307,281,271,254,0,319,279],
[289,281,289,338,268,290,235,231,0,261],
[282,292,379,264,280,290,285,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,271,272,251,303,284,265,279,265],
[250,0,279,268,250,288,260,259,239,277],
[279,271,0,256,248,271,256,231,254,256],
[278,282,294,0,246,296,260,258,261,269],
[299,300,302,304,0,282,281,272,294,277],
[247,262,279,254,268,0,229,229,219,256],
[266,290,294,290,269,321,0,291,275,276],
[285,291,319,292,278,321,259,0,249,261],
[271,311,296,289,256,331,275,301,0,275],
[285,273,294,281,273,294,274,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,305,294,291,275,294,285,298,298],
[258,0,270,288,277,260,254,261,302,284],
[245,280,0,294,254,259,255,263,294,263],
[256,262,256,0,276,268,242,254,291,265],
[259,273,296,274,0,253,250,272,267,299],
[275,290,291,282,297,0,267,295,287,279],
[256,296,295,308,300,283,0,289,303,290],
[265,289,287,296,278,255,261,0,291,268],
[252,248,256,259,283,263,247,259,0,258],
[252,266,287,285,251,271,260,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,298,242,301,286,292,242,254],
[266,0,258,255,284,286,264,289,266,266],
[280,292,0,283,274,312,302,319,281,280],
[252,295,267,0,258,295,253,265,234,263],
[308,266,276,292,0,299,280,316,249,276],
[249,264,238,255,251,0,240,280,252,253],
[264,286,248,297,270,310,0,308,254,283],
[258,261,231,285,234,270,242,0,253,266],
[308,284,269,316,301,298,296,297,0,290],
[296,284,270,287,274,297,267,284,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,262,269,259,294,269,291,262,286],
[241,0,249,243,223,256,241,278,249,275],
[288,301,0,275,272,287,312,298,294,291],
[281,307,275,0,238,313,278,293,257,260],
[291,327,278,312,0,324,277,294,268,279],
[256,294,263,237,226,0,226,237,237,249],
[281,309,238,272,273,324,0,281,285,282],
[259,272,252,257,256,313,269,0,246,256],
[288,301,256,293,282,313,265,304,0,253],
[264,275,259,290,271,301,268,294,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,303,266,254,276,269,260,252,269],
[280,0,281,285,267,262,273,265,247,268],
[247,269,0,283,253,268,272,270,287,274],
[284,265,267,0,239,223,286,223,251,252],
[296,283,297,311,0,282,290,284,274,254],
[274,288,282,327,268,0,284,290,272,280],
[281,277,278,264,260,266,0,258,251,259],
[290,285,280,327,266,260,292,0,275,283],
[298,303,263,299,276,278,299,275,0,257],
[281,282,276,298,296,270,291,267,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,262,272,277,257,278,273,265],
[281,0,274,282,289,276,289,291,289,292],
[285,276,0,286,271,274,279,306,299,275],
[288,268,264,0,277,286,277,271,297,261],
[278,261,279,273,0,270,261,272,284,265],
[273,274,276,264,280,0,250,268,275,256],
[293,261,271,273,289,300,0,272,284,269],
[272,259,244,279,278,282,278,0,278,256],
[277,261,251,253,266,275,266,272,0,259],
[285,258,275,289,285,294,281,294,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,294,282,256,316,279,309,283],
[261,0,255,287,245,273,293,267,284,290],
[267,295,0,292,238,256,303,275,286,292],
[256,263,258,0,257,275,278,236,277,237],
[268,305,312,293,0,286,312,287,315,311],
[294,277,294,275,264,0,294,295,302,265],
[234,257,247,272,238,256,0,275,288,281],
[271,283,275,314,263,255,275,0,303,288],
[241,266,264,273,235,248,262,247,0,268],
[267,260,258,313,239,285,269,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,258,260,281,296,289,273,283],
[283,0,289,263,294,290,292,294,293,278],
[289,261,0,260,281,260,287,283,291,268],
[292,287,290,0,272,281,301,291,267,262],
[290,256,269,278,0,286,288,291,276,252],
[269,260,290,269,264,0,287,274,261,249],
[254,258,263,249,262,263,0,271,262,244],
[261,256,267,259,259,276,279,0,262,268],
[277,257,259,283,274,289,288,288,0,258],
[267,272,282,288,298,301,306,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,268,275,263,305,272,279,290],
[267,0,268,282,262,259,284,284,257,273],
[264,282,0,273,259,267,286,270,269,280],
[282,268,277,0,250,254,284,280,256,260],
[275,288,291,300,0,261,313,272,288,275],
[287,291,283,296,289,0,298,292,288,269],
[245,266,264,266,237,252,0,249,257,257],
[278,266,280,270,278,258,301,0,267,282],
[271,293,281,294,262,262,293,283,0,291],
[260,277,270,290,275,281,293,268,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,276,300,308,297,304,274,310,304],
[283,0,293,318,287,265,288,298,312,288],
[274,257,0,324,305,286,300,253,298,300],
[250,232,226,0,278,250,266,246,284,262],
[242,263,245,272,0,241,237,247,268,249],
[253,285,264,300,309,0,284,266,280,279],
[246,262,250,284,313,266,0,245,269,259],
[276,252,297,304,303,284,305,0,317,285],
[240,238,252,266,282,270,281,233,0,257],
[246,262,250,288,301,271,291,265,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,294,291,292,279,274,285,280,261],
[270,0,288,272,278,258,285,263,273,281],
[256,262,0,277,288,263,271,245,249,245],
[259,278,273,0,287,265,261,259,291,255],
[258,272,262,263,0,247,254,249,267,239],
[271,292,287,285,303,0,275,276,284,271],
[276,265,279,289,296,275,0,274,277,259],
[265,287,305,291,301,274,276,0,282,270],
[270,277,301,259,283,266,273,268,0,259],
[289,269,305,295,311,279,291,280,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,264,316,273,270,276,275,267,273],
[254,0,245,306,248,274,264,268,262,241],
[286,305,0,292,272,278,291,299,297,280],
[234,244,258,0,247,242,253,262,260,259],
[277,302,278,303,0,267,283,295,284,273],
[280,276,272,308,283,0,266,307,285,265],
[274,286,259,297,267,284,0,289,276,259],
[275,282,251,288,255,243,261,0,254,246],
[283,288,253,290,266,265,274,296,0,270],
[277,309,270,291,277,285,291,304,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,255,288,263,274,263,271,279,264],
[284,0,270,284,284,304,276,270,269,284],
[295,280,0,268,275,262,239,252,299,274],
[262,266,282,0,262,297,254,271,272,285],
[287,266,275,288,0,271,278,254,298,264],
[276,246,288,253,279,0,226,247,254,270],
[287,274,311,296,272,324,0,278,313,283],
[279,280,298,279,296,303,272,0,297,282],
[271,281,251,278,252,296,237,253,0,274],
[286,266,276,265,286,280,267,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,321,300,303,254,333,311,286,278],
[242,0,260,252,252,253,288,283,240,257],
[229,290,0,276,280,246,274,280,265,244],
[250,298,274,0,256,291,296,282,233,252],
[247,298,270,294,0,247,298,300,267,284],
[296,297,304,259,303,0,286,293,260,298],
[217,262,276,254,252,264,0,265,246,247],
[239,267,270,268,250,257,285,0,262,256],
[264,310,285,317,283,290,304,288,0,279],
[272,293,306,298,266,252,303,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,305,295,267,299,297,291,311],
[259,0,255,256,257,237,279,267,269,293],
[276,295,0,282,271,280,286,286,292,281],
[245,294,268,0,266,264,266,290,274,280],
[255,293,279,284,0,280,269,284,285,296],
[283,313,270,286,270,0,278,291,295,318],
[251,271,264,284,281,272,0,264,286,298],
[253,283,264,260,266,259,286,0,262,302],
[259,281,258,276,265,255,264,288,0,284],
[239,257,269,270,254,232,252,248,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,294,352,298,216,290,308,339,343],
[269,0,231,288,289,280,278,298,344,363],
[256,319,0,279,309,265,232,288,309,377],
[198,262,271,0,207,204,220,228,281,316],
[252,261,241,343,0,205,274,233,321,278],
[334,270,285,346,345,0,333,325,392,367],
[260,272,318,330,276,217,0,264,288,365],
[242,252,262,322,317,225,286,0,264,307],
[211,206,241,269,229,158,262,286,0,280],
[207,187,173,234,272,183,185,243,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,278,286,279,296,269,261,292],
[272,0,279,258,279,284,288,253,260,274],
[264,271,0,266,271,267,273,249,251,275],
[272,292,284,0,282,271,300,273,273,292],
[264,271,279,268,0,277,285,263,263,272],
[271,266,283,279,273,0,287,260,266,290],
[254,262,277,250,265,263,0,268,252,282],
[281,297,301,277,287,290,282,0,286,275],
[289,290,299,277,287,284,298,264,0,297],
[258,276,275,258,278,260,268,275,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,259,266,254,298,265,272,267,277],
[284,0,235,270,252,255,257,251,235,269],
[291,315,0,274,301,300,299,280,305,299],
[284,280,276,0,277,258,276,231,251,287],
[296,298,249,273,0,268,306,281,246,270],
[252,295,250,292,282,0,293,286,289,296],
[285,293,251,274,244,257,0,252,273,297],
[278,299,270,319,269,264,298,0,263,263],
[283,315,245,299,304,261,277,287,0,312],
[273,281,251,263,280,254,253,287,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,270,257,262,271,256,271,263],
[256,0,273,264,266,274,260,260,262,283],
[278,277,0,266,262,266,261,247,254,260],
[280,286,284,0,279,263,268,272,263,282],
[293,284,288,271,0,268,278,305,277,282],
[288,276,284,287,282,0,280,272,268,283],
[279,290,289,282,272,270,0,281,272,272],
[294,290,303,278,245,278,269,0,262,285],
[279,288,296,287,273,282,278,288,0,285],
[287,267,290,268,268,267,278,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,255,290,296,265,297,315,257,298],
[196,0,289,272,255,243,259,273,289,245],
[295,261,0,269,262,242,269,272,267,283],
[260,278,281,0,235,277,276,258,238,233],
[254,295,288,315,0,282,282,265,301,261],
[285,307,308,273,268,0,302,276,306,284],
[253,291,281,274,268,248,0,267,291,247],
[235,277,278,292,285,274,283,0,238,282],
[293,261,283,312,249,244,259,312,0,239],
[252,305,267,317,289,266,303,268,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,258,279,265,264,266,274,286,272],
[272,0,273,256,261,269,237,255,266,264],
[292,277,0,252,276,283,258,254,302,289],
[271,294,298,0,277,278,275,268,295,283],
[285,289,274,273,0,272,261,251,286,272],
[286,281,267,272,278,0,253,262,278,272],
[284,313,292,275,289,297,0,270,292,279],
[276,295,296,282,299,288,280,0,300,269],
[264,284,248,255,264,272,258,250,0,283],
[278,286,261,267,278,278,271,281,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,295,332,292,291,266,316,278,288],
[280,0,269,340,280,246,294,289,234,288],
[255,281,0,295,287,268,270,284,276,295],
[218,210,255,0,223,202,234,273,216,249],
[258,270,263,327,0,266,262,276,273,273],
[259,304,282,348,284,0,297,316,258,297],
[284,256,280,316,288,253,0,291,254,264],
[234,261,266,277,274,234,259,0,243,252],
[272,316,274,334,277,292,296,307,0,295],
[262,262,255,301,277,253,286,298,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,266,275,272,279,275,272,271,262],
[290,0,289,266,270,288,290,285,283,278],
[284,261,0,280,267,269,290,264,280,258],
[275,284,270,0,267,269,282,266,288,261],
[278,280,283,283,0,285,291,276,290,266],
[271,262,281,281,265,0,286,262,271,269],
[275,260,260,268,259,264,0,268,279,250],
[278,265,286,284,274,288,282,0,289,283],
[279,267,270,262,260,279,271,261,0,260],
[288,272,292,289,284,281,300,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,276,208,270,260,287,249,303,293],
[299,0,316,208,237,300,261,260,286,294],
[274,234,0,221,252,279,268,254,303,274],
[342,342,329,0,266,319,337,293,392,367],
[280,313,298,284,0,271,343,302,332,325],
[290,250,271,231,279,0,320,238,304,295],
[263,289,282,213,207,230,0,248,275,304],
[301,290,296,257,248,312,302,0,304,322],
[247,264,247,158,218,246,275,246,0,307],
[257,256,276,183,225,255,246,228,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,294,271,304,322,281,297,276,278],
[265,0,285,279,297,298,261,285,262,276],
[256,265,0,274,288,281,264,279,254,263],
[279,271,276,0,300,281,261,267,264,271],
[246,253,262,250,0,273,248,254,241,252],
[228,252,269,269,277,0,247,261,247,252],
[269,289,286,289,302,303,0,298,277,273],
[253,265,271,283,296,289,252,0,262,272],
[274,288,296,286,309,303,273,288,0,285],
[272,274,287,279,298,298,277,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,244,259,248,231,275,279,256,252],
[289,0,271,282,277,265,290,294,249,255],
[306,279,0,286,271,270,284,317,272,256],
[291,268,264,0,272,286,265,300,280,272],
[302,273,279,278,0,260,268,294,275,261],
[319,285,280,264,290,0,291,313,271,276],
[275,260,266,285,282,259,0,290,247,261],
[271,256,233,250,256,237,260,0,254,249],
[294,301,278,270,275,279,303,296,0,276],
[298,295,294,278,289,274,289,301,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,266,281,280,286,301,268,279],
[273,0,265,274,278,281,266,293,251,248],
[261,285,0,276,276,249,281,310,263,257],
[284,276,274,0,266,260,275,301,282,255],
[269,272,274,284,0,261,265,303,287,265],
[270,269,301,290,289,0,284,324,245,251],
[264,284,269,275,285,266,0,305,266,258],
[249,257,240,249,247,226,245,0,238,228],
[282,299,287,268,263,305,284,312,0,278],
[271,302,293,295,285,299,292,322,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,319,251,288,266,301,309,320,305],
[239,0,303,248,284,283,297,296,306,346],
[231,247,0,246,239,225,281,257,319,283],
[299,302,304,0,287,259,315,294,304,366],
[262,266,311,263,0,248,278,297,320,306],
[284,267,325,291,302,0,312,305,357,341],
[249,253,269,235,272,238,0,272,269,320],
[241,254,293,256,253,245,278,0,286,286],
[230,244,231,246,230,193,281,264,0,274],
[245,204,267,184,244,209,230,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,283,241,300,273,283,271,288],
[263,0,249,284,247,262,257,273,267,275],
[288,301,0,286,239,265,247,277,284,272],
[267,266,264,0,259,282,259,297,269,277],
[309,303,311,291,0,287,266,309,293,318],
[250,288,285,268,263,0,267,283,268,286],
[277,293,303,291,284,283,0,305,271,297],
[267,277,273,253,241,267,245,0,271,260],
[279,283,266,281,257,282,279,279,0,277],
[262,275,278,273,232,264,253,290,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,294,284,309,298,297,272,308,283],
[277,0,276,273,263,287,301,259,294,260],
[256,274,0,268,272,290,277,278,299,236],
[266,277,282,0,271,295,287,292,302,258],
[241,287,278,279,0,275,278,267,278,232],
[252,263,260,255,275,0,252,243,251,221],
[253,249,273,263,272,298,0,240,274,265],
[278,291,272,258,283,307,310,0,302,254],
[242,256,251,248,272,299,276,248,0,242],
[267,290,314,292,318,329,285,296,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,246,281,297,282,272,275,285,299],
[242,0,300,271,269,257,244,239,275,240],
[304,250,0,273,286,260,290,259,285,257],
[269,279,277,0,267,270,241,255,288,245],
[253,281,264,283,0,245,246,260,269,264],
[268,293,290,280,305,0,271,253,271,265],
[278,306,260,309,304,279,0,306,323,281],
[275,311,291,295,290,297,244,0,304,257],
[265,275,265,262,281,279,227,246,0,237],
[251,310,293,305,286,285,269,293,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,274,382,261,351,337,290,248,380],
[245,0,247,306,232,338,249,295,261,323],
[276,303,0,274,276,307,247,276,307,322],
[168,244,276,0,245,275,184,306,199,306],
[289,318,274,305,0,337,276,306,291,338],
[199,212,243,275,213,0,230,293,198,243],
[213,301,303,366,274,320,0,335,274,300],
[260,255,274,244,244,257,215,0,231,274],
[302,289,243,351,259,352,276,319,0,335],
[170,227,228,244,212,307,250,276,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,289,285,242,280,280,288,289,286],
[274,0,280,278,272,282,279,292,283,281],
[261,270,0,260,262,271,269,269,265,274],
[265,272,290,0,288,273,288,280,278,279],
[308,278,288,262,0,287,301,299,280,301],
[270,268,279,277,263,0,299,269,289,285],
[270,271,281,262,249,251,0,283,275,265],
[262,258,281,270,251,281,267,0,279,274],
[261,267,285,272,270,261,275,271,0,279],
[264,269,276,271,249,265,285,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,281,282,278,308,289,299,270,255],
[257,0,260,274,239,280,279,276,262,262],
[269,290,0,270,261,299,284,267,251,266],
[268,276,280,0,287,290,268,291,277,279],
[272,311,289,263,0,277,276,288,265,267],
[242,270,251,260,273,0,274,249,253,229],
[261,271,266,282,274,276,0,240,231,254],
[251,274,283,259,262,301,310,0,258,271],
[280,288,299,273,285,297,319,292,0,257],
[295,288,284,271,283,321,296,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,311,269,271,312,289,290,294,291],
[286,0,269,263,295,299,292,277,248,281],
[239,281,0,254,263,291,250,248,268,276],
[281,287,296,0,288,298,272,263,286,305],
[279,255,287,262,0,297,263,309,260,280],
[238,251,259,252,253,0,256,245,263,269],
[261,258,300,278,287,294,0,287,271,308],
[260,273,302,287,241,305,263,0,272,305],
[256,302,282,264,290,287,279,278,0,286],
[259,269,274,245,270,281,242,245,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,240,258,181,198,262,259,181,259],
[300,0,260,241,272,273,284,270,196,265],
[310,290,0,257,295,339,292,281,232,283],
[292,309,293,0,252,282,273,276,231,254],
[369,278,255,298,0,304,306,305,218,264],
[352,277,211,268,246,0,291,277,248,246],
[288,266,258,277,244,259,0,266,199,230],
[291,280,269,274,245,273,284,0,227,302],
[369,354,318,319,332,302,351,323,0,273],
[291,285,267,296,286,304,320,248,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,259,254,259,224,249,246,264,280],
[310,0,271,290,286,266,275,280,301,297],
[291,279,0,279,269,296,250,302,287,285],
[296,260,271,0,277,256,255,287,274,306],
[291,264,281,273,0,253,288,281,283,302],
[326,284,254,294,297,0,272,296,311,308],
[301,275,300,295,262,278,0,289,289,288],
[304,270,248,263,269,254,261,0,276,294],
[286,249,263,276,267,239,261,274,0,273],
[270,253,265,244,248,242,262,256,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,265,244,299,277,268,276,270,249],
[238,0,277,253,275,239,268,259,253,240],
[285,273,0,264,276,263,238,198,242,262],
[306,297,286,0,333,284,278,347,309,236],
[251,275,274,217,0,263,278,190,239,281],
[273,311,287,266,287,0,301,303,302,335],
[282,282,312,272,272,249,0,271,277,289],
[274,291,352,203,360,247,279,0,304,313],
[280,297,308,241,311,248,273,246,0,270],
[301,310,288,314,269,215,261,237,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,251,279,266,239,235,283,255,280],
[290,0,260,274,265,271,273,292,275,288],
[299,290,0,286,282,259,276,304,291,298],
[271,276,264,0,261,264,267,280,268,273],
[284,285,268,289,0,261,274,287,276,298],
[311,279,291,286,289,0,270,300,291,300],
[315,277,274,283,276,280,0,294,279,319],
[267,258,246,270,263,250,256,0,257,264],
[295,275,259,282,274,259,271,293,0,299],
[270,262,252,277,252,250,231,286,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,279,299,286,295,275,267,286,323],
[236,0,279,257,285,265,246,233,212,253],
[271,271,0,320,279,228,264,269,282,276],
[251,293,230,0,273,274,264,223,280,259],
[264,265,271,277,0,273,265,278,250,279],
[255,285,322,276,277,0,313,277,254,302],
[275,304,286,286,285,237,0,280,284,299],
[283,317,281,327,272,273,270,0,271,302],
[264,338,268,270,300,296,266,279,0,290],
[227,297,274,291,271,248,251,248,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,266,273,281,260,279,253,260,271],
[286,0,287,278,279,262,283,269,271,278],
[284,263,0,264,270,255,292,259,256,271],
[277,272,286,0,264,252,292,274,266,272],
[269,271,280,286,0,267,291,284,277,280],
[290,288,295,298,283,0,303,288,268,303],
[271,267,258,258,259,247,0,261,256,271],
[297,281,291,276,266,262,289,0,279,290],
[290,279,294,284,273,282,294,271,0,290],
[279,272,279,278,270,247,279,260,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,280,263,284,287,291,282,276,269],
[265,0,298,275,286,286,293,279,285,256],
[270,252,0,270,286,271,262,279,262,249],
[287,275,280,0,280,261,282,282,291,279],
[266,264,264,270,0,273,278,272,279,263],
[263,264,279,289,277,0,280,282,282,268],
[259,257,288,268,272,270,0,279,272,262],
[268,271,271,268,278,268,271,0,265,262],
[274,265,288,259,271,268,278,285,0,275],
[281,294,301,271,287,282,288,288,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,275,265,256,260,278,242,249],
[284,0,263,277,278,266,268,287,266,273],
[296,287,0,269,267,255,254,280,259,253],
[275,273,281,0,272,259,272,287,270,256],
[285,272,283,278,0,264,262,280,265,259],
[294,284,295,291,286,0,285,299,272,278],
[290,282,296,278,288,265,0,298,284,261],
[272,263,270,263,270,251,252,0,275,246],
[308,284,291,280,285,278,266,275,0,265],
[301,277,297,294,291,272,289,304,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,292,280,288,262,297,288,283],
[267,0,262,274,301,287,278,286,285,264],
[270,288,0,318,293,307,273,292,296,267],
[258,276,232,0,270,286,271,285,292,255],
[270,249,257,280,0,266,260,279,277,227],
[262,263,243,264,284,0,266,272,259,250],
[288,272,277,279,290,284,0,293,306,260],
[253,264,258,265,271,278,257,0,299,243],
[262,265,254,258,273,291,244,251,0,253],
[267,286,283,295,323,300,290,307,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,270,245,270,304,282,300,276,301],
[313,0,281,284,262,277,284,264,302,294],
[280,269,0,273,294,255,283,287,295,267],
[305,266,277,0,302,289,291,339,293,283],
[280,288,256,248,0,274,289,304,309,320],
[246,273,295,261,276,0,278,264,272,275],
[268,266,267,259,261,272,0,270,272,285],
[250,286,263,211,246,286,280,0,270,250],
[274,248,255,257,241,278,278,280,0,259],
[249,256,283,267,230,275,265,300,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,247,263,300,235,271,241,282,263],
[291,0,289,307,297,259,280,271,281,302],
[303,261,0,285,292,272,269,240,285,306],
[287,243,265,0,289,265,273,260,327,267],
[250,253,258,261,0,250,234,247,281,267],
[315,291,278,285,300,0,279,249,307,285],
[279,270,281,277,316,271,0,279,303,294],
[309,279,310,290,303,301,271,0,316,285],
[268,269,265,223,269,243,247,234,0,254],
[287,248,244,283,283,265,256,265,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,249,284,278,264,304,269,279,280],
[264,0,233,268,253,245,285,240,273,273],
[301,317,0,293,265,297,321,306,305,309],
[266,282,257,0,269,262,316,282,276,293],
[272,297,285,281,0,257,285,294,294,289],
[286,305,253,288,293,0,316,296,292,293],
[246,265,229,234,265,234,0,255,257,273],
[281,310,244,268,256,254,295,0,287,289],
[271,277,245,274,256,258,293,263,0,276],
[270,277,241,257,261,257,277,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,258,243,310,248,288,276,279,234],
[296,0,301,283,319,311,328,306,267,278],
[292,249,0,273,260,273,290,294,269,267],
[307,267,277,0,284,314,264,290,280,296],
[240,231,290,266,0,255,278,302,255,281],
[302,239,277,236,295,0,305,300,267,281],
[262,222,260,286,272,245,0,231,269,241],
[274,244,256,260,248,250,319,0,238,279],
[271,283,281,270,295,283,281,312,0,249],
[316,272,283,254,269,269,309,271,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,267,271,237,272,239,252,248,260],
[300,0,266,274,284,278,280,280,288,267],
[283,284,0,283,261,276,256,273,269,251],
[279,276,267,0,280,291,262,266,284,265],
[313,266,289,270,0,291,271,273,282,256],
[278,272,274,259,259,0,262,280,263,249],
[311,270,294,288,279,288,0,295,266,277],
[298,270,277,284,277,270,255,0,259,280],
[302,262,281,266,268,287,284,291,0,262],
[290,283,299,285,294,301,273,270,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,279,270,275,263,276,302,315,283],
[276,0,294,267,276,276,269,292,296,269],
[271,256,0,254,258,236,262,289,275,248],
[280,283,296,0,283,275,289,296,293,278],
[275,274,292,267,0,274,274,307,295,286],
[287,274,314,275,276,0,275,288,313,269],
[274,281,288,261,276,275,0,298,297,267],
[248,258,261,254,243,262,252,0,283,261],
[235,254,275,257,255,237,253,267,0,272],
[267,281,302,272,264,281,283,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,251,283,284,284,318,291,233,273],
[283,0,280,299,285,269,303,297,298,279],
[299,270,0,292,281,272,301,292,275,274],
[267,251,258,0,270,264,307,258,245,267],
[266,265,269,280,0,292,303,308,289,267],
[266,281,278,286,258,0,292,294,261,284],
[232,247,249,243,247,258,0,245,232,258],
[259,253,258,292,242,256,305,0,273,292],
[317,252,275,305,261,289,318,277,0,262],
[277,271,276,283,283,266,292,258,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,306,301,309,280,281,302,267,307],
[323,0,315,313,281,288,263,339,294,310],
[244,235,0,273,311,278,234,273,267,276],
[249,237,277,0,255,250,239,288,237,294],
[241,269,239,295,0,248,267,251,266,258],
[270,262,272,300,302,0,249,327,282,288],
[269,287,316,311,283,301,0,320,319,335],
[248,211,277,262,299,223,230,0,275,230],
[283,256,283,313,284,268,231,275,0,293],
[243,240,274,256,292,262,215,320,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,308,271,282,279,263,273,272,269],
[296,0,283,279,329,293,271,299,291,264],
[242,267,0,268,280,281,235,250,274,263],
[279,271,282,0,295,290,257,274,279,281],
[268,221,270,255,0,267,234,258,259,252],
[271,257,269,260,283,0,292,251,279,272],
[287,279,315,293,316,258,0,288,300,284],
[277,251,300,276,292,299,262,0,270,252],
[278,259,276,271,291,271,250,280,0,260],
[281,286,287,269,298,278,266,298,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,393,394,315,471,316,315,471,315,236],
[157,0,314,77,235,314,77,155,237,79],
[156,236,0,233,313,315,313,311,234,156],
[235,473,317,0,473,394,315,393,237,313],
[79,315,237,77,0,316,157,233,157,157],
[234,236,235,156,234,0,236,234,156,156],
[235,473,237,235,393,314,0,470,315,313],
[79,395,239,157,317,316,80,0,237,235],
[235,313,316,313,393,394,235,313,0,236],
[314,471,394,237,393,394,237,315,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,284,250,270,255,256,225,248],
[252,0,288,223,214,273,245,272,234,263],
[278,262,0,224,226,277,217,249,267,219],
[266,327,326,0,307,297,269,278,267,293],
[300,336,324,243,0,294,304,277,283,301],
[280,277,273,253,256,0,240,272,253,276],
[295,305,333,281,246,310,0,272,279,296],
[294,278,301,272,273,278,278,0,255,249],
[325,316,283,283,267,297,271,295,0,277],
[302,287,331,257,249,274,254,301,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,260,281,254,295,259,263,265,252],
[306,0,276,297,266,297,278,278,276,245],
[290,274,0,280,259,281,275,283,259,257],
[269,253,270,0,258,276,286,288,257,256],
[296,284,291,292,0,291,288,293,267,267],
[255,253,269,274,259,0,262,274,256,260],
[291,272,275,264,262,288,0,268,277,265],
[287,272,267,262,257,276,282,0,277,269],
[285,274,291,293,283,294,273,273,0,276],
[298,305,293,294,283,290,285,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,255,264,273,252,274,287,247,260],
[302,0,297,288,304,293,274,286,280,297],
[295,253,0,274,297,273,288,264,265,258],
[286,262,276,0,286,290,281,259,268,268],
[277,246,253,264,0,240,281,268,246,260],
[298,257,277,260,310,0,263,284,258,267],
[276,276,262,269,269,287,0,250,280,267],
[263,264,286,291,282,266,300,0,240,282],
[303,270,285,282,304,292,270,310,0,255],
[290,253,292,282,290,283,283,268,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,260,297,268,280,269,277,280,280],
[273,0,264,297,284,283,280,273,277,288],
[290,286,0,304,272,279,280,280,280,276],
[253,253,246,0,257,258,251,259,249,255],
[282,266,278,293,0,288,280,274,280,291],
[270,267,271,292,262,0,266,270,275,268],
[281,270,270,299,270,284,0,281,277,273],
[273,277,270,291,276,280,269,0,269,274],
[270,273,270,301,270,275,273,281,0,274],
[270,262,274,295,259,282,277,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,292,283,265,262,291,290,274],
[275,0,279,280,280,254,279,290,292,296],
[278,271,0,290,287,272,250,283,291,260],
[258,270,260,0,277,266,249,275,289,261],
[267,270,263,273,0,264,275,298,260,259],
[285,296,278,284,286,0,270,300,290,282],
[288,271,300,301,275,280,0,292,287,274],
[259,260,267,275,252,250,258,0,250,269],
[260,258,259,261,290,260,263,300,0,268],
[276,254,290,289,291,268,276,281,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,278,287,277,267,277,267,281],
[281,0,274,275,270,269,276,281,275,285],
[270,276,0,276,274,270,261,271,261,285],
[272,275,274,0,269,255,262,286,264,288],
[263,280,276,281,0,275,262,286,288,296],
[273,281,280,295,275,0,267,283,271,295],
[283,274,289,288,288,283,0,288,273,286],
[273,269,279,264,264,267,262,0,254,289],
[283,275,289,286,262,279,277,296,0,305],
[269,265,265,262,254,255,264,261,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,266,299,239,254,310,304,302,290],
[249,0,254,228,213,266,276,283,235,216],
[284,296,0,251,279,265,281,274,245,275],
[251,322,299,0,288,297,333,287,290,272],
[311,337,271,262,0,254,310,268,283,297],
[296,284,285,253,296,0,327,301,273,298],
[240,274,269,217,240,223,0,239,218,227],
[246,267,276,263,282,249,311,0,254,306],
[248,315,305,260,267,277,332,296,0,299],
[260,334,275,278,253,252,323,244,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,252,282,246,306,268,286,293],
[280,0,272,257,287,266,309,275,295,273],
[276,278,0,273,281,277,312,288,297,271],
[298,293,277,0,287,274,326,292,293,282],
[268,263,269,263,0,274,286,285,307,286],
[304,284,273,276,276,0,318,288,324,293],
[244,241,238,224,264,232,0,258,255,268],
[282,275,262,258,265,262,292,0,259,291],
[264,255,253,257,243,226,295,291,0,271],
[257,277,279,268,264,257,282,259,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,258,279,280,265,273,269,266,268],
[291,0,274,278,281,265,268,265,264,281],
[292,276,0,269,272,270,271,268,249,288],
[271,272,281,0,277,281,278,267,269,282],
[270,269,278,273,0,269,271,266,255,270],
[285,285,280,269,281,0,280,279,276,287],
[277,282,279,272,279,270,0,286,269,277],
[281,285,282,283,284,271,264,0,270,274],
[284,286,301,281,295,274,281,280,0,293],
[282,269,262,268,280,263,273,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,263,280,274,273,273,277,264,283],
[265,0,253,260,259,275,269,263,277,273],
[287,297,0,297,275,296,283,299,287,285],
[270,290,253,0,269,266,273,275,267,274],
[276,291,275,281,0,271,277,289,272,277],
[277,275,254,284,279,0,290,279,285,300],
[277,281,267,277,273,260,0,265,285,279],
[273,287,251,275,261,271,285,0,260,264],
[286,273,263,283,278,265,265,290,0,269],
[267,277,265,276,273,250,271,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,265,258,293,282,253,261,240,267],
[295,0,274,272,310,299,296,319,310,290],
[285,276,0,272,308,307,292,300,296,279],
[292,278,278,0,296,293,259,302,289,291],
[257,240,242,254,0,284,264,292,248,263],
[268,251,243,257,266,0,264,272,264,293],
[297,254,258,291,286,286,0,284,282,276],
[289,231,250,248,258,278,266,0,251,279],
[310,240,254,261,302,286,268,299,0,281],
[283,260,271,259,287,257,274,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,254,275,255,258,263,265,271,256],
[259,0,244,272,221,249,249,263,261,249],
[296,306,0,300,278,267,313,284,281,280],
[275,278,250,0,233,244,238,288,260,249],
[295,329,272,317,0,288,287,294,280,249],
[292,301,283,306,262,0,271,268,247,268],
[287,301,237,312,263,279,0,289,267,266],
[285,287,266,262,256,282,261,0,262,234],
[279,289,269,290,270,303,283,288,0,280],
[294,301,270,301,301,282,284,316,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,298,295,273,285,289,271,272],
[260,0,272,284,298,266,257,269,268,253],
[264,278,0,272,273,260,276,263,256,265],
[252,266,278,0,272,260,263,275,241,276],
[255,252,277,278,0,260,262,283,261,275],
[277,284,290,290,290,0,271,307,271,300],
[265,293,274,287,288,279,0,292,281,280],
[261,281,287,275,267,243,258,0,257,257],
[279,282,294,309,289,279,269,293,0,281],
[278,297,285,274,275,250,270,293,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,306,295,275,265,262,271,266],
[272,0,274,277,272,281,271,254,234,311],
[283,276,0,308,316,281,272,261,293,260],
[244,273,242,0,291,258,248,244,268,244],
[255,278,234,259,0,258,256,222,271,267],
[275,269,269,292,292,0,281,268,294,276],
[285,279,278,302,294,269,0,292,272,288],
[288,296,289,306,328,282,258,0,292,286],
[279,316,257,282,279,256,278,258,0,261],
[284,239,290,306,283,274,262,264,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,220,217,257,225,230,273,209,206],
[288,0,257,252,292,241,242,332,225,227],
[330,293,0,261,330,260,280,326,257,269],
[333,298,289,0,298,279,264,302,254,252],
[293,258,220,252,0,247,247,309,207,231],
[325,309,290,271,303,0,307,322,258,275],
[320,308,270,286,303,243,0,316,238,213],
[277,218,224,248,241,228,234,0,222,202],
[341,325,293,296,343,292,312,328,0,268],
[344,323,281,298,319,275,337,348,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,262,251,253,237,260,282,271,286],
[303,0,275,285,294,245,295,349,328,304],
[288,275,0,288,310,292,286,309,292,284],
[299,265,262,0,288,274,254,289,292,258],
[297,256,240,262,0,285,267,316,293,270],
[313,305,258,276,265,0,269,348,326,280],
[290,255,264,296,283,281,0,328,292,287],
[268,201,241,261,234,202,222,0,269,260],
[279,222,258,258,257,224,258,281,0,259],
[264,246,266,292,280,270,263,290,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,266,294,325,328,322,317,348,329],
[224,0,236,297,295,303,334,282,313,342],
[284,314,0,265,300,304,292,275,329,316],
[256,253,285,0,327,295,326,290,356,316],
[225,255,250,223,0,258,300,254,250,347],
[222,247,246,255,292,0,282,254,293,325],
[228,216,258,224,250,268,0,217,264,260],
[233,268,275,260,296,296,333,0,313,302],
[202,237,221,194,300,257,286,237,0,302],
[221,208,234,234,203,225,290,248,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,286,289,308,283,299,273,272,289],
[261,0,301,295,329,284,323,285,301,295],
[264,249,0,278,313,292,296,278,313,284],
[261,255,272,0,283,290,308,282,285,272],
[242,221,237,267,0,260,263,253,258,283],
[267,266,258,260,290,0,274,271,274,280],
[251,227,254,242,287,276,0,262,262,284],
[277,265,272,268,297,279,288,0,286,275],
[278,249,237,265,292,276,288,264,0,285],
[261,255,266,278,267,270,266,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,328,277,289,281,341,272,296,264],
[285,0,298,263,266,318,313,324,286,244],
[222,252,0,205,281,267,280,245,279,273],
[273,287,345,0,299,314,374,244,301,296],
[261,284,269,251,0,276,335,246,317,235],
[269,232,283,236,274,0,331,240,309,267],
[209,237,270,176,215,219,0,236,240,215],
[278,226,305,306,304,310,314,0,332,287],
[254,264,271,249,233,241,310,218,0,247],
[286,306,277,254,315,283,335,263,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,251,288,259,239,293,264,231,265],
[297,0,289,277,257,235,283,255,284,295],
[299,261,0,291,273,254,310,244,261,274],
[262,273,259,0,272,233,292,244,236,262],
[291,293,277,278,0,243,283,263,256,279],
[311,315,296,317,307,0,314,273,294,285],
[257,267,240,258,267,236,0,244,248,262],
[286,295,306,306,287,277,306,0,274,305],
[319,266,289,314,294,256,302,276,0,276],
[285,255,276,288,271,265,288,245,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,266,272,267,280,277,280,264],
[288,0,275,276,281,285,274,284,281,270],
[278,275,0,265,279,286,271,269,268,265],
[284,274,285,0,272,276,282,276,273,259],
[278,269,271,278,0,271,282,269,274,267],
[283,265,264,274,279,0,269,274,274,262],
[270,276,279,268,268,281,0,286,280,274],
[273,266,281,274,281,276,264,0,260,266],
[270,269,282,277,276,276,270,290,0,277],
[286,280,285,291,283,288,276,284,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,263,246,283,260,270,250,242,278],
[274,0,246,248,265,270,236,250,247,254],
[287,304,0,269,277,254,286,298,279,271],
[304,302,281,0,266,291,261,286,255,297],
[267,285,273,284,0,278,245,263,268,264],
[290,280,296,259,272,0,262,275,261,300],
[280,314,264,289,305,288,0,291,283,293],
[300,300,252,264,287,275,259,0,253,283],
[308,303,271,295,282,289,267,297,0,301],
[272,296,279,253,286,250,257,267,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,275,250,259,263,258,258,260,262],
[312,0,293,276,282,283,279,287,269,292],
[275,257,0,246,283,265,256,271,266,265],
[300,274,304,0,263,288,284,276,263,284],
[291,268,267,287,0,276,271,275,262,267],
[287,267,285,262,274,0,254,278,266,273],
[292,271,294,266,279,296,0,280,287,293],
[292,263,279,274,275,272,270,0,282,290],
[290,281,284,287,288,284,263,268,0,278],
[288,258,285,266,283,277,257,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,243,278,275,271,269,269,240,225],
[301,0,266,284,294,267,274,232,245,267],
[307,284,0,267,292,279,281,273,254,264],
[272,266,283,0,288,280,299,269,254,261],
[275,256,258,262,0,270,295,262,246,248],
[279,283,271,270,280,0,274,241,265,255],
[281,276,269,251,255,276,0,239,246,245],
[281,318,277,281,288,309,311,0,285,274],
[310,305,296,296,304,285,304,265,0,290],
[325,283,286,289,302,295,305,276,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,289,275,293,301,274,304,277,297],
[228,0,259,254,277,262,243,245,236,277],
[261,291,0,266,264,277,259,271,256,269],
[275,296,284,0,293,269,277,268,250,282],
[257,273,286,257,0,270,263,260,264,279],
[249,288,273,281,280,0,263,265,255,261],
[276,307,291,273,287,287,0,278,274,287],
[246,305,279,282,290,285,272,0,271,271],
[273,314,294,300,286,295,276,279,0,289],
[253,273,281,268,271,289,263,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,260,239,258,273,266,276,268,276],
[298,0,283,294,266,322,293,285,267,290],
[290,267,0,264,274,324,301,279,293,292],
[311,256,286,0,295,296,281,318,292,300],
[292,284,276,255,0,299,269,260,297,300],
[277,228,226,254,251,0,276,245,238,273],
[284,257,249,269,281,274,0,276,257,273],
[274,265,271,232,290,305,274,0,267,282],
[282,283,257,258,253,312,293,283,0,283],
[274,260,258,250,250,277,277,268,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,251,286,262,268,283,267,259,256],
[292,0,287,297,276,288,306,300,257,281],
[299,263,0,301,278,281,309,286,276,285],
[264,253,249,0,248,288,299,282,271,280],
[288,274,272,302,0,281,293,285,276,268],
[282,262,269,262,269,0,288,266,256,273],
[267,244,241,251,257,262,0,267,253,264],
[283,250,264,268,265,284,283,0,254,277],
[291,293,274,279,274,294,297,296,0,286],
[294,269,265,270,282,277,286,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,246,286,296,282,246,264,256,251],
[283,0,297,293,274,269,236,269,267,243],
[304,253,0,287,277,297,261,254,318,290],
[264,257,263,0,287,269,228,237,256,240],
[254,276,273,263,0,310,252,248,246,256],
[268,281,253,281,240,0,281,264,271,230],
[304,314,289,322,298,269,0,286,298,257],
[286,281,296,313,302,286,264,0,284,251],
[294,283,232,294,304,279,252,266,0,285],
[299,307,260,310,294,320,293,299,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,285,273,269,276,265,288,269],
[273,0,271,289,278,263,263,281,276,270],
[284,279,0,270,279,270,260,270,285,274],
[265,261,280,0,268,272,270,256,280,261],
[277,272,271,282,0,265,280,275,296,283],
[281,287,280,278,285,0,276,272,273,274],
[274,287,290,280,270,274,0,281,286,280],
[285,269,280,294,275,278,269,0,275,288],
[262,274,265,270,254,277,264,275,0,259],
[281,280,276,289,267,276,270,262,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,290,294,281,293,289,270,299],
[264,0,267,269,266,259,278,290,275,273],
[274,283,0,260,273,276,281,272,265,284],
[260,281,290,0,277,279,292,303,275,301],
[256,284,277,273,0,277,293,272,269,286],
[269,291,274,271,273,0,285,287,253,274],
[257,272,269,258,257,265,0,272,256,268],
[261,260,278,247,278,263,278,0,247,257],
[280,275,285,275,281,297,294,303,0,296],
[251,277,266,249,264,276,282,293,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,296,293,286,291,275,282,281,306],
[265,0,274,292,276,275,276,274,269,281],
[254,276,0,284,262,267,270,280,279,275],
[257,258,266,0,258,283,268,277,263,269],
[264,274,288,292,0,273,270,278,285,281],
[259,275,283,267,277,0,265,289,281,270],
[275,274,280,282,280,285,0,289,280,281],
[268,276,270,273,272,261,261,0,250,271],
[269,281,271,287,265,269,270,300,0,268],
[244,269,275,281,269,280,269,279,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,283,293,281,284,261,277,283],
[273,0,261,270,271,253,271,251,281,265],
[272,289,0,283,285,276,265,267,281,265],
[267,280,267,0,261,261,262,262,265,271],
[257,279,265,289,0,250,260,261,266,264],
[269,297,274,289,300,0,280,275,277,262],
[266,279,285,288,290,270,0,278,293,279],
[289,299,283,288,289,275,272,0,285,276],
[273,269,269,285,284,273,257,265,0,265],
[267,285,285,279,286,288,271,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,233,248,283,237,269,260,266,271],
[295,0,245,267,284,272,280,248,273,267],
[317,305,0,273,284,294,316,269,283,279],
[302,283,277,0,307,280,289,298,270,310],
[267,266,266,243,0,253,282,267,267,272],
[313,278,256,270,297,0,289,285,273,277],
[281,270,234,261,268,261,0,253,270,255],
[290,302,281,252,283,265,297,0,284,273],
[284,277,267,280,283,277,280,266,0,272],
[279,283,271,240,278,273,295,277,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,295,260,262,270,261,276,316,290],
[261,0,277,264,285,286,287,272,292,285],
[255,273,0,263,258,261,275,250,285,262],
[290,286,287,0,270,311,274,268,301,291],
[288,265,292,280,0,273,251,252,289,300],
[280,264,289,239,277,0,258,245,288,256],
[289,263,275,276,299,292,0,284,287,288],
[274,278,300,282,298,305,266,0,313,288],
[234,258,265,249,261,262,263,237,0,259],
[260,265,288,259,250,294,262,262,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,282,271,285,275,278,295,273],
[281,0,269,285,273,292,266,280,307,269],
[264,281,0,283,271,291,263,273,305,279],
[268,265,267,0,255,273,252,260,281,288],
[279,277,279,295,0,273,278,268,280,275],
[265,258,259,277,277,0,263,263,274,248],
[275,284,287,298,272,287,0,279,290,281],
[272,270,277,290,282,287,271,0,285,275],
[255,243,245,269,270,276,260,265,0,254],
[277,281,271,262,275,302,269,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,265,266,254,264,250,252,272],
[280,0,245,269,261,263,269,247,259,250],
[295,305,0,278,292,268,285,259,288,281],
[285,281,272,0,278,279,275,269,284,282],
[284,289,258,272,0,258,268,270,277,269],
[296,287,282,271,292,0,284,279,287,279],
[286,281,265,275,282,266,0,259,290,278],
[300,303,291,281,280,271,291,0,302,278],
[298,291,262,266,273,263,260,248,0,271],
[278,300,269,268,281,271,272,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,259,261,294,291,264,283,298,260],
[245,0,267,286,254,287,278,262,268,248],
[291,283,0,289,277,285,291,278,287,263],
[289,264,261,0,301,297,281,313,290,281],
[256,296,273,249,0,260,286,291,287,265],
[259,263,265,253,290,0,293,326,266,305],
[286,272,259,269,264,257,0,313,254,303],
[267,288,272,237,259,224,237,0,261,268],
[252,282,263,260,263,284,296,289,0,280],
[290,302,287,269,285,245,247,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,279,279,277,299,266,280,292,300],
[263,0,270,262,255,270,254,270,297,273],
[271,280,0,281,286,280,269,280,297,290],
[271,288,269,0,266,273,258,276,284,271],
[273,295,264,284,0,278,279,285,291,287],
[251,280,270,277,272,0,261,270,289,284],
[284,296,281,292,271,289,0,284,300,282],
[270,280,270,274,265,280,266,0,291,275],
[258,253,253,266,259,261,250,259,0,272],
[250,277,260,279,263,266,268,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,288,242,268,282,297,235,258,249],
[281,0,285,265,271,314,326,280,283,267],
[262,265,0,268,260,257,273,258,255,274],
[308,285,282,0,287,310,310,260,274,280],
[282,279,290,263,0,278,288,252,271,286],
[268,236,293,240,272,0,289,270,250,277],
[253,224,277,240,262,261,0,236,237,261],
[315,270,292,290,298,280,314,0,273,279],
[292,267,295,276,279,300,313,277,0,307],
[301,283,276,270,264,273,289,271,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,270,280,286,255,306,266,251,282],
[255,0,264,248,265,254,288,265,225,240],
[280,286,0,246,255,267,289,252,251,263],
[270,302,304,0,294,289,290,274,283,283],
[264,285,295,256,0,261,307,280,253,255],
[295,296,283,261,289,0,336,269,283,289],
[244,262,261,260,243,214,0,268,226,262],
[284,285,298,276,270,281,282,0,261,281],
[299,325,299,267,297,267,324,289,0,291],
[268,310,287,267,295,261,288,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,272,275,299,267,295,281,276],
[291,0,309,322,306,301,293,287,270,312],
[279,241,0,314,253,270,285,309,284,276],
[278,228,236,0,277,262,300,293,270,303],
[275,244,297,273,0,311,282,289,286,280],
[251,249,280,288,239,0,257,273,268,292],
[283,257,265,250,268,293,0,314,283,281],
[255,263,241,257,261,277,236,0,279,292],
[269,280,266,280,264,282,267,271,0,285],
[274,238,274,247,270,258,269,258,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,245,274,267,279,242,279,261],
[282,0,289,270,287,270,304,273,288,281],
[285,261,0,254,254,271,271,261,262,291],
[305,280,296,0,289,308,296,278,280,269],
[276,263,296,261,0,293,303,269,274,265],
[283,280,279,242,257,0,289,251,284,274],
[271,246,279,254,247,261,0,260,278,254],
[308,277,289,272,281,299,290,0,280,285],
[271,262,288,270,276,266,272,270,0,277],
[289,269,259,281,285,276,296,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,272,244,288,245,231,235,266,267],
[319,0,316,301,286,345,273,303,346,325],
[278,234,0,284,262,333,249,275,306,272],
[306,249,266,0,247,285,288,288,287,309],
[262,264,288,303,0,303,262,264,298,296],
[305,205,217,265,247,0,256,261,277,269],
[319,277,301,262,288,294,0,312,310,325],
[315,247,275,262,286,289,238,0,271,283],
[284,204,244,263,252,273,240,279,0,269],
[283,225,278,241,254,281,225,267,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,268,256,254,280,281,274,277,246],
[297,0,271,282,280,303,303,311,279,278],
[282,279,0,276,261,299,307,304,293,271],
[294,268,274,0,277,257,264,289,279,244],
[296,270,289,273,0,295,301,301,299,249],
[270,247,251,293,255,0,279,266,281,251],
[269,247,243,286,249,271,0,293,265,248],
[276,239,246,261,249,284,257,0,252,241],
[273,271,257,271,251,269,285,298,0,248],
[304,272,279,306,301,299,302,309,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,248,276,279,289,264,288,242,256],
[271,0,251,296,274,282,300,277,257,255],
[302,299,0,284,282,293,264,298,260,279],
[274,254,266,0,247,280,278,260,226,271],
[271,276,268,303,0,296,280,290,277,226],
[261,268,257,270,254,0,276,277,251,249],
[286,250,286,272,270,274,0,287,267,255],
[262,273,252,290,260,273,263,0,255,267],
[308,293,290,324,273,299,283,295,0,274],
[294,295,271,279,324,301,295,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,260,241,223,257,254,293,301,287],
[314,0,269,281,301,299,277,390,302,337],
[290,281,0,302,292,258,320,319,305,303],
[309,269,248,0,240,309,295,333,331,320],
[327,249,258,310,0,319,310,329,350,320],
[293,251,292,241,231,0,274,280,327,285],
[296,273,230,255,240,276,0,319,340,296],
[257,160,231,217,221,270,231,0,285,274],
[249,248,245,219,200,223,210,265,0,276],
[263,213,247,230,230,265,254,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,295,303,277,281,271,285,236,271],
[281,0,256,257,280,265,279,300,247,284],
[255,294,0,261,297,277,272,301,242,294],
[247,293,289,0,270,243,281,311,268,291],
[273,270,253,280,0,260,283,279,275,307],
[269,285,273,307,290,0,309,293,274,319],
[279,271,278,269,267,241,0,274,280,288],
[265,250,249,239,271,257,276,0,246,241],
[314,303,308,282,275,276,270,304,0,302],
[279,266,256,259,243,231,262,309,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,258,286,291,265,276,293,266,262],
[260,0,262,279,269,276,262,286,251,250],
[292,288,0,292,271,281,270,278,277,285],
[264,271,258,0,251,237,269,279,246,248],
[259,281,279,299,0,287,269,285,264,282],
[285,274,269,313,263,0,262,274,269,277],
[274,288,280,281,281,288,0,283,275,283],
[257,264,272,271,265,276,267,0,249,256],
[284,299,273,304,286,281,275,301,0,292],
[288,300,265,302,268,273,267,294,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,271,277,236,264,264,270,274,268],
[297,0,270,292,289,281,297,291,293,277],
[279,280,0,303,280,276,274,287,302,287],
[273,258,247,0,250,247,262,245,279,262],
[314,261,270,300,0,276,282,286,274,279],
[286,269,274,303,274,0,280,283,290,285],
[286,253,276,288,268,270,0,278,270,284],
[280,259,263,305,264,267,272,0,271,268],
[276,257,248,271,276,260,280,279,0,283],
[282,273,263,288,271,265,266,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,311,314,258,277,284,300,268,273],
[259,0,294,272,293,253,278,281,257,262],
[239,256,0,247,257,250,262,286,239,261],
[236,278,303,0,264,275,261,265,266,259],
[292,257,293,286,0,279,276,312,270,293],
[273,297,300,275,271,0,278,284,292,259],
[266,272,288,289,274,272,0,301,262,278],
[250,269,264,285,238,266,249,0,249,273],
[282,293,311,284,280,258,288,301,0,263],
[277,288,289,291,257,291,272,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,286,300,309,300,280,290,245],
[273,0,258,271,299,269,275,261,291,279],
[252,292,0,260,296,259,278,274,277,242],
[264,279,290,0,294,278,282,277,314,273],
[250,251,254,256,0,275,265,272,249,253],
[241,281,291,272,275,0,266,269,266,271],
[250,275,272,268,285,284,0,254,266,254],
[270,289,276,273,278,281,296,0,282,269],
[260,259,273,236,301,284,284,268,0,275],
[305,271,308,277,297,279,296,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,261,291,268,285,266,280,261,279],
[279,0,254,272,256,290,288,272,247,258],
[289,296,0,265,244,278,300,269,272,290],
[259,278,285,0,252,268,268,256,281,253],
[282,294,306,298,0,272,311,295,272,282],
[265,260,272,282,278,0,316,265,248,282],
[284,262,250,282,239,234,0,263,263,271],
[270,278,281,294,255,285,287,0,262,250],
[289,303,278,269,278,302,287,288,0,296],
[271,292,260,297,268,268,279,300,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,259,252,258,267,256,255,271,286],
[269,0,282,269,279,274,295,303,256,268],
[291,268,0,239,294,251,286,263,264,292],
[298,281,311,0,291,275,316,288,280,288],
[292,271,256,259,0,261,256,266,246,263],
[283,276,299,275,289,0,250,257,253,269],
[294,255,264,234,294,300,0,276,247,267],
[295,247,287,262,284,293,274,0,266,272],
[279,294,286,270,304,297,303,284,0,286],
[264,282,258,262,287,281,283,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,265,281,276,300,283,285,283,297],
[257,0,254,269,275,275,277,282,270,271],
[285,296,0,273,280,297,281,282,287,293],
[269,281,277,0,278,295,299,292,287,317],
[274,275,270,272,0,286,285,290,280,277],
[250,275,253,255,264,0,270,266,278,268],
[267,273,269,251,265,280,0,274,269,283],
[265,268,268,258,260,284,276,0,278,278],
[267,280,263,263,270,272,281,272,0,290],
[253,279,257,233,273,282,267,272,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,264,259,280,282,264,269,270],
[262,0,272,252,242,263,266,243,258,250],
[269,278,0,245,261,265,266,272,260,266],
[286,298,305,0,268,282,282,279,280,278],
[291,308,289,282,0,282,295,287,273,274],
[270,287,285,268,268,0,270,268,261,274],
[268,284,284,268,255,280,0,268,265,268],
[286,307,278,271,263,282,282,0,259,286],
[281,292,290,270,277,289,285,291,0,267],
[280,300,284,272,276,276,282,264,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,270,268,280,270,294,258,268],
[259,0,276,272,265,277,256,272,250,243],
[273,274,0,270,272,266,244,275,241,248],
[280,278,280,0,289,275,266,273,277,265],
[282,285,278,261,0,261,256,283,272,264],
[270,273,284,275,289,0,266,258,275,249],
[280,294,306,284,294,284,0,287,280,267],
[256,278,275,277,267,292,263,0,256,274],
[292,300,309,273,278,275,270,294,0,280],
[282,307,302,285,286,301,283,276,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,213,223,250,253,243,253,224,244],
[294,0,252,255,267,254,246,262,252,274],
[337,298,0,271,265,272,280,264,270,291],
[327,295,279,0,302,285,273,273,291,302],
[300,283,285,248,0,273,287,264,272,301],
[297,296,278,265,277,0,285,270,259,318],
[307,304,270,277,263,265,0,273,281,296],
[297,288,286,277,286,280,277,0,265,275],
[326,298,280,259,278,291,269,285,0,304],
[306,276,259,248,249,232,254,275,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,284,266,267,282,268,291,271],
[266,0,264,252,240,259,266,248,259,256],
[268,286,0,271,270,259,276,266,278,260],
[266,298,279,0,272,252,266,266,272,268],
[284,310,280,278,0,269,294,271,296,277],
[283,291,291,298,281,0,282,277,275,277],
[268,284,274,284,256,268,0,283,304,264],
[282,302,284,284,279,273,267,0,285,276],
[259,291,272,278,254,275,246,265,0,258],
[279,294,290,282,273,273,286,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,278,279,271,274,265,257,269,271],
[280,0,274,283,279,270,283,271,278,283],
[272,276,0,280,270,271,270,274,253,258],
[271,267,270,0,274,265,285,256,285,250],
[279,271,280,276,0,272,261,271,278,272],
[276,280,279,285,278,0,277,256,266,277],
[285,267,280,265,289,273,0,272,284,258],
[293,279,276,294,279,294,278,0,271,277],
[281,272,297,265,272,284,266,279,0,258],
[279,267,292,300,278,273,292,273,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,291,276,256,264,297,285,272],
[270,0,258,281,257,271,246,268,260,275],
[266,292,0,288,279,282,271,269,280,276],
[259,269,262,0,254,256,248,279,253,273],
[274,293,271,296,0,268,265,278,299,279],
[294,279,268,294,282,0,267,286,278,282],
[286,304,279,302,285,283,0,283,256,268],
[253,282,281,271,272,264,267,0,284,279],
[265,290,270,297,251,272,294,266,0,283],
[278,275,274,277,271,268,282,271,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,251,257,248,272,248,269,236,277],
[265,0,292,279,286,291,287,278,284,281],
[299,258,0,266,264,292,279,292,259,274],
[293,271,284,0,250,268,268,277,265,271],
[302,264,286,300,0,295,288,302,287,296],
[278,259,258,282,255,0,273,272,265,270],
[302,263,271,282,262,277,0,273,267,275],
[281,272,258,273,248,278,277,0,267,284],
[314,266,291,285,263,285,283,283,0,271],
[273,269,276,279,254,280,275,266,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,236,281,274,279,288,268,276,300],
[286,0,256,264,295,296,270,284,268,320],
[314,294,0,307,298,293,266,295,280,300],
[269,286,243,0,262,269,253,276,263,305],
[276,255,252,288,0,277,259,291,255,279],
[271,254,257,281,273,0,245,276,266,278],
[262,280,284,297,291,305,0,303,265,314],
[282,266,255,274,259,274,247,0,263,270],
[274,282,270,287,295,284,285,287,0,273],
[250,230,250,245,271,272,236,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,286,226,288,261,243,283,278,356],
[317,0,353,328,303,258,271,299,277,357],
[264,197,0,230,268,265,245,249,226,296],
[324,222,320,0,306,279,287,263,264,334],
[262,247,282,244,0,241,261,302,265,342],
[289,292,285,271,309,0,260,305,350,348],
[307,279,305,263,289,290,0,274,279,330],
[267,251,301,287,248,245,276,0,306,334],
[272,273,324,286,285,200,271,244,0,333],
[194,193,254,216,208,202,220,216,217,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,282,283,278,286,279,286,284,281],
[287,0,283,280,270,282,288,286,281,284],
[268,267,0,262,268,274,265,253,267,256],
[267,270,288,0,267,264,279,262,274,264],
[272,280,282,283,0,277,279,281,276,261],
[264,268,276,286,273,0,282,264,257,257],
[271,262,285,271,271,268,0,265,274,277],
[264,264,297,288,269,286,285,0,284,278],
[266,269,283,276,274,293,276,266,0,270],
[269,266,294,286,289,293,273,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,268,244,257,283,271,262,265],
[262,0,290,298,271,267,273,281,278,271],
[260,260,0,270,243,258,264,239,261,240],
[282,252,280,0,246,248,269,263,257,253],
[306,279,307,304,0,284,304,285,275,275],
[293,283,292,302,266,0,278,287,279,272],
[267,277,286,281,246,272,0,269,264,273],
[279,269,311,287,265,263,281,0,294,279],
[288,272,289,293,275,271,286,256,0,261],
[285,279,310,297,275,278,277,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,273,284,280,276,284,273,284],
[286,0,246,248,274,275,250,289,271,290],
[280,304,0,280,282,266,256,287,272,289],
[277,302,270,0,276,283,272,264,263,273],
[266,276,268,274,0,254,250,282,274,301],
[270,275,284,267,296,0,262,258,285,284],
[274,300,294,278,300,288,0,298,299,311],
[266,261,263,286,268,292,252,0,273,287],
[277,279,278,287,276,265,251,277,0,271],
[266,260,261,277,249,266,239,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,162,93,181,91,160,96,140,207,208],
[388,0,157,245,225,226,181,274,226,226],
[457,393,0,346,341,321,273,439,345,296],
[369,305,204,0,299,254,228,371,341,298],
[459,325,209,251,0,254,229,259,298,253],
[390,324,229,296,296,0,300,323,343,369],
[454,369,277,322,321,250,0,348,320,364],
[410,276,111,179,291,227,202,0,273,248],
[343,324,205,209,252,207,230,277,0,275],
[342,324,254,252,297,181,186,302,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,292,247,295,274,268,264,284,297],
[280,0,306,265,291,282,262,292,291,307],
[258,244,0,261,288,262,278,255,281,295],
[303,285,289,0,260,257,259,262,301,307],
[255,259,262,290,0,278,269,262,266,312],
[276,268,288,293,272,0,276,280,294,307],
[282,288,272,291,281,274,0,259,273,285],
[286,258,295,288,288,270,291,0,275,299],
[266,259,269,249,284,256,277,275,0,275],
[253,243,255,243,238,243,265,251,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,266,255,272,270,267,280,244,267],
[287,0,268,267,287,300,291,293,304,283],
[284,282,0,277,285,294,267,288,283,288],
[295,283,273,0,275,278,280,293,278,282],
[278,263,265,275,0,269,264,282,276,270],
[280,250,256,272,281,0,275,268,264,253],
[283,259,283,270,286,275,0,268,273,287],
[270,257,262,257,268,282,282,0,285,282],
[306,246,267,272,274,286,277,265,0,277],
[283,267,262,268,280,297,263,268,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,209,266,207,251,266,206,281],
[287,0,241,242,284,250,251,230,196,255],
[279,309,0,279,275,307,294,318,254,271],
[341,308,271,0,292,299,282,305,286,298],
[284,266,275,258,0,297,284,248,226,228],
[343,300,243,251,253,0,291,298,309,287],
[299,299,256,268,266,259,0,261,282,240],
[284,320,232,245,302,252,289,0,261,260],
[344,354,296,264,324,241,268,289,0,281],
[269,295,279,252,322,263,310,290,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,276,261,285,280,283,281,277,269],
[271,0,268,274,263,254,276,273,263,261],
[274,282,0,290,293,257,272,291,263,284],
[289,276,260,0,277,268,284,287,262,267],
[265,287,257,273,0,273,281,272,274,273],
[270,296,293,282,277,0,281,296,276,270],
[267,274,278,266,269,269,0,270,259,268],
[269,277,259,263,278,254,280,0,253,270],
[273,287,287,288,276,274,291,297,0,279],
[281,289,266,283,277,280,282,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,273,296,272,268,259,244,295,273],
[292,0,290,310,278,285,273,268,292,285],
[277,260,0,300,287,279,273,272,286,291],
[254,240,250,0,258,253,260,237,264,262],
[278,272,263,292,0,276,285,277,294,303],
[282,265,271,297,274,0,282,268,290,295],
[291,277,277,290,265,268,0,262,290,292],
[306,282,278,313,273,282,288,0,294,298],
[255,258,264,286,256,260,260,256,0,278],
[277,265,259,288,247,255,258,252,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,302,283,297,292,276,260,316,298],
[289,0,297,270,284,274,280,272,292,304],
[248,253,0,258,268,258,275,243,257,254],
[267,280,292,0,277,269,280,267,277,283],
[253,266,282,273,0,257,275,265,275,267],
[258,276,292,281,293,0,279,270,286,284],
[274,270,275,270,275,271,0,283,274,270],
[290,278,307,283,285,280,267,0,296,266],
[234,258,293,273,275,264,276,254,0,271],
[252,246,296,267,283,266,280,284,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,271,250,237,249,254,266,251,237],
[286,0,289,261,265,265,260,263,283,264],
[279,261,0,251,254,273,253,260,267,263],
[300,289,299,0,284,258,277,282,310,286],
[313,285,296,266,0,259,269,280,283,286],
[301,285,277,292,291,0,275,293,296,274],
[296,290,297,273,281,275,0,281,274,306],
[284,287,290,268,270,257,269,0,271,266],
[299,267,283,240,267,254,276,279,0,263],
[313,286,287,264,264,276,244,284,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,299,278,286,287,280,275,274,304],
[217,0,232,216,241,254,235,229,207,252],
[251,318,0,282,280,264,264,272,260,291],
[272,334,268,0,273,272,261,271,267,300],
[264,309,270,277,0,273,282,257,253,310],
[263,296,286,278,277,0,267,245,252,286],
[270,315,286,289,268,283,0,269,286,288],
[275,321,278,279,293,305,281,0,275,306],
[276,343,290,283,297,298,264,275,0,289],
[246,298,259,250,240,264,262,244,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,260,265,252,260,268,267,261,265],
[284,0,272,284,264,278,275,270,270,289],
[290,278,0,267,249,300,268,258,259,281],
[285,266,283,0,249,293,267,285,286,282],
[298,286,301,301,0,313,271,289,275,299],
[290,272,250,257,237,0,257,252,270,237],
[282,275,282,283,279,293,0,288,275,291],
[283,280,292,265,261,298,262,0,261,281],
[289,280,291,264,275,280,275,289,0,278],
[285,261,269,268,251,313,259,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,249,248,251,239,208,314,243,281],
[288,0,278,264,264,260,260,270,238,282],
[301,272,0,291,283,239,220,312,276,303],
[302,286,259,0,286,247,245,266,296,267],
[299,286,267,264,0,256,294,236,267,265],
[311,290,311,303,294,0,242,284,278,294],
[342,290,330,305,256,308,0,263,305,283],
[236,280,238,284,314,266,287,0,257,269],
[307,312,274,254,283,272,245,293,0,306],
[269,268,247,283,285,256,267,281,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,294,306,285,263,272,245,278,275],
[274,0,283,300,283,254,286,262,259,276],
[256,267,0,287,281,251,268,254,260,275],
[244,250,263,0,264,234,263,224,242,247],
[265,267,269,286,0,275,272,252,274,275],
[287,296,299,316,275,0,294,272,283,291],
[278,264,282,287,278,256,0,250,258,271],
[305,288,296,326,298,278,300,0,272,301],
[272,291,290,308,276,267,292,278,0,276],
[275,274,275,303,275,259,279,249,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,277,258,275,270,272,257,296,270],
[300,0,276,284,293,272,296,310,319,273],
[273,274,0,282,273,265,246,273,262,252],
[292,266,268,0,274,289,283,276,321,276],
[275,257,277,276,0,280,275,287,276,251],
[280,278,285,261,270,0,272,255,280,257],
[278,254,304,267,275,278,0,310,300,295],
[293,240,277,274,263,295,240,0,288,238],
[254,231,288,229,274,270,250,262,0,260],
[280,277,298,274,299,293,255,312,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,286,290,270,285,284,314,282,295],
[264,0,301,262,282,315,273,278,297,278],
[264,249,0,272,279,299,261,295,287,270],
[260,288,278,0,299,283,293,294,282,292],
[280,268,271,251,0,283,280,305,298,273],
[265,235,251,267,267,0,252,270,284,255],
[266,277,289,257,270,298,0,275,278,272],
[236,272,255,256,245,280,275,0,288,268],
[268,253,263,268,252,266,272,262,0,243],
[255,272,280,258,277,295,278,282,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,289,254,255,276,274,242,246,256],
[306,0,298,276,303,281,278,246,274,274],
[261,252,0,268,253,267,249,240,254,243],
[296,274,282,0,288,280,276,272,276,269],
[295,247,297,262,0,263,276,250,229,278],
[274,269,283,270,287,0,265,261,249,262],
[276,272,301,274,274,285,0,240,278,274],
[308,304,310,278,300,289,310,0,272,286],
[304,276,296,274,321,301,272,278,0,283],
[294,276,307,281,272,288,276,264,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,238,305,264,255,247,269,247,233],
[255,0,247,333,263,258,257,270,270,252],
[312,303,0,366,294,295,300,290,270,240],
[245,217,184,0,250,195,224,197,242,211],
[286,287,256,300,0,222,239,280,246,251],
[295,292,255,355,328,0,286,291,255,242],
[303,293,250,326,311,264,0,287,284,286],
[281,280,260,353,270,259,263,0,288,269],
[303,280,280,308,304,295,266,262,0,255],
[317,298,310,339,299,308,264,281,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,283,269,279,276,256,263,280,265],
[291,0,303,279,285,267,266,272,269,264],
[267,247,0,249,249,265,256,276,254,259],
[281,271,301,0,271,273,277,275,279,268],
[271,265,301,279,0,280,275,278,262,261],
[274,283,285,277,270,0,278,281,285,280],
[294,284,294,273,275,272,0,282,270,268],
[287,278,274,275,272,269,268,0,250,270],
[270,281,296,271,288,265,280,300,0,266],
[285,286,291,282,289,270,282,280,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,288,288,260,273,301,262,274],
[275,0,279,291,286,244,295,287,267,287],
[266,271,0,289,270,247,267,269,250,271],
[262,259,261,0,269,244,258,282,265,239],
[262,264,280,281,0,274,275,269,255,261],
[290,306,303,306,276,0,275,292,302,276],
[277,255,283,292,275,275,0,287,277,271],
[249,263,281,268,281,258,263,0,242,272],
[288,283,300,285,295,248,273,308,0,276],
[276,263,279,311,289,274,279,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,346,273,252,262,270,235,296,298],
[312,0,358,302,293,277,290,275,298,289],
[204,192,0,177,204,223,247,209,238,237],
[277,248,373,0,278,318,279,225,305,253],
[298,257,346,272,0,334,313,283,311,305],
[288,273,327,232,216,0,302,252,276,301],
[280,260,303,271,237,248,0,244,263,274],
[315,275,341,325,267,298,306,0,326,287],
[254,252,312,245,239,274,287,224,0,272],
[252,261,313,297,245,249,276,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,242,247,291,278,285,310,309,262],
[263,0,278,277,293,314,261,303,261,309],
[308,272,0,239,306,302,296,303,275,270],
[303,273,311,0,331,281,287,321,314,330],
[259,257,244,219,0,294,293,286,302,326],
[272,236,248,269,256,0,294,284,267,256],
[265,289,254,263,257,256,0,307,281,249],
[240,247,247,229,264,266,243,0,263,303],
[241,289,275,236,248,283,269,287,0,259],
[288,241,280,220,224,294,301,247,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,292,277,300,291,268,275,275,294],
[287,0,296,280,295,282,271,279,257,306],
[258,254,0,263,281,267,253,270,272,271],
[273,270,287,0,294,276,273,290,273,280],
[250,255,269,256,0,249,259,270,261,259],
[259,268,283,274,301,0,272,275,280,293],
[282,279,297,277,291,278,0,293,265,287],
[275,271,280,260,280,275,257,0,276,277],
[275,293,278,277,289,270,285,274,0,283],
[256,244,279,270,291,257,263,273,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,358,322,278,327,294,218,317,269],
[261,0,294,344,218,279,311,252,316,203],
[192,256,0,279,232,264,221,200,254,177],
[228,206,271,0,240,230,242,185,229,216],
[272,332,318,310,0,301,293,250,303,257],
[223,271,286,320,249,0,239,236,309,203],
[256,239,329,308,257,311,0,241,292,263],
[332,298,350,365,300,314,309,0,341,275],
[233,234,296,321,247,241,258,209,0,193],
[281,347,373,334,293,347,287,275,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,289,294,277,271,279,288,262],
[283,0,300,286,301,308,274,289,271,283],
[280,250,0,284,265,287,283,267,268,261],
[261,264,266,0,290,273,270,249,249,263],
[256,249,285,260,0,279,263,279,269,262],
[273,242,263,277,271,0,264,275,262,261],
[279,276,267,280,287,286,0,274,272,284],
[271,261,283,301,271,275,276,0,261,276],
[262,279,282,301,281,288,278,289,0,274],
[288,267,289,287,288,289,266,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,279,282,270,263,260,270,272],
[279,0,263,268,267,249,251,250,263,271],
[285,287,0,291,292,278,276,263,293,304],
[271,282,259,0,268,275,260,264,266,297],
[268,283,258,282,0,269,256,248,274,286],
[280,301,272,275,281,0,254,265,264,279],
[287,299,274,290,294,296,0,277,271,294],
[290,300,287,286,302,285,273,0,284,303],
[280,287,257,284,276,286,279,266,0,293],
[278,279,246,253,264,271,256,247,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,254,285,303,278,290,280,271,282],
[267,0,276,268,283,269,285,280,272,289],
[296,274,0,299,324,307,290,297,294,310],
[265,282,251,0,277,280,274,273,277,274],
[247,267,226,273,0,261,266,257,268,251],
[272,281,243,270,289,0,275,273,261,288],
[260,265,260,276,284,275,0,282,290,296],
[270,270,253,277,293,277,268,0,266,273],
[279,278,256,273,282,289,260,284,0,294],
[268,261,240,276,299,262,254,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,274,263,250,282,270,299,249,308],
[267,0,272,257,260,271,270,289,271,306],
[276,278,0,281,271,277,272,298,247,294],
[287,293,269,0,265,282,280,289,266,282],
[300,290,279,285,0,299,305,295,275,308],
[268,279,273,268,251,0,291,290,264,285],
[280,280,278,270,245,259,0,284,269,279],
[251,261,252,261,255,260,266,0,258,283],
[301,279,303,284,275,286,281,292,0,308],
[242,244,256,268,242,265,271,267,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,277,270,283,296,282,275,310,275],
[292,0,274,273,286,296,294,265,322,281],
[273,276,0,285,288,281,284,282,314,294],
[280,277,265,0,265,262,261,270,304,278],
[267,264,262,285,0,285,279,260,295,258],
[254,254,269,288,265,0,247,273,300,248],
[268,256,266,289,271,303,0,262,313,269],
[275,285,268,280,290,277,288,0,288,276],
[240,228,236,246,255,250,237,262,0,242],
[275,269,256,272,292,302,281,274,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,278,285,265,262,273,264,265,273],
[277,0,275,284,288,265,268,282,288,281],
[272,275,0,302,289,271,288,275,282,280],
[265,266,248,0,290,256,269,275,286,268],
[285,262,261,260,0,264,272,254,271,254],
[288,285,279,294,286,0,286,276,289,268],
[277,282,262,281,278,264,0,279,295,258],
[286,268,275,275,296,274,271,0,299,272],
[285,262,268,264,279,261,255,251,0,271],
[277,269,270,282,296,282,292,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,262,285,288,295,277,277,256],
[285,0,261,263,307,285,295,284,274,265],
[278,289,0,274,294,292,285,280,288,275],
[288,287,276,0,308,272,309,304,261,291],
[265,243,256,242,0,269,263,266,259,244],
[262,265,258,278,281,0,277,257,251,242],
[255,255,265,241,287,273,0,268,278,250],
[273,266,270,246,284,293,282,0,265,249],
[273,276,262,289,291,299,272,285,0,272],
[294,285,275,259,306,308,300,301,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,283,314,297,275,319,330,293,302],
[245,0,236,300,262,275,309,267,274,295],
[267,314,0,295,298,290,334,294,300,303],
[236,250,255,0,295,267,305,268,249,282],
[253,288,252,255,0,255,293,258,278,300],
[275,275,260,283,295,0,303,286,258,247],
[231,241,216,245,257,247,0,282,241,267],
[220,283,256,282,292,264,268,0,274,301],
[257,276,250,301,272,292,309,276,0,315],
[248,255,247,268,250,303,283,249,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,279,275,288,265,273,270,277,285],
[247,0,250,266,263,262,252,271,248,267],
[271,300,0,276,273,280,262,271,274,269],
[275,284,274,0,276,273,261,267,276,274],
[262,287,277,274,0,261,258,274,273,269],
[285,288,270,277,289,0,284,293,295,273],
[277,298,288,289,292,266,0,284,285,282],
[280,279,279,283,276,257,266,0,281,274],
[273,302,276,274,277,255,265,269,0,266],
[265,283,281,276,281,277,268,276,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,349,301,274,200,250,199,275,323,251],
[201,0,226,224,151,151,174,200,301,224],
[249,324,0,299,199,224,173,274,373,273],
[276,326,251,0,226,226,275,227,326,299],
[350,399,351,324,0,375,274,300,424,250],
[300,399,326,324,175,0,300,277,376,274],
[351,376,377,275,276,250,0,352,351,324],
[275,350,276,323,250,273,198,0,298,199],
[227,249,177,224,126,174,199,252,0,224],
[299,326,277,251,300,276,226,351,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,272,305,305,290,309,282,331,284],
[240,0,263,280,277,278,266,263,246,274],
[278,287,0,282,313,279,317,264,288,280],
[245,270,268,0,281,291,288,233,261,278],
[245,273,237,269,0,297,310,264,302,245],
[260,272,271,259,253,0,276,272,289,269],
[241,284,233,262,240,274,0,241,279,237],
[268,287,286,317,286,278,309,0,281,291],
[219,304,262,289,248,261,271,269,0,243],
[266,276,270,272,305,281,313,259,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,278,282,258,268,268,286,241,276],
[293,0,286,295,259,270,293,282,251,277],
[272,264,0,287,277,293,270,284,243,277],
[268,255,263,0,239,257,264,274,262,250],
[292,291,273,311,0,306,285,301,276,300],
[282,280,257,293,244,0,285,260,248,303],
[282,257,280,286,265,265,0,266,256,270],
[264,268,266,276,249,290,284,0,257,261],
[309,299,307,288,274,302,294,293,0,288],
[274,273,273,300,250,247,280,289,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,289,271,248,238,268,271,257,285],
[289,0,259,275,258,270,283,283,300,290],
[261,291,0,263,272,257,267,269,284,283],
[279,275,287,0,278,281,301,291,287,302],
[302,292,278,272,0,275,280,276,288,287],
[312,280,293,269,275,0,276,292,288,292],
[282,267,283,249,270,274,0,279,282,280],
[279,267,281,259,274,258,271,0,286,299],
[293,250,266,263,262,262,268,264,0,277],
[265,260,267,248,263,258,270,251,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,253,267,262,262,282,251,268,252],
[275,0,282,260,279,286,284,256,267,271],
[297,268,0,272,270,295,272,249,278,273],
[283,290,278,0,265,276,275,263,265,282],
[288,271,280,285,0,296,285,263,274,275],
[288,264,255,274,254,0,285,255,262,276],
[268,266,278,275,265,265,0,258,262,265],
[299,294,301,287,287,295,292,0,289,258],
[282,283,272,285,276,288,288,261,0,269],
[298,279,277,268,275,274,285,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,288,273,316,321,281,283,250],
[267,0,308,268,272,278,304,291,263,257],
[258,242,0,208,203,254,298,248,229,199],
[262,282,342,0,271,255,305,299,262,262],
[277,278,347,279,0,245,288,281,272,260],
[234,272,296,295,305,0,299,285,304,269],
[229,246,252,245,262,251,0,258,215,271],
[269,259,302,251,269,265,292,0,231,293],
[267,287,321,288,278,246,335,319,0,284],
[300,293,351,288,290,281,279,257,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,271,277,277,283,300,300,280],
[275,0,287,273,277,278,274,297,291,286],
[264,263,0,270,263,259,265,268,283,268],
[279,277,280,0,264,265,270,293,287,281],
[273,273,287,286,0,280,281,284,294,268],
[273,272,291,285,270,0,277,293,292,285],
[267,276,285,280,269,273,0,285,277,275],
[250,253,282,257,266,257,265,0,271,262],
[250,259,267,263,256,258,273,279,0,266],
[270,264,282,269,282,265,275,288,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,294,251,261,252,248,263,274],
[281,0,262,282,237,267,256,260,277,262],
[274,288,0,294,265,256,249,265,262,255],
[256,268,256,0,242,266,233,235,260,230],
[299,313,285,308,0,276,265,287,299,275],
[289,283,294,284,274,0,260,281,292,271],
[298,294,301,317,285,290,0,288,269,300],
[302,290,285,315,263,269,262,0,280,278],
[287,273,288,290,251,258,281,270,0,262],
[276,288,295,320,275,279,250,272,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,251,262,258,257,248,260,254,281],
[252,0,237,248,232,255,261,250,242,281],
[299,313,0,297,278,281,268,274,283,291],
[288,302,253,0,268,295,277,285,286,307],
[292,318,272,282,0,267,276,283,265,322],
[293,295,269,255,283,0,267,276,261,295],
[302,289,282,273,274,283,0,271,275,285],
[290,300,276,265,267,274,279,0,262,271],
[296,308,267,264,285,289,275,288,0,301],
[269,269,259,243,228,255,265,279,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,283,282,279,260,244,264,265,267],
[282,0,285,288,288,276,271,277,259,273],
[267,265,0,289,282,261,269,267,270,264],
[268,262,261,0,267,259,278,255,263,265],
[271,262,268,283,0,269,261,269,265,266],
[290,274,289,291,281,0,279,274,266,285],
[306,279,281,272,289,271,0,265,273,275],
[286,273,283,295,281,276,285,0,275,278],
[285,291,280,287,285,284,277,275,0,279],
[283,277,286,285,284,265,275,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,297,298,275,322,284,315,283,328],
[285,0,214,349,289,358,280,299,269,316],
[253,336,0,329,310,326,347,305,278,288],
[252,201,221,0,252,278,273,293,275,284],
[275,261,240,298,0,280,215,248,285,317],
[228,192,224,272,270,0,277,261,276,280],
[266,270,203,277,335,273,0,310,277,320],
[235,251,245,257,302,289,240,0,249,305],
[267,281,272,275,265,274,273,301,0,307],
[222,234,262,266,233,270,230,245,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,268,274,252,285,271,276,260,275],
[264,0,272,263,258,267,249,279,266,274],
[282,278,0,259,267,282,278,265,273,265],
[276,287,291,0,271,276,279,285,281,264],
[298,292,283,279,0,279,283,280,273,275],
[265,283,268,274,271,0,259,282,254,261],
[279,301,272,271,267,291,0,285,266,279],
[274,271,285,265,270,268,265,0,269,279],
[290,284,277,269,277,296,284,281,0,268],
[275,276,285,286,275,289,271,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,254,297,270,286,278,288,257,291],
[287,0,286,297,300,300,286,314,264,319],
[296,264,0,290,292,291,300,301,287,307],
[253,253,260,0,258,269,286,298,258,277],
[280,250,258,292,0,287,272,308,272,276],
[264,250,259,281,263,0,277,288,284,276],
[272,264,250,264,278,273,0,277,274,271],
[262,236,249,252,242,262,273,0,247,250],
[293,286,263,292,278,266,276,303,0,296],
[259,231,243,273,274,274,279,300,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,272,277,279,300,304,277,253],
[268,0,267,268,277,283,287,279,299,268],
[270,283,0,273,291,284,293,304,263,280],
[278,282,277,0,284,279,293,293,282,228],
[273,273,259,266,0,284,273,259,258,255],
[271,267,266,271,266,0,292,292,265,256],
[250,263,257,257,277,258,0,265,288,230],
[246,271,246,257,291,258,285,0,264,235],
[273,251,287,268,292,285,262,286,0,266],
[297,282,270,322,295,294,320,315,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,264,303,278,306,266,285,300,270],
[252,0,236,245,262,271,280,268,279,247],
[286,314,0,260,308,305,300,309,303,281],
[247,305,290,0,302,309,267,279,292,289],
[272,288,242,248,0,295,274,264,286,264],
[244,279,245,241,255,0,260,262,279,249],
[284,270,250,283,276,290,0,263,286,242],
[265,282,241,271,286,288,287,0,281,243],
[250,271,247,258,264,271,264,269,0,240],
[280,303,269,261,286,301,308,307,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,260,265,280,245,287,287,319,287],
[296,0,257,242,262,250,275,284,292,280],
[290,293,0,265,312,275,305,292,305,306],
[285,308,285,0,291,259,287,287,298,296],
[270,288,238,259,0,229,281,299,298,256],
[305,300,275,291,321,0,324,324,304,308],
[263,275,245,263,269,226,0,282,304,278],
[263,266,258,263,251,226,268,0,294,268],
[231,258,245,252,252,246,246,256,0,258],
[263,270,244,254,294,242,272,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,298,260,248,267,286,265,276],
[270,0,285,280,266,258,258,301,253,270],
[273,265,0,258,246,257,258,274,243,246],
[252,270,292,0,250,263,241,262,248,250],
[290,284,304,300,0,279,280,281,276,271],
[302,292,293,287,271,0,258,273,270,259],
[283,292,292,309,270,292,0,291,271,265],
[264,249,276,288,269,277,259,0,269,269],
[285,297,307,302,274,280,279,281,0,284],
[274,280,304,300,279,291,285,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,275,264,261,274,283,271,267],
[279,0,277,258,278,282,277,284,283,262],
[274,273,0,283,264,282,290,279,279,277],
[275,292,267,0,274,287,279,298,294,269],
[286,272,286,276,0,293,263,281,272,282],
[289,268,268,263,257,0,259,267,281,269],
[276,273,260,271,287,291,0,281,288,272],
[267,266,271,252,269,283,269,0,280,252],
[279,267,271,256,278,269,262,270,0,262],
[283,288,273,281,268,281,278,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,306,263,260,249,252,315,282,262],
[275,0,301,273,260,265,259,295,254,243],
[244,249,0,267,255,258,249,275,258,223],
[287,277,283,0,260,275,250,300,276,279],
[290,290,295,290,0,281,260,293,285,265],
[301,285,292,275,269,0,269,308,301,263],
[298,291,301,300,290,281,0,307,295,245],
[235,255,275,250,257,242,243,0,266,236],
[268,296,292,274,265,249,255,284,0,261],
[288,307,327,271,285,287,305,314,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,241,236,261,239,259,269,256,284],
[285,0,283,246,290,292,257,299,272,304],
[309,267,0,282,273,286,256,287,309,294],
[314,304,268,0,308,308,309,312,302,319],
[289,260,277,242,0,263,285,253,258,302],
[311,258,264,242,287,0,273,287,325,288],
[291,293,294,241,265,277,0,259,294,313],
[281,251,263,238,297,263,291,0,280,266],
[294,278,241,248,292,225,256,270,0,259],
[266,246,256,231,248,262,237,284,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,290,268,282,262,261,259,292],
[277,0,280,305,292,297,283,291,265,292],
[283,270,0,310,301,283,270,282,290,311],
[260,245,240,0,267,248,257,264,261,267],
[282,258,249,283,0,269,255,248,245,260],
[268,253,267,302,281,0,279,276,262,273],
[288,267,280,293,295,271,0,292,261,270],
[289,259,268,286,302,274,258,0,266,286],
[291,285,260,289,305,288,289,284,0,279],
[258,258,239,283,290,277,280,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,250,259,271,275,268,276,268,271],
[277,0,279,265,267,272,279,281,287,279],
[300,271,0,300,263,271,280,276,289,307],
[291,285,250,0,283,276,289,279,278,285],
[279,283,287,267,0,280,265,279,272,286],
[275,278,279,274,270,0,282,275,267,287],
[282,271,270,261,285,268,0,292,263,284],
[274,269,274,271,271,275,258,0,267,291],
[282,263,261,272,278,283,287,283,0,286],
[279,271,243,265,264,263,266,259,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,268,269,292,250,318,280,292,297],
[290,0,314,307,348,294,313,263,315,306],
[282,236,0,297,323,244,298,252,318,289],
[281,243,253,0,288,237,266,293,286,275],
[258,202,227,262,0,242,231,234,272,250],
[300,256,306,313,308,0,294,282,319,317],
[232,237,252,284,319,256,0,253,295,267],
[270,287,298,257,316,268,297,0,336,321],
[258,235,232,264,278,231,255,214,0,249],
[253,244,261,275,300,233,283,229,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,333,291,278,281,327,365,385,284],
[301,0,328,309,249,328,365,363,337,300],
[217,222,0,283,249,275,287,327,315,287],
[259,241,267,0,256,335,316,313,354,294],
[272,301,301,294,0,333,349,321,375,310],
[269,222,275,215,217,0,289,292,303,237],
[223,185,263,234,201,261,0,259,282,244],
[185,187,223,237,229,258,291,0,275,244],
[165,213,235,196,175,247,268,275,0,241],
[266,250,263,256,240,313,306,306,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,252,211,245,244,266,256,233,227],
[326,0,315,276,250,283,278,304,289,274],
[298,235,0,211,261,255,223,282,205,195],
[339,274,339,0,331,311,281,329,306,286],
[305,300,289,219,0,257,245,279,220,223],
[306,267,295,239,293,0,262,276,283,247],
[284,272,327,269,305,288,0,306,261,250],
[294,246,268,221,271,274,244,0,253,195],
[317,261,345,244,330,267,289,297,0,261],
[323,276,355,264,327,303,300,355,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,273,312,322,243,247,291,305,263],
[287,0,267,267,318,291,274,265,284,267],
[277,283,0,302,311,302,257,300,281,334],
[238,283,248,0,277,225,248,263,295,262],
[228,232,239,273,0,187,266,245,245,238],
[307,259,248,325,363,0,275,252,285,286],
[303,276,293,302,284,275,0,294,266,284],
[259,285,250,287,305,298,256,0,291,296],
[245,266,269,255,305,265,284,259,0,255],
[287,283,216,288,312,264,266,254,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,350,264,323,276,325,317,262,297],
[274,0,357,254,298,245,260,285,231,287],
[200,193,0,189,236,224,248,277,223,254],
[286,296,361,0,303,254,296,321,285,322],
[227,252,314,247,0,254,271,314,257,296],
[274,305,326,296,296,0,342,330,267,337],
[225,290,302,254,279,208,0,272,270,290],
[233,265,273,229,236,220,278,0,266,278],
[288,319,327,265,293,283,280,284,0,293],
[253,263,296,228,254,213,260,272,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,279,322,326,268,283,359,339,304],
[192,0,247,216,231,247,190,342,283,265],
[271,303,0,289,288,229,302,322,344,287],
[228,334,261,0,288,263,229,359,341,361],
[224,319,262,262,0,245,227,244,357,286],
[282,303,321,287,305,0,228,335,317,320],
[267,360,248,321,323,322,0,359,382,342],
[191,208,228,191,306,215,191,0,359,287],
[211,267,206,209,193,233,168,191,0,283],
[246,285,263,189,264,230,208,263,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,266,277,260,266,255,258,259,272],
[306,0,279,283,302,306,279,305,274,306],
[284,271,0,288,292,272,280,293,284,297],
[273,267,262,0,280,271,281,289,269,279],
[290,248,258,270,0,289,262,290,282,281],
[284,244,278,279,261,0,278,277,273,292],
[295,271,270,269,288,272,0,309,294,307],
[292,245,257,261,260,273,241,0,271,273],
[291,276,266,281,268,277,256,279,0,270],
[278,244,253,271,269,258,243,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,299,304,303,302,268,275,299],
[271,0,272,307,330,277,268,290,272,266],
[278,278,0,266,336,280,271,215,285,294],
[251,243,284,0,340,249,273,268,289,288],
[246,220,214,210,0,253,245,243,216,244],
[247,273,270,301,297,0,298,259,209,279],
[248,282,279,277,305,252,0,268,252,308],
[282,260,335,282,307,291,282,0,234,273],
[275,278,265,261,334,341,298,316,0,305],
[251,284,256,262,306,271,242,277,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,246,261,252,284,263,280,244],
[293,0,263,240,283,252,294,249,268,260],
[290,287,0,253,271,249,268,259,270,270],
[304,310,297,0,296,274,308,286,294,275],
[289,267,279,254,0,275,290,283,261,271],
[298,298,301,276,275,0,300,283,304,284],
[266,256,282,242,260,250,0,272,282,272],
[287,301,291,264,267,267,278,0,268,270],
[270,282,280,256,289,246,268,282,0,280],
[306,290,280,275,279,266,278,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,281,291,271,275,299,278,287,263],
[270,0,270,280,278,266,297,264,289,247],
[269,280,0,300,270,258,294,254,289,258],
[259,270,250,0,248,241,274,251,262,243],
[279,272,280,302,0,267,290,271,275,281],
[275,284,292,309,283,0,289,267,296,277],
[251,253,256,276,260,261,0,242,265,241],
[272,286,296,299,279,283,308,0,294,261],
[263,261,261,288,275,254,285,256,0,271],
[287,303,292,307,269,273,309,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,271,281,294,296,266,273,293,302],
[247,0,271,256,257,244,239,276,263,277],
[279,279,0,296,278,267,260,285,269,294],
[269,294,254,0,287,292,277,271,282,288],
[256,293,272,263,0,264,253,273,276,275],
[254,306,283,258,286,0,262,285,268,285],
[284,311,290,273,297,288,0,288,315,296],
[277,274,265,279,277,265,262,0,279,296],
[257,287,281,268,274,282,235,271,0,272],
[248,273,256,262,275,265,254,254,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,268,269,263,286,263,283,258,274],
[295,0,302,273,273,307,307,299,250,300],
[282,248,0,254,273,277,281,299,283,268],
[281,277,296,0,275,278,293,286,265,300],
[287,277,277,275,0,290,279,292,263,285],
[264,243,273,272,260,0,300,281,286,266],
[287,243,269,257,271,250,0,283,248,270],
[267,251,251,264,258,269,267,0,274,260],
[292,300,267,285,287,264,302,276,0,287],
[276,250,282,250,265,284,280,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,290,275,272,296,285,272,268],
[280,0,269,278,260,254,291,271,288,289],
[281,281,0,275,289,277,292,289,276,284],
[260,272,275,0,280,272,296,273,270,258],
[275,290,261,270,0,249,252,289,274,262],
[278,296,273,278,301,0,307,276,306,278],
[254,259,258,254,298,243,0,263,275,270],
[265,279,261,277,261,274,287,0,276,254],
[278,262,274,280,276,244,275,274,0,252],
[282,261,266,292,288,272,280,296,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,285,262,267,279,260,276,290],
[273,0,244,251,251,256,278,260,267,273],
[276,306,0,268,289,284,271,277,271,273],
[265,299,282,0,291,305,291,289,277,297],
[288,299,261,259,0,275,285,268,267,301],
[283,294,266,245,275,0,279,256,273,281],
[271,272,279,259,265,271,0,266,262,278],
[290,290,273,261,282,294,284,0,261,267],
[274,283,279,273,283,277,288,289,0,291],
[260,277,277,253,249,269,272,283,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,286,273,270,261,275,269,287],
[272,0,282,287,280,286,258,281,276,288],
[265,268,0,295,268,273,270,269,255,290],
[264,263,255,0,245,264,241,265,255,266],
[277,270,282,305,0,275,265,271,273,283],
[280,264,277,286,275,0,268,280,260,288],
[289,292,280,309,285,282,0,277,270,297],
[275,269,281,285,279,270,273,0,278,281],
[281,274,295,295,277,290,280,272,0,289],
[263,262,260,284,267,262,253,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,272,279,290,287,257,296,262,270],
[269,0,294,274,273,301,270,311,268,266],
[278,256,0,245,277,274,256,266,261,260],
[271,276,305,0,288,280,290,300,276,280],
[260,277,273,262,0,281,278,284,254,266],
[263,249,276,270,269,0,275,274,272,267],
[293,280,294,260,272,275,0,282,241,269],
[254,239,284,250,266,276,268,0,270,264],
[288,282,289,274,296,278,309,280,0,281],
[280,284,290,270,284,283,281,286,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,275,259,290,269,280,275,296,280],
[287,0,265,280,252,249,241,253,295,258],
[275,285,0,283,271,245,285,251,291,270],
[291,270,267,0,261,282,267,240,278,255],
[260,298,279,289,0,288,273,261,295,294],
[281,301,305,268,262,0,300,259,272,290],
[270,309,265,283,277,250,0,233,301,285],
[275,297,299,310,289,291,317,0,303,266],
[254,255,259,272,255,278,249,247,0,267],
[270,292,280,295,256,260,265,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,262,261,261,284,261,254,288,281],
[252,0,257,271,247,274,259,243,300,245],
[288,293,0,277,263,266,261,269,313,262],
[289,279,273,0,262,281,256,233,321,266],
[289,303,287,288,0,286,279,275,320,275],
[266,276,284,269,264,0,246,263,280,273],
[289,291,289,294,271,304,0,257,303,282],
[296,307,281,317,275,287,293,0,325,293],
[262,250,237,229,230,270,247,225,0,241],
[269,305,288,284,275,277,268,257,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,264,289,286,272,274,276,285,261],
[267,0,270,278,288,266,287,275,268,262],
[286,280,0,286,295,291,295,283,289,274],
[261,272,264,0,284,270,274,275,256,279],
[264,262,255,266,0,257,267,279,260,250],
[278,284,259,280,293,0,284,281,266,267],
[276,263,255,276,283,266,0,279,267,258],
[274,275,267,275,271,269,271,0,278,256],
[265,282,261,294,290,284,283,272,0,261],
[289,288,276,271,300,283,292,294,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,292,291,305,265,292,288,289],
[257,0,272,277,267,283,272,272,267,294],
[266,278,0,261,266,285,275,278,248,296],
[258,273,289,0,278,278,275,281,266,279],
[259,283,284,272,0,283,285,275,280,283],
[245,267,265,272,267,0,258,270,277,290],
[285,278,275,275,265,292,0,274,283,290],
[258,278,272,269,275,280,276,0,276,283],
[262,283,302,284,270,273,267,274,0,291],
[261,256,254,271,267,260,260,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,267,285,272,288,275,287,261],
[259,0,248,258,237,258,262,258,251,223],
[289,302,0,287,272,282,314,294,266,286],
[283,292,263,0,273,265,292,247,256,275],
[265,313,278,277,0,296,322,293,289,274],
[278,292,268,285,254,0,293,268,246,244],
[262,288,236,258,228,257,0,237,242,247],
[275,292,256,303,257,282,313,0,263,275],
[263,299,284,294,261,304,308,287,0,277],
[289,327,264,275,276,306,303,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,291,281,265,307,303,301,306,301],
[269,0,273,295,296,320,313,292,296,291],
[259,277,0,250,283,291,298,292,299,278],
[269,255,300,0,283,283,284,284,296,294],
[285,254,267,267,0,291,305,270,315,260],
[243,230,259,267,259,0,286,296,267,249],
[247,237,252,266,245,264,0,226,293,279],
[249,258,258,266,280,254,324,0,287,299],
[244,254,251,254,235,283,257,263,0,281],
[249,259,272,256,290,301,271,251,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,269,264,287,262,264,276,282,283],
[276,0,264,271,297,265,281,272,291,281],
[281,286,0,270,288,273,280,269,298,292],
[286,279,280,0,293,273,278,283,287,298],
[263,253,262,257,0,273,271,266,277,269],
[288,285,277,277,277,0,273,275,294,293],
[286,269,270,272,279,277,0,269,282,299],
[274,278,281,267,284,275,281,0,279,279],
[268,259,252,263,273,256,268,271,0,281],
[267,269,258,252,281,257,251,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,257,232,266,244,270,260,288,260],
[304,0,265,278,281,267,282,277,287,281],
[293,285,0,286,300,279,284,285,311,273],
[318,272,264,0,301,264,274,268,290,275],
[284,269,250,249,0,266,260,251,288,276],
[306,283,271,286,284,0,263,265,273,289],
[280,268,266,276,290,287,0,270,316,283],
[290,273,265,282,299,285,280,0,318,282],
[262,263,239,260,262,277,234,232,0,263],
[290,269,277,275,274,261,267,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,276,267,271,279,284,289,292,304],
[251,0,222,261,243,277,242,253,261,283],
[274,328,0,271,295,307,271,281,297,292],
[283,289,279,0,294,289,252,275,281,287],
[279,307,255,256,0,290,257,284,254,294],
[271,273,243,261,260,0,238,249,266,273],
[266,308,279,298,293,312,0,272,292,306],
[261,297,269,275,266,301,278,0,288,272],
[258,289,253,269,296,284,258,262,0,285],
[246,267,258,263,256,277,244,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,354,277,237,276,316,275,278,198],
[315,0,395,316,274,279,314,355,395,318],
[196,155,0,234,193,195,194,118,196,156],
[273,234,316,0,310,273,391,314,315,235],
[313,276,357,240,0,278,315,238,276,279],
[274,271,355,277,272,0,312,315,352,237],
[234,236,356,159,235,238,0,197,235,197],
[275,195,432,236,312,235,353,0,316,156],
[272,155,354,235,274,198,315,234,0,236],
[352,232,394,315,271,313,353,394,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,261,276,250,261,256,248,278],
[288,0,291,283,297,268,274,265,267,279],
[274,259,0,253,283,247,254,269,252,261],
[289,267,297,0,294,264,275,275,282,272],
[274,253,267,256,0,249,265,270,266,269],
[300,282,303,286,301,0,263,274,278,280],
[289,276,296,275,285,287,0,284,265,286],
[294,285,281,275,280,276,266,0,246,275],
[302,283,298,268,284,272,285,304,0,282],
[272,271,289,278,281,270,264,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,256,268,287,280,259,257,276],
[284,0,282,292,277,272,291,272,269,289],
[269,268,0,252,269,265,274,251,277,298],
[294,258,298,0,299,272,310,248,268,294],
[282,273,281,251,0,280,303,288,257,303],
[263,278,285,278,270,0,291,296,264,269],
[270,259,276,240,247,259,0,245,264,279],
[291,278,299,302,262,254,305,0,270,287],
[293,281,273,282,293,286,286,280,0,280],
[274,261,252,256,247,281,271,263,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,254,261,270,254,246,271,262],
[281,0,289,268,271,276,287,278,280,277],
[279,261,0,263,261,280,262,254,300,284],
[296,282,287,0,281,283,289,284,284,266],
[289,279,289,269,0,283,279,275,293,279],
[280,274,270,267,267,0,265,262,271,255],
[296,263,288,261,271,285,0,274,293,262],
[304,272,296,266,275,288,276,0,299,286],
[279,270,250,266,257,279,257,251,0,262],
[288,273,266,284,271,295,288,264,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,260,283,270,265,285,271,276,270],
[278,0,278,263,268,263,260,261,267,268],
[290,272,0,294,284,279,286,274,289,282],
[267,287,256,0,276,273,277,264,259,292],
[280,282,266,274,0,262,303,283,285,291],
[285,287,271,277,288,0,278,279,272,285],
[265,290,264,273,247,272,0,267,238,277],
[279,289,276,286,267,271,283,0,283,273],
[274,283,261,291,265,278,312,267,0,301],
[280,282,268,258,259,265,273,277,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,281,279,269,271,288,277,276,273],
[252,0,259,257,257,260,260,282,250,262],
[269,291,0,288,285,283,277,286,267,273],
[271,293,262,0,288,274,286,290,267,268],
[281,293,265,262,0,292,274,270,276,270],
[279,290,267,276,258,0,289,302,293,274],
[262,290,273,264,276,261,0,282,277,294],
[273,268,264,260,280,248,268,0,238,258],
[274,300,283,283,274,257,273,312,0,295],
[277,288,277,282,280,276,256,292,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,261,252,247,232,249,289,269,236],
[311,0,304,275,338,312,296,304,280,311],
[289,246,0,280,260,287,307,291,267,298],
[298,275,270,0,304,298,335,294,289,329],
[303,212,290,246,0,269,270,271,267,292],
[318,238,263,252,281,0,260,271,254,293],
[301,254,243,215,280,290,0,263,261,298],
[261,246,259,256,279,279,287,0,273,271],
[281,270,283,261,283,296,289,277,0,260],
[314,239,252,221,258,257,252,279,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,278,308,277,282,289,278,302],
[280,0,273,279,298,274,267,268,299,300],
[274,277,0,279,327,271,286,278,282,285],
[272,271,271,0,295,286,293,278,306,312],
[242,252,223,255,0,233,247,252,255,285],
[273,276,279,264,317,0,267,291,294,288],
[268,283,264,257,303,283,0,299,274,298],
[261,282,272,272,298,259,251,0,276,307],
[272,251,268,244,295,256,276,274,0,294],
[248,250,265,238,265,262,252,243,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,276,264,260,275,307,254,277,286],
[248,0,252,269,257,241,259,236,259,262],
[274,298,0,273,276,269,280,287,265,275],
[286,281,277,0,270,282,276,256,280,281],
[290,293,274,280,0,264,297,278,264,287],
[275,309,281,268,286,0,299,263,277,277],
[243,291,270,274,253,251,0,263,254,276],
[296,314,263,294,272,287,287,0,277,294],
[273,291,285,270,286,273,296,273,0,266],
[264,288,275,269,263,273,274,256,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,278,320,259,252,249,270,285],
[273,0,267,288,326,290,259,290,272,271],
[287,283,0,256,297,241,247,228,283,242],
[272,262,294,0,294,264,262,261,265,269],
[230,224,253,256,0,254,233,218,287,217],
[291,260,309,286,296,0,259,264,269,294],
[298,291,303,288,317,291,0,259,307,313],
[301,260,322,289,332,286,291,0,299,314],
[280,278,267,285,263,281,243,251,0,274],
[265,279,308,281,333,256,237,236,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,257,289,265,250,277,247,272,264],
[271,0,269,292,307,268,286,249,259,279],
[293,281,0,251,263,262,269,282,281,251],
[261,258,299,0,271,256,271,253,225,270],
[285,243,287,279,0,271,251,283,273,303],
[300,282,288,294,279,0,258,310,266,302],
[273,264,281,279,299,292,0,280,288,288],
[303,301,268,297,267,240,270,0,289,280],
[278,291,269,325,277,284,262,261,0,272],
[286,271,299,280,247,248,262,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,222,227,248,229,248,203,244,281],
[282,0,238,260,270,225,254,252,263,282],
[328,312,0,280,313,275,313,271,285,358],
[323,290,270,0,265,279,283,281,271,314],
[302,280,237,285,0,245,264,246,281,299],
[321,325,275,271,305,0,272,280,292,321],
[302,296,237,267,286,278,0,240,288,322],
[347,298,279,269,304,270,310,0,298,354],
[306,287,265,279,269,258,262,252,0,314],
[269,268,192,236,251,229,228,196,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,277,269,283,284,262,280,282,270],
[282,0,263,272,275,255,263,285,281,273],
[273,287,0,263,294,273,254,258,279,284],
[281,278,287,0,291,275,290,281,300,281],
[267,275,256,259,0,247,263,263,271,263],
[266,295,277,275,303,0,266,275,285,270],
[288,287,296,260,287,284,0,289,293,286],
[270,265,292,269,287,275,261,0,287,264],
[268,269,271,250,279,265,257,263,0,275],
[280,277,266,269,287,280,264,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,295,279,280,278,295,300,271,271],
[272,0,294,299,283,279,286,293,287,306],
[255,256,0,279,258,257,280,285,251,277],
[271,251,271,0,299,269,268,256,234,246],
[270,267,292,251,0,283,277,284,272,275],
[272,271,293,281,267,0,294,304,261,314],
[255,264,270,282,273,256,0,290,249,274],
[250,257,265,294,266,246,260,0,244,272],
[279,263,299,316,278,289,301,306,0,289],
[279,244,273,304,275,236,276,278,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,279,323,308,269,297,288,283,300],
[278,0,284,310,295,291,299,264,279,296],
[271,266,0,312,281,284,280,258,277,289],
[227,240,238,0,275,250,267,238,263,273],
[242,255,269,275,0,258,268,268,257,253],
[281,259,266,300,292,0,278,271,290,269],
[253,251,270,283,282,272,0,267,264,280],
[262,286,292,312,282,279,283,0,281,279],
[267,271,273,287,293,260,286,269,0,269],
[250,254,261,277,297,281,270,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,329,277,266,260,267,308,253,280],
[271,0,314,262,250,292,281,312,274,315],
[221,236,0,242,217,259,250,254,249,263],
[273,288,308,0,282,288,290,304,293,299],
[284,300,333,268,0,299,277,300,295,268],
[290,258,291,262,251,0,293,285,252,253],
[283,269,300,260,273,257,0,280,241,301],
[242,238,296,246,250,265,270,0,244,270],
[297,276,301,257,255,298,309,306,0,281],
[270,235,287,251,282,297,249,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,336,272,279,292,236,335,257,274],
[234,0,275,211,255,215,195,234,294,292],
[214,275,0,194,215,215,218,213,197,270],
[278,339,356,0,276,253,297,296,278,355],
[271,295,335,274,0,194,237,275,278,271],
[258,335,335,297,356,0,294,256,338,294],
[314,355,332,253,313,256,0,273,313,312],
[215,316,337,254,275,294,277,0,235,293],
[293,256,353,272,272,212,237,315,0,330],
[276,258,280,195,279,256,238,257,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,262,307,295,302,278,272,292,278],
[268,0,252,293,253,272,256,246,264,242],
[288,298,0,282,263,263,286,286,288,300],
[243,257,268,0,271,259,234,262,256,275],
[255,297,287,279,0,281,248,278,278,290],
[248,278,287,291,269,0,276,265,290,268],
[272,294,264,316,302,274,0,280,269,278],
[278,304,264,288,272,285,270,0,256,296],
[258,286,262,294,272,260,281,294,0,263],
[272,308,250,275,260,282,272,254,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,298,283,317,320,298,311,283,290],
[288,0,274,305,300,305,275,301,284,303],
[252,276,0,272,318,312,258,298,263,288],
[267,245,278,0,299,278,269,262,263,289],
[233,250,232,251,0,258,228,258,249,271],
[230,245,238,272,292,0,278,258,250,254],
[252,275,292,281,322,272,0,280,249,295],
[239,249,252,288,292,292,270,0,262,251],
[267,266,287,287,301,300,301,288,0,309],
[260,247,262,261,279,296,255,299,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,289,288,270,260,287,283,268,270],
[213,0,288,249,237,223,226,199,246,239],
[261,262,0,242,266,245,236,240,275,252],
[262,301,308,0,282,248,272,256,284,282],
[280,313,284,268,0,267,297,229,272,278],
[290,327,305,302,283,0,265,258,290,291],
[263,324,314,278,253,285,0,254,278,275],
[267,351,310,294,321,292,296,0,306,284],
[282,304,275,266,278,260,272,244,0,262],
[280,311,298,268,272,259,275,266,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,257,257,279,304,284,281,270],
[271,0,271,258,284,263,281,272,282,269],
[267,279,0,280,268,254,278,274,278,265],
[293,292,270,0,292,264,323,276,289,301],
[293,266,282,258,0,220,291,253,284,258],
[271,287,296,286,330,0,307,284,290,303],
[246,269,272,227,259,243,0,246,261,252],
[266,278,276,274,297,266,304,0,292,257],
[269,268,272,261,266,260,289,258,0,268],
[280,281,285,249,292,247,298,293,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,266,281,282,247,273,259,252,273],
[272,0,249,283,267,245,268,281,276,260],
[284,301,0,270,268,257,302,305,289,286],
[269,267,280,0,247,265,279,281,294,281],
[268,283,282,303,0,269,292,288,271,289],
[303,305,293,285,281,0,291,271,311,294],
[277,282,248,271,258,259,0,255,277,293],
[291,269,245,269,262,279,295,0,308,275],
[298,274,261,256,279,239,273,242,0,304],
[277,290,264,269,261,256,257,275,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,371,333,274,274,233,332,310,353],
[178,0,277,280,220,173,214,217,253,258],
[179,273,0,297,250,232,213,255,329,240],
[217,270,253,0,174,233,230,213,231,192],
[276,330,300,376,0,295,313,296,232,258],
[276,377,318,317,255,0,291,339,335,278],
[317,336,337,320,237,259,0,356,276,239],
[218,333,295,337,254,211,194,0,291,218],
[240,297,221,319,318,215,274,259,0,222],
[197,292,310,358,292,272,311,332,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,274,284,248,270,267,257,265,260],
[300,0,280,301,288,277,280,264,288,277],
[276,270,0,269,281,273,281,277,292,266],
[266,249,281,0,269,266,285,274,278,273],
[302,262,269,281,0,279,279,269,274,263],
[280,273,277,284,271,0,279,262,303,266],
[283,270,269,265,271,271,0,275,288,265],
[293,286,273,276,281,288,275,0,290,271],
[285,262,258,272,276,247,262,260,0,269],
[290,273,284,277,287,284,285,279,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,257,282,270,253,238,264,252,273],
[309,0,290,263,294,296,277,285,291,273],
[293,260,0,292,279,289,299,281,300,236],
[268,287,258,0,264,273,282,285,283,278],
[280,256,271,286,0,270,259,247,264,268],
[297,254,261,277,280,0,291,279,273,287],
[312,273,251,268,291,259,0,255,289,289],
[286,265,269,265,303,271,295,0,312,265],
[298,259,250,267,286,277,261,238,0,265],
[277,277,314,272,282,263,261,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,274,276,277,270,292,267,285,282],
[290,0,287,284,283,309,320,287,301,268],
[276,263,0,259,256,257,278,264,272,268],
[274,266,291,0,280,269,295,253,274,244],
[273,267,294,270,0,268,287,258,292,269],
[280,241,293,281,282,0,267,284,308,263],
[258,230,272,255,263,283,0,242,261,290],
[283,263,286,297,292,266,308,0,297,296],
[265,249,278,276,258,242,289,253,0,257],
[268,282,282,306,281,287,260,254,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,312,283,329,301,299,294,288,270],
[235,0,280,277,297,278,276,292,265,281],
[238,270,0,279,323,284,279,264,250,279],
[267,273,271,0,293,279,278,277,246,265],
[221,253,227,257,0,263,259,272,226,236],
[249,272,266,271,287,0,288,284,250,262],
[251,274,271,272,291,262,0,256,266,287],
[256,258,286,273,278,266,294,0,264,280],
[262,285,300,304,324,300,284,286,0,292],
[280,269,271,285,314,288,263,270,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,224,276,283,336,285,322,297,329],
[226,0,217,258,282,279,255,278,277,291],
[326,333,0,273,329,325,333,334,308,334],
[274,292,277,0,271,320,316,300,278,306],
[267,268,221,279,0,284,308,320,312,325],
[214,271,225,230,266,0,269,279,246,326],
[265,295,217,234,242,281,0,306,253,274],
[228,272,216,250,230,271,244,0,260,305],
[253,273,242,272,238,304,297,290,0,310],
[221,259,216,244,225,224,276,245,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,257,264,277,216,255,262,259],
[288,0,277,277,259,259,235,277,262,295],
[274,273,0,253,248,255,240,257,261,271],
[293,273,297,0,251,286,277,266,298,294],
[286,291,302,299,0,296,261,252,269,276],
[273,291,295,264,254,0,279,267,278,287],
[334,315,310,273,289,271,0,296,312,326],
[295,273,293,284,298,283,254,0,283,288],
[288,288,289,252,281,272,238,267,0,274],
[291,255,279,256,274,263,224,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,296,277,276,261,278,252,257,260],
[279,0,277,276,286,260,270,261,271,264],
[254,273,0,268,272,270,265,273,255,264],
[273,274,282,0,276,278,273,270,265,263],
[274,264,278,274,0,253,271,267,254,268],
[289,290,280,272,297,0,268,279,270,275],
[272,280,285,277,279,282,0,257,288,275],
[298,289,277,280,283,271,293,0,285,275],
[293,279,295,285,296,280,262,265,0,270],
[290,286,286,287,282,275,275,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,314,259,285,281,287,258,287,269],
[273,0,302,261,285,272,283,282,287,261],
[236,248,0,237,254,249,259,216,260,262],
[291,289,313,0,293,309,282,265,275,273],
[265,265,296,257,0,254,280,252,290,245],
[269,278,301,241,296,0,294,256,291,266],
[263,267,291,268,270,256,0,243,298,262],
[292,268,334,285,298,294,307,0,287,291],
[263,263,290,275,260,259,252,263,0,265],
[281,289,288,277,305,284,288,259,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,291,269,282,280,282,282,293,285],
[262,0,271,267,258,265,279,276,279,278],
[259,279,0,255,264,284,270,273,278,266],
[281,283,295,0,280,272,270,287,283,271],
[268,292,286,270,0,279,266,285,276,286],
[270,285,266,278,271,0,283,267,280,290],
[268,271,280,280,284,267,0,288,295,274],
[268,274,277,263,265,283,262,0,277,258],
[257,271,272,267,274,270,255,273,0,286],
[265,272,284,279,264,260,276,292,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,257,256,273,275,262,274,277,280],
[254,0,265,268,272,281,277,277,292,282],
[293,285,0,285,285,309,268,286,272,279],
[294,282,265,0,297,321,273,296,293,287],
[277,278,265,253,0,279,294,284,261,270],
[275,269,241,229,271,0,259,271,259,262],
[288,273,282,277,256,291,0,302,292,292],
[276,273,264,254,266,279,248,0,272,282],
[273,258,278,257,289,291,258,278,0,269],
[270,268,271,263,280,288,258,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,274,293,282,272,280,262,262],
[262,0,255,275,280,272,268,275,263,276],
[278,295,0,269,278,293,275,281,266,260],
[276,275,281,0,299,285,277,286,250,263],
[257,270,272,251,0,260,251,279,251,264],
[268,278,257,265,290,0,268,288,257,260],
[278,282,275,273,299,282,0,307,276,272],
[270,275,269,264,271,262,243,0,257,253],
[288,287,284,300,299,293,274,293,0,280],
[288,274,290,287,286,290,278,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,292,265,303,280,292,276,279,274],
[257,0,264,268,275,271,270,262,276,273],
[258,286,0,272,277,268,274,264,250,275],
[285,282,278,0,290,270,284,267,280,294],
[247,275,273,260,0,259,291,253,277,278],
[270,279,282,280,291,0,276,271,273,293],
[258,280,276,266,259,274,0,262,262,279],
[274,288,286,283,297,279,288,0,268,273],
[271,274,300,270,273,277,288,282,0,298],
[276,277,275,256,272,257,271,277,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,245,229,259,254,271,281,259,281],
[340,0,279,273,329,307,337,299,296,305],
[305,271,0,320,283,323,306,314,313,294],
[321,277,230,0,321,315,289,288,307,303],
[291,221,267,229,0,308,300,269,293,274],
[296,243,227,235,242,0,310,270,290,282],
[279,213,244,261,250,240,0,286,267,245],
[269,251,236,262,281,280,264,0,270,252],
[291,254,237,243,257,260,283,280,0,264],
[269,245,256,247,276,268,305,298,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,265,268,277,272,285,264,288,272],
[285,0,249,271,270,274,297,262,287,270],
[285,301,0,287,281,283,283,284,271,277],
[282,279,263,0,287,288,296,272,292,282],
[273,280,269,263,0,286,278,255,283,279],
[278,276,267,262,264,0,266,266,274,270],
[265,253,267,254,272,284,0,260,260,265],
[286,288,266,278,295,284,290,0,295,284],
[262,263,279,258,267,276,290,255,0,267],
[278,280,273,268,271,280,285,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,268,252,219,252,291,243,242,235],
[297,0,224,254,246,223,315,214,224,254],
[282,326,0,255,250,248,345,292,237,278],
[298,296,295,0,260,270,327,308,243,235],
[331,304,300,290,0,276,325,265,284,244],
[298,327,302,280,274,0,303,271,265,252],
[259,235,205,223,225,247,0,246,214,209],
[307,336,258,242,285,279,304,0,264,270],
[308,326,313,307,266,285,336,286,0,285],
[315,296,272,315,306,298,341,280,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,288,273,294,292,271,277,297,266],
[258,0,274,281,290,276,254,283,281,277],
[262,276,0,266,272,280,282,277,275,268],
[277,269,284,0,295,300,265,284,309,296],
[256,260,278,255,0,276,264,260,285,276],
[258,274,270,250,274,0,258,249,274,259],
[279,296,268,285,286,292,0,298,286,280],
[273,267,273,266,290,301,252,0,283,285],
[253,269,275,241,265,276,264,267,0,273],
[284,273,282,254,274,291,270,265,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,308,269,296,300,274,277,260],
[265,0,285,274,279,276,281,265,284,272],
[286,265,0,266,255,269,278,282,273,253],
[242,276,284,0,239,284,262,248,280,249],
[281,271,295,311,0,276,310,263,276,279],
[254,274,281,266,274,0,264,264,266,254],
[250,269,272,288,240,286,0,276,275,260],
[276,285,268,302,287,286,274,0,280,263],
[273,266,277,270,274,284,275,270,0,266],
[290,278,297,301,271,296,290,287,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,270,280,278,294,300,268,283,290],
[263,0,280,282,282,301,312,289,279,283],
[280,270,0,278,277,305,301,280,270,280],
[270,268,272,0,265,288,299,270,280,284],
[272,268,273,285,0,277,301,281,282,277],
[256,249,245,262,273,0,293,268,267,262],
[250,238,249,251,249,257,0,250,249,257],
[282,261,270,280,269,282,300,0,295,279],
[267,271,280,270,268,283,301,255,0,266],
[260,267,270,266,273,288,293,271,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,295,290,299,266,278,281,273],
[269,0,269,294,307,277,281,285,278,284],
[265,281,0,276,281,289,281,276,260,275],
[255,256,274,0,271,261,262,263,257,249],
[260,243,269,279,0,264,272,265,256,274],
[251,273,261,289,286,0,284,277,287,285],
[284,269,269,288,278,266,0,293,272,286],
[272,265,274,287,285,273,257,0,272,269],
[269,272,290,293,294,263,278,278,0,275],
[277,266,275,301,276,265,264,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,203,197,181,219,240,234,256,199],
[348,0,253,287,307,255,308,362,326,273],
[347,297,0,327,312,293,274,310,349,330],
[353,263,223,0,202,261,315,315,314,239],
[369,243,238,348,0,257,278,350,332,296],
[331,295,257,289,293,0,332,348,352,312],
[310,242,276,235,272,218,0,258,312,220],
[316,188,240,235,200,202,292,0,292,237],
[294,224,201,236,218,198,238,258,0,257],
[351,277,220,311,254,238,330,313,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,282,289,265,286,268,295,278,285],
[250,0,252,281,264,274,248,262,272,277],
[268,298,0,297,268,281,276,267,278,266],
[261,269,253,0,271,275,257,279,273,272],
[285,286,282,279,0,287,268,278,298,283],
[264,276,269,275,263,0,268,268,289,283],
[282,302,274,293,282,282,0,284,297,305],
[255,288,283,271,272,282,266,0,269,272],
[272,278,272,277,252,261,253,281,0,265],
[265,273,284,278,267,267,245,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,269,258,278,265,264,271,276,265],
[278,0,281,261,308,264,281,276,273,265],
[281,269,0,267,302,279,286,272,280,279],
[292,289,283,0,301,266,277,285,280,277],
[272,242,248,249,0,250,263,247,267,279],
[285,286,271,284,300,0,291,271,280,278],
[286,269,264,273,287,259,0,271,275,272],
[279,274,278,265,303,279,279,0,280,274],
[274,277,270,270,283,270,275,270,0,274],
[285,285,271,273,271,272,278,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,274,275,280,277,271,294,276,294],
[273,0,256,262,282,289,256,293,280,277],
[276,294,0,268,292,309,273,301,283,312],
[275,288,282,0,284,300,283,281,291,305],
[270,268,258,266,0,271,278,267,265,301],
[273,261,241,250,279,0,266,254,258,284],
[279,294,277,267,272,284,0,284,272,304],
[256,257,249,269,283,296,266,0,269,297],
[274,270,267,259,285,292,278,281,0,315],
[256,273,238,245,249,266,246,253,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,253,271,273,288,297,270,292,265],
[269,0,274,269,278,277,293,268,259,258],
[297,276,0,283,303,297,313,267,291,286],
[279,281,267,0,288,270,298,273,281,269],
[277,272,247,262,0,276,282,245,272,276],
[262,273,253,280,274,0,294,260,259,272],
[253,257,237,252,268,256,0,239,261,258],
[280,282,283,277,305,290,311,0,288,274],
[258,291,259,269,278,291,289,262,0,267],
[285,292,264,281,274,278,292,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,270,268,280,266,265,269,269],
[282,0,290,289,286,289,279,288,276,256],
[271,260,0,278,271,271,272,278,265,265],
[280,261,272,0,282,271,264,267,266,268],
[282,264,279,268,0,264,266,293,278,295],
[270,261,279,279,286,0,267,279,274,279],
[284,271,278,286,284,283,0,292,288,284],
[285,262,272,283,257,271,258,0,274,266],
[281,274,285,284,272,276,262,276,0,277],
[281,294,285,282,255,271,266,284,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,269,281,258,257,277,294,286],
[283,0,284,259,276,273,283,275,283,283],
[287,266,0,277,282,280,282,276,292,268],
[281,291,273,0,285,281,283,300,292,274],
[269,274,268,265,0,261,276,297,289,280],
[292,277,270,269,289,0,281,291,282,277],
[293,267,268,267,274,269,0,288,306,293],
[273,275,274,250,253,259,262,0,290,279],
[256,267,258,258,261,268,244,260,0,264],
[264,267,282,276,270,273,257,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,277,282,279,296,274,292,247,271],
[270,0,300,290,290,280,305,297,252,265],
[273,250,0,256,275,271,262,284,240,258],
[268,260,294,0,311,285,297,307,269,281],
[271,260,275,239,0,273,262,252,240,261],
[254,270,279,265,277,0,275,280,247,281],
[276,245,288,253,288,275,0,290,276,261],
[258,253,266,243,298,270,260,0,255,281],
[303,298,310,281,310,303,274,295,0,294],
[279,285,292,269,289,269,289,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,280,253,224,280,253,241,270,278],
[296,0,296,281,237,294,294,261,311,284],
[270,254,0,249,227,303,266,280,268,265],
[297,269,301,0,242,309,264,280,283,278],
[326,313,323,308,0,341,275,281,275,319],
[270,256,247,241,209,0,268,276,252,265],
[297,256,284,286,275,282,0,275,296,332],
[309,289,270,270,269,274,275,0,263,274],
[280,239,282,267,275,298,254,287,0,285],
[272,266,285,272,231,285,218,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,237,276,263,256,247,260,280,254],
[264,0,270,265,271,285,298,256,267,260],
[313,280,0,299,279,279,294,276,280,258],
[274,285,251,0,269,272,284,258,280,293],
[287,279,271,281,0,256,305,273,283,263],
[294,265,271,278,294,0,311,277,282,283],
[303,252,256,266,245,239,0,246,266,255],
[290,294,274,292,277,273,304,0,292,283],
[270,283,270,270,267,268,284,258,0,257],
[296,290,292,257,287,267,295,267,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,263,279,264,271,281,269,270],
[273,0,271,268,290,266,273,266,276,286],
[268,279,0,253,268,275,276,270,247,295],
[287,282,297,0,300,277,306,279,267,301],
[271,260,282,250,0,282,284,294,254,283],
[286,284,275,273,268,0,296,286,249,276],
[279,277,274,244,266,254,0,282,233,263],
[269,284,280,271,256,264,268,0,254,279],
[281,274,303,283,296,301,317,296,0,296],
[280,264,255,249,267,274,287,271,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,301,296,296,271,290,290,229,308],
[222,0,230,214,226,215,256,197,204,235],
[249,320,0,289,293,253,267,246,311,312],
[254,336,261,0,248,276,266,264,279,267],
[254,324,257,302,0,226,227,264,276,275],
[279,335,297,274,324,0,299,284,331,308],
[260,294,283,284,323,251,0,240,265,321],
[260,353,304,286,286,266,310,0,277,305],
[321,346,239,271,274,219,285,273,0,296],
[242,315,238,283,275,242,229,245,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,272,263,265,252,277,252,261,268],
[289,0,290,277,281,272,302,257,269,285],
[278,260,0,264,290,254,266,279,289,269],
[287,273,286,0,293,274,285,264,273,294],
[285,269,260,257,0,266,281,265,270,253],
[298,278,296,276,284,0,296,262,301,299],
[273,248,284,265,269,254,0,274,254,258],
[298,293,271,286,285,288,276,0,280,286],
[289,281,261,277,280,249,296,270,0,274],
[282,265,281,256,297,251,292,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,264,273,276,264,257,275,284],
[281,0,250,270,257,277,276,264,262,268],
[287,300,0,283,304,276,285,273,290,288],
[286,280,267,0,281,291,267,263,274,274],
[277,293,246,269,0,277,273,258,268,279],
[274,273,274,259,273,0,264,259,285,291],
[286,274,265,283,277,286,0,279,278,295],
[293,286,277,287,292,291,271,0,305,299],
[275,288,260,276,282,265,272,245,0,291],
[266,282,262,276,271,259,255,251,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,299,289,266,302,250,266,285,248],
[284,0,295,278,274,299,271,286,295,272],
[251,255,0,258,239,259,238,250,273,261],
[261,272,292,0,263,265,260,271,271,275],
[284,276,311,287,0,298,262,285,304,272],
[248,251,291,285,252,0,271,269,276,271],
[300,279,312,290,288,279,0,256,281,240],
[284,264,300,279,265,281,294,0,285,265],
[265,255,277,279,246,274,269,265,0,263],
[302,278,289,275,278,279,310,285,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,278,249,238,258,278,259,267,249],
[298,0,307,274,242,262,260,262,273,254],
[272,243,0,240,267,259,257,248,280,253],
[301,276,310,0,270,284,266,288,315,271],
[312,308,283,280,0,264,266,280,290,258],
[292,288,291,266,286,0,288,277,295,259],
[272,290,293,284,284,262,0,257,287,277],
[291,288,302,262,270,273,293,0,273,247],
[283,277,270,235,260,255,263,277,0,246],
[301,296,297,279,292,291,273,303,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,264,276,273,275,278,284,281,286],
[257,0,266,258,269,270,263,276,261,257],
[286,284,0,277,275,271,291,275,276,290],
[274,292,273,0,281,266,285,288,278,286],
[277,281,275,269,0,276,277,285,276,275],
[275,280,279,284,274,0,276,290,293,261],
[272,287,259,265,273,274,0,274,273,247],
[266,274,275,262,265,260,276,0,254,266],
[269,289,274,272,274,257,277,296,0,274],
[264,293,260,264,275,289,303,284,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,276,276,270,270,282,272,292,282],
[284,0,271,254,273,264,279,252,283,285],
[274,279,0,276,283,269,276,255,302,283],
[274,296,274,0,290,269,292,269,285,292],
[280,277,267,260,0,275,274,257,274,280],
[280,286,281,281,275,0,301,284,284,280],
[268,271,274,258,276,249,0,276,273,260],
[278,298,295,281,293,266,274,0,296,294],
[258,267,248,265,276,266,277,254,0,268],
[268,265,267,258,270,270,290,256,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,264,261,273,278,285,271,252,274],
[281,0,277,270,288,287,285,281,277,291],
[286,273,0,261,277,272,283,276,271,285],
[289,280,289,0,289,280,280,290,264,271],
[277,262,273,261,0,287,290,287,257,297],
[272,263,278,270,263,0,290,283,251,287],
[265,265,267,270,260,260,0,271,256,261],
[279,269,274,260,263,267,279,0,252,271],
[298,273,279,286,293,299,294,298,0,304],
[276,259,265,279,253,263,289,279,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,302,267,284,289,244,255,266,256],
[284,0,292,268,292,314,278,257,244,271],
[248,258,0,249,280,278,254,231,254,238],
[283,282,301,0,285,295,274,283,296,274],
[266,258,270,265,0,275,252,261,255,284],
[261,236,272,255,275,0,247,255,248,242],
[306,272,296,276,298,303,0,267,290,276],
[295,293,319,267,289,295,283,0,268,269],
[284,306,296,254,295,302,260,282,0,277],
[294,279,312,276,266,308,274,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,282,270,261,323,301,318,288,251],
[272,0,281,242,290,237,248,282,272,260],
[268,269,0,254,217,265,266,228,211,250],
[280,308,296,0,293,322,308,261,272,266],
[289,260,333,257,0,336,289,328,273,304],
[227,313,285,228,214,0,247,277,256,212],
[249,302,284,242,261,303,0,299,272,264],
[232,268,322,289,222,273,251,0,281,271],
[262,278,339,278,277,294,278,269,0,235],
[299,290,300,284,246,338,286,279,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,285,262,270,269,282,253,256,269],
[269,0,248,244,255,269,282,258,267,273],
[265,302,0,277,279,289,284,281,292,282],
[288,306,273,0,278,254,292,288,287,286],
[280,295,271,272,0,292,287,281,296,290],
[281,281,261,296,258,0,304,257,265,276],
[268,268,266,258,263,246,0,265,278,254],
[297,292,269,262,269,293,285,0,275,277],
[294,283,258,263,254,285,272,275,0,288],
[281,277,268,264,260,274,296,273,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,268,266,257,273,277,255,274,258],
[324,0,281,286,275,286,305,277,295,282],
[282,269,0,282,277,275,288,285,290,273],
[284,264,268,0,265,276,286,264,292,258],
[293,275,273,285,0,291,306,284,293,267],
[277,264,275,274,259,0,272,271,282,258],
[273,245,262,264,244,278,0,260,279,254],
[295,273,265,286,266,279,290,0,295,259],
[276,255,260,258,257,268,271,255,0,267],
[292,268,277,292,283,292,296,291,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,256,265,267,261,268,253,259,255],
[283,0,265,299,292,274,288,271,299,261],
[294,285,0,270,301,273,282,276,281,249],
[285,251,280,0,292,267,264,265,263,260],
[283,258,249,258,0,229,258,241,261,234],
[289,276,277,283,321,0,289,259,280,290],
[282,262,268,286,292,261,0,245,286,243],
[297,279,274,285,309,291,305,0,288,266],
[291,251,269,287,289,270,264,262,0,266],
[295,289,301,290,316,260,307,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,276,273,278,293,277,270,274],
[262,0,284,261,260,285,275,265,286,259],
[276,266,0,267,277,291,266,289,290,260],
[274,289,283,0,268,281,273,265,285,257],
[277,290,273,282,0,274,277,291,286,293],
[272,265,259,269,276,0,265,282,277,263],
[257,275,284,277,273,285,0,261,268,266],
[273,285,261,285,259,268,289,0,268,261],
[280,264,260,265,264,273,282,282,0,271],
[276,291,290,293,257,287,284,289,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,260,281,268,276,296,277,261],
[281,0,275,270,315,291,282,311,289,274],
[283,275,0,289,304,289,263,316,288,287],
[290,280,261,0,288,287,299,312,302,285],
[269,235,246,262,0,260,259,296,253,250],
[282,259,261,263,290,0,289,300,296,282],
[274,268,287,251,291,261,0,303,298,264],
[254,239,234,238,254,250,247,0,261,267],
[273,261,262,248,297,254,252,289,0,269],
[289,276,263,265,300,268,286,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,279,289,294,289,306,273,276,306],
[266,0,251,250,267,259,282,249,244,250],
[271,299,0,295,292,291,296,270,281,278],
[261,300,255,0,299,266,297,283,277,278],
[256,283,258,251,0,273,292,258,262,282],
[261,291,259,284,277,0,307,276,270,289],
[244,268,254,253,258,243,0,258,255,268],
[277,301,280,267,292,274,292,0,291,313],
[274,306,269,273,288,280,295,259,0,282],
[244,300,272,272,268,261,282,237,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,260,266,211,316,265,236,263,205],
[240,0,186,292,211,292,190,263,236,235],
[290,364,0,368,264,395,317,342,395,310],
[284,258,182,0,231,286,259,311,338,257],
[339,339,286,319,0,338,292,286,339,231],
[234,258,155,264,212,0,238,289,266,204],
[285,360,233,291,258,312,0,289,338,230],
[314,287,208,239,264,261,261,0,316,176],
[287,314,155,212,211,284,212,234,0,310],
[345,315,240,293,319,346,320,374,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,295,283,260,273,304,274,269],
[276,0,307,272,303,288,279,285,276,252],
[267,243,0,282,270,283,286,269,268,271],
[255,278,268,0,256,272,276,270,287,249],
[267,247,280,294,0,262,292,289,269,282],
[290,262,267,278,288,0,271,288,256,264],
[277,271,264,274,258,279,0,273,268,278],
[246,265,281,280,261,262,277,0,275,277],
[276,274,282,263,281,294,282,275,0,286],
[281,298,279,301,268,286,272,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,306,274,306,245,337,368,337,303],
[215,0,338,216,155,217,185,215,245,245],
[244,212,0,244,183,215,276,244,307,242],
[276,334,306,0,336,276,277,306,307,273],
[244,395,367,214,0,274,367,304,368,274],
[305,333,335,274,276,0,367,306,336,305],
[213,365,274,273,183,183,0,275,273,305],
[182,335,306,244,246,244,275,0,276,183],
[213,305,243,243,182,214,277,274,0,274],
[247,305,308,277,276,245,245,367,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,293,275,280,285,278,279,266],
[276,0,272,289,276,291,279,286,280,277],
[287,278,0,275,250,260,276,272,277,267],
[257,261,275,0,268,277,284,268,275,273],
[275,274,300,282,0,289,287,286,293,285],
[270,259,290,273,261,0,273,275,275,271],
[265,271,274,266,263,277,0,281,268,280],
[272,264,278,282,264,275,269,0,290,278],
[271,270,273,275,257,275,282,260,0,277],
[284,273,283,277,265,279,270,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,286,278,279,308,294,274,291,274],
[252,0,290,247,268,267,244,253,290,264],
[264,260,0,261,260,282,267,241,273,265],
[272,303,289,0,282,290,276,272,273,281],
[271,282,290,268,0,302,268,285,277,273],
[242,283,268,260,248,0,261,245,261,264],
[256,306,283,274,282,289,0,268,281,273],
[276,297,309,278,265,305,282,0,278,289],
[259,260,277,277,273,289,269,272,0,262],
[276,286,285,269,277,286,277,261,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,254,279,269,271,243,274,286],
[288,0,310,286,296,277,262,257,272,294],
[260,240,0,272,288,259,266,253,275,300],
[296,264,278,0,290,282,283,256,258,275],
[271,254,262,260,0,272,264,232,283,273],
[281,273,291,268,278,0,258,239,286,275],
[279,288,284,267,286,292,0,257,252,283],
[307,293,297,294,318,311,293,0,274,311],
[276,278,275,292,267,264,298,276,0,285],
[264,256,250,275,277,275,267,239,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,263,263,267,249,295,267,263,278],
[295,0,255,255,308,273,269,275,253,276],
[287,295,0,270,278,267,298,279,285,307],
[287,295,280,0,301,295,292,246,271,294],
[283,242,272,249,0,257,261,242,238,301],
[301,277,283,255,293,0,299,301,291,321],
[255,281,252,258,289,251,0,269,252,286],
[283,275,271,304,308,249,281,0,281,307],
[287,297,265,279,312,259,298,269,0,311],
[272,274,243,256,249,229,264,243,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,172,273,273,313,139,309,275,245,240],
[378,0,274,343,345,240,306,308,309,238],
[277,276,0,277,279,172,341,311,381,310],
[277,207,273,0,244,104,239,377,279,203],
[237,205,271,306,0,206,305,306,345,203],
[411,310,378,446,344,0,377,446,382,238],
[241,244,209,311,245,173,0,243,313,240],
[275,242,239,173,244,104,307,0,312,205],
[305,241,169,271,205,168,237,238,0,203],
[310,312,240,347,347,312,310,345,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,195,195,197,196,236,237,155,195,157],
[355,0,274,273,233,351,352,156,233,274],
[355,276,0,275,314,276,355,236,274,315],
[353,277,275,0,236,355,315,234,196,237],
[354,317,236,314,0,314,355,313,236,197],
[314,199,274,195,236,0,316,194,157,198],
[313,198,195,235,195,234,0,155,117,118],
[395,394,314,316,237,356,395,0,354,355],
[355,317,276,354,314,393,433,196,0,355],
[393,276,235,313,353,352,432,195,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,273,298,267,284,256,247,265],
[279,0,254,266,293,277,284,278,258,263],
[274,296,0,249,288,273,284,283,259,270],
[277,284,301,0,304,291,288,256,280,274],
[252,257,262,246,0,254,259,272,248,225],
[283,273,277,259,296,0,276,285,283,286],
[266,266,266,262,291,274,0,261,260,281],
[294,272,267,294,278,265,289,0,261,284],
[303,292,291,270,302,267,290,289,0,282],
[285,287,280,276,325,264,269,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,251,263,245,235,271,247,265,295],
[303,0,290,282,258,276,261,259,293,302],
[299,260,0,286,254,253,257,267,319,296],
[287,268,264,0,257,240,272,304,279,273],
[305,292,296,293,0,243,287,311,295,297],
[315,274,297,310,307,0,282,278,252,315],
[279,289,293,278,263,268,0,263,284,271],
[303,291,283,246,239,272,287,0,260,293],
[285,257,231,271,255,298,266,290,0,272],
[255,248,254,277,253,235,279,257,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,284,259,255,273,268,264,277,281],
[281,0,279,280,267,262,270,269,282,288],
[266,271,0,266,270,273,272,274,271,310],
[291,270,284,0,276,274,274,279,286,295],
[295,283,280,274,0,285,273,283,276,279],
[277,288,277,276,265,0,279,276,284,300],
[282,280,278,276,277,271,0,280,291,295],
[286,281,276,271,267,274,270,0,279,287],
[273,268,279,264,274,266,259,271,0,298],
[269,262,240,255,271,250,255,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,280,292,293,292,277,275,299,288],
[266,0,281,314,303,276,286,284,280,289],
[270,269,0,290,255,277,272,280,294,272],
[258,236,260,0,262,263,257,257,261,274],
[257,247,295,288,0,274,263,292,265,290],
[258,274,273,287,276,0,260,271,269,259],
[273,264,278,293,287,290,0,278,280,271],
[275,266,270,293,258,279,272,0,271,300],
[251,270,256,289,285,281,270,279,0,272],
[262,261,278,276,260,291,279,250,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,264,259,254,255,268,275,281,264],
[309,0,297,293,294,297,296,283,284,268],
[286,253,0,285,258,281,290,266,275,279],
[291,257,265,0,276,284,291,266,301,260],
[296,256,292,274,0,278,289,302,282,280],
[295,253,269,266,272,0,276,298,286,272],
[282,254,260,259,261,274,0,265,270,274],
[275,267,284,284,248,252,285,0,290,264],
[269,266,275,249,268,264,280,260,0,259],
[286,282,271,290,270,278,276,286,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,277,273,272,296,301,275,271,263],
[258,0,249,269,273,292,275,283,263,285],
[273,301,0,275,270,295,271,286,293,296],
[277,281,275,0,283,309,288,287,275,262],
[278,277,280,267,0,296,269,280,261,267],
[254,258,255,241,254,0,267,280,270,272],
[249,275,279,262,281,283,0,253,303,268],
[275,267,264,263,270,270,297,0,306,267],
[279,287,257,275,289,280,247,244,0,256],
[287,265,254,288,283,278,282,283,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,282,294,271,262,272,270,260,258],
[251,0,265,264,266,257,242,254,247,242],
[268,285,0,291,270,257,282,250,255,249],
[256,286,259,0,268,258,257,272,251,253],
[279,284,280,282,0,289,281,284,251,273],
[288,293,293,292,261,0,289,275,275,272],
[278,308,268,293,269,261,0,269,263,273],
[280,296,300,278,266,275,281,0,273,276],
[290,303,295,299,299,275,287,277,0,289],
[292,308,301,297,277,278,277,274,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,282,275,301,269,319,289,300,268],
[269,0,230,233,254,212,256,271,236,233],
[268,320,0,268,247,297,285,310,303,287],
[275,317,282,0,313,273,277,266,323,296],
[249,296,303,237,0,258,276,293,276,282],
[281,338,253,277,292,0,274,268,273,294],
[231,294,265,273,274,276,0,260,267,272],
[261,279,240,284,257,282,290,0,312,292],
[250,314,247,227,274,277,283,238,0,271],
[282,317,263,254,268,256,278,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,282,300,286,300,271,285,283,268],
[249,0,239,279,250,257,266,257,237,255],
[268,311,0,291,284,277,271,275,276,280],
[250,271,259,0,255,258,249,268,269,269],
[264,300,266,295,0,292,270,260,270,269],
[250,293,273,292,258,0,256,284,280,273],
[279,284,279,301,280,294,0,309,271,290],
[265,293,275,282,290,266,241,0,285,263],
[267,313,274,281,280,270,279,265,0,260],
[282,295,270,281,281,277,260,287,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,232,215,240,224,274,252,286,237],
[271,0,228,229,257,237,299,220,261,210],
[318,322,0,237,272,247,315,308,256,256],
[335,321,313,0,295,296,326,302,315,274],
[310,293,278,255,0,249,301,297,272,259],
[326,313,303,254,301,0,320,295,299,282],
[276,251,235,224,249,230,0,239,265,229],
[298,330,242,248,253,255,311,0,255,246],
[264,289,294,235,278,251,285,295,0,241],
[313,340,294,276,291,268,321,304,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,262,294,261,284,269,240,271,288],
[249,0,264,250,241,290,297,257,248,275],
[288,286,0,248,263,287,270,269,269,307],
[256,300,302,0,258,282,286,269,264,289],
[289,309,287,292,0,286,297,273,302,307],
[266,260,263,268,264,0,309,253,256,270],
[281,253,280,264,253,241,0,278,260,279],
[310,293,281,281,277,297,272,0,269,304],
[279,302,281,286,248,294,290,281,0,297],
[262,275,243,261,243,280,271,246,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,244,264,258,263,243,259,248,238],
[302,0,290,298,289,275,272,284,293,291],
[306,260,0,288,267,275,262,280,280,286],
[286,252,262,0,245,243,240,234,268,237],
[292,261,283,305,0,273,257,284,289,289],
[287,275,275,307,277,0,275,285,276,278],
[307,278,288,310,293,275,0,282,310,283],
[291,266,270,316,266,265,268,0,274,266],
[302,257,270,282,261,274,240,276,0,267],
[312,259,264,313,261,272,267,284,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,280,274,255,278,285,265,299,298],
[268,0,275,277,267,276,283,274,271,290],
[270,275,0,265,255,273,269,260,285,283],
[276,273,285,0,283,272,288,277,286,286],
[295,283,295,267,0,288,288,290,301,293],
[272,274,277,278,262,0,275,266,275,290],
[265,267,281,262,262,275,0,264,265,275],
[285,276,290,273,260,284,286,0,278,280],
[251,279,265,264,249,275,285,272,0,269],
[252,260,267,264,257,260,275,270,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,378,309,348,310,411,310,343,343,242],
[172,0,341,311,309,377,310,240,276,206],
[241,209,0,313,241,309,276,278,241,207],
[202,239,237,0,170,238,307,273,274,203],
[240,241,309,380,0,309,274,309,274,343],
[139,173,241,312,241,0,277,242,208,207],
[240,240,274,243,276,273,0,275,310,205],
[207,310,272,277,241,308,275,0,241,207],
[207,274,309,276,276,342,240,309,0,273],
[308,344,343,347,207,343,345,343,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,432,510,356,275,315,353,315,355,275],
[118,0,275,198,158,80,235,235,200,276],
[40,275,0,198,80,118,276,235,198,118],
[194,352,352,0,234,235,312,313,392,312],
[275,392,470,316,0,275,353,432,393,353],
[235,470,432,315,275,0,393,274,276,352],
[197,315,274,238,197,157,0,236,237,158],
[235,315,315,237,118,276,314,0,276,277],
[195,350,352,158,157,274,313,274,0,235],
[275,274,432,238,197,198,392,273,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,262,265,272,253,295,290,263,285],
[290,0,262,254,281,259,301,280,271,272],
[288,288,0,286,277,265,304,290,283,282],
[285,296,264,0,300,272,302,295,284,290],
[278,269,273,250,0,252,291,263,269,262],
[297,291,285,278,298,0,305,270,266,276],
[255,249,246,248,259,245,0,261,259,257],
[260,270,260,255,287,280,289,0,261,280],
[287,279,267,266,281,284,291,289,0,283],
[265,278,268,260,288,274,293,270,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,273,261,278,256,269,258,291],
[293,0,284,296,278,275,282,288,276,304],
[284,266,0,278,257,257,259,258,264,289],
[277,254,272,0,253,266,271,254,249,288],
[289,272,293,297,0,283,287,285,286,297],
[272,275,293,284,267,0,276,287,288,292],
[294,268,291,279,263,274,0,295,283,286],
[281,262,292,296,265,263,255,0,275,273],
[292,274,286,301,264,262,267,275,0,275],
[259,246,261,262,253,258,264,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,249,260,280,272,258,261,246,260],
[303,0,258,274,289,281,266,266,289,282],
[301,292,0,289,304,291,296,273,298,300],
[290,276,261,0,301,289,264,278,280,284],
[270,261,246,249,0,269,262,261,256,262],
[278,269,259,261,281,0,259,265,268,271],
[292,284,254,286,288,291,0,267,280,276],
[289,284,277,272,289,285,283,0,270,277],
[304,261,252,270,294,282,270,280,0,279],
[290,268,250,266,288,279,274,273,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,265,281,272,268,272,271,274,278],
[275,0,277,289,278,271,291,275,287,274],
[285,273,0,287,271,284,284,276,289,287],
[269,261,263,0,282,291,282,275,279,288],
[278,272,279,268,0,295,282,290,279,304],
[282,279,266,259,255,0,272,265,274,266],
[278,259,266,268,268,278,0,283,270,269],
[279,275,274,275,260,285,267,0,281,277],
[276,263,261,271,271,276,280,269,0,274],
[272,276,263,262,246,284,281,273,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,260,253,279,269,275,281,287],
[287,0,275,289,265,285,298,278,298,247],
[295,275,0,273,240,293,289,279,299,264],
[290,261,277,0,280,302,278,296,291,277],
[297,285,310,270,0,316,285,309,295,288],
[271,265,257,248,234,0,276,270,279,258],
[281,252,261,272,265,274,0,285,292,274],
[275,272,271,254,241,280,265,0,298,269],
[269,252,251,259,255,271,258,252,0,231],
[263,303,286,273,262,292,276,281,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,273,266,270,284,274,285,269,266],
[226,0,245,227,263,256,248,261,247,253],
[277,305,0,283,282,280,278,274,286,261],
[284,323,267,0,315,300,290,293,290,301],
[280,287,268,235,0,285,266,281,263,238],
[266,294,270,250,265,0,268,275,278,267],
[276,302,272,260,284,282,0,262,270,264],
[265,289,276,257,269,275,288,0,268,267],
[281,303,264,260,287,272,280,282,0,264],
[284,297,289,249,312,283,286,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,305,296,273,273,284,292,286],
[273,0,295,299,300,271,291,295,284,279],
[268,255,0,275,286,252,267,258,260,249],
[245,251,275,0,287,257,274,267,273,275],
[254,250,264,263,0,249,271,266,261,254],
[277,279,298,293,301,0,284,276,268,284],
[277,259,283,276,279,266,0,282,269,285],
[266,255,292,283,284,274,268,0,275,267],
[258,266,290,277,289,282,281,275,0,282],
[264,271,301,275,296,266,265,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,287,279,285,289,284,275,274],
[258,0,255,271,281,265,272,289,269,256],
[261,295,0,277,284,285,293,272,264,270],
[263,279,273,0,269,260,274,279,255,270],
[271,269,266,281,0,275,268,277,255,251],
[265,285,265,290,275,0,283,271,269,268],
[261,278,257,276,282,267,0,277,270,271],
[266,261,278,271,273,279,273,0,261,266],
[275,281,286,295,295,281,280,289,0,287],
[276,294,280,280,299,282,279,284,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,251,263,254,279,272,274,262,266],
[278,0,278,308,261,275,274,284,288,267],
[299,272,0,262,263,263,267,262,272,257],
[287,242,288,0,267,282,269,274,260,275],
[296,289,287,283,0,279,285,290,272,289],
[271,275,287,268,271,0,282,284,255,296],
[278,276,283,281,265,268,0,269,276,277],
[276,266,288,276,260,266,281,0,279,281],
[288,262,278,290,278,295,274,271,0,289],
[284,283,293,275,261,254,273,269,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,293,278,283,266,272,270,298,267],
[284,0,298,280,279,256,272,273,276,284],
[257,252,0,256,262,251,249,248,276,247],
[272,270,294,0,283,257,273,274,281,257],
[267,271,288,267,0,267,278,279,290,265],
[284,294,299,293,283,0,264,277,298,283],
[278,278,301,277,272,286,0,279,290,282],
[280,277,302,276,271,273,271,0,292,248],
[252,274,274,269,260,252,260,258,0,260],
[283,266,303,293,285,267,268,302,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,282,269,245,310,301,264,265],
[282,0,267,259,285,265,307,297,257,286],
[263,283,0,278,271,253,294,295,300,276],
[268,291,272,0,278,292,305,308,292,275],
[281,265,279,272,0,263,279,279,279,316],
[305,285,297,258,287,0,280,293,286,282],
[240,243,256,245,271,270,0,272,264,274],
[249,253,255,242,271,257,278,0,260,278],
[286,293,250,258,271,264,286,290,0,284],
[285,264,274,275,234,268,276,272,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,265,301,286,281,291,290,275],
[272,0,290,276,290,298,310,291,277,289],
[269,260,0,242,252,274,270,278,274,251],
[285,274,308,0,302,306,294,305,302,296],
[249,260,298,248,0,283,278,281,274,272],
[264,252,276,244,267,0,259,267,257,250],
[269,240,280,256,272,291,0,286,277,266],
[259,259,272,245,269,283,264,0,284,266],
[260,273,276,248,276,293,273,266,0,278],
[275,261,299,254,278,300,284,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,275,270,280,298,259,285,292,282],
[257,0,265,267,268,274,276,273,288,272],
[275,285,0,280,284,289,283,294,315,285],
[280,283,270,0,280,268,270,268,294,277],
[270,282,266,270,0,270,261,292,292,283],
[252,276,261,282,280,0,260,276,289,275],
[291,274,267,280,289,290,0,280,301,279],
[265,277,256,282,258,274,270,0,290,272],
[258,262,235,256,258,261,249,260,0,266],
[268,278,265,273,267,275,271,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,272,298,283,266,260,276,275,309],
[235,0,236,287,260,248,242,249,246,285],
[278,314,0,318,301,273,270,283,284,303],
[252,263,232,0,249,241,270,270,263,297],
[267,290,249,301,0,250,260,269,259,286],
[284,302,277,309,300,0,269,278,280,329],
[290,308,280,280,290,281,0,271,248,290],
[274,301,267,280,281,272,279,0,274,303],
[275,304,266,287,291,270,302,276,0,320],
[241,265,247,253,264,221,260,247,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,199,301,301,271,292,267,282,290],
[241,0,275,317,325,270,290,229,239,261],
[351,275,0,315,308,267,314,268,246,303],
[249,233,235,0,255,233,235,191,236,244],
[249,225,242,295,0,249,270,223,182,281],
[279,280,283,317,301,0,272,245,288,300],
[258,260,236,315,280,278,0,201,245,245],
[283,321,282,359,327,305,349,0,272,289],
[268,311,304,314,368,262,305,278,0,298],
[260,289,247,306,269,250,305,261,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,269,282,245,247,282,268,245,264],
[309,0,288,298,275,286,294,295,278,292],
[281,262,0,289,275,264,278,276,267,280],
[268,252,261,0,238,262,267,271,258,259],
[305,275,275,312,0,280,291,301,273,294],
[303,264,286,288,270,0,288,286,263,281],
[268,256,272,283,259,262,0,280,270,276],
[282,255,274,279,249,264,270,0,268,269],
[305,272,283,292,277,287,280,282,0,276],
[286,258,270,291,256,269,274,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,327,247,239,228,209,237,276,285],
[224,0,296,222,267,209,278,236,248,270],
[223,254,0,178,265,222,192,194,219,265],
[303,328,372,0,287,314,322,313,255,302],
[311,283,285,263,0,295,279,236,222,254],
[322,341,328,236,255,0,295,265,297,327],
[341,272,358,228,271,255,0,255,282,329],
[313,314,356,237,314,285,295,0,250,327],
[274,302,331,295,328,253,268,300,0,356],
[265,280,285,248,296,223,221,223,194,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,265,263,271,277,267,264,266,269],
[282,0,261,273,277,278,279,302,286,261],
[285,289,0,288,288,276,266,315,291,260],
[287,277,262,0,295,262,247,283,286,242],
[279,273,262,255,0,266,271,291,290,269],
[273,272,274,288,284,0,270,298,285,259],
[283,271,284,303,279,280,0,307,318,288],
[286,248,235,267,259,252,243,0,270,262],
[284,264,259,264,260,265,232,280,0,257],
[281,289,290,308,281,291,262,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,308,339,245,184,273,248,401,215],
[245,0,306,305,306,214,272,244,336,182],
[242,244,0,337,336,214,272,276,337,214],
[211,245,213,0,213,242,180,215,303,184],
[305,244,214,337,0,304,272,245,306,244],
[366,336,336,308,246,0,301,306,307,337],
[277,278,278,370,278,249,0,248,341,310],
[302,306,274,335,305,244,302,0,335,214],
[149,214,213,247,244,243,209,215,0,185],
[335,368,336,366,306,213,240,336,365,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,279,267,272,264,283,289,264],
[278,0,265,262,262,239,265,252,274,257],
[268,285,0,278,254,264,256,263,272,271],
[271,288,272,0,263,264,264,278,289,273],
[283,288,296,287,0,260,272,267,299,276],
[278,311,286,286,290,0,272,270,294,262],
[286,285,294,286,278,278,0,271,293,284],
[267,298,287,272,283,280,279,0,283,260],
[261,276,278,261,251,256,257,267,0,266],
[286,293,279,277,274,288,266,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,284,262,272,269,272,260,240,276],
[278,0,287,278,266,268,263,236,247,249],
[266,263,0,272,269,255,262,250,263,244],
[288,272,278,0,273,267,259,255,253,264],
[278,284,281,277,0,280,268,260,257,247],
[281,282,295,283,270,0,278,275,263,274],
[278,287,288,291,282,272,0,241,263,282],
[290,314,300,295,290,275,309,0,274,268],
[310,303,287,297,293,287,287,276,0,274],
[274,301,306,286,303,276,268,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,264,276,252,238,273,259,270,259],
[267,0,269,276,276,279,258,252,269,249],
[286,281,0,255,283,263,259,257,252,260],
[274,274,295,0,297,280,277,271,277,240],
[298,274,267,253,0,274,259,245,250,259],
[312,271,287,270,276,0,261,270,274,245],
[277,292,291,273,291,289,0,253,248,268],
[291,298,293,279,305,280,297,0,253,275],
[280,281,298,273,300,276,302,297,0,296],
[291,301,290,310,291,305,282,275,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,265,266,254,277,283,286,263],
[274,0,278,267,259,281,274,276,282,273],
[271,272,0,267,262,271,272,265,265,274],
[285,283,283,0,280,269,286,285,272,272],
[284,291,288,270,0,290,279,275,279,247],
[296,269,279,281,260,0,278,281,276,267],
[273,276,278,264,271,272,0,267,259,277],
[267,274,285,265,275,269,283,0,274,258],
[264,268,285,278,271,274,291,276,0,269],
[287,277,276,278,303,283,273,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,278,256,251,259,282,267,274,282],
[297,0,279,271,274,270,301,263,267,289],
[272,271,0,269,266,268,264,256,272,276],
[294,279,281,0,263,260,274,269,269,283],
[299,276,284,287,0,301,291,277,273,289],
[291,280,282,290,249,0,275,272,267,266],
[268,249,286,276,259,275,0,260,255,283],
[283,287,294,281,273,278,290,0,295,283],
[276,283,278,281,277,283,295,255,0,281],
[268,261,274,267,261,284,267,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,290,315,295,264,280,283,302],
[272,0,279,293,278,271,265,262,253,256],
[277,271,0,286,274,248,264,258,262,260],
[260,257,264,0,295,264,263,248,260,265],
[235,272,276,255,0,270,242,242,255,266],
[255,279,302,286,280,0,259,264,244,293],
[286,285,286,287,308,291,0,277,279,269],
[270,288,292,302,308,286,273,0,269,288],
[267,297,288,290,295,306,271,281,0,268],
[248,294,290,285,284,257,281,262,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,310,270,317,265,325,285,306,288],
[251,0,286,298,318,266,350,306,282,286],
[240,264,0,270,294,260,298,276,266,258],
[280,252,280,0,293,272,323,299,303,279],
[233,232,256,257,0,246,261,265,260,240],
[285,284,290,278,304,0,300,279,284,274],
[225,200,252,227,289,250,0,236,230,240],
[265,244,274,251,285,271,314,0,268,274],
[244,268,284,247,290,266,320,282,0,233],
[262,264,292,271,310,276,310,276,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,290,275,308,264,248,240,279,294],
[246,0,268,241,286,243,257,236,289,250],
[260,282,0,257,291,253,260,252,274,271],
[275,309,293,0,285,262,240,250,270,282],
[242,264,259,265,0,263,253,256,272,265],
[286,307,297,288,287,0,301,261,279,277],
[302,293,290,310,297,249,0,281,280,284],
[310,314,298,300,294,289,269,0,288,314],
[271,261,276,280,278,271,270,262,0,270],
[256,300,279,268,285,273,266,236,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,201,245,243,231,232,247,226,243],
[286,0,256,284,238,261,267,253,256,278],
[349,294,0,320,305,265,318,253,317,290],
[305,266,230,0,280,286,289,259,269,254],
[307,312,245,270,0,250,257,252,263,258],
[319,289,285,264,300,0,325,258,277,325],
[318,283,232,261,293,225,0,272,247,251],
[303,297,297,291,298,292,278,0,269,326],
[324,294,233,281,287,273,303,281,0,307],
[307,272,260,296,292,225,299,224,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,264,260,262,261,256,247,278,268],
[279,0,263,262,271,279,281,251,285,270],
[286,287,0,266,277,288,288,264,292,281],
[290,288,284,0,294,293,287,271,292,281],
[288,279,273,256,0,282,276,264,281,266],
[289,271,262,257,268,0,277,265,284,260],
[294,269,262,263,274,273,0,264,286,276],
[303,299,286,279,286,285,286,0,288,266],
[272,265,258,258,269,266,264,262,0,250],
[282,280,269,269,284,290,274,284,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,258,246,250,282,259,265,268,265],
[286,0,259,262,263,273,264,271,271,256],
[292,291,0,261,275,299,274,293,269,266],
[304,288,289,0,267,298,275,297,265,279],
[300,287,275,283,0,297,289,293,281,277],
[268,277,251,252,253,0,259,268,253,241],
[291,286,276,275,261,291,0,292,281,282],
[285,279,257,253,257,282,258,0,254,251],
[282,279,281,285,269,297,269,296,0,262],
[285,294,284,271,273,309,268,299,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,283,290,282,304,262,312,291],
[274,0,282,290,304,292,286,278,311,285],
[272,268,0,284,277,273,281,267,276,267],
[267,260,266,0,282,270,271,263,277,264],
[260,246,273,268,0,269,274,280,299,277],
[268,258,277,280,281,0,265,275,281,254],
[246,264,269,279,276,285,0,265,294,261],
[288,272,283,287,270,275,285,0,289,275],
[238,239,274,273,251,269,256,261,0,264],
[259,265,283,286,273,296,289,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,239,241,246,284,241,227,256,250],
[294,0,260,261,222,292,261,263,275,259],
[311,290,0,246,270,259,253,258,256,239],
[309,289,304,0,265,297,267,279,282,284],
[304,328,280,285,0,293,289,274,284,279],
[266,258,291,253,257,0,233,289,245,260],
[309,289,297,283,261,317,0,307,297,278],
[323,287,292,271,276,261,243,0,295,282],
[294,275,294,268,266,305,253,255,0,253],
[300,291,311,266,271,290,272,268,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,263,239,258,258,304,268,272,250],
[270,0,278,255,274,262,281,241,268,255],
[287,272,0,227,275,255,261,264,280,250],
[311,295,323,0,263,274,296,298,307,299],
[292,276,275,287,0,251,289,265,286,276],
[292,288,295,276,299,0,280,312,301,271],
[246,269,289,254,261,270,0,265,260,252],
[282,309,286,252,285,238,285,0,271,261],
[278,282,270,243,264,249,290,279,0,260],
[300,295,300,251,274,279,298,289,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,255,283,272,253,286,263,270,278],
[260,0,258,262,263,250,295,246,253,269],
[295,292,0,309,302,300,297,274,274,314],
[267,288,241,0,247,228,274,242,266,250],
[278,287,248,303,0,260,302,292,273,284],
[297,300,250,322,290,0,281,288,279,289],
[264,255,253,276,248,269,0,256,248,262],
[287,304,276,308,258,262,294,0,292,285],
[280,297,276,284,277,271,302,258,0,258],
[272,281,236,300,266,261,288,265,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,311,265,263,275,313,296,290,284],
[287,0,287,273,280,270,276,312,277,272],
[239,263,0,266,254,237,261,270,260,268],
[285,277,284,0,283,242,289,279,294,293],
[287,270,296,267,0,269,270,284,290,283],
[275,280,313,308,281,0,328,302,297,304],
[237,274,289,261,280,222,0,296,289,255],
[254,238,280,271,266,248,254,0,266,269],
[260,273,290,256,260,253,261,284,0,295],
[266,278,282,257,267,246,295,281,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,183,257,221,221,148,111,184,221,147],
[367,0,367,330,366,257,256,330,293,293],
[293,183,0,331,331,147,148,184,220,257],
[329,220,219,0,218,183,221,255,184,183],
[329,184,219,332,0,111,185,184,147,221],
[402,293,403,367,439,0,331,365,257,255],
[439,294,402,329,365,219,0,292,184,256],
[366,220,366,295,366,185,258,0,258,257],
[329,257,330,366,403,293,366,292,0,255],
[403,257,293,367,329,295,294,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,282,279,274,281,269,297,297],
[268,0,286,275,260,291,269,257,277,287],
[272,264,0,280,285,276,291,274,281,270],
[268,275,270,0,290,266,269,253,286,285],
[271,290,265,260,0,279,293,263,292,305],
[276,259,274,284,271,0,299,267,273,273],
[269,281,259,281,257,251,0,275,275,272],
[281,293,276,297,287,283,275,0,261,286],
[253,273,269,264,258,277,275,289,0,285],
[253,263,280,265,245,277,278,264,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,295,275,273,252,251,249,273,282],
[298,0,316,291,260,292,256,264,282,275],
[255,234,0,258,257,264,278,247,272,264],
[275,259,292,0,271,277,271,279,286,302],
[277,290,293,279,0,294,277,265,280,276],
[298,258,286,273,256,0,258,263,281,268],
[299,294,272,279,273,292,0,267,294,289],
[301,286,303,271,285,287,283,0,283,281],
[277,268,278,264,270,269,256,267,0,294],
[268,275,286,248,274,282,261,269,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,274,257,258,285,275,278,304,255],
[272,0,294,282,259,294,269,293,308,278],
[276,256,0,299,274,301,271,279,307,244],
[293,268,251,0,267,282,262,257,308,288],
[292,291,276,283,0,276,280,267,289,248],
[265,256,249,268,274,0,255,249,271,263],
[275,281,279,288,270,295,0,259,311,278],
[272,257,271,293,283,301,291,0,318,260],
[246,242,243,242,261,279,239,232,0,240],
[295,272,306,262,302,287,272,290,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,284,273,265,279,288,272,278,272],
[264,0,275,269,270,267,277,263,278,270],
[266,275,0,261,280,263,278,264,269,281],
[277,281,289,0,285,273,277,265,271,290],
[285,280,270,265,0,258,273,269,287,266],
[271,283,287,277,292,0,272,283,278,280],
[262,273,272,273,277,278,0,280,283,281],
[278,287,286,285,281,267,270,0,277,286],
[272,272,281,279,263,272,267,273,0,265],
[278,280,269,260,284,270,269,264,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,272,251,270,289,290,267,279,276],
[256,0,261,252,281,295,276,257,281,274],
[278,289,0,267,282,286,292,285,292,279],
[299,298,283,0,304,302,285,290,274,295],
[280,269,268,246,0,263,251,251,284,282],
[261,255,264,248,287,0,280,261,273,262],
[260,274,258,265,299,270,0,262,276,284],
[283,293,265,260,299,289,288,0,287,287],
[271,269,258,276,266,277,274,263,0,270],
[274,276,271,255,268,288,266,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,261,244,274,292,256,251,274,268],
[273,0,265,263,314,280,267,284,277,283],
[289,285,0,275,322,291,259,279,282,286],
[306,287,275,0,307,289,292,287,290,299],
[276,236,228,243,0,267,237,243,270,251],
[258,270,259,261,283,0,252,271,291,251],
[294,283,291,258,313,298,0,288,283,284],
[299,266,271,263,307,279,262,0,291,269],
[276,273,268,260,280,259,267,259,0,266],
[282,267,264,251,299,299,266,281,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,236,255,292,239,272,281,269],
[280,0,268,280,273,293,248,293,284,271],
[287,282,0,268,297,300,254,302,275,277],
[314,270,282,0,288,300,283,292,286,306],
[295,277,253,262,0,279,269,267,283,265],
[258,257,250,250,271,0,225,259,289,252],
[311,302,296,267,281,325,0,311,301,316],
[278,257,248,258,283,291,239,0,267,264],
[269,266,275,264,267,261,249,283,0,248],
[281,279,273,244,285,298,234,286,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,285,301,281,278,276,272,289],
[265,0,294,293,299,301,276,316,293,286],
[255,256,0,281,298,270,253,274,283,280],
[265,257,269,0,293,278,273,276,267,272],
[249,251,252,257,0,258,254,261,261,265],
[269,249,280,272,292,0,260,294,276,273],
[272,274,297,277,296,290,0,294,285,287],
[274,234,276,274,289,256,256,0,249,267],
[278,257,267,283,289,274,265,301,0,285],
[261,264,270,278,285,277,263,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,228,284,244,277,285,263,257,277],
[310,0,311,299,291,306,297,275,298,329],
[322,239,0,283,293,298,284,258,272,308],
[266,251,267,0,286,294,270,269,250,308],
[306,259,257,264,0,297,268,265,264,302],
[273,244,252,256,253,0,251,250,260,297],
[265,253,266,280,282,299,0,266,280,304],
[287,275,292,281,285,300,284,0,282,306],
[293,252,278,300,286,290,270,268,0,295],
[273,221,242,242,248,253,246,244,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,262,261,290,249,280,256,266,268],
[296,0,286,290,273,277,284,295,309,300],
[288,264,0,235,275,261,269,268,287,276],
[289,260,315,0,284,262,306,292,296,288],
[260,277,275,266,0,252,283,267,301,282],
[301,273,289,288,298,0,301,290,300,282],
[270,266,281,244,267,249,0,266,288,264],
[294,255,282,258,283,260,284,0,279,287],
[284,241,263,254,249,250,262,271,0,258],
[282,250,274,262,268,268,286,263,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,301,288,279,284,323,330,299,287],
[294,0,296,256,278,297,331,278,310,272],
[249,254,0,244,267,281,271,271,244,273],
[262,294,306,0,286,312,343,319,317,277],
[271,272,283,264,0,307,250,273,308,269],
[266,253,269,238,243,0,280,285,277,304],
[227,219,279,207,300,270,0,263,258,242],
[220,272,279,231,277,265,287,0,252,266],
[251,240,306,233,242,273,292,298,0,272],
[263,278,277,273,281,246,308,284,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,287,286,285,282,289,271,286],
[271,0,252,271,251,264,279,282,265,246],
[267,298,0,308,276,287,293,294,275,281],
[263,279,242,0,249,243,257,283,247,253],
[264,299,274,301,0,296,289,284,267,286],
[265,286,263,307,254,0,287,294,270,293],
[268,271,257,293,261,263,0,275,280,260],
[261,268,256,267,266,256,275,0,263,265],
[279,285,275,303,283,280,270,287,0,280],
[264,304,269,297,264,257,290,285,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,294,288,268,261,258,249,255,251],
[262,0,303,246,287,231,254,276,285,293],
[256,247,0,289,277,225,218,238,211,225],
[262,304,261,0,275,245,249,273,289,240],
[282,263,273,275,0,240,303,275,298,272],
[289,319,325,305,310,0,290,268,300,294],
[292,296,332,301,247,260,0,285,262,281],
[301,274,312,277,275,282,265,0,259,311],
[295,265,339,261,252,250,288,291,0,269],
[299,257,325,310,278,256,269,239,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,277,284,256,265,282,260,283],
[282,0,294,290,297,278,282,288,259,298],
[277,256,0,265,266,271,266,280,262,292],
[273,260,285,0,275,270,265,281,277,289],
[266,253,284,275,0,275,267,286,273,292],
[294,272,279,280,275,0,258,280,270,293],
[285,268,284,285,283,292,0,299,282,300],
[268,262,270,269,264,270,251,0,255,270],
[290,291,288,273,277,280,268,295,0,292],
[267,252,258,261,258,257,250,280,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,276,281,289,274,279,261,282,287],
[272,0,271,261,263,256,244,251,280,260],
[274,279,0,271,271,274,246,259,281,270],
[269,289,279,0,278,259,251,277,276,273],
[261,287,279,272,0,267,259,268,268,259],
[276,294,276,291,283,0,269,250,298,291],
[271,306,304,299,291,281,0,282,317,301],
[289,299,291,273,282,300,268,0,292,287],
[268,270,269,274,282,252,233,258,0,272],
[263,290,280,277,291,259,249,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,289,265,281,283,281,283,278],
[265,0,265,276,260,285,258,266,280,255],
[286,285,0,289,256,279,267,282,299,267],
[261,274,261,0,268,283,254,282,260,251],
[285,290,294,282,0,291,260,289,297,259],
[269,265,271,267,259,0,252,259,279,252],
[267,292,283,296,290,298,0,293,308,246],
[269,284,268,268,261,291,257,0,264,267],
[267,270,251,290,253,271,242,286,0,246],
[272,295,283,299,291,298,304,283,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,244,268,260,264,260,265,262],
[292,0,291,258,279,298,290,269,277,298],
[282,259,0,249,262,280,278,278,275,274],
[306,292,301,0,297,297,270,264,269,276],
[282,271,288,253,0,255,283,238,276,297],
[290,252,270,253,295,0,279,278,264,287],
[286,260,272,280,267,271,0,264,249,281],
[290,281,272,286,312,272,286,0,263,293],
[285,273,275,281,274,286,301,287,0,282],
[288,252,276,274,253,263,269,257,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,290,243,301,265,261,273,295],
[275,0,269,260,261,294,285,252,290,277],
[274,281,0,271,258,300,273,276,305,298],
[260,290,279,0,276,314,277,293,287,303],
[307,289,292,274,0,295,306,296,299,281],
[249,256,250,236,255,0,246,258,261,263],
[285,265,277,273,244,304,0,278,316,307],
[289,298,274,257,254,292,272,0,276,282],
[277,260,245,263,251,289,234,274,0,276],
[255,273,252,247,269,287,243,268,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,265,282,254,266,279,279,288,275],
[268,0,275,252,264,252,246,293,253,268],
[285,275,0,255,280,258,273,287,294,299],
[268,298,295,0,284,257,295,300,260,287],
[296,286,270,266,0,275,279,277,274,294],
[284,298,292,293,275,0,268,288,265,312],
[271,304,277,255,271,282,0,275,278,286],
[271,257,263,250,273,262,275,0,295,267],
[262,297,256,290,276,285,272,255,0,263],
[275,282,251,263,256,238,264,283,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,267,269,260,259,273,261,263,282],
[303,0,299,290,290,292,298,303,269,293],
[283,251,0,271,282,270,297,258,256,272],
[281,260,279,0,270,279,281,279,274,275],
[290,260,268,280,0,285,292,267,275,268],
[291,258,280,271,265,0,289,268,279,285],
[277,252,253,269,258,261,0,257,259,262],
[289,247,292,271,283,282,293,0,259,270],
[287,281,294,276,275,271,291,291,0,284],
[268,257,278,275,282,265,288,280,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,166,275,168,329,383,328,163],
[276,0,331,219,332,276,332,332,164,274],
[275,219,0,164,328,166,219,273,328,163],
[384,331,386,0,440,330,385,440,329,220],
[275,218,222,110,0,222,331,276,272,218],
[382,274,384,220,328,0,329,383,272,218],
[221,218,331,165,219,221,0,330,272,163],
[167,218,277,110,274,167,220,0,219,163],
[222,386,222,221,278,278,278,331,0,275],
[387,276,387,330,332,332,387,387,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,289,282,275,282,288,283,297,294],
[275,0,283,282,263,279,295,285,298,299],
[261,267,0,270,270,262,286,278,285,278],
[268,268,280,0,253,282,289,281,296,276],
[275,287,280,297,0,287,278,287,288,292],
[268,271,288,268,263,0,280,272,283,276],
[262,255,264,261,272,270,0,252,279,280],
[267,265,272,269,263,278,298,0,279,276],
[253,252,265,254,262,267,271,271,0,271],
[256,251,272,274,258,274,270,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,271,295,261,282,251,292,290,314],
[230,0,256,238,248,234,239,222,258,255],
[279,294,0,202,214,266,203,267,325,291],
[255,312,348,0,263,266,313,267,290,324],
[289,302,336,287,0,316,266,318,331,311],
[268,316,284,284,234,0,252,260,248,263],
[299,311,347,237,284,298,0,301,329,309],
[258,328,283,283,232,290,249,0,322,287],
[260,292,225,260,219,302,221,228,0,243],
[236,295,259,226,239,287,241,263,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,278,286,278,312,275,281,266,291],
[287,0,283,282,279,307,281,290,264,279],
[272,267,0,275,272,294,285,270,283,280],
[264,268,275,0,283,291,284,266,267,278],
[272,271,278,267,0,279,285,272,270,282],
[238,243,256,259,271,0,262,264,264,255],
[275,269,265,266,265,288,0,258,259,293],
[269,260,280,284,278,286,292,0,276,297],
[284,286,267,283,280,286,291,274,0,292],
[259,271,270,272,268,295,257,253,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,299,316,342,301,306,264,298,252],
[262,0,261,280,282,277,280,278,254,307],
[251,289,0,313,284,274,306,265,279,281],
[234,270,237,0,287,301,269,241,296,268],
[208,268,266,263,0,256,264,284,283,274],
[249,273,276,249,294,0,299,279,262,280],
[244,270,244,281,286,251,0,259,295,260],
[286,272,285,309,266,271,291,0,283,278],
[252,296,271,254,267,288,255,267,0,313],
[298,243,269,282,276,270,290,272,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,258,252,293,292,293,281,263],
[283,0,303,247,278,290,277,310,268,273],
[272,247,0,264,260,266,264,289,267,256],
[292,303,286,0,272,310,282,295,273,289],
[298,272,290,278,0,255,274,299,278,281],
[257,260,284,240,295,0,284,265,277,260],
[258,273,286,268,276,266,0,304,294,283],
[257,240,261,255,251,285,246,0,226,259],
[269,282,283,277,272,273,256,324,0,269],
[287,277,294,261,269,290,267,291,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,306,305,311,304,308,302,275,293],
[295,0,273,284,310,281,298,253,248,284],
[244,277,0,293,300,295,329,275,284,313],
[245,266,257,0,286,282,283,258,253,290],
[239,240,250,264,0,270,303,281,265,275],
[246,269,255,268,280,0,316,289,247,315],
[242,252,221,267,247,234,0,199,235,289],
[248,297,275,292,269,261,351,0,280,314],
[275,302,266,297,285,303,315,270,0,316],
[257,266,237,260,275,235,261,236,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,267,239,264,248,266,279,271,253],
[293,0,282,279,302,257,281,299,281,290],
[283,268,0,258,284,268,260,284,281,274],
[311,271,292,0,301,282,286,299,281,273],
[286,248,266,249,0,255,250,266,263,246],
[302,293,282,268,295,0,271,290,278,288],
[284,269,290,264,300,279,0,284,285,279],
[271,251,266,251,284,260,266,0,258,268],
[279,269,269,269,287,272,265,292,0,257],
[297,260,276,277,304,262,271,282,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,284,275,278,274,287,276,287,272],
[282,0,270,264,285,258,270,282,287,257],
[266,280,0,271,263,274,296,262,290,271],
[275,286,279,0,270,251,271,264,274,253],
[272,265,287,280,0,278,288,257,298,269],
[276,292,276,299,272,0,296,279,299,277],
[263,280,254,279,262,254,0,258,274,257],
[274,268,288,286,293,271,292,0,262,264],
[263,263,260,276,252,251,276,288,0,255],
[278,293,279,297,281,273,293,286,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,275,284,281,288,314,293,295],
[274,0,306,238,272,242,287,290,265,295],
[271,244,0,250,247,242,315,260,277,244],
[275,312,300,0,305,301,297,323,298,272],
[266,278,303,245,0,296,283,279,261,258],
[269,308,308,249,254,0,291,321,257,308],
[262,263,235,253,267,259,0,310,248,250],
[236,260,290,227,271,229,240,0,275,275],
[257,285,273,252,289,293,302,275,0,281],
[255,255,306,278,292,242,300,275,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,275,275,275,273,267,289,266],
[275,0,256,256,285,275,279,271,272,269],
[281,294,0,284,305,278,291,271,283,271],
[275,294,266,0,276,279,276,274,281,270],
[275,265,245,274,0,275,275,269,279,270],
[275,275,272,271,275,0,273,272,268,275],
[277,271,259,274,275,277,0,270,279,268],
[283,279,279,276,281,278,280,0,280,263],
[261,278,267,269,271,282,271,270,0,267],
[284,281,279,280,280,275,282,287,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,137,138,136,205,138,210,277,208,208],
[413,0,277,342,413,206,210,413,276,345],
[412,273,0,341,411,343,277,550,343,275],
[414,208,209,0,274,208,277,347,346,346],
[345,137,139,276,0,207,210,347,208,275],
[412,344,207,342,343,0,277,550,342,342],
[340,340,273,273,340,273,0,344,340,409],
[273,137,0,203,203,0,206,0,275,275],
[342,274,207,204,342,208,210,275,0,205],
[342,205,275,204,275,208,141,275,345,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,260,293,295,278,284,243,282,263],
[265,0,296,275,265,279,261,278,268,263],
[290,254,0,287,280,287,292,240,273,255],
[257,275,263,0,278,266,264,256,259,267],
[255,285,270,272,0,280,284,243,267,249],
[272,271,263,284,270,0,272,234,260,246],
[266,289,258,286,266,278,0,250,280,267],
[307,272,310,294,307,316,300,0,304,294],
[268,282,277,291,283,290,270,246,0,261],
[287,287,295,283,301,304,283,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,267,270,281,289,282,272,278],
[274,0,280,258,270,276,286,265,274,282],
[262,270,0,260,273,274,290,272,286,281],
[283,292,290,0,284,274,296,276,293,287],
[280,280,277,266,0,268,292,277,276,265],
[269,274,276,276,282,0,300,272,278,288],
[261,264,260,254,258,250,0,268,280,270],
[268,285,278,274,273,278,282,0,279,284],
[278,276,264,257,274,272,270,271,0,256],
[272,268,269,263,285,262,280,266,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,265,314,209,293,253,230,329,292],
[254,0,279,312,299,281,294,273,358,352],
[285,271,0,286,260,298,226,274,359,327],
[236,238,264,0,297,269,249,285,315,351],
[341,251,290,253,0,304,279,315,327,353],
[257,269,252,281,246,0,211,259,285,270],
[297,256,324,301,271,339,0,268,344,327],
[320,277,276,265,235,291,282,0,281,321],
[221,192,191,235,223,265,206,269,0,307],
[258,198,223,199,197,280,223,229,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,302,319,267,302,289,281,300,264],
[267,0,285,320,282,297,297,291,316,263],
[248,265,0,271,286,279,236,262,262,294],
[231,230,279,0,254,268,235,289,285,273],
[283,268,264,296,0,286,288,266,310,288],
[248,253,271,282,264,0,225,273,274,294],
[261,253,314,315,262,325,0,318,313,300],
[269,259,288,261,284,277,232,0,286,282],
[250,234,288,265,240,276,237,264,0,258],
[286,287,256,277,262,256,250,268,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,268,254,283,299,281,275,270,264],
[272,0,257,257,279,272,252,287,245,263],
[282,293,0,287,287,307,255,284,284,286],
[296,293,263,0,300,319,292,310,295,281],
[267,271,263,250,0,275,261,269,253,248],
[251,278,243,231,275,0,253,246,263,232],
[269,298,295,258,289,297,0,292,285,272],
[275,263,266,240,281,304,258,0,268,255],
[280,305,266,255,297,287,265,282,0,259],
[286,287,264,269,302,318,278,295,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,262,269,284,277,279,299,278,279],
[246,0,293,274,260,269,305,289,262,250],
[288,257,0,259,272,284,286,284,267,262],
[281,276,291,0,282,285,284,315,266,254],
[266,290,278,268,0,286,266,296,276,273],
[273,281,266,265,264,0,264,287,249,249],
[271,245,264,266,284,286,0,293,259,257],
[251,261,266,235,254,263,257,0,247,238],
[272,288,283,284,274,301,291,303,0,254],
[271,300,288,296,277,301,293,312,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,279,271,283,271,286,281,273],
[282,0,264,279,272,261,266,294,288,279],
[269,286,0,301,295,277,267,301,291,280],
[271,271,249,0,247,255,252,278,267,267],
[279,278,255,303,0,248,273,283,279,262],
[267,289,273,295,302,0,288,291,294,298],
[279,284,283,298,277,262,0,289,275,293],
[264,256,249,272,267,259,261,0,269,276],
[269,262,259,283,271,256,275,281,0,266],
[277,271,270,283,288,252,257,274,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,257,282,279,266,271,273,291],
[265,0,268,269,244,260,272,256,266,277],
[266,282,0,259,259,266,250,253,261,260],
[293,281,291,0,271,268,277,260,275,290],
[268,306,291,279,0,268,283,280,279,294],
[271,290,284,282,282,0,281,259,272,286],
[284,278,300,273,267,269,0,254,277,287],
[279,294,297,290,270,291,296,0,286,307],
[277,284,289,275,271,278,273,264,0,283],
[259,273,290,260,256,264,263,243,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,283,274,277,271,279,282,231],
[280,0,284,287,275,263,283,247,297,280],
[296,266,0,296,272,292,245,271,295,250],
[267,263,254,0,287,279,248,248,278,256],
[276,275,278,263,0,279,267,265,290,250],
[273,287,258,271,271,0,270,256,265,263],
[279,267,305,302,283,280,0,270,281,272],
[271,303,279,302,285,294,280,0,282,263],
[268,253,255,272,260,285,269,268,0,260],
[319,270,300,294,300,287,278,287,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,235,259,228,225,255,213,245,239],
[280,0,298,251,232,244,285,266,239,275],
[315,252,0,324,281,292,300,295,279,276],
[291,299,226,0,252,269,301,282,244,254],
[322,318,269,298,0,287,283,279,277,287],
[325,306,258,281,263,0,319,258,278,255],
[295,265,250,249,267,231,0,231,252,234],
[337,284,255,268,271,292,319,0,274,286],
[305,311,271,306,273,272,298,276,0,279],
[311,275,274,296,263,295,316,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,263,271,303,282,250,249,262],
[262,0,269,258,267,285,244,254,245,244],
[260,281,0,287,296,298,287,255,275,269],
[287,292,263,0,266,287,266,261,276,279],
[279,283,254,284,0,297,262,279,280,260],
[247,265,252,263,253,0,250,240,248,243],
[268,306,263,284,288,300,0,261,245,295],
[300,296,295,289,271,310,289,0,267,290],
[301,305,275,274,270,302,305,283,0,276],
[288,306,281,271,290,307,255,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,296,287,292,288,265,297,285],
[274,0,283,290,311,308,278,281,290,282],
[262,267,0,266,280,275,257,251,305,261],
[254,260,284,0,285,290,264,281,296,277],
[263,239,270,265,0,276,276,256,302,271],
[258,242,275,260,274,0,248,264,298,256],
[262,272,293,286,274,302,0,272,284,273],
[285,269,299,269,294,286,278,0,328,275],
[253,260,245,254,248,252,266,222,0,247],
[265,268,289,273,279,294,277,275,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,285,261,263,286,316,207,288,309],
[288,0,232,261,265,287,339,284,239,333],
[265,318,0,292,239,339,341,260,340,340],
[289,289,258,0,266,263,339,313,290,339],
[287,285,311,284,0,261,421,259,235,285],
[264,263,211,287,289,0,369,183,316,343],
[234,211,209,211,129,181,0,181,157,285],
[343,266,290,237,291,367,369,0,287,343],
[262,311,210,260,315,234,393,263,0,285],
[241,217,210,211,265,207,265,207,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,266,253,259,254,254,287,270,241],
[274,0,269,274,278,220,259,299,282,240],
[284,281,0,263,290,268,277,286,282,270],
[297,276,287,0,277,265,276,297,265,276],
[291,272,260,273,0,272,265,298,275,260],
[296,330,282,285,278,0,280,290,283,252],
[296,291,273,274,285,270,0,302,291,284],
[263,251,264,253,252,260,248,0,256,252],
[280,268,268,285,275,267,259,294,0,251],
[309,310,280,274,290,298,266,298,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,295,288,218,262,283,241,254],
[285,0,302,264,277,220,303,241,226,246],
[274,248,0,302,279,270,258,261,271,255],
[255,286,248,0,262,224,249,266,228,225],
[262,273,271,288,0,205,307,299,195,251],
[332,330,280,326,345,0,315,273,278,268],
[288,247,292,301,243,235,0,283,252,245],
[267,309,289,284,251,277,267,0,252,318],
[309,324,279,322,355,272,298,298,0,281],
[296,304,295,325,299,282,305,232,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,250,253,258,286,255,256,267,259],
[269,0,266,267,291,267,259,268,276,274],
[300,284,0,271,274,285,264,285,267,278],
[297,283,279,0,283,266,263,289,273,274],
[292,259,276,267,0,282,272,277,272,250],
[264,283,265,284,268,0,275,267,269,257],
[295,291,286,287,278,275,0,273,292,278],
[294,282,265,261,273,283,277,0,269,274],
[283,274,283,277,278,281,258,281,0,281],
[291,276,272,276,300,293,272,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,298,269,308,313,266,268,277,277],
[251,0,249,239,259,259,255,219,281,246],
[252,301,0,271,316,314,284,287,259,236],
[281,311,279,0,315,310,297,283,281,259],
[242,291,234,235,0,297,258,258,234,238],
[237,291,236,240,253,0,256,237,249,200],
[284,295,266,253,292,294,0,284,255,260],
[282,331,263,267,292,313,266,0,278,286],
[273,269,291,269,316,301,295,272,0,271],
[273,304,314,291,312,350,290,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,272,300,272,269,256,285,264,280],
[288,0,266,288,239,268,254,274,259,255],
[278,284,0,297,249,263,260,277,268,248],
[250,262,253,0,221,233,228,244,246,238],
[278,311,301,329,0,283,269,320,286,277],
[281,282,287,317,267,0,274,294,284,260],
[294,296,290,322,281,276,0,289,300,274],
[265,276,273,306,230,256,261,0,273,254],
[286,291,282,304,264,266,250,277,0,276],
[270,295,302,312,273,290,276,296,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,262,247,277,289,245,223,257],
[298,0,278,262,281,267,275,282,250,267],
[281,272,0,287,277,292,286,300,277,308],
[288,288,263,0,275,273,283,308,271,285],
[303,269,273,275,0,282,268,291,249,287],
[273,283,258,277,268,0,280,265,256,295],
[261,275,264,267,282,270,0,286,247,301],
[305,268,250,242,259,285,264,0,256,272],
[327,300,273,279,301,294,303,294,0,337],
[293,283,242,265,263,255,249,278,213,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,260,275,291,279,271,281,270,262],
[275,0,274,290,284,302,268,285,275,272],
[290,276,0,285,286,296,278,286,271,260],
[275,260,265,0,287,280,265,273,249,270],
[259,266,264,263,0,286,264,276,266,254],
[271,248,254,270,264,0,258,276,250,251],
[279,282,272,285,286,292,0,280,277,277],
[269,265,264,277,274,274,270,0,271,250],
[280,275,279,301,284,300,273,279,0,275],
[288,278,290,280,296,299,273,300,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,264,273,266,265,279,276,275],
[266,0,280,257,270,271,261,263,289,269],
[282,270,0,264,273,264,274,271,285,274],
[286,293,286,0,278,278,270,285,275,284],
[277,280,277,272,0,267,285,284,295,293],
[284,279,286,272,283,0,265,268,281,297],
[285,289,276,280,265,285,0,266,288,287],
[271,287,279,265,266,282,284,0,277,292],
[274,261,265,275,255,269,262,273,0,271],
[275,281,276,266,257,253,263,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,278,274,280,290,281,282,265],
[258,0,276,259,265,263,289,269,261,261],
[270,274,0,269,262,276,276,264,275,269],
[272,291,281,0,271,281,274,280,265,275],
[276,285,288,279,0,284,287,282,265,256],
[270,287,274,269,266,0,281,269,263,271],
[260,261,274,276,263,269,0,255,255,251],
[269,281,286,270,268,281,295,0,281,283],
[268,289,275,285,285,287,295,269,0,274],
[285,289,281,275,294,279,299,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,239,246,266,268,274,246,254],
[292,0,263,279,274,282,258,279,232,244],
[287,287,0,268,271,265,249,280,245,256],
[311,271,282,0,262,272,253,278,257,262],
[304,276,279,288,0,308,286,281,281,258],
[284,268,285,278,242,0,262,271,252,261],
[282,292,301,297,264,288,0,302,273,282],
[276,271,270,272,269,279,248,0,257,255],
[304,318,305,293,269,298,277,293,0,282],
[296,306,294,288,292,289,268,295,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,310,294,297,314,374,357,336,331],
[279,0,258,309,293,311,331,354,306,391],
[240,292,0,243,245,286,309,268,246,293],
[256,241,307,0,253,285,342,354,243,302],
[253,257,305,297,0,263,332,305,283,255],
[236,239,264,265,287,0,328,349,275,345],
[176,219,241,208,218,222,0,241,219,292],
[193,196,282,196,245,201,309,0,238,263],
[214,244,304,307,267,275,331,312,0,319],
[219,159,257,248,295,205,258,287,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,285,293,279,272,292,281,273],
[260,0,282,255,290,275,260,281,288,272],
[260,268,0,250,284,262,258,278,272,265],
[265,295,300,0,300,287,266,297,274,277],
[257,260,266,250,0,259,241,260,260,247],
[271,275,288,263,291,0,286,286,276,275],
[278,290,292,284,309,264,0,271,287,277],
[258,269,272,253,290,264,279,0,272,275],
[269,262,278,276,290,274,263,278,0,262],
[277,278,285,273,303,275,273,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,287,284,273,295,273,281,269,278],
[269,0,283,276,275,289,261,285,278,290],
[263,267,0,260,256,277,270,280,268,267],
[266,274,290,0,276,302,273,293,281,278],
[277,275,294,274,0,301,278,300,275,282],
[255,261,273,248,249,0,260,273,251,278],
[277,289,280,277,272,290,0,305,272,303],
[269,265,270,257,250,277,245,0,279,265],
[281,272,282,269,275,299,278,271,0,272],
[272,260,283,272,268,272,247,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,268,273,265,271,259,267,252,262],
[295,0,283,271,264,256,260,273,262,256],
[282,267,0,281,269,271,256,264,239,257],
[277,279,269,0,262,274,257,266,248,262],
[285,286,281,288,0,280,281,281,263,254],
[279,294,279,276,270,0,268,275,264,282],
[291,290,294,293,269,282,0,293,278,265],
[283,277,286,284,269,275,257,0,246,261],
[298,288,311,302,287,286,272,304,0,265],
[288,294,293,288,296,268,285,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,304,285,268,300,264,275,290,264],
[275,0,286,264,272,303,275,290,274,272],
[246,264,0,246,260,254,258,265,262,262],
[265,286,304,0,276,271,268,284,269,246],
[282,278,290,274,0,259,256,276,283,242],
[250,247,296,279,291,0,281,271,263,280],
[286,275,292,282,294,269,0,277,286,264],
[275,260,285,266,274,279,273,0,254,261],
[260,276,288,281,267,287,264,296,0,274],
[286,278,288,304,308,270,286,289,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,449,206,343,310,309,309,309,308],
[276,0,310,343,241,241,310,277,277,242],
[101,240,0,171,137,240,171,206,206,205],
[344,207,379,0,344,239,343,275,345,308],
[207,309,413,206,0,309,309,378,344,309],
[240,309,310,311,241,0,241,243,312,240],
[241,240,379,207,241,309,0,276,344,312],
[241,273,344,275,172,307,274,0,277,206],
[241,273,344,205,206,238,206,273,0,273],
[242,308,345,242,241,310,238,344,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,291,295,282,334,351,271,365,331],
[255,0,276,268,299,262,283,282,329,258],
[259,274,0,246,248,282,305,245,304,310],
[255,282,304,0,232,290,315,246,289,269],
[268,251,302,318,0,310,316,262,331,274],
[216,288,268,260,240,0,267,280,312,280],
[199,267,245,235,234,283,0,211,295,214],
[279,268,305,304,288,270,339,0,293,320],
[185,221,246,261,219,238,255,257,0,219],
[219,292,240,281,276,270,336,230,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,258,260,281,251,275,282,254,247],
[310,0,260,274,317,283,271,306,283,283],
[292,290,0,295,282,280,295,274,294,255],
[290,276,255,0,315,287,284,286,293,259],
[269,233,268,235,0,217,249,256,249,252],
[299,267,270,263,333,0,282,269,290,307],
[275,279,255,266,301,268,0,276,274,267],
[268,244,276,264,294,281,274,0,255,286],
[296,267,256,257,301,260,276,295,0,256],
[303,267,295,291,298,243,283,264,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,273,308,258,274,261,291,276],
[267,0,269,279,274,254,257,287,287,271],
[272,281,0,278,278,280,273,296,278,277],
[277,271,272,0,293,283,272,291,289,277],
[242,276,272,257,0,263,258,307,285,289],
[292,296,270,267,287,0,289,308,287,281],
[276,293,277,278,292,261,0,308,276,284],
[289,263,254,259,243,242,242,0,294,289],
[259,263,272,261,265,263,274,256,0,262],
[274,279,273,273,261,269,266,261,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,285,284,277,275,257,269,284,302],
[260,0,260,287,290,277,277,276,275,298],
[265,290,0,276,292,268,248,254,273,298],
[266,263,274,0,282,250,255,255,270,289],
[273,260,258,268,0,265,262,251,266,292],
[275,273,282,300,285,0,280,273,274,285],
[293,273,302,295,288,270,0,267,281,314],
[281,274,296,295,299,277,283,0,290,303],
[266,275,277,280,284,276,269,260,0,300],
[248,252,252,261,258,265,236,247,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,312,295,267,278,257,319,297,299],
[238,0,308,311,300,285,295,334,310,274],
[238,242,0,252,266,257,239,306,282,257],
[255,239,298,0,280,270,244,277,279,259],
[283,250,284,270,0,282,232,297,283,284],
[272,265,293,280,268,0,266,308,330,291],
[293,255,311,306,318,284,0,326,338,311],
[231,216,244,273,253,242,224,0,280,239],
[253,240,268,271,267,220,212,270,0,253],
[251,276,293,291,266,259,239,311,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,297,259,276,282,276,245,281],
[284,0,242,280,260,271,276,289,229,277],
[288,308,0,305,275,295,278,273,277,295],
[253,270,245,0,271,266,263,258,247,271],
[291,290,275,279,0,274,283,281,285,298],
[274,279,255,284,276,0,274,261,270,270],
[268,274,272,287,267,276,0,270,240,271],
[274,261,277,292,269,289,280,0,250,295],
[305,321,273,303,265,280,310,300,0,286],
[269,273,255,279,252,280,279,255,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,259,258,276,281,259,279,285],
[270,0,282,277,259,263,264,273,255,276],
[283,268,0,264,266,279,263,267,273,267],
[291,273,286,0,280,285,282,269,282,271],
[292,291,284,270,0,284,282,263,289,286],
[274,287,271,265,266,0,269,258,276,274],
[269,286,287,268,268,281,0,275,288,264],
[291,277,283,281,287,292,275,0,282,284],
[271,295,277,268,261,274,262,268,0,276],
[265,274,283,279,264,276,286,266,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,299,272,312,282,291,309,293,286],
[253,0,294,286,266,243,240,296,276,261],
[251,256,0,246,227,230,279,244,292,249],
[278,264,304,0,259,260,283,300,280,275],
[238,284,323,291,0,303,289,309,299,278],
[268,307,320,290,247,0,279,321,300,287],
[259,310,271,267,261,271,0,285,279,296],
[241,254,306,250,241,229,265,0,308,248],
[257,274,258,270,251,250,271,242,0,261],
[264,289,301,275,272,263,254,302,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,257,272,275,272,263,272,268],
[292,0,291,272,283,271,279,277,285,274],
[281,259,0,255,272,266,264,261,258,272],
[293,278,295,0,263,284,284,292,285,279],
[278,267,278,287,0,260,269,263,269,281],
[275,279,284,266,290,0,281,282,275,274],
[278,271,286,266,281,269,0,274,265,274],
[287,273,289,258,287,268,276,0,268,272],
[278,265,292,265,281,275,285,282,0,275],
[282,276,278,271,269,276,276,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,299,296,247,304,308,322,293,280],
[254,0,266,302,244,269,277,288,271,235],
[251,284,0,282,283,285,272,285,274,236],
[254,248,268,0,253,262,271,246,211,262],
[303,306,267,297,0,288,293,337,274,296],
[246,281,265,288,262,0,280,269,279,294],
[242,273,278,279,257,270,0,287,246,226],
[228,262,265,304,213,281,263,0,267,250],
[257,279,276,339,276,271,304,283,0,263],
[270,315,314,288,254,256,324,300,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,273,266,284,268,283,284,264,278],
[270,0,276,264,255,252,281,279,273,279],
[277,274,0,268,265,275,277,269,270,280],
[284,286,282,0,266,260,304,277,292,287],
[266,295,285,284,0,253,252,270,249,261],
[282,298,275,290,297,0,281,295,287,294],
[267,269,273,246,298,269,0,279,285,283],
[266,271,281,273,280,255,271,0,282,281],
[286,277,280,258,301,263,265,268,0,274],
[272,271,270,263,289,256,267,269,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,312,286,315,299,294,303,315,270],
[242,0,278,263,257,251,279,273,258,254],
[238,272,0,249,290,303,282,292,284,246],
[264,287,301,0,316,307,296,312,308,286],
[235,293,260,234,0,279,278,254,252,276],
[251,299,247,243,271,0,286,255,254,268],
[256,271,268,254,272,264,0,293,274,255],
[247,277,258,238,296,295,257,0,257,252],
[235,292,266,242,298,296,276,293,0,246],
[280,296,304,264,274,282,295,298,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,288,286,289,284,300,272,264,289],
[276,0,278,262,262,287,278,240,256,266],
[262,272,0,265,277,277,280,263,271,268],
[264,288,285,0,279,282,298,276,258,298],
[261,288,273,271,0,297,283,266,274,282],
[266,263,273,268,253,0,285,261,267,277],
[250,272,270,252,267,265,0,255,244,266],
[278,310,287,274,284,289,295,0,284,301],
[286,294,279,292,276,283,306,266,0,297],
[261,284,282,252,268,273,284,249,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,292,258,301,290,286,258,227,274],
[260,0,266,255,343,262,259,276,264,232],
[258,284,0,227,268,187,343,184,222,217],
[292,295,323,0,263,290,308,245,285,278],
[249,207,282,287,0,233,235,205,255,280],
[260,288,363,260,317,0,330,236,272,265],
[264,291,207,242,315,220,0,219,237,199],
[292,274,366,305,345,314,331,0,328,290],
[323,286,328,265,295,278,313,222,0,257],
[276,318,333,272,270,285,351,260,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,258,236,244,255,261,239,241,246],
[314,0,264,266,279,292,283,257,277,283],
[292,286,0,274,268,293,298,287,276,275],
[314,284,276,0,263,293,278,286,258,280],
[306,271,282,287,0,296,297,285,270,271],
[295,258,257,257,254,0,278,271,264,259],
[289,267,252,272,253,272,0,273,242,274],
[311,293,263,264,265,279,277,0,281,253],
[309,273,274,292,280,286,308,269,0,283],
[304,267,275,270,279,291,276,297,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,303,303,258,316,375,305,291],
[275,0,305,349,333,303,375,364,350,321],
[262,245,0,294,305,219,306,350,275,324],
[247,201,256,0,289,263,277,302,288,247],
[247,217,245,261,0,219,288,304,320,249],
[292,247,331,287,331,0,244,334,287,317],
[234,175,244,273,262,306,0,273,259,175],
[175,186,200,248,246,216,277,0,247,221],
[245,200,275,262,230,263,291,303,0,279],
[259,229,226,303,301,233,375,329,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,264,269,282,267,261,260,282,285],
[296,0,291,297,311,313,287,289,285,275],
[286,259,0,280,279,275,266,270,268,262],
[281,253,270,0,302,296,302,280,265,285],
[268,239,271,248,0,285,272,278,256,266],
[283,237,275,254,265,0,269,273,254,251],
[289,263,284,248,278,281,0,272,241,233],
[290,261,280,270,272,277,278,0,270,276],
[268,265,282,285,294,296,309,280,0,290],
[265,275,288,265,284,299,317,274,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,283,277,273,273,262,288,268,274],
[261,0,297,264,264,261,264,272,259,275],
[267,253,0,260,266,277,258,268,274,272],
[273,286,290,0,284,307,272,271,289,297],
[277,286,284,266,0,299,290,293,264,284],
[277,289,273,243,251,0,277,272,267,263],
[288,286,292,278,260,273,0,285,268,264],
[262,278,282,279,257,278,265,0,267,284],
[282,291,276,261,286,283,282,283,0,283],
[276,275,278,253,266,287,286,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,214,176,275,262,201,271,242,315],
[309,0,272,261,318,293,232,278,287,249],
[336,278,0,251,268,293,262,275,289,309],
[374,289,299,0,264,327,255,301,300,355],
[275,232,282,286,0,260,213,284,253,243],
[288,257,257,223,290,0,285,276,287,290],
[349,318,288,295,337,265,0,317,358,301],
[279,272,275,249,266,274,233,0,301,308],
[308,263,261,250,297,263,192,249,0,290],
[235,301,241,195,307,260,249,242,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,307,260,300,280,262,283,278,264],
[252,0,286,259,264,240,242,242,273,240],
[243,264,0,216,244,236,240,247,253,214],
[290,291,334,0,287,288,263,316,308,281],
[250,286,306,263,0,257,246,275,271,239],
[270,310,314,262,293,0,248,277,265,283],
[288,308,310,287,304,302,0,310,316,261],
[267,308,303,234,275,273,240,0,313,279],
[272,277,297,242,279,285,234,237,0,258],
[286,310,336,269,311,267,289,271,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,274,249,279,263,264,264,283],
[278,0,290,280,253,257,287,290,276,280],
[278,260,0,288,254,266,256,262,271,272],
[276,270,262,0,230,241,264,259,258,261],
[301,297,296,320,0,275,305,278,290,304],
[271,293,284,309,275,0,273,277,267,281],
[287,263,294,286,245,277,0,263,281,273],
[286,260,288,291,272,273,287,0,274,269],
[286,274,279,292,260,283,269,276,0,279],
[267,270,278,289,246,269,277,281,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,272,250,262,245,248,250,272],
[282,0,270,247,262,267,266,247,260,269],
[281,280,0,278,265,269,281,256,264,273],
[278,303,272,0,287,259,266,269,270,265],
[300,288,285,263,0,271,287,275,253,257],
[288,283,281,291,279,0,278,282,264,254],
[305,284,269,284,263,272,0,260,280,263],
[302,303,294,281,275,268,290,0,282,285],
[300,290,286,280,297,286,270,268,0,255],
[278,281,277,285,293,296,287,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,266,287,301,265,278,282,258,267],
[267,0,281,271,302,253,263,263,275,269],
[284,269,0,287,295,275,290,301,277,291],
[263,279,263,0,296,258,269,275,292,281],
[249,248,255,254,0,229,250,255,240,251],
[285,297,275,292,321,0,302,299,293,286],
[272,287,260,281,300,248,0,282,259,263],
[268,287,249,275,295,251,268,0,254,258],
[292,275,273,258,310,257,291,296,0,268],
[283,281,259,269,299,264,287,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,249,272,268,252,263,267,267],
[278,0,296,278,273,275,290,274,281,294],
[282,254,0,255,261,279,267,257,238,274],
[301,272,295,0,261,305,306,285,266,273],
[278,277,289,289,0,293,267,280,283,273],
[282,275,271,245,257,0,290,262,268,273],
[298,260,283,244,283,260,0,270,261,302],
[287,276,293,265,270,288,280,0,277,286],
[283,269,312,284,267,282,289,273,0,280],
[283,256,276,277,277,277,248,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,263,277,294,273,271,292,294,285],
[242,0,253,263,262,251,245,243,245,239],
[287,297,0,287,273,278,291,279,277,277],
[273,287,263,0,281,287,299,268,277,291],
[256,288,277,269,0,266,290,267,288,281],
[277,299,272,263,284,0,299,290,294,281],
[279,305,259,251,260,251,0,242,262,270],
[258,307,271,282,283,260,308,0,292,285],
[256,305,273,273,262,256,288,258,0,281],
[265,311,273,259,269,269,280,265,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,313,272,303,279,275,312,294,346],
[250,0,304,292,288,292,291,253,292,281],
[237,246,0,276,272,269,253,291,267,278],
[278,258,274,0,278,262,269,240,250,300],
[247,262,278,272,0,288,221,250,257,291],
[271,258,281,288,262,0,214,241,293,299],
[275,259,297,281,329,336,0,309,320,322],
[238,297,259,310,300,309,241,0,273,281],
[256,258,283,300,293,257,230,277,0,283],
[204,269,272,250,259,251,228,269,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,298,249,288,260,281,308,286,288],
[272,0,312,279,291,267,292,314,292,300],
[252,238,0,231,243,244,243,250,256,261],
[301,271,319,0,307,262,291,310,287,299],
[262,259,307,243,0,261,271,281,271,300],
[290,283,306,288,289,0,271,315,282,297],
[269,258,307,259,279,279,0,283,286,297],
[242,236,300,240,269,235,267,0,279,269],
[264,258,294,263,279,268,264,271,0,289],
[262,250,289,251,250,253,253,281,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,283,270,292,290,274,278,278,290],
[268,0,281,278,278,280,287,284,264,277],
[267,269,0,260,274,278,279,273,265,271],
[280,272,290,0,282,297,272,291,290,290],
[258,272,276,268,0,280,275,264,273,268],
[260,270,272,253,270,0,278,278,277,262],
[276,263,271,278,275,272,0,284,278,272],
[272,266,277,259,286,272,266,0,273,271],
[272,286,285,260,277,273,272,277,0,271],
[260,273,279,260,282,288,278,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,258,307,288,285,282,299,259],
[279,0,305,278,311,284,304,286,296,262],
[290,245,0,251,301,287,301,281,303,250],
[292,272,299,0,315,287,313,311,307,265],
[243,239,249,235,0,227,275,265,262,241],
[262,266,263,263,323,0,307,295,295,280],
[265,246,249,237,275,243,0,266,272,244],
[268,264,269,239,285,255,284,0,287,229],
[251,254,247,243,288,255,278,263,0,247],
[291,288,300,285,309,270,306,321,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,254,277,233,214,258,265,280,269],
[317,0,294,288,278,241,251,277,326,232],
[296,256,0,277,292,256,277,285,285,258],
[273,262,273,0,276,269,269,297,307,258],
[317,272,258,274,0,291,284,295,291,253],
[336,309,294,281,259,0,302,327,312,279],
[292,299,273,281,266,248,0,277,317,274],
[285,273,265,253,255,223,273,0,293,228],
[270,224,265,243,259,238,233,257,0,233],
[281,318,292,292,297,271,276,322,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,300,278,293,284,268,281,286],
[273,0,295,283,286,292,254,280,262,274],
[267,255,0,300,285,277,263,311,255,264],
[250,267,250,0,274,261,257,285,246,280],
[272,264,265,276,0,281,286,302,229,246],
[257,258,273,289,269,0,256,272,249,276],
[266,296,287,293,264,294,0,318,261,264],
[282,270,239,265,248,278,232,0,248,257],
[269,288,295,304,321,301,289,302,0,296],
[264,276,286,270,304,274,286,293,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,278,280,290,266,285,305,290,265],
[268,0,288,265,280,271,287,282,268,279],
[272,262,0,293,290,285,299,269,287,260],
[270,285,257,0,260,258,279,280,271,256],
[260,270,260,290,0,263,289,277,268,280],
[284,279,265,292,287,0,278,289,276,267],
[265,263,251,271,261,272,0,284,264,259],
[245,268,281,270,273,261,266,0,269,235],
[260,282,263,279,282,274,286,281,0,270],
[285,271,290,294,270,283,291,315,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,257,292,315,338,297,291,333,343],
[215,0,222,255,251,251,255,241,233,280],
[293,328,0,295,319,273,285,243,303,294],
[258,295,255,0,289,244,258,270,303,304],
[235,299,231,261,0,236,262,240,266,283],
[212,299,277,306,314,0,271,257,283,310],
[253,295,265,292,288,279,0,279,290,308],
[259,309,307,280,310,293,271,0,266,331],
[217,317,247,247,284,267,260,284,0,280],
[207,270,256,246,267,240,242,219,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,255,258,238,281,230,271,269,261],
[271,0,267,277,285,254,265,267,272,277],
[295,283,0,285,270,274,260,260,273,277],
[292,273,265,0,258,251,264,287,261,245],
[312,265,280,292,0,271,267,270,272,269],
[269,296,276,299,279,0,263,300,297,277],
[320,285,290,286,283,287,0,283,283,268],
[279,283,290,263,280,250,267,0,293,261],
[281,278,277,289,278,253,267,257,0,264],
[289,273,273,305,281,273,282,289,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,248,257,277,263,249,262,256,264],
[296,0,252,243,258,290,260,270,271,261],
[302,298,0,277,270,290,272,277,284,309],
[293,307,273,0,289,282,280,284,285,276],
[273,292,280,261,0,296,274,283,281,286],
[287,260,260,268,254,0,262,249,275,254],
[301,290,278,270,276,288,0,321,266,268],
[288,280,273,266,267,301,229,0,292,284],
[294,279,266,265,269,275,284,258,0,280],
[286,289,241,274,264,296,282,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,262,272,252,315,251,259,290,267],
[301,0,299,288,256,305,257,273,267,309],
[288,251,0,271,235,266,252,262,260,286],
[278,262,279,0,244,270,213,250,259,251],
[298,294,315,306,0,295,274,300,247,296],
[235,245,284,280,255,0,268,238,248,258],
[299,293,298,337,276,282,0,244,247,272],
[291,277,288,300,250,312,306,0,293,285],
[260,283,290,291,303,302,303,257,0,258],
[283,241,264,299,254,292,278,265,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,287,236,186,221,199,292,223,242],
[310,0,230,260,265,282,226,285,303,281],
[263,320,0,334,203,322,266,325,338,288],
[314,290,216,0,200,268,278,288,337,252],
[364,285,347,350,0,266,281,303,322,270],
[329,268,228,282,284,0,278,254,354,299],
[351,324,284,272,269,272,0,291,355,322],
[258,265,225,262,247,296,259,0,334,264],
[327,247,212,213,228,196,195,216,0,266],
[308,269,262,298,280,251,228,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,285,272,296,292,284,270,291,271],
[279,0,269,231,255,256,284,247,267,261],
[265,281,0,248,276,276,268,256,277,265],
[278,319,302,0,295,260,311,275,295,290],
[254,295,274,255,0,270,279,254,284,256],
[258,294,274,290,280,0,290,260,284,273],
[266,266,282,239,271,260,0,252,267,260],
[280,303,294,275,296,290,298,0,299,292],
[259,283,273,255,266,266,283,251,0,266],
[279,289,285,260,294,277,290,258,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,277,256,243,254,247,297,258,238],
[299,0,309,273,263,271,284,301,284,260],
[273,241,0,255,258,246,271,285,272,232],
[294,277,295,0,267,271,264,285,294,261],
[307,287,292,283,0,298,286,316,304,260],
[296,279,304,279,252,0,277,278,277,282],
[303,266,279,286,264,273,0,295,285,279],
[253,249,265,265,234,272,255,0,265,259],
[292,266,278,256,246,273,265,285,0,260],
[312,290,318,289,290,268,271,291,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,290,274,275,291,312,297,287],
[275,0,268,278,289,291,276,284,293,310],
[272,282,0,292,274,270,289,291,296,287],
[260,272,258,0,255,274,261,276,288,277],
[276,261,276,295,0,262,264,301,305,281],
[275,259,280,276,288,0,284,287,283,295],
[259,274,261,289,286,266,0,283,296,298],
[238,266,259,274,249,263,267,0,291,273],
[253,257,254,262,245,267,254,259,0,271],
[263,240,263,273,269,255,252,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,268,286,266,277,275,285,281],
[273,0,316,261,282,271,247,320,296,278],
[252,234,0,223,252,252,235,243,269,217],
[282,289,327,0,319,291,260,305,296,277],
[264,268,298,231,0,256,256,288,278,249],
[284,279,298,259,294,0,259,270,280,250],
[273,303,315,290,294,291,0,308,300,281],
[275,230,307,245,262,280,242,0,292,269],
[265,254,281,254,272,270,250,258,0,248],
[269,272,333,273,301,300,269,281,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,313,269,284,277,279,273,233,262],
[283,0,298,258,267,226,274,275,282,230],
[237,252,0,258,223,229,246,243,243,214],
[281,292,292,0,246,268,276,243,258,210],
[266,283,327,304,0,281,248,250,291,257],
[273,324,321,282,269,0,308,286,261,288],
[271,276,304,274,302,242,0,281,253,242],
[277,275,307,307,300,264,269,0,311,297],
[317,268,307,292,259,289,297,239,0,264],
[288,320,336,340,293,262,308,253,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,290,276,266,300,299,297,285,259],
[254,0,268,248,329,292,304,324,299,290],
[260,282,0,266,272,270,303,288,338,267],
[274,302,284,0,288,256,333,271,314,309],
[284,221,278,262,0,242,290,287,274,303],
[250,258,280,294,308,0,313,338,298,309],
[251,246,247,217,260,237,0,259,265,258],
[253,226,262,279,263,212,291,0,293,282],
[265,251,212,236,276,252,285,257,0,263],
[291,260,283,241,247,241,292,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,267,246,264,253,266,276,281,283],
[292,0,294,307,304,306,299,300,267,309],
[283,256,0,283,305,280,274,273,264,298],
[304,243,267,0,281,250,249,271,256,288],
[286,246,245,269,0,272,259,262,254,278],
[297,244,270,300,278,0,249,264,257,269],
[284,251,276,301,291,301,0,288,273,269],
[274,250,277,279,288,286,262,0,272,279],
[269,283,286,294,296,293,277,278,0,274],
[267,241,252,262,272,281,281,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,253,189,216,257,189,254,197,189],
[348,0,327,229,301,322,311,321,277,255],
[297,223,0,190,257,257,250,266,201,213],
[361,321,360,0,289,260,303,326,264,282],
[334,249,293,261,0,278,284,289,248,250],
[293,228,293,290,272,0,272,357,248,278],
[361,239,300,247,266,278,0,288,274,284],
[296,229,284,224,261,193,262,0,201,241],
[353,273,349,286,302,302,276,349,0,260],
[361,295,337,268,300,272,266,309,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,243,285,290,281,266,252,273,268],
[260,0,245,249,251,249,250,242,259,237],
[307,305,0,292,313,283,302,273,284,285],
[265,301,258,0,286,276,272,260,260,269],
[260,299,237,264,0,282,261,253,244,241],
[269,301,267,274,268,0,286,251,283,274],
[284,300,248,278,289,264,0,243,266,236],
[298,308,277,290,297,299,307,0,314,273],
[277,291,266,290,306,267,284,236,0,258],
[282,313,265,281,309,276,314,277,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,238,310,259,303,266,243,288,264],
[268,0,248,248,265,285,260,278,254,247],
[312,302,0,270,294,337,295,296,306,306],
[240,302,280,0,314,283,264,277,248,258],
[291,285,256,236,0,277,268,300,292,276],
[247,265,213,267,273,0,250,295,261,242],
[284,290,255,286,282,300,0,281,277,251],
[307,272,254,273,250,255,269,0,266,247],
[262,296,244,302,258,289,273,284,0,229],
[286,303,244,292,274,308,299,303,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,268,234,266,249,267,261,285,280],
[239,0,264,283,244,255,271,260,217,269],
[282,286,0,259,273,237,244,252,264,247],
[316,267,291,0,262,249,323,261,276,271],
[284,306,277,288,0,243,329,298,301,307],
[301,295,313,301,307,0,312,261,296,325],
[283,279,306,227,221,238,0,274,214,291],
[289,290,298,289,252,289,276,0,266,285],
[265,333,286,274,249,254,336,284,0,289],
[270,281,303,279,243,225,259,265,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,252,266,254,282,250,247,260,229],
[271,0,232,259,244,274,246,256,241,250],
[298,318,0,280,273,307,295,283,258,271],
[284,291,270,0,259,291,269,265,268,273],
[296,306,277,291,0,305,280,275,283,289],
[268,276,243,259,245,0,256,245,271,249],
[300,304,255,281,270,294,0,299,281,248],
[303,294,267,285,275,305,251,0,264,260],
[290,309,292,282,267,279,269,286,0,270],
[321,300,279,277,261,301,302,290,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,306,291,285,270,276,266,269,287],
[286,0,346,324,307,288,277,284,280,271],
[244,204,0,253,247,232,258,249,252,251],
[259,226,297,0,283,255,260,258,265,269],
[265,243,303,267,0,268,266,272,257,266],
[280,262,318,295,282,0,302,282,266,268],
[274,273,292,290,284,248,0,268,260,276],
[284,266,301,292,278,268,282,0,271,302],
[281,270,298,285,293,284,290,279,0,271],
[263,279,299,281,284,282,274,248,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,287,261,273,282,273,256,271],
[281,0,282,275,279,284,276,287,274,272],
[278,268,0,274,268,277,284,285,269,277],
[263,275,276,0,237,266,255,269,253,278],
[289,271,282,313,0,289,285,290,265,288],
[277,266,273,284,261,0,265,287,263,269],
[268,274,266,295,265,285,0,263,246,273],
[277,263,265,281,260,263,287,0,276,293],
[294,276,281,297,285,287,304,274,0,294],
[279,278,273,272,262,281,277,257,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,262,277,288,248,247,279,276],
[285,0,278,269,270,264,257,256,277,278],
[271,272,0,270,249,266,260,260,272,263],
[288,281,280,0,286,293,263,269,282,285],
[273,280,301,264,0,291,273,276,285,285],
[262,286,284,257,259,0,244,266,267,270],
[302,293,290,287,277,306,0,269,289,292],
[303,294,290,281,274,284,281,0,283,289],
[271,273,278,268,265,283,261,267,0,287],
[274,272,287,265,265,280,258,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,276,308,268,277,261,295,314,269],
[254,0,231,263,238,232,222,263,251,211],
[274,319,0,289,263,263,273,269,287,267],
[242,287,261,0,254,258,263,283,282,229],
[282,312,287,296,0,281,277,295,299,250],
[273,318,287,292,269,0,297,295,285,278],
[289,328,277,287,273,253,0,281,303,281],
[255,287,281,267,255,255,269,0,301,263],
[236,299,263,268,251,265,247,249,0,250],
[281,339,283,321,300,272,269,287,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,263,268,281,265,288,268,271,271],
[281,0,265,268,299,264,302,285,261,291],
[287,285,0,268,271,282,295,297,297,267],
[282,282,282,0,267,265,265,270,261,271],
[269,251,279,283,0,276,289,280,267,257],
[285,286,268,285,274,0,288,284,274,275],
[262,248,255,285,261,262,0,262,257,261],
[282,265,253,280,270,266,288,0,266,278],
[279,289,253,289,283,276,293,284,0,279],
[279,259,283,279,293,275,289,272,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,260,273,290,264,268,284,283],
[281,0,302,287,273,302,279,270,306,296],
[279,248,0,274,276,294,287,274,271,277],
[290,263,276,0,273,300,267,282,295,303],
[277,277,274,277,0,281,266,264,284,285],
[260,248,256,250,269,0,237,242,256,266],
[286,271,263,283,284,313,0,273,297,289],
[282,280,276,268,286,308,277,0,292,307],
[266,244,279,255,266,294,253,258,0,272],
[267,254,273,247,265,284,261,243,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,287,284,278,292,287,262,269,277],
[266,0,276,286,256,263,280,273,254,260],
[263,274,0,294,259,255,298,306,279,275],
[266,264,256,0,254,296,326,266,261,267],
[272,294,291,296,0,297,317,320,284,299],
[258,287,295,254,253,0,299,295,270,273],
[263,270,252,224,233,251,0,278,266,275],
[288,277,244,284,230,255,272,0,282,267],
[281,296,271,289,266,280,284,268,0,237],
[273,290,275,283,251,277,275,283,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,284,277,298,272,296,296,278],
[286,0,289,285,252,290,289,293,297,277],
[269,261,0,281,260,289,273,294,294,269],
[266,265,269,0,258,284,266,291,287,266],
[273,298,290,292,0,297,288,315,301,277],
[252,260,261,266,253,0,268,284,258,265],
[278,261,277,284,262,282,0,305,290,279],
[254,257,256,259,235,266,245,0,271,269],
[254,253,256,263,249,292,260,279,0,263],
[272,273,281,284,273,285,271,281,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,279,277,269,262,296,277,261,285],
[286,0,285,260,277,266,279,283,272,281],
[271,265,0,252,268,239,268,275,275,239],
[273,290,298,0,277,277,293,279,292,282],
[281,273,282,273,0,272,290,274,292,274],
[288,284,311,273,278,0,302,266,277,275],
[254,271,282,257,260,248,0,271,266,253],
[273,267,275,271,276,284,279,0,283,265],
[289,278,275,258,258,273,284,267,0,279],
[265,269,311,268,276,275,297,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,240,252,301,266,311,241,274,271],
[295,0,291,283,307,261,283,253,263,250],
[310,259,0,277,305,261,304,268,285,266],
[298,267,273,0,272,271,312,284,286,283],
[249,243,245,278,0,222,286,233,240,262],
[284,289,289,279,328,0,299,273,287,279],
[239,267,246,238,264,251,0,226,285,248],
[309,297,282,266,317,277,324,0,303,294],
[276,287,265,264,310,263,265,247,0,261],
[279,300,284,267,288,271,302,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,280,259,290,279,276,283,285,295],
[256,0,277,278,258,280,275,277,278,266],
[270,273,0,284,251,284,273,265,282,283],
[291,272,266,0,277,281,275,269,289,292],
[260,292,299,273,0,280,286,262,283,288],
[271,270,266,269,270,0,281,248,281,280],
[274,275,277,275,264,269,0,263,273,284],
[267,273,285,281,288,302,287,0,273,285],
[265,272,268,261,267,269,277,277,0,262],
[255,284,267,258,262,270,266,265,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,224,267,270,256,266,222,293,253],
[265,0,218,275,263,288,282,250,287,227],
[326,332,0,285,298,272,302,265,329,287],
[283,275,265,0,317,250,217,251,258,221],
[280,287,252,233,0,227,249,204,259,192],
[294,262,278,300,323,0,275,262,321,259],
[284,268,248,333,301,275,0,257,328,261],
[328,300,285,299,346,288,293,0,299,259],
[257,263,221,292,291,229,222,251,0,262],
[297,323,263,329,358,291,289,291,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,283,234,330,281,264,265,299,299],
[267,0,282,264,317,266,269,275,250,312],
[267,268,0,225,299,264,277,296,268,257],
[316,286,325,0,343,267,283,319,307,330],
[220,233,251,207,0,214,232,237,235,242],
[269,284,286,283,336,0,303,287,308,322],
[286,281,273,267,318,247,0,296,276,290],
[285,275,254,231,313,263,254,0,261,285],
[251,300,282,243,315,242,274,289,0,299],
[251,238,293,220,308,228,260,265,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,273,269,263,264,281,263,281],
[278,0,267,285,261,276,254,259,252,247],
[267,283,0,282,272,261,247,260,267,254],
[277,265,268,0,264,256,253,255,245,251],
[281,289,278,286,0,276,263,279,257,257],
[287,274,289,294,274,0,272,267,277,253],
[286,296,303,297,287,278,0,268,280,267],
[269,291,290,295,271,283,282,0,268,264],
[287,298,283,305,293,273,270,282,0,282],
[269,303,296,299,293,297,283,286,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,298,271,264,252,282,291,274,285],
[294,0,281,272,283,277,279,283,284,285],
[252,269,0,258,260,247,266,258,261,283],
[279,278,292,0,283,266,277,276,273,290],
[286,267,290,267,0,261,277,287,253,284],
[298,273,303,284,289,0,287,280,279,293],
[268,271,284,273,273,263,0,273,276,285],
[259,267,292,274,263,270,277,0,273,279],
[276,266,289,277,297,271,274,277,0,275],
[265,265,267,260,266,257,265,271,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,261,264,224,356,346,282,284,261],
[280,0,258,225,221,316,291,281,271,268],
[289,292,0,303,260,387,345,368,343,331],
[286,325,247,0,283,405,391,323,356,365],
[326,329,290,267,0,331,337,287,301,360],
[194,234,163,145,219,0,257,243,215,191],
[204,259,205,159,213,293,0,248,250,276],
[268,269,182,227,263,307,302,0,245,279],
[266,279,207,194,249,335,300,305,0,253],
[289,282,219,185,190,359,274,271,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,283,284,268,277,294,285,267,285],
[289,0,299,293,266,272,274,304,280,290],
[267,251,0,294,282,284,288,280,259,272],
[266,257,256,0,249,262,281,278,277,275],
[282,284,268,301,0,277,290,278,264,285],
[273,278,266,288,273,0,291,292,261,288],
[256,276,262,269,260,259,0,286,257,286],
[265,246,270,272,272,258,264,0,256,287],
[283,270,291,273,286,289,293,294,0,307],
[265,260,278,275,265,262,264,263,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,264,311,285,273,261,282,302],
[280,0,268,267,296,277,274,256,278,284],
[264,282,0,271,299,261,269,275,268,280],
[286,283,279,0,295,286,277,265,308,291],
[239,254,251,255,0,250,247,242,271,273],
[265,273,289,264,300,0,271,272,278,282],
[277,276,281,273,303,279,0,283,284,306],
[289,294,275,285,308,278,267,0,285,294],
[268,272,282,242,279,272,266,265,0,276],
[248,266,270,259,277,268,244,256,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,264,270,283,300,282,280,274,281],
[274,0,270,272,281,281,275,266,280,288],
[286,280,0,269,279,296,276,268,278,281],
[280,278,281,0,290,302,295,272,283,272],
[267,269,271,260,0,280,278,244,280,265],
[250,269,254,248,270,0,266,278,276,252],
[268,275,274,255,272,284,0,256,271,262],
[270,284,282,278,306,272,294,0,290,291],
[276,270,272,267,270,274,279,260,0,273],
[269,262,269,278,285,298,288,259,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,308,267,272,263,288,297,281],
[276,0,270,295,290,266,273,284,297,279],
[275,280,0,315,285,282,275,292,295,303],
[242,255,235,0,257,262,250,272,263,257],
[283,260,265,293,0,250,259,280,262,294],
[278,284,268,288,300,0,298,309,284,299],
[287,277,275,300,291,252,0,279,281,300],
[262,266,258,278,270,241,271,0,286,277],
[253,253,255,287,288,266,269,264,0,289],
[269,271,247,293,256,251,250,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,289,277,286,265,282,291,290,291],
[266,0,267,259,273,280,275,296,296,277],
[261,283,0,268,270,259,269,272,280,285],
[273,291,282,0,277,284,301,296,291,286],
[264,277,280,273,0,263,272,261,271,264],
[285,270,291,266,287,0,293,290,291,293],
[268,275,281,249,278,257,0,283,283,272],
[259,254,278,254,289,260,267,0,291,275],
[260,254,270,259,279,259,267,259,0,268],
[259,273,265,264,286,257,278,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,294,278,277,280,270,280,283],
[279,0,270,285,286,249,281,275,283,263],
[279,280,0,284,280,260,255,259,261,262],
[256,265,266,0,275,257,262,259,274,245],
[272,264,270,275,0,246,248,265,271,254],
[273,301,290,293,304,0,280,274,295,265],
[270,269,295,288,302,270,0,268,284,273],
[280,275,291,291,285,276,282,0,290,271],
[270,267,289,276,279,255,266,260,0,257],
[267,287,288,305,296,285,277,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,290,294,272,311,297,287,311,290],
[277,0,263,300,288,300,302,281,285,285],
[260,287,0,267,256,252,273,251,290,246],
[256,250,283,0,242,273,304,291,294,264],
[278,262,294,308,0,281,291,272,293,255],
[239,250,298,277,269,0,265,274,306,244],
[253,248,277,246,259,285,0,272,274,277],
[263,269,299,259,278,276,278,0,307,266],
[239,265,260,256,257,244,276,243,0,253],
[260,265,304,286,295,306,273,284,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,431,368,267,349,308,309,328,309],
[262,0,387,389,307,366,346,347,285,326],
[119,163,0,245,143,188,202,205,183,263],
[182,161,305,0,121,122,101,206,164,223],
[283,243,407,429,0,282,263,307,305,284],
[201,184,362,428,268,0,223,307,266,304],
[242,204,348,449,287,327,0,308,304,266],
[241,203,345,344,243,243,242,0,241,324],
[222,265,367,386,245,284,246,309,0,285],
[241,224,287,327,266,246,284,226,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,289,242,266,277,269,253,240,279],
[276,0,312,269,269,292,276,278,258,305],
[261,238,0,220,244,261,252,248,247,260],
[308,281,330,0,276,285,294,294,275,308],
[284,281,306,274,0,284,257,272,280,286],
[273,258,289,265,266,0,281,270,255,291],
[281,274,298,256,293,269,0,272,260,297],
[297,272,302,256,278,280,278,0,264,291],
[310,292,303,275,270,295,290,286,0,298],
[271,245,290,242,264,259,253,259,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,272,286,313,313,282,267,300,288],
[252,0,268,256,289,290,259,255,273,251],
[278,282,0,266,298,288,258,254,282,251],
[264,294,284,0,295,298,259,274,299,288],
[237,261,252,255,0,286,245,231,235,265],
[237,260,262,252,264,0,270,258,245,244],
[268,291,292,291,305,280,0,277,278,274],
[283,295,296,276,319,292,273,0,289,260],
[250,277,268,251,315,305,272,261,0,263],
[262,299,299,262,285,306,276,290,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,298,271,278,309,273,290,268],
[262,0,273,273,248,245,273,256,265,280],
[275,277,0,281,274,254,286,247,270,262],
[252,277,269,0,255,267,273,246,259,270],
[279,302,276,295,0,275,293,257,251,265],
[272,305,296,283,275,0,300,250,279,271],
[241,277,264,277,257,250,0,237,262,246],
[277,294,303,304,293,300,313,0,285,256],
[260,285,280,291,299,271,288,265,0,260],
[282,270,288,280,285,279,304,294,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,256,274,255,263,268,262,268,256],
[304,0,281,294,291,280,292,265,319,272],
[294,269,0,281,281,275,283,263,284,260],
[276,256,269,0,272,273,258,264,282,265],
[295,259,269,278,0,273,281,261,282,270],
[287,270,275,277,277,0,275,258,295,272],
[282,258,267,292,269,275,0,257,283,277],
[288,285,287,286,289,292,293,0,305,272],
[282,231,266,268,268,255,267,245,0,271],
[294,278,290,285,280,278,273,278,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,269,257,261,218,257,274,272,264],
[331,0,244,243,278,255,256,261,255,323],
[281,306,0,256,291,254,274,296,270,294],
[293,307,294,0,300,294,314,308,266,285],
[289,272,259,250,0,221,252,269,219,309],
[332,295,296,256,329,0,273,314,314,286],
[293,294,276,236,298,277,0,285,249,274],
[276,289,254,242,281,236,265,0,235,268],
[278,295,280,284,331,236,301,315,0,288],
[286,227,256,265,241,264,276,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,344,244,240,339,293,293,256,270],
[287,0,303,223,265,290,317,250,248,272],
[206,247,0,231,271,257,266,266,260,267],
[306,327,319,0,256,309,285,308,288,281],
[310,285,279,294,0,260,302,241,288,258],
[211,260,293,241,290,0,252,270,259,242],
[257,233,284,265,248,298,0,325,271,272],
[257,300,284,242,309,280,225,0,263,243],
[294,302,290,262,262,291,279,287,0,272],
[280,278,283,269,292,308,278,307,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,270,289,284,305,280,276,289,278],
[255,0,285,275,272,286,287,273,258,261],
[280,265,0,280,276,285,274,254,266,268],
[261,275,270,0,283,281,280,259,259,272],
[266,278,274,267,0,292,290,255,282,268],
[245,264,265,269,258,0,286,257,280,256],
[270,263,276,270,260,264,0,253,273,256],
[274,277,296,291,295,293,297,0,290,286],
[261,292,284,291,268,270,277,260,0,271],
[272,289,282,278,282,294,294,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,265,265,267,293,283,247,259,259],
[260,0,250,258,245,263,265,253,244,255],
[285,300,0,276,284,299,299,261,287,278],
[285,292,274,0,281,281,283,270,268,272],
[283,305,266,269,0,268,278,254,257,282],
[257,287,251,269,282,0,271,275,259,264],
[267,285,251,267,272,279,0,247,264,256],
[303,297,289,280,296,275,303,0,275,280],
[291,306,263,282,293,291,286,275,0,282],
[291,295,272,278,268,286,294,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,260,240,269,252,248,262,252,263],
[273,0,263,239,278,246,236,244,251,273],
[290,287,0,228,293,256,260,230,233,267],
[310,311,322,0,327,312,298,272,326,325],
[281,272,257,223,0,250,249,253,262,320],
[298,304,294,238,300,0,276,260,266,302],
[302,314,290,252,301,274,0,296,298,314],
[288,306,320,278,297,290,254,0,284,327],
[298,299,317,224,288,284,252,266,0,294],
[287,277,283,225,230,248,236,223,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,290,271,285,299,257,278,278,284],
[286,0,268,256,281,247,256,270,268,285],
[260,282,0,265,291,305,285,252,285,303],
[279,294,285,0,291,308,275,297,287,312],
[265,269,259,259,0,270,243,248,274,272],
[251,303,245,242,280,0,247,240,255,269],
[293,294,265,275,307,303,0,299,292,312],
[272,280,298,253,302,310,251,0,273,294],
[272,282,265,263,276,295,258,277,0,306],
[266,265,247,238,278,281,238,256,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,286,241,247,257,246,255,269],
[271,0,294,289,250,280,222,247,254,249],
[267,256,0,304,277,292,259,268,265,277],
[264,261,246,0,239,272,227,267,242,261],
[309,300,273,311,0,285,277,276,292,290],
[303,270,258,278,265,0,231,249,275,278],
[293,328,291,323,273,319,0,274,284,310],
[304,303,282,283,274,301,276,0,260,268],
[295,296,285,308,258,275,266,290,0,288],
[281,301,273,289,260,272,240,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,278,251,273,271,270,285,263,276],
[278,0,294,277,268,259,278,275,275,292],
[272,256,0,262,284,265,264,287,265,268],
[299,273,288,0,259,269,276,275,262,300],
[277,282,266,291,0,272,283,282,269,292],
[279,291,285,281,278,0,277,290,263,282],
[280,272,286,274,267,273,0,274,250,271],
[265,275,263,275,268,260,276,0,260,280],
[287,275,285,288,281,287,300,290,0,303],
[274,258,282,250,258,268,279,270,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,292,267,263,294,271,270,300,250],
[288,0,312,266,291,311,270,280,306,273],
[258,238,0,244,266,263,250,259,273,245],
[283,284,306,0,289,308,272,277,296,290],
[287,259,284,261,0,296,266,276,294,253],
[256,239,287,242,254,0,256,251,272,263],
[279,280,300,278,284,294,0,276,295,259],
[280,270,291,273,274,299,274,0,277,279],
[250,244,277,254,256,278,255,273,0,250],
[300,277,305,260,297,287,291,271,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,278,288,282,279,261,288,267,259],
[279,0,281,265,288,266,255,278,284,266],
[272,269,0,259,295,256,262,264,258,273],
[262,285,291,0,295,277,269,290,267,286],
[268,262,255,255,0,278,261,272,254,273],
[271,284,294,273,272,0,280,295,258,282],
[289,295,288,281,289,270,0,276,285,299],
[262,272,286,260,278,255,274,0,245,262],
[283,266,292,283,296,292,265,305,0,287],
[291,284,277,264,277,268,251,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,248,256,200,286,301,240,253,292],
[251,0,239,225,201,259,285,222,252,227],
[302,311,0,263,281,308,289,237,280,265],
[294,325,287,0,265,324,297,250,255,322],
[350,349,269,285,0,382,294,295,300,341],
[264,291,242,226,168,0,226,197,239,256],
[249,265,261,253,256,324,0,254,268,239],
[310,328,313,300,255,353,296,0,282,300],
[297,298,270,295,250,311,282,268,0,258],
[258,323,285,228,209,294,311,250,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,273,265,266,325,247,301,254,285],
[296,0,331,284,316,355,273,297,263,349],
[277,219,0,286,242,310,247,241,264,279],
[285,266,264,0,268,334,265,332,270,259],
[284,234,308,282,0,354,283,284,246,288],
[225,195,240,216,196,0,176,259,210,236],
[303,277,303,285,267,374,0,306,275,350],
[249,253,309,218,266,291,244,0,261,294],
[296,287,286,280,304,340,275,289,0,292],
[265,201,271,291,262,314,200,256,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,275,299,290,301,281,281,289],
[267,0,269,270,292,284,285,272,265,255],
[278,281,0,277,289,281,277,260,262,270],
[275,280,273,0,278,288,282,279,263,260],
[251,258,261,272,0,273,281,256,245,269],
[260,266,269,262,277,0,274,238,239,256],
[249,265,273,268,269,276,0,261,250,263],
[269,278,290,271,294,312,289,0,263,293],
[269,285,288,287,305,311,300,287,0,281],
[261,295,280,290,281,294,287,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,286,279,285,282,293,275,275],
[262,0,278,272,271,281,274,288,274,288],
[284,272,0,281,296,283,291,293,298,289],
[264,278,269,0,284,280,268,288,284,274],
[271,279,254,266,0,244,271,265,275,270],
[265,269,267,270,306,0,279,298,269,259],
[268,276,259,282,279,271,0,288,269,277],
[257,262,257,262,285,252,262,0,259,267],
[275,276,252,266,275,281,281,291,0,273],
[275,262,261,276,280,291,273,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,273,330,273,424,302,325,378,302],
[247,0,245,324,270,375,300,248,375,250],
[277,305,0,404,273,376,228,275,330,305],
[220,226,146,0,199,321,175,223,301,202],
[277,280,277,351,0,401,280,303,354,230],
[126,175,174,229,149,0,203,198,254,176],
[248,250,322,375,270,347,0,296,401,276],
[225,302,275,327,247,352,254,0,353,252],
[172,175,220,249,196,296,149,197,0,276],
[248,300,245,348,320,374,274,298,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,283,306,280,281,301,289,271,290],
[249,0,265,284,262,292,270,282,270,263],
[267,285,0,262,251,288,283,268,284,279],
[244,266,288,0,262,276,277,256,278,268],
[270,288,299,288,0,290,278,281,290,266],
[269,258,262,274,260,0,277,270,276,273],
[249,280,267,273,272,273,0,287,276,264],
[261,268,282,294,269,280,263,0,266,291],
[279,280,266,272,260,274,274,284,0,268],
[260,287,271,282,284,277,286,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,281,309,275,279,286,286,307,287],
[247,0,273,288,260,286,287,242,287,267],
[269,277,0,269,271,265,289,225,297,287],
[241,262,281,0,246,258,281,243,283,275],
[275,290,279,304,0,284,300,262,317,286],
[271,264,285,292,266,0,284,254,297,291],
[264,263,261,269,250,266,0,259,270,256],
[264,308,325,307,288,296,291,0,321,281],
[243,263,253,267,233,253,280,229,0,263],
[263,283,263,275,264,259,294,269,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,299,269,281,288,282,295,287],
[273,0,283,291,263,293,290,283,277,256],
[265,267,0,288,280,264,277,280,260,261],
[251,259,262,0,269,279,275,271,263,244],
[281,287,270,281,0,284,288,280,284,277],
[269,257,286,271,266,0,280,287,266,269],
[262,260,273,275,262,270,0,284,258,259],
[268,267,270,279,270,263,266,0,277,256],
[255,273,290,287,266,284,292,273,0,270],
[263,294,289,306,273,281,291,294,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,293,266,329,297,277,311,274,286],
[248,0,321,274,287,282,259,288,273,266],
[257,229,0,235,249,259,259,279,233,222],
[284,276,315,0,292,280,278,309,248,280],
[221,263,301,258,0,248,252,299,231,236],
[253,268,291,270,302,0,251,285,264,266],
[273,291,291,272,298,299,0,292,279,287],
[239,262,271,241,251,265,258,0,250,233],
[276,277,317,302,319,286,271,300,0,282],
[264,284,328,270,314,284,263,317,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,288,316,253,285,256,279,275,297],
[277,0,281,312,248,292,247,246,292,301],
[262,269,0,297,250,285,238,242,281,274],
[234,238,253,0,226,241,217,241,247,238],
[297,302,300,324,0,302,275,278,298,328],
[265,258,265,309,248,0,258,275,279,306],
[294,303,312,333,275,292,0,265,318,316],
[271,304,308,309,272,275,285,0,307,292],
[275,258,269,303,252,271,232,243,0,289],
[253,249,276,312,222,244,234,258,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,265,266,269,270,280,253,277],
[291,0,294,273,275,280,276,288,275,282],
[275,256,0,265,259,262,272,269,254,265],
[285,277,285,0,288,279,279,289,271,284],
[284,275,291,262,0,260,269,275,261,278],
[281,270,288,271,290,0,287,284,271,284],
[280,274,278,271,281,263,0,286,262,279],
[270,262,281,261,275,266,264,0,261,274],
[297,275,296,279,289,279,288,289,0,290],
[273,268,285,266,272,266,271,276,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,259,285,273,274,248,287,281],
[279,0,272,276,288,286,291,272,294,288],
[276,278,0,252,253,282,271,263,283,264],
[291,274,298,0,280,292,282,264,300,291],
[265,262,297,270,0,290,280,260,271,271],
[277,264,268,258,260,0,277,259,289,262],
[276,259,279,268,270,273,0,278,295,266],
[302,278,287,286,290,291,272,0,299,280],
[263,256,267,250,279,261,255,251,0,266],
[269,262,286,259,279,288,284,270,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,268,261,291,285,285,283,337],
[278,0,267,254,299,264,270,260,263,259],
[287,283,0,268,290,306,298,290,290,322],
[282,296,282,0,287,292,274,289,264,297],
[289,251,260,263,0,274,272,264,285,296],
[259,286,244,258,276,0,262,265,262,285],
[265,280,252,276,278,288,0,287,289,318],
[265,290,260,261,286,285,263,0,281,303],
[267,287,260,286,265,288,261,269,0,291],
[213,291,228,253,254,265,232,247,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,288,285,262,269,275,270,281],
[262,0,278,281,286,257,265,265,266,265],
[262,272,0,278,274,285,266,260,258,261],
[262,269,272,0,266,288,277,277,254,266],
[265,264,276,284,0,254,272,267,270,257],
[288,293,265,262,296,0,289,280,275,269],
[281,285,284,273,278,261,0,276,264,281],
[275,285,290,273,283,270,274,0,265,278],
[280,284,292,296,280,275,286,285,0,285],
[269,285,289,284,293,281,269,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,289,273,255,278,291,285,299,286],
[255,0,291,274,269,280,285,263,279,271],
[261,259,0,269,252,277,255,282,278,250],
[277,276,281,0,272,274,270,278,277,268],
[295,281,298,278,0,309,292,312,306,275],
[272,270,273,276,241,0,263,260,284,259],
[259,265,295,280,258,287,0,282,271,262],
[265,287,268,272,238,290,268,0,264,276],
[251,271,272,273,244,266,279,286,0,262],
[264,279,300,282,275,291,288,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,261,263,270,264,264,251,257,264],
[281,0,270,273,268,258,257,255,274,281],
[289,280,0,277,290,278,288,275,284,280],
[287,277,273,0,282,283,285,280,268,273],
[280,282,260,268,0,285,274,271,272,289],
[286,292,272,267,265,0,274,271,263,281],
[286,293,262,265,276,276,0,289,277,303],
[299,295,275,270,279,279,261,0,284,291],
[293,276,266,282,278,287,273,266,0,289],
[286,269,270,277,261,269,247,259,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,286,270,260,240,287,243,298],
[282,0,265,288,299,291,264,301,273,289],
[275,285,0,302,284,256,243,266,276,288],
[264,262,248,0,269,272,225,273,264,282],
[280,251,266,281,0,265,245,255,278,264],
[290,259,294,278,285,0,213,281,285,272],
[310,286,307,325,305,337,0,294,265,285],
[263,249,284,277,295,269,256,0,255,277],
[307,277,274,286,272,265,285,295,0,296],
[252,261,262,268,286,278,265,273,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,314,251,282,283,266,275,304,259],
[248,0,279,281,265,228,239,296,314,233],
[236,271,0,297,270,200,244,235,273,258],
[299,269,253,0,269,235,220,312,330,204],
[268,285,280,281,0,226,306,294,326,293],
[267,322,350,315,324,0,263,329,299,282],
[284,311,306,330,244,287,0,254,345,277],
[275,254,315,238,256,221,296,0,295,272],
[246,236,277,220,224,251,205,255,0,237],
[291,317,292,346,257,268,273,278,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,267,268,303,304,268,319,267,269],
[230,0,301,284,232,284,283,337,280,265],
[283,249,0,284,287,287,301,303,228,286],
[282,266,266,0,211,284,245,265,266,247],
[247,318,263,339,0,318,338,373,318,318],
[246,266,263,266,232,0,337,301,247,267],
[282,267,249,305,212,213,0,318,177,319],
[231,213,247,285,177,249,232,0,177,197],
[283,270,322,284,232,303,373,373,0,303],
[281,285,264,303,232,283,231,353,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,290,258,267,268,277,259,267,275],
[291,0,288,266,288,283,278,284,284,274],
[260,262,0,256,261,269,254,274,255,264],
[292,284,294,0,272,253,258,277,260,288],
[283,262,289,278,0,271,262,278,272,289],
[282,267,281,297,279,0,281,271,278,291],
[273,272,296,292,288,269,0,282,278,295],
[291,266,276,273,272,279,268,0,280,286],
[283,266,295,290,278,272,272,270,0,286],
[275,276,286,262,261,259,255,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,250,286,268,280,280,294,254,263],
[255,0,252,262,270,274,270,286,259,249],
[300,298,0,294,292,302,299,313,275,273],
[264,288,256,0,286,294,292,288,257,275],
[282,280,258,264,0,282,275,307,272,277],
[270,276,248,256,268,0,266,281,250,258],
[270,280,251,258,275,284,0,289,270,268],
[256,264,237,262,243,269,261,0,229,268],
[296,291,275,293,278,300,280,321,0,283],
[287,301,277,275,273,292,282,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,286,281,280,291,286,276,288,311],
[293,0,281,296,272,281,279,283,296,309],
[264,269,0,279,271,279,286,286,258,293],
[269,254,271,0,268,263,283,273,276,302],
[270,278,279,282,0,269,302,288,290,315],
[259,269,271,287,281,0,289,277,273,304],
[264,271,264,267,248,261,0,258,276,270],
[274,267,264,277,262,273,292,0,264,287],
[262,254,292,274,260,277,274,286,0,297],
[239,241,257,248,235,246,280,263,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,279,282,287,290,274,277,281],
[267,0,271,269,262,269,277,267,244,271],
[272,279,0,270,283,278,266,277,245,276],
[271,281,280,0,285,301,294,268,269,252],
[268,288,267,265,0,284,272,263,265,267],
[263,281,272,249,266,0,286,270,250,281],
[260,273,284,256,278,264,0,254,251,278],
[276,283,273,282,287,280,296,0,259,288],
[273,306,305,281,285,300,299,291,0,305],
[269,279,274,298,283,269,272,262,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,256,257,268,270,244,237,256,272],
[268,0,270,251,272,255,237,242,276,281],
[294,280,0,261,292,245,244,261,272,272],
[293,299,289,0,281,274,244,252,266,289],
[282,278,258,269,0,267,250,237,254,262],
[280,295,305,276,283,0,277,267,274,315],
[306,313,306,306,300,273,0,290,287,295],
[313,308,289,298,313,283,260,0,288,314],
[294,274,278,284,296,276,263,262,0,285],
[278,269,278,261,288,235,255,236,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,290,281,289,300,269,296,297],
[266,0,254,277,267,275,283,275,282,271],
[275,296,0,296,277,276,300,285,283,265],
[260,273,254,0,268,263,265,256,274,274],
[269,283,273,282,0,257,266,260,260,281],
[261,275,274,287,293,0,297,281,281,287],
[250,267,250,285,284,253,0,265,270,273],
[281,275,265,294,290,269,285,0,269,279],
[254,268,267,276,290,269,280,281,0,287],
[253,279,285,276,269,263,277,271,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,258,285,279,268,302,289,271,299],
[256,0,243,263,260,241,271,275,249,293],
[292,307,0,299,279,279,308,303,264,303],
[265,287,251,0,283,269,286,311,276,306],
[271,290,271,267,0,272,285,286,260,291],
[282,309,271,281,278,0,291,283,253,310],
[248,279,242,264,265,259,0,279,244,285],
[261,275,247,239,264,267,271,0,232,298],
[279,301,286,274,290,297,306,318,0,300],
[251,257,247,244,259,240,265,252,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,232,279,246,233,242,282,228,273],
[267,0,270,277,256,282,269,272,259,292],
[318,280,0,304,264,240,251,298,233,295],
[271,273,246,0,210,241,243,322,260,274],
[304,294,286,340,0,300,274,346,278,302],
[317,268,310,309,250,0,305,290,274,269],
[308,281,299,307,276,245,0,318,258,295],
[268,278,252,228,204,260,232,0,240,248],
[322,291,317,290,272,276,292,310,0,282],
[277,258,255,276,248,281,255,302,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,241,374,263,264,309,264,180],
[284,0,280,239,283,260,263,305,284,286],
[287,270,0,245,311,308,223,287,263,247],
[309,311,305,0,332,242,331,331,218,244],
[176,267,239,218,0,153,174,175,239,267],
[287,290,242,308,397,0,289,266,238,267],
[286,287,327,219,376,261,0,241,261,246],
[241,245,263,219,375,284,309,0,239,156],
[286,266,287,332,311,312,289,311,0,289],
[370,264,303,306,283,283,304,394,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,261,263,267,267,264,253,245],
[287,0,276,257,264,270,282,290,268,270],
[281,274,0,274,260,270,276,273,271,262],
[289,293,276,0,289,279,286,283,284,273],
[287,286,290,261,0,280,291,290,278,268],
[283,280,280,271,270,0,294,285,288,278],
[283,268,274,264,259,256,0,278,277,252],
[286,260,277,267,260,265,272,0,277,267],
[297,282,279,266,272,262,273,273,0,271],
[305,280,288,277,282,272,298,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,274,283,278,305,257,268,289,258],
[271,0,230,264,301,261,255,230,270,244],
[276,320,0,291,320,313,263,260,297,266],
[267,286,259,0,272,281,279,247,286,236],
[272,249,230,278,0,313,259,249,277,238],
[245,289,237,269,237,0,241,234,258,220],
[293,295,287,271,291,309,0,286,287,259],
[282,320,290,303,301,316,264,0,317,299],
[261,280,253,264,273,292,263,233,0,230],
[292,306,284,314,312,330,291,251,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,288,271,289,271,280,276,271],
[267,0,277,269,288,246,298,274,248,253],
[256,273,0,241,278,254,286,270,267,273],
[262,281,309,0,270,265,282,287,292,289],
[279,262,272,280,0,263,269,256,239,277],
[261,304,296,285,287,0,268,302,304,294],
[279,252,264,268,281,282,0,268,251,282],
[270,276,280,263,294,248,282,0,281,283],
[274,302,283,258,311,246,299,269,0,275],
[279,297,277,261,273,256,268,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,270,282,261,285,252,246,249,269],
[298,0,295,297,265,281,303,306,293,298],
[280,255,0,293,276,291,295,261,261,287],
[268,253,257,0,253,266,259,269,258,262],
[289,285,274,297,0,311,280,279,278,287],
[265,269,259,284,239,0,273,260,261,257],
[298,247,255,291,270,277,0,265,267,284],
[304,244,289,281,271,290,285,0,278,274],
[301,257,289,292,272,289,283,272,0,269],
[281,252,263,288,263,293,266,276,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,307,304,279,276,270,274,289,291],
[259,0,288,309,263,267,280,289,298,300],
[243,262,0,293,280,283,270,269,274,267],
[246,241,257,0,255,280,249,253,265,265],
[271,287,270,295,0,269,263,282,287,281],
[274,283,267,270,281,0,272,272,260,282],
[280,270,280,301,287,278,0,285,285,276],
[276,261,281,297,268,278,265,0,281,301],
[261,252,276,285,263,290,265,269,0,277],
[259,250,283,285,269,268,274,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,266,308,282,268,291,269,273,254],
[266,0,269,285,254,263,310,262,264,257],
[284,281,0,271,289,273,292,274,251,285],
[242,265,279,0,259,251,289,260,252,212],
[268,296,261,291,0,284,305,273,265,272],
[282,287,277,299,266,0,292,262,271,256],
[259,240,258,261,245,258,0,233,276,215],
[281,288,276,290,277,288,317,0,254,277],
[277,286,299,298,285,279,274,296,0,263],
[296,293,265,338,278,294,335,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,259,260,292,264,266,263,265,290],
[273,0,278,266,284,262,265,256,272,267],
[291,272,0,282,286,271,274,277,279,271],
[290,284,268,0,298,272,277,286,290,274],
[258,266,264,252,0,254,258,251,257,264],
[286,288,279,278,296,0,268,273,281,294],
[284,285,276,273,292,282,0,274,281,283],
[287,294,273,264,299,277,276,0,275,290],
[285,278,271,260,293,269,269,275,0,284],
[260,283,279,276,286,256,267,260,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,255,280,269,244,250,278,273,262],
[299,0,273,309,286,278,288,281,278,282],
[295,277,0,293,283,266,278,283,284,278],
[270,241,257,0,269,233,247,254,274,255],
[281,264,267,281,0,265,242,264,285,268],
[306,272,284,317,285,0,280,296,279,288],
[300,262,272,303,308,270,0,285,270,290],
[272,269,267,296,286,254,265,0,278,257],
[277,272,266,276,265,271,280,272,0,272],
[288,268,272,295,282,262,260,293,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,287,289,269,234,256,277,218,279],
[282,0,273,293,288,281,267,270,232,280],
[263,277,0,234,276,217,222,233,183,230],
[261,257,316,0,289,266,247,289,244,262],
[281,262,274,261,0,260,258,268,224,239],
[316,269,333,284,290,0,300,248,250,281],
[294,283,328,303,292,250,0,292,280,264],
[273,280,317,261,282,302,258,0,219,258],
[332,318,367,306,326,300,270,331,0,268],
[271,270,320,288,311,269,286,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,262,291,299,285,290,286,274],
[275,0,283,274,251,309,321,292,276,308],
[281,267,0,305,283,321,301,292,305,301],
[288,276,245,0,265,316,313,296,281,279],
[259,299,267,285,0,307,283,290,296,296],
[251,241,229,234,243,0,258,249,243,244],
[265,229,249,237,267,292,0,263,278,238],
[260,258,258,254,260,301,287,0,268,283],
[264,274,245,269,254,307,272,282,0,313],
[276,242,249,271,254,306,312,267,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,307,268,305,296,295,310,296,298],
[259,0,291,275,283,268,296,281,273,287],
[243,259,0,244,281,262,264,276,271,282],
[282,275,306,0,301,297,306,283,269,322],
[245,267,269,249,0,282,283,276,284,291],
[254,282,288,253,268,0,306,273,277,287],
[255,254,286,244,267,244,0,255,267,261],
[240,269,274,267,274,277,295,0,284,293],
[254,277,279,281,266,273,283,266,0,280],
[252,263,268,228,259,263,289,257,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,265,261,243,226,265,289,281,232],
[339,0,296,288,285,260,295,288,335,306],
[285,254,0,275,310,250,279,255,277,279],
[289,262,275,0,284,276,271,250,295,264],
[307,265,240,266,0,265,265,268,265,276],
[324,290,300,274,285,0,290,274,313,267],
[285,255,271,279,285,260,0,273,291,279],
[261,262,295,300,282,276,277,0,318,302],
[269,215,273,255,285,237,259,232,0,256],
[318,244,271,286,274,283,271,248,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,260,275,237,284,262,259,249,255],
[263,0,278,261,246,289,255,264,244,252],
[290,272,0,296,238,288,269,282,262,278],
[275,289,254,0,251,281,253,262,251,240],
[313,304,312,299,0,318,275,267,273,287],
[266,261,262,269,232,0,248,267,262,234],
[288,295,281,297,275,302,0,290,281,278],
[291,286,268,288,283,283,260,0,264,288],
[301,306,288,299,277,288,269,286,0,263],
[295,298,272,310,263,316,272,262,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,255,274,262,273,274,283,262,266],
[294,0,272,259,290,281,271,288,260,287],
[295,278,0,275,265,290,282,281,272,280],
[276,291,275,0,279,258,274,286,262,277],
[288,260,285,271,0,287,269,285,278,275],
[277,269,260,292,263,0,281,292,264,291],
[276,279,268,276,281,269,0,282,271,279],
[267,262,269,264,265,258,268,0,252,274],
[288,290,278,288,272,286,279,298,0,300],
[284,263,270,273,275,259,271,276,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,268,254,254,261,261,272,254,253],
[271,0,267,248,250,251,247,266,255,256],
[282,283,0,265,285,275,260,282,276,270],
[296,302,285,0,274,280,274,292,271,275],
[296,300,265,276,0,271,266,280,256,277],
[289,299,275,270,279,0,259,285,250,274],
[289,303,290,276,284,291,0,286,264,279],
[278,284,268,258,270,265,264,0,251,287],
[296,295,274,279,294,300,286,299,0,287],
[297,294,280,275,273,276,271,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,258,276,264,304,276,273,264,266],
[265,0,281,266,306,295,272,294,254,296],
[292,269,0,274,280,285,275,292,297,277],
[274,284,276,0,296,306,274,271,272,282],
[286,244,270,254,0,301,270,269,275,280],
[246,255,265,244,249,0,275,257,262,262],
[274,278,275,276,280,275,0,288,263,268],
[277,256,258,279,281,293,262,0,255,275],
[286,296,253,278,275,288,287,295,0,293],
[284,254,273,268,270,288,282,275,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,278,269,269,277,284,269,275],
[276,0,252,275,259,263,261,267,257,281],
[287,298,0,291,272,284,269,270,295,292],
[272,275,259,0,290,277,262,278,308,300],
[281,291,278,260,0,267,255,292,295,292],
[281,287,266,273,283,0,256,281,288,289],
[273,289,281,288,295,294,0,299,289,296],
[266,283,280,272,258,269,251,0,288,283],
[281,293,255,242,255,262,261,262,0,279],
[275,269,258,250,258,261,254,267,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,265,291,280,300,289,255,264,265],
[273,0,276,285,306,295,315,278,306,276],
[285,274,0,322,303,306,321,276,289,254],
[259,265,228,0,261,276,307,246,253,261],
[270,244,247,289,0,298,289,273,288,280],
[250,255,244,274,252,0,281,255,255,269],
[261,235,229,243,261,269,0,211,251,234],
[295,272,274,304,277,295,339,0,286,285],
[286,244,261,297,262,295,299,264,0,240],
[285,274,296,289,270,281,316,265,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,237,249,288,240,280,237,260],
[300,0,282,284,278,290,299,303,280,246],
[278,268,0,255,248,283,280,277,267,235],
[313,266,295,0,285,284,239,293,263,272],
[301,272,302,265,0,239,253,308,265,289],
[262,260,267,266,311,0,293,293,268,305],
[310,251,270,311,297,257,0,283,238,269],
[270,247,273,257,242,257,267,0,255,233],
[313,270,283,287,285,282,312,295,0,279],
[290,304,315,278,261,245,281,317,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,271,261,260,269,263,281,255],
[281,0,287,244,283,294,275,274,269,278],
[281,263,0,278,284,272,282,281,289,296],
[279,306,272,0,284,285,295,288,299,288],
[289,267,266,266,0,261,267,274,268,275],
[290,256,278,265,289,0,283,281,268,268],
[281,275,268,255,283,267,0,279,283,277],
[287,276,269,262,276,269,271,0,260,283],
[269,281,261,251,282,282,267,290,0,270],
[295,272,254,262,275,282,273,267,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,296,278,307,271,282,282,311,257],
[271,0,276,276,271,265,273,265,286,260],
[254,274,0,269,290,254,268,245,279,271],
[272,274,281,0,255,251,246,247,273,282],
[243,279,260,295,0,278,259,254,284,257],
[279,285,296,299,272,0,279,291,304,290],
[268,277,282,304,291,271,0,267,276,269],
[268,285,305,303,296,259,283,0,311,272],
[239,264,271,277,266,246,274,239,0,253],
[293,290,279,268,293,260,281,278,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,255,278,276,281,261,291,258],
[258,0,281,247,245,272,274,250,263,263],
[257,269,0,248,241,267,274,240,276,229],
[295,303,302,0,283,294,309,286,278,259],
[272,305,309,267,0,278,282,279,288,281],
[274,278,283,256,272,0,263,250,275,251],
[269,276,276,241,268,287,0,255,267,264],
[289,300,310,264,271,300,295,0,285,271],
[259,287,274,272,262,275,283,265,0,275],
[292,287,321,291,269,299,286,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,321,236,326,291,332,303,296,265],
[272,0,284,245,285,287,298,314,269,282],
[229,266,0,227,248,239,273,280,258,227],
[314,305,323,0,297,303,317,305,296,261],
[224,265,302,253,0,277,325,305,274,267],
[259,263,311,247,273,0,290,308,277,250],
[218,252,277,233,225,260,0,252,236,218],
[247,236,270,245,245,242,298,0,237,229],
[254,281,292,254,276,273,314,313,0,232],
[285,268,323,289,283,300,332,321,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,250,279,244,270,254,255,264],
[280,0,279,282,278,277,292,279,272,270],
[296,271,0,287,297,281,287,257,279,292],
[300,268,263,0,294,256,275,264,269,265],
[271,272,253,256,0,260,278,238,245,260],
[306,273,269,294,290,0,290,274,275,250],
[280,258,263,275,272,260,0,253,255,261],
[296,271,293,286,312,276,297,0,288,291],
[295,278,271,281,305,275,295,262,0,268],
[286,280,258,285,290,300,289,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,289,260,282,282,272,273,274,268],
[261,0,282,273,281,284,281,272,262,258],
[261,268,0,255,279,272,274,260,266,274],
[290,277,295,0,290,291,301,275,289,279],
[268,269,271,260,0,258,265,272,253,253],
[268,266,278,259,292,0,275,266,273,258],
[278,269,276,249,285,275,0,254,242,261],
[277,278,290,275,278,284,296,0,269,275],
[276,288,284,261,297,277,308,281,0,274],
[282,292,276,271,297,292,289,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,268,304,304,265,228,380,269,247],
[247,0,301,319,301,266,246,300,246,342],
[282,249,0,322,323,265,266,264,211,270],
[246,231,228,0,249,246,172,301,192,250],
[246,249,227,301,0,265,302,264,153,249],
[285,284,285,304,285,0,230,247,231,268],
[322,304,284,378,248,320,0,303,325,322],
[170,250,286,249,286,303,247,0,193,270],
[281,304,339,358,397,319,225,357,0,322],
[303,208,280,300,301,282,228,280,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,296,303,269,279,315,278,294,302],
[228,0,212,219,230,266,225,180,218,288],
[254,338,0,304,279,291,307,258,244,350],
[247,331,246,0,258,258,275,253,244,309],
[281,320,271,292,0,249,299,239,277,332],
[271,284,259,292,301,0,291,218,274,337],
[235,325,243,275,251,259,0,231,255,337],
[272,370,292,297,311,332,319,0,303,345],
[256,332,306,306,273,276,295,247,0,307],
[248,262,200,241,218,213,213,205,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,251,282,276,264,298,266,288],
[269,0,282,254,277,271,269,282,270,259],
[276,268,0,244,283,278,275,276,271,247],
[299,296,306,0,292,288,281,273,283,285],
[268,273,267,258,0,271,289,263,272,251],
[274,279,272,262,279,0,279,282,272,255],
[286,281,275,269,261,271,0,271,276,270],
[252,268,274,277,287,268,279,0,281,274],
[284,280,279,267,278,278,274,269,0,258],
[262,291,303,265,299,295,280,276,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,306,283,328,296,265,304,312,288],
[261,0,302,286,296,259,248,258,248,313],
[244,248,0,255,281,222,247,243,252,275],
[267,264,295,0,270,253,232,254,302,283],
[222,254,269,280,0,230,234,241,304,277],
[254,291,328,297,320,0,285,271,294,269],
[285,302,303,318,316,265,0,310,266,319],
[246,292,307,296,309,279,240,0,293,260],
[238,302,298,248,246,256,284,257,0,296],
[262,237,275,267,273,281,231,290,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,240,314,310,297,286,270,255,265],
[235,0,232,235,298,320,277,256,237,266],
[310,318,0,282,303,302,285,265,254,270],
[236,315,268,0,259,283,262,242,248,277],
[240,252,247,291,0,285,257,281,259,270],
[253,230,248,267,265,0,251,249,251,243],
[264,273,265,288,293,299,0,277,271,272],
[280,294,285,308,269,301,273,0,278,285],
[295,313,296,302,291,299,279,272,0,279],
[285,284,280,273,280,307,278,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,294,281,264,262,268,278,266,276],
[284,0,297,290,278,267,272,286,289,289],
[256,253,0,286,256,262,265,269,267,259],
[269,260,264,0,254,246,271,264,265,264],
[286,272,294,296,0,264,280,286,288,283],
[288,283,288,304,286,0,278,274,287,289],
[282,278,285,279,270,272,0,270,268,284],
[272,264,281,286,264,276,280,0,275,268],
[284,261,283,285,262,263,282,275,0,288],
[274,261,291,286,267,261,266,282,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,320,274,324,324,281,283,283,292],
[290,0,277,298,293,302,273,284,283,275],
[230,273,0,283,303,259,245,268,273,249],
[276,252,267,0,292,295,297,304,292,314],
[226,257,247,258,0,285,239,318,238,249],
[226,248,291,255,265,0,245,274,278,225],
[269,277,305,253,311,305,0,286,300,258],
[267,266,282,246,232,276,264,0,236,244],
[267,267,277,258,312,272,250,314,0,263],
[258,275,301,236,301,325,292,306,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,303,278,251,338,287,327,279,319],
[290,0,298,282,308,320,260,333,277,318],
[247,252,0,317,264,331,265,337,270,312],
[272,268,233,0,325,244,264,344,261,311],
[299,242,286,225,0,310,310,362,246,334],
[212,230,219,306,240,0,249,322,255,311],
[263,290,285,286,240,301,0,331,286,311],
[223,217,213,206,188,228,219,0,211,261],
[271,273,280,289,304,295,264,339,0,291],
[231,232,238,239,216,239,239,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,307,279,266,283,285,287,288,283],
[258,0,275,253,258,269,265,267,277,277],
[243,275,0,259,249,262,254,266,270,258],
[271,297,291,0,277,284,278,290,279,277],
[284,292,301,273,0,276,284,283,297,276],
[267,281,288,266,274,0,266,274,276,280],
[265,285,296,272,266,284,0,282,282,270],
[263,283,284,260,267,276,268,0,273,273],
[262,273,280,271,253,274,268,277,0,260],
[267,273,292,273,274,270,280,277,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,372,357,354,310,297,309,273,303,319],
[178,0,225,261,249,241,211,266,263,214],
[193,325,0,258,304,265,263,286,270,278],
[196,289,292,0,299,243,266,272,284,283],
[240,301,246,251,0,270,296,246,244,259],
[253,309,285,307,280,0,332,222,268,250],
[241,339,287,284,254,218,0,253,239,282],
[277,284,264,278,304,328,297,0,302,306],
[247,287,280,266,306,282,311,248,0,285],
[231,336,272,267,291,300,268,244,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,282,347,298,258,287,372,348,286],
[256,0,263,288,348,251,273,330,303,269],
[268,287,0,322,338,286,294,328,284,269],
[203,262,228,0,265,229,294,275,284,219],
[252,202,212,285,0,230,253,306,216,214],
[292,299,264,321,320,0,301,315,271,279],
[263,277,256,256,297,249,0,261,260,225],
[178,220,222,275,244,235,289,0,235,181],
[202,247,266,266,334,279,290,315,0,276],
[264,281,281,331,336,271,325,369,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,296,263,247,263,198,214,249,333],
[301,0,284,317,265,266,232,217,247,315],
[254,266,0,320,332,247,200,251,266,301],
[287,233,230,0,199,216,163,237,217,238],
[303,285,218,351,0,265,198,267,335,367],
[287,284,303,334,285,0,302,255,300,370],
[352,318,350,387,352,248,0,287,352,352],
[336,333,299,313,283,295,263,0,299,334],
[301,303,284,333,215,250,198,251,0,302],
[217,235,249,312,183,180,198,216,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,295,257,283,294,280,274,287,287],
[268,0,280,238,274,247,296,277,315,250],
[255,270,0,241,287,252,289,276,264,231],
[293,312,309,0,289,311,295,311,306,273],
[267,276,263,261,0,269,268,266,298,252],
[256,303,298,239,281,0,281,302,307,270],
[270,254,261,255,282,269,0,297,282,255],
[276,273,274,239,284,248,253,0,317,238],
[263,235,286,244,252,243,268,233,0,251],
[263,300,319,277,298,280,295,312,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,242,290,290,271,307,294,269,286],
[277,0,276,295,274,288,309,289,275,291],
[308,274,0,303,283,279,279,289,266,264],
[260,255,247,0,252,253,264,263,230,289],
[260,276,267,298,0,253,274,285,258,292],
[279,262,271,297,297,0,288,289,267,287],
[243,241,271,286,276,262,0,262,265,265],
[256,261,261,287,265,261,288,0,257,282],
[281,275,284,320,292,283,285,293,0,285],
[264,259,286,261,258,263,285,268,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,278,277,306,274,280,271,290,279],
[270,0,286,280,304,260,276,276,283,279],
[272,264,0,276,305,261,268,284,276,283],
[273,270,274,0,294,269,267,261,300,295],
[244,246,245,256,0,232,233,266,269,258],
[276,290,289,281,318,0,269,263,295,288],
[270,274,282,283,317,281,0,263,267,267],
[279,274,266,289,284,287,287,0,271,279],
[260,267,274,250,281,255,283,279,0,260],
[271,271,267,255,292,262,283,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,260,290,274,298,274,252,262,266],
[258,0,257,271,252,286,259,244,250,272],
[290,293,0,292,273,317,301,288,276,308],
[260,279,258,0,237,275,256,243,252,264],
[276,298,277,313,0,312,274,242,258,299],
[252,264,233,275,238,0,265,253,216,264],
[276,291,249,294,276,285,0,241,269,289],
[298,306,262,307,308,297,309,0,295,302],
[288,300,274,298,292,334,281,255,0,321],
[284,278,242,286,251,286,261,248,229,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,284,264,271,241,261,273,284,264],
[269,0,291,297,260,254,279,277,293,301],
[266,259,0,276,249,240,255,263,258,250],
[286,253,274,0,264,255,251,278,272,280],
[279,290,301,286,0,261,273,254,291,311],
[309,296,310,295,289,0,269,297,302,285],
[289,271,295,299,277,281,0,302,277,304],
[277,273,287,272,296,253,248,0,283,277],
[266,257,292,278,259,248,273,267,0,252],
[286,249,300,270,239,265,246,273,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,260,281,292,264,258,261,263],
[285,0,256,263,278,261,288,256,245,264],
[286,294,0,272,292,270,307,268,282,269],
[290,287,278,0,286,282,305,264,262,271],
[269,272,258,264,0,259,287,262,279,239],
[258,289,280,268,291,0,269,261,258,262],
[286,262,243,245,263,281,0,257,267,270],
[292,294,282,286,288,289,293,0,273,276],
[289,305,268,288,271,292,283,277,0,273],
[287,286,281,279,311,288,280,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,259,273,282,310,289,293,278,282],
[265,0,271,269,273,299,273,274,271,261],
[291,279,0,268,266,299,275,293,276,291],
[277,281,282,0,268,295,284,284,286,287],
[268,277,284,282,0,312,278,294,288,291],
[240,251,251,255,238,0,266,273,264,251],
[261,277,275,266,272,284,0,284,293,267],
[257,276,257,266,256,277,266,0,262,266],
[272,279,274,264,262,286,257,288,0,283],
[268,289,259,263,259,299,283,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,287,287,271,266,260,276,301,254],
[268,0,286,275,252,271,259,261,277,260],
[263,264,0,273,241,268,258,271,277,233],
[263,275,277,0,267,272,244,273,268,275],
[279,298,309,283,0,282,259,270,293,259],
[284,279,282,278,268,0,258,260,283,249],
[290,291,292,306,291,292,0,259,305,268],
[274,289,279,277,280,290,291,0,303,266],
[249,273,273,282,257,267,245,247,0,226],
[296,290,317,275,291,301,282,284,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,304,286,304,306,317,282,285,309],
[281,0,328,295,272,291,288,288,277,271],
[246,222,0,269,247,271,294,254,277,265],
[264,255,281,0,284,270,288,267,277,259],
[246,278,303,266,0,276,299,256,302,293],
[244,259,279,280,274,0,278,246,258,243],
[233,262,256,262,251,272,0,253,273,265],
[268,262,296,283,294,304,297,0,285,300],
[265,273,273,273,248,292,277,265,0,252],
[241,279,285,291,257,307,285,250,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,271,270,260,272,266,266,270,281],
[265,0,288,272,271,265,260,268,286,264],
[279,262,0,266,275,275,282,277,286,288],
[280,278,284,0,273,281,272,269,284,281],
[290,279,275,277,0,280,285,262,286,289],
[278,285,275,269,270,0,274,274,279,282],
[284,290,268,278,265,276,0,282,275,277],
[284,282,273,281,288,276,268,0,285,284],
[280,264,264,266,264,271,275,265,0,279],
[269,286,262,269,261,268,273,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,285,262,255,271,296,295,276,274],
[292,0,261,268,268,267,293,294,251,276],
[265,289,0,269,269,259,281,290,279,253],
[288,282,281,0,274,270,299,302,257,290],
[295,282,281,276,0,275,296,298,286,289],
[279,283,291,280,275,0,284,302,271,292],
[254,257,269,251,254,266,0,267,233,278],
[255,256,260,248,252,248,283,0,255,258],
[274,299,271,293,264,279,317,295,0,289],
[276,274,297,260,261,258,272,292,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,282,305,258,280,264,272,263],
[270,0,261,253,269,253,261,261,275,253],
[279,289,0,255,286,278,266,265,280,268],
[268,297,295,0,303,269,280,288,307,276],
[245,281,264,247,0,264,256,262,266,258],
[292,297,272,281,286,0,282,276,281,270],
[270,289,284,270,294,268,0,275,273,273],
[286,289,285,262,288,274,275,0,275,271],
[278,275,270,243,284,269,277,275,0,275],
[287,297,282,274,292,280,277,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,285,281,303,261,269,334,309,280],
[278,0,257,246,267,291,265,279,268,269],
[265,293,0,283,282,257,296,326,305,272],
[269,304,267,0,267,279,270,284,266,282],
[247,283,268,283,0,270,289,301,293,257],
[289,259,293,271,280,0,272,284,294,263],
[281,285,254,280,261,278,0,307,308,265],
[216,271,224,266,249,266,243,0,260,235],
[241,282,245,284,257,256,242,290,0,231],
[270,281,278,268,293,287,285,315,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,182,220,253,259,329,295,183,149],
[292,0,218,331,220,260,290,294,148,220],
[368,332,0,331,256,332,328,292,221,332],
[330,219,219,0,256,332,291,257,183,183],
[297,330,294,294,0,331,403,367,292,260],
[291,290,218,218,219,0,401,331,223,258],
[221,260,222,259,147,149,0,297,261,187],
[255,256,258,293,183,219,253,0,222,221],
[367,402,329,367,258,327,289,328,0,257],
[401,330,218,367,290,292,363,329,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,281,286,267,256,282,258,269,270],
[254,0,259,284,264,249,268,258,262,260],
[269,291,0,290,286,268,270,258,279,276],
[264,266,260,0,248,245,267,247,244,253],
[283,286,264,302,0,255,282,254,276,267],
[294,301,282,305,295,0,277,273,289,285],
[268,282,280,283,268,273,0,257,259,269],
[292,292,292,303,296,277,293,0,278,269],
[281,288,271,306,274,261,291,272,0,273],
[280,290,274,297,283,265,281,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([10, 550, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_10_550.csv", index=False, header=False)
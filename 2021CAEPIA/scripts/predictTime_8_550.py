
import numpy as np
import pandas as pd
import time
import kemeny.azzinimunda.azzinimunda3 as am3

rep = 3
results = np.zeros(0).reshape(0,7+rep)

##############################################################
om = np.array([
[0,269,266,244,272,262,271,271],
[281,0,275,286,281,264,262,274],
[284,275,0,273,269,280,283,269],
[306,264,277,0,268,272,268,278],
[278,269,281,282,0,268,276,275],
[288,286,270,278,282,0,273,269],
[279,288,267,282,274,277,0,282],
[279,276,281,272,275,281,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,268,270,277,274,273,268],
[282,0,268,266,288,305,254,264],
[282,282,0,276,300,292,276,270],
[280,284,274,0,302,277,274,272],
[273,262,250,248,0,278,261,259],
[276,245,258,273,272,0,259,260],
[277,296,274,276,289,291,0,275],
[282,286,280,278,291,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 2, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,279,273,287,310,277],
[272,0,298,275,289,275,304,265],
[266,252,0,257,283,284,279,257],
[271,275,293,0,279,286,309,267],
[277,261,267,271,0,284,317,267],
[263,275,266,264,266,0,295,260],
[240,246,271,241,233,255,0,234],
[273,285,293,283,283,290,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 3, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,257,263,274,297,265,309],
[287,0,279,262,276,294,262,295],
[293,271,0,259,269,295,255,296],
[287,288,291,0,291,300,273,296],
[276,274,281,259,0,301,277,268],
[253,256,255,250,249,0,242,272],
[285,288,295,277,273,308,0,299],
[241,255,254,254,282,278,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 4, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,277,277,281,287,286,280],
[281,0,287,276,290,268,296,291],
[273,263,0,257,280,274,266,290],
[273,274,293,0,285,273,294,300],
[269,260,270,265,0,257,258,269],
[263,282,276,277,293,0,278,303],
[264,254,284,256,292,272,0,281],
[270,259,260,250,281,247,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 5, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,237,224,248,232,264,267],
[285,0,267,273,245,281,297,273],
[313,283,0,260,292,265,288,301],
[326,277,290,0,266,278,309,276],
[302,305,258,284,0,308,290,312],
[318,269,285,272,242,0,292,302],
[286,253,262,241,260,258,0,254],
[283,277,249,274,238,248,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 6, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,269,288,273,279,289],
[284,0,263,279,281,272,268,290],
[272,287,0,285,274,280,256,282],
[281,271,265,0,269,268,252,282],
[262,269,276,281,0,258,234,255],
[277,278,270,282,292,0,250,277],
[271,282,294,298,316,300,0,284],
[261,260,268,268,295,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 7, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,266,292,306,273,276,295],
[252,0,294,264,297,269,271,279],
[284,256,0,267,291,250,285,283],
[258,286,283,0,307,290,288,282],
[244,253,259,243,0,229,266,253],
[277,281,300,260,321,0,301,289],
[274,279,265,262,284,249,0,282],
[255,271,267,268,297,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 8, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,292,264,272,267,272,273],
[273,0,288,269,257,277,265,265],
[258,262,0,260,246,258,261,273],
[286,281,290,0,278,271,269,279],
[278,293,304,272,0,279,275,273],
[283,273,292,279,271,0,288,265],
[278,285,289,281,275,262,0,279],
[277,285,277,271,277,285,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 9, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,277,270,273,276,285,294],
[259,0,276,257,253,275,258,286],
[273,274,0,284,282,271,269,303],
[280,293,266,0,288,285,269,289],
[277,297,268,262,0,291,279,295],
[274,275,279,265,259,0,264,289],
[265,292,281,281,271,286,0,287],
[256,264,247,261,255,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 10, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,270,353,340,248,280],
[290,0,316,276,322,306,267,206],
[283,234,0,254,337,294,265,269],
[280,274,296,0,318,263,327,249],
[197,228,213,232,0,245,233,220],
[210,244,256,287,305,0,264,204],
[302,283,285,223,317,286,0,256],
[270,344,281,301,330,346,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 11, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,297,293,282,269,250,235],
[269,0,285,290,306,250,288,267],
[253,265,0,261,271,256,262,259],
[257,260,289,0,313,253,273,232],
[268,244,279,237,0,245,237,276],
[281,300,294,297,305,0,253,278],
[300,262,288,277,313,297,0,258],
[315,283,291,318,274,272,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 12, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,287,282,256,285,282,270],
[271,0,275,261,254,283,286,265],
[263,275,0,238,249,287,281,298],
[268,289,312,0,276,292,285,290],
[294,296,301,274,0,307,290,286],
[265,267,263,258,243,0,279,259],
[268,264,269,265,260,271,0,256],
[280,285,252,260,264,291,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 13, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,279,268,279,281,279,286],
[269,0,276,278,277,271,273,275],
[271,274,0,277,275,267,270,264],
[282,272,273,0,272,275,280,262],
[271,273,275,278,0,281,276,271],
[269,279,283,275,269,0,270,276],
[271,277,280,270,274,280,0,252],
[264,275,286,288,279,274,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 14, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,289,297,269,291,271,293],
[246,0,256,269,244,276,280,266],
[261,294,0,275,281,284,276,293],
[253,281,275,0,276,278,266,285],
[281,306,269,274,0,280,283,301],
[259,274,266,272,270,0,271,281],
[279,270,274,284,267,279,0,284],
[257,284,257,265,249,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 15, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,261,287,287,275,288,291],
[260,0,264,271,262,269,273,285],
[289,286,0,287,274,295,290,299],
[263,279,263,0,276,273,285,281],
[263,288,276,274,0,292,284,307],
[275,281,255,277,258,0,270,273],
[262,277,260,265,266,280,0,286],
[259,265,251,269,243,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 16, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,301,286,274,300,314,292],
[216,0,240,233,241,279,273,246],
[249,310,0,266,275,297,281,266],
[264,317,284,0,288,291,291,279],
[276,309,275,262,0,302,271,270],
[250,271,253,259,248,0,251,252],
[236,277,269,259,279,299,0,271],
[258,304,284,271,280,298,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 17, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,271,266,266,275,282,261],
[250,0,273,268,277,281,271,280],
[279,277,0,290,281,277,297,250],
[284,282,260,0,275,265,283,266],
[284,273,269,275,0,280,290,255],
[275,269,273,285,270,0,282,274],
[268,279,253,267,260,268,0,274],
[289,270,300,284,295,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 18, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,309,271,280,282,288,258],
[257,0,287,266,280,267,270,256],
[241,263,0,269,261,261,276,243],
[279,284,281,0,273,272,280,262],
[270,270,289,277,0,286,265,264],
[268,283,289,278,264,0,289,281],
[262,280,274,270,285,261,0,241],
[292,294,307,288,286,269,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 19, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,296,289,282,278,276,269],
[296,0,290,318,269,279,281,275],
[254,260,0,283,270,258,273,248],
[261,232,267,0,247,248,253,251],
[268,281,280,303,0,273,285,273],
[272,271,292,302,277,0,284,275],
[274,269,277,297,265,266,0,263],
[281,275,302,299,277,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 20, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,263,268,272,268,275,268],
[286,0,289,277,279,295,285,273],
[287,261,0,277,279,277,278,274],
[282,273,273,0,275,279,289,293],
[278,271,271,275,0,281,272,264],
[282,255,273,271,269,0,275,267],
[275,265,272,261,278,275,0,271],
[282,277,276,257,286,283,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 21, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,287,272,280,277,266],
[284,0,293,275,283,278,290,266],
[266,257,0,262,261,278,285,259],
[263,275,288,0,270,291,281,261],
[278,267,289,280,0,273,283,269],
[270,272,272,259,277,0,291,277],
[273,260,265,269,267,259,0,258],
[284,284,291,289,281,273,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 22, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,270,291,344,268,307,304],
[248,0,243,310,321,298,315,330],
[280,307,0,254,321,261,304,292],
[259,240,296,0,337,286,277,302],
[206,229,229,213,0,218,252,248],
[282,252,289,264,332,0,306,330],
[243,235,246,273,298,244,0,290],
[246,220,258,248,302,220,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 23, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,370,209,347,375,259,347,385],
[180,0,271,72,117,260,179,293],
[341,279,0,207,315,341,232,300],
[203,478,343,0,420,302,417,460],
[175,433,235,130,0,315,259,360],
[291,290,209,248,235,0,287,335],
[203,371,318,133,291,263,0,367],
[165,257,250,90,190,215,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 24, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,254,269,281,282,300],
[285,0,270,299,286,275,290,268],
[271,280,0,292,293,264,284,271],
[296,251,258,0,276,277,262,282],
[281,264,257,274,0,251,286,263],
[269,275,286,273,299,0,276,275],
[268,260,266,288,264,274,0,273],
[250,282,279,268,287,275,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 25, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,285,308,283,267,276,295],
[256,0,266,283,271,276,233,279],
[265,284,0,291,294,249,243,263],
[242,267,259,0,313,237,244,231],
[267,279,256,237,0,252,238,264],
[283,274,301,313,298,0,286,263],
[274,317,307,306,312,264,0,290],
[255,271,287,319,286,287,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 26, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,278,270,285,284,287,272],
[256,0,259,289,257,287,262,270],
[272,291,0,290,265,273,268,271],
[280,261,260,0,262,244,284,265],
[265,293,285,288,0,290,284,288],
[266,263,277,306,260,0,278,278],
[263,288,282,266,266,272,0,273],
[278,280,279,285,262,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 27, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,272,273,258,285,275],
[280,0,276,284,280,265,287,266],
[281,274,0,282,274,261,274,269],
[278,266,268,0,269,244,284,252],
[277,270,276,281,0,261,286,283],
[292,285,289,306,289,0,280,275],
[265,263,276,266,264,270,0,255],
[275,284,281,298,267,275,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 28, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,279,285,284,301,308,275],
[250,0,270,272,263,270,275,259],
[271,280,0,294,274,284,294,280],
[265,278,256,0,285,279,279,268],
[266,287,276,265,0,272,288,256],
[249,280,266,271,278,0,294,273],
[242,275,256,271,262,256,0,255],
[275,291,270,282,294,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 29, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,266,287,298,282,286,286],
[263,0,282,260,276,271,279,270],
[284,268,0,277,271,278,263,275],
[263,290,273,0,302,288,271,277],
[252,274,279,248,0,269,279,266],
[268,279,272,262,281,0,271,280],
[264,271,287,279,271,279,0,280],
[264,280,275,273,284,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 30, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,313,318,327,321,302,406],
[315,0,291,272,310,250,371,313],
[237,259,0,269,287,287,291,372],
[232,278,281,0,321,199,258,333],
[223,240,263,229,0,209,260,298],
[229,300,263,351,341,0,286,315],
[248,179,259,292,290,264,0,329],
[144,237,178,217,252,235,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 31, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,246,227,246,236,262,236],
[287,0,259,215,251,253,300,272],
[304,291,0,227,244,240,264,266],
[323,335,323,0,282,326,342,268],
[304,299,306,268,0,284,293,273],
[314,297,310,224,266,0,273,277],
[288,250,286,208,257,277,0,248],
[314,278,284,282,277,273,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 32, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,290,348,297,319,264,278],
[231,0,274,281,250,264,240,274],
[260,276,0,336,290,308,262,255],
[202,269,214,0,232,287,249,275],
[253,300,260,318,0,333,345,311],
[231,286,242,263,217,0,247,283],
[286,310,288,301,205,303,0,287],
[272,276,295,275,239,267,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 33, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,282,293,317,263,255,279],
[270,0,277,279,288,277,267,272],
[268,273,0,288,273,259,256,269],
[257,271,262,0,279,285,265,268],
[233,262,277,271,0,265,261,264],
[287,273,291,265,285,0,266,283],
[295,283,294,285,289,284,0,273],
[271,278,281,282,286,267,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 34, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,301,279,287,280,283,267],
[293,0,317,286,296,271,273,277],
[249,233,0,240,263,264,274,243],
[271,264,310,0,276,298,284,292],
[263,254,287,274,0,290,259,245],
[270,279,286,252,260,0,261,289],
[267,277,276,266,291,289,0,269],
[283,273,307,258,305,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 35, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,267,262,283,277,277,267],
[253,0,250,260,277,249,263,274],
[283,300,0,292,281,274,274,278],
[288,290,258,0,274,264,272,269],
[267,273,269,276,0,259,270,260],
[273,301,276,286,291,0,277,290],
[273,287,276,278,280,273,0,277],
[283,276,272,281,290,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 36, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,326,276,229,231,338,283],
[340,0,296,267,294,246,345,345],
[224,254,0,253,258,278,267,279],
[274,283,297,0,300,283,296,377],
[321,256,292,250,0,262,282,317],
[319,304,272,267,288,0,275,301],
[212,205,283,254,268,275,0,327],
[267,205,271,173,233,249,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 37, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,268,273,255,295,281],
[280,0,294,271,261,287,285,283],
[268,256,0,282,280,275,294,286],
[282,279,268,0,271,286,281,276],
[277,289,270,279,0,300,270,272],
[295,263,275,264,250,0,268,258],
[255,265,256,269,280,282,0,270],
[269,267,264,274,278,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 38, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,255,246,273,277,259],
[274,0,280,269,274,267,281,279],
[279,270,0,276,250,263,273,278],
[295,281,274,0,260,273,266,273],
[304,276,300,290,0,285,301,272],
[277,283,287,277,265,0,259,269],
[273,269,277,284,249,291,0,271],
[291,271,272,277,278,281,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 39, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,263,274,280,288,279,294],
[289,0,285,269,296,287,304,256],
[287,265,0,270,236,271,271,259],
[276,281,280,0,286,275,287,259],
[270,254,314,264,0,248,270,280],
[262,263,279,275,302,0,287,302],
[271,246,279,263,280,263,0,282],
[256,294,291,291,270,248,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 40, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,250,252,265,253,286,279],
[286,0,262,267,279,271,281,282],
[300,288,0,280,289,274,300,292],
[298,283,270,0,290,286,302,271],
[285,271,261,260,0,272,296,268],
[297,279,276,264,278,0,300,293],
[264,269,250,248,254,250,0,272],
[271,268,258,279,282,257,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 41, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,281,255,259,285,264],
[266,0,276,266,249,273,252,279],
[277,274,0,262,246,261,243,270],
[269,284,288,0,253,276,252,275],
[295,301,304,297,0,277,267,274],
[291,277,289,274,273,0,256,270],
[265,298,307,298,283,294,0,270],
[286,271,280,275,276,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 42, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,247,274,261,259,265,233],
[265,0,219,246,246,247,255,238],
[303,331,0,273,302,294,289,281],
[276,304,277,0,282,262,274,278],
[289,304,248,268,0,281,252,253],
[291,303,256,288,269,0,270,267],
[285,295,261,276,298,280,0,256],
[317,312,269,272,297,283,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 43, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,298,295,313,266,260],
[272,0,286,289,300,304,263,254],
[269,264,0,275,306,267,264,275],
[252,261,275,0,256,264,237,258],
[255,250,244,294,0,270,229,232],
[237,246,283,286,280,0,266,252],
[284,287,286,313,321,284,0,275],
[290,296,275,292,318,298,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 44, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,274,278,272,293,296],
[283,0,293,275,305,284,298,301],
[280,257,0,267,274,268,281,283],
[276,275,283,0,289,266,280,293],
[272,245,276,261,0,261,269,267],
[278,266,282,284,289,0,296,286],
[257,252,269,270,281,254,0,272],
[254,249,267,257,283,264,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 45, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,271,264,276,293,293],
[246,0,282,259,255,281,287,261],
[271,268,0,254,270,281,301,274],
[279,291,296,0,265,289,304,265],
[286,295,280,285,0,261,291,276],
[274,269,269,261,289,0,284,267],
[257,263,249,246,259,266,0,245],
[257,289,276,285,274,283,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 46, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,282,266,300,283,276],
[272,0,283,274,289,272,296,290],
[275,267,0,274,270,288,282,290],
[268,276,276,0,281,267,302,288],
[284,261,280,269,0,282,278,292],
[250,278,262,283,268,0,270,270],
[267,254,268,248,272,280,0,295],
[274,260,260,262,258,280,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 47, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,289,255,281,305,275,283],
[241,0,221,232,283,235,261,286],
[261,329,0,274,276,246,287,329],
[295,318,276,0,331,229,308,314],
[269,267,274,219,0,220,250,289],
[245,315,304,321,330,0,292,273],
[275,289,263,242,300,258,0,271],
[267,264,221,236,261,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 48, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,243,258,258,253,273,283],
[294,0,293,268,273,291,273,310],
[307,257,0,262,283,275,281,296],
[292,282,288,0,285,299,268,314],
[292,277,267,265,0,284,261,298],
[297,259,275,251,266,0,275,274],
[277,277,269,282,289,275,0,312],
[267,240,254,236,252,276,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 49, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,245,248,228,234,253,245],
[300,0,286,280,264,278,286,282],
[305,264,0,255,266,282,295,277],
[302,270,295,0,263,276,294,297],
[322,286,284,287,0,267,290,265],
[316,272,268,274,283,0,284,279],
[297,264,255,256,260,266,0,281],
[305,268,273,253,285,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 50, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,281,266,275,281,289,291],
[290,0,285,282,264,293,309,287],
[269,265,0,276,249,285,304,291],
[284,268,274,0,269,295,301,312],
[275,286,301,281,0,306,318,315],
[269,257,265,255,244,0,261,275],
[261,241,246,249,232,289,0,262],
[259,263,259,238,235,275,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 51, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,299,297,290,289,277],
[278,0,304,286,306,273,292,278],
[278,246,0,257,304,263,248,304],
[251,264,293,0,274,262,254,256],
[253,244,246,276,0,270,282,255],
[260,277,287,288,280,0,287,253],
[261,258,302,296,268,263,0,292],
[273,272,246,294,295,297,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 52, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,255,247,264,268,276,271],
[280,0,264,243,261,278,264,273],
[295,286,0,276,260,275,280,301],
[303,307,274,0,287,286,296,304],
[286,289,290,263,0,287,273,285],
[282,272,275,264,263,0,272,277],
[274,286,270,254,277,278,0,277],
[279,277,249,246,265,273,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 53, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,243,282,249,267,259,256],
[311,0,271,295,292,282,283,294],
[307,279,0,288,282,290,278,269],
[268,255,262,0,266,273,274,277],
[301,258,268,284,0,282,258,275],
[283,268,260,277,268,0,280,277],
[291,267,272,276,292,270,0,289],
[294,256,281,273,275,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 54, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,358,293,351,258,461,446,354],
[192,0,163,226,292,340,244,315],
[257,387,0,413,347,432,397,425],
[199,324,137,0,211,321,356,335],
[292,258,203,339,0,373,349,356],
[89,210,118,229,177,0,265,189],
[104,306,153,194,201,285,0,345],
[196,235,125,215,194,361,205,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 55, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,297,283,282,277,278],
[261,0,249,279,272,270,269,292],
[275,301,0,287,286,282,298,287],
[253,271,263,0,270,288,283,284],
[267,278,264,280,0,272,264,273],
[268,280,268,262,278,0,265,278],
[273,281,252,267,286,285,0,269],
[272,258,263,266,277,272,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 56, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,254,269,250,316,282,290],
[290,0,296,282,267,285,310,266],
[296,254,0,257,244,304,300,243],
[281,268,293,0,279,298,327,274],
[300,283,306,271,0,280,283,278],
[234,265,246,252,270,0,252,266],
[268,240,250,223,267,298,0,276],
[260,284,307,276,272,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 57, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,246,296,290,318,285,293],
[271,0,250,264,240,310,285,283],
[304,300,0,289,271,330,299,264],
[254,286,261,0,254,302,317,280],
[260,310,279,296,0,314,315,311],
[232,240,220,248,236,0,295,242],
[265,265,251,233,235,255,0,279],
[257,267,286,270,239,308,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 58, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,293,259,289,287,268,247],
[283,0,302,268,303,301,252,280],
[257,248,0,209,264,280,224,235],
[291,282,341,0,295,306,281,260],
[261,247,286,255,0,270,239,244],
[263,249,270,244,280,0,240,249],
[282,298,326,269,311,310,0,280],
[303,270,315,290,306,301,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 59, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,240,283,277,311,232,294],
[251,0,212,299,259,308,282,282],
[310,338,0,315,248,339,295,299],
[267,251,235,0,266,255,249,255],
[273,291,302,284,0,332,306,302],
[239,242,211,295,218,0,266,249],
[318,268,255,301,244,284,0,275],
[256,268,251,295,248,301,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 60, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,288,281,279,280,285,289],
[285,0,281,271,279,267,293,290],
[262,269,0,270,266,265,264,277],
[269,279,280,0,265,271,273,281],
[271,271,284,285,0,277,284,282],
[270,283,285,279,273,0,278,296],
[265,257,286,277,266,272,0,280],
[261,260,273,269,268,254,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 61, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,269,270,286,266,282,275],
[308,0,275,292,289,290,296,293],
[281,275,0,295,296,286,289,290],
[280,258,255,0,275,251,253,263],
[264,261,254,275,0,247,284,244],
[284,260,264,299,303,0,300,304],
[268,254,261,297,266,250,0,291],
[275,257,260,287,306,246,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 62, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,304,284,281,306,272,207],
[251,0,274,224,237,289,231,226],
[246,276,0,210,241,284,254,198],
[266,326,340,0,308,344,354,293],
[269,313,309,242,0,302,252,235],
[244,261,266,206,248,0,244,178],
[278,319,296,196,298,306,0,204],
[343,324,352,257,315,372,346,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 63, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,248,308,270,252,245,269],
[300,0,251,283,285,257,269,264],
[302,299,0,311,303,272,285,280],
[242,267,239,0,272,261,272,235],
[280,265,247,278,0,255,264,237],
[298,293,278,289,295,0,266,288],
[305,281,265,278,286,284,0,278],
[281,286,270,315,313,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 64, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,250,239,296,257,278,295],
[264,0,256,198,265,251,234,255],
[300,294,0,258,288,273,262,275],
[311,352,292,0,287,301,264,291],
[254,285,262,263,0,275,261,278],
[293,299,277,249,275,0,252,269],
[272,316,288,286,289,298,0,269],
[255,295,275,259,272,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 65, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,338,261,357,379,324,320,322],
[212,0,202,227,199,200,161,261],
[289,348,0,388,287,281,232,269],
[193,323,162,0,215,195,102,227],
[171,351,263,335,0,187,246,266],
[226,350,269,355,363,0,282,318],
[230,389,318,448,304,268,0,320],
[228,289,281,323,284,232,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 66, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,318,310,331,300,227,226],
[253,0,241,280,306,229,256,234],
[232,309,0,270,294,210,258,224],
[240,270,280,0,272,280,246,183],
[219,244,256,278,0,252,233,218],
[250,321,340,270,298,0,265,264],
[323,294,292,304,317,285,0,275],
[324,316,326,367,332,286,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 67, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,260,274,272,284,285],
[277,0,288,271,267,281,270,297],
[259,262,0,246,260,266,258,276],
[290,279,304,0,283,288,274,294],
[276,283,290,267,0,274,285,304],
[278,269,284,262,276,0,290,289],
[266,280,292,276,265,260,0,287],
[265,253,274,256,246,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 68, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,302,272,286,307,289],
[284,0,271,304,281,294,294,319],
[268,279,0,290,272,284,278,298],
[248,246,260,0,239,265,257,270],
[278,269,278,311,0,293,295,292],
[264,256,266,285,257,0,276,295],
[243,256,272,293,255,274,0,290],
[261,231,252,280,258,255,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 69, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,301,253,307,298,256,308],
[252,0,280,305,308,309,285,320],
[249,270,0,289,272,284,271,327],
[297,245,261,0,246,312,185,303],
[243,242,278,304,0,261,230,306],
[252,241,266,238,289,0,212,327],
[294,265,279,365,320,338,0,372],
[242,230,223,247,244,223,178,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 70, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,297,291,302,275,294],
[276,0,290,287,273,301,287,292],
[288,260,0,291,274,304,266,315],
[253,263,259,0,272,292,254,291],
[259,277,276,278,0,314,292,295],
[248,249,246,258,236,0,243,272],
[275,263,284,296,258,307,0,304],
[256,258,235,259,255,278,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 71, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,269,273,281,258,273,281],
[298,0,303,301,304,297,280,275],
[281,247,0,270,282,273,263,272],
[277,249,280,0,280,276,273,285],
[269,246,268,270,0,243,260,282],
[292,253,277,274,307,0,283,290],
[277,270,287,277,290,267,0,278],
[269,275,278,265,268,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 72, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,319,228,221,303,256,302],
[258,0,238,237,232,295,266,273],
[231,312,0,221,288,270,226,332],
[322,313,329,0,275,355,272,379],
[329,318,262,275,0,341,243,369],
[247,255,280,195,209,0,277,327],
[294,284,324,278,307,273,0,292],
[248,277,218,171,181,223,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 73, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,295,272,270,285,281,276],
[289,0,271,257,278,290,280,278],
[255,279,0,279,261,265,286,285],
[278,293,271,0,249,265,272,275],
[280,272,289,301,0,278,281,282],
[265,260,285,285,272,0,273,285],
[269,270,264,278,269,277,0,274],
[274,272,265,275,268,265,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 74, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,255,273,261,249,253],
[284,0,292,281,280,266,276,269],
[278,258,0,254,269,277,262,261],
[295,269,296,0,291,272,277,291],
[277,270,281,259,0,267,274,261],
[289,284,273,278,283,0,270,259],
[301,274,288,273,276,280,0,276],
[297,281,289,259,289,291,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 75, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,259,271,262,274,263,256],
[293,0,273,288,281,285,279,276],
[291,277,0,283,277,264,259,268],
[279,262,267,0,256,246,265,275],
[288,269,273,294,0,282,290,285],
[276,265,286,304,268,0,277,280],
[287,271,291,285,260,273,0,263],
[294,274,282,275,265,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 76, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,253,281,263,291,269,270],
[287,0,274,257,265,295,277,273],
[297,276,0,272,280,287,296,270],
[269,293,278,0,283,279,241,271],
[287,285,270,267,0,281,254,256],
[259,255,263,271,269,0,250,230],
[281,273,254,309,296,300,0,286],
[280,277,280,279,294,320,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 77, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,255,288,249,246,266,259],
[299,0,265,279,285,251,292,288],
[295,285,0,298,266,277,271,300],
[262,271,252,0,268,257,268,267],
[301,265,284,282,0,257,293,280],
[304,299,273,293,293,0,296,287],
[284,258,279,282,257,254,0,275],
[291,262,250,283,270,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 78, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,278,254,239,276,247],
[275,0,286,255,249,253,285,236],
[264,264,0,268,252,252,270,263],
[272,295,282,0,269,261,284,256],
[296,301,298,281,0,260,284,276],
[311,297,298,289,290,0,294,272],
[274,265,280,266,266,256,0,246],
[303,314,287,294,274,278,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 79, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,277,304,251,260,280,280],
[293,0,298,316,301,267,293,307],
[273,252,0,262,265,265,260,266],
[246,234,288,0,272,261,295,272],
[299,249,285,278,0,277,306,280],
[290,283,285,289,273,0,306,286],
[270,257,290,255,244,244,0,244],
[270,243,284,278,270,264,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 80, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,212,250,229,284,299,233],
[259,0,254,285,251,264,286,256],
[338,296,0,285,213,251,293,246],
[300,265,265,0,272,246,297,227],
[321,299,337,278,0,300,312,266],
[266,286,299,304,250,0,296,276],
[251,264,257,253,238,254,0,227],
[317,294,304,323,284,274,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 81, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,272,271,269,271,266,283],
[277,0,277,284,271,260,261,311],
[278,273,0,279,254,257,272,276],
[279,266,271,0,258,255,269,270],
[281,279,296,292,0,283,267,291],
[279,290,293,295,267,0,284,284],
[284,289,278,281,283,266,0,283],
[267,239,274,280,259,266,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 82, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,278,287,275,277,273],
[272,0,269,262,266,262,275,266],
[273,281,0,289,292,284,284,292],
[272,288,261,0,258,270,278,277],
[263,284,258,292,0,267,268,262],
[275,288,266,280,283,0,277,287],
[273,275,266,272,282,273,0,271],
[277,284,258,273,288,263,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 83, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,335,284,310,277,312,265,303],
[215,0,252,253,274,231,223,292],
[266,298,0,272,304,232,239,290],
[240,297,278,0,241,229,248,289],
[273,276,246,309,0,246,226,275],
[238,319,318,321,304,0,281,345],
[285,327,311,302,324,269,0,330],
[247,258,260,261,275,205,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 84, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,282,264,255,245,263,264],
[307,0,290,273,287,259,258,276],
[268,260,0,258,272,265,264,248],
[286,277,292,0,273,279,265,275],
[295,263,278,277,0,277,282,280],
[305,291,285,271,273,0,275,283],
[287,292,286,285,268,275,0,261],
[286,274,302,275,270,267,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 85, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,273,301,295,296,266,302],
[282,0,255,277,274,272,275,291],
[277,295,0,297,309,297,256,320],
[249,273,253,0,270,267,258,293],
[255,276,241,280,0,270,258,305],
[254,278,253,283,280,0,255,297],
[284,275,294,292,292,295,0,298],
[248,259,230,257,245,253,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 86, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,255,239,255,280,241,248],
[303,0,270,278,272,302,299,252],
[295,280,0,272,281,290,283,247],
[311,272,278,0,284,288,276,278],
[295,278,269,266,0,282,278,250],
[270,248,260,262,268,0,249,244],
[309,251,267,274,272,301,0,248],
[302,298,303,272,300,306,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 87, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,284,320,285,281,289,278],
[299,0,302,307,268,294,296,287],
[266,248,0,303,254,298,282,284],
[230,243,247,0,245,255,249,253],
[265,282,296,305,0,303,285,287],
[269,256,252,295,247,0,248,277],
[261,254,268,301,265,302,0,266],
[272,263,266,297,263,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 88, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,263,271,266,282,271,264],
[280,0,258,253,268,235,260,247],
[287,292,0,271,261,264,279,283],
[279,297,279,0,273,266,270,270],
[284,282,289,277,0,273,264,280],
[268,315,286,284,277,0,256,285],
[279,290,271,280,286,294,0,277],
[286,303,267,280,270,265,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 89, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,265,278,271,285,263],
[267,0,272,258,274,275,277,270],
[274,278,0,262,275,275,291,276],
[285,292,288,0,292,282,266,289],
[272,276,275,258,0,277,254,249],
[279,275,275,268,273,0,252,237],
[265,273,259,284,296,298,0,258],
[287,280,274,261,301,313,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 90, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,286,274,268,280,270,272],
[258,0,268,260,256,270,246,264],
[264,282,0,282,259,278,273,277],
[276,290,268,0,275,279,262,289],
[282,294,291,275,0,281,271,264],
[270,280,272,271,269,0,277,270],
[280,304,277,288,279,273,0,275],
[278,286,273,261,286,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 91, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,258,273,252,235,274,262],
[297,0,273,279,273,269,251,262],
[292,277,0,279,248,261,271,265],
[277,271,271,0,265,276,283,302],
[298,277,302,285,0,258,294,293],
[315,281,289,274,292,0,298,320],
[276,299,279,267,256,252,0,261],
[288,288,285,248,257,230,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 92, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,302,288,257,239,285,285],
[297,0,287,261,279,296,289,313],
[248,263,0,270,281,296,287,297],
[262,289,280,0,256,272,314,302],
[293,271,269,294,0,300,318,290],
[311,254,254,278,250,0,289,284],
[265,261,263,236,232,261,0,244],
[265,237,253,248,260,266,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 93, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,271,256,244,290,294,293],
[288,0,268,268,279,298,316,279],
[279,282,0,264,279,287,283,248],
[294,282,286,0,265,294,302,285],
[306,271,271,285,0,288,303,287],
[260,252,263,256,262,0,297,260],
[256,234,267,248,247,253,0,258],
[257,271,302,265,263,290,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 94, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,280,293,276,299,275],
[283,0,288,294,266,263,299,273],
[265,262,0,261,267,258,264,257],
[270,256,289,0,279,285,285,264],
[257,284,283,271,0,280,288,269],
[274,287,292,265,270,0,293,276],
[251,251,286,265,262,257,0,259],
[275,277,293,286,281,274,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 95, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,286,267,270,284,274],
[270,0,271,284,261,276,299,260],
[266,279,0,298,272,280,296,281],
[264,266,252,0,266,266,291,266],
[283,289,278,284,0,272,273,288],
[280,274,270,284,278,0,286,275],
[266,251,254,259,277,264,0,257],
[276,290,269,284,262,275,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 96, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,273,296,283,292,309],
[276,0,268,282,284,272,295,293],
[280,282,0,289,274,271,282,300],
[277,268,261,0,295,293,286,291],
[254,266,276,255,0,258,284,281],
[267,278,279,257,292,0,288,299],
[258,255,268,264,266,262,0,280],
[241,257,250,259,269,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 97, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,291,264,283,285,246],
[280,0,277,292,270,277,304,261],
[277,273,0,328,266,262,245,318],
[259,258,222,0,280,266,260,270],
[286,280,284,270,0,311,258,301],
[267,273,288,284,239,0,238,290],
[265,246,305,290,292,312,0,260],
[304,289,232,280,249,260,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 98, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,237,248,263,270,260,241],
[284,0,320,256,278,274,267,269],
[313,230,0,287,299,292,303,279],
[302,294,263,0,300,270,325,283],
[287,272,251,250,0,255,253,232],
[280,276,258,280,295,0,295,290],
[290,283,247,225,297,255,0,272],
[309,281,271,267,318,260,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 99, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,277,267,267,280,280],
[277,0,273,278,266,285,287,270],
[276,277,0,266,273,263,260,257],
[273,272,284,0,274,282,271,276],
[283,284,277,276,0,265,268,274],
[283,265,287,268,285,0,275,265],
[270,263,290,279,282,275,0,275],
[270,280,293,274,276,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,296,226,288,319,265,291],
[269,0,327,288,297,334,273,344],
[254,223,0,209,256,308,282,276],
[324,262,341,0,304,354,286,321],
[262,253,294,246,0,320,271,265],
[231,216,242,196,230,0,235,283],
[285,277,268,264,279,315,0,249],
[259,206,274,229,285,267,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,289,354,325,310,323,249],
[247,0,283,345,312,303,317,314],
[261,267,0,321,299,267,291,212],
[196,205,229,0,255,208,291,197],
[225,238,251,295,0,281,277,234],
[240,247,283,342,269,0,343,212],
[227,233,259,259,273,207,0,200],
[301,236,338,353,316,338,350,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,271,300,288,286,289,300],
[271,0,289,287,284,269,286,284],
[279,261,0,297,284,265,271,281],
[250,263,253,0,273,273,300,292],
[262,266,266,277,0,257,279,292],
[264,281,285,277,293,0,302,314],
[261,264,279,250,271,248,0,258],
[250,266,269,258,258,236,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,275,277,274,284,283,279],
[294,0,268,289,294,254,305,266],
[275,282,0,282,266,245,285,261],
[273,261,268,0,278,274,285,256],
[276,256,284,272,0,277,284,251],
[266,296,305,276,273,0,282,278],
[267,245,265,265,266,268,0,243],
[271,284,289,294,299,272,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,294,278,258,266,283,269],
[279,0,290,285,271,249,292,280],
[256,260,0,267,272,266,280,296],
[272,265,283,0,260,250,294,269],
[292,279,278,290,0,287,260,297],
[284,301,284,300,263,0,279,296],
[267,258,270,256,290,271,0,257],
[281,270,254,281,253,254,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,250,306,252,247,239,224],
[327,0,222,305,240,289,264,180],
[300,328,0,343,361,305,238,327],
[244,245,207,0,268,295,176,203],
[298,310,189,282,0,312,246,239],
[303,261,245,255,238,0,242,287],
[311,286,312,374,304,308,0,241],
[326,370,223,347,311,263,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,280,287,273,268,278,266],
[251,0,245,287,271,244,260,259],
[270,305,0,310,275,286,277,280],
[263,263,240,0,271,255,270,258],
[277,279,275,279,0,267,276,266],
[282,306,264,295,283,0,277,258],
[272,290,273,280,274,273,0,275],
[284,291,270,292,284,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,269,273,283,280,277],
[288,0,278,277,285,273,260,273],
[275,272,0,290,265,277,265,287],
[281,273,260,0,290,272,281,278],
[277,265,285,260,0,285,271,282],
[267,277,273,278,265,0,261,280],
[270,290,285,269,279,289,0,279],
[273,277,263,272,268,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,259,283,269,283,243],
[271,0,286,268,304,277,296,240],
[280,264,0,279,292,261,299,283],
[291,282,271,0,283,273,290,263],
[267,246,258,267,0,259,275,279],
[281,273,289,277,291,0,297,261],
[267,254,251,260,275,253,0,246],
[307,310,267,287,271,289,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,265,276,283,275,277],
[280,0,283,275,279,269,280,278],
[281,267,0,264,280,278,271,269],
[285,275,286,0,282,281,286,276],
[274,271,270,268,0,286,275,274],
[267,281,272,269,264,0,273,265],
[275,270,279,264,275,277,0,283],
[273,272,281,274,276,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,290,285,281,278,282,278],
[276,0,288,292,302,254,282,280],
[260,262,0,290,289,274,293,298],
[265,258,260,0,254,265,263,280],
[269,248,261,296,0,267,267,264],
[272,296,276,285,283,0,281,297],
[268,268,257,287,283,269,0,271],
[272,270,252,270,286,253,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,260,276,269,277,279],
[264,0,264,246,274,258,264,255],
[280,286,0,268,280,275,275,269],
[290,304,282,0,290,263,274,275],
[274,276,270,260,0,265,268,270],
[281,292,275,287,285,0,294,290],
[273,286,275,276,282,256,0,287],
[271,295,281,275,280,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,269,263,264,254,266],
[280,0,246,290,268,274,277,279],
[296,304,0,274,290,294,286,288],
[281,260,276,0,275,265,272,266],
[287,282,260,275,0,282,290,276],
[286,276,256,285,268,0,280,290],
[296,273,264,278,260,270,0,277],
[284,271,262,284,274,260,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,287,285,272,276,281,287],
[283,0,285,293,268,254,280,281],
[263,265,0,277,261,265,262,255],
[265,257,273,0,251,263,265,258],
[278,282,289,299,0,276,268,272],
[274,296,285,287,274,0,296,271],
[269,270,288,285,282,254,0,274],
[263,269,295,292,278,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,270,274,273,276,300],
[271,0,249,282,269,267,274,285],
[284,301,0,288,292,303,294,275],
[280,268,262,0,270,268,282,272],
[276,281,258,280,0,296,283,301],
[277,283,247,282,254,0,279,275],
[274,276,256,268,267,271,0,274],
[250,265,275,278,249,275,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,290,296,275,291,291,265],
[256,0,276,257,267,273,273,245],
[260,274,0,263,278,272,267,256],
[254,293,287,0,281,275,273,260],
[275,283,272,269,0,274,277,277],
[259,277,278,275,276,0,275,252],
[259,277,283,277,273,275,0,263],
[285,305,294,290,273,298,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,423,160,389,282,417,169,276],
[127,0,107,240,133,127,0,107],
[390,443,0,550,249,384,330,409],
[161,310,0,0,136,277,257,116],
[268,417,301,414,0,417,310,417],
[133,423,166,273,133,0,169,273],
[381,550,220,293,240,381,0,293],
[274,443,141,434,133,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,261,268,247,253,264,285],
[305,0,266,281,304,259,270,289],
[289,284,0,269,291,269,255,279],
[282,269,281,0,290,294,286,279],
[303,246,259,260,0,274,266,262],
[297,291,281,256,276,0,288,282],
[286,280,295,264,284,262,0,278],
[265,261,271,271,288,268,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,269,300,264,271,284,286],
[246,0,258,243,246,265,260,247],
[281,292,0,280,273,260,270,296],
[250,307,270,0,270,275,268,270],
[286,304,277,280,0,265,279,299],
[279,285,290,275,285,0,286,285],
[266,290,280,282,271,264,0,293],
[264,303,254,280,251,265,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,271,272,264,265,271,282],
[257,0,263,270,266,280,267,280],
[279,287,0,269,280,280,294,295],
[278,280,281,0,287,269,276,294],
[286,284,270,263,0,249,261,289],
[285,270,270,281,301,0,272,290],
[279,283,256,274,289,278,0,287],
[268,270,255,256,261,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,260,283,275,257,267,259],
[283,0,278,289,285,291,283,266],
[290,272,0,283,304,297,294,270],
[267,261,267,0,275,282,276,285],
[275,265,246,275,0,282,268,275],
[293,259,253,268,268,0,267,269],
[283,267,256,274,282,283,0,267],
[291,284,280,265,275,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,288,253,273,244,283,268],
[295,0,291,278,273,274,302,272],
[262,259,0,252,261,257,265,266],
[297,272,298,0,280,279,279,259],
[277,277,289,270,0,273,292,287],
[306,276,293,271,277,0,297,277],
[267,248,285,271,258,253,0,267],
[282,278,284,291,263,273,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,79,40,0,164,147,164,0],
[471,0,204,254,254,311,254,217],
[510,346,0,160,363,510,363,307],
[550,296,390,0,480,390,480,257],
[386,296,187,70,0,257,169,257],
[403,239,40,160,293,0,333,110],
[386,296,187,70,381,217,0,217],
[550,333,243,293,293,440,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,299,290,287,290,290,269],
[276,0,273,284,272,267,265,267],
[251,277,0,296,290,281,273,250],
[260,266,254,0,296,266,264,256],
[263,278,260,254,0,277,278,257],
[260,283,269,284,273,0,266,275],
[260,285,277,286,272,284,0,254],
[281,283,300,294,293,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,247,259,252,322,262,280],
[319,0,287,297,293,299,260,323],
[303,263,0,255,277,301,247,288],
[291,253,295,0,274,324,256,309],
[298,257,273,276,0,313,290,305],
[228,251,249,226,237,0,224,253],
[288,290,303,294,260,326,0,287],
[270,227,262,241,245,297,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,220,260,304,307,259],
[279,0,235,274,254,304,253,268],
[267,315,0,281,284,377,293,295],
[330,276,269,0,226,319,293,254],
[290,296,266,324,0,335,313,271],
[246,246,173,231,215,0,238,211],
[243,297,257,257,237,312,0,231],
[291,282,255,296,279,339,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,271,312,269,335,337,306],
[226,0,259,267,251,269,284,244],
[279,291,0,303,260,301,304,281],
[238,283,247,0,262,262,304,234],
[281,299,290,288,0,285,338,275],
[215,281,249,288,265,0,285,250],
[213,266,246,246,212,265,0,211],
[244,306,269,316,275,300,339,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,311,288,275,281,291,280],
[258,0,288,277,270,269,260,249],
[239,262,0,253,259,250,277,242],
[262,273,297,0,268,266,268,252],
[275,280,291,282,0,272,264,250],
[269,281,300,284,278,0,277,261],
[259,290,273,282,286,273,0,260],
[270,301,308,298,300,289,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,326,218,285,258,269,313,228],
[224,0,238,239,338,277,333,250],
[332,312,0,244,315,331,381,258],
[265,311,306,0,298,297,313,285],
[292,212,235,252,0,304,264,289],
[281,273,219,253,246,0,258,249],
[237,217,169,237,286,292,0,237],
[322,300,292,265,261,301,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,272,262,255,284,250,265],
[286,0,263,265,275,283,287,296],
[278,287,0,289,273,270,276,270],
[288,285,261,0,259,274,252,270],
[295,275,277,291,0,281,282,274],
[266,267,280,276,269,0,268,272],
[300,263,274,298,268,282,0,266],
[285,254,280,280,276,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,298,285,264,277,261,272],
[300,0,295,273,277,284,275,303],
[252,255,0,261,261,256,256,253],
[265,277,289,0,272,287,271,270],
[286,273,289,278,0,278,277,288],
[273,266,294,263,272,0,261,286],
[289,275,294,279,273,289,0,308],
[278,247,297,280,262,264,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,313,302,281,303,269,281],
[279,0,302,283,263,290,256,267],
[237,248,0,265,259,279,245,244],
[248,267,285,0,268,284,262,248],
[269,287,291,282,0,296,281,267],
[247,260,271,266,254,0,262,252],
[281,294,305,288,269,288,0,274],
[269,283,306,302,283,298,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,250,290,249,270,277,223],
[241,0,241,277,263,258,316,265],
[300,309,0,309,271,309,297,302],
[260,273,241,0,249,253,245,242],
[301,287,279,301,0,292,292,272],
[280,292,241,297,258,0,265,243],
[273,234,253,305,258,285,0,258],
[327,285,248,308,278,307,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,211,215,211,426,0,426],
[0,0,211,0,211,211,0,0],
[339,339,0,215,215,215,339,215],
[335,550,335,0,211,335,335,211],
[339,339,335,339,0,550,124,215],
[124,339,335,215,0,0,124,0],
[550,550,211,215,426,426,0,426],
[124,550,335,339,335,550,124,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,266,270,248,224,247,278],
[316,0,303,283,263,264,261,268],
[284,247,0,266,245,233,236,262],
[280,267,284,0,243,241,234,272],
[302,287,305,307,0,278,275,267],
[326,286,317,309,272,0,292,285],
[303,289,314,316,275,258,0,279],
[272,282,288,278,283,265,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,273,286,275,291,281,283],
[289,0,278,287,278,274,299,283],
[277,272,0,287,281,269,282,316],
[264,263,263,0,281,262,273,289],
[275,272,269,269,0,271,277,279],
[259,276,281,288,279,0,285,295],
[269,251,268,277,273,265,0,268],
[267,267,234,261,271,255,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,268,238,280,283,269,303],
[299,0,283,273,296,300,288,290],
[282,267,0,291,290,291,292,304],
[312,277,259,0,309,313,295,284],
[270,254,260,241,0,261,261,287],
[267,250,259,237,289,0,258,270],
[281,262,258,255,289,292,0,292],
[247,260,246,266,263,280,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,304,268,288,298,286,293],
[258,0,287,276,279,269,268,278],
[246,263,0,255,275,265,267,273],
[282,274,295,0,289,294,287,281],
[262,271,275,261,0,278,280,283],
[252,281,285,256,272,0,273,274],
[264,282,283,263,270,277,0,275],
[257,272,277,269,267,276,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,271,258,282,293,277],
[290,0,274,260,279,297,286,282],
[278,276,0,255,269,281,281,276],
[279,290,295,0,269,283,302,282],
[292,271,281,281,0,285,291,266],
[268,253,269,267,265,0,289,291],
[257,264,269,248,259,261,0,262],
[273,268,274,268,284,259,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,252,284,338,276,220],
[284,0,274,272,258,303,255,260],
[286,276,0,294,268,339,312,282],
[298,278,256,0,267,318,277,260],
[266,292,282,283,0,321,293,279],
[212,247,211,232,229,0,218,236],
[274,295,238,273,257,332,0,201],
[330,290,268,290,271,314,349,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,213,276,284,296,263,278],
[279,0,271,329,253,387,321,314],
[337,279,0,283,265,363,324,319],
[274,221,267,0,272,309,294,344],
[266,297,285,278,0,338,336,318],
[254,163,187,241,212,0,272,263],
[287,229,226,256,214,278,0,232],
[272,236,231,206,232,287,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,296,295,283,298,274,285],
[270,0,280,286,279,279,266,284],
[254,270,0,274,250,291,259,246],
[255,264,276,0,272,280,275,268],
[267,271,300,278,0,294,277,283],
[252,271,259,270,256,0,255,261],
[276,284,291,275,273,295,0,270],
[265,266,304,282,267,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,275,278,269,258,276],
[279,0,274,278,285,283,267,283],
[279,276,0,282,283,270,265,271],
[275,272,268,0,267,270,269,269],
[272,265,267,283,0,272,269,271],
[281,267,280,280,278,0,267,270],
[292,283,285,281,281,283,0,264],
[274,267,279,281,279,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,279,238,279,265,232,311],
[228,0,335,324,309,293,370,334],
[271,215,0,213,297,253,231,272],
[312,226,337,0,284,209,386,249],
[271,241,253,266,0,242,269,346],
[285,257,297,341,308,0,346,276],
[318,180,319,164,281,204,0,203],
[239,216,278,301,204,274,347,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,278,272,265,277,301],
[268,0,279,272,274,272,263,304],
[262,271,0,278,267,274,276,287],
[272,278,272,0,281,264,275,300],
[278,276,283,269,0,281,275,290],
[285,278,276,286,269,0,271,299],
[273,287,274,275,275,279,0,298],
[249,246,263,250,260,251,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,308,276,278,303,267],
[261,0,232,281,269,253,300,253],
[275,318,0,307,283,281,306,289],
[242,269,243,0,241,258,290,255],
[274,281,267,309,0,278,312,268],
[272,297,269,292,272,0,285,281],
[247,250,244,260,238,265,0,269],
[283,297,261,295,282,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,323,275,262,279,309],
[275,0,263,287,267,260,276,276],
[260,287,0,310,251,278,235,300],
[227,263,240,0,240,254,225,260],
[275,283,299,310,0,272,235,287],
[288,290,272,296,278,0,273,278],
[271,274,315,325,315,277,0,285],
[241,274,250,290,263,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,272,284,287,276,277,277],
[250,0,253,270,278,262,264,272],
[278,297,0,289,290,268,279,277],
[266,280,261,0,287,257,271,269],
[263,272,260,263,0,249,265,273],
[274,288,282,293,301,0,294,281],
[273,286,271,279,285,256,0,279],
[273,278,273,281,277,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,285,255,272,261,301,285],
[295,0,301,272,301,282,331,291],
[265,249,0,236,239,221,251,251],
[295,278,314,0,270,284,318,278],
[278,249,311,280,0,263,308,265],
[289,268,329,266,287,0,305,279],
[249,219,299,232,242,245,0,247],
[265,259,299,272,285,271,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,233,282,277,282,278,286],
[289,0,274,284,271,283,267,277],
[317,276,0,272,287,295,262,284],
[268,266,278,0,265,280,250,271],
[273,279,263,285,0,289,258,287],
[268,267,255,270,261,0,253,293],
[272,283,288,300,292,297,0,296],
[264,273,266,279,263,257,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,295,276,267,302,278,293],
[273,0,284,253,281,297,277,293],
[255,266,0,246,266,285,275,270],
[274,297,304,0,293,307,272,287],
[283,269,284,257,0,298,272,276],
[248,253,265,243,252,0,269,246],
[272,273,275,278,278,281,0,277],
[257,257,280,263,274,304,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,274,276,266,291,261],
[284,0,290,270,272,289,288,276],
[279,260,0,277,272,285,277,257],
[276,280,273,0,276,279,282,279],
[274,278,278,274,0,291,296,281],
[284,261,265,271,259,0,295,261],
[259,262,273,268,254,255,0,270],
[289,274,293,271,269,289,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,301,286,275,264,303,300],
[256,0,266,252,314,238,291,286],
[249,284,0,283,297,264,281,268],
[264,298,267,0,316,280,277,205],
[275,236,253,234,0,247,261,251],
[286,312,286,270,303,0,297,295],
[247,259,269,273,289,253,0,292],
[250,264,282,345,299,255,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,376,357,270,280,365,392],
[206,0,272,281,198,170,213,219],
[174,278,0,189,156,188,201,246],
[193,269,361,0,246,213,309,370],
[280,352,394,304,0,216,388,329],
[270,380,362,337,334,0,301,313],
[185,337,349,241,162,249,0,272],
[158,331,304,180,221,237,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,235,232,268,250,281,242],
[267,0,286,259,307,285,315,264],
[315,264,0,302,298,286,311,271],
[318,291,248,0,290,310,308,309],
[282,243,252,260,0,275,261,239],
[300,265,264,240,275,0,294,279],
[269,235,239,242,289,256,0,225],
[308,286,279,241,311,271,325,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,288,270,271,266,279],
[267,0,278,273,268,274,279,267],
[260,272,0,279,271,256,261,262],
[262,277,271,0,263,258,261,266],
[280,282,279,287,0,268,279,278],
[279,276,294,292,282,0,273,273],
[284,271,289,289,271,277,0,266],
[271,283,288,284,272,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,221,303,218,290,235,326],
[300,0,254,327,259,288,176,318],
[329,296,0,359,302,269,246,316],
[247,223,191,0,221,163,184,279],
[332,291,248,329,0,306,285,371],
[260,262,281,387,244,0,306,372],
[315,374,304,366,265,244,0,340],
[224,232,234,271,179,178,210,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,297,278,287,307,272,274],
[282,0,284,263,276,290,270,279],
[253,266,0,259,274,288,257,268],
[272,287,291,0,284,286,278,275],
[263,274,276,266,0,287,269,278],
[243,260,262,264,263,0,255,281],
[278,280,293,272,281,295,0,283],
[276,271,282,275,272,269,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,276,283,288,272,302],
[261,0,272,273,269,288,266,287],
[281,278,0,278,260,285,268,295],
[274,277,272,0,283,274,291,287],
[267,281,290,267,0,273,269,294],
[262,262,265,276,277,0,286,295],
[278,284,282,259,281,264,0,298],
[248,263,255,263,256,255,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,280,275,265,261,270],
[265,0,267,273,277,270,274,285],
[268,283,0,289,269,287,275,266],
[270,277,261,0,270,272,269,265],
[275,273,281,280,0,279,282,282],
[285,280,263,278,271,0,295,273],
[289,276,275,281,268,255,0,271],
[280,265,284,285,268,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,295,282,279,271,302],
[269,0,247,281,249,260,266,261],
[264,303,0,314,278,274,274,285],
[255,269,236,0,263,279,254,261],
[268,301,272,287,0,282,278,309],
[271,290,276,271,268,0,283,287],
[279,284,276,296,272,267,0,293],
[248,289,265,289,241,263,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,274,273,262,265,275,275],
[291,0,265,301,274,289,269,291],
[276,285,0,299,267,277,274,298],
[277,249,251,0,263,264,256,281],
[288,276,283,287,0,270,271,267],
[285,261,273,286,280,0,278,273],
[275,281,276,294,279,272,0,297],
[275,259,252,269,283,277,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,289,273,280,286,295,305],
[252,0,284,263,251,280,258,265],
[261,266,0,292,264,274,275,272],
[277,287,258,0,253,278,266,283],
[270,299,286,297,0,291,270,282],
[264,270,276,272,259,0,270,267],
[255,292,275,284,280,280,0,285],
[245,285,278,267,268,283,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,346,325,306,213,236,234,310],
[204,0,323,267,206,266,222,307],
[225,227,0,328,236,318,210,325],
[244,283,222,0,250,239,229,247],
[337,344,314,300,0,315,236,323],
[314,284,232,311,235,0,305,279],
[316,328,340,321,314,245,0,304],
[240,243,225,303,227,271,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,283,268,293,268,299,285],
[252,0,258,243,249,248,267,233],
[267,292,0,259,267,249,269,259],
[282,307,291,0,301,285,296,272],
[257,301,283,249,0,273,264,255],
[282,302,301,265,277,0,299,268],
[251,283,281,254,286,251,0,253],
[265,317,291,278,295,282,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,319,323,344,240,292,296],
[231,0,279,239,240,248,257,290],
[231,271,0,282,245,268,248,257],
[227,311,268,0,232,268,277,337],
[206,310,305,318,0,287,283,308],
[310,302,282,282,263,0,261,296],
[258,293,302,273,267,289,0,286],
[254,260,293,213,242,254,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,286,267,260,276,269,281],
[259,0,284,256,272,277,269,248],
[264,266,0,272,270,266,264,277],
[283,294,278,0,265,266,286,280],
[290,278,280,285,0,260,275,266],
[274,273,284,284,290,0,271,273],
[281,281,286,264,275,279,0,280],
[269,302,273,270,284,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,330,262,303,286,335,277],
[325,0,339,289,301,281,280,264],
[220,211,0,258,235,234,249,214],
[288,261,292,0,341,310,300,344],
[247,249,315,209,0,238,285,238],
[264,269,316,240,312,0,275,268],
[215,270,301,250,265,275,0,226],
[273,286,336,206,312,282,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,158,278,207,289,151,202,153],
[392,0,411,255,380,320,326,373],
[272,139,0,241,308,227,234,199],
[343,295,309,0,388,204,278,241],
[261,170,242,162,0,182,249,144],
[399,230,323,346,368,0,297,399],
[348,224,316,272,301,253,0,191],
[397,177,351,309,406,151,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,281,278,278,277,268,276],
[275,0,270,284,281,282,256,274],
[269,280,0,267,268,265,261,277],
[272,266,283,0,272,270,256,284],
[272,269,282,278,0,287,280,285],
[273,268,285,280,263,0,263,269],
[282,294,289,294,270,287,0,288],
[274,276,273,266,265,281,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,200,190,170,204,279,168,220],
[350,0,284,264,241,363,305,281],
[360,266,0,307,300,318,288,294],
[380,286,243,0,292,422,294,331],
[346,309,250,258,0,366,289,292],
[271,187,232,128,184,0,172,233],
[382,245,262,256,261,378,0,273],
[330,269,256,219,258,317,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,281,275,291,281,280,283],
[285,0,275,248,277,269,299,258],
[269,275,0,248,282,285,278,285],
[275,302,302,0,287,291,276,277],
[259,273,268,263,0,269,276,280],
[269,281,265,259,281,0,283,284],
[270,251,272,274,274,267,0,270],
[267,292,265,273,270,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,250,238,289,255,252],
[300,0,271,264,274,299,302,279],
[284,279,0,267,272,296,297,269],
[300,286,283,0,247,291,279,284],
[312,276,278,303,0,293,285,260],
[261,251,254,259,257,0,277,257],
[295,248,253,271,265,273,0,274],
[298,271,281,266,290,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,267,258,264,265,271,259],
[292,0,293,284,278,290,282,273],
[283,257,0,269,269,268,281,259],
[292,266,281,0,262,266,287,270],
[286,272,281,288,0,295,282,280],
[285,260,282,284,255,0,290,261],
[279,268,269,263,268,260,0,272],
[291,277,291,280,270,289,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,258,287,263,271,279,279],
[275,0,249,284,258,261,267,272],
[292,301,0,279,277,277,305,269],
[263,266,271,0,255,243,272,270],
[287,292,273,295,0,265,296,270],
[279,289,273,307,285,0,280,285],
[271,283,245,278,254,270,0,276],
[271,278,281,280,280,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,277,273,293,269,284,278],
[283,0,281,286,281,284,269,280],
[273,269,0,287,269,272,285,275],
[277,264,263,0,263,263,278,278],
[257,269,281,287,0,269,286,248],
[281,266,278,287,281,0,296,268],
[266,281,265,272,264,254,0,258],
[272,270,275,272,302,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,297,274,278,279,267,266],
[262,0,285,257,254,260,266,261],
[253,265,0,241,254,251,264,255],
[276,293,309,0,281,265,265,275],
[272,296,296,269,0,258,280,276],
[271,290,299,285,292,0,291,288],
[283,284,286,285,270,259,0,281],
[284,289,295,275,274,262,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,306,281,293,275,275,269],
[267,0,284,274,290,271,278,272],
[244,266,0,263,266,251,268,234],
[269,276,287,0,291,277,286,285],
[257,260,284,259,0,265,254,247],
[275,279,299,273,285,0,264,249],
[275,272,282,264,296,286,0,266],
[281,278,316,265,303,301,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,276,271,282,263,254,276],
[257,0,274,279,279,271,260,291],
[274,276,0,289,299,280,286,277],
[279,271,261,0,282,276,258,288],
[268,271,251,268,0,261,265,279],
[287,279,270,274,289,0,257,278],
[296,290,264,292,285,293,0,289],
[274,259,273,262,271,272,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,255,249,247,238,256],
[276,0,250,273,264,244,219,257],
[284,300,0,296,279,268,264,263],
[295,277,254,0,257,253,244,274],
[301,286,271,293,0,284,265,281],
[303,306,282,297,266,0,280,287],
[312,331,286,306,285,270,0,282],
[294,293,287,276,269,263,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,275,256,237,269,247,251],
[305,0,291,301,269,283,280,285],
[275,259,0,253,251,273,265,255],
[294,249,297,0,247,286,259,258],
[313,281,299,303,0,274,268,264],
[281,267,277,264,276,0,254,249],
[303,270,285,291,282,296,0,279],
[299,265,295,292,286,301,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,257,239,238,265,199,256],
[297,0,250,234,240,265,241,256],
[293,300,0,241,261,290,245,275],
[311,316,309,0,266,296,291,294],
[312,310,289,284,0,315,255,265],
[285,285,260,254,235,0,258,290],
[351,309,305,259,295,292,0,270],
[294,294,275,256,285,260,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,260,272,260,271,261,282],
[295,0,276,279,284,269,276,295],
[290,274,0,281,285,286,283,302],
[278,271,269,0,275,262,277,281],
[290,266,265,275,0,258,276,281],
[279,281,264,288,292,0,293,309],
[289,274,267,273,274,257,0,286],
[268,255,248,269,269,241,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,287,277,276,257,260],
[279,0,258,284,289,261,250,290],
[282,292,0,274,308,312,280,261],
[263,266,276,0,256,246,277,242],
[273,261,242,294,0,280,248,256],
[274,289,238,304,270,0,260,262],
[293,300,270,273,302,290,0,257],
[290,260,289,308,294,288,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,277,293,275,280,275],
[267,0,277,268,273,266,269,271],
[256,273,0,284,268,269,269,274],
[273,282,266,0,273,249,269,285],
[257,277,282,277,0,272,277,275],
[275,284,281,301,278,0,288,294],
[270,281,281,281,273,262,0,277],
[275,279,276,265,275,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,327,310,275,274,322,319],
[261,0,290,314,303,285,288,317],
[223,260,0,278,214,225,265,267],
[240,236,272,0,249,224,271,270],
[275,247,336,301,0,256,285,295],
[276,265,325,326,294,0,304,287],
[228,262,285,279,265,246,0,266],
[231,233,283,280,255,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,279,267,265,263,276],
[260,0,263,262,267,269,244,266],
[267,287,0,281,289,283,264,295],
[271,288,269,0,279,265,275,279],
[283,283,261,271,0,266,274,280],
[285,281,267,285,284,0,278,283],
[287,306,286,275,276,272,0,289],
[274,284,255,271,270,267,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,288,271,271,282,287],
[271,0,295,272,274,270,282,291],
[265,255,0,255,252,264,252,259],
[262,278,295,0,280,273,274,281],
[279,276,298,270,0,281,291,280],
[279,280,286,277,269,0,279,299],
[268,268,298,276,259,271,0,283],
[263,259,291,269,270,251,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,272,258,222,243,334,323],
[264,0,263,218,284,205,328,275],
[278,287,0,237,227,286,262,355],
[292,332,313,0,283,268,299,280],
[328,266,323,267,0,258,328,291],
[307,345,264,282,292,0,301,272],
[216,222,288,251,222,249,0,294],
[227,275,195,270,259,278,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,309,282,302,314,271,302],
[286,0,337,263,344,310,299,288],
[241,213,0,281,285,303,280,250],
[268,287,269,0,318,308,286,300],
[248,206,265,232,0,240,266,224],
[236,240,247,242,310,0,298,305],
[279,251,270,264,284,252,0,242],
[248,262,300,250,326,245,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,228,373,286,294,233,308],
[280,0,256,350,348,290,354,312],
[322,294,0,342,322,269,366,321],
[177,200,208,0,263,231,196,208],
[264,202,228,287,0,273,268,287],
[256,260,281,319,277,0,314,254],
[317,196,184,354,282,236,0,261],
[242,238,229,342,263,296,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,184,292,282,326,290,389],
[236,0,166,173,196,218,235,371],
[366,384,0,355,364,274,326,364],
[258,377,195,0,224,270,279,353],
[268,354,186,326,0,313,231,459],
[224,332,276,280,237,0,268,292],
[260,315,224,271,319,282,0,367],
[161,179,186,197,91,258,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,275,292,273,280,282,272],
[270,0,289,303,266,296,281,269],
[275,261,0,263,257,271,260,281],
[258,247,287,0,251,273,259,256],
[277,284,293,299,0,286,278,271],
[270,254,279,277,264,0,280,242],
[268,269,290,291,272,270,0,262],
[278,281,269,294,279,308,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,271,294,286,264,272],
[283,0,271,298,295,261,260,277],
[284,279,0,304,278,269,278,290],
[279,252,246,0,282,275,263,271],
[256,255,272,268,0,271,262,280],
[264,289,281,275,279,0,271,286],
[286,290,272,287,288,279,0,286],
[278,273,260,279,270,264,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,266,291,285,308,317,256],
[277,0,319,328,298,264,337,323],
[284,231,0,269,261,236,290,232],
[259,222,281,0,273,247,238,239],
[265,252,289,277,0,247,282,266],
[242,286,314,303,303,0,287,273],
[233,213,260,312,268,263,0,249],
[294,227,318,311,284,277,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,293,276,275,312,293,276],
[289,0,313,270,273,315,274,269],
[257,237,0,251,251,281,262,254],
[274,280,299,0,296,304,282,281],
[275,277,299,254,0,307,292,285],
[238,235,269,246,243,0,244,243],
[257,276,288,268,258,306,0,264],
[274,281,296,269,265,307,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,263,277,270,273,283,283],
[273,0,246,226,235,259,247,266],
[287,304,0,262,277,279,273,296],
[273,324,288,0,282,315,302,311],
[280,315,273,268,0,298,280,329],
[277,291,271,235,252,0,239,282],
[267,303,277,248,270,311,0,287],
[267,284,254,239,221,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,257,220,239,293,329,232],
[266,0,292,332,317,332,348,300],
[293,258,0,271,288,263,325,251],
[330,218,279,0,272,333,327,246],
[311,233,262,278,0,263,297,241],
[257,218,287,217,287,0,311,205],
[221,202,225,223,253,239,0,193],
[318,250,299,304,309,345,357,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,309,293,246,276,279,325],
[248,0,288,317,241,272,281,284],
[241,262,0,277,260,275,234,275],
[257,233,273,0,219,278,255,264],
[304,309,290,331,0,305,323,266],
[274,278,275,272,245,0,273,222],
[271,269,316,295,227,277,0,267],
[225,266,275,286,284,328,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,282,265,269,272,268],
[279,0,272,265,265,264,282,253],
[273,278,0,278,273,272,285,285],
[268,285,272,0,266,257,279,263],
[285,285,277,284,0,271,284,266],
[281,286,278,293,279,0,278,266],
[278,268,265,271,266,272,0,259],
[282,297,265,287,284,284,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,275,243,280,259,249],
[277,0,287,263,281,254,243,247],
[271,263,0,262,237,250,259,253],
[275,287,288,0,254,270,254,280],
[307,269,313,296,0,288,264,267],
[270,296,300,280,262,0,277,263],
[291,307,291,296,286,273,0,275],
[301,303,297,270,283,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,292,279,265,271,270,275],
[284,0,238,273,273,246,270,258],
[258,312,0,293,289,290,285,262],
[271,277,257,0,264,238,259,245],
[285,277,261,286,0,259,264,276],
[279,304,260,312,291,0,276,272],
[280,280,265,291,286,274,0,249],
[275,292,288,305,274,278,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,255,316,254,261,230,279],
[317,0,311,324,276,298,271,290],
[295,239,0,309,241,220,281,275],
[234,226,241,0,234,223,230,246],
[296,274,309,316,0,289,263,272],
[289,252,330,327,261,0,253,292],
[320,279,269,320,287,297,0,286],
[271,260,275,304,278,258,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,254,260,234,253,251,274],
[288,0,286,286,262,261,273,286],
[296,264,0,255,237,238,289,249],
[290,264,295,0,278,251,285,280],
[316,288,313,272,0,295,308,298],
[297,289,312,299,255,0,302,296],
[299,277,261,265,242,248,0,269],
[276,264,301,270,252,254,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,274,270,265,272,286],
[281,0,266,281,276,263,280,290],
[293,284,0,269,267,273,282,293],
[276,269,281,0,268,275,256,290],
[280,274,283,282,0,282,273,290],
[285,287,277,275,268,0,280,288],
[278,270,268,294,277,270,0,300],
[264,260,257,260,260,262,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,280,294,274,288,297],
[265,0,282,271,258,267,274,287],
[275,268,0,274,268,267,288,280],
[270,279,276,0,271,261,292,291],
[256,292,282,279,0,278,280,291],
[276,283,283,289,272,0,303,288],
[262,276,262,258,270,247,0,280],
[253,263,270,259,259,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,282,277,273,265,267],
[276,0,288,271,285,292,278,284],
[270,262,0,269,274,253,273,258],
[268,279,281,0,282,273,274,259],
[273,265,276,268,0,289,277,264],
[277,258,297,277,261,0,259,278],
[285,272,277,276,273,291,0,264],
[283,266,292,291,286,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,264,230,272,270,265,305],
[284,0,260,260,340,284,335,247],
[286,290,0,254,270,285,288,246],
[320,290,296,0,294,325,276,275],
[278,210,280,256,0,260,293,287],
[280,266,265,225,290,0,289,234],
[285,215,262,274,257,261,0,226],
[245,303,304,275,263,316,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,286,285,266,316,280,282],
[260,0,276,271,276,309,277,281],
[264,274,0,270,269,291,245,276],
[265,279,280,0,286,291,281,289],
[284,274,281,264,0,314,281,280],
[234,241,259,259,236,0,268,254],
[270,273,305,269,269,282,0,282],
[268,269,274,261,270,296,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,278,299,275,274,266,294],
[284,0,297,301,261,276,292,308],
[272,253,0,275,268,262,253,279],
[251,249,275,0,224,270,253,295],
[275,289,282,326,0,263,275,299],
[276,274,288,280,287,0,275,293],
[284,258,297,297,275,275,0,307],
[256,242,271,255,251,257,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,292,291,325,312,270,323],
[235,0,263,244,293,298,242,256],
[258,287,0,248,272,301,234,284],
[259,306,302,0,315,333,286,293],
[225,257,278,235,0,292,251,266],
[238,252,249,217,258,0,246,254],
[280,308,316,264,299,304,0,300],
[227,294,266,257,284,296,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,265,261,270,276,266],
[278,0,262,271,296,277,267,284],
[292,288,0,277,295,270,280,269],
[285,279,273,0,294,290,243,267],
[289,254,255,256,0,259,275,255],
[280,273,280,260,291,0,278,271],
[274,283,270,307,275,272,0,281],
[284,266,281,283,295,279,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,266,268,260,293,291,275],
[268,0,278,271,271,291,285,286],
[284,272,0,276,273,294,293,288],
[282,279,274,0,276,284,285,282],
[290,279,277,274,0,280,284,301],
[257,259,256,266,270,0,255,266],
[259,265,257,265,266,295,0,285],
[275,264,262,268,249,284,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,290,267,284,262,261,292],
[268,0,273,302,248,277,263,277],
[260,277,0,289,274,284,255,269],
[283,248,261,0,243,287,278,268],
[266,302,276,307,0,295,262,306],
[288,273,266,263,255,0,274,275],
[289,287,295,272,288,276,0,301],
[258,273,281,282,244,275,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,283,275,263,287,283],
[275,0,265,268,272,274,283,280],
[283,285,0,277,294,274,300,279],
[267,282,273,0,285,281,277,275],
[275,278,256,265,0,263,279,265],
[287,276,276,269,287,0,288,268],
[263,267,250,273,271,262,0,274],
[267,270,271,275,285,282,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,278,266,267,265,269],
[288,0,280,285,274,306,272,293],
[286,270,0,280,259,292,279,271],
[272,265,270,0,246,264,257,277],
[284,276,291,304,0,293,277,259],
[283,244,258,286,257,0,278,275],
[285,278,271,293,273,272,0,288],
[281,257,279,273,291,275,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,277,293,280,297,271,270],
[255,0,244,259,255,257,238,245],
[273,306,0,270,276,289,258,261],
[257,291,280,0,257,275,270,254],
[270,295,274,293,0,298,265,285],
[253,293,261,275,252,0,252,265],
[279,312,292,280,285,298,0,275],
[280,305,289,296,265,285,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,276,293,281,289,271,273],
[292,0,278,264,275,289,251,273],
[274,272,0,264,273,265,264,260],
[257,286,286,0,259,277,267,289],
[269,275,277,291,0,292,284,286],
[261,261,285,273,258,0,282,252],
[279,299,286,283,266,268,0,266],
[277,277,290,261,264,298,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,288,261,280,277,266,269],
[270,0,297,273,271,281,268,273],
[262,253,0,262,274,265,255,274],
[289,277,288,0,285,275,274,274],
[270,279,276,265,0,277,268,279],
[273,269,285,275,273,0,259,269],
[284,282,295,276,282,291,0,273],
[281,277,276,276,271,281,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,257,277,293,270,272,268],
[262,0,266,274,259,252,263,253],
[293,284,0,289,290,275,292,276],
[273,276,261,0,274,255,283,273],
[257,291,260,276,0,252,271,264],
[280,298,275,295,298,0,295,283],
[278,287,258,267,279,255,0,264],
[282,297,274,277,286,267,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,263,287,262,260,278],
[269,0,249,269,288,274,251,272],
[269,301,0,259,278,259,269,283],
[287,281,291,0,308,275,255,279],
[263,262,272,242,0,254,246,281],
[288,276,291,275,296,0,278,284],
[290,299,281,295,304,272,0,287],
[272,278,267,271,269,266,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,277,301,296,283,274],
[273,0,260,271,291,276,265,273],
[279,290,0,265,292,292,276,287],
[273,279,285,0,293,280,286,297],
[249,259,258,257,0,268,267,263],
[254,274,258,270,282,0,279,280],
[267,285,274,264,283,271,0,276],
[276,277,263,253,287,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,290,281,308,279,256,277],
[271,0,292,274,283,268,259,265],
[260,258,0,266,253,263,254,263],
[269,276,284,0,270,276,275,259],
[242,267,297,280,0,267,279,266],
[271,282,287,274,283,0,271,282],
[294,291,296,275,271,279,0,284],
[273,285,287,291,284,268,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,314,400,275,296,349,199],
[147,0,325,269,213,283,265,186],
[236,225,0,226,285,108,258,150],
[150,281,324,0,177,192,264,151],
[275,337,265,373,0,238,347,336],
[254,267,442,358,312,0,354,249],
[201,285,292,286,203,196,0,269],
[351,364,400,399,214,301,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,267,280,299,264,270,256],
[279,0,274,278,283,279,295,266],
[283,276,0,287,295,270,283,266],
[270,272,263,0,269,255,277,267],
[251,267,255,281,0,270,271,265],
[286,271,280,295,280,0,293,282],
[280,255,267,273,279,257,0,256],
[294,284,284,283,285,268,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,259,240,279,259,240,258],
[315,0,261,285,280,302,248,296],
[291,289,0,262,255,313,274,292],
[310,265,288,0,303,310,276,306],
[271,270,295,247,0,282,256,276],
[291,248,237,240,268,0,240,271],
[310,302,276,274,294,310,0,298],
[292,254,258,244,274,279,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,270,283,271,287,278,297],
[266,0,258,259,246,244,267,288],
[280,292,0,284,269,250,228,299],
[267,291,266,0,244,256,261,296],
[279,304,281,306,0,305,257,317],
[263,306,300,294,245,0,255,297],
[272,283,322,289,293,295,0,298],
[253,262,251,254,233,253,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,254,285,300,267,323,247],
[266,0,268,276,282,246,284,278],
[296,282,0,269,302,290,282,258],
[265,274,281,0,296,276,302,253],
[250,268,248,254,0,265,283,264],
[283,304,260,274,285,0,305,308],
[227,266,268,248,267,245,0,249],
[303,272,292,297,286,242,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,282,266,257,264,254,226],
[283,0,287,241,227,273,254,278],
[268,263,0,252,253,220,255,232],
[284,309,298,0,243,295,261,258],
[293,323,297,307,0,263,267,256],
[286,277,330,255,287,0,291,275],
[296,296,295,289,283,259,0,239],
[324,272,318,292,294,275,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,305,271,282,262,295],
[282,0,274,265,282,254,264,269],
[270,276,0,270,241,260,287,292],
[245,285,280,0,271,242,238,242],
[279,268,309,279,0,269,243,269],
[268,296,290,308,281,0,286,292],
[288,286,263,312,307,264,0,313],
[255,281,258,308,281,258,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,267,275,275,250,254,249],
[260,0,242,281,281,257,242,272],
[283,308,0,275,299,298,288,271],
[275,269,275,0,273,294,257,258],
[275,269,251,277,0,279,227,258],
[300,293,252,256,271,0,265,271],
[296,308,262,293,323,285,0,276],
[301,278,279,292,292,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,276,274,266,274,279,260],
[279,0,285,279,266,280,274,262],
[274,265,0,273,255,278,271,249],
[276,271,277,0,269,279,272,273],
[284,284,295,281,0,286,266,276],
[276,270,272,271,264,0,260,275],
[271,276,279,278,284,290,0,275],
[290,288,301,277,274,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,284,272,292,263,262],
[256,0,263,256,252,271,264,252],
[273,287,0,272,277,278,280,265],
[266,294,278,0,275,296,273,274],
[278,298,273,275,0,303,271,276],
[258,279,272,254,247,0,259,254],
[287,286,270,277,279,291,0,276],
[288,298,285,276,274,296,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,240,243,247,264,236,262],
[288,0,330,303,322,306,258,272],
[310,220,0,270,314,259,238,251],
[307,247,280,0,325,234,276,290],
[303,228,236,225,0,279,275,252],
[286,244,291,316,271,0,331,285],
[314,292,312,274,275,219,0,283],
[288,278,299,260,298,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,261,219,268,241,257,268],
[306,0,270,271,289,252,289,290],
[289,280,0,282,295,268,290,294],
[331,279,268,0,296,285,286,310],
[282,261,255,254,0,261,272,277],
[309,298,282,265,289,0,282,296],
[293,261,260,264,278,268,0,295],
[282,260,256,240,273,254,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,272,280,282,289,268],
[265,0,275,281,261,268,304,240],
[266,275,0,268,270,279,287,245],
[278,269,282,0,281,285,290,278],
[270,289,280,269,0,284,314,260],
[268,282,271,265,266,0,288,254],
[261,246,263,260,236,262,0,246],
[282,310,305,272,290,296,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,255,261,272,271,259,245],
[287,0,243,256,294,277,261,255],
[295,307,0,271,281,305,253,252],
[289,294,279,0,276,284,274,268],
[278,256,269,274,0,273,247,258],
[279,273,245,266,277,0,268,279],
[291,289,297,276,303,282,0,272],
[305,295,298,282,292,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,251,278,256,253,259,261],
[282,0,251,264,258,280,252,259],
[299,299,0,271,281,294,296,292],
[272,286,279,0,257,284,263,270],
[294,292,269,293,0,285,284,286],
[297,270,256,266,265,0,269,263],
[291,298,254,287,266,281,0,258],
[289,291,258,280,264,287,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,285,287,273,288,276,288],
[262,0,278,280,271,259,265,269],
[265,272,0,280,255,270,264,259],
[263,270,270,0,280,283,267,296],
[277,279,295,270,0,278,274,280],
[262,291,280,267,272,0,259,273],
[274,285,286,283,276,291,0,288],
[262,281,291,254,270,277,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,285,272,276,305,294,296],
[252,0,276,276,268,282,290,279],
[265,274,0,263,276,285,299,289],
[278,274,287,0,274,286,292,294],
[274,282,274,276,0,281,271,286],
[245,268,265,264,269,0,286,274],
[256,260,251,258,279,264,0,283],
[254,271,261,256,264,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,269,268,263,268,271,289],
[290,0,284,282,263,294,274,279],
[281,266,0,269,273,280,269,274],
[282,268,281,0,276,291,285,283],
[287,287,277,274,0,293,290,286],
[282,256,270,259,257,0,275,270],
[279,276,281,265,260,275,0,290],
[261,271,276,267,264,280,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,280,279,281,254,276],
[271,0,281,290,301,290,262,280],
[285,269,0,281,301,280,281,263],
[270,260,269,0,293,263,244,260],
[271,249,249,257,0,258,246,260],
[269,260,270,287,292,0,257,258],
[296,288,269,306,304,293,0,287],
[274,270,287,290,290,292,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,257,261,271,258,282,269],
[288,0,252,265,259,258,277,263],
[293,298,0,278,297,266,285,277],
[289,285,272,0,286,266,273,261],
[279,291,253,264,0,259,279,261],
[292,292,284,284,291,0,304,265],
[268,273,265,277,271,246,0,270],
[281,287,273,289,289,285,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,315,259,345,259,264,273],
[325,0,352,287,370,265,324,319],
[235,198,0,217,272,230,233,230],
[291,263,333,0,306,222,304,278],
[205,180,278,244,0,216,296,194],
[291,285,320,328,334,0,266,303],
[286,226,317,246,254,284,0,269],
[277,231,320,272,356,247,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,267,273,264,280,282],
[280,0,277,262,282,284,297,281],
[278,273,0,275,264,263,284,273],
[283,288,275,0,289,290,288,287],
[277,268,286,261,0,280,280,270],
[286,266,287,260,270,0,290,273],
[270,253,266,262,270,260,0,253],
[268,269,277,263,280,277,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,299,264,308,297,298,278],
[265,0,284,244,288,268,305,254],
[251,266,0,254,292,278,280,249],
[286,306,296,0,291,269,301,313],
[242,262,258,259,0,260,288,276],
[253,282,272,281,290,0,293,283],
[252,245,270,249,262,257,0,265],
[272,296,301,237,274,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,242,263,297,252,266],
[274,0,266,265,269,288,291,276],
[277,284,0,296,271,273,265,315],
[308,285,254,0,276,314,307,294],
[287,281,279,274,0,287,285,283],
[253,262,277,236,263,0,288,260],
[298,259,285,243,265,262,0,275],
[284,274,235,256,267,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,257,284,258,257,272,252],
[285,0,260,281,273,271,290,278],
[293,290,0,281,280,288,280,273],
[266,269,269,0,265,276,276,255],
[292,277,270,285,0,281,288,268],
[293,279,262,274,269,0,279,258],
[278,260,270,274,262,271,0,253],
[298,272,277,295,282,292,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,269,272,267,282,298,303],
[289,0,284,265,275,271,291,289],
[281,266,0,278,281,259,284,288],
[278,285,272,0,258,272,279,280],
[283,275,269,292,0,274,297,290],
[268,279,291,278,276,0,287,274],
[252,259,266,271,253,263,0,260],
[247,261,262,270,260,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,266,253,262,278,275],
[265,0,277,280,267,270,263,282],
[286,273,0,273,267,264,271,275],
[284,270,277,0,279,275,276,288],
[297,283,283,271,0,271,273,287],
[288,280,286,275,279,0,264,283],
[272,287,279,274,277,286,0,288],
[275,268,275,262,263,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,252,283,274,272,250,279],
[252,0,228,244,262,257,253,237],
[298,322,0,303,279,280,269,275],
[267,306,247,0,263,280,251,281],
[276,288,271,287,0,266,252,259],
[278,293,270,270,284,0,263,283],
[300,297,281,299,298,287,0,274],
[271,313,275,269,291,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,275,275,283,265,263,276],
[282,0,259,284,278,257,277,272],
[275,291,0,291,273,272,267,278],
[275,266,259,0,269,254,257,260],
[267,272,277,281,0,275,281,264],
[285,293,278,296,275,0,282,296],
[287,273,283,293,269,268,0,281],
[274,278,272,290,286,254,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,260,285,283,289,292,266],
[245,0,235,239,261,249,264,246],
[290,315,0,284,275,298,315,287],
[265,311,266,0,303,285,304,284],
[267,289,275,247,0,266,276,263],
[261,301,252,265,284,0,308,282],
[258,286,235,246,274,242,0,242],
[284,304,263,266,287,268,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,279,261,271,281,270,261],
[255,0,274,255,265,252,253,247],
[271,276,0,260,266,269,269,254],
[289,295,290,0,274,272,264,256],
[279,285,284,276,0,273,283,246],
[269,298,281,278,277,0,285,254],
[280,297,281,286,267,265,0,277],
[289,303,296,294,304,296,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,282,273,299,269,284,284],
[268,0,268,266,273,275,275,279],
[268,282,0,300,288,277,280,299],
[277,284,250,0,296,260,285,256],
[251,277,262,254,0,277,258,273],
[281,275,273,290,273,0,297,283],
[266,275,270,265,292,253,0,277],
[266,271,251,294,277,267,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,243,262,289,239,258,256],
[292,0,252,293,293,260,268,238],
[307,298,0,294,299,280,263,272],
[288,257,256,0,292,277,280,286],
[261,257,251,258,0,250,243,265],
[311,290,270,273,300,0,261,282],
[292,282,287,270,307,289,0,273],
[294,312,278,264,285,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,267,279,280,276,267],
[279,0,269,277,274,291,293,288],
[281,281,0,261,269,275,284,268],
[283,273,289,0,273,280,293,268],
[271,276,281,277,0,286,291,275],
[270,259,275,270,264,0,280,267],
[274,257,266,257,259,270,0,258],
[283,262,282,282,275,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,285,289,260,273,274],
[266,0,289,269,275,277,285,287],
[264,261,0,263,262,280,260,271],
[265,281,287,0,286,274,271,280],
[261,275,288,264,0,264,258,283],
[290,273,270,276,286,0,262,264],
[277,265,290,279,292,288,0,294],
[276,263,279,270,267,286,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,277,278,277,275,291,278],
[294,0,276,280,265,282,282,268],
[273,274,0,274,272,291,262,278],
[272,270,276,0,283,296,279,264],
[273,285,278,267,0,285,271,253],
[275,268,259,254,265,0,295,265],
[259,268,288,271,279,255,0,247],
[272,282,272,286,297,285,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,255,270,258,282,277,279],
[251,0,270,271,261,268,274,278],
[295,280,0,272,272,277,272,289],
[280,279,278,0,269,276,300,285],
[292,289,278,281,0,290,279,269],
[268,282,273,274,260,0,289,288],
[273,276,278,250,271,261,0,271],
[271,272,261,265,281,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,257,241,257,277,264,236],
[281,0,258,262,231,244,254,254],
[293,292,0,270,256,270,277,255],
[309,288,280,0,256,252,261,266],
[293,319,294,294,0,286,267,289],
[273,306,280,298,264,0,284,278],
[286,296,273,289,283,266,0,283],
[314,296,295,284,261,272,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,285,290,306,276,280,271],
[250,0,259,257,279,236,257,262],
[265,291,0,271,305,249,256,275],
[260,293,279,0,294,248,282,258],
[244,271,245,256,0,226,249,243],
[274,314,301,302,324,0,297,271],
[270,293,294,268,301,253,0,265],
[279,288,275,292,307,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,273,267,256,262,290],
[277,0,279,298,271,278,261,280],
[288,271,0,261,257,266,248,287],
[277,252,289,0,272,268,255,289],
[283,279,293,278,0,280,257,290],
[294,272,284,282,270,0,276,290],
[288,289,302,295,293,274,0,300],
[260,270,263,261,260,260,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,277,232,250,358,300],
[283,0,330,279,277,233,294,306],
[272,220,0,277,227,256,273,305],
[273,271,273,0,230,259,296,312],
[318,273,323,320,0,298,344,333],
[300,317,294,291,252,0,331,313],
[192,256,277,254,206,219,0,351],
[250,244,245,238,217,237,199,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,281,290,275,278,288],
[278,0,292,288,280,269,271,281],
[274,258,0,289,283,261,278,294],
[269,262,261,0,279,257,278,279],
[260,270,267,271,0,273,277,272],
[275,281,289,293,277,0,297,277],
[272,279,272,272,273,253,0,276],
[262,269,256,271,278,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,267,277,279,275,276],
[280,0,282,272,284,289,267,289],
[284,268,0,285,294,280,276,273],
[283,278,265,0,294,284,271,278],
[273,266,256,256,0,281,255,271],
[271,261,270,266,269,0,268,279],
[275,283,274,279,295,282,0,269],
[274,261,277,272,279,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,280,292,258,306,297,295],
[291,0,289,257,279,283,319,277],
[270,261,0,274,255,333,291,270],
[258,293,276,0,259,303,302,258],
[292,271,295,291,0,345,330,261],
[244,267,217,247,205,0,246,220],
[253,231,259,248,220,304,0,215],
[255,273,280,292,289,330,335,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,262,281,272,273,278],
[281,0,300,276,281,275,286,277],
[275,250,0,275,261,261,274,272],
[288,274,275,0,263,273,273,287],
[269,269,289,287,0,269,274,290],
[278,275,289,277,281,0,281,281],
[277,264,276,277,276,269,0,275],
[272,273,278,263,260,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,277,254,276,269,254,270],
[287,0,301,271,281,270,270,266],
[273,249,0,284,285,269,271,262],
[296,279,266,0,285,264,276,287],
[274,269,265,265,0,268,249,259],
[281,280,281,286,282,0,269,277],
[296,280,279,274,301,281,0,278],
[280,284,288,263,291,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,296,292,302,295,283],
[250,0,240,262,272,266,281,260],
[275,310,0,273,291,283,275,280],
[254,288,277,0,278,289,297,280],
[258,278,259,272,0,315,287,283],
[248,284,267,261,235,0,273,267],
[255,269,275,253,263,277,0,268],
[267,290,270,270,267,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,264,300,244,298,293,273],
[260,0,264,279,279,273,296,249],
[286,286,0,303,272,291,282,265],
[250,271,247,0,247,282,291,258],
[306,271,278,303,0,306,324,305],
[252,277,259,268,244,0,277,260],
[257,254,268,259,226,273,0,246],
[277,301,285,292,245,290,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,274,257,283,273,256,275],
[295,0,275,267,278,266,258,293],
[276,275,0,275,275,264,261,283],
[293,283,275,0,296,275,272,285],
[267,272,275,254,0,267,259,281],
[277,284,286,275,283,0,279,287],
[294,292,289,278,291,271,0,287],
[275,257,267,265,269,263,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,277,272,278,285,271],
[266,0,267,268,279,299,281,285],
[272,283,0,273,275,288,298,271],
[273,282,277,0,298,305,293,293],
[278,271,275,252,0,282,278,272],
[272,251,262,245,268,0,263,263],
[265,269,252,257,272,287,0,269],
[279,265,279,257,278,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,283,271,266,252,275,265],
[270,0,277,242,272,236,289,259],
[267,273,0,280,296,272,278,286],
[279,308,270,0,275,302,293,296],
[284,278,254,275,0,243,276,260],
[298,314,278,248,307,0,305,297],
[275,261,272,257,274,245,0,258],
[285,291,264,254,290,253,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,312,294,310,259,294,292],
[263,0,243,245,253,250,279,243],
[238,307,0,277,282,249,275,266],
[256,305,273,0,281,248,285,267],
[240,297,268,269,0,275,282,264],
[291,300,301,302,275,0,293,277],
[256,271,275,265,268,257,0,270],
[258,307,284,283,286,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,265,259,260,256,267],
[264,0,274,250,267,267,258,272],
[276,276,0,277,260,274,265,267],
[285,300,273,0,282,295,272,293],
[291,283,290,268,0,279,268,286],
[290,283,276,255,271,0,277,288],
[294,292,285,278,282,273,0,273],
[283,278,283,257,264,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,262,256,256,276,265,265],
[279,0,279,260,261,287,282,283],
[288,271,0,282,260,279,278,263],
[294,290,268,0,283,287,276,288],
[294,289,290,267,0,292,283,272],
[274,263,271,263,258,0,270,268],
[285,268,272,274,267,280,0,277],
[285,267,287,262,278,282,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,258,249,283,298,273],
[281,0,293,279,272,272,306,270],
[285,257,0,273,279,276,299,269],
[292,271,277,0,264,265,304,251],
[301,278,271,286,0,308,294,295],
[267,278,274,285,242,0,298,265],
[252,244,251,246,256,252,0,268],
[277,280,281,299,255,285,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,276,268,257,244,293,215],
[293,0,309,322,263,272,323,279],
[274,241,0,247,223,210,291,184],
[282,228,303,0,245,291,315,263],
[293,287,327,305,0,245,338,303],
[306,278,340,259,305,0,291,301],
[257,227,259,235,212,259,0,196],
[335,271,366,287,247,249,354,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,269,289,279,273,265,241],
[279,0,271,270,273,273,278,256],
[281,279,0,272,263,285,265,284],
[261,280,278,0,286,277,264,277],
[271,277,287,264,0,274,269,294],
[277,277,265,273,276,0,260,276],
[285,272,285,286,281,290,0,271],
[309,294,266,273,256,274,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,291,298,275,296,275],
[262,0,264,276,275,251,274,257],
[281,286,0,293,283,265,274,262],
[259,274,257,0,276,271,273,266],
[252,275,267,274,0,258,267,280],
[275,299,285,279,292,0,286,285],
[254,276,276,277,283,264,0,290],
[275,293,288,284,270,265,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,277,266,316,261,279,273],
[288,0,291,274,326,291,280,273],
[273,259,0,246,312,283,264,269],
[284,276,304,0,308,272,291,294],
[234,224,238,242,0,253,255,242],
[289,259,267,278,297,0,285,281],
[271,270,286,259,295,265,0,270],
[277,277,281,256,308,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,291,276,277,285,275,322],
[249,0,261,260,277,264,268,288],
[259,289,0,275,266,284,276,289],
[274,290,275,0,290,298,262,298],
[273,273,284,260,0,271,280,299],
[265,286,266,252,279,0,263,286],
[275,282,274,288,270,287,0,278],
[228,262,261,252,251,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,292,258,277,287,286,268],
[252,0,303,275,274,301,297,301],
[258,247,0,253,258,256,272,288],
[292,275,297,0,278,280,282,305],
[273,276,292,272,0,288,272,289],
[263,249,294,270,262,0,265,270],
[264,253,278,268,278,285,0,282],
[282,249,262,245,261,280,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,278,247,271,282,274,251],
[277,0,269,265,272,270,284,265],
[272,281,0,261,286,284,273,272],
[303,285,289,0,281,291,274,281],
[279,278,264,269,0,261,267,271],
[268,280,266,259,289,0,272,272],
[276,266,277,276,283,278,0,277],
[299,285,278,269,279,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,246,300,264,287,264],
[280,0,275,273,275,289,298,283],
[302,275,0,269,313,301,314,279],
[304,277,281,0,297,298,318,268],
[250,275,237,253,0,246,275,262],
[286,261,249,252,304,0,288,252],
[263,252,236,232,275,262,0,249],
[286,267,271,282,288,298,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,282,314,299,303,336],
[280,0,295,267,310,279,314,303],
[285,255,0,313,338,262,279,359],
[268,283,237,0,302,289,280,327],
[236,240,212,248,0,265,265,258],
[251,271,288,261,285,0,309,324],
[247,236,271,270,285,241,0,323],
[214,247,191,223,292,226,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,273,268,270,250,272,303],
[261,0,284,281,278,280,270,280],
[277,266,0,279,291,265,264,298],
[282,269,271,0,276,261,274,300],
[280,272,259,274,0,263,253,302],
[300,270,285,289,287,0,292,296],
[278,280,286,276,297,258,0,299],
[247,270,252,250,248,254,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,281,264,281,272,287],
[267,0,269,293,267,245,260,267],
[270,281,0,300,265,274,279,286],
[269,257,250,0,262,263,266,267],
[286,283,285,288,0,258,281,280],
[269,305,276,287,292,0,281,286],
[278,290,271,284,269,269,0,283],
[263,283,264,283,270,264,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,316,255,278,257,295,241],
[242,0,264,251,201,237,250,242],
[234,286,0,238,232,269,279,310],
[295,299,312,0,237,261,266,288],
[272,349,318,313,0,345,304,328],
[293,313,281,289,205,0,287,281],
[255,300,271,284,246,263,0,278],
[309,308,240,262,222,269,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,250,270,280,264,257,261],
[277,0,267,267,298,272,251,283],
[300,283,0,302,333,276,278,271],
[280,283,248,0,280,283,262,275],
[270,252,217,270,0,255,250,244],
[286,278,274,267,295,0,274,298],
[293,299,272,288,300,276,0,314],
[289,267,279,275,306,252,236,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,258,250,252,258,266,255],
[314,0,276,286,292,267,293,283],
[292,274,0,257,262,247,287,270],
[300,264,293,0,281,280,295,268],
[298,258,288,269,0,276,294,278],
[292,283,303,270,274,0,311,290],
[284,257,263,255,256,239,0,256],
[295,267,280,282,272,260,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,329,201,179,230,144,204],
[244,0,232,216,297,334,230,327],
[221,318,0,252,292,227,182,234],
[349,334,298,0,347,269,265,302],
[371,253,258,203,0,210,346,251],
[320,216,323,281,340,0,350,393],
[406,320,368,285,204,200,0,304],
[346,223,316,248,299,157,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,256,257,243,272,270,251],
[284,0,272,271,280,297,279,264],
[294,278,0,271,254,277,283,273],
[293,279,279,0,264,270,290,260],
[307,270,296,286,0,295,304,280],
[278,253,273,280,255,0,284,265],
[280,271,267,260,246,266,0,262],
[299,286,277,290,270,285,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,266,288,274,257,285],
[280,0,275,278,284,282,261,264],
[281,275,0,282,312,263,273,291],
[284,272,268,0,308,254,267,277],
[262,266,238,242,0,234,242,259],
[276,268,287,296,316,0,254,267],
[293,289,277,283,308,296,0,275],
[265,286,259,273,291,283,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,286,278,261,280,293,283],
[251,0,273,261,264,282,242,264],
[264,277,0,258,259,264,263,246],
[272,289,292,0,275,279,270,262],
[289,286,291,275,0,269,277,302],
[270,268,286,271,281,0,266,279],
[257,308,287,280,273,284,0,274],
[267,286,304,288,248,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,286,272,210,291,236,270],
[235,0,250,175,224,198,262,182],
[264,300,0,203,215,223,225,280],
[278,375,347,0,329,261,320,297],
[340,326,335,221,0,235,271,303],
[259,352,327,289,315,0,285,297],
[314,288,325,230,279,265,0,320],
[280,368,270,253,247,253,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,342,326,305,266,297,255],
[213,0,293,255,251,265,272,262],
[208,257,0,289,232,244,226,288],
[224,295,261,0,241,226,287,285],
[245,299,318,309,0,306,294,315],
[284,285,306,324,244,0,268,279],
[253,278,324,263,256,282,0,278],
[295,288,262,265,235,271,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,273,292,288,242,297,307],
[286,0,266,308,305,276,296,347],
[277,284,0,299,267,274,295,303],
[258,242,251,0,254,262,264,284],
[262,245,283,296,0,257,266,308],
[308,274,276,288,293,0,313,308],
[253,254,255,286,284,237,0,274],
[243,203,247,266,242,242,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,292,284,261,271,281,257],
[278,0,270,283,262,290,265,257],
[258,280,0,272,260,273,262,256],
[266,267,278,0,241,271,265,267],
[289,288,290,309,0,284,268,269],
[279,260,277,279,266,0,286,257],
[269,285,288,285,282,264,0,278],
[293,293,294,283,281,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,290,266,277,294,297],
[269,0,281,265,292,284,300,276],
[261,269,0,261,280,272,291,290],
[260,285,289,0,296,281,282,279],
[284,258,270,254,0,278,268,269],
[273,266,278,269,272,0,279,281],
[256,250,259,268,282,271,0,268],
[253,274,260,271,281,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,295,276,228,272,242,271],
[293,0,274,297,242,283,283,290],
[255,276,0,268,257,285,306,286],
[274,253,282,0,251,296,276,265],
[322,308,293,299,0,329,269,293],
[278,267,265,254,221,0,245,279],
[308,267,244,274,281,305,0,301],
[279,260,264,285,257,271,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,268,341,309,312,292,312],
[269,0,293,344,315,315,306,314],
[282,257,0,294,290,284,247,260],
[209,206,256,0,275,249,275,256],
[241,235,260,275,0,265,232,237],
[238,235,266,301,285,0,247,269],
[258,244,303,275,318,303,0,252],
[238,236,290,294,313,281,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,253,311,265,275,251,219],
[236,0,271,273,219,219,220,199],
[297,279,0,322,247,202,247,241],
[239,277,228,0,204,291,235,202],
[285,331,303,346,0,358,331,249],
[275,331,348,259,192,0,254,279],
[299,330,303,315,219,296,0,325],
[331,351,309,348,301,271,225,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,273,285,284,285,293,273],
[259,0,259,247,266,262,260,288],
[277,291,0,261,289,296,309,311],
[265,303,289,0,304,305,299,282],
[266,284,261,246,0,228,291,234],
[265,288,254,245,322,0,311,291],
[257,290,241,251,259,239,0,286],
[277,262,239,268,316,259,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,242,236,285,256,325,197,256],
[308,0,282,275,269,262,275,282],
[314,268,0,291,247,301,274,269],
[265,275,259,0,248,279,183,200],
[294,281,303,302,0,291,260,298],
[225,288,249,271,259,0,234,227],
[353,275,276,367,290,316,0,262],
[294,268,281,350,252,323,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,269,283,258,275,280,264],
[294,0,291,274,282,279,299,287],
[281,259,0,285,276,290,295,264],
[267,276,265,0,275,252,295,264],
[292,268,274,275,0,275,295,276],
[275,271,260,298,275,0,278,291],
[270,251,255,255,255,272,0,257],
[286,263,286,286,274,259,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,279,293,276,291,297],
[284,0,290,284,298,274,282,288],
[278,260,0,277,273,267,301,273],
[271,266,273,0,281,261,273,274],
[257,252,277,269,0,256,269,268],
[274,276,283,289,294,0,303,293],
[259,268,249,277,281,247,0,273],
[253,262,277,276,282,257,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,264,247,287,253,289,282],
[291,0,280,275,317,296,325,281],
[286,270,0,260,319,290,340,280],
[303,275,290,0,300,285,319,286],
[263,233,231,250,0,250,269,231],
[297,254,260,265,300,0,314,265],
[261,225,210,231,281,236,0,238],
[268,269,270,264,319,285,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,285,266,228,258,261,253],
[322,0,279,257,283,267,298,285],
[265,271,0,244,241,257,234,257],
[284,293,306,0,267,296,292,283],
[322,267,309,283,0,300,278,282],
[292,283,293,254,250,0,282,231],
[289,252,316,258,272,268,0,265],
[297,265,293,267,268,319,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,266,256,246,251,277,213],
[278,0,280,271,291,274,242,263],
[284,270,0,245,244,271,255,280],
[294,279,305,0,301,280,263,281],
[304,259,306,249,0,274,257,257],
[299,276,279,270,276,0,281,270],
[273,308,295,287,293,269,0,261],
[337,287,270,269,293,280,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,250,259,264,260,275,275],
[289,0,283,282,284,259,292,280],
[300,267,0,272,270,270,277,255],
[291,268,278,0,265,244,234,283],
[286,266,280,285,0,277,263,305],
[290,291,280,306,273,0,301,306],
[275,258,273,316,287,249,0,288],
[275,270,295,267,245,244,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,300,263,268,265,274],
[275,0,280,304,273,269,276,277],
[278,270,0,291,283,272,279,273],
[250,246,259,0,245,254,253,262],
[287,277,267,305,0,279,273,288],
[282,281,278,296,271,0,278,270],
[285,274,271,297,277,272,0,279],
[276,273,277,288,262,280,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,268,286,276,276,275,270],
[297,0,291,308,296,271,287,296],
[282,259,0,284,279,257,267,272],
[264,242,266,0,288,242,254,279],
[274,254,271,262,0,261,255,271],
[274,279,293,308,289,0,282,275],
[275,263,283,296,295,268,0,265],
[280,254,278,271,279,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,280,275,281,264,281],
[288,0,270,277,268,273,269,268],
[269,280,0,263,267,287,271,295],
[270,273,287,0,267,267,275,268],
[275,282,283,283,0,274,280,291],
[269,277,263,283,276,0,274,285],
[286,281,279,275,270,276,0,297],
[269,282,255,282,259,265,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,259,261,273,274,283],
[271,0,266,287,279,285,290,262],
[289,284,0,298,282,267,277,269],
[291,263,252,0,290,277,290,291],
[289,271,268,260,0,274,275,272],
[277,265,283,273,276,0,289,289],
[276,260,273,260,275,261,0,279],
[267,288,281,259,278,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,317,323,269,284,293,278],
[267,0,335,271,274,268,325,276],
[233,215,0,271,290,234,223,263],
[227,279,279,0,251,265,273,253],
[281,276,260,299,0,271,265,282],
[266,282,316,285,279,0,276,286],
[257,225,327,277,285,274,0,305],
[272,274,287,297,268,264,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,227,267,246,248,260,259,235],
[323,0,297,278,268,305,283,293],
[283,253,0,255,268,277,285,269],
[304,272,295,0,274,281,297,272],
[302,282,282,276,0,284,281,273],
[290,245,273,269,266,0,287,261],
[291,267,265,253,269,263,0,256],
[315,257,281,278,277,289,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,257,257,279,269,242],
[277,0,271,252,284,290,295,264],
[273,279,0,278,263,273,265,273],
[293,298,272,0,265,297,292,277],
[293,266,287,285,0,283,268,257],
[271,260,277,253,267,0,254,264],
[281,255,285,258,282,296,0,270],
[308,286,277,273,293,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,188,273,316,257,193,316],
[298,0,257,289,459,230,184,398],
[362,293,0,222,318,274,302,353],
[277,261,328,0,353,277,136,403],
[234,91,232,197,0,213,152,246],
[293,320,276,273,337,0,203,462],
[357,366,248,414,398,347,0,398],
[234,152,197,147,304,88,152,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,284,269,284,261,260,256],
[284,0,300,257,290,260,274,260],
[266,250,0,252,289,254,235,258],
[281,293,298,0,307,265,272,259],
[266,260,261,243,0,239,258,229],
[289,290,296,285,311,0,288,275],
[290,276,315,278,292,262,0,266],
[294,290,292,291,321,275,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,265,285,273,270,254],
[287,0,281,287,298,290,275,282],
[285,269,0,278,294,291,285,260],
[285,263,272,0,301,278,271,267],
[265,252,256,249,0,286,257,256],
[277,260,259,272,264,0,275,270],
[280,275,265,279,293,275,0,274],
[296,268,290,283,294,280,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,311,242,265,283,258,273],
[263,0,287,227,276,220,200,264],
[239,263,0,209,283,226,233,253],
[308,323,341,0,254,308,256,349],
[285,274,267,296,0,265,241,289],
[267,330,324,242,285,0,277,342],
[292,350,317,294,309,273,0,317],
[277,286,297,201,261,208,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,233,224,289,321,272,154],
[209,0,260,259,107,270,300,146],
[317,290,0,189,220,361,359,209],
[326,291,361,0,319,293,258,277],
[261,443,330,231,0,303,296,270],
[229,280,189,257,247,0,187,132],
[278,250,191,292,254,363,0,175],
[396,404,341,273,280,418,375,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,278,270,316,312,275,290],
[255,0,242,239,259,261,234,236],
[272,308,0,286,301,285,249,277],
[280,311,264,0,321,282,268,273],
[234,291,249,229,0,259,227,255],
[238,289,265,268,291,0,238,271],
[275,316,301,282,323,312,0,287],
[260,314,273,277,295,279,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,278,253,274,282,311,251],
[298,0,298,290,266,279,290,284],
[272,252,0,252,268,260,253,260],
[297,260,298,0,278,273,272,263],
[276,284,282,272,0,274,282,305],
[268,271,290,277,276,0,267,252],
[239,260,297,278,268,283,0,234],
[299,266,290,287,245,298,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,300,312,283,274,276],
[279,0,292,280,295,251,271,268],
[267,258,0,267,289,243,255,265],
[250,270,283,0,283,259,271,251],
[238,255,261,267,0,264,280,257],
[267,299,307,291,286,0,285,262],
[276,279,295,279,270,265,0,242],
[274,282,285,299,293,288,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,260,272,257,275,280],
[289,0,268,276,271,269,278,260],
[283,282,0,291,274,266,303,292],
[290,274,259,0,264,263,294,291],
[278,279,276,286,0,275,275,287],
[293,281,284,287,275,0,276,303],
[275,272,247,256,275,274,0,273],
[270,290,258,259,263,247,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,265,284,265,287,284,266],
[281,0,282,305,275,291,291,280],
[285,268,0,272,274,286,270,256],
[266,245,278,0,268,280,258,273],
[285,275,276,282,0,294,283,280],
[263,259,264,270,256,0,258,257],
[266,259,280,292,267,292,0,255],
[284,270,294,277,270,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,288,330,272,226,271,298],
[310,0,366,285,339,290,263,365],
[262,184,0,301,288,271,318,265],
[220,265,249,0,261,201,222,316],
[278,211,262,289,0,267,269,313],
[324,260,279,349,283,0,339,315],
[279,287,232,328,281,211,0,324],
[252,185,285,234,237,235,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,262,273,280,291,274],
[288,0,273,288,278,287,284,256],
[270,277,0,275,249,242,261,258],
[288,262,275,0,279,281,276,265],
[277,272,301,271,0,302,262,252],
[270,263,308,269,248,0,272,268],
[259,266,289,274,288,278,0,279],
[276,294,292,285,298,282,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,292,283,284,299,293,274],
[261,0,277,252,278,263,255,261],
[258,273,0,234,254,261,258,239],
[267,298,316,0,308,287,291,286],
[266,272,296,242,0,243,261,273],
[251,287,289,263,307,0,270,261],
[257,295,292,259,289,280,0,261],
[276,289,311,264,277,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,278,262,247,267,264],
[283,0,271,255,256,243,262,266],
[275,279,0,261,267,234,275,258],
[272,295,289,0,248,268,268,273],
[288,294,283,302,0,268,286,267],
[303,307,316,282,282,0,270,280],
[283,288,275,282,264,280,0,265],
[286,284,292,277,283,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,254,273,310,246,261,271],
[269,0,253,257,285,292,230,295],
[296,297,0,281,288,274,258,296],
[277,293,269,0,332,323,280,359],
[240,265,262,218,0,252,248,291],
[304,258,276,227,298,0,207,258],
[289,320,292,270,302,343,0,304],
[279,255,254,191,259,292,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,262,237,264,271,256,235],
[269,0,269,256,259,294,266,269],
[288,281,0,272,277,310,290,275],
[313,294,278,0,283,301,272,261],
[286,291,273,267,0,303,259,267],
[279,256,240,249,247,0,250,241],
[294,284,260,278,291,300,0,260],
[315,281,275,289,283,309,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,261,308,257,257,261],
[273,0,272,287,301,271,282,293],
[280,278,0,274,298,273,285,260],
[289,263,276,0,323,260,290,284],
[242,249,252,227,0,262,242,250],
[293,279,277,290,288,0,289,269],
[293,268,265,260,308,261,0,281],
[289,257,290,266,300,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,284,285,279,287,273,266],
[292,0,279,275,296,268,294,275],
[266,271,0,276,285,289,296,275],
[265,275,274,0,284,263,272,272],
[271,254,265,266,0,278,276,254],
[263,282,261,287,272,0,284,265],
[277,256,254,278,274,266,0,258],
[284,275,275,278,296,285,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,228,219,340,196,219,236],
[341,0,315,236,387,227,273,332],
[322,235,0,241,331,242,274,267],
[331,314,309,0,338,267,325,368],
[210,163,219,212,0,143,156,218],
[354,323,308,283,407,0,255,360],
[331,277,276,225,394,295,0,341],
[314,218,283,182,332,190,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,251,263,248,278,286,275],
[271,0,254,264,285,243,298,274],
[299,296,0,265,282,278,287,266],
[287,286,285,0,270,276,273,276],
[302,265,268,280,0,291,269,286],
[272,307,272,274,259,0,273,250],
[264,252,263,277,281,277,0,274],
[275,276,284,274,264,300,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,278,250,280,277,248,257],
[258,0,269,263,259,269,250,222],
[272,281,0,254,252,256,250,251],
[300,287,296,0,309,320,276,265],
[270,291,298,241,0,264,279,273],
[273,281,294,230,286,0,260,241],
[302,300,300,274,271,290,0,279],
[293,328,299,285,277,309,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,295,271,311,279,260,312],
[270,0,343,250,302,314,294,311],
[255,207,0,299,311,277,258,330],
[279,300,251,0,307,283,279,288],
[239,248,239,243,0,231,230,331],
[271,236,273,267,319,0,239,279],
[290,256,292,271,320,311,0,367],
[238,239,220,262,219,271,183,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,275,291,264,278,270],
[283,0,283,279,284,259,269,281],
[289,267,0,291,275,260,279,266],
[275,271,259,0,294,258,260,259],
[259,266,275,256,0,265,240,252],
[286,291,290,292,285,0,272,285],
[272,281,271,290,310,278,0,282],
[280,269,284,291,298,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,245,224,227,249,249,246],
[322,0,295,264,282,288,277,293],
[305,255,0,289,254,293,273,254],
[326,286,261,0,248,294,278,289],
[323,268,296,302,0,285,285,280],
[301,262,257,256,265,0,274,265],
[301,273,277,272,265,276,0,295],
[304,257,296,261,270,285,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,266,305,266,304,297],
[271,0,275,281,299,261,292,281],
[265,275,0,257,275,263,279,281],
[284,269,293,0,308,275,307,309],
[245,251,275,242,0,256,281,268],
[284,289,287,275,294,0,307,310],
[246,258,271,243,269,243,0,279],
[253,269,269,241,282,240,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,301,325,289,275,252,300],
[273,0,294,299,305,271,309,312],
[249,256,0,306,258,250,273,306],
[225,251,244,0,276,253,238,245],
[261,245,292,274,0,235,294,329],
[275,279,300,297,315,0,286,302],
[298,241,277,312,256,264,0,309],
[250,238,244,305,221,248,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,248,274,306,267,279],
[269,0,285,292,270,308,284,276],
[281,265,0,274,275,309,279,296],
[302,258,276,0,257,284,277,285],
[276,280,275,293,0,300,273,283],
[244,242,241,266,250,0,263,253],
[283,266,271,273,277,287,0,295],
[271,274,254,265,267,297,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,269,275,281,288,278,285],
[269,0,269,283,274,292,274,278],
[281,281,0,291,280,296,273,286],
[275,267,259,0,261,270,247,259],
[269,276,270,289,0,284,269,270],
[262,258,254,280,266,0,261,268],
[272,276,277,303,281,289,0,280],
[265,272,264,291,280,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,271,279,264,272,276,282],
[298,0,283,269,272,278,266,269],
[279,267,0,263,260,263,249,245],
[271,281,287,0,265,276,290,255],
[286,278,290,285,0,274,268,256],
[278,272,287,274,276,0,284,268],
[274,284,301,260,282,266,0,262],
[268,281,305,295,294,282,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,249,288,304,265,263,284],
[266,0,277,309,291,309,295,294],
[301,273,0,303,305,289,293,305],
[262,241,247,0,258,260,269,290],
[246,259,245,292,0,298,251,283],
[285,241,261,290,252,0,273,281],
[287,255,257,281,299,277,0,304],
[266,256,245,260,267,269,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,264,244,282,246,258,264],
[287,0,290,286,290,283,283,270],
[286,260,0,249,258,248,255,253],
[306,264,301,0,287,255,286,268],
[268,260,292,263,0,255,279,249],
[304,267,302,295,295,0,287,277],
[292,267,295,264,271,263,0,254],
[286,280,297,282,301,273,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,275,276,277,288,269,262],
[293,0,280,291,274,295,272,284],
[275,270,0,267,282,295,259,264],
[274,259,283,0,291,266,251,276],
[273,276,268,259,0,258,257,281],
[262,255,255,284,292,0,254,278],
[281,278,291,299,293,296,0,275],
[288,266,286,274,269,272,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,302,310,273,269,267,283],
[278,0,256,318,277,276,279,275],
[248,294,0,289,261,266,293,280],
[240,232,261,0,236,268,233,233],
[277,273,289,314,0,280,260,266],
[281,274,284,282,270,0,284,241],
[283,271,257,317,290,266,0,256],
[267,275,270,317,284,309,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,284,284,267,264,286],
[269,0,275,272,256,267,262,271],
[270,275,0,287,264,275,275,270],
[266,278,263,0,265,275,253,258],
[266,294,286,285,0,266,281,264],
[283,283,275,275,284,0,271,272],
[286,288,275,297,269,279,0,282],
[264,279,280,292,286,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,264,260,270,271,291],
[293,0,302,298,302,311,270,343],
[286,248,0,291,287,263,314,306],
[286,252,259,0,229,297,258,280],
[290,248,263,321,0,295,261,292],
[280,239,287,253,255,0,296,272],
[279,280,236,292,289,254,0,293],
[259,207,244,270,258,278,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,326,288,319,277,319,275],
[229,0,293,276,326,298,309,268],
[224,257,0,239,286,270,244,230],
[262,274,311,0,279,291,289,247],
[231,224,264,271,0,261,236,242],
[273,252,280,259,289,0,265,274],
[231,241,306,261,314,285,0,244],
[275,282,320,303,308,276,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,272,263,245,258,255,273],
[259,0,280,262,253,259,252,269],
[278,270,0,246,262,262,255,263],
[287,288,304,0,262,288,285,272],
[305,297,288,288,0,285,275,278],
[292,291,288,262,265,0,275,278],
[295,298,295,265,275,275,0,287],
[277,281,287,278,272,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,274,262,273,287,298,281],
[274,0,286,284,287,310,310,283],
[276,264,0,272,288,292,277,242],
[288,266,278,0,286,280,278,263],
[277,263,262,264,0,278,293,261],
[263,240,258,270,272,0,266,274],
[252,240,273,272,257,284,0,262],
[269,267,308,287,289,276,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,274,268,289,241,277],
[260,0,252,274,279,261,255,277],
[279,298,0,290,282,281,259,283],
[276,276,260,0,271,258,224,262],
[282,271,268,279,0,288,241,259],
[261,289,269,292,262,0,265,250],
[309,295,291,326,309,285,0,269],
[273,273,267,288,291,300,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,270,271,277,269,275,272],
[283,0,265,265,288,268,271,276],
[280,285,0,252,281,258,267,281],
[279,285,298,0,267,279,287,282],
[273,262,269,283,0,284,279,279],
[281,282,292,271,266,0,268,285],
[275,279,283,263,271,282,0,282],
[278,274,269,268,271,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,255,264,247,249,262,261],
[285,0,282,294,264,279,271,300],
[295,268,0,270,275,281,281,285],
[286,256,280,0,274,284,281,270],
[303,286,275,276,0,280,297,308],
[301,271,269,266,270,0,289,286],
[288,279,269,269,253,261,0,269],
[289,250,265,280,242,264,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,273,271,271,297,298,259],
[255,0,250,227,235,266,254,243],
[277,300,0,265,272,296,257,275],
[279,323,285,0,274,288,286,281],
[279,315,278,276,0,293,263,260],
[253,284,254,262,257,0,273,245],
[252,296,293,264,287,277,0,274],
[291,307,275,269,290,305,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,264,267,270,244,264],
[268,0,276,271,266,268,247,263],
[278,274,0,277,294,280,280,286],
[286,279,273,0,263,271,268,268],
[283,284,256,287,0,286,264,276],
[280,282,270,279,264,0,252,285],
[306,303,270,282,286,298,0,287],
[286,287,264,282,274,265,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,280,248,242,248,277],
[273,0,300,266,250,241,254,248],
[252,250,0,260,282,228,253,254],
[270,284,290,0,297,247,264,258],
[302,300,268,253,0,267,270,273],
[308,309,322,303,283,0,294,275],
[302,296,297,286,280,256,0,280],
[273,302,296,292,277,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,319,264,243,305,295],
[288,0,278,308,261,296,303,260],
[269,272,0,326,259,290,310,271],
[231,242,224,0,261,232,290,234],
[286,289,291,289,0,266,312,277],
[307,254,260,318,284,0,316,280],
[245,247,240,260,238,234,0,246],
[255,290,279,316,273,270,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,216,186,155,35,133],
[290,0,295,157,305,220,211,216],
[280,255,0,194,373,196,280,249],
[334,393,356,0,324,347,241,408],
[364,245,177,226,0,350,269,178],
[395,330,354,203,200,0,247,319],
[515,339,270,309,281,303,0,341],
[417,334,301,142,372,231,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,267,287,249,276,267],
[275,0,287,283,286,255,280,270],
[274,263,0,272,262,248,276,266],
[283,267,278,0,275,289,281,280],
[263,264,288,275,0,273,284,288],
[301,295,302,261,277,0,293,261],
[274,270,274,269,266,257,0,276],
[283,280,284,270,262,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,279,294,280,301,253],
[255,0,260,271,277,260,300,279],
[266,290,0,291,284,287,306,270],
[271,279,259,0,295,273,315,288],
[256,273,266,255,0,262,284,268],
[270,290,263,277,288,0,295,278],
[249,250,244,235,266,255,0,278],
[297,271,280,262,282,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,286,235,277,258,280,276],
[273,0,310,266,294,262,285,297],
[264,240,0,238,261,243,243,264],
[315,284,312,0,303,275,289,314],
[273,256,289,247,0,246,275,274],
[292,288,307,275,304,0,295,300],
[270,265,307,261,275,255,0,254],
[274,253,286,236,276,250,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,279,297,300,278,259],
[266,0,223,302,299,249,275,232],
[277,327,0,351,345,267,315,277],
[271,248,199,0,295,307,318,252],
[253,251,205,255,0,262,251,256],
[250,301,283,243,288,0,275,259],
[272,275,235,232,299,275,0,278],
[291,318,273,298,294,291,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,293,278,303,287,279,271],
[257,0,285,273,275,272,257,269],
[257,265,0,269,278,255,262,264],
[272,277,281,0,291,296,272,281],
[247,275,272,259,0,273,260,269],
[263,278,295,254,277,0,275,272],
[271,293,288,278,290,275,0,263],
[279,281,286,269,281,278,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,265,274,274,276,271,258],
[289,0,262,258,278,259,270,259],
[285,288,0,272,280,298,296,267],
[276,292,278,0,305,276,292,274],
[276,272,270,245,0,265,264,251],
[274,291,252,274,285,0,271,285],
[279,280,254,258,286,279,0,257],
[292,291,283,276,299,265,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,267,246,259,281,268,267],
[267,0,258,242,284,256,257,259],
[283,292,0,264,272,280,262,259],
[304,308,286,0,280,285,287,272],
[291,266,278,270,0,271,262,262],
[269,294,270,265,279,0,249,262],
[282,293,288,263,288,301,0,276],
[283,291,291,278,288,288,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,258,309,290,264,271,254],
[292,0,296,258,278,240,265,272],
[292,254,0,220,288,252,282,259],
[241,292,330,0,231,254,243,275],
[260,272,262,319,0,259,279,248],
[286,310,298,296,291,0,263,276],
[279,285,268,307,271,287,0,279],
[296,278,291,275,302,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,269,281,303,289,278],
[275,0,272,268,269,291,288,280],
[273,278,0,288,265,314,281,277],
[281,282,262,0,290,301,283,269],
[269,281,285,260,0,298,305,258],
[247,259,236,249,252,0,248,252],
[261,262,269,267,245,302,0,262],
[272,270,273,281,292,298,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,268,243,265,241,259,257],
[292,0,274,290,295,276,275,270],
[282,276,0,273,277,253,295,271],
[307,260,277,0,284,276,271,270],
[285,255,273,266,0,246,258,238],
[309,274,297,274,304,0,297,286],
[291,275,255,279,292,253,0,259],
[293,280,279,280,312,264,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,259,286,283,262,270,249],
[255,0,249,238,264,219,248,226],
[291,301,0,274,281,275,309,281],
[264,312,276,0,282,250,271,285],
[267,286,269,268,0,239,258,252],
[288,331,275,300,311,0,286,277],
[280,302,241,279,292,264,0,272],
[301,324,269,265,298,273,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,269,257,263,265,259],
[278,0,279,270,260,259,279,262],
[276,271,0,271,259,268,271,252],
[281,280,279,0,289,274,276,262],
[293,290,291,261,0,295,282,281],
[287,291,282,276,255,0,276,280],
[285,271,279,274,268,274,0,279],
[291,288,298,288,269,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,283,272,263,272,277,298],
[234,0,250,270,248,257,256,265],
[267,300,0,266,259,274,280,265],
[278,280,284,0,252,262,266,274],
[287,302,291,298,0,275,279,296],
[278,293,276,288,275,0,284,302],
[273,294,270,284,271,266,0,286],
[252,285,285,276,254,248,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,281,267,270,278,240],
[276,0,270,270,272,285,283,260],
[276,280,0,286,272,289,277,263],
[269,280,264,0,262,268,262,254],
[283,278,278,288,0,276,294,275],
[280,265,261,282,274,0,281,277],
[272,267,273,288,256,269,0,264],
[310,290,287,296,275,273,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,265,271,288,285,271,275],
[291,0,287,316,289,269,302,257],
[285,263,0,292,293,277,326,268],
[279,234,258,0,243,255,286,247],
[262,261,257,307,0,285,304,293],
[265,281,273,295,265,0,304,266],
[279,248,224,264,246,246,0,242],
[275,293,282,303,257,284,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,300,282,299,301,239,310],
[200,0,324,282,247,261,195,261],
[250,226,0,261,251,231,224,247],
[268,268,289,0,243,287,283,282],
[251,303,299,307,0,268,217,254],
[249,289,319,263,282,0,241,279],
[311,355,326,267,333,309,0,271],
[240,289,303,268,296,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,278,275,263,260,275,257],
[259,0,273,281,263,281,265,276],
[272,277,0,253,249,268,269,260],
[275,269,297,0,263,289,261,290],
[287,287,301,287,0,274,299,293],
[290,269,282,261,276,0,267,254],
[275,285,281,289,251,283,0,264],
[293,274,290,260,257,296,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,291,281,304,311,268,263],
[246,0,238,259,245,260,252,254],
[259,312,0,285,278,279,275,289],
[269,291,265,0,283,285,270,282],
[246,305,272,267,0,271,278,302],
[239,290,271,265,279,0,266,285],
[282,298,275,280,272,284,0,293],
[287,296,261,268,248,265,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,292,252,267,241,270,264],
[287,0,288,279,278,264,304,294],
[258,262,0,271,231,232,262,276],
[298,271,279,0,253,277,289,270],
[283,272,319,297,0,263,288,259],
[309,286,318,273,287,0,289,292],
[280,246,288,261,262,261,0,278],
[286,256,274,280,291,258,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,275,275,265,272,276,256],
[283,0,283,287,266,268,286,274],
[275,267,0,283,245,254,261,260],
[275,263,267,0,250,260,255,251],
[285,284,305,300,0,294,264,286],
[278,282,296,290,256,0,274,269],
[274,264,289,295,286,276,0,274],
[294,276,290,299,264,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,299,284,311,296,274,290],
[264,0,266,267,276,261,262,249],
[251,284,0,251,281,276,283,279],
[266,283,299,0,295,292,295,293],
[239,274,269,255,0,267,263,266],
[254,289,274,258,283,0,282,276],
[276,288,267,255,287,268,0,292],
[260,301,271,257,284,274,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,251,258,270,278,259,280],
[287,0,270,264,282,283,268,286],
[299,280,0,275,289,275,272,285],
[292,286,275,0,285,283,271,292],
[280,268,261,265,0,270,281,279],
[272,267,275,267,280,0,274,287],
[291,282,278,279,269,276,0,292],
[270,264,265,258,271,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,300,279,295,282,267,314],
[239,0,270,247,237,242,262,293],
[250,280,0,281,278,260,293,301],
[271,303,269,0,281,252,285,310],
[255,313,272,269,0,250,291,292],
[268,308,290,298,300,0,308,316],
[283,288,257,265,259,242,0,264],
[236,257,249,240,258,234,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,293,264,254,281,273,291],
[278,0,286,272,266,273,270,278],
[257,264,0,240,255,251,261,262],
[286,278,310,0,280,271,273,274],
[296,284,295,270,0,293,294,286],
[269,277,299,279,257,0,300,261],
[277,280,289,277,256,250,0,267],
[259,272,288,276,264,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,273,279,291,252,268],
[272,0,303,271,300,297,275,285],
[263,247,0,256,267,249,239,257],
[277,279,294,0,282,289,261,289],
[271,250,283,268,0,261,253,275],
[259,253,301,261,289,0,267,284],
[298,275,311,289,297,283,0,304],
[282,265,293,261,275,266,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,250,258,279,241,269],
[272,0,278,278,241,280,227,266],
[275,272,0,249,236,252,244,235],
[300,272,301,0,278,277,277,266],
[292,309,314,272,0,290,278,277],
[271,270,298,273,260,0,257,273],
[309,323,306,273,272,293,0,305],
[281,284,315,284,273,277,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,354,320,350,321,323,331],
[325,0,304,225,296,238,307,299],
[196,246,0,281,258,193,242,302],
[230,325,269,0,285,239,253,285],
[200,254,292,265,0,214,280,217],
[229,312,357,311,336,0,319,261],
[227,243,308,297,270,231,0,221],
[219,251,248,265,333,289,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,264,263,298,247,263,282],
[274,0,258,255,290,259,259,268],
[286,292,0,280,300,275,278,289],
[287,295,270,0,297,280,297,276],
[252,260,250,253,0,265,260,274],
[303,291,275,270,285,0,270,299],
[287,291,272,253,290,280,0,280],
[268,282,261,274,276,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,265,310,253,296,284,284],
[256,0,280,255,239,274,262,267],
[285,270,0,263,262,269,299,251],
[240,295,287,0,282,293,292,290],
[297,311,288,268,0,299,305,266],
[254,276,281,257,251,0,289,264],
[266,288,251,258,245,261,0,250],
[266,283,299,260,284,286,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,262,262,273,262,256,275],
[272,0,279,272,271,269,271,280],
[288,271,0,286,275,278,269,281],
[288,278,264,0,269,266,270,270],
[277,279,275,281,0,285,276,276],
[288,281,272,284,265,0,277,272],
[294,279,281,280,274,273,0,282],
[275,270,269,280,274,278,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,294,268,262,283,220,248],
[266,0,329,302,355,294,289,245],
[256,221,0,313,242,241,253,243],
[282,248,237,0,271,232,225,142],
[288,195,308,279,0,193,207,217],
[267,256,309,318,357,0,296,278],
[330,261,297,325,343,254,0,286],
[302,305,307,408,333,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,286,297,259,276,266],
[284,0,282,287,289,272,302,272],
[287,268,0,284,302,270,288,278],
[264,263,266,0,281,266,299,283],
[253,261,248,269,0,246,273,267],
[291,278,280,284,304,0,280,271],
[274,248,262,251,277,270,0,258],
[284,278,272,267,283,279,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,281,288,272,273,268,273],
[274,0,282,283,265,248,260,263],
[269,268,0,278,259,263,252,249],
[262,267,272,0,259,263,270,253],
[278,285,291,291,0,266,287,279],
[277,302,287,287,284,0,263,274],
[282,290,298,280,263,287,0,276],
[277,287,301,297,271,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,301,311,290,287,275],
[274,0,287,289,287,281,264,250],
[270,263,0,266,289,258,252,255],
[249,261,284,0,282,270,262,256],
[239,263,261,268,0,259,252,236],
[260,269,292,280,291,0,258,249],
[263,286,298,288,298,292,0,272],
[275,300,295,294,314,301,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,257,281,279,257,248],
[263,0,235,235,258,249,256,232],
[282,315,0,282,266,302,288,269],
[293,315,268,0,277,278,292,256],
[269,292,284,273,0,272,275,251],
[271,301,248,272,278,0,249,276],
[293,294,262,258,275,301,0,234],
[302,318,281,294,299,274,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,279,299,350,254,351,315],
[273,0,252,258,307,278,332,314],
[271,298,0,286,267,283,366,340],
[251,292,264,0,277,246,319,297],
[200,243,283,273,0,276,251,293],
[296,272,267,304,274,0,345,268],
[199,218,184,231,299,205,0,244],
[235,236,210,253,257,282,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,292,270,247,272,309,295],
[267,0,282,256,273,279,265,235],
[258,268,0,234,236,268,287,258],
[280,294,316,0,283,266,307,281],
[303,277,314,267,0,267,323,275],
[278,271,282,284,283,0,341,267],
[241,285,263,243,227,209,0,254],
[255,315,292,269,275,283,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,277,291,272,301,276,279],
[269,0,299,285,270,296,283,292],
[273,251,0,268,276,269,282,255],
[259,265,282,0,240,287,270,263],
[278,280,274,310,0,297,283,291],
[249,254,281,263,253,0,265,251],
[274,267,268,280,267,285,0,260],
[271,258,295,287,259,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,274,268,267,293,276,270],
[270,0,261,304,283,294,292,305],
[276,289,0,304,313,275,287,274],
[282,246,246,0,266,241,300,259],
[283,267,237,284,0,274,289,292],
[257,256,275,309,276,0,289,297],
[274,258,263,250,261,261,0,273],
[280,245,276,291,258,253,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,274,278,281,264,249,262],
[296,0,237,301,290,278,256,284],
[276,313,0,280,295,306,273,269],
[272,249,270,0,297,270,263,242],
[269,260,255,253,0,254,239,244],
[286,272,244,280,296,0,271,283],
[301,294,277,287,311,279,0,274],
[288,266,281,308,306,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,266,273,267,284,294,253],
[266,0,262,271,274,239,299,240],
[284,288,0,256,275,271,306,277],
[277,279,294,0,257,276,288,250],
[283,276,275,293,0,265,294,242],
[266,311,279,274,285,0,315,276],
[256,251,244,262,256,235,0,258],
[297,310,273,300,308,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,271,292,285,248,252,254],
[302,0,321,283,286,281,275,311],
[279,229,0,256,269,254,256,280],
[258,267,294,0,266,262,268,268],
[265,264,281,284,0,247,278,278],
[302,269,296,288,303,0,281,296],
[298,275,294,282,272,269,0,293],
[296,239,270,282,272,254,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,297,249,264,339,286,283],
[285,0,322,280,274,352,333,256],
[253,228,0,211,221,262,245,205],
[301,270,339,0,301,352,327,286],
[286,276,329,249,0,373,307,268],
[211,198,288,198,177,0,288,233],
[264,217,305,223,243,262,0,252],
[267,294,345,264,282,317,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,275,272,288,265,284,288],
[301,0,316,298,273,312,293,321],
[275,234,0,257,267,261,263,291],
[278,252,293,0,270,286,273,291],
[262,277,283,280,0,284,280,300],
[285,238,289,264,266,0,269,264],
[266,257,287,277,270,281,0,277],
[262,229,259,259,250,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,299,256,252,331,266,298],
[256,0,272,296,272,315,257,290],
[251,278,0,270,282,259,235,302],
[294,254,280,0,277,308,264,316],
[298,278,268,273,0,328,279,289],
[219,235,291,242,222,0,242,275],
[284,293,315,286,271,308,0,299],
[252,260,248,234,261,275,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,313,284,270,274,276,290],
[282,0,303,274,295,278,266,298],
[237,247,0,274,268,277,254,269],
[266,276,276,0,291,289,282,289],
[280,255,282,259,0,282,255,267],
[276,272,273,261,268,0,262,280],
[274,284,296,268,295,288,0,299],
[260,252,281,261,283,270,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,283,282,279,280,264],
[277,0,258,272,279,268,284,261],
[280,292,0,283,273,283,281,290],
[267,278,267,0,269,271,282,285],
[268,271,277,281,0,269,285,266],
[271,282,267,279,281,0,292,263],
[270,266,269,268,265,258,0,262],
[286,289,260,265,284,287,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,298,253,258,254,283,268],
[273,0,310,281,270,292,310,286],
[252,240,0,265,225,227,282,267],
[297,269,285,0,277,266,303,279],
[292,280,325,273,0,304,291,293],
[296,258,323,284,246,0,306,293],
[267,240,268,247,259,244,0,263],
[282,264,283,271,257,257,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,270,273,295,298,278,321],
[262,0,251,246,263,276,250,276],
[280,299,0,273,262,283,283,279],
[277,304,277,0,277,280,263,270],
[255,287,288,273,0,257,262,261],
[252,274,267,270,293,0,257,291],
[272,300,267,287,288,293,0,305],
[229,274,271,280,289,259,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,242,249,285,283,272,255],
[295,0,292,252,277,292,289,285],
[308,258,0,285,267,300,276,289],
[301,298,265,0,281,325,277,301],
[265,273,283,269,0,286,277,262],
[267,258,250,225,264,0,253,226],
[278,261,274,273,273,297,0,258],
[295,265,261,249,288,324,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,262,266,277,288,272],
[256,0,261,279,274,282,279,276],
[258,289,0,273,284,284,279,277],
[288,271,277,0,297,289,280,259],
[284,276,266,253,0,281,274,270],
[273,268,266,261,269,0,272,273],
[262,271,271,270,276,278,0,273],
[278,274,273,291,280,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,277,281,287,285,290,272],
[268,0,258,269,270,271,281,264],
[273,292,0,281,291,295,294,289],
[269,281,269,0,280,275,286,267],
[263,280,259,270,0,279,276,272],
[265,279,255,275,271,0,290,269],
[260,269,256,264,274,260,0,262],
[278,286,261,283,278,281,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,288,283,287,275,275,285],
[289,0,241,298,283,299,294,282],
[262,309,0,313,301,304,264,302],
[267,252,237,0,257,273,273,256],
[263,267,249,293,0,289,277,286],
[275,251,246,277,261,0,276,251],
[275,256,286,277,273,274,0,276],
[265,268,248,294,264,299,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,289,295,239,331,257,323],
[270,0,297,323,240,310,246,267],
[261,253,0,303,263,301,289,282],
[255,227,247,0,240,291,257,298],
[311,310,287,310,0,298,254,280],
[219,240,249,259,252,0,222,259],
[293,304,261,293,296,328,0,260],
[227,283,268,252,270,291,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,178,164,305,131,128,185],
[324,0,312,317,419,208,277,226],
[372,238,0,251,463,152,208,144],
[386,233,299,0,408,266,317,245],
[245,131,87,142,0,134,147,131],
[419,342,398,284,416,0,252,277],
[422,273,342,233,403,298,0,281],
[365,324,406,305,419,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,244,268,271,260,237,259],
[274,0,271,268,291,272,270,274],
[306,279,0,283,284,295,272,268],
[282,282,267,0,249,269,244,264],
[279,259,266,301,0,290,244,268],
[290,278,255,281,260,0,239,283],
[313,280,278,306,306,311,0,272],
[291,276,282,286,282,267,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,274,262,286,297,281,287],
[283,0,279,275,307,303,297,288],
[276,271,0,285,297,281,280,281],
[288,275,265,0,286,282,269,284],
[264,243,253,264,0,276,240,269],
[253,247,269,268,274,0,250,275],
[269,253,270,281,310,300,0,297],
[263,262,269,266,281,275,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,252,272,275,283,275,272],
[269,0,277,267,260,291,280,285],
[298,273,0,289,270,292,319,294],
[278,283,261,0,261,276,287,260],
[275,290,280,289,0,275,298,270],
[267,259,258,274,275,0,285,272],
[275,270,231,263,252,265,0,277],
[278,265,256,290,280,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,250,288,290,301,264,278],
[275,0,273,332,293,304,275,262],
[300,277,0,301,303,285,287,273],
[262,218,249,0,277,268,256,237],
[260,257,247,273,0,265,232,278],
[249,246,265,282,285,0,241,264],
[286,275,263,294,318,309,0,279],
[272,288,277,313,272,286,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,260,294,237,304,267],
[292,0,298,272,296,257,309,276],
[281,252,0,252,281,236,266,235],
[290,278,298,0,261,291,293,278],
[256,254,269,289,0,275,315,293],
[313,293,314,259,275,0,283,275],
[246,241,284,257,235,267,0,254],
[283,274,315,272,257,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,292,210,303,240,279,289],
[244,0,265,241,270,241,292,254],
[258,285,0,287,310,248,296,304],
[340,309,263,0,311,286,290,309],
[247,280,240,239,0,256,250,284],
[310,309,302,264,294,0,341,336],
[271,258,254,260,300,209,0,265],
[261,296,246,241,266,214,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,262,265,271,268,264,267],
[300,0,291,288,275,274,260,276],
[288,259,0,262,279,278,260,271],
[285,262,288,0,276,275,273,275],
[279,275,271,274,0,266,254,267],
[282,276,272,275,284,0,270,278],
[286,290,290,277,296,280,0,271],
[283,274,279,275,283,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,291,271,295,276,289],
[277,0,253,301,296,298,302,295],
[271,297,0,306,286,302,294,294],
[259,249,244,0,266,270,270,283],
[279,254,264,284,0,270,271,288],
[255,252,248,280,280,0,268,274],
[274,248,256,280,279,282,0,276],
[261,255,256,267,262,276,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,170,269,292,253,258,259,298],
[380,0,247,319,284,373,309,415],
[281,303,0,275,285,331,300,376],
[258,231,275,0,264,296,224,305],
[297,266,265,286,0,337,228,342],
[292,177,219,254,213,0,234,285],
[291,241,250,326,322,316,0,352],
[252,135,174,245,208,265,198,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,252,279,282,281,290,277],
[275,0,255,254,267,271,273,261],
[298,295,0,279,278,287,294,272],
[271,296,271,0,272,287,302,292],
[268,283,272,278,0,274,273,280],
[269,279,263,263,276,0,280,273],
[260,277,256,248,277,270,0,293],
[273,289,278,258,270,277,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,286,133,318,322,353,266],
[310,0,269,219,280,364,329,320],
[264,281,0,254,245,263,302,252],
[417,331,296,0,275,372,287,231],
[232,270,305,275,0,335,335,272],
[228,186,287,178,215,0,241,184],
[197,221,248,263,215,309,0,218],
[284,230,298,319,278,366,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,273,297,283,275,272],
[270,0,263,276,274,284,260,260],
[266,287,0,270,290,294,283,272],
[277,274,280,0,273,298,288,266],
[253,276,260,277,0,293,267,251],
[267,266,256,252,257,0,269,243],
[275,290,267,262,283,281,0,275],
[278,290,278,284,299,307,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,299,279,269,316,320,321],
[256,0,257,283,239,273,294,275],
[251,293,0,293,274,298,312,285],
[271,267,257,0,278,291,278,279],
[281,311,276,272,0,296,298,295],
[234,277,252,259,254,0,283,269],
[230,256,238,272,252,267,0,267],
[229,275,265,271,255,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,267,263,312,301,248],
[278,0,281,258,276,295,277,258],
[278,269,0,280,269,291,292,277],
[283,292,270,0,266,275,298,254],
[287,274,281,284,0,272,288,245],
[238,255,259,275,278,0,265,254],
[249,273,258,252,262,285,0,244],
[302,292,273,296,305,296,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,277,228,227,302,248],
[290,0,307,264,250,256,288,296],
[279,243,0,239,319,276,299,253],
[273,286,311,0,266,291,263,255],
[322,300,231,284,0,296,339,254],
[323,294,274,259,254,0,281,277],
[248,262,251,287,211,269,0,246],
[302,254,297,295,296,273,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,262,289,253,278,251,249],
[294,0,279,298,277,296,281,260],
[288,271,0,279,276,280,275,279],
[261,252,271,0,257,257,250,257],
[297,273,274,293,0,289,289,283],
[272,254,270,293,261,0,267,252],
[299,269,275,300,261,283,0,279],
[301,290,271,293,267,298,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,269,312,262,284,278,280],
[254,0,244,261,245,271,263,244],
[281,306,0,292,240,298,289,279],
[238,289,258,0,222,270,229,251],
[288,305,310,328,0,322,268,292],
[266,279,252,280,228,0,228,250],
[272,287,261,321,282,322,0,322],
[270,306,271,299,258,300,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,306,268,274,272,317,284],
[243,0,257,275,265,247,259,254],
[244,293,0,265,272,273,281,258],
[282,275,285,0,280,283,291,278],
[276,285,278,270,0,245,289,262],
[278,303,277,267,305,0,295,271],
[233,291,269,259,261,255,0,257],
[266,296,292,272,288,279,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,294,269,286,284,277],
[271,0,259,269,275,266,261,271],
[278,291,0,269,279,252,284,270],
[256,281,281,0,276,271,270,291],
[281,275,271,274,0,274,272,283],
[264,284,298,279,276,0,277,278],
[266,289,266,280,278,273,0,285],
[273,279,280,259,267,272,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,267,275,288,273,268],
[277,0,274,280,281,275,257,276],
[271,276,0,291,266,277,276,271],
[283,270,259,0,273,266,268,259],
[275,269,284,277,0,288,252,270],
[262,275,273,284,262,0,252,260],
[277,293,274,282,298,298,0,280],
[282,274,279,291,280,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,371,371,0,250,371,114,0],
[179,0,0,0,293,114,0,0],
[179,550,0,179,429,550,293,179],
[550,550,371,0,550,550,235,0],
[300,257,121,0,0,121,121,0],
[179,436,0,0,429,0,0,0],
[436,550,257,315,429,550,0,315],
[550,550,371,550,550,550,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,266,271,282,283,285,274],
[275,0,264,254,268,285,268,275],
[284,286,0,272,286,280,288,287],
[279,296,278,0,273,295,294,283],
[268,282,264,277,0,266,277,265],
[267,265,270,255,284,0,263,259],
[265,282,262,256,273,287,0,285],
[276,275,263,267,285,291,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,268,291,279,283,262,307],
[245,0,261,255,265,260,267,287],
[282,289,0,294,272,287,281,301],
[259,295,256,0,249,277,248,295],
[271,285,278,301,0,258,266,313],
[267,290,263,273,292,0,271,315],
[288,283,269,302,284,279,0,286],
[243,263,249,255,237,235,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,271,251,271,288,274,251],
[278,0,283,321,281,315,267,282],
[279,267,0,304,261,288,276,282],
[299,229,246,0,280,266,275,290],
[279,269,289,270,0,312,266,265],
[262,235,262,284,238,0,265,224],
[276,283,274,275,284,285,0,268],
[299,268,268,260,285,326,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,258,207,260,303,297],
[268,0,272,282,240,262,262,246],
[276,278,0,228,239,231,261,278],
[292,268,322,0,305,292,344,275],
[343,310,311,245,0,270,344,307],
[290,288,319,258,280,0,254,334],
[247,288,289,206,206,296,0,259],
[253,304,272,275,243,216,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,294,272,286,260,278,270],
[278,0,280,261,298,278,275,299],
[256,270,0,272,262,242,281,272],
[278,289,278,0,283,253,273,281],
[264,252,288,267,0,260,250,264],
[290,272,308,297,290,0,302,299],
[272,275,269,277,300,248,0,301],
[280,251,278,269,286,251,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,266,256,265,273,266],
[272,0,265,266,254,254,252,272],
[277,285,0,260,265,273,282,266],
[284,284,290,0,271,280,274,280],
[294,296,285,279,0,275,273,269],
[285,296,277,270,275,0,274,289],
[277,298,268,276,277,276,0,272],
[284,278,284,270,281,261,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,284,274,274,267,256,281],
[276,0,282,290,275,277,303,279],
[266,268,0,271,250,281,286,265],
[276,260,279,0,246,261,267,274],
[276,275,300,304,0,294,293,289],
[283,273,269,289,256,0,284,278],
[294,247,264,283,257,266,0,264],
[269,271,285,276,261,272,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,306,300,291,314,323,275],
[244,0,239,258,258,274,261,256],
[244,311,0,292,266,291,302,296],
[250,292,258,0,242,286,274,257],
[259,292,284,308,0,297,292,294],
[236,276,259,264,253,0,302,284],
[227,289,248,276,258,248,0,264],
[275,294,254,293,256,266,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,404,296,166,274,274,296,296],
[146,0,128,0,109,126,257,237],
[254,422,0,183,292,292,365,402],
[384,550,367,0,235,365,365,475],
[276,441,258,315,0,256,148,258],
[276,424,258,185,294,0,239,367],
[254,293,185,185,402,311,0,293],
[254,313,148,75,292,183,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,264,283,247,268,267,269],
[254,0,268,257,253,289,265,256],
[286,282,0,261,263,255,262,266],
[267,293,289,0,258,261,255,261],
[303,297,287,292,0,287,274,286],
[282,261,295,289,263,0,285,265],
[283,285,288,295,276,265,0,276],
[281,294,284,289,264,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,249,305,285,279,267],
[281,0,266,237,303,257,249,250],
[278,284,0,260,315,288,299,281],
[301,313,290,0,326,291,307,272],
[245,247,235,224,0,236,239,243],
[265,293,262,259,314,0,276,283],
[271,301,251,243,311,274,0,265],
[283,300,269,278,307,267,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,249,234,247,284,278,310],
[286,0,293,311,255,328,289,244],
[301,257,0,305,357,348,333,359],
[316,239,245,0,274,300,244,282],
[303,295,193,276,0,309,264,240],
[266,222,202,250,241,0,261,267],
[272,261,217,306,286,289,0,282],
[240,306,191,268,310,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,296,227,262,275,275,283],
[281,0,284,263,264,247,262,271],
[254,266,0,226,252,272,270,262],
[323,287,324,0,263,268,312,270],
[288,286,298,287,0,288,279,264],
[275,303,278,282,262,0,283,295],
[275,288,280,238,271,267,0,311],
[267,279,288,280,286,255,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,254,283,267,275,242],
[267,0,302,288,293,300,298,289],
[265,248,0,268,306,301,296,245],
[296,262,282,0,303,293,284,273],
[267,257,244,247,0,269,250,192],
[283,250,249,257,281,0,267,249],
[275,252,254,266,300,283,0,265],
[308,261,305,277,358,301,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,252,282,271,281,277,284],
[259,0,275,262,269,289,283,277],
[298,275,0,282,276,293,275,286],
[268,288,268,0,289,280,287,286],
[279,281,274,261,0,290,281,273],
[269,261,257,270,260,0,274,288],
[273,267,275,263,269,276,0,271],
[266,273,264,264,277,262,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,306,316,293,308,296,304],
[277,0,287,297,295,281,274,303],
[244,263,0,290,275,264,275,272],
[234,253,260,0,260,263,255,267],
[257,255,275,290,0,260,274,291],
[242,269,286,287,290,0,285,291],
[254,276,275,295,276,265,0,291],
[246,247,278,283,259,259,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,266,279,286,292,273],
[273,0,250,271,277,278,299,288],
[277,300,0,286,298,285,294,274],
[284,279,264,0,280,286,283,272],
[271,273,252,270,0,268,270,277],
[264,272,265,264,282,0,292,253],
[258,251,256,267,280,258,0,242],
[277,262,276,278,273,297,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,286,260,267,264,280,287],
[257,0,255,259,256,237,268,258],
[264,295,0,263,280,268,283,275],
[290,291,287,0,273,278,298,262],
[283,294,270,277,0,268,276,273],
[286,313,282,272,282,0,298,281],
[270,282,267,252,274,252,0,275],
[263,292,275,288,277,269,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,286,318,302,277,312,272],
[251,0,281,296,270,255,270,258],
[264,269,0,276,272,245,267,269],
[232,254,274,0,246,235,272,224],
[248,280,278,304,0,269,294,267],
[273,295,305,315,281,0,294,282],
[238,280,283,278,256,256,0,274],
[278,292,281,326,283,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,271,286,230,308,265,271],
[291,0,233,232,274,279,256,261],
[279,317,0,272,325,388,298,260],
[264,318,278,0,311,388,319,332],
[320,276,225,239,0,319,299,274],
[242,271,162,162,231,0,306,254],
[285,294,252,231,251,244,0,256],
[279,289,290,218,276,296,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,277,279,281,281,270,269],
[258,0,258,259,267,262,268,264],
[273,292,0,270,273,284,278,283],
[271,291,280,0,284,279,283,284],
[269,283,277,266,0,260,284,283],
[269,288,266,271,290,0,267,284],
[280,282,272,267,266,283,0,267],
[281,286,267,266,267,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,295,292,280,301,289,265],
[230,0,255,293,292,260,255,254],
[255,295,0,309,253,273,294,270],
[258,257,241,0,270,250,253,264],
[270,258,297,280,0,264,223,274],
[249,290,277,300,286,0,258,264],
[261,295,256,297,327,292,0,278],
[285,296,280,286,276,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,268,259,259,259,280],
[279,0,267,269,266,263,277,278],
[296,283,0,272,274,272,281,291],
[282,281,278,0,283,274,284,290],
[291,284,276,267,0,279,281,291],
[291,287,278,276,271,0,274,294],
[291,273,269,266,269,276,0,278],
[270,272,259,260,259,256,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,271,282,261,276,280,278],
[259,0,250,269,256,262,266,267],
[279,300,0,278,271,290,277,270],
[268,281,272,0,284,280,283,278],
[289,294,279,266,0,282,282,281],
[274,288,260,270,268,0,270,278],
[270,284,273,267,268,280,0,273],
[272,283,280,272,269,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,314,313,255,335,269,292],
[282,0,314,269,301,328,303,307],
[236,236,0,278,239,301,242,269],
[237,281,272,0,255,331,286,300],
[295,249,311,295,0,383,300,295],
[215,222,249,219,167,0,244,232],
[281,247,308,264,250,306,0,271],
[258,243,281,250,255,318,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,247,288,285,291,289,270],
[271,0,278,258,275,259,315,277],
[303,272,0,287,256,292,322,267],
[262,292,263,0,260,293,292,265],
[265,275,294,290,0,294,307,298],
[259,291,258,257,256,0,290,268],
[261,235,228,258,243,260,0,254],
[280,273,283,285,252,282,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,292,274,257,264,279,282],
[281,0,264,271,269,280,281,249],
[258,286,0,271,276,263,263,288],
[276,279,279,0,246,285,261,245],
[293,281,274,304,0,281,305,296],
[286,270,287,265,269,0,305,295],
[271,269,287,289,245,245,0,261],
[268,301,262,305,254,255,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,283,303,307,262,274,267],
[278,0,276,282,293,277,288,267],
[267,274,0,307,300,277,244,274],
[247,268,243,0,305,259,271,255],
[243,257,250,245,0,234,248,256],
[288,273,273,291,316,0,288,303],
[276,262,306,279,302,262,0,265],
[283,283,276,295,294,247,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,238,300,285,298,254,276],
[262,0,289,288,268,273,289,259],
[312,261,0,269,261,273,293,235],
[250,262,281,0,276,262,246,223],
[265,282,289,274,0,293,295,295],
[252,277,277,288,257,0,265,246],
[296,261,257,304,255,285,0,255],
[274,291,315,327,255,304,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,277,270,273,276,278,267],
[277,0,284,292,294,261,265,276],
[273,266,0,265,271,268,262,271],
[280,258,285,0,266,264,264,256],
[277,256,279,284,0,273,260,273],
[274,289,282,286,277,0,267,264],
[272,285,288,286,290,283,0,273],
[283,274,279,294,277,286,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,279,274,276,264,276],
[281,0,258,281,266,282,267,281],
[268,292,0,273,281,282,276,266],
[271,269,277,0,279,284,258,282],
[276,284,269,271,0,272,261,273],
[274,268,268,266,278,0,262,263],
[286,283,274,292,289,288,0,298],
[274,269,284,268,277,287,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,258,248,338,272,280,215],
[362,0,352,268,316,311,282,278],
[292,198,0,305,248,286,279,261],
[302,282,245,0,295,256,251,263],
[212,234,302,255,0,258,258,256],
[278,239,264,294,292,0,299,242],
[270,268,271,299,292,251,0,265],
[335,272,289,287,294,308,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,447,377,550,275,345,480,329],
[103,0,480,458,308,253,410,205],
[173,70,0,173,70,275,173,70],
[0,92,377,0,275,253,205,0],
[275,242,480,275,0,275,373,172],
[205,297,275,297,275,0,275,205],
[70,140,377,345,177,275,0,172],
[221,345,480,550,378,345,378,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,308,281,331,269,295],
[260,0,250,246,244,305,261,246],
[273,300,0,272,246,313,253,248],
[242,304,278,0,233,285,283,205],
[269,306,304,317,0,315,258,275],
[219,245,237,265,235,0,269,263],
[281,289,297,267,292,281,0,274],
[255,304,302,345,275,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,271,270,290,281,277],
[289,0,276,288,302,266,272,257],
[284,274,0,276,293,277,266,263],
[279,262,274,0,280,275,294,281],
[280,248,257,270,0,276,270,276],
[260,284,273,275,274,0,270,265],
[269,278,284,256,280,280,0,272],
[273,293,287,269,274,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,264,276,280,260,270,286],
[256,0,274,273,262,257,280,269],
[286,276,0,265,282,278,278,279],
[274,277,285,0,267,265,284,273],
[270,288,268,283,0,277,283,288],
[290,293,272,285,273,0,285,278],
[280,270,272,266,267,265,0,265],
[264,281,271,277,262,272,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,304,232,293,200,292,300],
[328,0,313,291,343,274,325,269],
[246,237,0,248,279,284,284,162],
[318,259,302,0,236,223,326,282],
[257,207,271,314,0,173,283,203],
[350,276,266,327,377,0,368,219],
[258,225,266,224,267,182,0,281],
[250,281,388,268,347,331,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,266,248,254,252,299,256],
[310,0,294,254,258,241,251,257],
[284,256,0,247,296,315,277,270],
[302,296,303,0,317,254,277,295],
[296,292,254,233,0,276,290,291],
[298,309,235,296,274,0,275,273],
[251,299,273,273,260,275,0,227],
[294,293,280,255,259,277,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,261,248,279,270,242,257],
[284,0,297,272,277,281,274,294],
[289,253,0,269,276,281,263,280],
[302,278,281,0,282,265,286,280],
[271,273,274,268,0,246,260,273],
[280,269,269,285,304,0,282,286],
[308,276,287,264,290,268,0,277],
[293,256,270,270,277,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,280,279,232,266,256],
[280,0,249,270,247,268,262,277],
[284,301,0,299,263,263,284,271],
[270,280,251,0,248,257,253,267],
[271,303,287,302,0,277,284,303],
[318,282,287,293,273,0,297,305],
[284,288,266,297,266,253,0,271],
[294,273,279,283,247,245,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,276,273,247,256,256],
[274,0,295,305,320,256,263,259],
[259,255,0,275,277,280,248,279],
[274,245,275,0,317,265,260,284],
[277,230,273,233,0,254,263,255],
[303,294,270,285,296,0,275,280],
[294,287,302,290,287,275,0,282],
[294,291,271,266,295,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,267,268,279,279,281,226],
[290,0,243,317,281,256,263,280],
[283,307,0,327,280,293,270,304],
[282,233,223,0,271,243,256,242],
[271,269,270,279,0,262,250,291],
[271,294,257,307,288,0,250,276],
[269,287,280,294,300,300,0,282],
[324,270,246,308,259,274,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,352,290,281,314,316,272,261],
[198,0,309,286,325,303,298,275],
[260,241,0,226,221,318,252,198],
[269,264,324,0,306,337,292,232],
[236,225,329,244,0,311,285,252],
[234,247,232,213,239,0,272,163],
[278,252,298,258,265,278,0,236],
[289,275,352,318,298,387,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,280,286,286,257,262,299],
[272,0,300,293,311,279,286,312],
[270,250,0,241,293,246,261,254],
[264,257,309,0,306,252,285,299],
[264,239,257,244,0,238,243,258],
[293,271,304,298,312,0,307,299],
[288,264,289,265,307,243,0,260],
[251,238,296,251,292,251,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,417,360,182,295,340,166,183],
[133,0,285,104,191,143,207,252],
[190,265,0,156,165,151,142,260],
[368,446,394,0,397,359,368,256],
[255,359,385,153,0,350,343,173],
[210,407,399,191,200,0,284,256],
[384,343,408,182,207,266,0,281],
[367,298,290,294,377,294,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,292,263,261,277,296,278],
[262,0,262,239,245,285,277,247],
[258,288,0,260,259,290,261,278],
[287,311,290,0,270,301,285,272],
[289,305,291,280,0,299,306,273],
[273,265,260,249,251,0,279,259],
[254,273,289,265,244,271,0,256],
[272,303,272,278,277,291,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,270,288,284,286,273],
[262,0,308,289,301,287,283,276],
[270,242,0,279,271,248,261,257],
[280,261,271,0,271,282,260,262],
[262,249,279,279,0,258,250,262],
[266,263,302,268,292,0,271,277],
[264,267,289,290,300,279,0,287],
[277,274,293,288,288,273,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,268,270,273,274,273,272],
[266,0,276,277,260,274,276,279],
[282,274,0,277,269,276,275,288],
[280,273,273,0,285,288,280,294],
[277,290,281,265,0,294,291,273],
[276,276,274,262,256,0,290,255],
[277,274,275,270,259,260,0,255],
[278,271,262,256,277,295,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,286,254,256,282,271,273],
[288,0,300,281,285,278,302,269],
[264,250,0,252,262,250,265,281],
[296,269,298,0,270,261,271,273],
[294,265,288,280,0,287,283,291],
[268,272,300,289,263,0,277,284],
[279,248,285,279,267,273,0,295],
[277,281,269,277,259,266,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,316,313,272,300,281,286],
[263,0,298,248,231,242,288,303],
[234,252,0,248,275,200,344,269],
[237,302,302,0,259,223,332,251],
[278,319,275,291,0,253,331,258],
[250,308,350,327,297,0,317,336],
[269,262,206,218,219,233,0,239],
[264,247,281,299,292,214,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,272,269,295,257,272,253],
[300,0,282,292,310,283,277,270],
[278,268,0,266,297,262,265,240],
[281,258,284,0,274,251,265,238],
[255,240,253,276,0,259,254,249],
[293,267,288,299,291,0,270,279],
[278,273,285,285,296,280,0,260],
[297,280,310,312,301,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,284,277,282,277,267],
[276,0,283,303,262,279,278,258],
[267,267,0,265,258,266,262,242],
[266,247,285,0,264,255,260,254],
[273,288,292,286,0,283,279,281],
[268,271,284,295,267,0,290,296],
[273,272,288,290,271,260,0,272],
[283,292,308,296,269,254,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,248,270,303,287,220,257],
[306,0,275,265,261,297,246,283],
[302,275,0,278,333,338,244,282],
[280,285,272,0,337,277,291,285],
[247,289,217,213,0,253,225,246],
[263,253,212,273,297,0,222,269],
[330,304,306,259,325,328,0,288],
[293,267,268,265,304,281,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,275,277,279,267,272,268],
[265,0,266,273,267,276,267,271],
[275,284,0,265,272,274,260,268],
[273,277,285,0,261,279,275,276],
[271,283,278,289,0,278,278,275],
[283,274,276,271,272,0,280,280],
[278,283,290,275,272,270,0,263],
[282,279,282,274,275,270,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,295,346,283,269,254,264],
[256,0,285,339,292,297,270,282],
[255,265,0,323,283,292,290,270],
[204,211,227,0,242,264,226,249],
[267,258,267,308,0,280,255,239],
[281,253,258,286,270,0,262,238],
[296,280,260,324,295,288,0,287],
[286,268,280,301,311,312,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,262,283,262,260,269,264],
[270,0,272,278,255,274,254,264],
[288,278,0,278,277,266,283,274],
[267,272,272,0,243,258,265,257],
[288,295,273,307,0,279,283,291],
[290,276,284,292,271,0,281,272],
[281,296,267,285,267,269,0,284],
[286,286,276,293,259,278,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,268,292,276,270,273],
[258,0,273,261,275,276,279,258],
[267,277,0,279,276,272,279,268],
[282,289,271,0,289,282,275,274],
[258,275,274,261,0,271,269,267],
[274,274,278,268,279,0,285,285],
[280,271,271,275,281,265,0,261],
[277,292,282,276,283,265,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,300,311,269,295,310,291],
[265,0,276,310,272,272,311,275],
[250,274,0,275,280,269,293,256],
[239,240,275,0,250,252,278,267],
[281,278,270,300,0,265,301,277],
[255,278,281,298,285,0,298,274],
[240,239,257,272,249,252,0,265],
[259,275,294,283,273,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,280,275,268,272,289,276],
[258,0,270,271,269,266,273,278],
[270,280,0,269,267,270,276,276],
[275,279,281,0,284,276,290,283],
[282,281,283,266,0,282,289,274],
[278,284,280,274,268,0,286,279],
[261,277,274,260,261,264,0,253],
[274,272,274,267,276,271,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,323,313,307,301,271,299],
[210,0,284,301,298,283,245,285],
[227,266,0,287,319,305,287,264],
[237,249,263,0,232,277,224,267],
[243,252,231,318,0,276,306,294],
[249,267,245,273,274,0,256,260],
[279,305,263,326,244,294,0,283],
[251,265,286,283,256,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,322,287,269,271,286,269,311],
[228,0,253,235,270,242,266,261],
[263,297,0,264,288,286,267,296],
[281,315,286,0,275,292,289,274],
[279,280,262,275,0,267,253,302],
[264,308,264,258,283,0,282,276],
[281,284,283,261,297,268,0,287],
[239,289,254,276,248,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,273,268,265,268,269,275],
[295,0,281,292,292,274,285,274],
[277,269,0,263,277,274,274,270],
[282,258,287,0,263,261,269,272],
[285,258,273,287,0,274,274,261],
[282,276,276,289,276,0,276,271],
[281,265,276,281,276,274,0,280],
[275,276,280,278,289,279,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,291,278,271,273,286],
[256,0,272,276,250,269,276,269],
[273,278,0,248,274,267,270,301],
[259,274,302,0,295,267,298,322],
[272,300,276,255,0,284,303,318],
[279,281,283,283,266,0,279,293],
[277,274,280,252,247,271,0,290],
[264,281,249,228,232,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,303,263,324,285,290,255],
[274,0,280,280,300,267,297,248],
[247,270,0,291,292,290,307,248],
[287,270,259,0,329,276,278,275],
[226,250,258,221,0,258,248,258],
[265,283,260,274,292,0,298,250],
[260,253,243,272,302,252,0,262],
[295,302,302,275,292,300,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,319,271,289,243,290,286],
[270,0,279,257,278,279,252,252],
[231,271,0,264,285,293,283,304],
[279,293,286,0,285,299,269,282],
[261,272,265,265,0,281,250,296],
[307,271,257,251,269,0,253,266],
[260,298,267,281,300,297,0,306],
[264,298,246,268,254,284,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,251,241,276,295,247,287],
[271,0,271,259,272,263,244,275],
[299,279,0,266,299,297,281,298],
[309,291,284,0,280,294,274,292],
[274,278,251,270,0,292,268,283],
[255,287,253,256,258,0,248,279],
[303,306,269,276,282,302,0,299],
[263,275,252,258,267,271,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,289,252,280,276,265,306],
[268,0,277,254,257,271,254,282],
[261,273,0,251,279,264,253,270],
[298,296,299,0,304,296,275,292],
[270,293,271,246,0,258,257,277],
[274,279,286,254,292,0,249,275],
[285,296,297,275,293,301,0,298],
[244,268,280,258,273,275,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,287,270,265,237,259,315],
[273,0,244,247,263,273,257,301],
[263,306,0,278,258,291,279,292],
[280,303,272,0,277,280,268,302],
[285,287,292,273,0,324,298,309],
[313,277,259,270,226,0,267,301],
[291,293,271,282,252,283,0,299],
[235,249,258,248,241,249,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,214,213,239,225,277,259],
[310,0,247,242,268,248,307,257],
[336,303,0,292,280,273,305,295],
[337,308,258,0,260,249,279,301],
[311,282,270,290,0,299,292,296],
[325,302,277,301,251,0,297,288],
[273,243,245,271,258,253,0,269],
[291,293,255,249,254,262,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,266,310,280,269,291,303],
[240,0,279,274,257,271,286,294],
[284,271,0,288,264,277,276,301],
[240,276,262,0,264,269,273,290],
[270,293,286,286,0,264,304,277],
[281,279,273,281,286,0,306,284],
[259,264,274,277,246,244,0,235],
[247,256,249,260,273,266,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,286,288,283,275,282,279],
[247,0,274,255,257,253,269,261],
[264,276,0,285,270,260,269,298],
[262,295,265,0,260,252,261,257],
[267,293,280,290,0,285,287,274],
[275,297,290,298,265,0,289,277],
[268,281,281,289,263,261,0,263],
[271,289,252,293,276,273,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,269,260,253,269,264],
[276,0,268,278,285,263,287,279],
[289,282,0,278,287,275,284,292],
[281,272,272,0,267,267,296,282],
[290,265,263,283,0,261,288,280],
[297,287,275,283,289,0,302,293],
[281,263,266,254,262,248,0,276],
[286,271,258,268,270,257,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,253,237,276,284,277,266],
[303,0,286,270,276,289,288,277],
[297,264,0,273,284,309,245,282],
[313,280,277,0,304,286,275,307],
[274,274,266,246,0,286,272,279],
[266,261,241,264,264,0,262,261],
[273,262,305,275,278,288,0,279],
[284,273,268,243,271,289,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,302,283,268,287,286,290],
[289,0,313,285,281,287,264,274],
[248,237,0,238,267,277,241,248],
[267,265,312,0,270,277,263,265],
[282,269,283,280,0,276,263,279],
[263,263,273,273,274,0,255,272],
[264,286,309,287,287,295,0,274],
[260,276,302,285,271,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,354,302,155,26,174,80],
[281,0,383,282,205,55,337,180],
[196,167,0,141,156,182,157,55],
[248,268,409,0,182,81,229,147],
[395,345,394,368,0,280,174,199],
[524,495,368,469,270,0,282,328],
[376,213,393,321,376,268,0,275],
[470,370,495,403,351,222,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,298,283,263,293,278,264],
[269,0,298,290,282,320,277,279],
[252,252,0,269,267,285,260,246],
[267,260,281,0,272,282,268,261],
[287,268,283,278,0,298,272,265],
[257,230,265,268,252,0,240,247],
[272,273,290,282,278,310,0,266],
[286,271,304,289,285,303,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,288,268,253,277,246,268],
[285,0,279,269,276,277,266,276],
[262,271,0,250,248,271,262,265],
[282,281,300,0,276,275,267,277],
[297,274,302,274,0,290,281,278],
[273,273,279,275,260,0,271,255],
[304,284,288,283,269,279,0,277],
[282,274,285,273,272,295,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,280,269,277,294,282,260],
[280,0,281,266,285,280,273,264],
[270,269,0,275,262,274,264,265],
[281,284,275,0,286,284,286,270],
[273,265,288,264,0,290,263,261],
[256,270,276,266,260,0,258,247],
[268,277,286,264,287,292,0,279],
[290,286,285,280,289,303,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,296,282,304,293,280,296],
[288,0,301,277,306,294,303,272],
[254,249,0,250,259,255,267,238],
[268,273,300,0,284,281,272,266],
[246,244,291,266,0,264,241,267],
[257,256,295,269,286,0,290,276],
[270,247,283,278,309,260,0,264],
[254,278,312,284,283,274,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,216,234,234,170,248,224],
[324,0,262,317,309,313,312,310],
[334,288,0,291,275,309,304,287],
[316,233,259,0,268,226,275,289],
[316,241,275,282,0,221,320,292],
[380,237,241,324,329,0,337,291],
[302,238,246,275,230,213,0,270],
[326,240,263,261,258,259,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,263,292,278,250,266,278],
[247,0,233,245,267,251,239,248],
[287,317,0,280,275,263,287,242],
[258,305,270,0,284,279,290,243],
[272,283,275,266,0,227,290,269],
[300,299,287,271,323,0,291,260],
[284,311,263,260,260,259,0,251],
[272,302,308,307,281,290,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,288,275,258,269,329,294],
[245,0,269,265,262,246,269,265],
[262,281,0,263,266,248,288,285],
[275,285,287,0,262,284,313,297],
[292,288,284,288,0,254,310,272],
[281,304,302,266,296,0,303,306],
[221,281,262,237,240,247,0,276],
[256,285,265,253,278,244,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,259,267,276,290,273,272],
[285,0,282,273,273,288,290,291],
[291,268,0,286,288,304,269,282],
[283,277,264,0,282,277,270,276],
[274,277,262,268,0,272,273,282],
[260,262,246,273,278,0,263,252],
[277,260,281,280,277,287,0,291],
[278,259,268,274,268,298,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,266,254,245,284,267],
[296,0,251,283,262,241,278,255],
[280,299,0,260,258,251,261,267],
[284,267,290,0,300,277,296,283],
[296,288,292,250,0,279,267,288],
[305,309,299,273,271,0,327,303],
[266,272,289,254,283,223,0,249],
[283,295,283,267,262,247,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,289,259,285,277,257,274],
[278,0,315,245,264,254,294,301],
[261,235,0,264,278,260,275,217],
[291,305,286,0,274,289,291,262],
[265,286,272,276,0,301,293,310],
[273,296,290,261,249,0,273,271],
[293,256,275,259,257,277,0,292],
[276,249,333,288,240,279,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,267,277,275,298,283],
[285,0,283,261,266,288,296,297],
[271,267,0,274,264,270,284,286],
[283,289,276,0,268,260,282,294],
[273,284,286,282,0,264,298,303],
[275,262,280,290,286,0,296,284],
[252,254,266,268,252,254,0,280],
[267,253,264,256,247,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,265,254,280,283,279,237],
[280,0,300,269,312,273,248,255],
[285,250,0,300,257,262,253,267],
[296,281,250,0,280,283,240,267],
[270,238,293,270,0,258,211,259],
[267,277,288,267,292,0,255,274],
[271,302,297,310,339,295,0,281],
[313,295,283,283,291,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,284,289,277,288,297,272],
[260,0,279,271,283,266,279,260],
[266,271,0,264,267,268,278,252],
[261,279,286,0,284,265,274,265],
[273,267,283,266,0,267,278,272],
[262,284,282,285,283,0,283,278],
[253,271,272,276,272,267,0,260],
[278,290,298,285,278,272,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,321,268,246,265,298,290],
[241,0,270,226,243,256,271,259],
[229,280,0,214,193,225,275,217],
[282,324,336,0,308,265,326,266],
[304,307,357,242,0,291,331,275],
[285,294,325,285,259,0,322,307],
[252,279,275,224,219,228,0,191],
[260,291,333,284,275,243,359,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,261,266,248,252,255,264],
[301,0,285,288,265,280,277,287],
[289,265,0,288,278,289,282,284],
[284,262,262,0,254,272,258,275],
[302,285,272,296,0,276,273,295],
[298,270,261,278,274,0,285,280],
[295,273,268,292,277,265,0,278],
[286,263,266,275,255,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,263,255,275,280,259,254],
[284,0,298,257,273,285,282,283],
[287,252,0,264,255,276,250,255],
[295,293,286,0,272,286,275,282],
[275,277,295,278,0,285,276,275],
[270,265,274,264,265,0,267,256],
[291,268,300,275,274,283,0,266],
[296,267,295,268,275,294,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,267,280,267,254,265,290],
[288,0,276,298,253,265,250,279],
[283,274,0,249,259,262,261,306],
[270,252,301,0,261,280,278,302],
[283,297,291,289,0,282,260,289],
[296,285,288,270,268,0,266,315],
[285,300,289,272,290,284,0,305],
[260,271,244,248,261,235,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,293,260,276,276,290,263],
[259,0,274,262,252,285,268,274],
[257,276,0,260,249,268,276,234],
[290,288,290,0,280,270,276,281],
[274,298,301,270,0,289,263,271],
[274,265,282,280,261,0,263,264],
[260,282,274,274,287,287,0,266],
[287,276,316,269,279,286,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,253,255,260,264,271,261],
[271,0,264,251,269,272,249,254],
[297,286,0,264,264,282,268,261],
[295,299,286,0,282,284,263,266],
[290,281,286,268,0,286,272,280],
[286,278,268,266,264,0,260,258],
[279,301,282,287,278,290,0,270],
[289,296,289,284,270,292,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,255,259,265,263,262,265],
[273,0,267,269,269,278,271,277],
[295,283,0,282,258,265,263,300],
[291,281,268,0,253,266,253,269],
[285,281,292,297,0,271,267,297],
[287,272,285,284,279,0,278,305],
[288,279,287,297,283,272,0,288],
[285,273,250,281,253,245,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,292,306,277,293,267],
[272,0,276,308,289,274,290,285],
[280,274,0,289,295,281,274,269],
[258,242,261,0,277,245,280,256],
[244,261,255,273,0,271,297,278],
[273,276,269,305,279,0,274,276],
[257,260,276,270,253,276,0,249],
[283,265,281,294,272,274,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,294,289,312,289,280,272],
[254,0,290,279,278,288,283,296],
[256,260,0,290,285,314,284,296],
[261,271,260,0,269,284,270,274],
[238,272,265,281,0,273,260,251],
[261,262,236,266,277,0,249,281],
[270,267,266,280,290,301,0,279],
[278,254,254,276,299,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,290,278,264,272,275,281],
[261,0,286,272,276,245,244,280],
[260,264,0,279,302,247,279,284],
[272,278,271,0,288,251,267,294],
[286,274,248,262,0,282,278,251],
[278,305,303,299,268,0,289,282],
[275,306,271,283,272,261,0,294],
[269,270,266,256,299,268,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,276,272,263,265,277,270],
[268,0,259,259,258,260,265,255],
[274,291,0,272,261,261,266,260],
[278,291,278,0,278,275,294,261],
[287,292,289,272,0,278,294,272],
[285,290,289,275,272,0,286,275],
[273,285,284,256,256,264,0,264],
[280,295,290,289,278,275,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,255,282,244,264,258,257],
[301,0,261,295,286,292,284,303],
[295,289,0,303,310,290,285,272],
[268,255,247,0,259,254,264,265],
[306,264,240,291,0,273,263,265],
[286,258,260,296,277,0,263,275],
[292,266,265,286,287,287,0,282],
[293,247,278,285,285,275,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,269,276,286,265,283],
[271,0,278,272,267,294,266,271],
[273,272,0,285,279,285,269,294],
[281,278,265,0,289,268,275,272],
[274,283,271,261,0,297,286,283],
[264,256,265,282,253,0,262,263],
[285,284,281,275,264,288,0,292],
[267,279,256,278,267,287,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,289,265,296,277,313,316],
[259,0,268,285,273,259,287,283],
[261,282,0,275,278,258,284,289],
[285,265,275,0,276,274,298,283],
[254,277,272,274,0,269,301,294],
[273,291,292,276,281,0,291,287],
[237,263,266,252,249,259,0,272],
[234,267,261,267,256,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,269,275,266,255,263,262],
[299,0,304,298,264,280,297,297],
[281,246,0,292,291,254,287,272],
[275,252,258,0,274,259,255,262],
[284,286,259,276,0,259,257,283],
[295,270,296,291,291,0,280,295],
[287,253,263,295,293,270,0,289],
[288,253,278,288,267,255,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,261,272,307,262,288,254],
[259,0,252,271,285,259,263,275],
[289,298,0,294,296,263,255,299],
[278,279,256,0,304,295,294,308],
[243,265,254,246,0,235,237,270],
[288,291,287,255,315,0,293,267],
[262,287,295,256,313,257,0,292],
[296,275,251,242,280,283,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,286,283,257,255,270],
[272,0,265,272,289,291,262,271],
[277,285,0,265,303,253,285,280],
[264,278,285,0,273,252,235,268],
[267,261,247,277,0,269,257,277],
[293,259,297,298,281,0,248,267],
[295,288,265,315,293,302,0,279],
[280,279,270,282,273,283,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,202,281,309,251,236,260,290],
[348,0,306,323,320,264,281,338],
[269,244,0,282,282,265,254,279],
[241,227,268,0,282,223,244,290],
[299,230,268,268,0,253,247,292],
[314,286,285,327,297,0,257,290],
[290,269,296,306,303,293,0,320],
[260,212,271,260,258,260,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,295,271,324,289,263,263],
[262,0,286,228,280,291,238,291],
[255,264,0,241,276,273,234,244],
[279,322,309,0,305,288,256,292],
[226,270,274,245,0,276,259,290],
[261,259,277,262,274,0,279,299],
[287,312,316,294,291,271,0,292],
[287,259,306,258,260,251,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,297,297,319,272,290,304],
[288,0,285,253,296,276,259,278],
[253,265,0,293,273,247,255,275],
[253,297,257,0,288,266,258,272],
[231,254,277,262,0,235,247,249],
[278,274,303,284,315,0,274,313],
[260,291,295,292,303,276,0,279],
[246,272,275,278,301,237,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,281,210,274,286,256,236],
[245,0,241,195,207,275,257,219],
[269,309,0,247,225,330,276,268],
[340,355,303,0,319,297,274,280],
[276,343,325,231,0,289,273,266],
[264,275,220,253,261,0,255,217],
[294,293,274,276,277,295,0,271],
[314,331,282,270,284,333,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,253,218,252,272,274,245],
[282,0,282,251,255,270,280,248],
[297,268,0,267,278,286,311,281],
[332,299,283,0,292,310,301,245],
[298,295,272,258,0,288,297,240],
[278,280,264,240,262,0,291,238],
[276,270,239,249,253,259,0,214],
[305,302,269,305,310,312,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,272,302,309,292,304],
[281,0,266,279,309,312,316,314],
[278,284,0,280,273,329,312,313],
[278,271,270,0,318,297,274,293],
[248,241,277,232,0,278,253,264],
[241,238,221,253,272,0,280,300],
[258,234,238,276,297,270,0,270],
[246,236,237,257,286,250,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,296,263,288,284,271,258],
[281,0,285,305,313,289,272,278],
[254,265,0,248,295,297,247,258],
[287,245,302,0,318,283,257,278],
[262,237,255,232,0,282,257,225],
[266,261,253,267,268,0,253,285],
[279,278,303,293,293,297,0,254],
[292,272,292,272,325,265,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,296,270,279,329,268,324],
[287,0,268,266,268,319,315,313],
[254,282,0,261,297,269,301,287],
[280,284,289,0,257,287,308,287],
[271,282,253,293,0,278,299,300],
[221,231,281,263,272,0,294,290],
[282,235,249,242,251,256,0,289],
[226,237,263,263,250,260,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,293,271,294,292,269,263],
[274,0,293,275,285,273,275,274],
[257,257,0,254,268,260,252,260],
[279,275,296,0,304,282,281,277],
[256,265,282,246,0,249,261,274],
[258,277,290,268,301,0,275,268],
[281,275,298,269,289,275,0,265],
[287,276,290,273,276,282,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,237,255,260,252,296,257],
[317,0,295,309,268,291,268,275],
[313,255,0,290,284,273,288,294],
[295,241,260,0,249,244,280,252],
[290,282,266,301,0,272,311,279],
[298,259,277,306,278,0,308,283],
[254,282,262,270,239,242,0,278],
[293,275,256,298,271,267,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,266,306,287,312,285,304],
[271,0,279,303,294,293,292,287],
[284,271,0,283,289,305,286,300],
[244,247,267,0,271,302,279,289],
[263,256,261,279,0,277,269,300],
[238,257,245,248,273,0,274,286],
[265,258,264,271,281,276,0,273],
[246,263,250,261,250,264,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,255,264,265,252,244,226],
[319,0,299,295,255,272,286,270],
[295,251,0,312,267,291,264,250],
[286,255,238,0,270,294,259,262],
[285,295,283,280,0,312,244,278],
[298,278,259,256,238,0,224,262],
[306,264,286,291,306,326,0,293],
[324,280,300,288,272,288,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,291,274,294,281,316,290],
[254,0,299,277,293,294,300,273],
[259,251,0,280,274,276,290,258],
[276,273,270,0,294,286,314,285],
[256,257,276,256,0,280,287,264],
[269,256,274,264,270,0,286,277],
[234,250,260,236,263,264,0,258],
[260,277,292,265,286,273,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,251,290,270,267,259],
[307,0,272,295,274,298,295,289],
[286,278,0,262,278,282,286,279],
[299,255,288,0,290,280,269,301],
[260,276,272,260,0,267,255,270],
[280,252,268,270,283,0,271,273],
[283,255,264,281,295,279,0,280],
[291,261,271,249,280,277,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,290,296,302,282,300,301],
[284,0,281,276,296,275,306,283],
[260,269,0,273,290,264,258,269],
[254,274,277,0,277,274,283,304],
[248,254,260,273,0,258,289,277],
[268,275,286,276,292,0,292,303],
[250,244,292,267,261,258,0,288],
[249,267,281,246,273,247,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,285,266,301,266,358,273],
[319,0,309,262,306,262,317,283],
[265,241,0,294,313,287,329,321],
[284,288,256,0,261,273,365,317],
[249,244,237,289,0,196,279,281],
[284,288,263,277,354,0,320,316],
[192,233,221,185,271,230,0,218],
[277,267,229,233,269,234,332,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,274,275,261,279,278],
[286,0,266,290,278,264,272,275],
[280,284,0,280,278,280,289,273],
[276,260,270,0,272,277,283,276],
[275,272,272,278,0,264,283,274],
[289,286,270,273,286,0,270,284],
[271,278,261,267,267,280,0,273],
[272,275,277,274,276,266,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,287,282,299,310,279,266],
[270,0,299,286,263,270,271,276],
[263,251,0,265,248,263,255,249],
[268,264,285,0,262,276,269,262],
[251,287,302,288,0,291,276,280],
[240,280,287,274,259,0,247,252],
[271,279,295,281,274,303,0,289],
[284,274,301,288,270,298,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,285,318,312,297,272,290],
[249,0,269,234,311,277,291,283],
[265,281,0,258,314,286,245,246],
[232,316,292,0,285,299,278,239],
[238,239,236,265,0,264,258,244],
[253,273,264,251,286,0,245,259],
[278,259,305,272,292,305,0,286],
[260,267,304,311,306,291,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,325,323,267,319,265],
[273,0,280,287,285,271,298,270],
[259,270,0,298,271,283,314,261],
[225,263,252,0,271,239,299,249],
[227,265,279,279,0,255,308,270],
[283,279,267,311,295,0,295,292],
[231,252,236,251,242,255,0,239],
[285,280,289,301,280,258,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,301,275,270,294,266,260],
[279,0,274,281,269,276,252,276],
[249,276,0,254,262,261,234,266],
[275,269,296,0,292,292,264,281],
[280,281,288,258,0,293,293,271],
[256,274,289,258,257,0,244,280],
[284,298,316,286,257,306,0,279],
[290,274,284,269,279,270,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,288,261,277,258,290],
[283,0,277,275,272,271,286,286],
[265,273,0,277,270,272,253,281],
[262,275,273,0,272,274,270,285],
[289,278,280,278,0,276,275,277],
[273,279,278,276,274,0,280,289],
[292,264,297,280,275,270,0,277],
[260,264,269,265,273,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,305,267,282,283,293,290],
[263,0,279,270,278,264,268,281],
[245,271,0,249,241,246,264,260],
[283,280,301,0,291,282,287,270],
[268,272,309,259,0,273,288,277],
[267,286,304,268,277,0,289,278],
[257,282,286,263,262,261,0,271],
[260,269,290,280,273,272,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,297,265,270,292,273,298],
[283,0,272,255,236,262,277,277],
[253,278,0,276,255,270,261,296],
[285,295,274,0,280,279,298,316],
[280,314,295,270,0,292,274,286],
[258,288,280,271,258,0,287,338],
[277,273,289,252,276,263,0,265],
[252,273,254,234,264,212,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,276,292,277,281,271,277],
[285,0,283,273,242,286,263,287],
[274,267,0,284,258,264,255,281],
[258,277,266,0,260,269,261,286],
[273,308,292,290,0,308,245,260],
[269,264,286,281,242,0,276,270],
[279,287,295,289,305,274,0,301],
[273,263,269,264,290,280,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,296,251,276,273,271],
[266,0,254,285,279,262,249,271],
[276,296,0,310,275,294,260,277],
[254,265,240,0,242,237,235,247],
[299,271,275,308,0,274,286,294],
[274,288,256,313,276,0,263,279],
[277,301,290,315,264,287,0,291],
[279,279,273,303,256,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,297,284,347,269,216,236],
[316,0,350,254,305,315,279,266],
[253,200,0,186,267,221,235,194],
[266,296,364,0,312,342,283,284],
[203,245,283,238,0,291,297,276],
[281,235,329,208,259,0,184,204],
[334,271,315,267,253,366,0,254],
[314,284,356,266,274,346,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,274,308,323,311,274],
[279,0,266,260,275,287,294,257],
[266,284,0,270,274,288,315,288],
[276,290,280,0,300,291,310,268],
[242,275,276,250,0,276,278,241],
[227,263,262,259,274,0,283,221],
[239,256,235,240,272,267,0,246],
[276,293,262,282,309,329,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,249,275,239,258,270,284],
[291,0,270,287,270,262,273,318],
[301,280,0,288,281,280,274,275],
[275,263,262,0,254,279,277,287],
[311,280,269,296,0,265,284,303],
[292,288,270,271,285,0,281,284],
[280,277,276,273,266,269,0,295],
[266,232,275,263,247,266,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,254,270,242,252,260,292],
[263,0,271,316,260,268,277,301],
[296,279,0,283,267,283,277,308],
[280,234,267,0,256,283,280,278],
[308,290,283,294,0,274,320,308],
[298,282,267,267,276,0,289,277],
[290,273,273,270,230,261,0,285],
[258,249,242,272,242,273,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,266,278,256,251,268,272],
[248,0,251,266,242,248,248,255],
[284,299,0,299,266,281,285,292],
[272,284,251,0,257,255,261,268],
[294,308,284,293,0,274,275,289],
[299,302,269,295,276,0,278,299],
[282,302,265,289,275,272,0,280],
[278,295,258,282,261,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,265,284,284,287,276,283],
[261,0,269,275,283,290,285,276],
[285,281,0,268,281,280,279,273],
[266,275,282,0,289,277,282,291],
[266,267,269,261,0,279,264,271],
[263,260,270,273,271,0,270,271],
[274,265,271,268,286,280,0,256],
[267,274,277,259,279,279,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,271,273,279,259,273,267],
[264,0,270,250,274,260,254,237],
[279,280,0,289,273,275,268,238],
[277,300,261,0,269,284,256,276],
[271,276,277,281,0,253,266,262],
[291,290,275,266,297,0,291,263],
[277,296,282,294,284,259,0,269],
[283,313,312,274,288,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,261,264,253,273,253,263],
[271,0,278,264,265,267,270,274],
[289,272,0,278,280,281,265,277],
[286,286,272,0,286,276,283,295],
[297,285,270,264,0,269,263,263],
[277,283,269,274,281,0,268,287],
[297,280,285,267,287,282,0,289],
[287,276,273,255,287,263,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,260,263,281,230,295,264],
[265,0,247,247,251,253,294,230],
[290,303,0,268,265,265,317,277],
[287,303,282,0,280,272,318,264],
[269,299,285,270,0,294,306,260],
[320,297,285,278,256,0,285,263],
[255,256,233,232,244,265,0,252],
[286,320,273,286,290,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,281,270,310,286,293,276],
[258,0,265,253,280,267,270,255],
[269,285,0,261,289,291,266,269],
[280,297,289,0,306,281,275,263],
[240,270,261,244,0,263,239,260],
[264,283,259,269,287,0,276,279],
[257,280,284,275,311,274,0,264],
[274,295,281,287,290,271,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,307,283,261,268,263,288],
[271,0,306,300,276,300,291,279],
[243,244,0,278,259,297,260,281],
[267,250,272,0,289,315,239,258],
[289,274,291,261,0,290,282,284],
[282,250,253,235,260,0,239,240],
[287,259,290,311,268,311,0,276],
[262,271,269,292,266,310,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,284,261,289,278,299,289],
[282,0,301,271,275,274,274,279],
[266,249,0,275,274,255,271,271],
[289,279,275,0,292,277,275,274],
[261,275,276,258,0,263,271,266],
[272,276,295,273,287,0,280,287],
[251,276,279,275,279,270,0,269],
[261,271,279,276,284,263,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,290,271,263,259,283,272],
[259,0,282,273,255,255,272,260],
[260,268,0,267,248,268,259,244],
[279,277,283,0,266,275,279,285],
[287,295,302,284,0,285,284,262],
[291,295,282,275,265,0,289,275],
[267,278,291,271,266,261,0,265],
[278,290,306,265,288,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,189,188,112,172,203,148,153],
[361,0,263,152,251,297,225,204],
[362,287,0,147,213,321,279,229],
[438,398,403,0,274,352,286,292],
[378,299,337,276,0,327,244,253],
[347,253,229,198,223,0,214,242],
[402,325,271,264,306,336,0,298],
[397,346,321,258,297,308,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,248,281,230,259,258,261],
[279,0,276,300,295,270,259,303],
[302,274,0,295,277,259,266,312],
[269,250,255,0,270,249,256,270],
[320,255,273,280,0,281,263,344],
[291,280,291,301,269,0,283,287],
[292,291,284,294,287,267,0,274],
[289,247,238,280,206,263,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,429,338,306,351,278,311,250],
[121,0,300,227,313,281,202,114],
[212,250,0,310,212,310,285,141],
[244,323,240,0,209,293,308,308],
[199,237,338,341,0,280,253,227],
[272,269,240,257,270,0,325,166],
[239,348,265,242,297,225,0,338],
[300,436,409,242,323,384,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,269,272,276,260,295,266],
[273,0,270,272,272,269,280,267],
[281,280,0,265,292,267,293,273],
[278,278,285,0,285,274,291,285],
[274,278,258,265,0,273,272,279],
[290,281,283,276,277,0,272,276],
[255,270,257,259,278,278,0,265],
[284,283,277,265,271,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,243,277,268,288,274],
[277,0,273,274,272,272,283,280],
[275,277,0,275,272,279,272,291],
[307,276,275,0,261,287,269,274],
[273,278,278,289,0,281,280,292],
[282,278,271,263,269,0,271,284],
[262,267,278,281,270,279,0,282],
[276,270,259,276,258,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,304,275,260,273,277,281],
[256,0,291,273,248,256,287,269],
[246,259,0,234,251,283,260,259],
[275,277,316,0,303,284,295,305],
[290,302,299,247,0,270,299,278],
[277,294,267,266,280,0,278,274],
[273,263,290,255,251,272,0,246],
[269,281,291,245,272,276,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,316,276,348,330,305,271],
[269,0,314,280,301,313,305,294],
[234,236,0,234,304,280,260,214],
[274,270,316,0,341,329,347,286],
[202,249,246,209,0,278,280,227],
[220,237,270,221,272,0,292,268],
[245,245,290,203,270,258,0,260],
[279,256,336,264,323,282,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,276,261,295,254,271,252],
[267,0,276,273,281,262,269,263],
[274,274,0,265,270,281,273,253],
[289,277,285,0,299,267,271,259],
[255,269,280,251,0,244,240,243],
[296,288,269,283,306,0,294,283],
[279,281,277,279,310,256,0,268],
[298,287,297,291,307,267,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,268,285,299,280,292],
[273,0,269,277,288,293,288,287],
[259,281,0,279,291,303,281,289],
[282,273,271,0,285,287,291,295],
[265,262,259,265,0,284,272,283],
[251,257,247,263,266,0,266,269],
[270,262,269,259,278,284,0,285],
[258,263,261,255,267,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,283,259,268,265,271,293],
[290,0,267,244,258,259,288,278],
[267,283,0,296,258,255,252,300],
[291,306,254,0,296,275,283,288],
[282,292,292,254,0,287,280,298],
[285,291,295,275,263,0,273,320],
[279,262,298,267,270,277,0,287],
[257,272,250,262,252,230,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,257,232,266,287,258,243],
[288,0,263,261,252,275,246,261],
[293,287,0,278,254,288,288,265],
[318,289,272,0,268,322,277,291],
[284,298,296,282,0,295,296,266],
[263,275,262,228,255,0,243,253],
[292,304,262,273,254,307,0,241],
[307,289,285,259,284,297,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,273,193,251,323,234,228],
[252,0,270,206,281,262,262,212],
[277,280,0,278,259,303,329,297],
[357,344,272,0,370,341,273,255],
[299,269,291,180,0,232,248,207],
[227,288,247,209,318,0,229,150],
[316,288,221,277,302,321,0,301],
[322,338,253,295,343,400,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,275,279,279,296,280,280],
[266,0,268,274,272,278,259,277],
[275,282,0,275,279,287,270,273],
[271,276,275,0,271,272,269,266],
[271,278,271,279,0,280,256,279],
[254,272,263,278,270,0,259,265],
[270,291,280,281,294,291,0,289],
[270,273,277,284,271,285,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,262,280,282,247,255,296],
[301,0,299,281,278,270,280,295],
[288,251,0,288,288,277,282,279],
[270,269,262,0,269,259,286,280],
[268,272,262,281,0,261,264,287],
[303,280,273,291,289,0,284,297],
[295,270,268,264,286,266,0,282],
[254,255,271,270,263,253,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,279,254,271,240,258,243],
[309,0,259,260,315,312,274,285],
[271,291,0,299,305,296,296,268],
[296,290,251,0,313,277,299,297],
[279,235,245,237,0,257,257,224],
[310,238,254,273,293,0,301,301],
[292,276,254,251,293,249,0,262],
[307,265,282,253,326,249,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,275,273,276,278,278],
[269,0,274,267,253,270,275,283],
[270,276,0,269,262,266,269,283],
[275,283,281,0,277,277,278,279],
[277,297,288,273,0,270,275,290],
[274,280,284,273,280,0,275,290],
[272,275,281,272,275,275,0,290],
[272,267,267,271,260,260,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,283,261,266,272,272,265],
[271,0,248,255,242,250,255,254],
[267,302,0,286,275,258,277,269],
[289,295,264,0,291,262,262,278],
[284,308,275,259,0,275,271,246],
[278,300,292,288,275,0,268,276],
[278,295,273,288,279,282,0,250],
[285,296,281,272,304,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,332,304,262,287,268,312],
[270,0,288,269,276,281,285,312],
[218,262,0,256,223,242,178,307],
[246,281,294,0,225,256,261,296],
[288,274,327,325,0,277,230,294],
[263,269,308,294,273,0,252,307],
[282,265,372,289,320,298,0,299],
[238,238,243,254,256,243,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,281,256,283,298,294,260],
[265,0,289,256,297,291,283,246],
[269,261,0,227,282,269,280,266],
[294,294,323,0,308,299,311,275],
[267,253,268,242,0,299,265,258],
[252,259,281,251,251,0,270,257],
[256,267,270,239,285,280,0,231],
[290,304,284,275,292,293,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,265,255,283,264,284,257],
[264,0,269,265,256,277,252,252],
[285,281,0,257,263,262,251,303],
[295,285,293,0,294,291,266,291],
[267,294,287,256,0,294,262,285],
[286,273,288,259,256,0,287,270],
[266,298,299,284,288,263,0,283],
[293,298,247,259,265,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,305,271,304,260,291,281],
[284,0,267,273,317,279,283,307],
[245,283,0,245,302,220,236,280],
[279,277,305,0,283,243,272,301],
[246,233,248,267,0,207,248,250],
[290,271,330,307,343,0,281,305],
[259,267,314,278,302,269,0,297],
[269,243,270,249,300,245,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,281,298,269,280,290,288],
[252,0,268,278,259,280,300,262],
[269,282,0,282,286,299,301,276],
[252,272,268,0,269,273,280,273],
[281,291,264,281,0,283,290,273],
[270,270,251,277,267,0,288,266],
[260,250,249,270,260,262,0,259],
[262,288,274,277,277,284,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,293,294,273,276,267],
[284,0,264,304,290,285,295,270],
[278,286,0,299,286,296,281,272],
[257,246,251,0,263,263,261,264],
[256,260,264,287,0,274,276,280],
[277,265,254,287,276,0,275,274],
[274,255,269,289,274,275,0,279],
[283,280,278,286,270,276,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,299,290,308,318,269,287],
[257,0,254,249,263,296,276,283],
[251,296,0,270,284,284,271,271],
[260,301,280,0,286,305,263,245],
[242,287,266,264,0,299,260,270],
[232,254,266,245,251,0,259,262],
[281,274,279,287,290,291,0,255],
[263,267,279,305,280,288,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,342,387,266,355,310,271,173],
[208,0,272,225,244,313,383,178],
[163,278,0,248,253,206,279,213],
[284,325,302,0,282,265,383,313],
[195,306,297,268,0,329,296,232],
[240,237,344,285,221,0,331,241],
[279,167,271,167,254,219,0,164],
[377,372,337,237,318,309,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,277,283,295,281,281],
[262,0,261,245,276,259,256,272],
[278,289,0,265,286,280,275,281],
[273,305,285,0,298,309,293,289],
[267,274,264,252,0,271,264,275],
[255,291,270,241,279,0,257,269],
[269,294,275,257,286,293,0,277],
[269,278,269,261,275,281,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,281,267,286,264,281],
[259,0,278,272,267,282,266,278],
[276,272,0,283,265,269,270,283],
[269,278,267,0,275,271,268,264],
[283,283,285,275,0,274,287,280],
[264,268,281,279,276,0,275,268],
[286,284,280,282,263,275,0,285],
[269,272,267,286,270,282,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,259,261,283,272,270,264],
[284,0,287,272,285,281,270,284],
[291,263,0,267,276,284,274,288],
[289,278,283,0,277,272,284,287],
[267,265,274,273,0,272,275,274],
[278,269,266,278,278,0,292,268],
[280,280,276,266,275,258,0,273],
[286,266,262,263,276,282,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,259,256,270,268,250,254],
[297,0,285,272,285,313,269,290],
[291,265,0,242,276,289,274,283],
[294,278,308,0,286,297,274,281],
[280,265,274,264,0,276,277,256],
[282,237,261,253,274,0,243,260],
[300,281,276,276,273,307,0,266],
[296,260,267,269,294,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,265,254,265,250,226,269],
[276,0,272,252,284,267,244,297],
[285,278,0,264,297,284,243,303],
[296,298,286,0,286,282,261,300],
[285,266,253,264,0,246,242,303],
[300,283,266,268,304,0,275,303],
[324,306,307,289,308,275,0,349],
[281,253,247,250,247,247,201,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,270,272,282,279,277,287],
[246,0,268,266,256,269,288,275],
[280,282,0,273,297,289,291,283],
[278,284,277,0,298,305,273,286],
[268,294,253,252,0,279,288,243],
[271,281,261,245,271,0,287,267],
[273,262,259,277,262,263,0,261],
[263,275,267,264,307,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,388,233,417,261,312],
[307,0,268,424,403,406,332,353],
[286,282,0,361,264,404,343,262],
[162,126,189,0,224,253,303,237],
[317,147,286,326,0,284,347,341],
[133,144,146,297,266,0,245,285],
[289,218,207,247,203,305,0,255],
[238,197,288,313,209,265,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,263,285,259,275,267],
[276,0,275,288,287,287,295,269],
[272,275,0,302,282,280,289,286],
[287,262,248,0,271,278,298,258],
[265,263,268,279,0,240,282,271],
[291,263,270,272,310,0,307,262],
[275,255,261,252,268,243,0,261],
[283,281,264,292,279,288,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,268,295,268,250,241,266],
[294,0,263,265,300,238,247,343],
[282,287,0,296,312,272,275,278],
[255,285,254,0,244,267,251,282],
[282,250,238,306,0,245,242,249],
[300,312,278,283,305,0,264,311],
[309,303,275,299,308,286,0,307],
[284,207,272,268,301,239,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,271,253,250,235,259,212],
[284,0,269,271,267,258,259,253],
[279,281,0,273,278,287,275,251],
[297,279,277,0,276,266,277,258],
[300,283,272,274,0,271,269,277],
[315,292,263,284,279,0,252,247],
[291,291,275,273,281,298,0,277],
[338,297,299,292,273,303,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,238,287,278,296,322,256],
[279,0,257,241,194,330,264,223],
[312,293,0,314,322,332,263,292],
[263,309,236,0,221,325,255,241],
[272,356,228,329,0,342,380,295],
[254,220,218,225,208,0,243,223],
[228,286,287,295,170,307,0,291],
[294,327,258,309,255,327,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,283,275,273,294,276,272],
[262,0,304,293,273,282,272,268],
[267,246,0,278,271,270,247,257],
[275,257,272,0,259,284,259,257],
[277,277,279,291,0,303,274,254],
[256,268,280,266,247,0,250,258],
[274,278,303,291,276,300,0,277],
[278,282,293,293,296,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,282,306,286,297,313],
[261,0,288,266,307,263,288,306],
[281,262,0,276,283,262,258,289],
[268,284,274,0,311,284,277,313],
[244,243,267,239,0,244,269,279],
[264,287,288,266,306,0,273,322],
[253,262,292,273,281,277,0,298],
[237,244,261,237,271,228,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,275,291,275,274,299,276],
[297,0,280,286,295,265,298,282],
[275,270,0,279,268,282,286,278],
[259,264,271,0,273,255,286,265],
[275,255,282,277,0,261,284,276],
[276,285,268,295,289,0,281,279],
[251,252,264,264,266,269,0,257],
[274,268,272,285,274,271,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,226,259,304,243,283,250],
[294,0,275,266,310,263,280,285],
[324,275,0,274,308,266,289,282],
[291,284,276,0,310,282,285,252],
[246,240,242,240,0,250,261,249],
[307,287,284,268,300,0,313,312],
[267,270,261,265,289,237,0,267],
[300,265,268,298,301,238,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,274,296,288,271,280,292],
[300,0,291,290,271,268,290,300],
[276,259,0,291,280,271,276,280],
[254,260,259,0,265,269,270,281],
[262,279,270,285,0,296,294,277],
[279,282,279,281,254,0,278,278],
[270,260,274,280,256,272,0,251],
[258,250,270,269,273,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,269,261,269,270,285,285],
[290,0,271,293,277,281,264,297],
[281,279,0,264,270,266,272,283],
[289,257,286,0,271,261,266,290],
[281,273,280,279,0,270,278,284],
[280,269,284,289,280,0,264,287],
[265,286,278,284,272,286,0,307],
[265,253,267,260,266,263,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,250,273,269,260,260,284],
[269,0,270,288,285,277,258,286],
[300,280,0,270,273,273,257,276],
[277,262,280,0,271,272,262,263],
[281,265,277,279,0,292,286,283],
[290,273,277,278,258,0,274,294],
[290,292,293,288,264,276,0,304],
[266,264,274,287,267,256,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,312,289,342,286,310,284],
[299,0,305,274,321,273,277,271],
[238,245,0,256,268,281,251,267],
[261,276,294,0,303,265,251,264],
[208,229,282,247,0,235,241,207],
[264,277,269,285,315,0,264,258],
[240,273,299,299,309,286,0,282],
[266,279,283,286,343,292,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,285,276,328,244,298,271],
[267,0,229,276,269,212,215,240],
[265,321,0,264,304,289,281,279],
[274,274,286,0,319,276,298,282],
[222,281,246,231,0,221,275,244],
[306,338,261,274,329,0,281,276],
[252,335,269,252,275,269,0,246],
[279,310,271,268,306,274,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,263,258,315,311,313,322],
[276,0,276,273,284,294,283,336],
[287,274,0,256,284,279,288,329],
[292,277,294,0,307,274,295,337],
[235,266,266,243,0,258,292,283],
[239,256,271,276,292,0,298,300],
[237,267,262,255,258,252,0,293],
[228,214,221,213,267,250,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,254,277,280,260,241,253],
[281,0,291,296,310,256,279,289],
[296,259,0,285,332,253,267,286],
[273,254,265,0,293,282,278,236],
[270,240,218,257,0,255,269,282],
[290,294,297,268,295,0,274,276],
[309,271,283,272,281,276,0,291],
[297,261,264,314,268,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,185,173,163,343,300,313,227],
[365,0,295,259,351,415,402,380],
[377,255,0,327,369,325,327,265],
[387,291,223,0,395,374,384,360],
[207,199,181,155,0,283,332,231],
[250,135,225,176,267,0,347,241],
[237,148,223,166,218,203,0,195],
[323,170,285,190,319,309,355,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,291,266,265,302,266,295],
[254,0,266,286,248,295,265,283],
[259,284,0,327,282,299,299,293],
[284,264,223,0,249,262,269,245],
[285,302,268,301,0,262,275,281],
[248,255,251,288,288,0,242,260],
[284,285,251,281,275,308,0,299],
[255,267,257,305,269,290,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,245,291,277,266,244,276],
[294,0,272,275,282,267,279,270],
[305,278,0,277,287,288,280,274],
[259,275,273,0,274,286,252,281],
[273,268,263,276,0,280,273,255],
[284,283,262,264,270,0,254,299],
[306,271,270,298,277,296,0,275],
[274,280,276,269,295,251,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,269,269,274,267,264,248],
[284,0,272,276,274,271,262,253],
[281,278,0,273,269,253,274,269],
[281,274,277,0,275,261,252,249],
[276,276,281,275,0,267,267,259],
[283,279,297,289,283,0,248,276],
[286,288,276,298,283,302,0,257],
[302,297,281,301,291,274,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,277,302,321,275,283,306],
[245,0,236,300,278,261,269,294],
[273,314,0,306,328,280,296,306],
[248,250,244,0,279,278,285,284],
[229,272,222,271,0,269,240,269],
[275,289,270,272,281,0,267,281],
[267,281,254,265,310,283,0,322],
[244,256,244,266,281,269,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,269,285,284,296,273],
[255,0,277,269,278,274,286,256],
[266,273,0,282,251,262,306,268],
[281,281,268,0,293,274,289,287],
[265,272,299,257,0,299,270,278],
[266,276,288,276,251,0,301,275],
[254,264,244,261,280,249,0,259],
[277,294,282,263,272,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,270,274,272,262,269,267],
[277,0,266,282,279,279,281,272],
[280,284,0,289,274,294,297,285],
[276,268,261,0,271,266,291,285],
[278,271,276,279,0,279,285,273],
[288,271,256,284,271,0,280,253],
[281,269,253,259,265,270,0,271],
[283,278,265,265,277,297,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,300,297,274,260,304],
[262,0,241,311,318,259,276,294],
[282,309,0,321,287,284,253,314],
[250,239,229,0,293,206,211,259],
[253,232,263,257,0,240,259,253],
[276,291,266,344,310,0,285,300],
[290,274,297,339,291,265,0,272],
[246,256,236,291,297,250,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,273,295,266,272,270],
[283,0,269,276,289,285,262,279],
[265,281,0,268,281,265,267,271],
[277,274,282,0,293,277,271,270],
[255,261,269,257,0,267,258,266],
[284,265,285,273,283,0,276,263],
[278,288,283,279,292,274,0,275],
[280,271,279,280,284,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,283,283,282,277,278],
[264,0,275,266,284,267,268,280],
[276,275,0,272,274,282,274,271],
[267,284,278,0,278,267,263,268],
[267,266,276,272,0,265,255,269],
[268,283,268,283,285,0,281,284],
[273,282,276,287,295,269,0,286],
[272,270,279,282,281,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,247,276,301,265,280,254],
[244,0,271,293,236,267,257,256],
[303,279,0,265,256,258,274,249],
[274,257,285,0,289,252,287,281],
[249,314,294,261,0,282,273,266],
[285,283,292,298,268,0,255,259],
[270,293,276,263,277,295,0,248],
[296,294,301,269,284,291,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,303,335,284,372,343,320],
[290,0,252,261,270,323,285,274],
[247,298,0,288,269,337,258,318],
[215,289,262,0,277,314,237,269],
[266,280,281,273,0,391,237,308],
[178,227,213,236,159,0,203,272],
[207,265,292,313,313,347,0,294],
[230,276,232,281,242,278,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,312,259,259,267,267],
[295,0,266,278,278,266,265,265],
[274,284,0,259,276,257,290,266],
[238,272,291,0,283,277,257,273],
[291,272,274,267,0,252,263,271],
[291,284,293,273,298,0,298,260],
[283,285,260,293,287,252,0,275],
[283,285,284,277,279,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,254,274,292,274,246,275],
[261,0,233,256,275,247,258,272],
[296,317,0,294,285,258,272,268],
[276,294,256,0,292,291,294,296],
[258,275,265,258,0,280,285,290],
[276,303,292,259,270,0,252,284],
[304,292,278,256,265,298,0,297],
[275,278,282,254,260,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,270,280,254,284,271,267],
[286,0,282,272,272,281,284,282],
[280,268,0,290,261,274,285,275],
[270,278,260,0,266,285,264,259],
[296,278,289,284,0,263,273,283],
[266,269,276,265,287,0,274,276],
[279,266,265,286,277,276,0,279],
[283,268,275,291,267,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,256,272,277,268,225,245],
[256,0,236,278,262,256,236,241],
[294,314,0,300,267,278,294,251],
[278,272,250,0,273,248,212,249],
[273,288,283,277,0,274,266,236],
[282,294,272,302,276,0,265,273],
[325,314,256,338,284,285,0,283],
[305,309,299,301,314,277,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,300,275,261,286,281,272],
[279,0,283,285,267,270,272,268],
[250,267,0,264,252,257,248,264],
[275,265,286,0,251,270,282,265],
[289,283,298,299,0,270,272,293],
[264,280,293,280,280,0,274,278],
[269,278,302,268,278,276,0,278],
[278,282,286,285,257,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,291,281,254,253,277,272],
[294,0,310,276,260,266,280,272],
[259,240,0,264,251,246,260,250],
[269,274,286,0,259,257,273,270],
[296,290,299,291,0,275,291,273],
[297,284,304,293,275,0,284,288],
[273,270,290,277,259,266,0,262],
[278,278,300,280,277,262,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,269,272,272,290,288,288],
[265,0,270,264,255,267,291,253],
[281,280,0,276,290,274,316,263],
[278,286,274,0,257,275,280,253],
[278,295,260,293,0,278,290,263],
[260,283,276,275,272,0,301,264],
[262,259,234,270,260,249,0,247],
[262,297,287,297,287,286,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,294,301,264,304,276,279],
[249,0,231,285,240,238,253,248],
[256,319,0,304,278,306,275,253],
[249,265,246,0,259,277,274,255],
[286,310,272,291,0,278,318,300],
[246,312,244,273,272,0,293,259],
[274,297,275,276,232,257,0,275],
[271,302,297,295,250,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,184,279,283,281,253,187],
[218,0,189,306,172,221,251,310],
[366,361,0,366,260,327,362,299],
[271,244,184,0,218,176,271,189],
[267,378,290,332,0,399,425,290],
[269,329,223,374,151,0,197,210],
[297,299,188,279,125,353,0,346],
[363,240,251,361,260,340,204,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,287,279,296,301,283,271],
[256,0,275,274,282,282,270,277],
[263,275,0,263,281,259,259,262],
[271,276,287,0,270,284,282,275],
[254,268,269,280,0,272,280,255],
[249,268,291,266,278,0,292,256],
[267,280,291,268,270,258,0,265],
[279,273,288,275,295,294,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,271,214,247,280,294,299],
[229,0,228,243,238,279,238,227],
[279,322,0,204,300,334,305,267],
[336,307,346,0,309,338,325,250],
[303,312,250,241,0,285,269,238],
[270,271,216,212,265,0,281,264],
[256,312,245,225,281,269,0,239],
[251,323,283,300,312,286,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,258,247,267,266,263,259],
[294,0,272,265,272,276,273,263],
[292,278,0,261,281,278,263,262],
[303,285,289,0,282,272,275,275],
[283,278,269,268,0,287,280,273],
[284,274,272,278,263,0,275,262],
[287,277,287,275,270,275,0,265],
[291,287,288,275,277,288,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,286,286,272,259,299,338],
[266,0,265,237,255,296,263,348],
[264,285,0,219,257,257,283,300],
[264,313,331,0,258,300,323,347],
[278,295,293,292,0,286,262,333],
[291,254,293,250,264,0,297,326],
[251,287,267,227,288,253,0,279],
[212,202,250,203,217,224,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,288,285,278,272,272,276],
[250,0,256,259,256,257,266,265],
[262,294,0,259,282,260,281,271],
[265,291,291,0,277,275,272,296],
[272,294,268,273,0,275,271,281],
[278,293,290,275,275,0,272,282],
[278,284,269,278,279,278,0,281],
[274,285,279,254,269,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,263,302,272,228,220,267],
[322,0,248,312,309,301,255,279],
[287,302,0,329,286,225,244,252],
[248,238,221,0,232,212,213,242],
[278,241,264,318,0,233,218,246],
[322,249,325,338,317,0,285,282],
[330,295,306,337,332,265,0,274],
[283,271,298,308,304,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,275,281,275,277,277,278],
[264,0,277,254,260,285,258,254],
[275,273,0,250,268,273,286,271],
[269,296,300,0,267,283,303,292],
[275,290,282,283,0,301,276,285],
[273,265,277,267,249,0,284,260],
[273,292,264,247,274,266,0,256],
[272,296,279,258,265,290,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,269,283,291,295,263,275],
[272,0,272,279,315,238,248,262],
[281,278,0,270,285,264,257,273],
[267,271,280,0,298,270,244,283],
[259,235,265,252,0,223,219,244],
[255,312,286,280,327,0,322,286],
[287,302,293,306,331,228,0,283],
[275,288,277,267,306,264,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,260,286,264,274,286,272],
[267,0,270,281,260,286,265,281],
[290,280,0,264,280,289,271,257],
[264,269,286,0,267,273,281,272],
[286,290,270,283,0,286,269,276],
[276,264,261,277,264,0,278,257],
[264,285,279,269,281,272,0,282],
[278,269,293,278,274,293,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,257,263,266,245,288,248],
[288,0,259,283,281,256,288,288],
[293,291,0,280,296,261,293,286],
[287,267,270,0,277,279,295,287],
[284,269,254,273,0,253,280,258],
[305,294,289,271,297,0,314,292],
[262,262,257,255,270,236,0,271],
[302,262,264,263,292,258,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,306,249,292,249,291,287],
[263,0,299,250,269,261,304,335],
[244,251,0,242,210,230,254,268],
[301,300,308,0,283,327,260,302],
[258,281,340,267,0,321,258,286],
[301,289,320,223,229,0,239,278],
[259,246,296,290,292,311,0,358],
[263,215,282,248,264,272,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,282,257,255,246,254,291],
[278,0,310,264,277,261,314,297],
[268,240,0,257,254,269,254,299],
[293,286,293,0,271,257,288,301],
[295,273,296,279,0,274,278,307],
[304,289,281,293,276,0,268,313],
[296,236,296,262,272,282,0,283],
[259,253,251,249,243,237,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,216,214,228,256,309,258,320],
[334,0,289,316,258,323,280,295],
[336,261,0,234,275,355,290,315],
[322,234,316,0,255,343,221,309],
[294,292,275,295,0,290,272,263],
[241,227,195,207,260,0,260,292],
[292,270,260,329,278,290,0,341],
[230,255,235,241,287,258,209,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,272,266,273,290,287],
[272,0,261,271,275,294,279,270],
[277,289,0,288,259,292,301,307],
[278,279,262,0,270,273,281,273],
[284,275,291,280,0,264,274,274],
[277,256,258,277,286,0,272,272],
[260,271,249,269,276,278,0,281],
[263,280,243,277,276,278,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,298,272,299,295,286,305],
[259,0,280,269,280,263,277,271],
[252,270,0,254,264,284,269,273],
[278,281,296,0,281,268,258,279],
[251,270,286,269,0,276,265,244],
[255,287,266,282,274,0,254,287],
[264,273,281,292,285,296,0,266],
[245,279,277,271,306,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,298,280,274,262,259],
[274,0,291,291,285,276,284,244],
[272,259,0,279,275,249,255,265],
[252,259,271,0,269,248,267,248],
[270,265,275,281,0,247,258,256],
[276,274,301,302,303,0,263,276],
[288,266,295,283,292,287,0,279],
[291,306,285,302,294,274,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,283,257,307,258,252,261],
[288,0,259,275,336,307,282,232],
[267,291,0,272,320,318,278,277],
[293,275,278,0,313,289,293,262],
[243,214,230,237,0,218,243,240],
[292,243,232,261,332,0,268,276],
[298,268,272,257,307,282,0,283],
[289,318,273,288,310,274,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,243,242,284,274,263],
[282,0,279,276,261,297,276,278],
[287,271,0,286,262,276,258,288],
[307,274,264,0,293,283,275,290],
[308,289,288,257,0,284,280,286],
[266,253,274,267,266,0,228,289],
[276,274,292,275,270,322,0,291],
[287,272,262,260,264,261,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,241,242,276,267,260,267],
[275,0,220,217,236,235,202,263],
[309,330,0,272,298,285,272,297],
[308,333,278,0,275,309,274,300],
[274,314,252,275,0,306,279,282],
[283,315,265,241,244,0,269,243],
[290,348,278,276,271,281,0,285],
[283,287,253,250,268,307,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,261,276,261,260,250,273],
[266,0,300,249,281,253,272,241],
[289,250,0,273,254,275,246,271],
[274,301,277,0,290,296,282,262],
[289,269,296,260,0,261,241,270],
[290,297,275,254,289,0,262,260],
[300,278,304,268,309,288,0,276],
[277,309,279,288,280,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,293,290,270,259,261,263],
[276,0,267,286,264,271,239,260],
[257,283,0,239,254,262,259,270],
[260,264,311,0,259,294,256,256],
[280,286,296,291,0,289,272,268],
[291,279,288,256,261,0,251,281],
[289,311,291,294,278,299,0,258],
[287,290,280,294,282,269,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,238,270,268,245,251,274],
[290,0,272,271,298,283,275,294],
[312,278,0,284,314,268,269,283],
[280,279,266,0,279,263,285,307],
[282,252,236,271,0,245,242,276],
[305,267,282,287,305,0,271,320],
[299,275,281,265,308,279,0,282],
[276,256,267,243,274,230,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,279,294,270,272,283,269],
[269,0,271,264,274,264,273,270],
[271,279,0,259,259,280,267,278],
[256,286,291,0,282,281,270,274],
[280,276,291,268,0,275,274,279],
[278,286,270,269,275,0,272,284],
[267,277,283,280,276,278,0,266],
[281,280,272,276,271,266,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,317,302,312,269,254,252],
[275,0,341,306,287,296,275,281],
[233,209,0,243,244,204,222,269],
[248,244,307,0,268,269,253,263],
[238,263,306,282,0,248,257,219],
[281,254,346,281,302,0,252,265],
[296,275,328,297,293,298,0,272],
[298,269,281,287,331,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,292,259,290,319,289,305],
[255,0,244,239,258,262,257,278],
[258,306,0,249,262,293,294,279],
[291,311,301,0,293,304,273,302],
[260,292,288,257,0,289,269,276],
[231,288,257,246,261,0,259,265],
[261,293,256,277,281,291,0,281],
[245,272,271,248,274,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,253,214,219,252,266,246],
[306,0,280,201,247,291,244,275],
[297,270,0,268,285,294,288,265],
[336,349,282,0,245,273,320,251],
[331,303,265,305,0,321,295,265],
[298,259,256,277,229,0,266,232],
[284,306,262,230,255,284,0,221],
[304,275,285,299,285,318,329,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,300,328,279,295,252,282],
[275,0,320,321,247,288,298,251],
[250,230,0,289,231,296,245,243],
[222,229,261,0,253,255,281,249],
[271,303,319,297,0,322,267,268],
[255,262,254,295,228,0,229,269],
[298,252,305,269,283,321,0,295],
[268,299,307,301,282,281,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,260,256,279,269,270],
[276,0,263,275,261,256,260,276],
[272,287,0,267,264,264,253,270],
[290,275,283,0,278,288,279,289],
[294,289,286,272,0,292,275,287],
[271,294,286,262,258,0,279,290],
[281,290,297,271,275,271,0,282],
[280,274,280,261,263,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,280,287,266,288,281,265],
[290,0,274,291,294,316,297,277],
[270,276,0,293,290,280,256,267],
[263,259,257,0,277,267,264,252],
[284,256,260,273,0,283,280,268],
[262,234,270,283,267,0,261,245],
[269,253,294,286,270,289,0,272],
[285,273,283,298,282,305,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,263,290,228,274,279,278],
[290,0,274,265,275,291,292,313],
[287,276,0,270,233,249,281,271],
[260,285,280,0,250,269,244,268],
[322,275,317,300,0,291,285,280],
[276,259,301,281,259,0,272,282],
[271,258,269,306,265,278,0,291],
[272,237,279,282,270,268,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,289,344,313,340,261,318],
[257,0,358,345,360,307,305,341],
[261,192,0,338,259,380,244,314],
[206,205,212,0,190,303,234,270],
[237,190,291,360,0,290,227,254],
[210,243,170,247,260,0,287,292],
[289,245,306,316,323,263,0,294],
[232,209,236,280,296,258,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,221,285,310,203,244,188,274],
[329,0,306,337,281,316,300,244],
[265,244,0,278,202,256,226,284],
[240,213,272,0,180,271,196,253],
[347,269,348,370,0,313,330,297],
[306,234,294,279,237,0,282,320],
[362,250,324,354,220,268,0,285],
[276,306,266,297,253,230,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,287,284,273,283,288,285],
[243,0,252,263,239,240,249,265],
[263,298,0,288,270,279,301,271],
[266,287,262,0,284,264,286,267],
[277,311,280,266,0,279,301,292],
[267,310,271,286,271,0,283,283],
[262,301,249,264,249,267,0,252],
[265,285,279,283,258,267,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,282,315,293,300,270,307],
[251,0,262,318,290,287,297,287],
[268,288,0,340,288,285,313,306],
[235,232,210,0,242,240,241,270],
[257,260,262,308,0,257,302,292],
[250,263,265,310,293,0,308,287],
[280,253,237,309,248,242,0,272],
[243,263,244,280,258,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,282,283,285,287,261,272],
[271,0,285,263,290,278,272,269],
[268,265,0,271,270,253,260,267],
[267,287,279,0,292,306,276,284],
[265,260,280,258,0,260,254,266],
[263,272,297,244,290,0,291,278],
[289,278,290,274,296,259,0,292],
[278,281,283,266,284,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,282,297,281,345,317,260],
[252,0,227,251,244,288,282,244],
[268,323,0,303,283,289,291,298],
[253,299,247,0,261,346,272,252],
[269,306,267,289,0,319,268,258],
[205,262,261,204,231,0,248,239],
[233,268,259,278,282,302,0,247],
[290,306,252,298,292,311,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,297,272,279,297,275],
[273,0,280,289,277,280,267,290],
[278,270,0,275,261,271,271,253],
[253,261,275,0,261,258,274,269],
[278,273,289,289,0,269,264,273],
[271,270,279,292,281,0,270,263],
[253,283,279,276,286,280,0,263],
[275,260,297,281,277,287,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,283,263,284,258,285,274],
[248,0,269,258,263,247,285,269],
[267,281,0,270,267,244,287,247],
[287,292,280,0,286,241,274,273],
[266,287,283,264,0,277,267,272],
[292,303,306,309,273,0,291,271],
[265,265,263,276,283,259,0,286],
[276,281,303,277,278,279,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,285,276,275,282,292],
[274,0,280,261,259,271,270,270],
[277,270,0,260,272,268,281,273],
[265,289,290,0,284,264,288,289],
[274,291,278,266,0,276,286,291],
[275,279,282,286,274,0,268,295],
[268,280,269,262,264,282,0,277],
[258,280,277,261,259,255,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,251,277,304,289,244,286],
[293,0,270,293,307,321,301,305],
[299,280,0,284,291,268,279,298],
[273,257,266,0,291,270,268,308],
[246,243,259,259,0,289,241,292],
[261,229,282,280,261,0,248,284],
[306,249,271,282,309,302,0,307],
[264,245,252,242,258,266,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,260,269,282,248,261,251],
[288,0,275,263,279,261,276,263],
[290,275,0,267,299,276,285,275],
[281,287,283,0,287,271,281,271],
[268,271,251,263,0,242,255,264],
[302,289,274,279,308,0,289,279],
[289,274,265,269,295,261,0,252],
[299,287,275,279,286,271,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,252,225,300,255,227,276],
[335,0,305,273,316,293,290,275],
[298,245,0,217,297,264,219,248],
[325,277,333,0,329,300,253,276],
[250,234,253,221,0,263,238,239],
[295,257,286,250,287,0,244,232],
[323,260,331,297,312,306,0,313],
[274,275,302,274,311,318,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,257,250,195,191,248,270],
[311,0,349,246,247,297,276,352],
[293,201,0,215,211,201,206,233],
[300,304,335,0,272,247,248,302],
[355,303,339,278,0,230,321,335],
[359,253,349,303,320,0,266,350],
[302,274,344,302,229,284,0,344],
[280,198,317,248,215,200,206,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,248,243,261,318,293],
[277,0,233,332,388,314,399,368],
[276,317,0,291,364,259,307,332],
[302,218,259,0,270,262,335,256],
[307,162,186,280,0,192,335,230],
[289,236,291,288,358,0,310,363],
[232,151,243,215,215,240,0,258],
[257,182,218,294,320,187,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,292,283,302,278,303,272],
[256,0,273,279,294,248,259,271],
[258,277,0,264,300,290,279,301],
[267,271,286,0,290,287,289,282],
[248,256,250,260,0,278,263,285],
[272,302,260,263,272,0,263,259],
[247,291,271,261,287,287,0,293],
[278,279,249,268,265,291,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,80,288,135,81,160,72,112],
[470,0,479,315,320,431,252,304],
[262,71,0,87,169,245,118,131],
[415,235,463,0,280,345,173,188],
[469,230,381,270,0,274,271,265],
[390,119,305,205,276,0,284,239],
[478,298,432,377,279,266,0,242],
[438,246,419,362,285,311,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,310,317,281,288,275,313],
[281,0,282,282,268,254,256,278],
[240,268,0,303,266,241,223,250],
[233,268,247,0,264,238,259,240],
[269,282,284,286,0,248,247,272],
[262,296,309,312,302,0,284,286],
[275,294,327,291,303,266,0,277],
[237,272,300,310,278,264,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,251,299,282,270,259,301],
[281,0,246,294,246,265,269,297],
[299,304,0,303,265,295,295,302],
[251,256,247,0,256,277,260,261],
[268,304,285,294,0,267,265,284],
[280,285,255,273,283,0,271,280],
[291,281,255,290,285,279,0,274],
[249,253,248,289,266,270,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,272,274,274,268,266,268],
[294,0,284,268,291,289,287,279],
[278,266,0,253,272,259,255,254],
[276,282,297,0,303,264,287,274],
[276,259,278,247,0,259,259,263],
[282,261,291,286,291,0,274,275],
[284,263,295,263,291,276,0,267],
[282,271,296,276,287,275,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,275,274,262,274,264],
[266,0,260,259,271,248,267,258],
[276,290,0,269,298,271,261,275],
[275,291,281,0,283,276,269,271],
[276,279,252,267,0,243,254,261],
[288,302,279,274,307,0,275,266],
[276,283,289,281,296,275,0,289],
[286,292,275,279,289,284,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,284,298,298,272,295,286],
[270,0,275,285,289,276,301,301],
[266,275,0,264,298,288,296,292],
[252,265,286,0,280,273,290,285],
[252,261,252,270,0,264,273,284],
[278,274,262,277,286,0,276,281],
[255,249,254,260,277,274,0,279],
[264,249,258,265,266,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,292,275,293,278,296,292],
[266,0,270,271,279,267,263,269],
[258,280,0,268,291,262,277,286],
[275,279,282,0,289,283,280,276],
[257,271,259,261,0,272,265,280],
[272,283,288,267,278,0,282,270],
[254,287,273,270,285,268,0,280],
[258,281,264,274,270,280,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,268,278,269,272,283,285],
[271,0,281,294,301,264,293,281],
[282,269,0,275,280,259,263,269],
[272,256,275,0,264,278,289,282],
[281,249,270,286,0,238,265,268],
[278,286,291,272,312,0,297,292],
[267,257,287,261,285,253,0,263],
[265,269,281,268,282,258,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,281,293,290,286,282,258],
[262,0,267,280,280,268,286,275],
[269,283,0,297,285,264,294,255],
[257,270,253,0,272,267,274,258],
[260,270,265,278,0,267,269,263],
[264,282,286,283,283,0,284,262],
[268,264,256,276,281,266,0,248],
[292,275,295,292,287,288,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,311,284,296,286,297,275],
[256,0,281,258,265,256,257,263],
[239,269,0,258,260,249,254,250],
[266,292,292,0,299,286,282,260],
[254,285,290,251,0,274,270,285],
[264,294,301,264,276,0,287,287],
[253,293,296,268,280,263,0,260],
[275,287,300,290,265,263,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,298,293,268,288,306,297],
[276,0,262,253,251,247,253,268],
[252,288,0,271,273,278,262,270],
[257,297,279,0,277,284,265,261],
[282,299,277,273,0,293,270,260],
[262,303,272,266,257,0,256,283],
[244,297,288,285,280,294,0,262],
[253,282,280,289,290,267,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,253,242,270,259,276,255],
[339,0,271,297,308,319,271,309],
[297,279,0,250,313,298,293,307],
[308,253,300,0,313,307,278,279],
[280,242,237,237,0,256,291,270],
[291,231,252,243,294,0,302,273],
[274,279,257,272,259,248,0,270],
[295,241,243,271,280,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,289,260,269,299,278,276],
[277,0,287,271,285,276,282,284],
[261,263,0,251,259,277,261,253],
[290,279,299,0,295,291,264,286],
[281,265,291,255,0,292,263,281],
[251,274,273,259,258,0,264,254],
[272,268,289,286,287,286,0,283],
[274,266,297,264,269,296,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,304,281,267,277,292,265],
[289,0,308,287,274,288,300,264],
[246,242,0,257,283,265,264,230],
[269,263,293,0,268,283,297,277],
[283,276,267,282,0,290,302,258],
[273,262,285,267,260,0,270,274],
[258,250,286,253,248,280,0,258],
[285,286,320,273,292,276,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,283,286,266,259,266,264],
[257,0,283,280,254,248,271,242],
[267,267,0,252,257,242,245,224],
[264,270,298,0,252,258,272,268],
[284,296,293,298,0,260,285,275],
[291,302,308,292,290,0,264,289],
[284,279,305,278,265,286,0,285],
[286,308,326,282,275,261,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,275,278,273,277,266],
[291,0,291,276,282,275,286,277],
[277,259,0,276,286,282,287,276],
[275,274,274,0,273,267,280,270],
[272,268,264,277,0,262,291,273],
[277,275,268,283,288,0,274,298],
[273,264,263,270,259,276,0,272],
[284,273,274,280,277,252,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,273,290,271,256,311,273],
[266,0,254,287,267,271,286,260],
[277,296,0,287,264,291,299,295],
[260,263,263,0,281,274,280,277],
[279,283,286,269,0,299,291,288],
[294,279,259,276,251,0,282,259],
[239,264,251,270,259,268,0,274],
[277,290,255,273,262,291,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,267,260,274,263,289,269],
[296,0,291,290,274,296,286,286],
[283,259,0,273,279,270,286,288],
[290,260,277,0,256,269,276,283],
[276,276,271,294,0,273,285,286],
[287,254,280,281,277,0,281,276],
[261,264,264,274,265,269,0,278],
[281,264,262,267,264,274,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,289,302,283,266,268,338],
[288,0,278,263,247,241,246,293],
[261,272,0,277,253,219,236,343],
[248,287,273,0,281,196,212,314],
[267,303,297,269,0,274,296,303],
[284,309,331,354,276,0,251,362],
[282,304,314,338,254,299,0,309],
[212,257,207,236,247,188,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,238,238,251,268,252,265],
[282,0,252,289,278,268,254,307],
[312,298,0,291,299,308,268,316],
[312,261,259,0,301,300,290,294],
[299,272,251,249,0,313,257,312],
[282,282,242,250,237,0,265,308],
[298,296,282,260,293,285,0,330],
[285,243,234,256,238,242,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,260,267,291,292,275,271],
[293,0,275,282,292,318,274,284],
[290,275,0,300,284,318,282,285],
[283,268,250,0,265,291,269,266],
[259,258,266,285,0,290,279,264],
[258,232,232,259,260,0,256,255],
[275,276,268,281,271,294,0,279],
[279,266,265,284,286,295,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,266,266,258,285,257],
[279,0,283,275,274,258,276,262],
[282,267,0,264,270,270,295,258],
[284,275,286,0,288,280,298,282],
[284,276,280,262,0,254,282,248],
[292,292,280,270,296,0,308,281],
[265,274,255,252,268,242,0,276],
[293,288,292,268,302,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,299,257,280,254,300,267],
[294,0,258,274,272,263,317,287],
[251,292,0,275,262,255,290,276],
[293,276,275,0,294,254,304,294],
[270,278,288,256,0,296,312,273],
[296,287,295,296,254,0,313,281],
[250,233,260,246,238,237,0,241],
[283,263,274,256,277,269,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,294,298,256,266,273,288],
[253,0,257,310,247,262,268,242],
[256,293,0,282,265,302,239,240],
[252,240,268,0,226,280,228,248],
[294,303,285,324,0,316,275,293],
[284,288,248,270,234,0,268,269],
[277,282,311,322,275,282,0,255],
[262,308,310,302,257,281,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,211,293,265,236,279,261],
[287,0,207,261,227,264,296,330],
[339,343,0,318,269,373,318,309],
[257,289,232,0,238,273,303,287],
[285,323,281,312,0,232,273,309],
[314,286,177,277,318,0,284,270],
[271,254,232,247,277,266,0,273],
[289,220,241,263,241,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,269,276,298,270,313,240],
[238,0,268,207,275,301,304,262],
[281,282,0,251,274,268,277,282],
[274,343,299,0,331,352,346,354],
[252,275,276,219,0,297,310,248],
[280,249,282,198,253,0,310,240],
[237,246,273,204,240,240,0,266],
[310,288,268,196,302,310,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,265,278,281,268,282,259],
[291,0,265,276,263,267,281,261],
[285,285,0,280,284,277,288,259],
[272,274,270,0,279,269,276,259],
[269,287,266,271,0,270,279,266],
[282,283,273,281,280,0,284,275],
[268,269,262,274,271,266,0,256],
[291,289,291,291,284,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,301,261,294,291,255,269],
[256,0,301,261,287,253,252,254],
[249,249,0,235,255,231,243,239],
[289,289,315,0,292,289,284,275],
[256,263,295,258,0,258,275,244],
[259,297,319,261,292,0,270,267],
[295,298,307,266,275,280,0,273],
[281,296,311,275,306,283,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,290,322,289,299,263,277],
[262,0,270,331,258,288,256,284],
[260,280,0,283,265,272,251,265],
[228,219,267,0,252,263,237,250],
[261,292,285,298,0,293,269,271],
[251,262,278,287,257,0,258,263],
[287,294,299,313,281,292,0,275],
[273,266,285,300,279,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,287,275,270,284,265,281],
[268,0,287,287,281,283,272,271],
[263,263,0,283,273,271,273,272],
[275,263,267,0,254,277,265,254],
[280,269,277,296,0,273,284,275],
[266,267,279,273,277,0,278,267],
[285,278,277,285,266,272,0,276],
[269,279,278,296,275,283,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,298,278,288,271,268,280],
[287,0,299,281,284,278,253,286],
[252,251,0,274,252,270,248,244],
[272,269,276,0,307,281,244,269],
[262,266,298,243,0,262,252,273],
[279,272,280,269,288,0,257,256],
[282,297,302,306,298,293,0,255],
[270,264,306,281,277,294,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,285,249,325,290,264,278],
[297,0,269,280,332,219,239,307],
[265,281,0,254,274,252,289,319],
[301,270,296,0,337,253,272,255],
[225,218,276,213,0,216,243,262],
[260,331,298,297,334,0,269,290],
[286,311,261,278,307,281,0,335],
[272,243,231,295,288,260,215,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,291,284,279,297,287,289],
[280,0,295,273,275,288,283,285],
[259,255,0,262,268,267,271,266],
[266,277,288,0,269,289,297,285],
[271,275,282,281,0,279,281,273],
[253,262,283,261,271,0,267,290],
[263,267,279,253,269,283,0,278],
[261,265,284,265,277,260,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,292,279,262,305,296,274],
[272,0,279,271,268,276,291,286],
[258,271,0,274,272,250,278,265],
[271,279,276,0,258,269,279,265],
[288,282,278,292,0,295,291,275],
[245,274,300,281,255,0,287,281],
[254,259,272,271,259,263,0,248],
[276,264,285,285,275,269,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,332,260,245,306,266,307,270],
[218,0,210,225,164,239,265,259],
[290,340,0,241,253,257,289,299],
[305,325,309,0,240,266,319,357],
[244,386,297,310,0,320,310,303],
[284,311,293,284,230,0,296,321],
[243,285,261,231,240,254,0,312],
[280,291,251,193,247,229,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,263,268,243,296,314,268],
[292,0,251,265,267,286,273,295],
[287,299,0,286,274,309,259,319],
[282,285,264,0,296,289,283,254],
[307,283,276,254,0,274,268,290],
[254,264,241,261,276,0,237,257],
[236,277,291,267,282,313,0,276],
[282,255,231,296,260,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,272,264,269,270,285],
[281,0,279,286,286,278,285,271],
[275,271,0,295,263,264,278,291],
[278,264,255,0,291,280,268,270],
[286,264,287,259,0,280,282,298],
[281,272,286,270,270,0,271,278],
[280,265,272,282,268,279,0,277],
[265,279,259,280,252,272,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,267,291,302,283,260],
[281,0,271,253,277,265,286,246],
[283,279,0,281,278,265,280,282],
[283,297,269,0,294,254,284,263],
[259,273,272,256,0,290,281,278],
[248,285,285,296,260,0,282,254],
[267,264,270,266,269,268,0,250],
[290,304,268,287,272,296,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,252,258,246,244,248],
[283,0,275,275,273,249,266,275],
[286,275,0,260,264,256,261,253],
[298,275,290,0,276,275,280,279],
[292,277,286,274,0,247,254,268],
[304,301,294,275,303,0,285,294],
[306,284,289,270,296,265,0,296],
[302,275,297,271,282,256,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,233,319,258,288,371,274],
[241,0,356,266,256,398,432,332],
[317,194,0,269,287,316,343,326],
[231,284,281,0,267,327,496,356],
[292,294,263,283,0,235,369,319],
[262,152,234,223,315,0,292,300],
[179,118,207,54,181,258,0,65],
[276,218,224,194,231,250,485,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,311,298,301,273,278,282],
[273,0,282,285,291,277,268,272],
[239,268,0,277,263,261,263,258],
[252,265,273,0,293,267,255,276],
[249,259,287,257,0,256,247,267],
[277,273,289,283,294,0,276,264],
[272,282,287,295,303,274,0,277],
[268,278,292,274,283,286,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,323,298,164,267,197,288,243],
[227,0,269,210,153,207,257,281],
[252,281,0,252,286,257,217,325],
[386,340,298,0,314,293,264,319],
[283,397,264,236,0,281,309,300],
[353,343,293,257,269,0,311,255],
[262,293,333,286,241,239,0,292],
[307,269,225,231,250,295,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,293,275,269,277,289],
[286,0,282,296,270,295,289,283],
[290,268,0,299,288,272,292,296],
[257,254,251,0,262,266,259,274],
[275,280,262,288,0,286,297,275],
[281,255,278,284,264,0,278,283],
[273,261,258,291,253,272,0,304],
[261,267,254,276,275,267,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,289,263,253,258,283,292],
[309,0,300,274,284,300,286,294],
[261,250,0,256,230,257,277,282],
[287,276,294,0,263,267,287,289],
[297,266,320,287,0,284,308,295],
[292,250,293,283,266,0,296,281],
[267,264,273,263,242,254,0,270],
[258,256,268,261,255,269,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,272,266,299,293,287,283],
[244,0,262,273,283,259,260,269],
[278,288,0,256,299,279,264,284],
[284,277,294,0,316,284,274,280],
[251,267,251,234,0,254,244,253],
[257,291,271,266,296,0,276,257],
[263,290,286,276,306,274,0,287],
[267,281,266,270,297,293,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,269,254,269,237,282],
[274,0,283,258,274,263,266,254],
[270,267,0,276,249,246,253,256],
[281,292,274,0,287,287,262,256],
[296,276,301,263,0,269,259,289],
[281,287,304,263,281,0,283,285],
[313,284,297,288,291,267,0,272],
[268,296,294,294,261,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,275,265,281,250,264],
[272,0,277,289,278,302,262,276],
[263,273,0,270,262,276,255,271],
[275,261,280,0,263,290,277,269],
[285,272,288,287,0,269,267,280],
[269,248,274,260,281,0,261,275],
[300,288,295,273,283,289,0,280],
[286,274,279,281,270,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,285,249,259,253,292,248],
[277,0,290,252,281,270,243,261],
[265,260,0,275,298,281,255,243],
[301,298,275,0,304,312,266,279],
[291,269,252,246,0,242,243,257],
[297,280,269,238,308,0,282,257],
[258,307,295,284,307,268,0,263],
[302,289,307,271,293,293,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,270,262,256,251,273],
[273,0,265,283,278,281,280,285],
[279,285,0,295,282,272,281,302],
[280,267,255,0,275,270,266,288],
[288,272,268,275,0,274,274,278],
[294,269,278,280,276,0,285,287],
[299,270,269,284,276,265,0,277],
[277,265,248,262,272,263,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,273,286,315,303,313,303],
[276,0,281,261,298,304,290,277],
[277,269,0,291,287,290,286,280],
[264,289,259,0,292,297,315,285],
[235,252,263,258,0,256,243,250],
[247,246,260,253,294,0,270,264],
[237,260,264,235,307,280,0,254],
[247,273,270,265,300,286,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,305,269,316,284,267],
[253,0,223,268,224,284,254,230],
[274,327,0,315,276,287,297,265],
[245,282,235,0,247,258,229,280],
[281,326,274,303,0,283,292,295],
[234,266,263,292,267,0,224,236],
[266,296,253,321,258,326,0,256],
[283,320,285,270,255,314,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,295,270,276,263,273],
[276,0,271,302,283,280,290,293],
[270,279,0,274,304,275,283,285],
[255,248,276,0,278,266,283,263],
[280,267,246,272,0,258,266,258],
[274,270,275,284,292,0,296,258],
[287,260,267,267,284,254,0,276],
[277,257,265,287,292,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,279,274,283,276,301,296],
[257,0,287,271,273,271,285,268],
[271,263,0,261,252,260,272,277],
[276,279,289,0,275,259,284,305],
[267,277,298,275,0,276,293,299],
[274,279,290,291,274,0,284,301],
[249,265,278,266,257,266,0,294],
[254,282,273,245,251,249,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,281,233,254,331,268,289],
[300,0,276,235,219,303,312,354],
[269,274,0,284,305,330,360,277],
[317,315,266,0,275,302,333,287],
[296,331,245,275,0,293,382,314],
[219,247,220,248,257,0,310,329],
[282,238,190,217,168,240,0,268],
[261,196,273,263,236,221,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,250,257,256,263,269,278],
[268,0,264,260,274,281,267,289],
[300,286,0,279,288,269,288,315],
[293,290,271,0,272,291,278,307],
[294,276,262,278,0,294,265,318],
[287,269,281,259,256,0,265,285],
[281,283,262,272,285,285,0,304],
[272,261,235,243,232,265,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,251,269,267,279,252,262],
[278,0,268,268,270,277,274,266],
[299,282,0,282,282,288,267,282],
[281,282,268,0,288,291,274,268],
[283,280,268,262,0,294,269,279],
[271,273,262,259,256,0,274,260],
[298,276,283,276,281,276,0,266],
[288,284,268,282,271,290,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,221,277,226,221,255],
[281,0,252,252,239,244,254,276],
[283,298,0,262,228,278,234,266],
[329,298,288,0,302,258,261,343],
[273,311,322,248,0,286,305,314],
[324,306,272,292,264,0,301,284],
[329,296,316,289,245,249,0,326],
[295,274,284,207,236,266,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,278,301,266,279,290,300],
[248,0,248,283,246,266,246,276],
[272,302,0,289,262,289,268,291],
[249,267,261,0,255,272,272,272],
[284,304,288,295,0,294,270,294],
[271,284,261,278,256,0,275,285],
[260,304,282,278,280,275,0,283],
[250,274,259,278,256,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,232,314,274,258,296,287],
[232,0,252,295,291,247,268,238],
[318,298,0,385,246,325,304,284],
[236,255,165,0,239,186,256,271],
[276,259,304,311,0,315,339,280],
[292,303,225,364,235,0,270,266],
[254,282,246,294,211,280,0,261],
[263,312,266,279,270,284,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,249,286,254,285,282],
[284,0,297,279,299,262,275,287],
[261,253,0,246,283,263,287,249],
[301,271,304,0,303,270,293,267],
[264,251,267,247,0,233,246,250],
[296,288,287,280,317,0,285,247],
[265,275,263,257,304,265,0,257],
[268,263,301,283,300,303,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,305,320,264,281,270,288],
[310,0,302,313,275,288,272,283],
[245,248,0,295,250,260,217,252],
[230,237,255,0,223,259,181,246],
[286,275,300,327,0,322,285,277],
[269,262,290,291,228,0,264,260],
[280,278,333,369,265,286,0,282],
[262,267,298,304,273,290,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,244,298,262,284,261],
[286,0,304,267,278,285,312,291],
[274,246,0,252,254,258,282,262],
[306,283,298,0,289,268,311,274],
[252,272,296,261,0,258,287,257],
[288,265,292,282,292,0,299,284],
[266,238,268,239,263,251,0,258],
[289,259,288,276,293,266,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,268,274,269,287,281,267],
[279,0,278,273,271,269,279,263],
[282,272,0,266,285,279,275,282],
[276,277,284,0,287,295,284,275],
[281,279,265,263,0,260,260,265],
[263,281,271,255,290,0,268,260],
[269,271,275,266,290,282,0,284],
[283,287,268,275,285,290,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,267,241,263,267,265,263],
[263,0,296,242,249,246,254,266],
[283,254,0,219,257,255,256,259],
[309,308,331,0,261,279,333,300],
[287,301,293,289,0,252,287,265],
[283,304,295,271,298,0,307,297],
[285,296,294,217,263,243,0,309],
[287,284,291,250,285,253,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,276,266,282,274,287],
[265,0,289,268,282,268,264,275],
[255,261,0,252,259,258,259,258],
[274,282,298,0,282,278,265,282],
[284,268,291,268,0,274,284,282],
[268,282,292,272,276,0,264,283],
[276,286,291,285,266,286,0,281],
[263,275,292,268,268,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,253,281,280,273,278,275],
[265,0,254,269,265,261,277,268],
[297,296,0,273,278,289,286,281],
[269,281,277,0,268,269,283,262],
[270,285,272,282,0,288,262,272],
[277,289,261,281,262,0,282,280],
[272,273,264,267,288,268,0,276],
[275,282,269,288,278,270,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,274,300,291,271,298,287],
[255,0,265,268,258,259,280,245],
[276,285,0,300,275,261,297,269],
[250,282,250,0,288,273,290,271],
[259,292,275,262,0,260,297,291],
[279,291,289,277,290,0,312,268],
[252,270,253,260,253,238,0,250],
[263,305,281,279,259,282,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,258,288,284,243,295,280],
[305,0,266,267,295,291,284,306],
[292,284,0,286,307,250,282,309],
[262,283,264,0,268,295,287,271],
[266,255,243,282,0,275,285,301],
[307,259,300,255,275,0,269,330],
[255,266,268,263,265,281,0,285],
[270,244,241,279,249,220,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,277,287,273,276,304],
[267,0,279,259,283,263,273,268],
[256,271,0,272,280,267,259,278],
[273,291,278,0,280,285,274,261],
[263,267,270,270,0,271,265,271],
[277,287,283,265,279,0,265,272],
[274,277,291,276,285,285,0,274],
[246,282,272,289,279,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,254,308,287,284,271,281],
[279,0,267,291,287,270,281,261],
[296,283,0,312,281,275,300,287],
[242,259,238,0,271,262,243,256],
[263,263,269,279,0,271,253,265],
[266,280,275,288,279,0,265,276],
[279,269,250,307,297,285,0,288],
[269,289,263,294,285,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,285,267,286,275,277,287],
[260,0,253,230,269,262,247,284],
[265,297,0,278,286,272,293,277],
[283,320,272,0,287,258,289,291],
[264,281,264,263,0,265,274,263],
[275,288,278,292,285,0,289,282],
[273,303,257,261,276,261,0,279],
[263,266,273,259,287,268,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,288,260,269,271,268,296],
[261,0,258,242,250,253,264,272],
[262,292,0,259,291,284,272,279],
[290,308,291,0,288,264,285,285],
[281,300,259,262,0,257,258,280],
[279,297,266,286,293,0,265,293],
[282,286,278,265,292,285,0,286],
[254,278,271,265,270,257,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,294,246,280,265,242,290],
[239,0,260,236,253,253,265,266],
[256,290,0,252,270,281,287,266],
[304,314,298,0,296,265,295,307],
[270,297,280,254,0,287,267,291],
[285,297,269,285,263,0,287,307],
[308,285,263,255,283,263,0,252],
[260,284,284,243,259,243,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,277,288,276,290,282],
[271,0,297,266,305,295,308,296],
[275,253,0,261,293,281,265,284],
[273,284,289,0,287,262,313,273],
[262,245,257,263,0,293,257,241],
[274,255,269,288,257,0,302,269],
[260,242,285,237,293,248,0,265],
[268,254,266,277,309,281,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,264,263,247,256,257,290],
[265,0,247,258,239,254,259,285],
[286,303,0,269,272,274,278,295],
[287,292,281,0,273,266,283,284],
[303,311,278,277,0,282,267,303],
[294,296,276,284,268,0,282,281],
[293,291,272,267,283,268,0,288],
[260,265,255,266,247,269,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,213,222,236,220,202,237,219],
[337,0,312,313,283,239,268,255],
[328,238,0,273,251,216,261,279],
[314,237,277,0,259,236,276,268],
[330,267,299,291,0,281,321,295],
[348,311,334,314,269,0,300,272],
[313,282,289,274,229,250,0,286],
[331,295,271,282,255,278,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,280,274,263,276,283],
[280,0,273,279,275,246,272,276],
[278,277,0,303,272,275,292,287],
[270,271,247,0,250,267,277,274],
[276,275,278,300,0,266,270,268],
[287,304,275,283,284,0,298,280],
[274,278,258,273,280,252,0,267],
[267,274,263,276,282,270,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,251,284,249,283,242,268],
[307,0,301,288,293,290,274,251],
[299,249,0,292,283,306,293,305],
[266,262,258,0,260,286,254,281],
[301,257,267,290,0,299,306,274],
[267,260,244,264,251,0,267,265],
[308,276,257,296,244,283,0,261],
[282,299,245,269,276,285,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,259,248,262,264,281,280],
[272,0,266,272,268,258,259,268],
[291,284,0,255,281,279,270,269],
[302,278,295,0,272,280,285,304],
[288,282,269,278,0,257,270,296],
[286,292,271,270,293,0,262,291],
[269,291,280,265,280,288,0,290],
[270,282,281,246,254,259,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,316,257,277,325,310,309],
[310,0,336,232,312,342,302,314],
[234,214,0,196,266,260,236,271],
[293,318,354,0,306,317,264,342],
[273,238,284,244,0,290,273,316],
[225,208,290,233,260,0,271,270],
[240,248,314,286,277,279,0,309],
[241,236,279,208,234,280,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,301,282,298,354,266,283],
[234,0,295,329,298,360,326,269],
[249,255,0,285,241,276,286,254],
[268,221,265,0,251,293,232,275],
[252,252,309,299,0,293,260,290],
[196,190,274,257,257,0,232,195],
[284,224,264,318,290,318,0,248],
[267,281,296,275,260,355,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,272,283,272,223,248,258],
[287,0,354,310,268,240,254,258],
[278,196,0,264,245,188,232,238],
[267,240,286,0,270,222,259,247],
[278,282,305,280,0,278,263,271],
[327,310,362,328,272,0,279,310],
[302,296,318,291,287,271,0,277],
[292,292,312,303,279,240,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,310,273,302,300,293,277],
[283,0,299,287,291,291,283,275],
[240,251,0,259,280,282,282,262],
[277,263,291,0,301,292,279,279],
[248,259,270,249,0,290,266,258],
[250,259,268,258,260,0,259,263],
[257,267,268,271,284,291,0,274],
[273,275,288,271,292,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,261,251,271,258,268,253],
[290,0,293,289,301,276,253,256],
[289,257,0,287,280,266,260,273],
[299,261,263,0,297,264,275,247],
[279,249,270,253,0,267,252,245],
[292,274,284,286,283,0,251,256],
[282,297,290,275,298,299,0,282],
[297,294,277,303,305,294,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,318,254,299,294,259,251,271],
[232,0,255,268,266,268,210,260],
[296,295,0,304,295,308,272,275],
[251,282,246,0,286,300,249,260],
[256,284,255,264,0,277,236,268],
[291,282,242,250,273,0,259,253],
[299,340,278,301,314,291,0,267],
[279,290,275,290,282,297,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,277,268,262,271,279,264],
[267,0,273,264,268,271,270,260],
[273,277,0,274,258,275,284,277],
[282,286,276,0,256,270,264,276],
[288,282,292,294,0,263,283,272],
[279,279,275,280,287,0,281,275],
[271,280,266,286,267,269,0,268],
[286,290,273,274,278,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,347,252,269,332,270,326],
[286,0,281,303,226,281,305,228],
[203,269,0,238,253,264,232,245],
[298,247,312,0,314,303,307,254],
[281,324,297,236,0,289,274,294],
[218,269,286,247,261,0,286,265],
[280,245,318,243,276,264,0,230],
[224,322,305,296,256,285,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,276,269,231,273,317,310],
[249,0,338,266,275,283,285,260],
[274,212,0,249,262,291,271,308],
[281,284,301,0,241,328,316,287],
[319,275,288,309,0,330,322,326],
[277,267,259,222,220,0,264,285],
[233,265,279,234,228,286,0,291],
[240,290,242,263,224,265,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,283,266,279,236,271,264],
[256,0,297,274,284,273,276,274],
[267,253,0,283,287,275,298,246],
[284,276,267,0,286,275,292,267],
[271,266,263,264,0,284,252,265],
[314,277,275,275,266,0,282,275],
[279,274,252,258,298,268,0,256],
[286,276,304,283,285,275,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,231,262,184,271,280,260],
[295,0,252,289,237,270,277,216],
[319,298,0,251,256,274,272,252],
[288,261,299,0,275,302,313,260],
[366,313,294,275,0,326,286,270],
[279,280,276,248,224,0,274,230],
[270,273,278,237,264,276,0,277],
[290,334,298,290,280,320,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,271,234,287,285,270,249],
[287,0,281,266,284,264,280,279],
[279,269,0,282,290,290,273,273],
[316,284,268,0,307,278,300,269],
[263,266,260,243,0,259,256,262],
[265,286,260,272,291,0,266,253],
[280,270,277,250,294,284,0,280],
[301,271,277,281,288,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,295,324,266,300,280,235],
[288,0,270,343,256,330,275,278],
[255,280,0,431,310,353,310,244],
[226,207,119,0,334,254,258,148],
[284,294,240,216,0,342,292,189],
[250,220,197,296,208,0,231,161],
[270,275,240,292,258,319,0,282],
[315,272,306,402,361,389,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,328,283,260,291,331,312],
[288,0,319,294,263,291,336,292],
[222,231,0,267,225,239,300,275],
[267,256,283,0,276,295,326,329],
[290,287,325,274,0,289,316,315],
[259,259,311,255,261,0,286,307],
[219,214,250,224,234,264,0,267],
[238,258,275,221,235,243,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,280,268,277,278,287],
[269,0,240,265,264,240,258,265],
[277,310,0,300,283,307,263,290],
[270,285,250,0,251,258,262,274],
[282,286,267,299,0,269,279,274],
[273,310,243,292,281,0,252,284],
[272,292,287,288,271,298,0,293],
[263,285,260,276,276,266,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,282,277,289,279,265],
[292,0,299,270,279,284,276,276],
[268,251,0,268,264,268,259,269],
[268,280,282,0,265,288,284,274],
[273,271,286,285,0,277,284,282],
[261,266,282,262,273,0,287,263],
[271,274,291,266,266,263,0,275],
[285,274,281,276,268,287,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,272,262,286,286,295,286],
[275,0,276,292,260,298,286,279],
[278,274,0,283,283,293,300,277],
[288,258,267,0,280,304,274,280],
[264,290,267,270,0,293,288,279],
[264,252,257,246,257,0,276,260],
[255,264,250,276,262,274,0,265],
[264,271,273,270,271,290,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,274,280,293,287,286,287],
[260,0,288,273,272,259,275,277],
[276,262,0,273,282,266,290,282],
[270,277,277,0,277,257,274,279],
[257,278,268,273,0,260,271,275],
[263,291,284,293,290,0,302,291],
[264,275,260,276,279,248,0,280],
[263,273,268,271,275,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,283,259,349,290,303,308],
[243,0,240,266,305,252,301,247],
[267,310,0,270,321,293,296,245],
[291,284,280,0,323,289,305,267],
[201,245,229,227,0,231,280,223],
[260,298,257,261,319,0,303,244],
[247,249,254,245,270,247,0,270],
[242,303,305,283,327,306,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,249,264,274,255,281,259],
[280,0,281,287,289,277,284,275],
[301,269,0,292,300,273,279,274],
[286,263,258,0,282,259,281,260],
[276,261,250,268,0,249,253,262],
[295,273,277,291,301,0,286,279],
[269,266,271,269,297,264,0,271],
[291,275,276,290,288,271,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,270,263,268,264,267,268],
[276,0,278,271,256,257,271,283],
[280,272,0,281,276,272,276,291],
[287,279,269,0,272,267,296,284],
[282,294,274,278,0,288,301,307],
[286,293,278,283,262,0,283,288],
[283,279,274,254,249,267,0,274],
[282,267,259,266,243,262,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,263,269,245,234,275,308],
[319,0,310,329,352,317,256,300],
[287,240,0,233,265,275,301,304],
[281,221,317,0,288,310,317,301],
[305,198,285,262,0,251,275,327],
[316,233,275,240,299,0,205,287],
[275,294,249,233,275,345,0,324],
[242,250,246,249,223,263,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,271,265,271,273,287,283],
[270,0,269,257,269,258,272,263],
[279,281,0,279,292,285,294,275],
[285,293,271,0,294,286,282,276],
[279,281,258,256,0,277,267,276],
[277,292,265,264,273,0,276,268],
[263,278,256,268,283,274,0,276],
[267,287,275,274,274,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,298,276,288,259,269,310],
[267,0,311,309,279,273,276,299],
[252,239,0,283,265,260,261,259],
[274,241,267,0,267,259,277,274],
[262,271,285,283,0,251,271,272],
[291,277,290,291,299,0,289,269],
[281,274,289,273,279,261,0,294],
[240,251,291,276,278,281,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,334,298,268,249,283,305,263],
[216,0,275,229,212,271,227,235],
[252,275,0,255,262,300,272,269],
[282,321,295,0,251,305,300,257],
[301,338,288,299,0,277,296,260],
[267,279,250,245,273,0,265,292],
[245,323,278,250,254,285,0,233],
[287,315,281,293,290,258,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,293,235,291,299,262,273],
[270,0,311,239,250,257,289,249],
[257,239,0,267,286,265,272,243],
[315,311,283,0,288,267,315,270],
[259,300,264,262,0,336,312,292],
[251,293,285,283,214,0,299,254],
[288,261,278,235,238,251,0,257],
[277,301,307,280,258,296,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,260,270,255,259,285,251],
[280,0,288,280,270,256,287,259],
[290,262,0,269,261,264,281,258],
[280,270,281,0,254,266,271,279],
[295,280,289,296,0,277,274,272],
[291,294,286,284,273,0,315,281],
[265,263,269,279,276,235,0,249],
[299,291,292,271,278,269,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,243,278,264,240,235,243],
[295,0,270,279,264,252,242,266],
[307,280,0,296,264,277,275,290],
[272,271,254,0,254,262,249,249],
[286,286,286,296,0,268,266,275],
[310,298,273,288,282,0,291,275],
[315,308,275,301,284,259,0,271],
[307,284,260,301,275,275,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,277,222,232,191,217,203],
[306,0,319,232,275,258,219,321],
[273,231,0,252,256,262,238,299],
[328,318,298,0,268,250,279,342],
[318,275,294,282,0,235,265,282],
[359,292,288,300,315,0,253,303],
[333,331,312,271,285,297,0,300],
[347,229,251,208,268,247,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,269,267,278,262,255,259],
[294,0,290,272,288,287,276,270],
[281,260,0,285,292,285,292,282],
[283,278,265,0,277,273,278,274],
[272,262,258,273,0,259,256,250],
[288,263,265,277,291,0,271,281],
[295,274,258,272,294,279,0,302],
[291,280,268,276,300,269,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,267,282,266,284,268,288],
[251,0,262,282,260,275,275,270],
[283,288,0,294,275,297,274,272],
[268,268,256,0,267,294,266,289],
[284,290,275,283,0,288,285,289],
[266,275,253,256,262,0,257,274],
[282,275,276,284,265,293,0,267],
[262,280,278,261,261,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,255,259,271,273,266,280],
[274,0,266,289,272,272,272,257],
[295,284,0,290,281,287,270,275],
[291,261,260,0,262,270,263,278],
[279,278,269,288,0,259,275,274],
[277,278,263,280,291,0,261,270],
[284,278,280,287,275,289,0,267],
[270,293,275,272,276,280,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,276,288,286,300,310,270],
[263,0,265,268,291,275,308,287],
[274,285,0,275,296,286,297,277],
[262,282,275,0,274,299,302,303],
[264,259,254,276,0,273,277,277],
[250,275,264,251,277,0,294,271],
[240,242,253,248,273,256,0,248],
[280,263,273,247,273,279,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,270,274,306,288,259,278],
[278,0,280,285,303,284,273,257],
[280,270,0,286,281,290,281,262],
[276,265,264,0,298,284,258,260],
[244,247,269,252,0,251,258,236],
[262,266,260,266,299,0,274,256],
[291,277,269,292,292,276,0,277],
[272,293,288,290,314,294,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,277,276,309,266,286,278],
[250,0,265,250,274,247,255,257],
[273,285,0,260,286,261,289,256],
[274,300,290,0,297,282,293,277],
[241,276,264,253,0,240,259,249],
[284,303,289,268,310,0,281,278],
[264,295,261,257,291,269,0,270],
[272,293,294,273,301,272,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,284,274,285,285,281],
[262,0,289,280,292,283,299,292],
[282,261,0,265,284,272,280,270],
[266,270,285,0,281,267,280,270],
[276,258,266,269,0,274,288,277],
[265,267,278,283,276,0,290,289],
[265,251,270,270,262,260,0,266],
[269,258,280,280,273,261,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,295,265,250,270,275,273],
[284,0,273,291,257,288,291,289],
[255,277,0,283,281,291,288,278],
[285,259,267,0,265,283,275,268],
[300,293,269,285,0,283,292,280],
[280,262,259,267,267,0,274,288],
[275,259,262,275,258,276,0,261],
[277,261,272,282,270,262,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,280,293,290,279,270,271],
[267,0,246,266,275,297,266,264],
[270,304,0,286,287,332,280,260],
[257,284,264,0,276,290,280,264],
[260,275,263,274,0,331,253,279],
[271,253,218,260,219,0,252,232],
[280,284,270,270,297,298,0,252],
[279,286,290,286,271,318,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,291,260,263,295,255,285],
[281,0,290,267,267,280,274,276],
[259,260,0,269,269,273,268,283],
[290,283,281,0,274,289,273,310],
[287,283,281,276,0,272,282,295],
[255,270,277,261,278,0,265,277],
[295,276,282,277,268,285,0,307],
[265,274,267,240,255,273,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,275,279,278,282,285,264],
[291,0,275,289,262,277,275,274],
[275,275,0,288,272,282,295,268],
[271,261,262,0,277,264,281,232],
[272,288,278,273,0,256,279,275],
[268,273,268,286,294,0,281,279],
[265,275,255,269,271,269,0,257],
[286,276,282,318,275,271,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,289,284,249,295,265,290],
[294,0,294,308,278,281,290,271],
[261,256,0,260,246,278,245,249],
[266,242,290,0,259,261,232,247],
[301,272,304,291,0,300,287,290],
[255,269,272,289,250,0,284,258],
[285,260,305,318,263,266,0,267],
[260,279,301,303,260,292,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,260,267,287,252,282,241],
[287,0,256,249,252,241,275,269],
[290,294,0,298,281,257,263,266],
[283,301,252,0,294,251,259,275],
[263,298,269,256,0,249,259,260],
[298,309,293,299,301,0,282,272],
[268,275,287,291,291,268,0,285],
[309,281,284,275,290,278,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,317,288,311,283,349],
[289,0,280,297,257,321,306,295],
[280,270,0,328,291,293,295,306],
[233,253,222,0,229,255,222,271],
[262,293,259,321,0,258,298,314],
[239,229,257,295,292,0,249,272],
[267,244,255,328,252,301,0,305],
[201,255,244,279,236,278,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,266,271,278,279,242,268],
[300,0,277,283,268,266,274,280],
[284,273,0,275,267,268,277,276],
[279,267,275,0,271,271,286,262],
[272,282,283,279,0,268,261,283],
[271,284,282,279,282,0,259,286],
[308,276,273,264,289,291,0,295],
[282,270,274,288,267,264,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,288,296,287,260,294,288],
[273,0,264,267,265,270,265,276],
[262,286,0,267,270,274,254,288],
[254,283,283,0,266,266,282,262],
[263,285,280,284,0,271,274,273],
[290,280,276,284,279,0,273,281],
[256,285,296,268,276,277,0,272],
[262,274,262,288,277,269,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,282,268,294,281,270,279],
[286,0,311,310,303,271,312,310],
[268,239,0,260,272,260,260,248],
[282,240,290,0,275,254,263,265],
[256,247,278,275,0,242,292,291],
[269,279,290,296,308,0,302,325],
[280,238,290,287,258,248,0,282],
[271,240,302,285,259,225,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,303,261,243,282,239,283],
[317,0,302,278,277,312,289,269],
[247,248,0,251,251,250,251,263],
[289,272,299,0,253,269,267,285],
[307,273,299,297,0,278,309,251],
[268,238,300,281,272,0,294,274],
[311,261,299,283,241,256,0,257],
[267,281,287,265,299,276,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,270,268,272,242,277],
[290,0,273,274,264,278,265,255],
[273,277,0,268,275,271,239,282],
[280,276,282,0,273,273,272,276],
[282,286,275,277,0,270,273,295],
[278,272,279,277,280,0,269,264],
[308,285,311,278,277,281,0,268],
[273,295,268,274,255,286,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,328,212,297,306,310,310],
[267,0,348,263,253,284,362,304],
[222,202,0,223,233,236,192,260],
[338,287,327,0,263,286,281,267],
[253,297,317,287,0,275,307,274],
[244,266,314,264,275,0,222,274],
[240,188,358,269,243,328,0,281],
[240,246,290,283,276,276,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,273,278,284,283,293],
[281,0,280,274,284,280,280,273],
[279,270,0,261,276,265,290,278],
[277,276,289,0,284,292,296,274],
[272,266,274,266,0,266,267,258],
[266,270,285,258,284,0,277,271],
[267,270,260,254,283,273,0,274],
[257,277,272,276,292,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,278,276,279,279,266,295],
[283,0,269,287,285,266,286,288],
[272,281,0,271,274,258,268,294],
[274,263,279,0,262,255,267,279],
[271,265,276,288,0,265,272,290],
[271,284,292,295,285,0,277,287],
[284,264,282,283,278,273,0,279],
[255,262,256,271,260,263,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,296,240,232,274,281,298],
[279,0,305,278,243,269,277,286],
[254,245,0,252,227,272,266,299],
[310,272,298,0,295,262,274,323],
[318,307,323,255,0,297,307,306],
[276,281,278,288,253,0,290,295],
[269,273,284,276,243,260,0,245],
[252,264,251,227,244,255,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,264,276,253,257,270,257],
[296,0,287,292,283,291,271,285],
[286,263,0,270,269,253,283,267],
[274,258,280,0,265,270,275,269],
[297,267,281,285,0,276,284,270],
[293,259,297,280,274,0,278,284],
[280,279,267,275,266,272,0,256],
[293,265,283,281,280,266,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,256,249,244,256,279],
[290,0,279,305,274,291,281,291],
[297,271,0,289,288,288,295,305],
[294,245,261,0,281,269,289,286],
[301,276,262,269,0,281,290,305],
[306,259,262,281,269,0,276,280],
[294,269,255,261,260,274,0,291],
[271,259,245,264,245,270,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,303,290,303,296,262,283],
[266,0,262,299,265,265,272,246],
[247,288,0,283,309,283,271,277],
[260,251,267,0,279,281,244,251],
[247,285,241,271,0,278,261,254],
[254,285,267,269,272,0,253,263],
[288,278,279,306,289,297,0,244],
[267,304,273,299,296,287,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,278,275,269,283,295],
[275,0,271,264,271,263,273,273],
[266,279,0,268,258,274,273,281],
[272,286,282,0,279,281,280,281],
[275,279,292,271,0,275,286,290],
[281,287,276,269,275,0,274,295],
[267,277,277,270,264,276,0,275],
[255,277,269,269,260,255,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,265,291,285,284,288],
[282,0,269,261,285,278,274,278],
[265,281,0,270,288,267,280,287],
[285,289,280,0,288,286,275,288],
[259,265,262,262,0,267,275,266],
[265,272,283,264,283,0,285,284],
[266,276,270,275,275,265,0,280],
[262,272,263,262,284,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,261,235,270,287,269,244],
[311,0,306,275,266,307,287,259],
[289,244,0,251,269,262,273,219],
[315,275,299,0,261,330,323,279],
[280,284,281,289,0,271,273,269],
[263,243,288,220,279,0,248,240],
[281,263,277,227,277,302,0,323],
[306,291,331,271,281,310,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,260,265,279,265,273,250],
[299,0,304,281,283,306,301,271],
[290,246,0,268,278,271,275,245],
[285,269,282,0,287,279,270,267],
[271,267,272,263,0,287,277,278],
[285,244,279,271,263,0,276,261],
[277,249,275,280,273,274,0,252],
[300,279,305,283,272,289,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,274,287,265,263,286,292],
[252,0,253,252,256,269,247,262],
[276,297,0,268,263,286,279,275],
[263,298,282,0,271,297,294,282],
[285,294,287,279,0,267,286,295],
[287,281,264,253,283,0,274,290],
[264,303,271,256,264,276,0,285],
[258,288,275,268,255,260,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,207,207,221,190,272,224],
[295,0,240,276,257,245,259,263],
[343,310,0,287,290,238,342,312],
[343,274,263,0,332,278,320,266],
[329,293,260,218,0,244,275,249],
[360,305,312,272,306,0,294,302],
[278,291,208,230,275,256,0,259],
[326,287,238,284,301,248,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,260,264,295,274,281,255],
[276,0,279,266,283,282,284,260],
[290,271,0,267,309,287,295,283],
[286,284,283,0,310,282,288,271],
[255,267,241,240,0,261,253,242],
[276,268,263,268,289,0,278,263],
[269,266,255,262,297,272,0,261],
[295,290,267,279,308,287,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,278,271,263,273,289,284],
[260,0,274,263,274,269,278,266],
[272,276,0,265,269,263,274,253],
[279,287,285,0,281,261,275,286],
[287,276,281,269,0,278,275,273],
[277,281,287,289,272,0,284,277],
[261,272,276,275,275,266,0,276],
[266,284,297,264,277,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,293,260,288,287,265,311],
[276,0,251,287,277,266,269,261],
[257,299,0,280,302,269,299,309],
[290,263,270,0,279,288,265,268],
[262,273,248,271,0,252,275,281],
[263,284,281,262,298,0,278,290],
[285,281,251,285,275,272,0,283],
[239,289,241,282,269,260,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,294,298,267,277,314,252],
[251,0,274,265,281,285,289,248],
[256,276,0,272,264,258,297,258],
[252,285,278,0,268,265,284,256],
[283,269,286,282,0,279,281,252],
[273,265,292,285,271,0,303,275],
[236,261,253,266,269,247,0,254],
[298,302,292,294,298,275,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,321,342,316,343,313,247],
[251,0,324,348,297,276,346,254],
[229,226,0,251,272,199,305,266],
[208,202,299,0,293,212,313,284],
[234,253,278,257,0,184,314,208],
[207,274,351,338,366,0,347,303],
[237,204,245,237,236,203,0,237],
[303,296,284,266,342,247,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,297,307,307,304,302,265],
[248,0,267,304,308,297,281,264],
[253,283,0,319,302,301,293,299],
[243,246,231,0,273,268,251,268],
[243,242,248,277,0,275,254,233],
[246,253,249,282,275,0,272,261],
[248,269,257,299,296,278,0,267],
[285,286,251,282,317,289,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,274,280,281,275,285],
[267,0,299,297,285,285,279,286],
[260,251,0,255,270,274,260,274],
[276,253,295,0,274,280,265,278],
[270,265,280,276,0,278,283,279],
[269,265,276,270,272,0,259,281],
[275,271,290,285,267,291,0,259],
[265,264,276,272,271,269,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,269,274,277,280,275,284],
[251,0,275,262,254,286,247,266],
[281,275,0,297,302,273,269,298],
[276,288,253,0,290,276,253,283],
[273,296,248,260,0,256,254,273],
[270,264,277,274,294,0,248,273],
[275,303,281,297,296,302,0,273],
[266,284,252,267,277,277,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,283,251,253,262,255,279],
[311,0,268,269,297,267,293,289],
[267,282,0,262,276,281,290,284],
[299,281,288,0,296,267,285,309],
[297,253,274,254,0,263,287,280],
[288,283,269,283,287,0,282,268],
[295,257,260,265,263,268,0,276],
[271,261,266,241,270,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,272,280,272,256,278,263],
[282,0,292,277,282,262,308,275],
[278,258,0,267,267,259,284,240],
[270,273,283,0,265,269,301,266],
[278,268,283,285,0,270,295,264],
[294,288,291,281,280,0,295,263],
[272,242,266,249,255,255,0,250],
[287,275,310,284,286,287,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,248,279,279,262,273,258],
[280,0,255,279,280,259,255,240],
[302,295,0,256,283,281,281,262],
[271,271,294,0,288,272,267,261],
[271,270,267,262,0,269,265,260],
[288,291,269,278,281,0,297,273],
[277,295,269,283,285,253,0,276],
[292,310,288,289,290,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,290,282,290,270,276,274],
[277,0,293,274,268,291,272,274],
[260,257,0,275,243,269,281,272],
[268,276,275,0,267,255,297,280],
[260,282,307,283,0,284,306,281],
[280,259,281,295,266,0,272,261],
[274,278,269,253,244,278,0,260],
[276,276,278,270,269,289,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,269,269,274,268,283,281],
[274,0,273,255,271,279,270,276],
[281,277,0,281,280,283,272,278],
[281,295,269,0,283,298,298,289],
[276,279,270,267,0,281,271,298],
[282,271,267,252,269,0,283,271],
[267,280,278,252,279,267,0,275],
[269,274,272,261,252,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,256,264,278,268,263,263],
[307,0,281,274,272,302,286,306],
[294,269,0,295,270,288,295,262],
[286,276,255,0,273,258,268,284],
[272,278,280,277,0,301,303,295],
[282,248,262,292,249,0,304,289],
[287,264,255,282,247,246,0,283],
[287,244,288,266,255,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,251,260,240,250,245,223],
[296,0,292,293,267,270,277,285],
[299,258,0,258,260,229,286,240],
[290,257,292,0,257,258,273,269],
[310,283,290,293,0,261,251,268],
[300,280,321,292,289,0,280,225],
[305,273,264,277,299,270,0,261],
[327,265,310,281,282,325,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,294,268,283,275,261,259],
[275,0,313,271,279,279,270,269],
[256,237,0,261,255,278,260,244],
[282,279,289,0,269,266,255,246],
[267,271,295,281,0,278,279,275],
[275,271,272,284,272,0,291,280],
[289,280,290,295,271,259,0,284],
[291,281,306,304,275,270,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,229,270,264,265,263,270],
[290,0,267,298,275,286,284,269],
[321,283,0,284,268,289,240,262],
[280,252,266,0,268,273,284,296],
[286,275,282,282,0,309,287,271],
[285,264,261,277,241,0,282,233],
[287,266,310,266,263,268,0,282],
[280,281,288,254,279,317,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,280,292,286,278,291,290],
[275,0,285,294,290,276,279,275],
[270,265,0,280,252,255,282,281],
[258,256,270,0,277,269,281,288],
[264,260,298,273,0,246,286,268],
[272,274,295,281,304,0,293,285],
[259,271,268,269,264,257,0,283],
[260,275,269,262,282,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,290,290,300,249,258,271],
[290,0,307,285,285,267,276,250],
[260,243,0,290,302,268,262,293],
[260,265,260,0,268,238,251,244],
[250,265,248,282,0,240,292,255],
[301,283,282,312,310,0,275,287],
[292,274,288,299,258,275,0,261],
[279,300,257,306,295,263,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,258,249,239,260,246,263],
[302,0,289,271,285,293,287,266],
[292,261,0,260,271,263,269,271],
[301,279,290,0,276,268,291,278],
[311,265,279,274,0,293,276,270],
[290,257,287,282,257,0,276,271],
[304,263,281,259,274,274,0,276],
[287,284,279,272,280,279,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,120,223,254,184,192,286,203],
[430,0,269,279,217,235,293,302],
[327,281,0,308,274,257,269,243],
[296,271,242,0,232,234,188,364],
[366,333,276,318,0,345,263,293],
[358,315,293,316,205,0,264,299],
[264,257,281,362,287,286,0,328],
[347,248,307,186,257,251,222,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,286,259,286,281,272,272],
[261,0,275,274,269,276,269,286],
[264,275,0,253,268,274,274,275],
[291,276,297,0,273,282,287,289],
[264,281,282,277,0,269,276,272],
[269,274,276,268,281,0,275,289],
[278,281,276,263,274,275,0,279],
[278,264,275,261,278,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,284,291,289,304,302,293],
[291,0,261,243,282,291,306,285],
[266,289,0,261,280,300,291,283],
[259,307,289,0,286,265,313,295],
[261,268,270,264,0,282,284,255],
[246,259,250,285,268,0,273,283],
[248,244,259,237,266,277,0,294],
[257,265,267,255,295,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,310,288,290,262,292,293],
[256,0,272,262,269,252,255,269],
[240,278,0,255,303,263,273,282],
[262,288,295,0,298,271,311,299],
[260,281,247,252,0,238,274,273],
[288,298,287,279,312,0,293,268],
[258,295,277,239,276,257,0,266],
[257,281,268,251,277,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,274,267,282,264,240,279],
[263,0,264,276,254,279,262,271],
[276,286,0,283,273,274,271,259],
[283,274,267,0,276,282,274,264],
[268,296,277,274,0,281,283,275],
[286,271,276,268,269,0,274,273],
[310,288,279,276,267,276,0,282],
[271,279,291,286,275,277,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,262,223,292,313,266,294],
[276,0,336,269,199,322,298,368],
[288,214,0,220,283,197,337,354],
[327,281,330,0,319,297,252,320],
[258,351,267,231,0,310,284,191],
[237,228,353,253,240,0,345,299],
[284,252,213,298,266,205,0,278],
[256,182,196,230,359,251,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,223,251,264,264,254,277],
[317,0,265,319,298,272,266,318],
[327,285,0,307,277,253,289,289],
[299,231,243,0,293,275,282,290],
[286,252,273,257,0,256,277,293],
[286,278,297,275,294,0,283,289],
[296,284,261,268,273,267,0,287],
[273,232,261,260,257,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,275,257,265,259,313,286],
[289,0,288,290,284,242,280,281],
[275,262,0,239,254,256,291,291],
[293,260,311,0,265,283,327,293],
[285,266,296,285,0,288,286,286],
[291,308,294,267,262,0,305,281],
[237,270,259,223,264,245,0,248],
[264,269,259,257,264,269,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,291,301,281,296,292,269],
[277,0,292,276,275,285,286,281],
[259,258,0,270,270,268,281,257],
[249,274,280,0,244,272,280,267],
[269,275,280,306,0,270,298,278],
[254,265,282,278,280,0,292,279],
[258,264,269,270,252,258,0,251],
[281,269,293,283,272,271,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,264,255,239,254,277,242],
[307,0,287,273,268,279,285,272],
[286,263,0,271,254,270,267,272],
[295,277,279,0,258,269,280,266],
[311,282,296,292,0,270,273,289],
[296,271,280,281,280,0,265,281],
[273,265,283,270,277,285,0,249],
[308,278,278,284,261,269,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,276,273,290,281,275],
[267,0,282,276,261,269,265,269],
[266,268,0,270,248,259,265,270],
[274,274,280,0,274,290,259,272],
[277,289,302,276,0,281,273,289],
[260,281,291,260,269,0,250,289],
[269,285,285,291,277,300,0,298],
[275,281,280,278,261,261,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,290,205,186,362,241,317],
[288,0,283,306,183,308,323,299],
[260,267,0,368,289,392,356,272],
[345,244,182,0,179,288,350,279],
[364,367,261,371,0,468,390,430],
[188,242,158,262,82,0,244,196],
[309,227,194,200,160,306,0,209],
[233,251,278,271,120,354,341,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,285,274,300,267,280,299],
[263,0,247,279,272,269,292,277],
[265,303,0,290,261,277,273,278],
[276,271,260,0,287,269,257,278],
[250,278,289,263,0,278,280,265],
[283,281,273,281,272,0,274,286],
[270,258,277,293,270,276,0,289],
[251,273,272,272,285,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,274,272,306,268,260],
[262,0,252,240,264,285,261,247],
[276,298,0,273,275,315,281,276],
[276,310,277,0,290,324,262,281],
[278,286,275,260,0,300,264,285],
[244,265,235,226,250,0,239,234],
[282,289,269,288,286,311,0,276],
[290,303,274,269,265,316,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,263,301,250,317,275,273],
[239,0,259,265,259,289,260,268],
[287,291,0,263,286,304,276,276],
[249,285,287,0,279,317,271,296],
[300,291,264,271,0,291,259,272],
[233,261,246,233,259,0,252,267],
[275,290,274,279,291,298,0,266],
[277,282,274,254,278,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,266,318,306,289,291,289],
[298,0,233,296,267,254,286,247],
[284,317,0,318,293,275,315,280],
[232,254,232,0,262,246,279,260],
[244,283,257,288,0,237,271,261],
[261,296,275,304,313,0,295,298],
[259,264,235,271,279,255,0,231],
[261,303,270,290,289,252,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,260,277,289,278,276,269],
[270,0,272,275,289,279,276,269],
[290,278,0,303,290,288,275,273],
[273,275,247,0,278,257,261,265],
[261,261,260,272,0,253,251,253],
[272,271,262,293,297,0,279,279],
[274,274,275,289,299,271,0,261],
[281,281,277,285,297,271,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,300,282,286,284,307,265],
[281,0,313,277,284,286,293,253],
[250,237,0,252,260,261,265,246],
[268,273,298,0,296,276,293,279],
[264,266,290,254,0,280,276,258],
[266,264,289,274,270,0,286,251],
[243,257,285,257,274,264,0,245],
[285,297,304,271,292,299,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,241,294,260,271,292,253,254],
[309,0,306,288,313,304,258,301],
[256,244,0,226,263,250,234,254],
[290,262,324,0,312,312,293,276],
[279,237,287,238,0,259,257,247],
[258,246,300,238,291,0,251,265],
[297,292,316,257,293,299,0,267],
[296,249,296,274,303,285,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,279,286,269,292,278],
[271,0,272,271,299,289,285,273],
[272,278,0,263,287,262,282,268],
[271,279,287,0,292,280,293,270],
[264,251,263,258,0,267,284,283],
[281,261,288,270,283,0,283,265],
[258,265,268,257,266,267,0,259],
[272,277,282,280,267,285,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,283,290,292,265,289],
[267,0,278,282,275,274,274,269],
[271,272,0,264,264,275,266,268],
[267,268,286,0,258,276,273,254],
[260,275,286,292,0,280,279,267],
[258,276,275,274,270,0,261,249],
[285,276,284,277,271,289,0,276],
[261,281,282,296,283,301,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,235,259,251,265,250,261,262],
[315,0,275,284,289,273,271,281],
[291,275,0,273,291,287,277,280],
[299,266,277,0,303,274,276,288],
[285,261,259,247,0,258,279,265],
[300,277,263,276,292,0,295,293],
[289,279,273,274,271,255,0,273],
[288,269,270,262,285,257,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,296,281,269,256,282,278],
[300,0,296,288,294,301,272,282],
[254,254,0,261,271,267,243,266],
[269,262,289,0,271,289,276,266],
[281,256,279,279,0,295,268,266],
[294,249,283,261,255,0,275,263],
[268,278,307,274,282,275,0,271],
[272,268,284,284,284,287,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,294,269,275,267,264,285],
[283,0,290,277,247,265,286,273],
[256,260,0,252,282,262,272,259],
[281,273,298,0,279,254,274,269],
[275,303,268,271,0,290,277,265],
[283,285,288,296,260,0,273,254],
[286,264,278,276,273,277,0,274],
[265,277,291,281,285,296,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,249,258,270,226,250,253],
[287,0,281,285,279,273,268,280],
[301,269,0,292,280,275,267,278],
[292,265,258,0,266,271,282,269],
[280,271,270,284,0,253,263,267],
[324,277,275,279,297,0,278,260],
[300,282,283,268,287,272,0,283],
[297,270,272,281,283,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,284,296,261,279,305],
[276,0,264,283,279,262,280,294],
[283,286,0,284,297,282,265,297],
[266,267,266,0,265,244,244,261],
[254,271,253,285,0,268,241,267],
[289,288,268,306,282,0,281,278],
[271,270,285,306,309,269,0,311],
[245,256,253,289,283,272,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,268,306,310,264,228,285],
[271,0,286,298,299,285,285,265],
[282,264,0,277,291,279,251,277],
[244,252,273,0,278,277,231,242],
[240,251,259,272,0,245,221,239],
[286,265,271,273,305,0,273,261],
[322,265,299,319,329,277,0,316],
[265,285,273,308,311,289,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,287,298,271,282,288,263],
[245,0,286,311,265,259,274,280],
[263,264,0,305,278,268,289,282],
[252,239,245,0,251,251,270,251],
[279,285,272,299,0,285,273,285],
[268,291,282,299,265,0,273,286],
[262,276,261,280,277,277,0,274],
[287,270,268,299,265,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,275,281,263,275,295,272],
[279,0,278,290,275,284,276,288],
[275,272,0,271,264,274,288,275],
[269,260,279,0,267,280,284,287],
[287,275,286,283,0,290,289,286],
[275,266,276,270,260,0,277,273],
[255,274,262,266,261,273,0,278],
[278,262,275,263,264,277,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,550,550,286,472,364,229,135],
[0,0,313,286,135,364,151,135],
[0,237,0,151,237,151,151,0],
[264,264,399,0,264,178,264,313],
[78,415,313,286,0,364,229,213],
[186,186,399,372,186,0,237,135],
[321,399,399,286,321,313,0,135],
[415,415,550,237,337,415,415,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,265,295,272,296,307,287],
[235,0,270,261,238,268,236,248],
[285,280,0,267,295,272,284,277],
[255,289,283,0,252,279,272,282],
[278,312,255,298,0,261,275,272],
[254,282,278,271,289,0,259,285],
[243,314,266,278,275,291,0,285],
[263,302,273,268,278,265,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,278,296,286,300,272,276],
[274,0,297,284,271,299,285,288],
[272,253,0,292,237,277,274,302],
[254,266,258,0,252,230,263,264],
[264,279,313,298,0,320,273,287],
[250,251,273,320,230,0,266,289],
[278,265,276,287,277,284,0,320],
[274,262,248,286,263,261,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,265,284,288,288,270,275],
[267,0,259,274,282,261,279,260],
[285,291,0,279,269,285,287,266],
[266,276,271,0,299,288,299,275],
[262,268,281,251,0,265,263,267],
[262,289,265,262,285,0,286,267],
[280,271,263,251,287,264,0,252],
[275,290,284,275,283,283,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,263,281,262,259,266,302],
[260,0,247,273,250,267,272,262],
[287,303,0,282,253,276,274,287],
[269,277,268,0,258,284,282,278],
[288,300,297,292,0,283,273,294],
[291,283,274,266,267,0,278,284],
[284,278,276,268,277,272,0,297],
[248,288,263,272,256,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,291,276,265,267,276,279],
[276,0,290,286,259,293,305,279],
[259,260,0,251,256,262,263,252],
[274,264,299,0,292,275,291,275],
[285,291,294,258,0,270,270,276],
[283,257,288,275,280,0,282,294],
[274,245,287,259,280,268,0,267],
[271,271,298,275,274,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,274,246,279,268,251,274],
[268,0,278,267,282,266,271,321],
[276,272,0,261,263,281,279,304],
[304,283,289,0,284,284,265,313],
[271,268,287,266,0,269,282,300],
[282,284,269,266,281,0,259,280],
[299,279,271,285,268,291,0,281],
[276,229,246,237,250,270,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,226,258,253,249,257,236,233],
[324,0,286,289,261,284,269,246],
[292,264,0,298,272,305,265,261],
[297,261,252,0,262,294,254,252],
[301,289,278,288,0,309,273,273],
[293,266,245,256,241,0,275,253],
[314,281,285,296,277,275,0,287],
[317,304,289,298,277,297,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,253,278,289,275,270,280],
[284,0,272,273,279,274,278,272],
[297,278,0,286,280,274,281,276],
[272,277,264,0,274,268,283,264],
[261,271,270,276,0,263,274,288],
[275,276,276,282,287,0,293,273],
[280,272,269,267,276,257,0,266],
[270,278,274,286,262,277,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,315,282,263,278,303,279],
[272,0,272,251,278,271,279,263],
[235,278,0,255,258,252,282,262],
[268,299,295,0,253,264,298,270],
[287,272,292,297,0,276,313,286],
[272,279,298,286,274,0,318,263],
[247,271,268,252,237,232,0,252],
[271,287,288,280,264,287,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,267,272,264,282,276,290],
[261,0,267,262,263,266,274,276],
[283,283,0,278,271,275,283,286],
[278,288,272,0,260,289,279,281],
[286,287,279,290,0,270,289,293],
[268,284,275,261,280,0,277,284],
[274,276,267,271,261,273,0,269],
[260,274,264,269,257,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,235,261,333,301,233,224],
[253,0,233,335,312,228,271,238],
[315,317,0,288,281,230,274,255],
[289,215,262,0,287,233,278,241],
[217,238,269,263,0,207,217,177],
[249,322,320,317,343,0,289,296],
[317,279,276,272,333,261,0,239],
[326,312,295,309,373,254,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,285,287,263,288,242,290],
[285,0,278,288,296,285,271,277],
[265,272,0,279,279,259,263,264],
[263,262,271,0,261,273,234,240],
[287,254,271,289,0,258,237,267],
[262,265,291,277,292,0,276,284],
[308,279,287,316,313,274,0,279],
[260,273,286,310,283,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,255,223,248,233,255,276],
[300,0,315,293,303,285,273,334],
[295,235,0,257,321,258,299,301],
[327,257,293,0,310,289,318,313],
[302,247,229,240,0,248,273,309],
[317,265,292,261,302,0,278,322],
[295,277,251,232,277,272,0,283],
[274,216,249,237,241,228,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,236,279,341,296,284,305],
[238,0,253,152,241,314,294,294],
[314,297,0,192,329,259,313,418],
[271,398,358,0,342,376,402,318],
[209,309,221,208,0,278,263,245],
[254,236,291,174,272,0,276,277],
[266,256,237,148,287,274,0,270],
[245,256,132,232,305,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,285,261,262,289,279,279],
[237,0,263,245,255,267,242,256],
[265,287,0,257,252,255,225,268],
[289,305,293,0,286,275,278,266],
[288,295,298,264,0,265,254,279],
[261,283,295,275,285,0,277,277],
[271,308,325,272,296,273,0,297],
[271,294,282,284,271,273,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,282,292,280,292,267,295],
[280,0,278,272,278,283,271,282],
[268,272,0,271,267,286,277,278],
[258,278,279,0,276,290,275,272],
[270,272,283,274,0,293,278,288],
[258,267,264,260,257,0,278,267],
[283,279,273,275,272,272,0,274],
[255,268,272,278,262,283,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,274,270,267,263,254],
[289,0,284,282,285,276,278,274],
[290,266,0,277,294,290,280,276],
[276,268,273,0,276,274,250,275],
[280,265,256,274,0,272,259,260],
[283,274,260,276,278,0,267,271],
[287,272,270,300,291,283,0,277],
[296,276,274,275,290,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,296,280,277,276,267,271],
[272,0,290,281,280,282,284,268],
[254,260,0,268,256,258,278,263],
[270,269,282,0,274,264,276,279],
[273,270,294,276,0,259,269,268],
[274,268,292,286,291,0,295,271],
[283,266,272,274,281,255,0,267],
[279,282,287,271,282,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,363,311,305,339,313,299,238],
[187,0,246,210,236,239,209,170],
[239,304,0,273,255,276,259,241],
[245,340,277,0,268,286,248,246],
[211,314,295,282,0,309,274,243],
[237,311,274,264,241,0,241,251],
[251,341,291,302,276,309,0,312],
[312,380,309,304,307,299,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,164,162,278,266,247,282,232],
[386,0,258,337,306,307,297,263],
[388,292,0,274,275,290,350,387],
[272,213,276,0,296,288,327,224],
[284,244,275,254,0,257,353,358],
[303,243,260,262,293,0,323,310],
[268,253,200,223,197,227,0,281],
[318,287,163,326,192,240,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,262,272,277,273,264],
[269,0,278,270,264,276,275,264],
[270,272,0,279,274,270,271,278],
[288,280,271,0,268,288,275,292],
[278,286,276,282,0,263,282,278],
[273,274,280,262,287,0,295,294],
[277,275,279,275,268,255,0,267],
[286,286,272,258,272,256,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,350,430,412,329,291,372,274],
[200,0,296,330,221,315,309,259],
[120,254,0,265,168,290,313,236],
[138,220,285,0,253,284,233,183],
[221,329,382,297,0,322,400,345],
[259,235,260,266,228,0,200,213],
[178,241,237,317,150,350,0,189],
[276,291,314,367,205,337,361,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,264,289,284,286,266,271],
[280,0,280,286,295,289,292,269],
[286,270,0,285,277,289,277,282],
[261,264,265,0,270,275,276,268],
[266,255,273,280,0,273,260,271],
[264,261,261,275,277,0,274,258],
[284,258,273,274,290,276,0,275],
[279,281,268,282,279,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,277,303,268,293,293,267],
[260,0,271,299,275,295,268,264],
[273,279,0,295,272,283,293,306],
[247,251,255,0,240,254,264,269],
[282,275,278,310,0,267,263,272],
[257,255,267,296,283,0,277,279],
[257,282,257,286,287,273,0,269],
[283,286,244,281,278,271,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,269,251,295,286,287,308],
[301,0,305,251,240,297,313,306],
[281,245,0,255,261,278,283,295],
[299,299,295,0,271,272,293,335],
[255,310,289,279,0,275,290,322],
[264,253,272,278,275,0,294,307],
[263,237,267,257,260,256,0,273],
[242,244,255,215,228,243,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,324,278,254,308,239,282,290],
[226,0,269,243,247,223,273,261],
[272,281,0,220,298,309,324,309],
[296,307,330,0,293,260,311,315],
[242,303,252,257,0,280,285,276],
[311,327,241,290,270,0,273,312],
[268,277,226,239,265,277,0,261],
[260,289,241,235,274,238,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,292,278,297,290,266,302],
[280,0,297,272,255,285,264,275],
[258,253,0,269,248,264,254,279],
[272,278,281,0,276,258,279,318],
[253,295,302,274,0,264,292,314],
[260,265,286,292,286,0,262,291],
[284,286,296,271,258,288,0,305],
[248,275,271,232,236,259,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,314,289,283,286,297,293],
[276,0,295,276,265,264,281,276],
[236,255,0,266,252,262,259,250],
[261,274,284,0,278,262,278,262],
[267,285,298,272,0,282,280,286],
[264,286,288,288,268,0,295,289],
[253,269,291,272,270,255,0,265],
[257,274,300,288,264,261,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,249,262,274,269,291,273],
[298,0,282,281,274,297,314,279],
[301,268,0,284,283,301,303,282],
[288,269,266,0,277,293,299,301],
[276,276,267,273,0,288,288,269],
[281,253,249,257,262,0,284,277],
[259,236,247,251,262,266,0,246],
[277,271,268,249,281,273,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,271,302,299,308,290,318],
[242,0,297,258,258,274,251,302],
[279,253,0,281,283,276,257,306],
[248,292,269,0,310,238,270,302],
[251,292,267,240,0,245,245,284],
[242,276,274,312,305,0,291,316],
[260,299,293,280,305,259,0,323],
[232,248,244,248,266,234,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,262,295,285,283,284,268],
[259,0,256,273,277,254,277,257],
[288,294,0,261,271,291,275,277],
[255,277,289,0,264,259,264,259],
[265,273,279,286,0,258,267,266],
[267,296,259,291,292,0,285,258],
[266,273,275,286,283,265,0,267],
[282,293,273,291,284,292,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,309,343,309,285,273,292,300],
[241,0,309,261,244,280,261,287],
[207,241,0,238,226,263,278,248],
[241,289,312,0,265,282,277,287],
[265,306,324,285,0,293,302,291],
[277,270,287,268,257,0,303,292],
[258,289,272,273,248,247,0,248],
[250,263,302,263,259,258,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,300,281,256,227,240,311],
[235,0,291,289,297,295,281,338],
[250,259,0,343,213,238,229,314],
[269,261,207,0,253,211,220,296],
[294,253,337,297,0,281,277,328],
[323,255,312,339,269,0,276,370],
[310,269,321,330,273,274,0,363],
[239,212,236,254,222,180,187,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,276,279,270,287,277,287],
[257,0,270,259,274,282,275,272],
[274,280,0,265,265,288,280,280],
[271,291,285,0,277,281,287,270],
[280,276,285,273,0,283,295,286],
[263,268,262,269,267,0,278,269],
[273,275,270,263,255,272,0,269],
[263,278,270,280,264,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,251,254,232,210,218,301],
[325,0,327,339,273,295,262,358],
[299,223,0,317,266,237,192,320],
[296,211,233,0,248,231,202,303],
[318,277,284,302,0,272,246,337],
[340,255,313,319,278,0,275,345],
[332,288,358,348,304,275,0,355],
[249,192,230,247,213,205,195,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,256,272,256,300,267,286],
[301,0,319,276,302,254,263,309],
[294,231,0,268,281,260,242,287],
[278,274,282,0,290,285,275,300],
[294,248,269,260,0,255,240,306],
[250,296,290,265,295,0,277,331],
[283,287,308,275,310,273,0,319],
[264,241,263,250,244,219,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,250,266,241,264,243],
[267,0,276,272,261,262,271,268],
[278,274,0,260,277,267,264,245],
[300,278,290,0,268,273,286,254],
[284,289,273,282,0,252,284,279],
[309,288,283,277,298,0,293,258],
[286,279,286,264,266,257,0,264],
[307,282,305,296,271,292,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,278,270,269,276,256,257],
[292,0,273,280,279,281,285,263],
[272,277,0,268,278,263,283,262],
[280,270,282,0,264,283,273,268],
[281,271,272,286,0,259,256,283],
[274,269,287,267,291,0,279,274],
[294,265,267,277,294,271,0,282],
[293,287,288,282,267,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,300,257,259,239,218,261],
[310,0,298,238,268,268,228,306],
[250,252,0,257,248,194,226,215],
[293,312,293,0,279,307,265,292],
[291,282,302,271,0,280,288,268],
[311,282,356,243,270,0,268,296],
[332,322,324,285,262,282,0,312],
[289,244,335,258,282,254,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,278,277,276,278,287],
[272,0,267,258,273,274,272,275],
[275,283,0,273,273,287,274,273],
[272,292,277,0,283,261,274,292],
[273,277,277,267,0,284,262,273],
[274,276,263,289,266,0,272,273],
[272,278,276,276,288,278,0,276],
[263,275,277,258,277,277,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,276,293,273,276,292],
[275,0,280,282,286,275,287,294],
[266,270,0,280,276,286,301,283],
[274,268,270,0,282,271,292,295],
[257,264,274,268,0,267,274,288],
[277,275,264,279,283,0,287,293],
[274,263,249,258,276,263,0,290],
[258,256,267,255,262,257,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,291,264,291,275,278],
[263,0,282,291,300,297,275,300],
[264,268,0,285,297,273,298,290],
[259,259,265,0,278,269,267,274],
[286,250,253,272,0,289,266,250],
[259,253,277,281,261,0,306,290],
[275,275,252,283,284,244,0,290],
[272,250,260,276,300,260,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,348,316,232,228,266,153],
[319,0,362,467,271,252,411,251],
[202,188,0,227,363,251,198,207],
[234,83,323,0,156,205,183,159],
[318,279,187,394,0,193,241,275],
[322,298,299,345,357,0,272,254],
[284,139,352,367,309,278,0,164],
[397,299,343,391,275,296,386,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,311,285,283,252,288,282],
[279,0,276,296,301,277,287,259],
[239,274,0,277,254,248,246,245],
[265,254,273,0,275,268,266,242],
[267,249,296,275,0,265,269,278],
[298,273,302,282,285,0,263,272],
[262,263,304,284,281,287,0,254],
[268,291,305,308,272,278,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,246,254,251,262,270,253],
[277,0,253,247,250,265,267,245],
[304,297,0,276,287,272,273,281],
[296,303,274,0,283,285,283,273],
[299,300,263,267,0,281,284,268],
[288,285,278,265,269,0,281,259],
[280,283,277,267,266,269,0,260],
[297,305,269,277,282,291,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,290,274,288,290,285,282],
[260,0,269,262,288,263,269,250],
[260,281,0,252,260,279,289,270],
[276,288,298,0,294,301,278,271],
[262,262,290,256,0,288,290,273],
[260,287,271,249,262,0,271,257],
[265,281,261,272,260,279,0,270],
[268,300,280,279,277,293,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,255,312,284,273,257],
[273,0,266,276,307,264,295,257],
[261,284,0,295,338,307,306,273],
[295,274,255,0,320,311,266,303],
[238,243,212,230,0,262,230,245],
[266,286,243,239,288,0,258,259],
[277,255,244,284,320,292,0,279],
[293,293,277,247,305,291,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,277,253,255,279,261,256],
[273,0,265,274,257,276,272,272],
[273,285,0,270,283,286,272,267],
[297,276,280,0,277,289,276,273],
[295,293,267,273,0,287,266,280],
[271,274,264,261,263,0,270,256],
[289,278,278,274,284,280,0,263],
[294,278,283,277,270,294,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,311,264,317,307,283,261],
[276,0,294,289,304,346,255,300],
[239,256,0,221,313,284,240,239],
[286,261,329,0,307,313,266,269],
[233,246,237,243,0,240,234,254],
[243,204,266,237,310,0,245,268],
[267,295,310,284,316,305,0,261],
[289,250,311,281,296,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,308,296,245,268,254],
[289,0,281,280,271,280,289,283],
[290,269,0,258,271,249,272,254],
[242,270,292,0,274,262,295,282],
[254,279,279,276,0,279,301,257],
[305,270,301,288,271,0,266,223],
[282,261,278,255,249,284,0,272],
[296,267,296,268,293,327,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,284,255,265,271,282,255],
[277,0,281,243,276,278,279,282],
[266,269,0,246,232,245,251,246],
[295,307,304,0,297,275,313,302],
[285,274,318,253,0,269,303,290],
[279,272,305,275,281,0,266,251],
[268,271,299,237,247,284,0,274],
[295,268,304,248,260,299,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,233,275,278,307,311,308],
[243,0,295,275,301,256,287,324],
[317,255,0,296,282,277,316,352],
[275,275,254,0,282,295,283,303],
[272,249,268,268,0,285,293,325],
[243,294,273,255,265,0,311,267],
[239,263,234,267,257,239,0,281],
[242,226,198,247,225,283,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,258,273,272,255,275,284],
[272,0,245,262,272,261,277,273],
[292,305,0,289,280,275,291,280],
[277,288,261,0,278,258,292,289],
[278,278,270,272,0,282,286,284],
[295,289,275,292,268,0,285,298],
[275,273,259,258,264,265,0,270],
[266,277,270,261,266,252,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,312,308,273,270,278,314],
[267,0,287,300,268,279,265,263],
[238,263,0,280,276,262,255,249],
[242,250,270,0,297,238,276,286],
[277,282,274,253,0,256,282,291],
[280,271,288,312,294,0,273,271],
[272,285,295,274,268,277,0,262],
[236,287,301,264,259,279,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,278,264,282,290,299,284],
[278,0,271,285,299,278,308,292],
[272,279,0,277,292,293,297,301],
[286,265,273,0,285,289,307,290],
[268,251,258,265,0,283,288,265],
[260,272,257,261,267,0,286,268],
[251,242,253,243,262,264,0,283],
[266,258,249,260,285,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,279,280,259,235,267,263],
[287,0,287,285,256,285,288,273],
[271,263,0,277,271,268,278,259],
[270,265,273,0,264,254,273,244],
[291,294,279,286,0,263,281,257],
[315,265,282,296,287,0,309,282],
[283,262,272,277,269,241,0,269],
[287,277,291,306,293,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,400,304,304,166,362,364],
[246,0,514,418,326,280,418,456],
[150,36,0,222,58,92,288,456],
[246,132,328,0,292,188,384,456],
[246,224,492,258,0,222,384,456],
[384,270,458,362,328,0,328,456],
[188,132,262,166,166,222,0,318],
[186,94,94,94,94,94,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,289,287,257,296,297,282],
[243,0,261,243,271,287,274,263],
[261,289,0,263,261,290,272,274],
[263,307,287,0,314,288,298,275],
[293,279,289,236,0,255,280,285],
[254,263,260,262,295,0,289,281],
[253,276,278,252,270,261,0,293],
[268,287,276,275,265,269,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,255,244,247,251,283],
[286,0,289,276,281,279,267,281],
[266,261,0,271,263,263,264,268],
[295,274,279,0,295,267,297,300],
[306,269,287,255,0,261,279,289],
[303,271,287,283,289,0,279,284],
[299,283,286,253,271,271,0,282],
[267,269,282,250,261,266,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,289,275,286,305,262,278],
[269,0,286,261,266,270,238,246],
[261,264,0,254,235,270,280,268],
[275,289,296,0,286,297,236,258],
[264,284,315,264,0,279,255,276],
[245,280,280,253,271,0,246,248],
[288,312,270,314,295,304,0,317],
[272,304,282,292,274,302,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,315,305,286,285,276],
[288,0,263,317,280,293,278,271],
[282,287,0,306,263,295,256,276],
[235,233,244,0,270,234,234,239],
[245,270,287,280,0,254,261,271],
[264,257,255,316,296,0,273,278],
[265,272,294,316,289,277,0,238],
[274,279,274,311,279,272,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,228,255,252,262,259,260],
[289,0,258,281,271,280,275,265],
[322,292,0,290,274,280,289,285],
[295,269,260,0,282,274,274,271],
[298,279,276,268,0,277,279,262],
[288,270,270,276,273,0,258,267],
[291,275,261,276,271,292,0,261],
[290,285,265,279,288,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,288,273,274,275,225,311],
[236,0,288,236,239,263,236,265],
[262,262,0,248,251,259,229,265],
[277,314,302,0,282,257,285,299],
[276,311,299,268,0,261,256,306],
[275,287,291,293,289,0,262,297],
[325,314,321,265,294,288,0,298],
[239,285,285,251,244,253,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,253,266,271,275,291,268],
[252,0,277,270,271,272,282,262],
[297,273,0,280,276,306,309,295],
[284,280,270,0,280,304,284,298],
[279,279,274,270,0,296,283,272],
[275,278,244,246,254,0,254,274],
[259,268,241,266,267,296,0,274],
[282,288,255,252,278,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,219,355,250,291,295,275,240],
[331,0,355,293,282,272,278,286],
[195,195,0,229,228,267,225,188],
[300,257,321,0,285,311,250,253],
[259,268,322,265,0,291,265,227],
[255,278,283,239,259,0,235,212],
[275,272,325,300,285,315,0,207],
[310,264,362,297,323,338,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,284,272,272,291,265],
[258,0,288,283,271,264,287,263],
[267,262,0,279,275,290,275,250],
[266,267,271,0,256,259,247,272],
[278,279,275,294,0,267,268,264],
[278,286,260,291,283,0,263,276],
[259,263,275,303,282,287,0,258],
[285,287,300,278,286,274,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,252,265,242,251,243,261],
[301,0,272,290,282,289,292,301],
[298,278,0,291,275,302,289,294],
[285,260,259,0,258,266,272,269],
[308,268,275,292,0,301,270,295],
[299,261,248,284,249,0,260,285],
[307,258,261,278,280,290,0,272],
[289,249,256,281,255,265,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,260,267,283,276,283],
[274,0,282,280,271,293,284,276],
[264,268,0,261,270,279,255,286],
[290,270,289,0,294,289,269,276],
[283,279,280,256,0,295,261,271],
[267,257,271,261,255,0,260,260],
[274,266,295,281,289,290,0,275],
[267,274,264,274,279,290,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,282,299,272,303,271,254],
[285,0,272,257,278,266,271,282],
[268,278,0,249,246,284,261,273],
[251,293,301,0,292,310,258,286],
[278,272,304,258,0,310,284,269],
[247,284,266,240,240,0,254,276],
[279,279,289,292,266,296,0,275],
[296,268,277,264,281,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,354,321,299,339,337,268,165],
[196,0,302,326,261,377,293,270],
[229,248,0,313,273,303,233,184],
[251,224,237,0,276,251,269,183],
[211,289,277,274,0,249,316,189],
[213,173,247,299,301,0,202,284],
[282,257,317,281,234,348,0,263],
[385,280,366,367,361,266,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,267,254,268,247,256,253],
[296,0,292,262,278,282,293,271],
[283,258,0,280,287,244,253,263],
[296,288,270,0,322,272,264,259],
[282,272,263,228,0,227,271,255],
[303,268,306,278,323,0,258,297],
[294,257,297,286,279,292,0,276],
[297,279,287,291,295,253,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,269,284,240,263,264,267],
[330,0,278,247,278,240,299,311],
[281,272,0,301,260,291,303,278],
[266,303,249,0,296,230,268,262],
[310,272,290,254,0,273,286,276],
[287,310,259,320,277,0,302,297],
[286,251,247,282,264,248,0,296],
[283,239,272,288,274,253,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,298,322,316,261,301,253],
[261,0,285,335,166,225,244,267],
[252,265,0,210,180,228,209,135],
[228,215,340,0,187,173,181,178],
[234,384,370,363,0,338,343,283],
[289,325,322,377,212,0,291,284],
[249,306,341,369,207,259,0,217],
[297,283,415,372,267,266,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,268,272,279,291,291],
[274,0,279,285,289,269,290,274],
[278,271,0,278,281,292,284,287],
[282,265,272,0,270,274,295,279],
[278,261,269,280,0,275,280,278],
[271,281,258,276,275,0,283,271],
[259,260,266,255,270,267,0,263],
[259,276,263,271,272,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,280,276,272,270,267],
[271,0,269,281,268,279,272,272],
[285,281,0,278,276,284,270,286],
[270,269,272,0,261,279,274,258],
[274,282,274,289,0,265,276,285],
[278,271,266,271,285,0,275,290],
[280,278,280,276,274,275,0,276],
[283,278,264,292,265,260,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,311,286,276,274,290,284],
[273,0,301,299,273,267,275,306],
[239,249,0,263,241,249,262,266],
[264,251,287,0,251,259,250,268],
[274,277,309,299,0,280,279,283],
[276,283,301,291,270,0,276,281],
[260,275,288,300,271,274,0,273],
[266,244,284,282,267,269,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,182,253,196,252,260,237,211],
[368,0,293,277,281,258,347,321],
[297,257,0,300,254,344,327,281],
[354,273,250,0,244,342,383,272],
[298,269,296,306,0,291,383,284],
[290,292,206,208,259,0,243,241],
[313,203,223,167,167,307,0,301],
[339,229,269,278,266,309,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,276,334,297,316,287,327],
[319,0,270,353,349,292,324,345],
[274,280,0,336,302,273,250,302],
[216,197,214,0,241,256,212,279],
[253,201,248,309,0,295,266,269],
[234,258,277,294,255,0,231,289],
[263,226,300,338,284,319,0,299],
[223,205,248,271,281,261,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,262,249,264,281,243,281],
[289,0,261,270,289,276,284,292],
[288,289,0,299,286,295,270,308],
[301,280,251,0,285,291,276,284],
[286,261,264,265,0,291,278,285],
[269,274,255,259,259,0,258,292],
[307,266,280,274,272,292,0,295],
[269,258,242,266,265,258,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,154,397,0,397,212,212],
[184,0,184,31,184,184,184,396],
[396,366,0,397,184,550,396,212],
[153,519,153,0,153,519,365,365],
[550,366,366,397,0,397,396,212],
[153,366,0,31,153,0,153,212],
[338,366,154,185,154,397,0,366],
[338,154,338,185,338,338,184,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,275,266,279,289,280],
[276,0,253,285,273,303,250,296],
[284,297,0,270,270,290,259,257],
[275,265,280,0,268,293,292,265],
[284,277,280,282,0,292,282,265],
[271,247,260,257,258,0,249,263],
[261,300,291,258,268,301,0,274],
[270,254,293,285,285,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,284,299,284,286,269,273],
[285,0,280,281,268,272,271,290],
[266,270,0,274,291,264,282,282],
[251,269,276,0,283,285,260,299],
[266,282,259,267,0,284,256,298],
[264,278,286,265,266,0,257,262],
[281,279,268,290,294,293,0,294],
[277,260,268,251,252,288,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,248,260,237,266,257,268],
[276,0,246,234,239,256,217,247],
[302,304,0,275,270,288,261,289],
[290,316,275,0,277,268,254,277],
[313,311,280,273,0,294,285,289],
[284,294,262,282,256,0,268,259],
[293,333,289,296,265,282,0,295],
[282,303,261,273,261,291,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,277,274,301,268,263,259],
[274,0,258,262,277,269,261,250],
[273,292,0,277,301,279,291,257],
[276,288,273,0,269,263,270,245],
[249,273,249,281,0,235,245,242],
[282,281,271,287,315,0,291,276],
[287,289,259,280,305,259,0,242],
[291,300,293,305,308,274,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,269,281,278,261,272],
[275,0,280,270,284,279,258,276],
[286,270,0,287,286,288,288,290],
[281,280,263,0,271,286,278,277],
[269,266,264,279,0,264,264,278],
[272,271,262,264,286,0,264,279],
[289,292,262,272,286,286,0,281],
[278,274,260,273,272,271,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,341,352,344,244,286,330,338],
[209,0,262,212,243,291,215,295],
[198,288,0,268,274,217,315,263],
[206,338,282,0,272,298,281,340],
[306,307,276,278,0,304,248,281],
[264,259,333,252,246,0,280,308],
[220,335,235,269,302,270,0,273],
[212,255,287,210,269,242,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,280,293,285,220,265,301],
[290,0,267,330,257,291,286,317],
[270,283,0,327,291,256,238,290],
[257,220,223,0,243,196,182,270],
[265,293,259,307,0,258,250,296],
[330,259,294,354,292,0,295,345],
[285,264,312,368,300,255,0,306],
[249,233,260,280,254,205,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,289,284,276,291,269,295],
[264,0,265,262,252,283,256,258],
[261,285,0,281,272,281,267,269],
[266,288,269,0,251,278,276,255],
[274,298,278,299,0,298,273,277],
[259,267,269,272,252,0,265,266],
[281,294,283,274,277,285,0,278],
[255,292,281,295,273,284,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,241,275,280,252,266,282],
[301,0,255,281,285,283,282,280],
[309,295,0,295,316,301,274,301],
[275,269,255,0,285,256,254,263],
[270,265,234,265,0,275,259,262],
[298,267,249,294,275,0,255,273],
[284,268,276,296,291,295,0,275],
[268,270,249,287,288,277,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,282,303,291,300,256,258],
[274,0,273,300,288,302,253,263],
[268,277,0,282,256,292,277,251],
[247,250,268,0,250,265,257,241],
[259,262,294,300,0,291,246,284],
[250,248,258,285,259,0,237,242],
[294,297,273,293,304,313,0,290],
[292,287,299,309,266,308,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,253,299,305,275,279,312],
[290,0,309,309,299,253,284,274],
[297,241,0,312,288,336,304,300],
[251,241,238,0,285,269,274,267],
[245,251,262,265,0,238,281,275],
[275,297,214,281,312,0,272,268],
[271,266,246,276,269,278,0,240],
[238,276,250,283,275,282,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,240,259,254,240,261,260],
[269,0,251,264,273,263,273,262],
[310,299,0,289,289,283,304,275],
[291,286,261,0,274,250,296,281],
[296,277,261,276,0,278,311,302],
[310,287,267,300,272,0,285,264],
[289,277,246,254,239,265,0,252],
[290,288,275,269,248,286,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,272,287,284,266,259,266],
[268,0,268,270,273,268,255,278],
[278,282,0,286,272,284,267,283],
[263,280,264,0,268,271,264,262],
[266,277,278,282,0,271,275,268],
[284,282,266,279,279,0,271,279],
[291,295,283,286,275,279,0,290],
[284,272,267,288,282,271,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,295,263,284,275,280,270],
[293,0,323,289,293,259,261,284],
[255,227,0,249,267,252,249,272],
[287,261,301,0,288,258,287,283],
[266,257,283,262,0,264,252,270],
[275,291,298,292,286,0,296,284],
[270,289,301,263,298,254,0,264],
[280,266,278,267,280,266,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,275,222,248,270,306,263],
[293,0,315,278,290,273,295,279],
[275,235,0,282,284,285,284,275],
[328,272,268,0,255,279,282,244],
[302,260,266,295,0,303,282,285],
[280,277,265,271,247,0,292,287],
[244,255,266,268,268,258,0,266],
[287,271,275,306,265,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,232,252,287,268,268,253],
[255,0,227,263,204,231,263,203],
[318,323,0,305,265,274,292,263],
[298,287,245,0,216,234,268,234],
[263,346,285,334,0,276,295,279],
[282,319,276,316,274,0,363,245],
[282,287,258,282,255,187,0,249],
[297,347,287,316,271,305,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,257,273,301,238,243,307],
[283,0,341,275,280,307,302,317],
[293,209,0,285,194,255,192,270],
[277,275,265,0,246,291,223,270],
[249,270,356,304,0,300,290,300],
[312,243,295,259,250,0,272,310],
[307,248,358,327,260,278,0,297],
[243,233,280,280,250,240,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,324,319,232,331,282,326],
[296,0,295,257,261,245,227,310],
[226,255,0,267,249,260,230,310],
[231,293,283,0,207,260,273,260],
[318,289,301,343,0,223,278,337],
[219,305,290,290,327,0,252,258],
[268,323,320,277,272,298,0,317],
[224,240,240,290,213,292,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,278,305,247,291,244],
[258,0,316,266,281,276,311,293],
[255,234,0,259,266,240,260,251],
[272,284,291,0,296,274,274,255],
[245,269,284,254,0,285,286,214],
[303,274,310,276,265,0,302,261],
[259,239,290,276,264,248,0,256],
[306,257,299,295,336,289,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,263,260,269,277,272,280],
[278,0,277,274,271,295,282,283],
[287,273,0,281,263,282,277,278],
[290,276,269,0,280,279,273,284],
[281,279,287,270,0,275,285,282],
[273,255,268,271,275,0,275,270],
[278,268,273,277,265,275,0,283],
[270,267,272,266,268,280,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,288,271,272,276,266,292],
[299,0,299,318,319,268,328,269],
[262,251,0,284,308,253,310,240],
[279,232,266,0,285,212,261,254],
[278,231,242,265,0,221,240,236],
[274,282,297,338,329,0,298,313],
[284,222,240,289,310,252,0,259],
[258,281,310,296,314,237,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,290,266,267,259,265,257],
[272,0,288,269,278,267,253,255],
[260,262,0,282,250,254,257,261],
[284,281,268,0,273,260,272,262],
[283,272,300,277,0,276,280,267],
[291,283,296,290,274,0,305,284],
[285,297,293,278,270,245,0,272],
[293,295,289,288,283,266,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,281,277,261,289,284],
[263,0,303,275,241,236,290,242],
[258,247,0,278,240,250,244,240],
[269,275,272,0,231,238,267,260],
[273,309,310,319,0,297,289,272],
[289,314,300,312,253,0,300,284],
[261,260,306,283,261,250,0,245],
[266,308,310,290,278,266,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,267,267,270,266,274,265],
[289,0,298,288,287,274,289,299],
[283,252,0,276,280,269,266,289],
[283,262,274,0,274,261,283,292],
[280,263,270,276,0,276,277,277],
[284,276,281,289,274,0,295,291],
[276,261,284,267,273,255,0,279],
[285,251,261,258,273,259,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,268,270,277,284,282],
[284,0,285,291,268,272,300,289],
[267,265,0,277,272,260,276,284],
[282,259,273,0,272,257,287,280],
[280,282,278,278,0,264,286,287],
[273,278,290,293,286,0,292,295],
[266,250,274,263,264,258,0,278],
[268,261,266,270,263,255,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,246,247,251,244,248,260],
[304,0,279,273,282,274,289,281],
[304,271,0,276,281,263,278,271],
[303,277,274,0,275,280,273,267],
[299,268,269,275,0,266,288,296],
[306,276,287,270,284,0,297,288],
[302,261,272,277,262,253,0,275],
[290,269,279,283,254,262,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,284,278,286,272,288,290],
[265,0,272,277,296,282,298,282],
[266,278,0,263,267,279,289,282],
[272,273,287,0,271,277,287,270],
[264,254,283,279,0,277,282,280],
[278,268,271,273,273,0,290,291],
[262,252,261,263,268,260,0,268],
[260,268,268,280,270,259,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,225,256,235,235,221,230,219],
[325,0,293,242,307,280,286,276],
[294,257,0,253,276,243,228,256],
[315,308,297,0,304,270,274,304],
[315,243,274,246,0,249,253,254],
[329,270,307,280,301,0,292,277],
[320,264,322,276,297,258,0,276],
[331,274,294,246,296,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,342,323,287,310,301,268],
[234,0,290,259,245,226,262,190],
[208,260,0,203,310,267,263,162],
[227,291,347,0,289,268,294,274],
[263,305,240,261,0,256,289,194],
[240,324,283,282,294,0,258,320],
[249,288,287,256,261,292,0,226],
[282,360,388,276,356,230,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,264,317,295,221,259,237],
[288,0,223,288,316,319,286,275],
[286,327,0,292,357,283,344,261],
[233,262,258,0,315,305,259,265],
[255,234,193,235,0,210,185,184],
[329,231,267,245,340,0,276,191],
[291,264,206,291,365,274,0,171],
[313,275,289,285,366,359,379,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,256,256,305,243,262,270],
[289,0,307,275,319,271,293,298],
[294,243,0,279,259,245,254,270],
[294,275,271,0,296,276,273,263],
[245,231,291,254,0,209,267,265],
[307,279,305,274,341,0,285,270],
[288,257,296,277,283,265,0,273],
[280,252,280,287,285,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,235,277,270,271,300,248],
[293,0,272,288,278,285,279,282],
[315,278,0,305,287,292,269,266],
[273,262,245,0,278,262,269,250],
[280,272,263,272,0,253,261,254],
[279,265,258,288,297,0,285,272],
[250,271,281,281,289,265,0,260],
[302,268,284,300,296,278,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,292,277,281,270,277,298],
[263,0,247,255,288,260,282,273],
[258,303,0,273,279,265,287,294],
[273,295,277,0,279,281,298,297],
[269,262,271,271,0,267,270,280],
[280,290,285,269,283,0,287,298],
[273,268,263,252,280,263,0,280],
[252,277,256,253,270,252,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1001, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,270,289,278,267,267],
[279,0,287,268,309,265,264,271],
[273,263,0,277,286,272,249,284],
[280,282,273,0,312,274,267,282],
[261,241,264,238,0,247,249,258],
[272,285,278,276,303,0,277,278],
[283,286,301,283,301,273,0,299],
[283,279,266,268,292,272,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1002, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,279,270,264,282,271],
[281,0,272,291,269,276,270,276],
[264,278,0,278,276,260,286,290],
[271,259,272,0,273,250,273,266],
[280,281,274,277,0,255,295,268],
[286,274,290,300,295,0,293,303],
[268,280,264,277,255,257,0,273],
[279,274,260,284,282,247,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1003, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,262,276,235,240,279,265],
[310,0,284,318,291,268,335,300],
[288,266,0,294,257,285,257,279],
[274,232,256,0,243,204,258,289],
[315,259,293,307,0,251,276,297],
[310,282,265,346,299,0,336,288],
[271,215,293,292,274,214,0,249],
[285,250,271,261,253,262,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1004, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,280,288,292,282,267,265],
[248,0,245,284,244,246,265,248],
[270,305,0,292,277,309,267,288],
[262,266,258,0,234,272,265,245],
[258,306,273,316,0,267,297,299],
[268,304,241,278,283,0,271,291],
[283,285,283,285,253,279,0,266],
[285,302,262,305,251,259,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1005, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,290,290,268,253,263,270],
[295,0,329,295,295,296,294,273],
[260,221,0,272,258,237,262,270],
[260,255,278,0,258,256,265,258],
[282,255,292,292,0,259,293,293],
[297,254,313,294,291,0,305,272],
[287,256,288,285,257,245,0,257],
[280,277,280,292,257,278,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1006, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,251,278,247,263,255,284],
[292,0,270,281,269,276,264,287],
[299,280,0,271,273,253,283,305],
[272,269,279,0,271,275,279,279],
[303,281,277,279,0,271,265,287],
[287,274,297,275,279,0,277,294],
[295,286,267,271,285,273,0,281],
[266,263,245,271,263,256,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1007, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,266,288,270,290,279,267],
[291,0,291,314,263,304,295,324],
[284,259,0,280,299,287,284,333],
[262,236,270,0,252,279,255,281],
[280,287,251,298,0,290,273,294],
[260,246,263,271,260,0,259,304],
[271,255,266,295,277,291,0,294],
[283,226,217,269,256,246,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1008, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,268,242,261,263,259,256],
[276,0,278,261,264,258,276,280],
[282,272,0,280,275,274,277,288],
[308,289,270,0,281,275,292,299],
[289,286,275,269,0,274,304,285],
[287,292,276,275,276,0,290,297],
[291,274,273,258,246,260,0,277],
[294,270,262,251,265,253,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1009, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,286,279,256,282,272,281],
[285,0,296,275,254,276,289,298],
[264,254,0,262,276,267,270,285],
[271,275,288,0,273,289,288,274],
[294,296,274,277,0,292,283,294],
[268,274,283,261,258,0,268,298],
[278,261,280,262,267,282,0,278],
[269,252,265,276,256,252,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1010, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,273,282,257,280,268,279],
[283,0,286,282,278,284,267,308],
[277,264,0,270,267,289,274,301],
[268,268,280,0,281,287,273,292],
[293,272,283,269,0,280,275,304],
[270,266,261,263,270,0,259,292],
[282,283,276,277,275,291,0,292],
[271,242,249,258,246,258,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1011, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,270,251,235,265,235,244],
[289,0,322,290,292,256,267,296],
[280,228,0,250,265,236,213,263],
[299,260,300,0,297,276,289,279],
[315,258,285,253,0,264,273,260],
[285,294,314,274,286,0,259,305],
[315,283,337,261,277,291,0,291],
[306,254,287,271,290,245,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1012, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,299,290,289,276,275,282],
[266,0,292,299,283,273,273,277],
[251,258,0,272,265,262,269,276],
[260,251,278,0,267,268,255,277],
[261,267,285,283,0,254,259,283],
[274,277,288,282,296,0,282,276],
[275,277,281,295,291,268,0,269],
[268,273,274,273,267,274,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1013, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,203,222,289,270,282,198],
[292,0,264,298,320,297,328,248],
[347,286,0,306,338,344,351,275],
[328,252,244,0,291,253,313,263],
[261,230,212,259,0,283,277,247],
[280,253,206,297,267,0,258,236],
[268,222,199,237,273,292,0,232],
[352,302,275,287,303,314,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1014, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,273,273,271,301,288,257],
[285,0,271,278,260,278,277,284],
[277,279,0,285,269,291,296,276],
[277,272,265,0,278,288,291,282],
[279,290,281,272,0,283,289,291],
[249,272,259,262,267,0,269,259],
[262,273,254,259,261,281,0,275],
[293,266,274,268,259,291,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1015, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,270,289,281,281,285],
[280,0,276,273,284,295,285,297],
[284,274,0,283,298,295,287,307],
[280,277,267,0,283,317,286,286],
[261,266,252,267,0,287,289,303],
[269,255,255,233,263,0,266,263],
[269,265,263,264,261,284,0,272],
[265,253,243,264,247,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1016, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,286,274,277,299,287,266],
[278,0,280,287,274,284,272,261],
[264,270,0,270,263,276,259,279],
[276,263,280,0,276,283,267,268],
[273,276,287,274,0,279,268,263],
[251,266,274,267,271,0,283,241],
[263,278,291,283,282,267,0,265],
[284,289,271,282,287,309,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1017, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,274,295,266,304,308],
[275,0,263,279,289,276,289,294],
[275,287,0,276,293,266,289,290],
[276,271,274,0,284,277,286,289],
[255,261,257,266,0,255,257,290],
[284,274,284,273,295,0,288,284],
[246,261,261,264,293,262,0,279],
[242,256,260,261,260,266,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1018, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,275,296,278,303,280,305],
[276,0,285,278,305,285,269,291],
[275,265,0,304,300,300,271,280],
[254,272,246,0,286,280,280,262],
[272,245,250,264,0,290,257,269],
[247,265,250,270,260,0,267,255],
[270,281,279,270,293,283,0,273],
[245,259,270,288,281,295,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1019, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,257,270,283,279,263,283],
[283,0,307,250,250,318,273,295],
[293,243,0,285,249,269,307,275],
[280,300,265,0,278,303,281,284],
[267,300,301,272,0,326,329,290],
[271,232,281,247,224,0,283,261],
[287,277,243,269,221,267,0,275],
[267,255,275,266,260,289,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1020, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,319,258,302,263,280,235],
[263,0,280,239,318,257,276,223],
[231,270,0,262,269,253,275,267],
[292,311,288,0,326,243,300,279],
[248,232,281,224,0,277,242,238],
[287,293,297,307,273,0,306,222],
[270,274,275,250,308,244,0,266],
[315,327,283,271,312,328,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1021, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,282,279,296,271,252,283],
[266,0,263,278,292,275,271,287],
[268,287,0,290,275,289,270,260],
[271,272,260,0,286,257,264,272],
[254,258,275,264,0,260,247,274],
[279,275,261,293,290,0,294,276],
[298,279,280,286,303,256,0,273],
[267,263,290,278,276,274,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1022, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,260,277,273,281,234,260],
[316,0,300,339,317,281,275,289],
[290,250,0,294,307,281,283,244],
[273,211,256,0,266,265,223,227],
[277,233,243,284,0,283,224,263],
[269,269,269,285,267,0,225,264],
[316,275,267,327,326,325,0,264],
[290,261,306,323,287,286,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1023, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,275,261,265,268,256,265],
[275,0,303,285,290,282,296,299],
[275,247,0,267,263,261,247,276],
[289,265,283,0,275,295,269,293],
[285,260,287,275,0,296,268,265],
[282,268,289,255,254,0,250,273],
[294,254,303,281,282,300,0,277],
[285,251,274,257,285,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1024, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,296,318,237,254,273,278],
[297,0,331,344,314,215,247,245],
[254,219,0,274,234,203,218,247],
[232,206,276,0,219,234,205,242],
[313,236,316,331,0,267,273,322],
[296,335,347,316,283,0,256,276],
[277,303,332,345,277,294,0,255],
[272,305,303,308,228,274,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1025, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,310,325,301,284,272,300],
[271,0,305,310,324,281,290,294],
[240,245,0,286,315,270,248,290],
[225,240,264,0,288,247,253,248],
[249,226,235,262,0,242,227,258],
[266,269,280,303,308,0,287,284],
[278,260,302,297,323,263,0,295],
[250,256,260,302,292,266,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1026, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,314,302,239,297,340,308],
[251,0,267,276,221,277,301,266],
[236,283,0,259,240,305,301,265],
[248,274,291,0,275,290,311,303],
[311,329,310,275,0,304,303,285],
[253,273,245,260,246,0,253,267],
[210,249,249,239,247,297,0,253],
[242,284,285,247,265,283,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1027, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,267,278,271,292,250,292],
[263,0,270,272,257,270,260,266],
[283,280,0,290,284,286,251,283],
[272,278,260,0,289,286,283,279],
[279,293,266,261,0,276,260,276],
[258,280,264,264,274,0,259,281],
[300,290,299,267,290,291,0,291],
[258,284,267,271,274,269,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1028, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,293,290,273,269,290,277],
[267,0,258,258,279,274,273,267],
[257,292,0,286,284,256,264,273],
[260,292,264,0,284,249,281,267],
[277,271,266,266,0,262,267,262],
[281,276,294,301,288,0,292,275],
[260,277,286,269,283,258,0,268],
[273,283,277,283,288,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1029, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,302,246,299,260,266,277],
[274,0,332,272,280,280,266,304],
[248,218,0,245,255,233,244,252],
[304,278,305,0,290,293,270,303],
[251,270,295,260,0,258,248,285],
[290,270,317,257,292,0,288,285],
[284,284,306,280,302,262,0,315],
[273,246,298,247,265,265,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1030, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,265,283,266,287,295,276],
[260,0,275,263,252,291,286,260],
[285,275,0,243,273,274,280,294],
[267,287,307,0,264,297,277,296],
[284,298,277,286,0,290,274,282],
[263,259,276,253,260,0,290,265],
[255,264,270,273,276,260,0,284],
[274,290,256,254,268,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1031, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,273,275,274,271,277,265],
[268,0,266,290,254,267,271,259],
[277,284,0,281,268,276,277,268],
[275,260,269,0,276,266,268,275],
[276,296,282,274,0,265,284,276],
[279,283,274,284,285,0,277,277],
[273,279,273,282,266,273,0,265],
[285,291,282,275,274,273,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1032, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,314,295,277,285,292],
[271,0,270,294,288,265,261,272],
[275,280,0,297,289,271,284,273],
[236,256,253,0,274,276,246,265],
[255,262,261,276,0,268,253,282],
[273,285,279,274,282,0,266,267],
[265,289,266,304,297,284,0,287],
[258,278,277,285,268,283,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1033, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,223,200,239,238,260,265,219],
[327,0,243,268,300,297,303,301],
[350,307,0,268,291,285,243,342],
[311,282,282,0,300,271,274,283],
[312,250,259,250,0,274,269,249],
[290,253,265,279,276,0,258,272],
[285,247,307,276,281,292,0,294],
[331,249,208,267,301,278,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1034, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,231,286,243,265,272,286],
[259,0,248,263,252,234,286,267],
[319,302,0,299,288,274,297,296],
[264,287,251,0,267,276,266,293],
[307,298,262,283,0,287,281,319],
[285,316,276,274,263,0,288,313],
[278,264,253,284,269,262,0,279],
[264,283,254,257,231,237,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1035, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,253,233,258,226,218,255],
[312,0,326,287,304,275,287,309],
[297,224,0,261,235,225,252,267],
[317,263,289,0,281,297,273,296],
[292,246,315,269,0,263,269,281],
[324,275,325,253,287,0,256,294],
[332,263,298,277,281,294,0,291],
[295,241,283,254,269,256,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1036, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,243,288,263,251,285],
[266,0,265,232,257,260,254,258],
[269,285,0,270,243,245,257,298],
[307,318,280,0,297,263,270,298],
[262,293,307,253,0,266,241,273],
[287,290,305,287,284,0,275,308],
[299,296,293,280,309,275,0,294],
[265,292,252,252,277,242,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1037, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,302,280,264,280,266],
[277,0,282,308,270,276,298,292],
[283,268,0,288,246,268,286,275],
[248,242,262,0,244,258,274,271],
[270,280,304,306,0,278,285,289],
[286,274,282,292,272,0,282,266],
[270,252,264,276,265,268,0,264],
[284,258,275,279,261,284,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1038, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,265,271,273,280,283,281],
[271,0,266,276,269,275,280,285],
[285,284,0,275,265,276,279,280],
[279,274,275,0,271,281,284,286],
[277,281,285,279,0,271,286,284],
[270,275,274,269,279,0,283,277],
[267,270,271,266,264,267,0,281],
[269,265,270,264,266,273,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1039, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,258,293,259,233,302,240],
[304,0,291,265,272,285,294,268],
[292,259,0,286,261,261,288,260],
[257,285,264,0,283,282,316,242],
[291,278,289,267,0,298,302,279],
[317,265,289,268,252,0,291,262],
[248,256,262,234,248,259,0,224],
[310,282,290,308,271,288,326,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1040, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,304,260,228,255,289],
[263,0,271,313,255,275,276,305],
[282,279,0,300,248,261,251,271],
[246,237,250,0,250,219,227,269],
[290,295,302,300,0,257,270,291],
[322,275,289,331,293,0,286,313],
[295,274,299,323,280,264,0,275],
[261,245,279,281,259,237,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1041, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,284,259,253,262,297,266],
[283,0,293,280,268,276,296,296],
[266,257,0,284,257,256,268,266],
[291,270,266,0,273,243,288,281],
[297,282,293,277,0,277,302,275],
[288,274,294,307,273,0,295,293],
[253,254,282,262,248,255,0,274],
[284,254,284,269,275,257,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1042, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,272,257,244,274,290],
[280,0,282,298,258,278,288,311],
[278,268,0,260,251,250,245,265],
[278,252,290,0,251,255,291,267],
[293,292,299,299,0,273,289,298],
[306,272,300,295,277,0,279,307],
[276,262,305,259,261,271,0,306],
[260,239,285,283,252,243,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1043, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,269,271,268,234,267,259],
[277,0,274,275,274,276,281,269],
[281,276,0,268,293,249,284,258],
[279,275,282,0,296,253,263,241],
[282,276,257,254,0,239,257,251],
[316,274,301,297,311,0,318,290],
[283,269,266,287,293,232,0,260],
[291,281,292,309,299,260,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1044, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,310,293,303,297,303,271],
[261,0,292,292,260,265,272,262],
[240,258,0,271,272,278,263,256],
[257,258,279,0,262,258,272,260],
[247,290,278,288,0,252,271,246],
[253,285,272,292,298,0,282,280],
[247,278,287,278,279,268,0,264],
[279,288,294,290,304,270,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1045, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,267,247,252,264,266,256],
[276,0,256,266,269,270,283,278],
[283,294,0,284,279,286,290,266],
[303,284,266,0,271,296,287,278],
[298,281,271,279,0,280,277,267],
[286,280,264,254,270,0,290,269],
[284,267,260,263,273,260,0,270],
[294,272,284,272,283,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1046, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,289,273,294,271,296,285],
[273,0,281,270,298,274,283,282],
[261,269,0,288,302,262,277,265],
[277,280,262,0,295,284,293,286],
[256,252,248,255,0,255,271,274],
[279,276,288,266,295,0,297,274],
[254,267,273,257,279,253,0,263],
[265,268,285,264,276,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1047, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,285,302,308,301,293,271],
[265,0,259,274,281,287,273,272],
[265,291,0,274,313,266,272,280],
[248,276,276,0,296,276,280,271],
[242,269,237,254,0,252,234,241],
[249,263,284,274,298,0,268,261],
[257,277,278,270,316,282,0,265],
[279,278,270,279,309,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1048, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,294,267,228,293,282,295],
[284,0,268,280,233,296,283,308],
[256,282,0,268,280,260,268,297],
[283,270,282,0,240,258,259,325],
[322,317,270,310,0,322,265,284],
[257,254,290,292,228,0,265,297],
[268,267,282,291,285,285,0,283],
[255,242,253,225,266,253,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1049, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,264,269,268,284,252,291],
[283,0,262,273,274,270,255,297],
[286,288,0,279,268,286,284,302],
[281,277,271,0,268,292,275,290],
[282,276,282,282,0,281,256,311],
[266,280,264,258,269,0,253,287],
[298,295,266,275,294,297,0,295],
[259,253,248,260,239,263,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1050, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,284,293,298,256,308,281],
[257,0,271,269,284,266,280,265],
[266,279,0,260,284,245,292,262],
[257,281,290,0,287,266,262,247],
[252,266,266,263,0,237,275,259],
[294,284,305,284,313,0,284,267],
[242,270,258,288,275,266,0,246],
[269,285,288,303,291,283,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1051, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,291,283,271,292,260,272],
[284,0,282,288,281,296,270,281],
[259,268,0,281,268,285,262,262],
[267,262,269,0,253,273,274,283],
[279,269,282,297,0,289,290,273],
[258,254,265,277,261,0,265,247],
[290,280,288,276,260,285,0,277],
[278,269,288,267,277,303,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1052, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,250,253,344,275,391,342],
[231,0,229,303,343,229,369,343],
[300,321,0,228,366,297,390,385],
[297,247,322,0,319,207,296,362],
[206,207,184,231,0,297,324,298],
[275,321,253,343,253,0,347,412],
[159,181,160,254,226,203,0,273],
[208,207,165,188,252,138,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1053, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,272,256,271,260,264,290],
[292,0,295,263,299,294,265,270],
[278,255,0,282,294,280,289,295],
[294,287,268,0,307,285,281,291],
[279,251,256,243,0,263,260,274],
[290,256,270,265,287,0,267,282],
[286,285,261,269,290,283,0,277],
[260,280,255,259,276,268,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1054, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,233,253,237,266,252,260,258],
[317,0,282,254,287,294,302,281],
[297,268,0,255,303,278,258,259],
[313,296,295,0,305,291,289,270],
[284,263,247,245,0,265,271,269],
[298,256,272,259,285,0,254,261],
[290,248,292,261,279,296,0,255],
[292,269,291,280,281,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1055, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,288,274,287,276,274,277],
[273,0,301,303,297,291,283,281],
[262,249,0,272,292,263,259,252],
[276,247,278,0,280,277,276,270],
[263,253,258,270,0,255,263,261],
[274,259,287,273,295,0,260,271],
[276,267,291,274,287,290,0,270],
[273,269,298,280,289,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1056, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,276,275,271,287,300],
[275,0,286,286,277,276,282,299],
[267,264,0,272,268,261,274,284],
[274,264,278,0,281,263,288,299],
[275,273,282,269,0,279,279,298],
[279,274,289,287,271,0,283,299],
[263,268,276,262,271,267,0,303],
[250,251,266,251,252,251,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1057, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,273,291,285,275,288],
[276,0,274,282,275,300,271,297],
[272,276,0,278,270,283,265,276],
[277,268,272,0,266,270,276,297],
[259,275,280,284,0,280,264,280],
[265,250,267,280,270,0,267,279],
[275,279,285,274,286,283,0,287],
[262,253,274,253,270,271,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1058, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,295,263,278,293,276],
[259,0,269,260,243,242,270,260],
[276,281,0,253,253,262,273,254],
[255,290,297,0,267,277,288,275],
[287,307,297,283,0,274,274,278],
[272,308,288,273,276,0,281,289],
[257,280,277,262,276,269,0,275],
[274,290,296,275,272,261,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1059, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,281,278,281,260,286,278],
[294,0,294,278,274,270,280,293],
[269,256,0,274,272,280,267,290],
[272,272,276,0,293,253,274,290],
[269,276,278,257,0,254,279,251],
[290,280,270,297,296,0,283,293],
[264,270,283,276,271,267,0,279],
[272,257,260,260,299,257,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1060, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,277,272,293,272,266,308],
[271,0,273,313,314,323,307,312],
[273,277,0,272,303,296,274,298],
[278,237,278,0,317,280,265,309],
[257,236,247,233,0,252,249,250],
[278,227,254,270,298,0,262,283],
[284,243,276,285,301,288,0,291],
[242,238,252,241,300,267,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1061, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,261,245,283,267,260,270],
[276,0,276,275,295,292,284,275],
[289,274,0,276,289,298,284,277],
[305,275,274,0,306,276,289,280],
[267,255,261,244,0,267,270,263],
[283,258,252,274,283,0,263,277],
[290,266,266,261,280,287,0,270],
[280,275,273,270,287,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1062, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,280,284,275,267,294,278],
[287,0,287,231,231,224,290,239],
[270,263,0,278,255,246,308,262],
[266,319,272,0,271,218,320,257],
[275,319,295,279,0,231,277,277],
[283,326,304,332,319,0,318,265],
[256,260,242,230,273,232,0,238],
[272,311,288,293,273,285,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1063, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,317,305,280,313,298,265],
[221,0,275,278,246,246,263,251],
[233,275,0,272,225,270,261,244],
[245,272,278,0,269,260,257,241],
[270,304,325,281,0,278,296,287],
[237,304,280,290,272,0,242,260],
[252,287,289,293,254,308,0,268],
[285,299,306,309,263,290,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1064, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,258,265,278,261,281,267],
[258,0,258,260,274,254,262,257],
[292,292,0,269,286,268,287,264],
[285,290,281,0,288,282,271,274],
[272,276,264,262,0,257,251,258],
[289,296,282,268,293,0,281,287],
[269,288,263,279,299,269,0,276],
[283,293,286,276,292,263,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1065, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,259,267,259,233,264,287],
[270,0,262,311,264,267,310,287],
[291,288,0,286,271,262,276,289],
[283,239,264,0,248,272,281,267],
[291,286,279,302,0,282,296,269],
[317,283,288,278,268,0,295,297],
[286,240,274,269,254,255,0,286],
[263,263,261,283,281,253,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1066, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,264,228,276,234,318,287],
[289,0,293,258,264,212,305,227],
[286,257,0,254,214,227,272,208],
[322,292,296,0,246,281,318,238],
[274,286,336,304,0,262,260,266],
[316,338,323,269,288,0,314,266],
[232,245,278,232,290,236,0,235],
[263,323,342,312,284,284,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1067, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,253,247,280,247,273,249],
[296,0,264,277,283,263,264,271],
[297,286,0,291,289,284,264,269],
[303,273,259,0,291,270,282,300],
[270,267,261,259,0,270,266,253],
[303,287,266,280,280,0,267,261],
[277,286,286,268,284,283,0,276],
[301,279,281,250,297,289,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1068, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,293,290,295,271,214,274],
[255,0,227,223,294,242,232,253],
[257,323,0,220,264,261,293,274],
[260,327,330,0,323,329,277,236],
[255,256,286,227,0,256,270,307],
[279,308,289,221,294,0,277,305],
[336,318,257,273,280,273,0,308],
[276,297,276,314,243,245,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1069, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,286,281,283,278,277,265],
[242,0,269,262,251,252,256,271],
[264,281,0,259,269,281,251,263],
[269,288,291,0,293,276,281,275],
[267,299,281,257,0,287,276,282],
[272,298,269,274,263,0,273,301],
[273,294,299,269,274,277,0,277],
[285,279,287,275,268,249,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1070, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,307,279,283,274,310,254],
[285,0,318,299,273,323,297,279],
[243,232,0,243,253,254,247,196],
[271,251,307,0,248,289,271,246],
[267,277,297,302,0,274,299,282],
[276,227,296,261,276,0,272,256],
[240,253,303,279,251,278,0,235],
[296,271,354,304,268,294,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1071, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,274,291,274,314,287,282],
[265,0,267,259,270,286,256,283],
[276,283,0,288,278,299,270,296],
[259,291,262,0,282,299,300,296],
[276,280,272,268,0,317,273,292],
[236,264,251,251,233,0,240,284],
[263,294,280,250,277,310,0,275],
[268,267,254,254,258,266,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1072, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,266,271,289,278,280,290],
[255,0,272,247,267,260,274,273],
[284,278,0,267,274,280,276,291],
[279,303,283,0,290,265,276,283],
[261,283,276,260,0,271,285,278],
[272,290,270,285,279,0,279,280],
[270,276,274,274,265,271,0,270],
[260,277,259,267,272,270,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1073, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,279,280,299,283,272,273],
[268,0,272,267,278,261,273,277],
[271,278,0,266,304,288,302,284],
[270,283,284,0,307,270,295,274],
[251,272,246,243,0,240,253,247],
[267,289,262,280,310,0,301,289],
[278,277,248,255,297,249,0,258],
[277,273,266,276,303,261,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1074, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,261,281,271,296,301,267],
[266,0,288,266,283,283,313,282],
[289,262,0,263,281,308,300,254],
[269,284,287,0,307,304,310,264],
[279,267,269,243,0,312,305,272],
[254,267,242,246,238,0,260,238],
[249,237,250,240,245,290,0,248],
[283,268,296,286,278,312,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1075, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,284,284,266,288,256,285],
[247,0,271,267,278,288,263,268],
[266,279,0,247,246,297,281,244],
[266,283,303,0,254,271,265,267],
[284,272,304,296,0,285,293,265],
[262,262,253,279,265,0,267,255],
[294,287,269,285,257,283,0,262],
[265,282,306,283,285,295,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1076, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,273,292,263,273,270],
[280,0,249,275,274,286,265,278],
[274,301,0,269,295,275,270,286],
[277,275,281,0,283,281,283,295],
[258,276,255,267,0,276,258,284],
[287,264,275,269,274,0,275,281],
[277,285,280,267,292,275,0,279],
[280,272,264,255,266,269,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1077, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,264,275,278,258,261,299],
[267,0,247,293,271,265,267,273],
[286,303,0,281,264,276,254,262],
[275,257,269,0,278,256,273,275],
[272,279,286,272,0,269,260,273],
[292,285,274,294,281,0,294,285],
[289,283,296,277,290,256,0,271],
[251,277,288,275,277,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1078, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,261,280,276,282,290,268],
[247,0,251,257,287,268,272,276],
[289,299,0,270,293,290,305,281],
[270,293,280,0,283,296,301,261],
[274,263,257,267,0,277,288,259],
[268,282,260,254,273,0,288,267],
[260,278,245,249,262,262,0,264],
[282,274,269,289,291,283,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1079, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,275,276,273,330,249,193],
[330,0,277,303,272,329,303,303],
[275,273,0,275,247,274,219,193],
[274,247,275,0,272,329,219,247],
[277,278,303,278,0,329,300,272],
[220,221,276,221,221,0,191,275],
[301,247,331,331,250,359,0,245],
[357,247,357,303,278,275,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1080, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,272,270,299,286,257,271],
[247,0,254,264,272,270,258,251],
[278,296,0,287,303,306,255,270],
[280,286,263,0,268,294,302,280],
[251,278,247,282,0,289,255,258],
[264,280,244,256,261,0,270,254],
[293,292,295,248,295,280,0,270],
[279,299,280,270,292,296,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1081, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,283,278,293,278,299,266],
[269,0,278,275,267,259,282,283],
[267,272,0,286,274,264,288,282],
[272,275,264,0,287,269,285,276],
[257,283,276,263,0,260,271,279],
[272,291,286,281,290,0,301,280],
[251,268,262,265,279,249,0,258],
[284,267,268,274,271,270,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1082, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,272,283,308,269,285,261],
[258,0,297,303,278,289,299,296],
[278,253,0,292,261,250,310,251],
[267,247,258,0,243,282,274,240],
[242,272,289,307,0,237,262,261],
[281,261,300,268,313,0,313,257],
[265,251,240,276,288,237,0,240],
[289,254,299,310,289,293,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1083, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,295,257,271,266,284],
[279,0,327,303,285,267,277,275],
[259,223,0,255,260,267,246,264],
[255,247,295,0,231,275,222,263],
[293,265,290,319,0,271,277,272],
[279,283,283,275,279,0,254,263],
[284,273,304,328,273,296,0,283],
[266,275,286,287,278,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1084, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,256,246,247,234,249,233],
[330,0,284,290,282,290,272,285],
[294,266,0,274,264,274,291,266],
[304,260,276,0,266,259,285,283],
[303,268,286,284,0,295,311,287],
[316,260,276,291,255,0,297,294],
[301,278,259,265,239,253,0,261],
[317,265,284,267,263,256,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1085, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,272,282,279,298,299,316],
[257,0,298,263,283,264,299,277],
[278,252,0,261,263,270,272,284],
[268,287,289,0,298,259,282,287],
[271,267,287,252,0,268,273,291],
[252,286,280,291,282,0,292,304],
[251,251,278,268,277,258,0,289],
[234,273,266,263,259,246,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1086, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,299,244,284,274,265,276],
[286,0,328,297,284,298,263,259],
[251,222,0,243,272,281,232,239],
[306,253,307,0,269,271,269,247],
[266,266,278,281,0,283,245,256],
[276,252,269,279,267,0,260,249],
[285,287,318,281,305,290,0,272],
[274,291,311,303,294,301,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1087, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,78,313,159,79,79,158],
[312,0,78,391,158,235,79,236],
[472,472,0,472,236,313,315,237],
[237,159,78,0,80,79,79,158],
[391,392,314,470,0,157,315,315],
[471,315,237,471,393,0,158,315],
[471,471,235,471,235,392,0,392],
[392,314,313,392,235,235,158,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1088, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,282,297,276,260,264,288],
[273,0,252,272,271,243,259,293],
[268,298,0,295,263,271,264,281],
[253,278,255,0,272,228,264,286],
[274,279,287,278,0,249,276,281],
[290,307,279,322,301,0,272,303],
[286,291,286,286,274,278,0,283],
[262,257,269,264,269,247,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1089, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,306,291,293,400,284,245],
[244,0,354,260,325,323,260,279],
[244,196,0,288,292,307,286,246],
[259,290,262,0,288,292,288,232],
[257,225,258,262,0,275,270,213],
[150,227,243,258,275,0,210,213],
[266,290,264,262,280,340,0,280],
[305,271,304,318,337,337,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1090, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,255,241,249,260,249,266],
[311,0,279,280,283,268,312,290],
[295,271,0,290,306,248,295,290],
[309,270,260,0,273,281,295,261],
[301,267,244,277,0,253,254,253],
[290,282,302,269,297,0,297,286],
[301,238,255,255,296,253,0,271],
[284,260,260,289,297,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1091, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,278,292,274,274,285,285],
[254,0,268,259,250,270,292,274],
[272,282,0,256,264,278,291,271],
[258,291,294,0,275,287,301,279],
[276,300,286,275,0,285,300,280],
[276,280,272,263,265,0,286,270],
[265,258,259,249,250,264,0,252],
[265,276,279,271,270,280,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1092, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,265,286,285,278,292,277],
[269,0,273,302,274,282,282,269],
[285,277,0,295,272,285,284,278],
[264,248,255,0,273,265,254,236],
[265,276,278,277,0,280,264,260],
[272,268,265,285,270,0,286,261],
[258,268,266,296,286,264,0,262],
[273,281,272,314,290,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1093, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,270,267,281,277,262],
[265,0,262,267,266,259,267,265],
[271,288,0,270,270,287,280,267],
[280,283,280,0,264,272,265,277],
[283,284,280,286,0,258,276,278],
[269,291,263,278,292,0,277,277],
[273,283,270,285,274,273,0,266],
[288,285,283,273,272,273,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1094, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,304,254,267,257,291,257],
[286,0,284,267,289,283,269,293],
[246,266,0,241,273,267,259,254],
[296,283,309,0,318,291,268,295],
[283,261,277,232,0,271,289,291],
[293,267,283,259,279,0,288,305],
[259,281,291,282,261,262,0,257],
[293,257,296,255,259,245,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1095, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,303,269,315,302,274],
[261,0,289,268,260,258,289,238],
[263,261,0,291,271,276,270,240],
[247,282,259,0,275,293,284,253],
[281,290,279,275,0,273,289,272],
[235,292,274,257,277,0,280,280],
[248,261,280,266,261,270,0,255],
[276,312,310,297,278,270,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1096, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,267,305,293,274,297,297],
[270,0,257,278,282,270,278,275],
[283,293,0,290,271,306,302,289],
[245,272,260,0,269,262,270,268],
[257,268,279,281,0,280,271,288],
[276,280,244,288,270,0,269,289],
[253,272,248,280,279,281,0,278],
[253,275,261,282,262,261,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1097, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,300,215,286,228,228,285],
[275,0,284,225,228,279,256,255],
[250,266,0,276,290,276,248,231],
[335,325,274,0,308,293,303,257],
[264,322,260,242,0,264,243,239],
[322,271,274,257,286,0,258,258],
[322,294,302,247,307,292,0,257],
[265,295,319,293,311,292,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1098, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,289,276,263,297,290,285],
[284,0,280,268,275,291,284,291],
[261,270,0,263,256,270,283,275],
[274,282,287,0,282,293,289,289],
[287,275,294,268,0,297,278,298],
[253,259,280,257,253,0,266,265],
[260,266,267,261,272,284,0,281],
[265,259,275,261,252,285,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1099, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,286,273,288,316,273,278],
[267,0,263,276,283,304,287,260],
[264,287,0,264,298,294,256,275],
[277,274,286,0,285,310,296,244],
[262,267,252,265,0,282,246,254],
[234,246,256,240,268,0,259,263],
[277,263,294,254,304,291,0,272],
[272,290,275,306,296,287,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1100, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,271,249,277,252,272,269],
[281,0,260,274,268,248,269,268],
[279,290,0,275,264,259,264,284],
[301,276,275,0,280,275,295,274],
[273,282,286,270,0,276,283,273],
[298,302,291,275,274,0,278,271],
[278,281,286,255,267,272,0,275],
[281,282,266,276,277,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1101, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,205,301,248,267,253,247],
[245,0,244,283,267,278,245,256],
[345,306,0,309,289,322,270,291],
[249,267,241,0,252,302,260,281],
[302,283,261,298,0,282,257,277],
[283,272,228,248,268,0,226,235],
[297,305,280,290,293,324,0,260],
[303,294,259,269,273,315,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1102, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,275,271,274,272,294,272],
[285,0,269,267,280,276,292,304],
[275,281,0,270,282,264,296,301],
[279,283,280,0,276,275,294,290],
[276,270,268,274,0,269,285,283],
[278,274,286,275,281,0,289,288],
[256,258,254,256,265,261,0,278],
[278,246,249,260,267,262,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1103, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,293,299,291,274,269,273],
[257,0,252,244,266,262,247,259],
[257,298,0,267,276,284,285,278],
[251,306,283,0,264,258,254,279],
[259,284,274,286,0,290,275,259],
[276,288,266,292,260,0,268,275],
[281,303,265,296,275,282,0,283],
[277,291,272,271,291,275,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1104, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,289,297,280,270,303,289],
[280,0,261,279,257,262,281,296],
[261,289,0,284,262,287,294,297],
[253,271,266,0,258,267,287,297],
[270,293,288,292,0,277,290,277],
[280,288,263,283,273,0,318,291],
[247,269,256,263,260,232,0,262],
[261,254,253,253,273,259,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1105, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,285,292,258,277,267,277],
[283,0,287,279,265,272,254,291],
[265,263,0,280,267,275,279,269],
[258,271,270,0,266,277,260,278],
[292,285,283,284,0,271,285,285],
[273,278,275,273,279,0,285,286],
[283,296,271,290,265,265,0,271],
[273,259,281,272,265,264,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1106, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,285,312,272,316,281,300],
[217,0,272,245,261,268,257,316],
[265,278,0,282,339,318,317,333],
[238,305,268,0,286,288,281,259],
[278,289,211,264,0,286,290,296],
[234,282,232,262,264,0,277,298],
[269,293,233,269,260,273,0,315],
[250,234,217,291,254,252,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1107, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,274,273,289,280,270,284],
[263,0,273,281,292,263,262,276],
[276,277,0,272,300,283,279,275],
[277,269,278,0,298,266,272,274],
[261,258,250,252,0,244,252,270],
[270,287,267,284,306,0,268,286],
[280,288,271,278,298,282,0,282],
[266,274,275,276,280,264,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1108, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,292,230,318,318,265,314],
[286,0,270,275,284,291,294,317],
[258,280,0,246,298,295,280,297],
[320,275,304,0,289,301,295,286],
[232,266,252,261,0,260,282,285],
[232,259,255,249,290,0,286,261],
[285,256,270,255,268,264,0,258],
[236,233,253,264,265,289,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1109, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,272,311,262,260,250,297],
[254,0,302,289,223,247,260,286],
[278,248,0,273,247,265,218,282],
[239,261,277,0,277,262,251,268],
[288,327,303,273,0,288,278,289],
[290,303,285,288,262,0,255,307],
[300,290,332,299,272,295,0,296],
[253,264,268,282,261,243,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1110, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,256,257,271,259,272,270],
[298,0,282,276,277,282,293,274],
[294,268,0,288,285,281,307,284],
[293,274,262,0,296,269,300,272],
[279,273,265,254,0,280,296,289],
[291,268,269,281,270,0,284,298],
[278,257,243,250,254,266,0,274],
[280,276,266,278,261,252,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1111, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,277,295,287,307,314,279],
[275,0,266,286,265,289,291,275],
[273,284,0,289,281,297,303,296],
[255,264,261,0,269,285,265,252],
[263,285,269,281,0,280,296,258],
[243,261,253,265,270,0,274,244],
[236,259,247,285,254,276,0,271],
[271,275,254,298,292,306,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1112, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,299,301,243,244,262],
[267,0,260,286,289,249,262,257],
[288,290,0,295,287,244,286,275],
[251,264,255,0,276,232,263,254],
[249,261,263,274,0,241,240,244],
[307,301,306,318,309,0,286,275],
[306,288,264,287,310,264,0,285],
[288,293,275,296,306,275,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1113, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,255,293,277,263,241],
[283,0,275,254,310,290,292,276],
[289,275,0,266,320,299,297,282],
[295,296,284,0,308,292,281,275],
[257,240,230,242,0,241,283,243],
[273,260,251,258,309,0,268,290],
[287,258,253,269,267,282,0,273],
[309,274,268,275,307,260,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1114, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,268,255,244,277,272,250],
[258,0,259,251,245,296,275,296],
[282,291,0,278,266,275,295,291],
[295,299,272,0,264,270,282,307],
[306,305,284,286,0,289,271,309],
[273,254,275,280,261,0,293,289],
[278,275,255,268,279,257,0,287],
[300,254,259,243,241,261,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1115, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,267,276,270,279,292],
[278,0,281,290,269,283,293,307],
[274,269,0,284,283,281,305,292],
[283,260,266,0,279,296,284,285],
[274,281,267,271,0,283,277,305],
[280,267,269,254,267,0,274,280],
[271,257,245,266,273,276,0,280],
[258,243,258,265,245,270,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1116, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,301,302,305,279,257],
[272,0,276,280,287,285,287,281],
[273,274,0,296,262,276,261,266],
[249,270,254,0,265,251,276,250],
[248,263,288,285,0,281,273,266],
[245,265,274,299,269,0,262,264],
[271,263,289,274,277,288,0,262],
[293,269,284,300,284,286,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1117, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,273,264,293,309,275,280],
[257,0,255,261,290,295,246,251],
[277,295,0,278,292,296,264,272],
[286,289,272,0,270,294,276,285],
[257,260,258,280,0,295,265,254],
[241,255,254,256,255,0,241,228],
[275,304,286,274,285,309,0,265],
[270,299,278,265,296,322,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1118, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,222,267,317,271,294,230,253],
[328,0,274,318,265,322,279,285],
[283,276,0,344,300,275,297,334],
[233,232,206,0,177,208,189,226],
[279,285,250,373,0,291,259,226],
[256,228,275,342,259,0,243,275],
[320,271,253,361,291,307,0,292],
[297,265,216,324,324,275,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1119, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,285,287,281,260,299,305],
[234,0,267,279,247,249,262,277],
[265,283,0,277,255,260,265,270],
[263,271,273,0,257,265,280,279],
[269,303,295,293,0,281,302,285],
[290,301,290,285,269,0,296,276],
[251,288,285,270,248,254,0,250],
[245,273,280,271,265,274,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1120, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,249,277,236,247,266,275],
[307,0,300,280,251,304,275,245],
[301,250,0,270,253,301,268,289],
[273,270,280,0,253,282,278,280],
[314,299,297,297,0,272,316,269],
[303,246,249,268,278,0,257,252],
[284,275,282,272,234,293,0,257],
[275,305,261,270,281,298,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1121, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,278,290,269,314,264],
[272,0,280,280,304,277,262,287],
[280,270,0,273,294,268,283,281],
[272,270,277,0,259,287,286,294],
[260,246,256,291,0,252,290,295],
[281,273,282,263,298,0,298,292],
[236,288,267,264,260,252,0,256],
[286,263,269,256,255,258,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1122, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,268,285,274,287,279,277],
[269,0,270,294,275,268,284,277],
[282,280,0,274,272,268,279,297],
[265,256,276,0,250,262,277,261],
[276,275,278,300,0,276,289,280],
[263,282,282,288,274,0,274,286],
[271,266,271,273,261,276,0,289],
[273,273,253,289,270,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1123, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,226,207,213,236,254,259],
[260,0,265,231,231,237,253,229],
[324,285,0,239,268,277,319,295],
[343,319,311,0,264,257,314,303],
[337,319,282,286,0,272,355,318],
[314,313,273,293,278,0,322,297],
[296,297,231,236,195,228,0,222],
[291,321,255,247,232,253,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1124, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,249,260,285,308,313],
[271,0,255,251,252,286,277,289],
[265,295,0,283,285,292,309,311],
[301,299,267,0,260,302,280,297],
[290,298,265,290,0,311,321,291],
[265,264,258,248,239,0,277,274],
[242,273,241,270,229,273,0,265],
[237,261,239,253,259,276,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1125, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,267,270,288,255,267,279],
[277,0,274,273,264,249,306,246],
[283,276,0,259,304,272,289,267],
[280,277,291,0,275,276,283,249],
[262,286,246,275,0,255,264,245],
[295,301,278,274,295,0,282,272],
[283,244,261,267,286,268,0,247],
[271,304,283,301,305,278,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1126, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,308,269,278,276,294,293],
[271,0,294,261,279,286,299,273],
[242,256,0,264,284,258,275,268],
[281,289,286,0,258,280,314,264],
[272,271,266,292,0,300,285,272],
[274,264,292,270,250,0,291,253],
[256,251,275,236,265,259,0,259],
[257,277,282,286,278,297,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1127, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,293,222,211,269,216,243],
[290,0,291,240,253,266,235,272],
[257,259,0,212,241,269,236,240],
[328,310,338,0,275,302,283,290],
[339,297,309,275,0,293,261,261],
[281,284,281,248,257,0,252,227],
[334,315,314,267,289,298,0,276],
[307,278,310,260,289,323,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1128, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,264,285,293,253,297,275],
[261,0,268,267,289,258,290,277],
[286,282,0,263,293,238,281,252],
[265,283,287,0,294,276,296,264],
[257,261,257,256,0,269,292,260],
[297,292,312,274,281,0,312,286],
[253,260,269,254,258,238,0,260],
[275,273,298,286,290,264,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1129, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,268,247,252,291,257,255],
[305,0,287,296,290,280,262,291],
[282,263,0,265,268,272,259,264],
[303,254,285,0,281,278,276,263],
[298,260,282,269,0,296,264,270],
[259,270,278,272,254,0,267,265],
[293,288,291,274,286,283,0,265],
[295,259,286,287,280,285,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1130, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,271,269,271,294,277,281],
[274,0,258,284,276,280,270,273],
[279,292,0,286,284,300,263,295],
[281,266,264,0,270,277,259,288],
[279,274,266,280,0,278,267,279],
[256,270,250,273,272,0,260,281],
[273,280,287,291,283,290,0,281],
[269,277,255,262,271,269,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1131, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,300,304,270,270,273,299],
[270,0,286,290,283,268,257,268],
[250,264,0,285,264,281,268,275],
[246,260,265,0,264,272,269,260],
[280,267,286,286,0,278,270,277],
[280,282,269,278,272,0,266,287],
[277,293,282,281,280,284,0,275],
[251,282,275,290,273,263,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1132, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,283,254,281,265,261,266],
[293,0,289,275,301,287,297,281],
[267,261,0,261,276,270,278,255],
[296,275,289,0,295,273,281,280],
[269,249,274,255,0,263,265,252],
[285,263,280,277,287,0,264,274],
[289,253,272,269,285,286,0,260],
[284,269,295,270,298,276,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1133, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,294,281,270,265,273,268],
[274,0,268,259,255,265,279,264],
[256,282,0,258,236,254,258,264],
[269,291,292,0,266,262,275,256],
[280,295,314,284,0,274,285,266],
[285,285,296,288,276,0,274,279],
[277,271,292,275,265,276,0,260],
[282,286,286,294,284,271,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1134, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,274,284,283,285,263],
[284,0,288,290,298,264,296,285],
[273,262,0,274,285,266,270,282],
[276,260,276,0,271,287,282,280],
[266,252,265,279,0,270,282,268],
[267,286,284,263,280,0,278,257],
[265,254,280,268,268,272,0,271],
[287,265,268,270,282,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1135, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,259,284,286,288,284,286],
[263,0,236,256,257,240,273,248],
[291,314,0,313,325,284,273,268],
[266,294,237,0,300,259,262,271],
[264,293,225,250,0,245,276,248],
[262,310,266,291,305,0,291,280],
[266,277,277,288,274,259,0,257],
[264,302,282,279,302,270,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1136, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,275,295,300,259,255],
[267,0,280,277,300,297,291,283],
[278,270,0,287,287,300,269,263],
[275,273,263,0,287,275,272,278],
[255,250,263,263,0,266,246,258],
[250,253,250,275,284,0,240,256],
[291,259,281,278,304,310,0,278],
[295,267,287,272,292,294,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1137, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,258,325,261,279,262,348],
[281,0,311,334,306,294,273,319],
[292,239,0,320,236,310,210,303],
[225,216,230,0,222,277,199,257],
[289,244,314,328,0,336,298,336],
[271,256,240,273,214,0,235,284],
[288,277,340,351,252,315,0,307],
[202,231,247,293,214,266,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1138, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,264,288,278,276,283,274],
[245,0,279,287,266,256,250,294],
[286,271,0,261,296,245,268,255],
[262,263,289,0,266,235,280,279],
[272,284,254,284,0,253,279,281],
[274,294,305,315,297,0,290,297],
[267,300,282,270,271,260,0,287],
[276,256,295,271,269,253,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1139, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,273,300,269,278,301,283],
[280,0,274,291,282,271,291,274],
[277,276,0,301,272,282,280,269],
[250,259,249,0,262,260,272,255],
[281,268,278,288,0,285,297,282],
[272,279,268,290,265,0,279,286],
[249,259,270,278,253,271,0,247],
[267,276,281,295,268,264,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1140, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,258,282,273,284,286,281],
[277,0,277,288,286,274,284,277],
[292,273,0,267,284,278,286,295],
[268,262,283,0,277,288,285,285],
[277,264,266,273,0,279,272,276],
[266,276,272,262,271,0,281,287],
[264,266,264,265,278,269,0,298],
[269,273,255,265,274,263,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1141, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,284,277,264,245,274,275],
[274,0,307,265,278,270,264,284],
[266,243,0,263,261,249,266,258],
[273,285,287,0,280,275,283,291],
[286,272,289,270,0,256,285,290],
[305,280,301,275,294,0,272,273],
[276,286,284,267,265,278,0,279],
[275,266,292,259,260,277,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1142, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,313,277,284,315,272,274],
[246,0,300,255,272,277,266,262],
[237,250,0,247,248,258,257,235],
[273,295,303,0,293,303,281,274],
[266,278,302,257,0,273,276,253],
[235,273,292,247,277,0,253,275],
[278,284,293,269,274,297,0,272],
[276,288,315,276,297,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1143, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,261,275,257,301,261,257],
[295,0,276,244,287,288,298,278],
[289,274,0,276,289,286,272,284],
[275,306,274,0,293,274,302,273],
[293,263,261,257,0,288,252,262],
[249,262,264,276,262,0,250,257],
[289,252,278,248,298,300,0,241],
[293,272,266,277,288,293,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1144, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,299,290,278,283,261,273],
[296,0,273,304,287,271,293,295],
[251,277,0,292,290,267,277,261],
[260,246,258,0,282,267,264,264],
[272,263,260,268,0,282,273,277],
[267,279,283,283,268,0,266,268],
[289,257,273,286,277,284,0,276],
[277,255,289,286,273,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1145, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,310,268,249,274,296,307],
[263,0,316,307,250,319,248,301],
[240,234,0,228,248,273,241,278],
[282,243,322,0,298,315,256,308],
[301,300,302,252,0,322,286,258],
[276,231,277,235,228,0,194,266],
[254,302,309,294,264,356,0,296],
[243,249,272,242,292,284,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1146, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,277,271,287,275,272,278],
[257,0,256,264,270,263,275,280],
[273,294,0,258,274,284,273,277],
[279,286,292,0,278,287,275,280],
[263,280,276,272,0,270,282,278],
[275,287,266,263,280,0,270,273],
[278,275,277,275,268,280,0,286],
[272,270,273,270,272,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1147, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,263,276,298,303,262],
[284,0,278,281,288,292,277,258],
[278,272,0,256,283,289,292,249],
[287,269,294,0,274,300,309,258],
[274,262,267,276,0,302,298,276],
[252,258,261,250,248,0,275,237],
[247,273,258,241,252,275,0,239],
[288,292,301,292,274,313,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1148, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,252,286,300,287,286,275],
[251,0,255,249,297,255,254,246],
[298,295,0,284,287,306,286,274],
[264,301,266,0,313,281,288,286],
[250,253,263,237,0,249,266,242],
[263,295,244,269,301,0,251,244],
[264,296,264,262,284,299,0,248],
[275,304,276,264,308,306,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1149, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,258,260,270,231,246,235],
[263,0,262,243,296,251,250,264],
[292,288,0,287,314,247,261,247],
[290,307,263,0,308,251,279,278],
[280,254,236,242,0,245,257,218],
[319,299,303,299,305,0,275,239],
[304,300,289,271,293,275,0,280],
[315,286,303,272,332,311,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1150, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,240,263,263,315,320,345],
[285,0,265,274,307,316,315,315],
[310,285,0,315,261,354,340,360],
[287,276,235,0,271,272,271,277],
[287,243,289,279,0,383,271,343],
[235,234,196,278,167,0,223,250],
[230,235,210,279,279,327,0,302],
[205,235,190,273,207,300,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1151, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,287,308,291,289,276,306],
[275,0,268,284,267,270,256,303],
[263,282,0,301,270,266,294,292],
[242,266,249,0,250,262,267,277],
[259,283,280,300,0,275,266,285],
[261,280,284,288,275,0,272,281],
[274,294,256,283,284,278,0,297],
[244,247,258,273,265,269,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1152, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,268,317,243,193,195,255],
[296,0,280,277,268,266,277,278],
[282,270,0,316,202,279,225,266],
[233,273,234,0,211,286,227,250],
[307,282,348,339,0,297,263,324],
[357,284,271,264,253,0,264,240],
[355,273,325,323,287,286,0,291],
[295,272,284,300,226,310,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1153, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,266,263,285,267,219,286],
[289,0,328,263,287,278,311,326],
[284,222,0,265,257,208,249,236],
[287,287,285,0,291,250,292,307],
[265,263,293,259,0,283,245,317],
[283,272,342,300,267,0,284,305],
[331,239,301,258,305,266,0,288],
[264,224,314,243,233,245,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1154, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,279,276,288,267,280,272],
[277,0,293,262,290,260,257,280],
[271,257,0,254,266,272,261,280],
[274,288,296,0,296,269,279,283],
[262,260,284,254,0,282,275,276],
[283,290,278,281,268,0,278,289],
[270,293,289,271,275,272,0,283],
[278,270,270,267,274,261,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1155, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,261,267,305,278,256,300],
[248,0,221,257,356,289,273,272],
[289,329,0,285,297,306,277,272],
[283,293,265,0,295,276,267,249],
[245,194,253,255,0,277,219,248],
[272,261,244,274,273,0,254,255],
[294,277,273,283,331,296,0,278],
[250,278,278,301,302,295,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1156, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,235,253,286,316,242,264],
[247,0,254,228,280,231,287,281],
[315,296,0,294,296,329,273,362],
[297,322,256,0,320,301,304,331],
[264,270,254,230,0,234,301,296],
[234,319,221,249,316,0,243,267],
[308,263,277,246,249,307,0,266],
[286,269,188,219,254,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1157, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,293,261,217,260,260,244],
[281,0,279,263,267,245,253,262],
[257,271,0,250,263,270,255,247],
[289,287,300,0,276,273,288,288],
[333,283,287,274,0,287,289,308],
[290,305,280,277,263,0,276,310],
[290,297,295,262,261,274,0,298],
[306,288,303,262,242,240,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1158, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,259,264,268,260,260,270],
[301,0,279,269,296,275,302,270],
[291,271,0,276,269,300,285,282],
[286,281,274,0,280,290,275,284],
[282,254,281,270,0,284,283,272],
[290,275,250,260,266,0,286,269],
[290,248,265,275,267,264,0,253],
[280,280,268,266,278,281,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1159, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,276,250,247,305,303],
[273,0,301,316,270,295,255,279],
[265,249,0,261,275,200,255,280],
[274,234,289,0,295,286,252,259],
[300,280,275,255,0,285,281,305],
[303,255,350,264,265,0,313,297],
[245,295,295,298,269,237,0,291],
[247,271,270,291,245,253,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1160, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,264,281,272,284,323,272],
[280,0,263,270,293,289,293,271],
[286,287,0,252,296,285,318,269],
[269,280,298,0,324,290,310,277],
[278,257,254,226,0,254,264,247],
[266,261,265,260,296,0,296,246],
[227,257,232,240,286,254,0,232],
[278,279,281,273,303,304,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1161, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,249,250,231,238,281],
[290,0,288,276,280,263,282,307],
[266,262,0,276,250,267,245,307],
[301,274,274,0,280,261,245,301],
[300,270,300,270,0,277,280,300],
[319,287,283,289,273,0,270,302],
[312,268,305,305,270,280,0,312],
[269,243,243,249,250,248,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1162, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,267,274,297,270,294],
[275,0,286,253,272,286,272,296],
[267,264,0,261,259,284,258,279],
[283,297,289,0,274,295,276,311],
[276,278,291,276,0,282,260,269],
[253,264,266,255,268,0,257,277],
[280,278,292,274,290,293,0,286],
[256,254,271,239,281,273,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1163, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,297,262,266,282,259,282],
[284,0,308,271,295,292,284,296],
[253,242,0,231,241,239,252,269],
[288,279,319,0,283,290,274,287],
[284,255,309,267,0,267,237,272],
[268,258,311,260,283,0,283,292],
[291,266,298,276,313,267,0,290],
[268,254,281,263,278,258,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1164, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,301,292,285,274,301,282],
[248,0,264,241,245,255,260,249],
[249,286,0,248,259,261,259,259],
[258,309,302,0,299,288,297,268],
[265,305,291,251,0,278,276,280],
[276,295,289,262,272,0,261,280],
[249,290,291,253,274,289,0,259],
[268,301,291,282,270,270,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1165, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,307,264,288,268,283,236],
[268,0,290,271,264,253,259,249],
[243,260,0,262,272,247,255,240],
[286,279,288,0,291,259,273,304],
[262,286,278,259,0,252,253,242],
[282,297,303,291,298,0,259,289],
[267,291,295,277,297,291,0,281],
[314,301,310,246,308,261,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1166, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,277,294,291,272,252,267],
[249,0,255,260,256,251,242,289],
[273,295,0,288,281,273,264,278],
[256,290,262,0,287,288,288,264],
[259,294,269,263,0,249,279,248],
[278,299,277,262,301,0,262,266],
[298,308,286,262,271,288,0,276],
[283,261,272,286,302,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1167, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,252,256,254,241,220,265],
[264,0,221,245,213,278,216,220],
[298,329,0,287,281,279,256,274],
[294,305,263,0,289,253,265,272],
[296,337,269,261,0,272,271,300],
[309,272,271,297,278,0,296,283],
[330,334,294,285,279,254,0,317],
[285,330,276,278,250,267,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1168, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,262,306,308,304,283,274],
[246,0,256,285,251,253,273,250],
[288,294,0,294,286,258,263,279],
[244,265,256,0,271,234,253,240],
[242,299,264,279,0,258,269,275],
[246,297,292,316,292,0,279,261],
[267,277,287,297,281,271,0,291],
[276,300,271,310,275,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1169, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,302,288,250,250,301,267],
[288,0,310,281,284,279,303,275],
[248,240,0,256,260,239,289,238],
[262,269,294,0,267,276,291,280],
[300,266,290,283,0,268,299,257],
[300,271,311,274,282,0,297,281],
[249,247,261,259,251,253,0,241],
[283,275,312,270,293,269,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1170, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,91,92,137,139,139,138],
[273,0,180,275,272,230,319,320],
[459,370,0,275,413,279,323,367],
[458,275,275,0,367,230,366,322],
[413,278,137,183,0,231,277,278],
[411,320,271,320,319,0,273,365],
[411,231,227,184,273,277,0,275],
[412,230,183,228,272,185,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1171, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,274,268,299,275,281],
[269,0,297,283,263,270,297,275],
[275,253,0,276,251,267,287,256],
[276,267,274,0,272,262,269,255],
[282,287,299,278,0,289,270,293],
[251,280,283,288,261,0,269,264],
[275,253,263,281,280,281,0,280],
[269,275,294,295,257,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1172, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,284,286,284,271,302],
[267,0,259,253,266,281,265,267],
[260,291,0,270,286,284,285,281],
[266,297,280,0,276,287,280,289],
[264,284,264,274,0,251,265,270],
[266,269,266,263,299,0,266,285],
[279,285,265,270,285,284,0,302],
[248,283,269,261,280,265,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1173, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,269,280,303,272,274],
[290,0,292,300,295,297,278,244],
[268,258,0,294,257,272,290,270],
[281,250,256,0,275,314,272,245],
[270,255,293,275,0,301,297,252],
[247,253,278,236,249,0,255,266],
[278,272,260,278,253,295,0,284],
[276,306,280,305,298,284,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1174, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,271,266,286,250,276],
[279,0,258,286,274,295,274,283],
[280,292,0,300,278,285,262,292],
[279,264,250,0,252,278,259,272],
[284,276,272,298,0,305,293,296],
[264,255,265,272,245,0,250,283],
[300,276,288,291,257,300,0,295],
[274,267,258,278,254,267,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1175, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,264,253,263,259,260,274],
[287,0,274,270,270,294,272,280],
[286,276,0,287,270,290,269,280],
[297,280,263,0,278,292,279,260],
[287,280,280,272,0,313,291,289],
[291,256,260,258,237,0,258,268],
[290,278,281,271,259,292,0,280],
[276,270,270,290,261,282,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1176, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,303,296,275,291,282,309],
[266,0,280,275,266,273,280,295],
[247,270,0,267,274,261,264,268],
[254,275,283,0,267,269,288,285],
[275,284,276,283,0,264,256,303],
[259,277,289,281,286,0,238,289],
[268,270,286,262,294,312,0,279],
[241,255,282,265,247,261,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1177, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,280,274,276,283,279,291],
[288,0,288,294,290,283,274,286],
[270,262,0,266,267,263,268,270],
[276,256,284,0,296,264,269,292],
[274,260,283,254,0,257,264,267],
[267,267,287,286,293,0,267,288],
[271,276,282,281,286,283,0,276],
[259,264,280,258,283,262,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1178, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,273,263,289,265,253,268],
[277,0,249,267,263,269,258,267],
[277,301,0,276,270,288,261,281],
[287,283,274,0,281,279,274,279],
[261,287,280,269,0,264,261,258],
[285,281,262,271,286,0,277,289],
[297,292,289,276,289,273,0,304],
[282,283,269,271,292,261,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1179, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,267,267,277,259,274,246],
[281,0,273,284,286,273,240,257],
[283,277,0,276,275,258,234,261],
[283,266,274,0,256,260,244,238],
[273,264,275,294,0,272,238,252],
[291,277,292,290,278,0,234,279],
[276,310,316,306,312,316,0,268],
[304,293,289,312,298,271,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1180, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,267,281,263,277,278],
[269,0,261,275,261,276,256,257],
[283,289,0,275,283,290,260,271],
[283,275,275,0,269,278,275,261],
[269,289,267,281,0,274,266,271],
[287,274,260,272,276,0,272,273],
[273,294,290,275,284,278,0,294],
[272,293,279,289,279,277,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1181, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,242,304,287,279,316],
[265,0,267,259,256,271,232,275],
[268,283,0,259,298,299,237,246],
[308,291,291,0,315,307,259,291],
[246,294,252,235,0,262,247,289],
[263,279,251,243,288,0,259,256],
[271,318,313,291,303,291,0,329],
[234,275,304,259,261,294,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1182, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,275,276,264,285,274],
[281,0,266,259,266,293,266,266],
[274,284,0,256,264,276,289,291],
[275,291,294,0,292,289,305,262],
[274,284,286,258,0,299,272,289],
[286,257,274,261,251,0,274,279],
[265,284,261,245,278,276,0,272],
[276,284,259,288,261,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1183, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,339,300,278,283,305],
[284,0,310,322,296,273,273,326],
[270,240,0,314,317,289,285,326],
[211,228,236,0,260,241,242,272],
[250,254,233,290,0,239,264,290],
[272,277,261,309,311,0,295,323],
[267,277,265,308,286,255,0,300],
[245,224,224,278,260,227,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1184, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,266,249,259,262,256],
[280,0,260,281,287,273,283,277],
[281,290,0,269,251,269,270,277],
[284,269,281,0,262,269,275,272],
[301,263,299,288,0,267,267,273],
[291,277,281,281,283,0,267,278],
[288,267,280,275,283,283,0,274],
[294,273,273,278,277,272,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1185, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,272,272,291,263,262,275],
[261,0,263,253,273,255,264,266],
[278,287,0,267,283,257,256,266],
[278,297,283,0,292,260,278,269],
[259,277,267,258,0,248,265,254],
[287,295,293,290,302,0,283,269],
[288,286,294,272,285,267,0,278],
[275,284,284,281,296,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1186, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,286,299,268,271,302,294],
[269,0,266,275,262,255,276,260],
[264,284,0,292,275,278,287,256],
[251,275,258,0,257,230,270,252],
[282,288,275,293,0,268,283,280],
[279,295,272,320,282,0,293,276],
[248,274,263,280,267,257,0,277],
[256,290,294,298,270,274,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1187, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,281,282,298,292,294,266],
[255,0,271,269,288,279,289,286],
[269,279,0,261,263,273,282,259],
[268,281,289,0,300,300,277,282],
[252,262,287,250,0,272,272,245],
[258,271,277,250,278,0,286,258],
[256,261,268,273,278,264,0,271],
[284,264,291,268,305,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1188, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,259,309,265,325,322,290],
[266,0,286,308,279,301,287,284],
[291,264,0,286,285,293,281,298],
[241,242,264,0,249,276,274,250],
[285,271,265,301,0,292,267,280],
[225,249,257,274,258,0,268,269],
[228,263,269,276,283,282,0,275],
[260,266,252,300,270,281,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1189, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,284,274,285,279,266,268],
[242,0,252,241,262,257,238,241],
[266,298,0,273,282,256,298,245],
[276,309,277,0,279,291,295,243],
[265,288,268,271,0,288,287,262],
[271,293,294,259,262,0,271,258],
[284,312,252,255,263,279,0,277],
[282,309,305,307,288,292,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1190, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,287,291,259,349,247,261],
[276,0,303,261,227,306,232,259],
[263,247,0,307,231,291,218,248],
[259,289,243,0,323,318,293,228],
[291,323,319,227,0,306,246,198],
[201,244,259,232,244,0,185,247],
[303,318,332,257,304,365,0,291],
[289,291,302,322,352,303,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1191, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,281,289,271,268,288,276],
[273,0,296,289,277,273,278,275],
[269,254,0,272,245,256,263,268],
[261,261,278,0,255,258,273,259],
[279,273,305,295,0,292,275,272],
[282,277,294,292,258,0,284,286],
[262,272,287,277,275,266,0,257],
[274,275,282,291,278,264,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1192, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,283,292,281,283,305,275],
[258,0,278,282,280,270,290,270],
[267,272,0,280,269,270,274,265],
[258,268,270,0,248,271,260,266],
[269,270,281,302,0,270,291,262],
[267,280,280,279,280,0,295,274],
[245,260,276,290,259,255,0,274],
[275,280,285,284,288,276,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1193, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,272,273,270,281,291],
[274,0,284,282,279,268,275,300],
[259,266,0,253,271,268,254,272],
[278,268,297,0,280,275,272,292],
[277,271,279,270,0,270,268,270],
[280,282,282,275,280,0,271,286],
[269,275,296,278,282,279,0,280],
[259,250,278,258,280,264,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1194, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,268,264,304,279,274,286],
[275,0,244,240,247,284,251,293],
[282,306,0,257,292,276,320,300],
[286,310,293,0,300,285,251,284],
[246,303,258,250,0,266,284,307],
[271,266,274,265,284,0,267,298],
[276,299,230,299,266,283,0,280],
[264,257,250,266,243,252,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1195, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,274,279,278,287,282,301],
[245,0,255,263,256,272,264,288],
[276,295,0,267,265,272,270,295],
[271,287,283,0,254,273,280,293],
[272,294,285,296,0,284,274,303],
[263,278,278,277,266,0,284,294],
[268,286,280,270,276,266,0,307],
[249,262,255,257,247,256,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1196, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,283,281,300,284,285,311],
[275,0,261,271,295,275,266,293],
[267,289,0,269,304,271,306,295],
[269,279,281,0,304,270,299,306],
[250,255,246,246,0,274,280,288],
[266,275,279,280,276,0,265,297],
[265,284,244,251,270,285,0,287],
[239,257,255,244,262,253,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1197, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,276,296,306,288,288,285],
[278,0,289,291,286,274,293,280],
[274,261,0,279,278,265,266,293],
[254,259,271,0,283,270,289,286],
[244,264,272,267,0,269,271,298],
[262,276,285,280,281,0,287,295],
[262,257,284,261,279,263,0,287],
[265,270,257,264,252,255,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1198, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,296,283,300,290,275,277],
[259,0,267,264,293,251,257,281],
[254,283,0,272,287,274,278,257],
[267,286,278,0,291,292,289,270],
[250,257,263,259,0,265,261,280],
[260,299,276,258,285,0,282,286],
[275,293,272,261,289,268,0,275],
[273,269,293,280,270,264,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1199, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,288,296,302,297,298,275],
[248,0,257,287,264,268,279,266],
[262,293,0,277,284,253,286,252],
[254,263,273,0,269,257,270,254],
[248,286,266,281,0,246,266,258],
[253,282,297,293,304,0,293,277],
[252,271,264,280,284,257,0,268],
[275,284,298,296,292,273,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1200, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,281,265,289,263,256],
[269,0,284,281,264,285,259,255],
[276,266,0,277,278,286,285,276],
[269,269,273,0,276,284,257,256],
[285,286,272,274,0,281,270,272],
[261,265,264,266,269,0,270,250],
[287,291,265,293,280,280,0,280],
[294,295,274,294,278,300,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1201, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,263,278,272,249,271,268],
[283,0,269,257,279,254,276,262],
[287,281,0,287,271,276,281,275],
[272,293,263,0,282,281,272,285],
[278,271,279,268,0,269,275,281],
[301,296,274,269,281,0,297,289],
[279,274,269,278,275,253,0,270],
[282,288,275,265,269,261,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1202, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,265,278,269,267,265,268],
[260,0,251,263,263,277,258,255],
[285,299,0,281,282,279,264,289],
[272,287,269,0,268,245,260,265],
[281,287,268,282,0,267,279,283],
[283,273,271,305,283,0,276,280],
[285,292,286,290,271,274,0,289],
[282,295,261,285,267,270,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1203, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,283,285,287,320,304,282],
[292,0,286,295,296,310,275,294],
[267,264,0,257,264,286,276,284],
[265,255,293,0,300,292,282,268],
[263,254,286,250,0,275,305,302],
[230,240,264,258,275,0,282,267],
[246,275,274,268,245,268,0,294],
[268,256,266,282,248,283,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1204, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,283,241,254,265,263,253],
[276,0,273,273,243,279,252,267],
[267,277,0,272,247,278,282,276],
[309,277,278,0,270,311,274,282],
[296,307,303,280,0,314,269,280],
[285,271,272,239,236,0,252,288],
[287,298,268,276,281,298,0,292],
[297,283,274,268,270,262,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1205, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,294,270,272,281,278,263],
[276,0,294,290,271,294,279,284],
[256,256,0,257,249,264,254,246],
[280,260,293,0,265,290,280,264],
[278,279,301,285,0,283,287,272],
[269,256,286,260,267,0,262,270],
[272,271,296,270,263,288,0,271],
[287,266,304,286,278,280,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1206, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,302,272,266,280,297,276],
[258,0,284,274,268,266,275,255],
[248,266,0,254,261,254,271,236],
[278,276,296,0,277,280,288,266],
[284,282,289,273,0,267,267,278],
[270,284,296,270,283,0,267,265],
[253,275,279,262,283,283,0,258],
[274,295,314,284,272,285,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1207, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,229,276,274,185,231,273],
[274,0,183,365,228,274,277,227],
[321,367,0,367,274,276,366,273],
[274,185,183,0,227,183,185,273],
[276,322,276,323,0,229,322,321],
[365,276,274,367,321,0,276,365],
[319,273,184,365,228,274,0,318],
[277,323,277,277,229,185,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1208, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,274,288,279,285,340,272],
[260,0,251,237,270,261,293,247],
[276,299,0,287,283,271,301,292],
[262,313,263,0,259,270,307,288],
[271,280,267,291,0,266,343,279],
[265,289,279,280,284,0,324,297],
[210,257,249,243,207,226,0,232],
[278,303,258,262,271,253,318,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1209, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,274,304,250,254,297,258],
[259,0,280,287,259,292,291,275],
[276,270,0,293,248,293,292,261],
[246,263,257,0,227,245,281,229],
[300,291,302,323,0,297,314,275],
[296,258,257,305,253,0,273,267],
[253,259,258,269,236,277,0,230],
[292,275,289,321,275,283,320,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1210, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,268,356,297,280,314,312],
[213,0,234,257,240,214,236,254],
[282,316,0,335,277,272,338,262],
[194,293,215,0,240,270,264,289],
[253,310,273,310,0,255,268,277],
[270,336,278,280,295,0,278,303],
[236,314,212,286,282,272,0,266],
[238,296,288,261,273,247,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1211, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,295,284,271,276,268,299],
[273,0,248,257,264,250,281,272],
[255,302,0,247,267,277,249,275],
[266,293,303,0,248,246,230,248],
[279,286,283,302,0,295,273,285],
[274,300,273,304,255,0,248,239],
[282,269,301,320,277,302,0,244],
[251,278,275,302,265,311,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1212, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,230,246,324,225,241,261,235],
[320,0,195,237,228,245,286,263],
[304,355,0,290,263,258,346,250],
[226,313,260,0,245,239,284,229],
[325,322,287,305,0,203,292,246],
[309,305,292,311,347,0,290,269],
[289,264,204,266,258,260,0,280],
[315,287,300,321,304,281,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1213, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,262,268,281,278,285,267],
[253,0,246,254,256,245,259,261],
[288,304,0,272,284,271,279,292],
[282,296,278,0,280,251,272,266],
[269,294,266,270,0,281,273,280],
[272,305,279,299,269,0,274,258],
[265,291,271,278,277,276,0,275],
[283,289,258,284,270,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1214, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,276,284,271,264,267],
[273,0,287,258,278,270,278,274],
[284,263,0,268,285,294,268,280],
[274,292,282,0,273,284,262,281],
[266,272,265,277,0,273,253,272],
[279,280,256,266,277,0,262,261],
[286,272,282,288,297,288,0,291],
[283,276,270,269,278,289,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1215, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,210,277,248,206,247,192,219],
[340,0,286,286,288,255,287,285],
[273,264,0,241,242,268,288,282],
[302,264,309,0,334,303,336,293],
[344,262,308,216,0,302,302,271],
[303,295,282,247,248,0,233,291],
[358,263,262,214,248,317,0,330],
[331,265,268,257,279,259,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1216, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,279,301,340,318,271,278],
[258,0,281,262,321,258,280,287],
[271,269,0,281,312,270,279,273],
[249,288,269,0,291,285,276,290],
[210,229,238,259,0,280,253,266],
[232,292,280,265,270,0,278,286],
[279,270,271,274,297,272,0,289],
[272,263,277,260,284,264,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1217, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,257,291,265,285,245,265],
[295,0,274,293,277,305,277,287],
[293,276,0,289,285,300,266,277],
[259,257,261,0,256,268,256,271],
[285,273,265,294,0,267,264,285],
[265,245,250,282,283,0,277,271],
[305,273,284,294,286,273,0,275],
[285,263,273,279,265,279,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1218, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,260,261,275,275,242,221],
[267,0,240,272,273,248,213,233],
[290,310,0,271,270,264,246,249],
[289,278,279,0,257,259,257,245],
[275,277,280,293,0,268,246,256],
[275,302,286,291,282,0,261,226],
[308,337,304,293,304,289,0,275],
[329,317,301,305,294,324,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1219, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,276,281,260,279,305,269],
[249,0,258,287,290,239,267,274],
[274,292,0,315,272,234,304,301],
[269,263,235,0,280,263,273,288],
[290,260,278,270,0,274,306,289],
[271,311,316,287,276,0,300,334],
[245,283,246,277,244,250,0,285],
[281,276,249,262,261,216,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1220, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,254,266,262,270,275,244],
[293,0,286,273,266,269,284,295],
[296,264,0,259,269,285,293,277],
[284,277,291,0,288,283,293,275],
[288,284,281,262,0,293,272,258],
[280,281,265,267,257,0,271,278],
[275,266,257,257,278,279,0,278],
[306,255,273,275,292,272,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1221, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,399,243,248,371,304,281,273],
[151,0,212,151,214,274,159,90],
[307,338,0,276,309,334,309,272],
[302,399,274,0,430,367,309,305],
[179,336,241,120,0,303,278,179],
[246,276,216,183,247,0,157,210],
[269,391,241,241,272,393,0,300],
[277,460,278,245,371,340,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1222, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,282,292,258,271,270,301],
[276,0,278,311,274,260,267,281],
[268,272,0,313,269,257,291,274],
[258,239,237,0,279,260,274,277],
[292,276,281,271,0,291,290,305],
[279,290,293,290,259,0,237,288],
[280,283,259,276,260,313,0,300],
[249,269,276,273,245,262,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1223, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,184,0,183,0,184,184],
[550,0,184,367,367,367,184,367],
[366,366,0,183,183,183,550,367],
[550,183,367,0,367,550,367,550],
[367,183,367,183,0,183,367,367],
[550,183,367,0,367,0,367,367],
[366,366,0,183,183,183,0,183],
[366,183,183,0,183,183,367,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1224, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,260,266,278,283,257],
[265,0,283,279,274,293,305,281],
[273,267,0,265,261,256,275,236],
[290,271,285,0,290,289,303,279],
[284,276,289,260,0,275,284,265],
[272,257,294,261,275,0,281,272],
[267,245,275,247,266,269,0,249],
[293,269,314,271,285,278,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1225, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,265,227,282,263,252,215],
[306,0,270,267,329,296,308,288],
[285,280,0,255,290,266,248,262],
[323,283,295,0,269,286,292,260],
[268,221,260,281,0,290,229,205],
[287,254,284,264,260,0,267,291],
[298,242,302,258,321,283,0,231],
[335,262,288,290,345,259,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1226, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,252,216,229,255,241,253],
[302,0,270,244,275,291,238,232],
[298,280,0,269,272,299,277,250],
[334,306,281,0,283,289,276,272],
[321,275,278,267,0,302,254,256],
[295,259,251,261,248,0,252,241],
[309,312,273,274,296,298,0,284],
[297,318,300,278,294,309,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1227, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,285,264,281,295,271],
[266,0,265,271,261,272,280,250],
[269,285,0,295,268,278,269,271],
[265,279,255,0,277,275,271,269],
[286,289,282,273,0,288,279,275],
[269,278,272,275,262,0,259,267],
[255,270,281,279,271,291,0,253],
[279,300,279,281,275,283,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1228, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,279,276,274,291,267,300],
[250,0,282,263,272,282,276,277],
[271,268,0,272,262,269,261,299],
[274,287,278,0,285,280,271,287],
[276,278,288,265,0,275,287,288],
[259,268,281,270,275,0,252,295],
[283,274,289,279,263,298,0,289],
[250,273,251,263,262,255,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1229, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,283,301,283,301,282,271],
[280,0,293,301,280,282,275,267],
[267,257,0,280,267,291,267,268],
[249,249,270,0,271,281,270,268],
[267,270,283,279,0,292,282,285],
[249,268,259,269,258,0,279,263],
[268,275,283,280,268,271,0,265],
[279,283,282,282,265,287,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1230, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,296,282,307,333,313,257],
[284,0,278,281,272,322,286,300],
[254,272,0,293,285,303,275,257],
[268,269,257,0,284,308,305,296],
[243,278,265,266,0,275,263,291],
[217,228,247,242,275,0,270,244],
[237,264,275,245,287,280,0,245],
[293,250,293,254,259,306,305,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1231, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,320,318,290,307,265,303],
[252,0,279,288,250,302,264,313],
[230,271,0,286,260,301,242,284],
[232,262,264,0,246,289,236,252],
[260,300,290,304,0,326,288,286],
[243,248,249,261,224,0,253,254],
[285,286,308,314,262,297,0,283],
[247,237,266,298,264,296,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1232, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,291,261,285,270,287,273],
[274,0,276,268,266,275,268,272],
[259,274,0,259,281,285,274,259],
[289,282,291,0,289,259,293,278],
[265,284,269,261,0,255,258,285],
[280,275,265,291,295,0,272,268],
[263,282,276,257,292,278,0,276],
[277,278,291,272,265,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1233, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,254,258,252,272,273],
[283,0,269,283,261,268,285,271],
[284,281,0,264,260,259,277,272],
[296,267,286,0,268,293,281,302],
[292,289,290,282,0,283,254,304],
[298,282,291,257,267,0,284,278],
[278,265,273,269,296,266,0,292],
[277,279,278,248,246,272,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1234, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,261,276,281,291,268,281],
[283,0,273,273,276,295,268,302],
[289,277,0,276,280,270,271,284],
[274,277,274,0,276,288,285,281],
[269,274,270,274,0,298,278,286],
[259,255,280,262,252,0,248,263],
[282,282,279,265,272,302,0,285],
[269,248,266,269,264,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1235, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,278,280,298,283,279],
[251,0,261,279,273,280,275,280],
[278,289,0,293,261,280,284,285],
[272,271,257,0,272,285,268,265],
[270,277,289,278,0,272,280,267],
[252,270,270,265,278,0,259,269],
[267,275,266,282,270,291,0,270],
[271,270,265,285,283,281,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1236, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,268,282,300,282,266,268],
[262,0,260,273,303,301,251,267],
[282,290,0,271,283,280,259,273],
[268,277,279,0,295,267,237,234],
[250,247,267,255,0,258,239,253],
[268,249,270,283,292,0,277,282],
[284,299,291,313,311,273,0,281],
[282,283,277,316,297,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1237, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,270,292,270,244,270,256],
[282,0,258,267,274,226,262,289],
[280,292,0,258,281,254,285,274],
[258,283,292,0,269,245,272,273],
[280,276,269,281,0,254,267,266],
[306,324,296,305,296,0,272,299],
[280,288,265,278,283,278,0,272],
[294,261,276,277,284,251,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1238, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,283,281,278,284,271,247],
[307,0,296,287,300,295,271,283],
[267,254,0,286,249,265,289,275],
[269,263,264,0,269,255,245,267],
[272,250,301,281,0,286,262,303],
[266,255,285,295,264,0,268,265],
[279,279,261,305,288,282,0,283],
[303,267,275,283,247,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1239, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,340,252,282,306,259,252],
[333,0,326,322,302,357,254,292],
[210,224,0,215,261,309,214,281],
[298,228,335,0,266,296,268,251],
[268,248,289,284,0,277,214,255],
[244,193,241,254,273,0,230,229],
[291,296,336,282,336,320,0,267],
[298,258,269,299,295,321,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1240, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,278,279,290,266,277],
[275,0,301,297,277,284,288,274],
[272,249,0,292,265,279,282,252],
[272,253,258,0,255,277,254,244],
[271,273,285,295,0,288,261,278],
[260,266,271,273,262,0,259,258],
[284,262,268,296,289,291,0,263],
[273,276,298,306,272,292,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1241, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,287,281,281,267,284,278],
[258,0,279,254,290,266,283,272],
[263,271,0,262,262,251,251,272],
[269,296,288,0,292,277,280,280],
[269,260,288,258,0,250,263,264],
[283,284,299,273,300,0,293,281],
[266,267,299,270,287,257,0,285],
[272,278,278,270,286,269,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1242, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,229,292,297,239,260,270],
[247,0,212,222,240,240,225,262],
[321,338,0,285,293,270,300,306],
[258,328,265,0,306,256,291,258],
[253,310,257,244,0,236,276,260],
[311,310,280,294,314,0,315,273],
[290,325,250,259,274,235,0,258],
[280,288,244,292,290,277,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1243, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,300,278,288,253,284,275],
[287,0,279,262,276,273,269,283],
[250,271,0,266,253,271,275,260],
[272,288,284,0,265,268,278,280],
[262,274,297,285,0,273,280,261],
[297,277,279,282,277,0,303,275],
[266,281,275,272,270,247,0,270],
[275,267,290,270,289,275,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1244, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,259,261,240,260,227,247],
[279,0,242,266,257,257,256,285],
[291,308,0,283,266,270,266,289],
[289,284,267,0,279,261,270,289],
[310,293,284,271,0,279,298,302],
[290,293,280,289,271,0,290,299],
[323,294,284,280,252,260,0,280],
[303,265,261,261,248,251,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1245, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,251,288,272,281,306,310],
[245,0,231,261,248,271,284,273],
[299,319,0,268,302,278,307,297],
[262,289,282,0,265,291,296,300],
[278,302,248,285,0,277,310,314],
[269,279,272,259,273,0,289,277],
[244,266,243,254,240,261,0,275],
[240,277,253,250,236,273,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1246, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,267,259,305,218,275],
[279,0,290,242,257,313,203,245],
[270,260,0,271,286,392,281,312],
[283,308,279,0,289,356,265,280],
[291,293,264,261,0,321,211,280],
[245,237,158,194,229,0,226,211],
[332,347,269,285,339,324,0,287],
[275,305,238,270,270,339,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1247, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,348,296,202,272,373,274,289],
[202,0,292,239,236,256,237,272],
[254,258,0,238,199,255,236,202],
[348,311,312,0,275,298,292,295],
[278,314,351,275,0,351,331,348],
[177,294,295,252,199,0,199,235],
[276,313,314,258,219,351,0,291],
[261,278,348,255,202,315,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1248, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,251,284,293,290,265,275],
[272,0,256,257,277,268,266,242],
[299,294,0,296,305,321,275,276],
[266,293,254,0,283,292,266,274],
[257,273,245,267,0,293,243,255],
[260,282,229,258,257,0,254,253],
[285,284,275,284,307,296,0,280],
[275,308,274,276,295,297,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1249, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,291,280,294,294,311,248],
[258,0,256,253,249,279,255,245],
[259,294,0,294,298,312,257,286],
[270,297,256,0,292,270,260,250],
[256,301,252,258,0,292,224,235],
[256,271,238,280,258,0,238,219],
[239,295,293,290,326,312,0,299],
[302,305,264,300,315,331,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1250, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,257,275,251,255,266,256],
[290,0,274,269,266,277,263,259],
[293,276,0,287,273,275,273,281],
[275,281,263,0,245,275,265,265],
[299,284,277,305,0,269,288,290],
[295,273,275,275,281,0,278,257],
[284,287,277,285,262,272,0,278],
[294,291,269,285,260,293,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1251, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,305,307,280,273,285,298],
[249,0,261,275,267,256,268,276],
[245,289,0,273,257,252,268,273],
[243,275,277,0,265,251,271,282],
[270,283,293,285,0,281,286,291],
[277,294,298,299,269,0,279,291],
[265,282,282,279,264,271,0,287],
[252,274,277,268,259,259,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1252, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,319,275,309,252,280,266],
[282,0,299,277,279,270,259,286],
[231,251,0,257,280,282,258,262],
[275,273,293,0,272,279,257,285],
[241,271,270,278,0,260,279,259],
[298,280,268,271,290,0,296,277],
[270,291,292,293,271,254,0,284],
[284,264,288,265,291,273,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1253, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,288,288,274,283,281,277],
[291,0,283,286,280,277,267,294],
[262,267,0,283,273,261,278,280],
[262,264,267,0,271,261,277,286],
[276,270,277,279,0,260,284,292],
[267,273,289,289,290,0,278,283],
[269,283,272,273,266,272,0,286],
[273,256,270,264,258,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1254, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,309,287,302,277,287,273],
[258,0,286,280,290,265,279,266],
[241,264,0,266,273,247,259,264],
[263,270,284,0,275,265,258,250],
[248,260,277,275,0,248,264,247],
[273,285,303,285,302,0,300,284],
[263,271,291,292,286,250,0,269],
[277,284,286,300,303,266,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1255, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,251,273,256,253,257,277],
[318,0,283,305,279,293,278,270],
[299,267,0,297,292,312,289,277],
[277,245,253,0,267,260,262,257],
[294,271,258,283,0,262,250,284],
[297,257,238,290,288,0,288,250],
[293,272,261,288,300,262,0,320],
[273,280,273,293,266,300,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1256, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,317,297,268,294,287,288,278],
[233,0,276,255,259,264,241,231],
[253,274,0,266,261,278,263,287],
[282,295,284,0,267,271,260,290],
[256,291,289,283,0,276,250,251],
[263,286,272,279,274,0,275,268],
[262,309,287,290,300,275,0,272],
[272,319,263,260,299,282,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1257, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,274,269,282,266,283,308],
[269,0,270,277,284,273,265,296],
[276,280,0,272,279,267,275,287],
[281,273,278,0,280,296,258,304],
[268,266,271,270,0,277,283,294],
[284,277,283,254,273,0,279,283],
[267,285,275,292,267,271,0,313],
[242,254,263,246,256,267,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1258, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,278,283,273,323,279,289],
[260,0,282,239,265,254,289,293],
[272,268,0,248,260,265,273,267],
[267,311,302,0,305,288,258,314],
[277,285,290,245,0,269,276,324],
[227,296,285,262,281,0,277,296],
[271,261,277,292,274,273,0,316],
[261,257,283,236,226,254,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1259, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,301,290,306,298,272,282],
[238,0,256,260,300,265,276,246],
[249,294,0,281,303,247,276,260],
[260,290,269,0,292,268,267,275],
[244,250,247,258,0,261,256,245],
[252,285,303,282,289,0,283,267],
[278,274,274,283,294,267,0,261],
[268,304,290,275,305,283,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1260, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,249,256,285,296,262,284],
[282,0,278,293,285,287,274,303],
[301,272,0,283,293,285,273,284],
[294,257,267,0,280,284,280,259],
[265,265,257,270,0,288,288,257],
[254,263,265,266,262,0,267,250],
[288,276,277,270,262,283,0,283],
[266,247,266,291,293,300,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1261, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,299,270,288,283,324,283],
[269,0,273,267,294,267,280,253],
[251,277,0,253,277,266,283,228],
[280,283,297,0,294,292,295,268],
[262,256,273,256,0,268,285,252],
[267,283,284,258,282,0,288,259],
[226,270,267,255,265,262,0,248],
[267,297,322,282,298,291,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1262, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,305,286,262,267,274,302],
[244,0,259,269,255,277,249,254],
[245,291,0,281,287,282,252,271],
[264,281,269,0,257,273,265,259],
[288,295,263,293,0,287,275,266],
[283,273,268,277,263,0,296,297],
[276,301,298,285,275,254,0,237],
[248,296,279,291,284,253,313,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1263, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,218,278,253,240,253,257,244],
[332,0,297,301,267,277,281,324],
[272,253,0,282,231,270,290,259],
[297,249,268,0,265,263,279,287],
[310,283,319,285,0,265,310,293],
[297,273,280,287,285,0,298,287],
[293,269,260,271,240,252,0,251],
[306,226,291,263,257,263,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1264, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,309,285,263,280,315,285],
[242,0,280,268,266,264,276,273],
[241,270,0,261,255,224,273,253],
[265,282,289,0,262,269,287,272],
[287,284,295,288,0,263,280,278],
[270,286,326,281,287,0,298,286],
[235,274,277,263,270,252,0,248],
[265,277,297,278,272,264,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1265, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,261,288,274,292,238,307],
[279,0,264,292,277,316,255,297],
[289,286,0,294,292,311,261,311],
[262,258,256,0,310,290,275,304],
[276,273,258,240,0,270,229,273],
[258,234,239,260,280,0,211,281],
[312,295,289,275,321,339,0,313],
[243,253,239,246,277,269,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1266, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,344,294,365,345,250,313,290],
[206,0,281,292,277,261,333,239],
[256,269,0,325,271,237,278,244],
[185,258,225,0,223,222,230,188],
[205,273,279,327,0,250,282,230],
[300,289,313,328,300,0,310,236],
[237,217,272,320,268,240,0,207],
[260,311,306,362,320,314,343,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1267, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,290,282,257,293,305,273],
[250,0,266,250,230,269,286,232],
[260,284,0,274,254,315,298,257],
[268,300,276,0,258,286,314,289],
[293,320,296,292,0,307,326,263],
[257,281,235,264,243,0,291,255],
[245,264,252,236,224,259,0,226],
[277,318,293,261,287,295,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1268, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,302,287,268,264,277],
[269,0,277,278,282,273,263,288],
[269,273,0,305,277,273,271,261],
[248,272,245,0,274,265,263,255],
[263,268,273,276,0,259,245,253],
[282,277,277,285,291,0,271,276],
[286,287,279,287,305,279,0,267],
[273,262,289,295,297,274,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1269, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,258,272,280,317,270,261],
[271,0,232,284,275,304,270,280],
[292,318,0,288,297,324,264,281],
[278,266,262,0,291,324,272,308],
[270,275,253,259,0,313,268,274],
[233,246,226,226,237,0,236,233],
[280,280,286,278,282,314,0,259],
[289,270,269,242,276,317,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1270, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,274,307,280,287,276,294],
[256,0,264,292,252,268,262,287],
[276,286,0,293,260,261,292,291],
[243,258,257,0,261,265,264,267],
[270,298,290,289,0,298,291,290],
[263,282,289,285,252,0,266,277],
[274,288,258,286,259,284,0,271],
[256,263,259,283,260,273,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1271, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,282,278,256,259,285,245],
[265,0,291,264,311,277,264,263],
[268,259,0,221,278,231,246,260],
[272,286,329,0,256,253,267,275],
[294,239,272,294,0,280,277,268],
[291,273,319,297,270,0,291,298],
[265,286,304,283,273,259,0,259],
[305,287,290,275,282,252,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1272, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,241,305,271,303,269,308],
[261,0,258,271,261,256,272,268],
[309,292,0,281,266,264,265,279],
[245,279,269,0,269,299,246,262],
[279,289,284,281,0,299,296,273],
[247,294,286,251,251,0,263,264],
[281,278,285,304,254,287,0,261],
[242,282,271,288,277,286,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1273, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,279,211,261,256,299,209],
[296,0,299,273,278,301,360,252],
[271,251,0,188,281,319,251,208],
[339,277,362,0,319,296,343,252],
[289,272,269,231,0,290,294,289],
[294,249,231,254,260,0,294,248],
[251,190,299,207,256,256,0,186],
[341,298,342,298,261,302,364,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1274, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,272,276,295,296,296,309],
[284,0,258,280,276,291,278,289],
[278,292,0,274,294,300,284,295],
[274,270,276,0,290,277,285,303],
[255,274,256,260,0,294,265,280],
[254,259,250,273,256,0,266,283],
[254,272,266,265,285,284,0,280],
[241,261,255,247,270,267,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1275, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,277,277,273,263,276,258],
[263,0,273,262,275,259,255,267],
[273,277,0,276,289,268,246,258],
[273,288,274,0,289,282,261,288],
[277,275,261,261,0,266,256,269],
[287,291,282,268,284,0,272,289],
[274,295,304,289,294,278,0,282],
[292,283,292,262,281,261,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1276, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,276,290,285,273,282,287],
[253,0,225,255,227,232,246,252],
[274,325,0,312,260,275,271,276],
[260,295,238,0,250,263,268,260],
[265,323,290,300,0,297,287,297],
[277,318,275,287,253,0,283,283],
[268,304,279,282,263,267,0,275],
[263,298,274,290,253,267,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1277, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,263,275,271,278,280,265],
[288,0,269,284,275,299,286,288],
[287,281,0,286,271,298,270,282],
[275,266,264,0,268,278,278,281],
[279,275,279,282,0,287,280,272],
[272,251,252,272,263,0,249,268],
[270,264,280,272,270,301,0,302],
[285,262,268,269,278,282,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1278, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,279,241,289,316,264,303],
[295,0,338,264,278,293,328,288],
[271,212,0,268,264,249,252,283],
[309,286,282,0,274,302,272,277],
[261,272,286,276,0,281,269,295],
[234,257,301,248,269,0,304,280],
[286,222,298,278,281,246,0,282],
[247,262,267,273,255,270,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1279, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,275,277,273,249,265],
[280,0,277,268,290,295,278,268],
[284,273,0,268,284,288,269,263],
[275,282,282,0,293,280,257,286],
[273,260,266,257,0,257,283,271],
[277,255,262,270,293,0,268,267],
[301,272,281,293,267,282,0,269],
[285,282,287,264,279,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1280, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,293,278,301,262,286,287],
[262,0,288,293,294,262,289,289],
[257,262,0,261,273,260,312,267],
[272,257,289,0,274,277,274,275],
[249,256,277,276,0,277,275,294],
[288,288,290,273,273,0,289,288],
[264,261,238,276,275,261,0,273],
[263,261,283,275,256,262,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1281, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,293,273,272,263,277,286],
[261,0,270,266,263,247,248,257],
[257,280,0,286,274,258,271,280],
[277,284,264,0,266,261,261,270],
[278,287,276,284,0,276,280,271],
[287,303,292,289,274,0,277,274],
[273,302,279,289,270,273,0,288],
[264,293,270,280,279,276,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1282, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,305,267,284,282,268,250],
[268,0,290,275,255,291,277,270],
[245,260,0,237,234,287,249,249],
[283,275,313,0,275,293,278,276],
[266,295,316,275,0,300,261,250],
[268,259,263,257,250,0,263,252],
[282,273,301,272,289,287,0,266],
[300,280,301,274,300,298,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1283, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,276,275,282,280,287],
[276,0,284,271,280,270,277,287],
[279,266,0,277,297,265,277,275],
[274,279,273,0,275,274,280,283],
[275,270,253,275,0,278,270,283],
[268,280,285,276,272,0,269,273],
[270,273,273,270,280,281,0,286],
[263,263,275,267,267,277,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1284, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,280,282,289,285,285,272],
[282,0,277,288,282,287,270,277],
[270,273,0,295,266,277,288,265],
[268,262,255,0,274,275,259,258],
[261,268,284,276,0,284,270,265],
[265,263,273,275,266,0,258,279],
[265,280,262,291,280,292,0,284],
[278,273,285,292,285,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1285, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,280,292,259,283,319,313],
[294,0,303,313,261,284,327,290],
[270,247,0,279,278,276,312,311],
[258,237,271,0,251,273,313,270],
[291,289,272,299,0,259,311,316],
[267,266,274,277,291,0,294,274],
[231,223,238,237,239,256,0,277],
[237,260,239,280,234,276,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1286, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,297,288,330,304,271,278],
[249,0,282,233,282,290,236,287],
[253,268,0,278,304,317,252,307],
[262,317,272,0,323,316,277,281],
[220,268,246,227,0,272,245,237],
[246,260,233,234,278,0,265,256],
[279,314,298,273,305,285,0,276],
[272,263,243,269,313,294,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1287, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,333,290,309,341,268,335,375],
[217,0,282,285,271,244,282,272],
[260,268,0,285,314,276,328,309],
[241,265,265,0,303,224,293,298],
[209,279,236,247,0,267,307,235],
[282,306,274,326,283,0,326,320],
[215,268,222,257,243,224,0,289],
[175,278,241,252,315,230,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1288, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,286,274,279,286,263,294],
[280,0,287,294,288,293,274,272],
[264,263,0,282,294,284,257,270],
[276,256,268,0,269,274,262,268],
[271,262,256,281,0,274,269,255],
[264,257,266,276,276,0,268,269],
[287,276,293,288,281,282,0,257],
[256,278,280,282,295,281,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1289, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,282,277,278,267,275],
[282,0,301,268,275,272,288,272],
[262,249,0,250,275,278,243,233],
[268,282,300,0,283,295,293,255],
[273,275,275,267,0,240,277,253],
[272,278,272,255,310,0,257,247],
[283,262,307,257,273,293,0,274],
[275,278,317,295,297,303,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1290, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,264,312,256,278,304,324],
[247,0,291,299,259,236,278,304],
[286,259,0,274,234,258,285,285],
[238,251,276,0,256,254,278,294],
[294,291,316,294,0,251,299,312],
[272,314,292,296,299,0,310,333],
[246,272,265,272,251,240,0,264],
[226,246,265,256,238,217,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1291, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,281,249,248,261,279,247],
[300,0,282,258,270,263,287,270],
[269,268,0,278,244,257,288,256],
[301,292,272,0,286,279,280,262],
[302,280,306,264,0,294,303,276],
[289,287,293,271,256,0,288,299],
[271,263,262,270,247,262,0,244],
[303,280,294,288,274,251,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1292, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,286,288,281,301,301,274],
[284,0,276,297,271,290,288,271],
[264,274,0,251,281,278,270,274],
[262,253,299,0,273,302,286,284],
[269,279,269,277,0,286,280,279],
[249,260,272,248,264,0,254,242],
[249,262,280,264,270,296,0,268],
[276,279,276,266,271,308,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1293, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,274,285,280,265,279],
[273,0,287,278,284,278,290,279],
[272,263,0,276,285,273,280,265],
[276,272,274,0,276,280,282,269],
[265,266,265,274,0,271,267,277],
[270,272,277,270,279,0,270,275],
[285,260,270,268,283,280,0,269],
[271,271,285,281,273,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1294, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,252,272,318,297,278,253],
[265,0,272,267,284,305,282,279],
[298,278,0,269,331,301,328,303],
[278,283,281,0,312,305,315,266],
[232,266,219,238,0,288,268,247],
[253,245,249,245,262,0,253,256],
[272,268,222,235,282,297,0,258],
[297,271,247,284,303,294,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1295, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,285,300,306,269,287,303],
[259,0,260,254,268,293,265,265],
[265,290,0,279,282,290,276,290],
[250,296,271,0,286,280,265,282],
[244,282,268,264,0,280,247,276],
[281,257,260,270,270,0,256,279],
[263,285,274,285,303,294,0,308],
[247,285,260,268,274,271,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1296, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,251,253,254,314,278,305],
[234,0,251,253,275,245,289,226],
[299,299,0,311,275,285,389,297],
[297,297,239,0,244,283,263,284],
[296,275,275,306,0,259,351,307],
[236,305,265,267,291,0,291,290],
[272,261,161,287,199,259,0,228],
[245,324,253,266,243,260,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1297, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,263,282,274,249,274],
[279,0,253,257,276,269,276,265],
[276,297,0,283,258,294,277,291],
[287,293,267,0,281,285,255,260],
[268,274,292,269,0,289,279,290],
[276,281,256,265,261,0,279,271],
[301,274,273,295,271,271,0,274],
[276,285,259,290,260,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1298, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,270,257,246,247,275,274],
[290,0,274,273,274,277,309,277],
[280,276,0,277,263,262,296,280],
[293,277,273,0,264,270,309,288],
[304,276,287,286,0,275,319,291],
[303,273,288,280,275,0,309,268],
[275,241,254,241,231,241,0,256],
[276,273,270,262,259,282,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1299, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,301,244,349,259,290,260],
[270,0,301,289,268,332,291,300],
[249,249,0,208,269,275,259,263],
[306,261,342,0,316,260,321,323],
[201,282,281,234,0,223,237,250],
[291,218,275,290,327,0,281,274],
[260,259,291,229,313,269,0,249],
[290,250,287,227,300,276,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1300, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,293,280,291,293,244,281],
[282,0,269,252,286,251,247,249],
[257,281,0,249,283,271,247,271],
[270,298,301,0,314,310,285,316],
[259,264,267,236,0,267,243,266],
[257,299,279,240,283,0,270,293],
[306,303,303,265,307,280,0,292],
[269,301,279,234,284,257,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1301, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,294,274,286,269,289,260],
[283,0,280,281,296,277,280,262],
[256,270,0,259,281,255,271,258],
[276,269,291,0,297,278,279,264],
[264,254,269,253,0,255,272,273],
[281,273,295,272,295,0,293,264],
[261,270,279,271,278,257,0,280],
[290,288,292,286,277,286,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1302, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,251,260,249,227,238,269],
[279,0,265,277,308,248,250,292],
[299,285,0,271,254,273,274,272],
[290,273,279,0,271,277,283,296],
[301,242,296,279,0,292,260,280],
[323,302,277,273,258,0,292,249],
[312,300,276,267,290,258,0,296],
[281,258,278,254,270,301,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1303, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,224,278,233,236,236,233,214],
[326,0,275,283,275,291,287,250],
[272,275,0,246,259,257,257,243],
[317,267,304,0,263,297,307,295],
[314,275,291,287,0,269,296,254],
[314,259,293,253,281,0,282,240],
[317,263,293,243,254,268,0,267],
[336,300,307,255,296,310,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1304, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,288,233,243,261,214,236],
[302,0,303,301,287,184,260,217],
[262,247,0,232,261,231,214,233],
[317,249,318,0,261,258,248,292],
[307,263,289,289,0,302,232,261],
[289,366,319,292,248,0,262,251],
[336,290,336,302,318,288,0,249],
[314,333,317,258,289,299,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1305, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,307,280,242,310,270,288],
[276,0,324,256,300,316,277,307],
[243,226,0,277,227,297,249,294],
[270,294,273,0,213,300,269,290],
[308,250,323,337,0,380,310,326],
[240,234,253,250,170,0,221,266],
[280,273,301,281,240,329,0,310],
[262,243,256,260,224,284,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1306, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,281,251,252,281,276,259],
[303,0,316,326,286,295,253,287],
[269,234,0,232,290,255,229,242],
[299,224,318,0,287,304,277,252],
[298,264,260,263,0,260,282,272],
[269,255,295,246,290,0,293,311],
[274,297,321,273,268,257,0,269],
[291,263,308,298,278,239,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1307, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,287,331,261,323,301,282],
[256,0,281,311,270,331,301,305],
[263,269,0,338,284,318,308,245],
[219,239,212,0,264,287,269,258],
[289,280,266,286,0,337,293,289],
[227,219,232,263,213,0,268,269],
[249,249,242,281,257,282,0,272],
[268,245,305,292,261,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1308, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,268,293,269,275,268],
[262,0,248,245,266,244,252,254],
[284,302,0,255,281,283,271,268],
[282,305,295,0,299,286,281,269],
[257,284,269,251,0,269,282,262],
[281,306,267,264,281,0,294,275],
[275,298,279,269,268,256,0,250],
[282,296,282,281,288,275,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1309, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,247,280,265,263,254,293],
[279,0,251,280,246,256,265,262],
[303,299,0,310,262,271,284,277],
[270,270,240,0,238,264,256,265],
[285,304,288,312,0,291,298,268],
[287,294,279,286,259,0,276,271],
[296,285,266,294,252,274,0,270],
[257,288,273,285,282,279,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1310, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,273,266,283,277,276,287],
[279,0,278,280,282,276,271,286],
[277,272,0,283,282,289,278,280],
[284,270,267,0,272,280,259,267],
[267,268,268,278,0,277,281,293],
[273,274,261,270,273,0,281,267],
[274,279,272,291,269,269,0,265],
[263,264,270,283,257,283,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1311, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,298,306,301,291,273,289],
[262,0,275,285,260,288,280,254],
[252,275,0,286,271,267,258,256],
[244,265,264,0,270,277,258,244],
[249,290,279,280,0,268,269,268],
[259,262,283,273,282,0,264,263],
[277,270,292,292,281,286,0,269],
[261,296,294,306,282,287,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1312, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,262,268,261,255,254,267],
[285,0,267,280,272,272,254,267],
[288,283,0,283,276,255,266,276],
[282,270,267,0,264,266,264,277],
[289,278,274,286,0,275,277,287],
[295,278,295,284,275,0,286,286],
[296,296,284,286,273,264,0,287],
[283,283,274,273,263,264,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1313, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,249,251,254,286,248],
[293,0,265,268,273,270,278,263],
[286,285,0,263,278,261,284,255],
[301,282,287,0,281,277,278,269],
[299,277,272,269,0,272,276,272],
[296,280,289,273,278,0,285,277],
[264,272,266,272,274,265,0,259],
[302,287,295,281,278,273,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1314, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,294,291,297,275,253,267],
[260,0,274,270,287,268,265,256],
[256,276,0,276,288,269,274,275],
[259,280,274,0,269,261,260,248],
[253,263,262,281,0,261,268,254],
[275,282,281,289,289,0,287,273],
[297,285,276,290,282,263,0,267],
[283,294,275,302,296,277,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1315, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,265,264,356,384,219,339],
[214,0,241,266,285,288,241,288],
[285,309,0,358,285,359,290,261],
[286,284,192,0,332,261,265,215],
[194,265,265,218,0,195,171,195],
[166,262,191,289,355,0,218,213],
[331,309,260,285,379,332,0,309],
[211,262,289,335,355,337,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1316, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,261,266,273,257,252],
[275,0,274,280,286,293,277,294],
[260,276,0,267,273,281,277,273],
[289,270,283,0,271,311,289,295],
[284,264,277,279,0,284,274,273],
[277,257,269,239,266,0,254,264],
[293,273,273,261,276,296,0,267],
[298,256,277,255,277,286,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1317, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,310,231,255,313,329,278],
[267,0,356,323,308,330,340,339],
[240,194,0,230,192,291,265,197],
[319,227,320,0,259,322,309,279],
[295,242,358,291,0,340,281,281],
[237,220,259,228,210,0,250,201],
[221,210,285,241,269,300,0,252],
[272,211,353,271,269,349,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1318, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,289,275,270,284,282,302],
[247,0,287,276,278,285,276,275],
[261,263,0,269,290,280,262,303],
[275,274,281,0,300,296,241,283],
[280,272,260,250,0,258,277,270],
[266,265,270,254,292,0,256,304],
[268,274,288,309,273,294,0,295],
[248,275,247,267,280,246,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1319, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,290,282,266,287,317],
[259,0,263,275,274,258,279,284],
[271,287,0,300,281,268,288,291],
[260,275,250,0,281,276,257,291],
[268,276,269,269,0,263,282,271],
[284,292,282,274,287,0,292,293],
[263,271,262,293,268,258,0,293],
[233,266,259,259,279,257,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1320, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,272,276,270,292,281],
[277,0,284,275,278,270,300,297],
[287,266,0,280,271,274,283,291],
[278,275,270,0,279,277,320,310],
[274,272,279,271,0,265,288,273],
[280,280,276,273,285,0,300,296],
[258,250,267,230,262,250,0,257],
[269,253,259,240,277,254,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1321, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,262,264,278,271,275,263],
[275,0,265,258,286,282,298,280],
[288,285,0,275,275,276,277,287],
[286,292,275,0,271,262,274,281],
[272,264,275,279,0,265,288,282],
[279,268,274,288,285,0,281,277],
[275,252,273,276,262,269,0,264],
[287,270,263,269,268,273,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1322, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,305,279,249,245,279,254],
[273,0,295,303,292,261,286,269],
[245,255,0,283,279,275,276,282],
[271,247,267,0,280,259,266,262],
[301,258,271,270,0,286,275,273],
[305,289,275,291,264,0,286,272],
[271,264,274,284,275,264,0,277],
[296,281,268,288,277,278,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1323, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,274,271,283,300,281,283],
[264,0,276,267,262,271,262,267],
[276,274,0,270,256,283,278,285],
[279,283,280,0,270,276,247,303],
[267,288,294,280,0,293,279,280],
[250,279,267,274,257,0,274,294],
[269,288,272,303,271,276,0,286],
[267,283,265,247,270,256,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1324, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,266,277,291,283,280,276],
[262,0,255,267,266,269,263,252],
[284,295,0,273,287,268,280,285],
[273,283,277,0,295,294,291,275],
[259,284,263,255,0,260,252,265],
[267,281,282,256,290,0,257,271],
[270,287,270,259,298,293,0,283],
[274,298,265,275,285,279,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1325, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,317,302,272,344,306,310],
[239,0,253,258,243,268,201,223],
[233,297,0,284,308,312,278,299],
[248,292,266,0,269,280,281,242],
[278,307,242,281,0,291,243,294],
[206,282,238,270,259,0,245,235],
[244,349,272,269,307,305,0,252],
[240,327,251,308,256,315,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1326, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,286,276,289,285,263,278],
[272,0,294,268,278,294,277,277],
[264,256,0,249,262,289,256,263],
[274,282,301,0,301,308,283,279],
[261,272,288,249,0,282,268,272],
[265,256,261,242,268,0,268,264],
[287,273,294,267,282,282,0,253],
[272,273,287,271,278,286,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1327, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,280,284,270,277,289,264],
[259,0,275,258,268,262,263,262],
[270,275,0,269,262,265,272,272],
[266,292,281,0,271,276,287,282],
[280,282,288,279,0,272,282,271],
[273,288,285,274,278,0,275,287],
[261,287,278,263,268,275,0,264],
[286,288,278,268,279,263,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1328, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,272,292,278,300,273,277],
[278,0,298,285,279,270,286,271],
[278,252,0,285,239,271,274,275],
[258,265,265,0,270,269,259,271],
[272,271,311,280,0,284,264,291],
[250,280,279,281,266,0,263,261],
[277,264,276,291,286,287,0,285],
[273,279,275,279,259,289,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1329, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,288,286,284,288,274,276],
[250,0,286,253,264,279,260,262],
[262,264,0,259,268,246,246,270],
[264,297,291,0,295,288,264,285],
[266,286,282,255,0,283,268,269],
[262,271,304,262,267,0,267,269],
[276,290,304,286,282,283,0,272],
[274,288,280,265,281,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1330, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,261,308,285,284,279,268],
[278,0,275,318,300,269,278,264],
[289,275,0,313,281,272,287,270],
[242,232,237,0,262,236,243,233],
[265,250,269,288,0,276,253,264],
[266,281,278,314,274,0,286,258],
[271,272,263,307,297,264,0,276],
[282,286,280,317,286,292,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1331, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,295,287,261,301,288,299],
[260,0,278,259,279,297,286,271],
[255,272,0,262,258,290,283,252],
[263,291,288,0,268,277,312,266],
[289,271,292,282,0,323,314,285],
[249,253,260,273,227,0,257,252],
[262,264,267,238,236,293,0,258],
[251,279,298,284,265,298,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1332, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,293,278,259,275,274,255],
[248,0,277,271,250,238,263,274],
[257,273,0,264,258,235,262,260],
[272,279,286,0,277,261,275,289],
[291,300,292,273,0,259,286,268],
[275,312,315,289,291,0,294,275],
[276,287,288,275,264,256,0,268],
[295,276,290,261,282,275,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1333, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,219,278,265,307,262,291],
[305,0,252,279,315,324,303,271],
[331,298,0,267,311,313,300,273],
[272,271,283,0,273,255,310,300],
[285,235,239,277,0,281,277,287],
[243,226,237,295,269,0,270,258],
[288,247,250,240,273,280,0,268],
[259,279,277,250,263,292,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1334, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,253,247,268,249,247,246],
[286,0,283,286,278,256,293,282],
[297,267,0,255,268,263,264,267],
[303,264,295,0,287,267,269,286],
[282,272,282,263,0,273,266,265],
[301,294,287,283,277,0,289,271],
[303,257,286,281,284,261,0,251],
[304,268,283,264,285,279,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1335, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,238,327,272,214,266,291],
[302,0,232,305,273,261,253,285],
[312,318,0,339,294,261,337,299],
[223,245,211,0,221,236,236,238],
[278,277,256,329,0,284,296,295],
[336,289,289,314,266,0,304,319],
[284,297,213,314,254,246,0,295],
[259,265,251,312,255,231,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1336, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,226,310,244,237,266,258],
[253,0,258,334,333,211,289,229],
[324,292,0,355,280,310,326,270],
[240,216,195,0,253,206,250,172],
[306,217,270,297,0,252,237,197],
[313,339,240,344,298,0,301,332],
[284,261,224,300,313,249,0,216],
[292,321,280,378,353,218,334,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1337, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,232,232,270,227,235,244,235],
[318,0,261,301,285,271,285,277],
[318,289,0,296,271,305,271,251],
[280,249,254,0,231,242,254,237],
[323,265,279,319,0,288,266,256],
[315,279,245,308,262,0,270,243],
[306,265,279,296,284,280,0,267],
[315,273,299,313,294,307,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1338, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,301,260,273,302,294,296],
[265,0,271,270,291,280,315,296],
[249,279,0,282,304,281,338,299],
[290,280,268,0,267,293,312,303],
[277,259,246,283,0,290,310,300],
[248,270,269,257,260,0,293,269],
[256,235,212,238,240,257,0,274],
[254,254,251,247,250,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1339, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,283,285,254,283,275,281],
[285,0,294,279,252,286,285,281],
[267,256,0,268,250,271,266,261],
[265,271,282,0,275,297,270,284],
[296,298,300,275,0,299,297,285],
[267,264,279,253,251,0,274,272],
[275,265,284,280,253,276,0,274],
[269,269,289,266,265,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1340, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,386,290,324,244,227,344],
[244,0,302,263,304,308,226,324],
[164,248,0,269,327,247,209,228],
[260,287,281,0,284,265,244,281],
[226,246,223,266,0,184,184,204],
[306,242,303,285,366,0,308,366],
[323,324,341,306,366,242,0,281],
[206,226,322,269,346,184,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1341, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,270,278,276,285,281],
[273,0,289,275,281,287,291,288],
[280,261,0,272,272,299,295,286],
[280,275,278,0,293,274,276,276],
[272,269,278,257,0,256,289,262],
[274,263,251,276,294,0,291,272],
[265,259,255,274,261,259,0,265],
[269,262,264,274,288,278,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1342, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,276,279,291,323,295,267],
[245,0,260,239,266,284,292,251],
[274,290,0,281,268,278,301,268],
[271,311,269,0,296,292,295,281],
[259,284,282,254,0,310,281,263],
[227,266,272,258,240,0,264,222],
[255,258,249,255,269,286,0,227],
[283,299,282,269,287,328,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1343, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,260,238,273,267,283,258],
[289,0,287,293,290,275,288,269],
[290,263,0,277,275,260,281,256],
[312,257,273,0,284,272,257,281],
[277,260,275,266,0,265,276,260],
[283,275,290,278,285,0,292,282],
[267,262,269,293,274,258,0,251],
[292,281,294,269,290,268,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1344, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,293,299,253,289,266,279],
[290,0,274,269,280,310,269,258],
[257,276,0,277,270,302,240,274],
[251,281,273,0,246,284,263,281],
[297,270,280,304,0,285,300,254],
[261,240,248,266,265,0,262,295],
[284,281,310,287,250,288,0,265],
[271,292,276,269,296,255,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1345, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,270,267,262,265,272,275],
[273,0,276,271,270,269,290,280],
[280,274,0,272,276,277,292,268],
[283,279,278,0,275,272,274,274],
[288,280,274,275,0,272,284,301],
[285,281,273,278,278,0,270,285],
[278,260,258,276,266,280,0,283],
[275,270,282,276,249,265,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1346, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,279,279,270,292,259,266],
[305,0,297,275,283,286,281,275],
[271,253,0,259,253,262,252,271],
[271,275,291,0,263,260,279,286],
[280,267,297,287,0,279,310,305],
[258,264,288,290,271,0,280,272],
[291,269,298,271,240,270,0,297],
[284,275,279,264,245,278,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1347, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,276,266,269,272,279],
[281,0,274,288,274,303,251,277],
[274,276,0,264,276,280,275,287],
[274,262,286,0,270,263,272,288],
[284,276,274,280,0,261,261,266],
[281,247,270,287,289,0,281,303],
[278,299,275,278,289,269,0,297],
[271,273,263,262,284,247,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1348, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,295,262,276,263,300],
[260,0,289,280,272,279,263,288],
[267,261,0,272,264,274,272,262],
[255,270,278,0,235,266,248,244],
[288,278,286,315,0,293,274,274],
[274,271,276,284,257,0,258,255],
[287,287,278,302,276,292,0,271],
[250,262,288,306,276,295,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1349, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,272,312,299,303,290,298],
[257,0,251,267,274,318,242,300],
[278,299,0,313,315,295,268,296],
[238,283,237,0,255,286,248,302],
[251,276,235,295,0,278,233,296],
[247,232,255,264,272,0,241,239],
[260,308,282,302,317,309,0,312],
[252,250,254,248,254,311,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1350, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,270,271,267,279,275,259],
[263,0,260,268,251,268,276,307],
[280,290,0,288,263,274,287,278],
[279,282,262,0,270,276,290,269],
[283,299,287,280,0,292,312,272],
[271,282,276,274,258,0,290,267],
[275,274,263,260,238,260,0,260],
[291,243,272,281,278,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1351, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,285,284,285,290,274,273],
[273,0,277,269,298,287,267,275],
[265,273,0,288,284,292,260,249],
[266,281,262,0,280,273,245,263],
[265,252,266,270,0,285,265,263],
[260,263,258,277,265,0,238,267],
[276,283,290,305,285,312,0,260],
[277,275,301,287,287,283,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1352, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,287,273,266,295,291,280],
[243,0,239,272,259,277,286,270],
[263,311,0,280,283,273,322,266],
[277,278,270,0,271,267,300,255],
[284,291,267,279,0,273,303,295],
[255,273,277,283,277,0,293,276],
[259,264,228,250,247,257,0,242],
[270,280,284,295,255,274,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1353, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,252,264,252,260,277,272],
[296,0,285,287,263,285,264,292],
[298,265,0,267,251,265,257,290],
[286,263,283,0,246,271,262,284],
[298,287,299,304,0,286,263,304],
[290,265,285,279,264,0,257,282],
[273,286,293,288,287,293,0,318],
[278,258,260,266,246,268,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1354, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,293,269,267,285,250,269],
[303,0,311,290,269,281,252,290],
[257,239,0,256,256,279,245,261],
[281,260,294,0,285,275,281,279],
[283,281,294,265,0,272,270,274],
[265,269,271,275,278,0,273,270],
[300,298,305,269,280,277,0,293],
[281,260,289,271,276,280,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1355, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,288,300,295,273,261,290],
[259,0,287,259,286,278,277,272],
[262,263,0,271,300,287,275,299],
[250,291,279,0,284,276,267,281],
[255,264,250,266,0,274,237,268],
[277,272,263,274,276,0,278,272],
[289,273,275,283,313,272,0,274],
[260,278,251,269,282,278,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1356, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,257,271,298,257,299,285],
[286,0,275,270,281,276,300,290],
[293,275,0,287,295,269,312,307],
[279,280,263,0,286,268,318,292],
[252,269,255,264,0,270,299,284],
[293,274,281,282,280,0,303,300],
[251,250,238,232,251,247,0,261],
[265,260,243,258,266,250,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1357, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,284,304,293,255,317],
[259,0,267,281,317,259,272,292],
[271,283,0,273,301,286,295,316],
[266,269,277,0,303,283,263,276],
[246,233,249,247,0,248,233,269],
[257,291,264,267,302,0,264,307],
[295,278,255,287,317,286,0,309],
[233,258,234,274,281,243,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1358, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,270,290,259,259,270],
[275,0,285,265,286,279,271,290],
[271,265,0,274,278,264,273,285],
[280,285,276,0,270,270,257,273],
[260,264,272,280,0,266,269,280],
[291,271,286,280,284,0,277,286],
[291,279,277,293,281,273,0,279],
[280,260,265,277,270,264,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1359, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,284,289,269,298,275,304],
[290,0,274,283,270,281,277,295],
[266,276,0,268,290,294,282,289],
[261,267,282,0,250,275,292,287],
[281,280,260,300,0,279,314,288],
[252,269,256,275,271,0,283,277],
[275,273,268,258,236,267,0,276],
[246,255,261,263,262,273,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1360, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,297,260,258,269,279,264],
[295,0,299,285,285,272,288,284],
[253,251,0,246,245,278,266,253],
[290,265,304,0,272,286,296,282],
[292,265,305,278,0,286,279,286],
[281,278,272,264,264,0,290,275],
[271,262,284,254,271,260,0,259],
[286,266,297,268,264,275,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1361, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,319,311,293,252,307,276],
[268,0,308,252,263,255,267,255],
[231,242,0,261,280,291,294,233],
[239,298,289,0,263,286,269,256],
[257,287,270,287,0,275,271,297],
[298,295,259,264,275,0,237,267],
[243,283,256,281,279,313,0,252],
[274,295,317,294,253,283,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1362, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,277,271,309,278,279,277],
[272,0,256,257,275,267,263,259],
[273,294,0,270,284,271,278,293],
[279,293,280,0,281,273,276,288],
[241,275,266,269,0,240,263,268],
[272,283,279,277,310,0,277,272],
[271,287,272,274,287,273,0,276],
[273,291,257,262,282,278,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1363, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,284,266,308,297,253,252],
[272,0,289,265,285,259,245,249],
[266,261,0,265,284,284,253,265],
[284,285,285,0,317,261,276,278],
[242,265,266,233,0,225,219,268],
[253,291,266,289,325,0,284,275],
[297,305,297,274,331,266,0,280],
[298,301,285,272,282,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1364, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,262,284,261,262,267,275],
[277,0,275,296,266,278,284,295],
[288,275,0,285,269,276,285,280],
[266,254,265,0,259,251,259,269],
[289,284,281,291,0,276,271,275],
[288,272,274,299,274,0,279,297],
[283,266,265,291,279,271,0,299],
[275,255,270,281,275,253,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1365, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,263,290,284,291,309],
[288,0,279,278,309,269,304,303],
[274,271,0,292,288,241,284,288],
[287,272,258,0,302,288,282,302],
[260,241,262,248,0,253,281,288],
[266,281,309,262,297,0,273,307],
[259,246,266,268,269,277,0,276],
[241,247,262,248,262,243,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1366, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,270,261,270,265,274,276],
[307,0,272,276,286,283,291,285],
[280,278,0,267,284,273,282,270],
[289,274,283,0,279,258,281,273],
[280,264,266,271,0,271,283,278],
[285,267,277,292,279,0,279,275],
[276,259,268,269,267,271,0,260],
[274,265,280,277,272,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1367, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,321,283,272,264,293,279],
[279,0,308,289,280,283,288,262],
[229,242,0,226,221,222,252,242],
[267,261,324,0,269,267,296,263],
[278,270,329,281,0,283,266,270],
[286,267,328,283,267,0,268,249],
[257,262,298,254,284,282,0,248],
[271,288,308,287,280,301,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1368, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,279,290,288,264,273,291],
[256,0,261,273,279,252,245,261],
[271,289,0,285,286,269,280,298],
[260,277,265,0,277,273,268,278],
[262,271,264,273,0,270,270,281],
[286,298,281,277,280,0,272,281],
[277,305,270,282,280,278,0,284],
[259,289,252,272,269,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1369, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,279,270,263,270,272,300],
[282,0,285,278,306,271,270,314],
[271,265,0,266,271,263,257,268],
[280,272,284,0,261,268,269,311],
[287,244,279,289,0,279,288,307],
[280,279,287,282,271,0,274,303],
[278,280,293,281,262,276,0,318],
[250,236,282,239,243,247,232,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1370, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,264,267,264,287,260,277],
[294,0,275,299,308,309,261,301],
[286,275,0,273,289,295,270,285],
[283,251,277,0,296,294,278,283],
[286,242,261,254,0,259,228,270],
[263,241,255,256,291,0,253,267],
[290,289,280,272,322,297,0,296],
[273,249,265,267,280,283,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1371, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,273,280,300,265,301,276],
[249,0,257,234,267,269,288,261],
[277,293,0,266,304,263,296,267],
[270,316,284,0,304,268,283,287],
[250,283,246,246,0,269,282,245],
[285,281,287,282,281,0,286,275],
[249,262,254,267,268,264,0,263],
[274,289,283,263,305,275,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1372, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,281,280,274,270,293],
[276,0,272,290,276,302,285,295],
[272,278,0,281,284,268,270,282],
[269,260,269,0,274,278,265,279],
[270,274,266,276,0,264,273,263],
[276,248,282,272,286,0,269,271],
[280,265,280,285,277,281,0,291],
[257,255,268,271,287,279,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1373, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,262,281,270,272,278,288],
[273,0,293,306,304,280,291,302],
[288,257,0,280,267,273,277,286],
[269,244,270,0,289,274,277,274],
[280,246,283,261,0,266,268,287],
[278,270,277,276,284,0,281,298],
[272,259,273,273,282,269,0,273],
[262,248,264,276,263,252,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1374, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,281,290,278,274,270,265],
[272,0,283,287,269,275,284,255],
[269,267,0,280,277,280,264,273],
[260,263,270,0,269,277,267,267],
[272,281,273,281,0,265,268,277],
[276,275,270,273,285,0,277,275],
[280,266,286,283,282,273,0,280],
[285,295,277,283,273,275,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1375, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,293,314,273,312,294,314],
[234,0,287,291,276,270,282,260],
[257,263,0,275,254,258,260,281],
[236,259,275,0,283,254,265,255],
[277,274,296,267,0,300,273,312],
[238,280,292,296,250,0,266,288],
[256,268,290,285,277,284,0,280],
[236,290,269,295,238,262,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1376, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,270,307,240,309,308,266],
[247,0,193,326,240,202,215,220],
[280,357,0,335,237,277,310,299],
[243,224,215,0,218,251,255,269],
[310,310,313,332,0,327,303,242],
[241,348,273,299,223,0,273,264],
[242,335,240,295,247,277,0,276],
[284,330,251,281,308,286,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1377, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,251,272,252,255,262,259],
[295,0,281,278,273,268,281,275],
[299,269,0,296,297,285,287,298],
[278,272,254,0,274,277,270,261],
[298,277,253,276,0,287,255,268],
[295,282,265,273,263,0,275,282],
[288,269,263,280,295,275,0,281],
[291,275,252,289,282,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1378, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,266,283,255,278,285,308],
[283,0,289,279,282,274,277,289],
[284,261,0,254,267,273,267,285],
[267,271,296,0,269,285,274,278],
[295,268,283,281,0,283,283,293],
[272,276,277,265,267,0,266,283],
[265,273,283,276,267,284,0,282],
[242,261,265,272,257,267,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1379, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,309,282,272,264,290,265],
[271,0,277,276,255,285,296,271],
[241,273,0,292,258,270,279,270],
[268,274,258,0,252,261,298,273],
[278,295,292,298,0,269,285,281],
[286,265,280,289,281,0,279,282],
[260,254,271,252,265,271,0,265],
[285,279,280,277,269,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1380, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,254,311,262,311,261],
[259,0,251,210,226,249,246,251],
[275,299,0,302,298,274,287,245],
[296,340,248,0,274,243,265,253],
[239,324,252,276,0,242,271,262],
[288,301,276,307,308,0,238,292],
[239,304,263,285,279,312,0,301],
[289,299,305,297,288,258,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1381, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,282,265,264,276,252,270],
[290,0,308,294,293,310,262,292],
[268,242,0,256,260,272,255,257],
[285,256,294,0,293,291,259,272],
[286,257,290,257,0,294,247,269],
[274,240,278,259,256,0,237,237],
[298,288,295,291,303,313,0,275],
[280,258,293,278,281,313,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1382, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,239,199,240,286,240,243,245],
[311,0,223,310,289,267,289,267],
[351,327,0,284,396,304,307,264],
[310,240,266,0,286,286,310,289],
[264,261,154,264,0,263,242,197],
[310,283,246,264,287,0,204,247],
[307,261,243,240,308,346,0,308],
[305,283,286,261,353,303,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1383, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,302,297,274,284,313,297],
[270,0,303,291,273,302,286,273],
[248,247,0,274,260,282,291,257],
[253,259,276,0,265,278,282,278],
[276,277,290,285,0,272,303,266],
[266,248,268,272,278,0,296,269],
[237,264,259,268,247,254,0,247],
[253,277,293,272,284,281,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1384, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,265,293,278,267,297,293],
[286,0,273,274,288,275,288,298],
[285,277,0,274,275,266,279,296],
[257,276,276,0,265,251,285,279],
[272,262,275,285,0,265,293,291],
[283,275,284,299,285,0,299,306],
[253,262,271,265,257,251,0,279],
[257,252,254,271,259,244,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1385, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,291,282,273,297,275,297],
[253,0,274,274,277,291,247,276],
[259,276,0,266,280,258,266,283],
[268,276,284,0,291,283,283,281],
[277,273,270,259,0,267,245,274],
[253,259,292,267,283,0,268,280],
[275,303,284,267,305,282,0,300],
[253,274,267,269,276,270,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1386, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,271,273,274,276,259],
[262,0,262,246,242,256,291,253],
[281,288,0,278,289,272,308,272],
[279,304,272,0,263,264,303,281],
[277,308,261,287,0,265,297,293],
[276,294,278,286,285,0,295,253],
[274,259,242,247,253,255,0,243],
[291,297,278,269,257,297,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1387, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,264,308,276,287,282,274],
[275,0,272,275,267,283,258,245],
[286,278,0,277,307,274,262,276],
[242,275,273,0,263,268,264,244],
[274,283,243,287,0,276,279,238],
[263,267,276,282,274,0,289,261],
[268,292,288,286,271,261,0,284],
[276,305,274,306,312,289,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1388, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,286,263,275,264,272,281],
[275,0,283,282,287,282,290,293],
[264,267,0,264,279,275,260,274],
[287,268,286,0,279,270,262,274],
[275,263,271,271,0,256,269,279],
[286,268,275,280,294,0,271,292],
[278,260,290,288,281,279,0,282],
[269,257,276,276,271,258,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1389, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,254,255,251,250,266,244],
[287,0,286,282,295,284,276,265],
[296,264,0,299,268,236,279,318],
[295,268,251,0,255,258,275,274],
[299,255,282,295,0,273,300,278],
[300,266,314,292,277,0,281,309],
[284,274,271,275,250,269,0,269],
[306,285,232,276,272,241,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1390, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,273,268,300,278,308,293],
[262,0,258,243,268,250,273,257],
[277,292,0,270,294,295,280,272],
[282,307,280,0,295,285,284,270],
[250,282,256,255,0,262,259,249],
[272,300,255,265,288,0,275,278],
[242,277,270,266,291,275,0,253],
[257,293,278,280,301,272,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1391, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,283,247,270,266,253,252],
[279,0,269,273,264,267,240,254],
[267,281,0,263,246,279,274,256],
[303,277,287,0,265,305,298,291],
[280,286,304,285,0,289,297,264],
[284,283,271,245,261,0,269,242],
[297,310,276,252,253,281,0,258],
[298,296,294,259,286,308,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1392, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,68,342,135,67,415,138,137],
[482,0,414,275,275,414,275,413],
[208,136,0,139,139,276,139,276],
[415,275,411,0,346,415,277,346],
[483,275,411,204,0,483,343,344],
[135,136,274,135,67,0,67,272],
[412,275,411,273,207,483,0,275],
[413,137,274,204,206,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1393, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,290,276,291,275,301],
[288,0,282,269,287,300,293,306],
[277,268,0,264,259,270,263,271],
[260,281,286,0,290,273,283,295],
[274,263,291,260,0,274,275,299],
[259,250,280,277,276,0,274,269],
[275,257,287,267,275,276,0,285],
[249,244,279,255,251,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1394, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,237,240,254,265,284,260,274],
[313,0,287,274,284,304,296,296],
[310,263,0,277,266,292,273,272],
[296,276,273,0,279,283,287,272],
[285,266,284,271,0,288,295,305],
[266,246,258,267,262,0,257,262],
[290,254,277,263,255,293,0,285],
[276,254,278,278,245,288,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1395, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,280,275,257,271,286,271],
[281,0,274,269,276,246,283,279],
[270,276,0,269,261,274,289,265],
[275,281,281,0,262,251,281,271],
[293,274,289,288,0,288,296,283],
[279,304,276,299,262,0,283,268],
[264,267,261,269,254,267,0,261],
[279,271,285,279,267,282,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1396, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,290,290,279,276,281,283],
[275,0,276,276,280,267,271,269],
[260,274,0,275,277,259,280,270],
[260,274,275,0,268,255,275,255],
[271,270,273,282,0,259,280,266],
[274,283,291,295,291,0,285,285],
[269,279,270,275,270,265,0,249],
[267,281,280,295,284,265,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1397, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,219,269,265,285,283,278],
[245,0,229,245,233,289,254,227],
[331,321,0,274,280,274,285,254],
[281,305,276,0,273,282,293,288],
[285,317,270,277,0,311,290,257],
[265,261,276,268,239,0,287,271],
[267,296,265,257,260,263,0,259],
[272,323,296,262,293,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1398, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,264,270,296,263,243,277],
[261,0,266,263,294,279,244,268],
[286,284,0,300,298,297,262,296],
[280,287,250,0,296,283,278,278],
[254,256,252,254,0,265,239,263],
[287,271,253,267,285,0,237,275],
[307,306,288,272,311,313,0,290],
[273,282,254,272,287,275,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1399, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,277,281,266,291,275,282],
[286,0,278,273,287,298,295,280],
[273,272,0,266,283,304,284,277],
[269,277,284,0,273,299,286,289],
[284,263,267,277,0,293,265,262],
[259,252,246,251,257,0,283,264],
[275,255,266,264,285,267,0,270],
[268,270,273,261,288,286,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1400, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,272,278,288,288,282,293],
[251,0,253,252,270,272,260,274],
[278,297,0,293,280,294,268,283],
[272,298,257,0,295,271,290,279],
[262,280,270,255,0,293,275,275],
[262,278,256,279,257,0,259,263],
[268,290,282,260,275,291,0,283],
[257,276,267,271,275,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1401, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,290,280,288,288,277,295],
[279,0,278,283,296,279,274,284],
[260,272,0,262,267,264,265,282],
[270,267,288,0,275,270,280,289],
[262,254,283,275,0,264,280,296],
[262,271,286,280,286,0,279,303],
[273,276,285,270,270,271,0,292],
[255,266,268,261,254,247,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1402, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,263,266,271,271,272,315],
[248,0,253,254,253,268,254,284],
[287,297,0,288,275,276,263,307],
[284,296,262,0,272,273,264,288],
[279,297,275,278,0,270,275,303],
[279,282,274,277,280,0,275,317],
[278,296,287,286,275,275,0,291],
[235,266,243,262,247,233,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1403, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,273,246,285,267,261,220],
[312,0,296,284,315,272,272,276],
[277,254,0,263,284,248,275,254],
[304,266,287,0,286,250,287,253],
[265,235,266,264,0,249,245,242],
[283,278,302,300,301,0,290,273],
[289,278,275,263,305,260,0,277],
[330,274,296,297,308,277,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1404, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,311,271,350,330,346,274],
[292,0,309,292,372,311,328,255],
[239,241,0,256,313,314,310,273],
[279,258,294,0,334,318,289,278],
[200,178,237,216,0,256,292,195],
[220,239,236,232,294,0,305,236],
[204,222,240,261,258,245,0,278],
[276,295,277,272,355,314,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1405, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,313,280,276,284,295,288],
[276,0,318,312,228,252,286,274],
[237,232,0,216,256,219,261,234],
[270,238,334,0,232,254,295,243],
[274,322,294,318,0,264,343,303],
[266,298,331,296,286,0,303,278],
[255,264,289,255,207,247,0,251],
[262,276,316,307,247,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1406, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,238,264,238,264,303,214],
[288,0,285,286,302,315,362,265],
[312,265,0,301,278,293,304,277],
[286,264,249,0,293,275,287,273],
[312,248,272,257,0,275,346,253],
[286,235,257,275,275,0,326,269],
[247,188,246,263,204,224,0,222],
[336,285,273,277,297,281,328,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1407, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,329,283,292,315,276,314],
[284,0,288,299,292,281,250,302],
[221,262,0,252,298,263,225,264],
[267,251,298,0,310,283,250,303],
[258,258,252,240,0,253,223,284],
[235,269,287,267,297,0,216,275],
[274,300,325,300,327,334,0,326],
[236,248,286,247,266,275,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1408, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,300,296,291,289,262,255],
[277,0,260,271,312,276,280,274],
[250,290,0,326,317,305,280,292],
[254,279,224,0,300,283,241,278],
[259,238,233,250,0,262,227,254],
[261,274,245,267,288,0,236,252],
[288,270,270,309,323,314,0,267],
[295,276,258,272,296,298,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1409, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,367,294,328,257,258,186,364],
[183,0,217,216,255,143,185,289],
[256,333,0,325,257,290,223,292],
[222,334,225,0,297,221,263,260],
[293,295,293,253,0,330,261,255],
[292,407,260,329,220,0,295,293],
[364,365,327,287,289,255,0,324],
[186,261,258,290,295,257,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1410, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,265,255,278,274,249,256],
[290,0,264,292,293,276,269,259],
[285,286,0,299,308,285,278,259],
[295,258,251,0,270,274,263,270],
[272,257,242,280,0,266,267,270],
[276,274,265,276,284,0,267,269],
[301,281,272,287,283,283,0,276],
[294,291,291,280,280,281,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1411, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,268,294,294,287,274],
[278,0,276,275,286,272,290,298],
[285,274,0,245,282,270,271,292],
[282,275,305,0,286,276,300,293],
[256,264,268,264,0,263,255,271],
[256,278,280,274,287,0,258,287],
[263,260,279,250,295,292,0,303],
[276,252,258,257,279,263,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1412, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,212,337,214,274,305,308,215],
[338,0,369,277,216,338,430,277],
[213,181,0,151,184,181,245,183],
[336,273,399,0,307,275,429,305],
[276,334,366,243,0,274,399,336],
[245,212,369,275,276,0,367,244],
[242,120,305,121,151,183,0,214],
[335,273,367,245,214,306,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1413, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,285,292,264,293,263,291],
[302,0,315,318,316,264,308,325],
[265,235,0,306,265,284,252,289],
[258,232,244,0,256,254,295,298],
[286,234,285,294,0,241,263,262],
[257,286,266,296,309,0,308,289],
[287,242,298,255,287,242,0,269],
[259,225,261,252,288,261,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1414, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,281,253,266,263,278,266],
[282,0,291,257,273,259,287,265],
[269,259,0,270,263,276,277,270],
[297,293,280,0,288,272,297,267],
[284,277,287,262,0,272,278,265],
[287,291,274,278,278,0,275,280],
[272,263,273,253,272,275,0,272],
[284,285,280,283,285,270,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1415, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,298,275,288,284,285,299],
[256,0,285,278,262,281,289,267],
[252,265,0,274,262,276,296,279],
[275,272,276,0,270,299,288,269],
[262,288,288,280,0,286,302,292],
[266,269,274,251,264,0,291,270],
[265,261,254,262,248,259,0,256],
[251,283,271,281,258,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1416, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,296,270,267,261,274,262],
[281,0,295,295,286,269,272,274],
[254,255,0,276,260,256,275,267],
[280,255,274,0,255,255,263,257],
[283,264,290,295,0,271,282,282],
[289,281,294,295,279,0,279,269],
[276,278,275,287,268,271,0,274],
[288,276,283,293,268,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1417, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,301,272,285,281,290,281],
[266,0,300,278,268,258,266,275],
[249,250,0,268,267,281,259,278],
[278,272,282,0,297,268,278,293],
[265,282,283,253,0,269,281,274],
[269,292,269,282,281,0,291,286],
[260,284,291,272,269,259,0,266],
[269,275,272,257,276,264,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1418, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,253,274,250,264,277,247],
[277,0,257,285,270,276,288,246],
[297,293,0,290,270,278,292,263],
[276,265,260,0,273,258,277,257],
[300,280,280,277,0,281,293,250],
[286,274,272,292,269,0,304,277],
[273,262,258,273,257,246,0,253],
[303,304,287,293,300,273,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1419, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,274,291,292,272,290,285],
[280,0,262,262,275,272,288,296],
[276,288,0,270,291,271,310,294],
[259,288,280,0,279,276,282,272],
[258,275,259,271,0,245,274,265],
[278,278,279,274,305,0,305,284],
[260,262,240,268,276,245,0,265],
[265,254,256,278,285,266,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1420, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,271,289,275,276,270,264],
[273,0,272,304,284,285,267,260],
[279,278,0,293,265,274,269,263],
[261,246,257,0,263,263,249,250],
[275,266,285,287,0,267,247,264],
[274,265,276,287,283,0,264,252],
[280,283,281,301,303,286,0,275],
[286,290,287,300,286,298,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1421, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,342,247,282,215,266,275],
[255,0,263,230,203,219,268,270],
[208,287,0,179,279,221,229,223],
[303,320,371,0,324,222,309,282],
[268,347,271,226,0,241,273,313],
[335,331,329,328,309,0,268,274],
[284,282,321,241,277,282,0,264],
[275,280,327,268,237,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1422, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,254,293,298,263,273,262],
[280,0,265,236,290,257,288,272],
[296,285,0,285,315,283,275,262],
[257,314,265,0,301,275,292,264],
[252,260,235,249,0,246,257,244],
[287,293,267,275,304,0,284,281],
[277,262,275,258,293,266,0,283],
[288,278,288,286,306,269,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1423, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,276,276,139,137,414,275],
[274,0,136,136,0,0,274,274],
[274,414,0,411,138,138,274,138],
[274,414,139,0,138,138,413,138],
[411,550,412,412,0,275,550,411],
[413,550,412,412,275,0,413,550],
[136,276,276,137,0,137,0,137],
[275,276,412,412,139,0,413,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1424, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,281,279,260,286,273,271],
[280,0,262,263,267,273,259,268],
[269,288,0,287,265,270,284,258],
[271,287,263,0,279,278,271,272],
[290,283,285,271,0,266,280,274],
[264,277,280,272,284,0,264,265],
[277,291,266,279,270,286,0,276],
[279,282,292,278,276,285,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1425, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,271,270,254,281,279,253],
[267,0,287,272,272,270,288,271],
[279,263,0,268,269,288,295,268],
[280,278,282,0,284,287,303,275],
[296,278,281,266,0,276,296,281],
[269,280,262,263,274,0,275,267],
[271,262,255,247,254,275,0,249],
[297,279,282,275,269,283,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1426, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,266,281,279,277,274,280],
[282,0,293,278,279,272,276,266],
[284,257,0,277,271,289,281,280],
[269,272,273,0,286,278,259,277],
[271,271,279,264,0,283,269,279],
[273,278,261,272,267,0,272,279],
[276,274,269,291,281,278,0,256],
[270,284,270,273,271,271,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1427, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,301,308,304,309,287,275],
[263,0,309,292,262,263,240,276],
[249,241,0,278,271,251,250,304],
[242,258,272,0,234,268,224,273],
[246,288,279,316,0,287,259,285],
[241,287,299,282,263,0,291,295],
[263,310,300,326,291,259,0,316],
[275,274,246,277,265,255,234,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1428, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,303,270,270,296,286,271],
[259,0,311,305,279,309,306,289],
[247,239,0,249,271,276,271,241],
[280,245,301,0,249,284,285,250],
[280,271,279,301,0,286,271,265],
[254,241,274,266,264,0,256,220],
[264,244,279,265,279,294,0,265],
[279,261,309,300,285,330,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1429, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,260,235,258,253,260,253],
[266,0,250,248,248,248,265,243],
[290,300,0,256,296,266,291,271],
[315,302,294,0,281,302,273,277],
[292,302,254,269,0,277,277,274],
[297,302,284,248,273,0,276,274],
[290,285,259,277,273,274,0,264],
[297,307,279,273,276,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1430, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,261,269,273,256,263,256],
[293,0,281,268,273,265,257,273],
[289,269,0,252,281,263,277,280],
[281,282,298,0,278,284,270,286],
[277,277,269,272,0,270,243,273],
[294,285,287,266,280,0,271,285],
[287,293,273,280,307,279,0,271],
[294,277,270,264,277,265,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1431, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,285,280,258,257,264],
[277,0,263,279,281,268,263,267],
[275,287,0,282,279,262,257,273],
[265,271,268,0,256,263,259,270],
[270,269,271,294,0,265,277,244],
[292,282,288,287,285,0,264,276],
[293,287,293,291,273,286,0,265],
[286,283,277,280,306,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1432, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,238,254,245,256,234,246,227],
[312,0,282,278,288,258,292,253],
[296,268,0,286,291,293,271,278],
[305,272,264,0,256,269,320,222],
[294,262,259,294,0,250,250,231],
[316,292,257,281,300,0,296,254],
[304,258,279,230,300,254,0,228],
[323,297,272,328,319,296,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1433, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,278,281,256,277,272,265],
[264,0,272,271,259,274,270,243],
[272,278,0,280,283,295,277,280],
[269,279,270,0,284,269,254,278],
[294,291,267,266,0,271,265,279],
[273,276,255,281,279,0,277,266],
[278,280,273,296,285,273,0,276],
[285,307,270,272,271,284,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1434, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,284,259,263,270,265,266],
[267,0,268,252,257,261,261,264],
[266,282,0,261,258,274,256,265],
[291,298,289,0,291,293,279,274],
[287,293,292,259,0,270,251,258],
[280,289,276,257,280,0,277,257],
[285,289,294,271,299,273,0,276],
[284,286,285,276,292,293,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1435, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,293,287,288,268,259,292],
[251,0,297,308,279,250,255,274],
[257,253,0,226,243,249,238,231],
[263,242,324,0,294,246,243,296],
[262,271,307,256,0,260,288,257],
[282,300,301,304,290,0,286,271],
[291,295,312,307,262,264,0,288],
[258,276,319,254,293,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1436, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,247,275,249,258,289,281],
[305,0,275,299,278,301,297,311],
[303,275,0,307,290,287,312,316],
[275,251,243,0,266,272,264,266],
[301,272,260,284,0,269,285,285],
[292,249,263,278,281,0,273,269],
[261,253,238,286,265,277,0,287],
[269,239,234,284,265,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1437, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,262,266,265,276,270],
[281,0,280,291,283,290,301,273],
[282,270,0,274,276,262,306,261],
[288,259,276,0,274,253,276,276],
[284,267,274,276,0,276,288,269],
[285,260,288,297,274,0,290,285],
[274,249,244,274,262,260,0,263],
[280,277,289,274,281,265,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1438, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,265,276,262,267,256,280],
[287,0,269,283,271,273,258,281],
[285,281,0,265,259,268,260,276],
[274,267,285,0,285,281,268,278],
[288,279,291,265,0,281,286,289],
[283,277,282,269,269,0,285,279],
[294,292,290,282,264,265,0,272],
[270,269,274,272,261,271,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1439, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,289,269,282,261,291,273],
[283,0,257,276,269,255,284,272],
[261,293,0,288,281,275,295,271],
[281,274,262,0,264,271,288,286],
[268,281,269,286,0,267,306,264],
[289,295,275,279,283,0,283,270],
[259,266,255,262,244,267,0,253],
[277,278,279,264,286,280,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1440, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,283,247,218,277,284,280],
[257,0,284,228,268,259,247,262],
[267,266,0,242,249,217,251,240],
[303,322,308,0,304,287,270,288],
[332,282,301,246,0,300,299,285],
[273,291,333,263,250,0,278,262],
[266,303,299,280,251,272,0,264],
[270,288,310,262,265,288,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1441, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,285,272,277,302,262,251],
[243,0,257,243,265,248,204,252],
[265,293,0,262,276,269,260,277],
[278,307,288,0,288,308,277,266],
[273,285,274,262,0,257,245,292],
[248,302,281,242,293,0,242,265],
[288,346,290,273,305,308,0,290],
[299,298,273,284,258,285,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1442, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,313,280,271,286,277,288,291],
[237,0,219,234,256,240,265,238],
[270,331,0,274,270,285,301,282],
[279,316,276,0,251,248,310,257],
[264,294,280,299,0,261,287,317],
[273,310,265,302,289,0,302,275],
[262,285,249,240,263,248,0,257],
[259,312,268,293,233,275,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1443, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,293,263,267,274,295,282],
[280,0,280,248,283,278,260,242],
[257,270,0,251,275,233,242,262],
[287,302,299,0,275,290,297,271],
[283,267,275,275,0,269,262,253],
[276,272,317,260,281,0,280,267],
[255,290,308,253,288,270,0,269],
[268,308,288,279,297,283,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1444, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,295,282,291,274,293,318],
[258,0,275,272,283,283,291,300],
[255,275,0,275,301,281,296,302],
[268,278,275,0,285,303,277,299],
[259,267,249,265,0,276,260,286],
[276,267,269,247,274,0,292,291],
[257,259,254,273,290,258,0,295],
[232,250,248,251,264,259,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1445, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,267,275,289,283,271,270],
[265,0,258,256,270,253,259,274],
[283,292,0,272,284,289,276,271],
[275,294,278,0,280,293,286,279],
[261,280,266,270,0,286,266,267],
[267,297,261,257,264,0,248,263],
[279,291,274,264,284,302,0,273],
[280,276,279,271,283,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1446, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,307,286,279,309,284],
[284,0,284,292,275,275,289,276],
[288,266,0,289,253,270,291,277],
[243,258,261,0,262,237,283,267],
[264,275,297,288,0,291,286,283],
[271,275,280,313,259,0,282,279],
[241,261,259,267,264,268,0,253],
[266,274,273,283,267,271,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1447, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,277,265,273,268,259,273],
[265,0,276,252,258,241,241,255],
[273,274,0,266,241,253,263,263],
[285,298,284,0,275,288,260,281],
[277,292,309,275,0,272,276,278],
[282,309,297,262,278,0,296,281],
[291,309,287,290,274,254,0,304],
[277,295,287,269,272,269,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1448, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,306,306,317,326,275,277],
[252,0,299,284,303,292,282,290],
[244,251,0,279,309,268,239,257],
[244,266,271,0,285,272,251,220],
[233,247,241,265,0,269,253,259],
[224,258,282,278,281,0,240,230],
[275,268,311,299,297,310,0,263],
[273,260,293,330,291,320,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1449, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,314,251,293,293,290,309,309],
[236,0,237,266,276,276,254,307],
[299,313,0,296,269,287,288,291],
[257,284,254,0,287,277,268,293],
[257,274,281,263,0,295,283,300],
[260,274,263,273,255,0,282,260],
[241,296,262,282,267,268,0,276],
[241,243,259,257,250,290,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1450, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,261,275,311,263,275,277],
[289,0,283,254,256,255,234,218],
[289,267,0,252,308,275,292,265],
[275,296,298,0,303,281,280,283],
[239,294,242,247,0,267,257,244],
[287,295,275,269,283,0,285,296],
[275,316,258,270,293,265,0,270],
[273,332,285,267,306,254,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1451, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,295,286,271,289,280,290],
[265,0,262,259,265,275,274,274],
[255,288,0,272,287,280,264,279],
[264,291,278,0,262,280,264,302],
[279,285,263,288,0,297,285,276],
[261,275,270,270,253,0,271,293],
[270,276,286,286,265,279,0,307],
[260,276,271,248,274,257,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1452, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,301,312,271,286,306,283],
[281,0,272,301,247,258,265,247],
[249,278,0,286,224,269,284,248],
[238,249,264,0,275,261,278,235],
[279,303,326,275,0,300,307,254],
[264,292,281,289,250,0,296,258],
[244,285,266,272,243,254,0,239],
[267,303,302,315,296,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1453, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,259,272,279,250,279,247],
[289,0,275,292,278,280,281,258],
[291,275,0,270,276,280,274,258],
[278,258,280,0,268,264,287,277],
[271,272,274,282,0,276,280,255],
[300,270,270,286,274,0,287,267],
[271,269,276,263,270,263,0,253],
[303,292,292,273,295,283,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1454, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,259,232,253,265,260,248],
[274,0,280,232,262,271,279,256],
[291,270,0,276,283,290,257,279],
[318,318,274,0,293,268,284,289],
[297,288,267,257,0,266,287,231],
[285,279,260,282,284,0,258,268],
[290,271,293,266,263,292,0,246],
[302,294,271,261,319,282,304,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1455, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,297,259,274,261,276,276],
[280,0,283,278,287,279,273,266],
[253,267,0,259,266,257,260,256],
[291,272,291,0,291,295,305,284],
[276,263,284,259,0,286,296,285],
[289,271,293,255,264,0,290,275],
[274,277,290,245,254,260,0,252],
[274,284,294,266,265,275,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1456, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,290,264,327,266,315,298],
[235,0,271,262,288,267,255,272],
[260,279,0,270,294,275,285,291],
[286,288,280,0,326,243,305,289],
[223,262,256,224,0,237,289,253],
[284,283,275,307,313,0,285,304],
[235,295,265,245,261,265,0,274],
[252,278,259,261,297,246,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1457, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,272,279,294,285,287,280],
[260,0,269,267,282,278,269,281],
[278,281,0,272,293,291,278,290],
[271,283,278,0,283,287,274,269],
[256,268,257,267,0,277,264,263],
[265,272,259,263,273,0,284,258],
[263,281,272,276,286,266,0,275],
[270,269,260,281,287,292,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1458, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,300,277,294,301,297,275],
[266,0,290,285,281,266,266,264],
[250,260,0,266,273,257,273,261],
[273,265,284,0,278,277,273,270],
[256,269,277,272,0,269,276,273],
[249,284,293,273,281,0,280,283],
[253,284,277,277,274,270,0,263],
[275,286,289,280,277,267,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1459, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,289,275,271,280,290,281],
[258,0,270,281,269,285,274,284],
[261,280,0,277,277,282,283,283],
[275,269,273,0,271,276,278,285],
[279,281,273,279,0,281,272,286],
[270,265,268,274,269,0,267,279],
[260,276,267,272,278,283,0,285],
[269,266,267,265,264,271,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1460, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,277,280,267,288,260,269],
[278,0,296,295,298,268,275,279],
[273,254,0,282,253,282,266,277],
[270,255,268,0,255,249,234,282],
[283,252,297,295,0,272,275,296],
[262,282,268,301,278,0,291,293],
[290,275,284,316,275,259,0,281],
[281,271,273,268,254,257,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1461, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,258,275,289,284,289,286],
[253,0,265,270,292,256,247,288],
[292,285,0,266,280,266,265,298],
[275,280,284,0,282,278,281,268],
[261,258,270,268,0,255,260,270],
[266,294,284,272,295,0,279,286],
[261,303,285,269,290,271,0,293],
[264,262,252,282,280,264,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1462, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,250,276,264,290,286,222,231],
[300,0,300,289,302,273,281,277],
[274,250,0,284,277,273,253,246],
[286,261,266,0,296,250,236,245],
[260,248,273,254,0,234,230,248],
[264,277,277,300,316,0,256,258],
[328,269,297,314,320,294,0,272],
[319,273,304,305,302,292,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1463, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,291,273,326,296,311,284],
[275,0,255,293,291,284,274,277],
[259,295,0,305,326,286,322,283],
[277,257,245,0,295,292,283,248],
[224,259,224,255,0,262,251,257],
[254,266,264,258,288,0,293,270],
[239,276,228,267,299,257,0,269],
[266,273,267,302,293,280,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1464, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,225,313,316,276,331,278],
[264,0,260,274,292,207,247,297],
[325,290,0,315,280,263,273,309],
[237,276,235,0,333,223,264,310],
[234,258,270,217,0,217,229,287],
[274,343,287,327,333,0,274,335],
[219,303,277,286,321,276,0,295],
[272,253,241,240,263,215,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1465, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,266,272,270,302,271,268],
[247,0,256,250,260,250,265,206],
[284,294,0,258,312,274,300,301],
[278,300,292,0,281,243,286,237],
[280,290,238,269,0,262,268,258],
[248,300,276,307,288,0,270,239],
[279,285,250,264,282,280,0,247],
[282,344,249,313,292,311,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1466, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,260,239,293,259,275,273],
[279,0,276,241,242,269,258,265],
[290,274,0,235,275,251,290,275],
[311,309,315,0,285,279,287,269],
[257,308,275,265,0,268,282,281],
[291,281,299,271,282,0,299,298],
[275,292,260,263,268,251,0,296],
[277,285,275,281,269,252,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1467, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,237,227,281,269,258,272],
[255,0,211,231,225,278,290,238],
[313,339,0,255,323,286,270,281],
[323,319,295,0,336,311,243,291],
[269,325,227,214,0,270,214,241],
[281,272,264,239,280,0,287,255],
[292,260,280,307,336,263,0,287],
[278,312,269,259,309,295,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1468, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,267,271,257,276,287],
[281,0,269,256,270,271,268,294],
[278,281,0,267,270,266,256,299],
[283,294,283,0,285,265,291,311],
[279,280,280,265,0,256,276,277],
[293,279,284,285,294,0,259,281],
[274,282,294,259,274,291,0,284],
[263,256,251,239,273,269,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1469, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,403,303,239,354,303,368,372],
[147,0,241,225,242,220,259,229],
[247,309,0,324,257,285,279,293],
[311,325,226,0,293,274,293,324],
[196,308,293,257,0,321,275,324],
[247,330,265,276,229,0,298,233],
[182,291,271,257,275,252,0,307],
[178,321,257,226,226,317,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1470, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,288,297,288,280,294,280],
[275,0,288,283,280,265,289,265],
[262,262,0,271,262,265,257,261],
[253,267,279,0,265,267,274,272],
[262,270,288,285,0,271,266,281],
[270,285,285,283,279,0,283,275],
[256,261,293,276,284,267,0,277],
[270,285,289,278,269,275,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1471, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,279,274,282,293,261,263],
[267,0,326,297,309,283,247,296],
[271,224,0,225,293,278,236,297],
[276,253,325,0,268,295,292,266],
[268,241,257,282,0,264,211,221],
[257,267,272,255,286,0,240,261],
[289,303,314,258,339,310,0,312],
[287,254,253,284,329,289,238,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1472, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,295,257,257,293,237,271],
[314,0,279,276,333,296,275,367],
[255,271,0,292,293,330,274,326],
[293,274,258,0,274,312,238,367],
[293,217,257,276,0,273,255,272],
[257,254,220,238,277,0,238,253],
[313,275,276,312,295,312,0,274],
[279,183,224,183,278,297,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1473, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,291,280,289,287,308,281],
[279,0,275,264,288,276,286,255],
[259,275,0,244,260,253,277,237],
[270,286,306,0,294,285,301,284],
[261,262,290,256,0,269,303,266],
[263,274,297,265,281,0,293,257],
[242,264,273,249,247,257,0,238],
[269,295,313,266,284,293,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1474, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,262,256,256,259,292],
[280,0,276,286,261,258,267,303],
[284,274,0,268,276,257,265,282],
[288,264,282,0,268,249,275,292],
[294,289,274,282,0,279,282,315],
[294,292,293,301,271,0,298,305],
[291,283,285,275,268,252,0,298],
[258,247,268,258,235,245,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1475, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,301,302,355,306,272,273],
[247,0,274,221,275,306,191,221],
[249,276,0,250,298,360,306,249],
[248,329,300,0,355,334,303,300],
[195,275,252,195,0,306,278,250],
[244,244,190,216,244,0,187,297],
[278,359,244,247,272,363,0,299],
[277,329,301,250,300,253,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1476, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,249,246,278,260,295,267,249],
[301,0,318,309,270,310,290,290],
[304,232,0,298,255,304,259,278],
[272,241,252,0,269,286,274,264],
[290,280,295,281,0,323,286,273],
[255,240,246,264,227,0,247,252],
[283,260,291,276,264,303,0,268],
[301,260,272,286,277,298,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1477, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,269,262,292,262,262,264],
[285,0,280,277,283,257,270,282],
[281,270,0,276,267,263,260,270],
[288,273,274,0,288,260,283,276],
[258,267,283,262,0,262,257,282],
[288,293,287,290,288,0,275,287],
[288,280,290,267,293,275,0,292],
[286,268,280,274,268,263,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1478, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,265,281,320,292,285],
[273,0,258,277,260,296,279,297],
[278,292,0,262,295,323,317,326],
[285,273,288,0,286,300,284,316],
[269,290,255,264,0,318,294,300],
[230,254,227,250,232,0,267,254],
[258,271,233,266,256,283,0,280],
[265,253,224,234,250,296,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1479, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,305,292,268,278,253,284],
[277,0,299,311,271,307,284,308],
[245,251,0,295,249,252,251,250],
[258,239,255,0,217,288,219,307],
[282,279,301,333,0,303,262,324],
[272,243,298,262,247,0,223,307],
[297,266,299,331,288,327,0,307],
[266,242,300,243,226,243,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1480, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,264,240,244,287,271,251],
[269,0,265,252,283,266,271,260],
[286,285,0,268,243,275,287,256],
[310,298,282,0,268,293,301,270],
[306,267,307,282,0,265,299,289],
[263,284,275,257,285,0,309,268],
[279,279,263,249,251,241,0,258],
[299,290,294,280,261,282,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1481, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,280,290,261,271,294,278],
[284,0,273,301,266,280,293,292],
[270,277,0,269,280,253,281,290],
[260,249,281,0,264,278,271,275],
[289,284,270,286,0,278,278,283],
[279,270,297,272,272,0,284,282],
[256,257,269,279,272,266,0,266],
[272,258,260,275,267,268,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1482, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,285,263,242,268,285,271],
[303,0,267,273,275,297,263,271],
[265,283,0,252,246,245,280,245],
[287,277,298,0,270,314,302,317],
[308,275,304,280,0,302,261,295],
[282,253,305,236,248,0,246,268],
[265,287,270,248,289,304,0,297],
[279,279,305,233,255,282,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1483, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,299,265,279,280,273,274],
[271,0,283,250,255,247,271,268],
[251,267,0,255,283,265,260,279],
[285,300,295,0,270,295,281,284],
[271,295,267,280,0,276,291,288],
[270,303,285,255,274,0,282,282],
[277,279,290,269,259,268,0,287],
[276,282,271,266,262,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1484, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,273,267,293,282,286],
[262,0,243,263,256,263,284,265],
[281,307,0,285,243,285,284,283],
[277,287,265,0,287,274,272,258],
[283,294,307,263,0,292,296,286],
[257,287,265,276,258,0,268,260],
[268,266,266,278,254,282,0,274],
[264,285,267,292,264,290,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1485, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,244,261,278,278,274,263],
[280,0,266,277,306,284,269,293],
[306,284,0,274,326,298,279,276],
[289,273,276,0,305,297,243,290],
[272,244,224,245,0,256,247,238],
[272,266,252,253,294,0,264,271],
[276,281,271,307,303,286,0,274],
[287,257,274,260,312,279,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1486, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,260,273,253,271,261,250],
[282,0,270,294,284,286,287,294],
[290,280,0,307,288,298,264,288],
[277,256,243,0,285,269,258,260],
[297,266,262,265,0,273,271,286],
[279,264,252,281,277,0,283,260],
[289,263,286,292,279,267,0,278],
[300,256,262,290,264,290,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1487, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,259,260,243,251,278,246],
[289,0,267,258,259,258,283,275],
[291,283,0,282,291,264,274,290],
[290,292,268,0,283,294,281,297],
[307,291,259,267,0,255,262,291],
[299,292,286,256,295,0,310,290],
[272,267,276,269,288,240,0,233],
[304,275,260,253,259,260,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1488, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,267,242,238,283,250,268],
[298,0,288,279,259,310,275,283],
[283,262,0,272,272,287,267,278],
[308,271,278,0,277,294,275,274],
[312,291,278,273,0,294,283,272],
[267,240,263,256,256,0,257,250],
[300,275,283,275,267,293,0,273],
[282,267,272,276,278,300,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1489, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,269,309,290,283,263,299],
[283,0,279,327,285,233,283,254],
[281,271,0,298,299,271,279,272],
[241,223,252,0,259,221,276,261],
[260,265,251,291,0,222,278,276],
[267,317,279,329,328,0,295,264],
[287,267,271,274,272,255,0,269],
[251,296,278,289,274,286,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1490, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,275,272,273,252,270,266],
[262,0,283,274,275,275,276,271],
[275,267,0,270,282,241,261,245],
[278,276,280,0,270,243,287,264],
[277,275,268,280,0,270,266,251],
[298,275,309,307,280,0,284,276],
[280,274,289,263,284,266,0,270],
[284,279,305,286,299,274,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1491, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,298,289,291,296,250,278],
[293,0,277,294,292,287,263,251],
[252,273,0,272,285,282,237,245],
[261,256,278,0,272,294,257,264],
[259,258,265,278,0,293,247,247],
[254,263,268,256,257,0,235,256],
[300,287,313,293,303,315,0,270],
[272,299,305,286,303,294,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1492, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,279,279,287,291,273,269],
[274,0,279,280,294,273,262,278],
[271,271,0,289,283,290,279,265],
[271,270,261,0,276,268,279,274],
[263,256,267,274,0,272,253,270],
[259,277,260,282,278,0,267,264],
[277,288,271,271,297,283,0,289],
[281,272,285,276,280,286,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1493, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,255,265,287,283,251,260],
[289,0,276,271,300,292,275,272],
[295,274,0,265,295,303,278,267],
[285,279,285,0,305,298,273,278],
[263,250,255,245,0,251,262,252],
[267,258,247,252,299,0,246,263],
[299,275,272,277,288,304,0,274],
[290,278,283,272,298,287,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1494, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,301,282,286,296,281,270],
[259,0,297,280,283,294,295,279],
[249,253,0,257,275,277,288,257],
[268,270,293,0,279,279,293,278],
[264,267,275,271,0,269,281,272],
[254,256,273,271,281,0,307,257],
[269,255,262,257,269,243,0,247],
[280,271,293,272,278,293,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1495, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,329,262,328,287,287,243,351],
[221,0,306,286,336,333,241,333],
[288,244,0,243,331,289,264,267],
[222,264,307,0,222,245,265,266],
[263,214,219,328,0,238,284,216],
[263,217,261,305,312,0,326,324],
[307,309,286,285,266,224,0,307],
[199,217,283,284,334,226,243,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1496, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,286,311,351,282,270,288],
[256,0,252,302,281,310,228,241],
[264,298,0,315,267,282,248,268],
[239,248,235,0,249,244,244,271],
[199,269,283,301,0,295,244,229],
[268,240,268,306,255,0,234,219],
[280,322,302,306,306,316,0,247],
[262,309,282,279,321,331,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1497, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,264,286,294,280,268,276],
[258,0,262,283,264,266,261,262],
[286,288,0,263,268,277,276,268],
[264,267,287,0,273,285,271,280],
[256,286,282,277,0,276,273,282],
[270,284,273,265,274,0,276,271],
[282,289,274,279,277,274,0,277],
[274,288,282,270,268,279,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1498, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,306,266,279,276,272,274],
[282,0,300,290,289,288,270,295],
[244,250,0,277,268,249,244,260],
[284,260,273,0,269,265,267,268],
[271,261,282,281,0,287,260,277],
[274,262,301,285,263,0,293,276],
[278,280,306,283,290,257,0,275],
[276,255,290,282,273,274,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1499, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,293,299,309,292,281,297],
[278,0,292,289,284,279,271,296],
[257,258,0,274,274,256,258,271],
[251,261,276,0,284,271,266,271],
[241,266,276,266,0,265,244,268],
[258,271,294,279,285,0,277,261],
[269,279,292,284,306,273,0,288],
[253,254,279,279,282,289,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1500, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,320,294,277,307,275,315,277],
[230,0,297,277,282,271,295,282],
[256,253,0,255,260,234,258,244],
[273,273,295,0,287,271,303,259],
[243,268,290,263,0,247,308,252],
[275,279,316,279,303,0,313,266],
[235,255,292,247,242,237,0,272],
[273,268,306,291,298,284,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1501, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,256,259,277,272,242,264],
[280,0,263,268,306,265,275,277],
[294,287,0,293,309,274,298,262],
[291,282,257,0,294,281,287,261],
[273,244,241,256,0,260,274,242],
[278,285,276,269,290,0,283,263],
[308,275,252,263,276,267,0,267],
[286,273,288,289,308,287,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1502, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,274,279,261,250,278,266],
[298,0,281,296,280,270,255,274],
[276,269,0,279,263,277,246,273],
[271,254,271,0,254,229,248,260],
[289,270,287,296,0,257,268,275],
[300,280,273,321,293,0,281,258],
[272,295,304,302,282,269,0,260],
[284,276,277,290,275,292,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1503, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,321,247,282,273,251,261,262],
[229,0,226,261,248,252,231,263],
[303,324,0,310,278,264,316,288],
[268,289,240,0,281,274,277,259],
[277,302,272,269,0,281,285,277],
[299,298,286,276,269,0,274,288],
[289,319,234,273,265,276,0,289],
[288,287,262,291,273,262,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1504, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,279,261,272,263,299,252],
[270,0,254,252,239,245,281,266],
[271,296,0,265,279,264,321,250],
[289,298,285,0,280,284,307,265],
[278,311,271,270,0,264,309,260],
[287,305,286,266,286,0,281,284],
[251,269,229,243,241,269,0,231],
[298,284,300,285,290,266,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1505, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,297,294,284,309,273,290],
[271,0,278,276,308,273,287,277],
[253,272,0,272,276,277,242,261],
[256,274,278,0,288,269,255,250],
[266,242,274,262,0,257,259,251],
[241,277,273,281,293,0,270,262],
[277,263,308,295,291,280,0,274],
[260,273,289,300,299,288,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1506, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,294,291,293,278,274,295],
[246,0,246,259,264,241,274,287],
[256,304,0,267,274,280,268,286],
[259,291,283,0,270,288,269,258],
[257,286,276,280,0,266,270,271],
[272,309,270,262,284,0,278,304],
[276,276,282,281,280,272,0,284],
[255,263,264,292,279,246,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1507, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,276,279,275,283,280,283],
[264,0,264,253,283,269,263,281],
[274,286,0,264,279,267,275,284],
[271,297,286,0,281,281,282,278],
[275,267,271,269,0,268,276,292],
[267,281,283,269,282,0,268,284],
[270,287,275,268,274,282,0,294],
[267,269,266,272,258,266,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1508, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,356,320,275,317,329,355,329],
[194,0,280,264,269,332,229,220],
[230,270,0,227,230,271,242,229],
[275,286,323,0,289,336,307,216],
[233,281,320,261,0,258,270,269],
[221,218,279,214,292,0,257,221],
[195,321,308,243,280,293,0,233],
[221,330,321,334,281,329,317,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1509, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,241,245,267,310,240,230],
[294,0,250,272,226,295,228,267],
[309,300,0,275,269,259,257,247],
[305,278,275,0,237,322,293,323],
[283,324,281,313,0,338,267,311],
[240,255,291,228,212,0,253,269],
[310,322,293,257,283,297,0,323],
[320,283,303,227,239,281,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1510, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,321,279,299,233,287,246],
[290,0,295,274,294,288,302,284],
[229,255,0,233,256,237,298,266],
[271,276,317,0,257,234,277,264],
[251,256,294,293,0,284,270,260],
[317,262,313,316,266,0,317,273],
[263,248,252,273,280,233,0,242],
[304,266,284,286,290,277,308,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1511, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,278,301,279,303,249,252],
[262,0,249,269,265,285,278,264],
[272,301,0,275,296,295,286,278],
[249,281,275,0,282,299,261,245],
[271,285,254,268,0,291,266,253],
[247,265,255,251,259,0,282,257],
[301,272,264,289,284,268,0,248],
[298,286,272,305,297,293,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1512, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,272,285,269,259,281,303],
[274,0,276,269,260,263,274,301],
[278,274,0,274,263,270,275,298],
[265,281,276,0,291,285,290,277],
[281,290,287,259,0,267,282,297],
[291,287,280,265,283,0,282,302],
[269,276,275,260,268,268,0,299],
[247,249,252,273,253,248,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1513, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,269,273,277,266,253,293],
[280,0,248,259,260,266,256,284],
[281,302,0,274,279,273,261,292],
[277,291,276,0,275,284,292,299],
[273,290,271,275,0,259,272,297],
[284,284,277,266,291,0,261,291],
[297,294,289,258,278,289,0,310],
[257,266,258,251,253,259,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1514, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,302,284,289,252,298,282],
[277,0,264,274,277,271,264,267],
[248,286,0,274,282,256,281,285],
[266,276,276,0,295,284,271,284],
[261,273,268,255,0,255,285,243],
[298,279,294,266,295,0,310,275],
[252,286,269,279,265,240,0,269],
[268,283,265,266,307,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1515, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,281,276,246,245,262,249],
[292,0,279,305,258,250,283,222],
[269,271,0,267,252,264,256,252],
[274,245,283,0,272,263,248,247],
[304,292,298,278,0,286,319,255],
[305,300,286,287,264,0,262,281],
[288,267,294,302,231,288,0,292],
[301,328,298,303,295,269,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1516, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,295,275,269,291,264,267],
[295,0,306,276,298,290,274,315],
[255,244,0,270,244,267,246,273],
[275,274,280,0,276,276,277,300],
[281,252,306,274,0,274,257,292],
[259,260,283,274,276,0,239,265],
[286,276,304,273,293,311,0,284],
[283,235,277,250,258,285,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1517, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,281,321,288,289,275,278],
[258,0,275,289,276,281,283,256],
[269,275,0,292,288,277,282,289],
[229,261,258,0,260,258,247,252],
[262,274,262,290,0,295,262,254],
[261,269,273,292,255,0,248,260],
[275,267,268,303,288,302,0,274],
[272,294,261,298,296,290,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1518, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,248,234,284,276,297,278],
[281,0,286,223,272,294,302,232],
[302,264,0,258,275,264,298,253],
[316,327,292,0,325,320,316,274],
[266,278,275,225,0,285,302,278],
[274,256,286,230,265,0,288,261],
[253,248,252,234,248,262,0,277],
[272,318,297,276,272,289,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1519, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,279,276,283,274,275,280],
[246,0,246,250,260,229,261,275],
[271,304,0,282,258,256,293,280],
[274,300,268,0,245,263,265,275],
[267,290,292,305,0,290,278,289],
[276,321,294,287,260,0,271,299],
[275,289,257,285,272,279,0,278],
[270,275,270,275,261,251,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1520, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,284,286,304,300,262,297],
[240,0,271,267,293,280,293,278],
[266,279,0,276,289,302,284,287],
[264,283,274,0,278,261,274,283],
[246,257,261,272,0,248,241,262],
[250,270,248,289,302,0,276,301],
[288,257,266,276,309,274,0,272],
[253,272,263,267,288,249,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1521, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,288,274,265,301,257,279],
[254,0,264,252,257,264,245,253],
[262,286,0,276,277,267,252,262],
[276,298,274,0,297,297,283,293],
[285,293,273,253,0,268,269,270],
[249,286,283,253,282,0,277,276],
[293,305,298,267,281,273,0,311],
[271,297,288,257,280,274,239,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1522, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,266,283,239,274,251,255],
[276,0,264,263,250,263,255,245],
[284,286,0,287,277,296,273,271],
[267,287,263,0,262,270,258,278],
[311,300,273,288,0,275,268,279],
[276,287,254,280,275,0,273,268],
[299,295,277,292,282,277,0,267],
[295,305,279,272,271,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1523, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,277,264,281,293,278,299],
[249,0,257,255,259,274,256,260],
[273,293,0,271,279,271,263,255],
[286,295,279,0,272,273,278,285],
[269,291,271,278,0,245,261,277],
[257,276,279,277,305,0,261,252],
[272,294,287,272,289,289,0,268],
[251,290,295,265,273,298,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1524, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,288,287,281,296,295,281],
[284,0,292,264,278,288,301,280],
[262,258,0,285,270,271,294,261],
[263,286,265,0,277,285,287,284],
[269,272,280,273,0,259,280,291],
[254,262,279,265,291,0,261,278],
[255,249,256,263,270,289,0,266],
[269,270,289,266,259,272,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1525, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,268,266,288,267,292,290],
[281,0,280,271,291,282,284,286],
[282,270,0,274,281,289,290,285],
[284,279,276,0,285,284,286,269],
[262,259,269,265,0,276,277,282],
[283,268,261,266,274,0,267,275],
[258,266,260,264,273,283,0,272],
[260,264,265,281,268,275,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1526, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,258,252,240,254,287,280],
[278,0,257,255,231,272,316,271],
[292,293,0,280,250,258,330,247],
[298,295,270,0,241,277,295,269],
[310,319,300,309,0,295,330,272],
[296,278,292,273,255,0,303,288],
[263,234,220,255,220,247,0,226],
[270,279,303,281,278,262,324,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1527, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,234,282,256,275,271,241,260],
[316,0,323,271,222,324,285,287],
[268,227,0,280,254,302,236,289],
[294,279,270,0,264,324,253,293],
[275,328,296,286,0,305,337,338],
[279,226,248,226,245,0,198,229],
[309,265,314,297,213,352,0,308],
[290,263,261,257,212,321,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1528, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,302,272,274,274,262,300],
[262,0,282,284,285,271,270,286],
[248,268,0,257,265,256,269,274],
[278,266,293,0,293,279,279,288],
[276,265,285,257,0,273,290,281],
[276,279,294,271,277,0,262,284],
[288,280,281,271,260,288,0,292],
[250,264,276,262,269,266,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1529, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,336,262,315,298,278,276,316],
[214,0,260,284,265,237,313,276],
[288,290,0,328,272,317,274,328],
[235,266,222,0,255,249,287,324],
[252,285,278,295,0,295,292,275],
[272,313,233,301,255,0,273,292],
[274,237,276,263,258,277,0,257],
[234,274,222,226,275,258,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1530, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,304,270,272,284,267,275],
[275,0,282,262,257,289,277,275],
[246,268,0,244,256,266,262,265],
[280,288,306,0,283,288,286,268],
[278,293,294,267,0,291,297,285],
[266,261,284,262,259,0,259,276],
[283,273,288,264,253,291,0,287],
[275,275,285,282,265,274,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1531, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,302,294,281,265,262,261],
[274,0,282,302,265,269,267,257],
[248,268,0,263,249,248,262,258],
[256,248,287,0,267,241,229,245],
[269,285,301,283,0,268,264,245],
[285,281,302,309,282,0,256,278],
[288,283,288,321,286,294,0,275],
[289,293,292,305,305,272,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1532, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,262,286,280,284,275],
[275,0,283,263,262,261,282,253],
[274,267,0,253,294,242,294,265],
[288,287,297,0,302,273,267,282],
[264,288,256,248,0,257,256,268],
[270,289,308,277,293,0,290,271],
[266,268,256,283,294,260,0,258],
[275,297,285,268,282,279,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1533, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,277,289,283,260,277,280],
[246,0,270,288,274,256,276,253],
[273,280,0,277,260,265,276,271],
[261,262,273,0,242,248,274,255],
[267,276,290,308,0,257,296,265],
[290,294,285,302,293,0,274,267],
[273,274,274,276,254,276,0,252],
[270,297,279,295,285,283,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1534, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,262,251,258,230,257,253],
[297,0,278,267,259,275,281,285],
[288,272,0,259,268,243,277,268],
[299,283,291,0,281,270,293,282],
[292,291,282,269,0,262,293,279],
[320,275,307,280,288,0,302,300],
[293,269,273,257,257,248,0,269],
[297,265,282,268,271,250,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1535, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,272,310,266,262,285,287],
[262,0,247,283,259,266,292,254],
[278,303,0,304,296,288,286,266],
[240,267,246,0,273,258,288,266],
[284,291,254,277,0,284,301,278],
[288,284,262,292,266,0,265,272],
[265,258,264,262,249,285,0,247],
[263,296,284,284,272,278,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1536, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,268,265,249,260,258,244],
[278,0,269,265,266,263,279,268],
[282,281,0,275,270,276,265,253],
[285,285,275,0,271,253,262,265],
[301,284,280,279,0,271,257,267],
[290,287,274,297,279,0,265,275],
[292,271,285,288,293,285,0,257],
[306,282,297,285,283,275,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1537, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,245,287,284,300,244,259],
[283,0,280,268,303,287,273,284],
[305,270,0,288,285,277,278,286],
[263,282,262,0,301,295,257,269],
[266,247,265,249,0,274,271,242],
[250,263,273,255,276,0,264,235],
[306,277,272,293,279,286,0,259],
[291,266,264,281,308,315,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1538, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,300,289,272,302,289,269],
[257,0,275,278,290,313,272,272],
[250,275,0,272,270,303,285,267],
[261,272,278,0,289,289,280,283],
[278,260,280,261,0,289,263,260],
[248,237,247,261,261,0,266,235],
[261,278,265,270,287,284,0,267],
[281,278,283,267,290,315,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1539, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,299,255,279,270,275,294],
[246,0,271,239,244,234,235,264],
[251,279,0,232,244,265,232,291],
[295,311,318,0,279,293,251,287],
[271,306,306,271,0,256,258,336],
[280,316,285,257,294,0,268,329],
[275,315,318,299,292,282,0,323],
[256,286,259,263,214,221,227,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1540, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,278,269,266,286,276,269],
[277,0,273,275,265,268,283,267],
[272,277,0,292,274,285,288,282],
[281,275,258,0,268,271,276,252],
[284,285,276,282,0,267,290,273],
[264,282,265,279,283,0,278,271],
[274,267,262,274,260,272,0,271],
[281,283,268,298,277,279,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1541, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,272,285,278,294,288,282],
[267,0,269,272,272,287,296,260],
[278,281,0,281,267,298,285,285],
[265,278,269,0,274,285,282,282],
[272,278,283,276,0,288,292,270],
[256,263,252,265,262,0,253,261],
[262,254,265,268,258,297,0,262],
[268,290,265,268,280,289,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1542, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,302,305,280,308,282,270],
[284,0,299,301,265,272,279,277],
[248,251,0,255,270,298,238,262],
[245,249,295,0,280,292,274,247],
[270,285,280,270,0,309,270,269],
[242,278,252,258,241,0,241,240],
[268,271,312,276,280,309,0,252],
[280,273,288,303,281,310,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1543, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,318,274,284,273,285,287],
[256,0,272,249,277,274,238,254],
[232,278,0,268,288,272,265,260],
[276,301,282,0,281,274,286,271],
[266,273,262,269,0,264,284,245],
[277,276,278,276,286,0,271,270],
[265,312,285,264,266,279,0,264],
[263,296,290,279,305,280,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1544, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,210,270,277,271,269,244],
[278,0,270,273,290,281,300,281],
[340,280,0,296,287,275,298,273],
[280,277,254,0,282,282,300,258],
[273,260,263,268,0,269,274,260],
[279,269,275,268,281,0,265,257],
[281,250,252,250,276,285,0,255],
[306,269,277,292,290,293,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1545, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,272,276,279,276,258],
[271,0,263,252,283,275,258,264],
[280,287,0,271,279,267,270,273],
[278,298,279,0,285,298,273,277],
[274,267,271,265,0,273,253,279],
[271,275,283,252,277,0,283,272],
[274,292,280,277,297,267,0,275],
[292,286,277,273,271,278,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1546, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,321,288,281,303,269,295],
[260,0,284,269,265,261,260,266],
[229,266,0,270,255,259,251,260],
[262,281,280,0,271,249,263,260],
[269,285,295,279,0,274,263,262],
[247,289,291,301,276,0,289,265],
[281,290,299,287,287,261,0,283],
[255,284,290,290,288,285,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1547, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,279,298,304,295,303,298],
[275,0,277,290,302,283,292,292],
[271,273,0,287,295,277,301,282],
[252,260,263,0,296,252,270,261],
[246,248,255,254,0,247,267,265],
[255,267,273,298,303,0,279,279],
[247,258,249,280,283,271,0,279],
[252,258,268,289,285,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1548, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,307,272,306,295,283,271],
[268,0,299,266,280,278,279,267],
[243,251,0,287,296,287,274,247],
[278,284,263,0,301,291,286,276],
[244,270,254,249,0,260,263,253],
[255,272,263,259,290,0,261,264],
[267,271,276,264,287,289,0,278],
[279,283,303,274,297,286,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1549, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,305,305,319,289,291,303],
[277,0,301,274,325,294,276,289],
[245,249,0,301,289,276,250,284],
[245,276,249,0,303,301,268,262],
[231,225,261,247,0,300,248,245],
[261,256,274,249,250,0,257,233],
[259,274,300,282,302,293,0,269],
[247,261,266,288,305,317,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1550, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,278,289,299,265,280,281],
[278,0,279,291,300,269,273,280],
[272,271,0,290,297,268,282,271],
[261,259,260,0,276,243,258,252],
[251,250,253,274,0,261,249,254],
[285,281,282,307,289,0,271,278],
[270,277,268,292,301,279,0,272],
[269,270,279,298,296,272,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1551, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,315,307,315,297,267,281,272],
[235,0,241,258,273,233,230,259],
[243,309,0,285,285,285,260,277],
[235,292,265,0,274,255,239,269],
[253,277,265,276,0,269,268,255],
[283,317,265,295,281,0,275,271],
[269,320,290,311,282,275,0,273],
[278,291,273,281,295,279,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1552, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,276,273,274,284,304,258],
[288,0,277,282,280,286,294,259],
[274,273,0,266,261,270,279,260],
[277,268,284,0,265,290,300,286],
[276,270,289,285,0,288,286,280],
[266,264,280,260,262,0,267,267],
[246,256,271,250,264,283,0,258],
[292,291,290,264,270,283,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1553, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,288,281,281,262,292,279],
[261,0,258,248,273,256,276,267],
[262,292,0,267,293,253,279,260],
[269,302,283,0,285,267,290,278],
[269,277,257,265,0,252,270,257],
[288,294,297,283,298,0,298,266],
[258,274,271,260,280,252,0,266],
[271,283,290,272,293,284,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1554, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,274,272,287,278,272,293],
[279,0,280,271,269,286,283,283],
[276,270,0,255,271,260,277,265],
[278,279,295,0,274,281,294,299],
[263,281,279,276,0,273,293,292],
[272,264,290,269,277,0,286,294],
[278,267,273,256,257,264,0,269],
[257,267,285,251,258,256,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1555, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,280,264,279,295,291,277],
[274,0,271,271,259,287,289,271],
[270,279,0,252,257,275,268,270],
[286,279,298,0,263,291,281,286],
[271,291,293,287,0,293,302,295],
[255,263,275,259,257,0,278,257],
[259,261,282,269,248,272,0,282],
[273,279,280,264,255,293,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1556, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,316,294,280,273,298,278],
[249,0,283,262,253,217,272,260],
[234,267,0,259,242,227,250,272],
[256,288,291,0,270,260,297,284],
[270,297,308,280,0,281,291,308],
[277,333,323,290,269,0,287,314],
[252,278,300,253,259,263,0,278],
[272,290,278,266,242,236,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1557, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,287,306,260,263,277,271],
[279,0,291,301,272,292,289,265],
[263,259,0,261,246,285,264,263],
[244,249,289,0,245,287,277,262],
[290,278,304,305,0,303,273,291],
[287,258,265,263,247,0,252,267],
[273,261,286,273,277,298,0,277],
[279,285,287,288,259,283,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1558, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,282,290,274,294,303,280],
[267,0,289,290,281,287,292,279],
[268,261,0,275,264,260,277,262],
[260,260,275,0,271,282,283,252],
[276,269,286,279,0,289,300,272],
[256,263,290,268,261,0,278,264],
[247,258,273,267,250,272,0,272],
[270,271,288,298,278,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1559, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,284,294,284,262,274,250],
[275,0,263,282,282,258,277,245],
[266,287,0,297,274,258,278,251],
[256,268,253,0,251,258,262,248],
[266,268,276,299,0,280,296,259],
[288,292,292,292,270,0,292,278],
[276,273,272,288,254,258,0,227],
[300,305,299,302,291,272,323,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1560, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,230,236,267,335,241],
[272,0,228,245,211,270,275,258],
[265,322,0,269,189,222,285,267],
[320,305,281,0,245,281,325,266],
[314,339,361,305,0,298,288,256],
[283,280,328,269,252,0,316,315],
[215,275,265,225,262,234,0,234],
[309,292,283,284,294,235,316,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1561, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,262,276,285,261,260,264],
[284,0,261,283,292,258,266,272],
[288,289,0,288,287,295,290,273],
[274,267,262,0,276,269,274,254],
[265,258,263,274,0,263,284,262],
[289,292,255,281,287,0,302,279],
[290,284,260,276,266,248,0,274],
[286,278,277,296,288,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1562, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,278,255,257,258,267,255],
[293,0,292,290,264,268,294,279],
[272,258,0,251,246,258,253,262],
[295,260,299,0,262,260,271,236],
[293,286,304,288,0,270,280,273],
[292,282,292,290,280,0,290,275],
[283,256,297,279,270,260,0,247],
[295,271,288,314,277,275,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1563, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,276,262,267,258,257,266],
[295,0,291,294,282,284,266,292],
[274,259,0,268,259,266,252,279],
[288,256,282,0,261,270,282,278],
[283,268,291,289,0,273,288,277],
[292,266,284,280,277,0,274,278],
[293,284,298,268,262,276,0,287],
[284,258,271,272,273,272,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1564, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,281,256,256,252,283],
[286,0,295,290,270,286,280,301],
[288,255,0,272,267,283,269,263],
[269,260,278,0,266,263,265,275],
[294,280,283,284,0,285,273,279],
[294,264,267,287,265,0,273,279],
[298,270,281,285,277,277,0,279],
[267,249,287,275,271,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1565, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,458,92,458,366,458,275,367],
[92,0,92,184,183,183,92,184],
[458,458,0,458,274,458,366,458],
[92,366,92,0,275,183,184,276],
[184,367,276,275,0,458,183,276],
[92,367,92,367,92,0,92,276],
[275,458,184,366,367,458,0,459],
[183,366,92,274,274,274,91,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1566, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,325,303,278,280,268,260,283],
[225,0,241,258,237,241,230,267],
[247,309,0,282,245,257,292,268],
[272,292,268,0,271,279,255,271],
[270,313,305,279,0,287,274,270],
[282,309,293,271,263,0,298,281],
[290,320,258,295,276,252,0,268],
[267,283,282,279,280,269,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1567, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,310,298,292,253,250,277],
[276,0,365,259,288,244,273,272],
[240,185,0,287,265,184,242,200],
[252,291,263,0,231,220,245,184],
[258,262,285,319,0,232,242,244],
[297,306,366,330,318,0,335,265],
[300,277,308,305,308,215,0,238],
[273,278,350,366,306,285,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1568, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,262,261,239,260,257,244],
[287,0,269,263,267,269,256,246],
[288,281,0,281,262,271,264,275],
[289,287,269,0,263,280,287,278],
[311,283,288,287,0,269,262,275],
[290,281,279,270,281,0,272,286],
[293,294,286,263,288,278,0,270],
[306,304,275,272,275,264,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1569, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,278,289,276,296,285,275],
[267,0,272,284,290,270,289,278],
[272,278,0,266,263,264,284,279],
[261,266,284,0,279,286,289,279],
[274,260,287,271,0,270,288,278],
[254,280,286,264,280,0,279,266],
[265,261,266,261,262,271,0,255],
[275,272,271,271,272,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1570, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,260,268,280,280,260,271],
[272,0,282,282,284,279,272,294],
[290,268,0,275,277,278,261,272],
[282,268,275,0,278,282,277,288],
[270,266,273,272,0,273,269,303],
[270,271,272,268,277,0,255,293],
[290,278,289,273,281,295,0,287],
[279,256,278,262,247,257,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1571, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,298,314,271,278,277,272],
[266,0,266,259,265,250,253,271],
[252,284,0,286,267,276,257,267],
[236,291,264,0,271,268,266,255],
[279,285,283,279,0,276,261,278],
[272,300,274,282,274,0,262,286],
[273,297,293,284,289,288,0,274],
[278,279,283,295,272,264,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1572, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,249,300,273,273,292,278],
[294,0,273,310,275,286,312,284],
[301,277,0,275,295,286,297,272],
[250,240,275,0,272,260,272,275],
[277,275,255,278,0,287,300,257],
[277,264,264,290,263,0,288,258],
[258,238,253,278,250,262,0,243],
[272,266,278,275,293,292,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1573, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,291,289,269,296,295,277],
[273,0,279,270,264,279,281,261],
[259,271,0,256,256,285,270,273],
[261,280,294,0,272,280,276,270],
[281,286,294,278,0,298,258,281],
[254,271,265,270,252,0,264,260],
[255,269,280,274,292,286,0,259],
[273,289,277,280,269,290,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1574, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,268,264,276,275,273],
[285,0,281,287,274,276,297,290],
[272,269,0,285,270,273,303,281],
[282,263,265,0,259,254,288,275],
[286,276,280,291,0,267,298,290],
[274,274,277,296,283,0,289,294],
[275,253,247,262,252,261,0,277],
[277,260,269,275,260,256,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1575, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,228,246,237,198,204,225,261],
[322,0,299,256,265,292,253,246],
[304,251,0,256,211,266,240,290],
[313,294,294,0,244,204,236,299],
[352,285,339,306,0,285,234,303],
[346,258,284,346,265,0,320,296],
[325,297,310,314,316,230,0,249],
[289,304,260,251,247,254,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1576, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,263,311,273,278,264,268],
[282,0,294,323,283,269,284,274],
[287,256,0,307,266,251,280,283],
[239,227,243,0,242,234,242,245],
[277,267,284,308,0,267,279,263],
[272,281,299,316,283,0,275,268],
[286,266,270,308,271,275,0,269],
[282,276,267,305,287,282,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1577, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,278,274,296,262,258,267],
[273,0,293,263,302,286,295,262],
[272,257,0,254,256,243,278,248],
[276,287,296,0,312,285,289,271],
[254,248,294,238,0,240,252,248],
[288,264,307,265,310,0,277,298],
[292,255,272,261,298,273,0,283],
[283,288,302,279,302,252,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1578, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,240,247,267,279,244,253],
[289,0,261,270,297,279,271,261],
[310,289,0,300,314,275,308,310],
[303,280,250,0,293,285,276,269],
[283,253,236,257,0,284,264,247],
[271,271,275,265,266,0,274,308],
[306,279,242,274,286,276,0,285],
[297,289,240,281,303,242,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1579, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,253,282,282,242,280,252],
[302,0,289,296,272,285,297,274],
[297,261,0,293,279,282,288,285],
[268,254,257,0,257,245,267,267],
[268,278,271,293,0,262,253,249],
[308,265,268,305,288,0,277,274],
[270,253,262,283,297,273,0,249],
[298,276,265,283,301,276,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1580, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,272,280,277,289,281,289],
[250,0,277,278,282,273,266,264],
[278,273,0,267,261,304,272,284],
[270,272,283,0,255,301,288,295],
[273,268,289,295,0,291,270,275],
[261,277,246,249,259,0,277,258],
[269,284,278,262,280,273,0,278],
[261,286,266,255,275,292,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1581, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,277,266,280,275,294,263],
[280,0,282,264,280,286,269,278],
[273,268,0,265,255,294,277,284],
[284,286,285,0,269,301,291,297],
[270,270,295,281,0,315,281,300],
[275,264,256,249,235,0,253,268],
[256,281,273,259,269,297,0,270],
[287,272,266,253,250,282,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1582, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,247,339,257,296,259,286],
[249,0,246,301,271,279,302,299],
[303,304,0,318,269,249,279,302],
[211,249,232,0,219,259,224,183],
[293,279,281,331,0,267,257,288],
[254,271,301,291,283,0,289,274],
[291,248,271,326,293,261,0,243],
[264,251,248,367,262,276,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1583, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,269,305,213,278,277,202],
[258,0,218,249,212,243,244,210],
[281,332,0,312,291,339,326,242],
[245,301,238,0,243,296,255,229],
[337,338,259,307,0,324,306,292],
[272,307,211,254,226,0,239,238],
[273,306,224,295,244,311,0,231],
[348,340,308,321,258,312,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1584, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,283,244,255,277,270,257],
[284,0,281,272,277,284,278,272],
[267,269,0,278,264,285,270,277],
[306,278,272,0,285,292,270,271],
[295,273,286,265,0,294,264,272],
[273,266,265,258,256,0,283,270],
[280,272,280,280,286,267,0,275],
[293,278,273,279,278,280,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1585, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,291,274,297,263,272,280],
[283,0,294,285,298,269,276,270],
[259,256,0,270,293,274,278,274],
[276,265,280,0,295,289,268,281],
[253,252,257,255,0,251,253,269],
[287,281,276,261,299,0,276,279],
[278,274,272,282,297,274,0,291],
[270,280,276,269,281,271,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1586, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,281,290,277,287,283,275],
[231,0,262,230,251,224,231,266],
[269,288,0,284,271,289,264,292],
[260,320,266,0,298,288,297,284],
[273,299,279,252,0,277,274,298],
[263,326,261,262,273,0,229,272],
[267,319,286,253,276,321,0,293],
[275,284,258,266,252,278,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1587, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,284,288,275,287,292,287],
[244,0,286,264,270,290,255,269],
[266,264,0,263,258,297,259,266],
[262,286,287,0,256,263,248,271],
[275,280,292,294,0,309,250,262],
[263,260,253,287,241,0,242,251],
[258,295,291,302,300,308,0,302],
[263,281,284,279,288,299,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1588, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,273,293,285,274,292,288],
[274,0,277,284,260,281,294,281],
[277,273,0,286,289,281,292,280],
[257,266,264,0,270,272,281,271],
[265,290,261,280,0,265,272,272],
[276,269,269,278,285,0,284,290],
[258,256,258,269,278,266,0,282],
[262,269,270,279,278,260,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1589, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,273,284,274,288,257,288],
[297,0,270,287,272,283,284,288],
[277,280,0,284,274,279,270,286],
[266,263,266,0,264,277,253,258],
[276,278,276,286,0,292,266,292],
[262,267,271,273,258,0,261,271],
[293,266,280,297,284,289,0,288],
[262,262,264,292,258,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1590, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,291,265,305,270,291],
[261,0,308,266,302,307,279,274],
[281,242,0,279,266,271,253,271],
[259,284,271,0,282,304,277,275],
[285,248,284,268,0,301,243,284],
[245,243,279,246,249,0,265,241],
[280,271,297,273,307,285,0,263],
[259,276,279,275,266,309,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1591, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,255,262,301,299,278,302],
[291,0,244,278,289,327,304,292],
[295,306,0,283,286,291,271,320],
[288,272,267,0,248,285,271,322],
[249,261,264,302,0,268,317,325],
[251,223,259,265,282,0,273,290],
[272,246,279,279,233,277,0,295],
[248,258,230,228,225,260,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1592, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,296,306,285,271,306,298],
[268,0,277,265,264,269,260,271],
[254,273,0,280,279,260,275,276],
[244,285,270,0,252,266,270,276],
[265,286,271,298,0,261,269,278],
[279,281,290,284,289,0,252,290],
[244,290,275,280,281,298,0,285],
[252,279,274,274,272,260,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1593, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,294,270,282,297,282,293],
[267,0,288,276,271,290,296,286],
[256,262,0,258,241,263,278,269],
[280,274,292,0,271,292,275,287],
[268,279,309,279,0,282,271,287],
[253,260,287,258,268,0,271,271],
[268,254,272,275,279,279,0,288],
[257,264,281,263,263,279,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1594, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,336,308,298,318,328,330],
[276,0,289,269,257,286,301,307],
[214,261,0,246,260,275,312,279],
[242,281,304,0,278,313,318,302],
[252,293,290,272,0,291,289,303],
[232,264,275,237,259,0,284,300],
[222,249,238,232,261,266,0,270],
[220,243,271,248,247,250,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1595, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,304,273,266,269,268,272],
[288,0,282,273,284,287,272,270],
[246,268,0,261,255,290,255,262],
[277,277,289,0,272,286,271,271],
[284,266,295,278,0,292,280,274],
[281,263,260,264,258,0,258,252],
[282,278,295,279,270,292,0,280],
[278,280,288,279,276,298,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1596, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,263,249,240,233,223,219],
[288,0,248,265,252,290,246,288],
[287,302,0,250,265,299,255,245],
[301,285,300,0,317,316,271,257],
[310,298,285,233,0,313,256,281],
[317,260,251,234,237,0,224,218],
[327,304,295,279,294,326,0,274],
[331,262,305,293,269,332,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1597, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,281,259,258,293,276,286],
[249,0,281,249,239,257,243,265],
[269,269,0,249,271,281,278,292],
[291,301,301,0,275,323,275,310],
[292,311,279,275,0,308,281,304],
[257,293,269,227,242,0,255,284],
[274,307,272,275,269,295,0,280],
[264,285,258,240,246,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1598, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,257,257,256,271,261,259],
[290,0,276,295,281,289,287,274],
[293,274,0,289,293,287,276,286],
[293,255,261,0,296,269,279,261],
[294,269,257,254,0,269,267,270],
[279,261,263,281,281,0,262,283],
[289,263,274,271,283,288,0,260],
[291,276,264,289,280,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1599, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,257,271,319,284,290,234],
[290,0,278,279,324,290,322,236],
[293,272,0,271,333,330,303,310],
[279,271,279,0,303,302,318,331],
[231,226,217,247,0,275,286,249],
[266,260,220,248,275,0,286,255],
[260,228,247,232,264,264,0,248],
[316,314,240,219,301,295,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1600, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,267,268,273,309,283,282],
[272,0,263,267,267,283,258,269],
[283,287,0,280,263,313,272,275],
[282,283,270,0,276,313,254,252],
[277,283,287,274,0,310,267,283],
[241,267,237,237,240,0,209,236],
[267,292,278,296,283,341,0,261],
[268,281,275,298,267,314,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1601, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,293,277,257,260,258,272],
[268,0,294,269,217,290,266,269],
[257,256,0,269,225,263,260,237],
[273,281,281,0,253,272,280,264],
[293,333,325,297,0,272,278,271],
[290,260,287,278,278,0,281,276],
[292,284,290,270,272,269,0,248],
[278,281,313,286,279,274,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1602, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,251,280,272,267,274,297],
[288,0,251,280,266,257,271,267],
[299,299,0,292,294,304,269,314],
[270,270,258,0,270,249,261,293],
[278,284,256,280,0,262,244,262],
[283,293,246,301,288,0,283,291],
[276,279,281,289,306,267,0,294],
[253,283,236,257,288,259,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1603, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,268,231,266,267,264,267],
[288,0,257,252,289,288,323,264],
[282,293,0,278,294,275,351,287],
[319,298,272,0,278,268,305,283],
[284,261,256,272,0,273,293,239],
[283,262,275,282,277,0,283,244],
[286,227,199,245,257,267,0,220],
[283,286,263,267,311,306,330,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1604, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,277,250,282,287,278,279],
[286,0,299,274,292,299,298,273],
[273,251,0,238,260,292,262,280],
[300,276,312,0,309,306,265,284],
[268,258,290,241,0,285,278,298],
[263,251,258,244,265,0,259,253],
[272,252,288,285,272,291,0,277],
[271,277,270,266,252,297,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1605, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,240,225,281,238,257,258],
[310,0,270,276,302,246,277,272],
[310,280,0,270,291,268,277,283],
[325,274,280,0,268,281,293,295],
[269,248,259,282,0,248,249,272],
[312,304,282,269,302,0,291,313],
[293,273,273,257,301,259,0,275],
[292,278,267,255,278,237,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1606, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,269,277,271,259,270,269],
[287,0,283,296,310,277,272,282],
[281,267,0,276,291,268,270,268],
[273,254,274,0,280,254,253,264],
[279,240,259,270,0,257,281,254],
[291,273,282,296,293,0,272,294],
[280,278,280,297,269,278,0,273],
[281,268,282,286,296,256,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1607, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,284,253,312,295,275,263],
[271,0,280,273,305,290,298,289],
[266,270,0,282,312,285,303,268],
[297,277,268,0,294,307,271,272],
[238,245,238,256,0,261,256,255],
[255,260,265,243,289,0,265,257],
[275,252,247,279,294,285,0,274],
[287,261,282,278,295,293,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1608, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,299,289,268,290,281,297],
[257,0,261,277,244,270,275,265],
[251,289,0,259,269,270,272,264],
[261,273,291,0,259,275,285,293],
[282,306,281,291,0,270,295,292],
[260,280,280,275,280,0,276,285],
[269,275,278,265,255,274,0,282],
[253,285,286,257,258,265,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1609, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,256,277,280,266,270,270],
[271,0,251,262,284,261,270,243],
[294,299,0,259,287,273,295,258],
[273,288,291,0,283,249,284,269],
[270,266,263,267,0,280,277,269],
[284,289,277,301,270,0,264,244],
[280,280,255,266,273,286,0,291],
[280,307,292,281,281,306,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1610, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,279,313,330,331,275,358],
[205,0,204,225,269,236,224,272],
[271,346,0,336,335,285,308,372],
[237,325,214,0,286,286,264,312],
[220,281,215,264,0,265,234,289],
[219,314,265,264,285,0,278,328],
[275,326,242,286,316,272,0,358],
[192,278,178,238,261,222,192,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1611, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,260,272,271,264,261,268],
[276,0,292,293,297,306,268,281],
[290,258,0,238,261,259,274,257],
[278,257,312,0,288,282,265,266],
[279,253,289,262,0,280,283,257],
[286,244,291,268,270,0,262,270],
[289,282,276,285,267,288,0,265],
[282,269,293,284,293,280,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1612, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,290,257,261,265,283,299],
[297,0,310,300,274,284,273,304],
[260,240,0,238,264,247,258,252],
[293,250,312,0,266,283,281,261],
[289,276,286,284,0,263,313,302],
[285,266,303,267,287,0,258,295],
[267,277,292,269,237,292,0,287],
[251,246,298,289,248,255,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1613, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,285,316,270,311,298,318],
[268,0,281,294,293,325,290,304],
[265,269,0,266,272,279,294,297],
[234,256,284,0,251,276,250,291],
[280,257,278,299,0,299,294,306],
[239,225,271,274,251,0,253,276],
[252,260,256,300,256,297,0,291],
[232,246,253,259,244,274,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1614, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,265,297,267,267,297,292],
[278,0,249,287,279,274,280,249],
[285,301,0,314,296,295,295,271],
[253,263,236,0,241,269,286,257],
[283,271,254,309,0,292,279,267],
[283,276,255,281,258,0,273,280],
[253,270,255,264,271,277,0,257],
[258,301,279,293,283,270,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1615, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,255,259,253,250,261,288],
[310,0,293,262,318,290,311,321],
[295,257,0,287,277,295,315,313],
[291,288,263,0,302,287,295,309],
[297,232,273,248,0,281,314,305],
[300,260,255,263,269,0,286,312],
[289,239,235,255,236,264,0,291],
[262,229,237,241,245,238,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1616, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,264,252,258,252,291,246],
[293,0,282,306,266,288,317,257],
[286,268,0,292,286,286,298,251],
[298,244,258,0,262,256,289,268],
[292,284,264,288,0,266,305,291],
[298,262,264,294,284,0,320,276],
[259,233,252,261,245,230,0,247],
[304,293,299,282,259,274,303,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1617, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,304,304,298,315,268,298],
[250,0,280,305,276,293,262,277],
[246,270,0,251,272,274,254,257],
[246,245,299,0,275,273,262,246],
[252,274,278,275,0,272,261,271],
[235,257,276,277,278,0,239,257],
[282,288,296,288,289,311,0,271],
[252,273,293,304,279,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1618, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,276,276,278,255,286,297],
[262,0,250,276,291,275,262,275],
[274,300,0,281,295,285,287,293],
[274,274,269,0,299,285,273,272],
[272,259,255,251,0,273,258,289],
[295,275,265,265,277,0,260,287],
[264,288,263,277,292,290,0,299],
[253,275,257,278,261,263,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1619, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,293,256,270,269,236,261],
[289,0,269,286,270,269,244,264],
[257,281,0,253,266,251,238,257],
[294,264,297,0,273,251,265,282],
[280,280,284,277,0,274,248,266],
[281,281,299,299,276,0,252,272],
[314,306,312,285,302,298,0,269],
[289,286,293,268,284,278,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1620, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,277,280,279,268,267,265],
[279,0,290,291,281,297,268,273],
[273,260,0,272,257,274,250,291],
[270,259,278,0,260,273,253,266],
[271,269,293,290,0,282,275,274],
[282,253,276,277,268,0,268,280],
[283,282,300,297,275,282,0,294],
[285,277,259,284,276,270,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1621, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,302,263,260,289,278,285],
[258,0,282,266,242,256,267,264],
[248,268,0,255,244,274,268,250],
[287,284,295,0,261,285,277,283],
[290,308,306,289,0,291,284,275],
[261,294,276,265,259,0,263,273],
[272,283,282,273,266,287,0,261],
[265,286,300,267,275,277,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1622, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,279,273,265,281,314,286],
[259,0,271,272,257,270,283,280],
[271,279,0,268,269,272,315,272],
[277,278,282,0,260,276,304,279],
[285,293,281,290,0,272,294,303],
[269,280,278,274,278,0,292,282],
[236,267,235,246,256,258,0,264],
[264,270,278,271,247,268,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1623, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,255,251,239,278,266,246,251],
[295,0,272,273,302,295,284,279],
[299,278,0,268,254,255,270,262],
[311,277,282,0,264,289,275,288],
[272,248,296,286,0,302,277,295],
[284,255,295,261,248,0,248,263],
[304,266,280,275,273,302,0,289],
[299,271,288,262,255,287,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1624, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,274,269,277,311,278,288],
[250,0,257,241,258,268,260,271],
[276,293,0,267,270,300,276,295],
[281,309,283,0,271,283,292,304],
[273,292,280,279,0,298,287,306],
[239,282,250,267,252,0,273,278],
[272,290,274,258,263,277,0,286],
[262,279,255,246,244,272,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1625, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,271,283,278,280,289,300],
[258,0,241,269,262,271,271,281],
[279,309,0,288,262,289,276,288],
[267,281,262,0,278,279,287,287],
[272,288,288,272,0,300,279,300],
[270,279,261,271,250,0,260,273],
[261,279,274,263,271,290,0,292],
[250,269,262,263,250,277,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1626, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,196,311,304,287,291,255],
[273,0,236,302,278,272,274,284],
[354,314,0,275,324,275,301,343],
[239,248,275,0,253,248,281,245],
[246,272,226,297,0,284,252,292],
[263,278,275,302,266,0,296,316],
[259,276,249,269,298,254,0,269],
[295,266,207,305,258,234,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1627, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,251,279,279,258,299,267],
[275,0,263,293,343,288,328,300],
[299,287,0,327,341,275,336,280],
[271,257,223,0,282,236,300,276],
[271,207,209,268,0,210,268,255],
[292,262,275,314,340,0,310,326],
[251,222,214,250,282,240,0,228],
[283,250,270,274,295,224,322,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1628, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,211,221,238,229,304,217,229],
[339,0,260,313,322,323,295,330],
[329,290,0,332,357,397,273,275],
[312,237,218,0,252,331,238,287],
[321,228,193,298,0,364,265,293],
[246,227,153,219,186,0,203,195],
[333,255,277,312,285,347,0,298],
[321,220,275,263,257,355,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1629, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,248,254,264,271,255,255,277],
[302,0,258,305,304,282,295,297],
[296,292,0,313,266,281,297,265],
[286,245,237,0,270,271,290,275],
[279,246,284,280,0,269,292,279],
[295,268,269,279,281,0,257,273],
[295,255,253,260,258,293,0,271],
[273,253,285,275,271,277,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1630, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,441,330,441,331,441,220,330],
[109,0,110,221,329,328,220,0],
[220,440,0,441,440,550,329,331],
[109,329,109,0,329,329,329,218],
[219,221,110,221,0,221,111,110],
[109,222,0,221,329,0,220,0],
[330,330,221,221,439,330,0,330],
[220,550,219,332,440,550,220,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1631, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,280,271,253,267,253,269],
[279,0,291,271,276,273,277,282],
[270,259,0,249,255,246,240,265],
[279,279,301,0,271,284,284,294],
[297,274,295,279,0,273,261,285],
[283,277,304,266,277,0,250,302],
[297,273,310,266,289,300,0,306],
[281,268,285,256,265,248,244,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1632, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,263,286,266,267,298,297],
[277,0,306,287,265,266,285,293],
[287,244,0,269,237,269,285,252],
[264,263,281,0,245,271,273,290],
[284,285,313,305,0,274,315,301],
[283,284,281,279,276,0,307,274],
[252,265,265,277,235,243,0,287],
[253,257,298,260,249,276,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1633, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,261,234,281,235,273,272],
[260,0,239,250,234,257,270,258],
[289,311,0,269,245,269,291,273],
[316,300,281,0,283,282,273,274],
[269,316,305,267,0,256,285,271],
[315,293,281,268,294,0,313,280],
[277,280,259,277,265,237,0,253],
[278,292,277,276,279,270,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1634, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,284,296,276,272,270,275],
[244,0,261,259,264,262,242,262],
[266,289,0,276,254,281,277,263],
[254,291,274,0,273,255,259,273],
[274,286,296,277,0,301,289,287],
[278,288,269,295,249,0,265,290],
[280,308,273,291,261,285,0,287],
[275,288,287,277,263,260,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1635, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,233,269,271,252,286,279],
[256,0,258,257,245,261,291,258],
[317,292,0,294,296,271,319,289],
[281,293,256,0,261,280,304,284],
[279,305,254,289,0,274,301,279],
[298,289,279,270,276,0,312,277],
[264,259,231,246,249,238,0,270],
[271,292,261,266,271,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1636, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,321,279,250,348,281,320],
[258,0,243,216,191,286,230,273],
[229,307,0,302,264,311,287,309],
[271,334,248,0,279,323,258,282],
[300,359,286,271,0,336,328,349],
[202,264,239,227,214,0,216,265],
[269,320,263,292,222,334,0,305],
[230,277,241,268,201,285,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1637, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,285,283,289,264,263,288],
[282,0,265,263,275,280,265,261],
[265,285,0,269,257,299,262,278],
[267,287,281,0,273,259,261,279],
[261,275,293,277,0,261,268,259],
[286,270,251,291,289,0,282,295],
[287,285,288,289,282,268,0,280],
[262,289,272,271,291,255,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1638, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,272,266,261,289,283,289],
[273,0,279,264,272,264,262,294],
[278,271,0,263,255,255,259,282],
[284,286,287,0,274,279,276,294],
[289,278,295,276,0,258,273,273],
[261,286,295,271,292,0,281,273],
[267,288,291,274,277,269,0,289],
[261,256,268,256,277,277,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1639, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,252,279,222,240,230,234],
[287,0,280,273,249,274,275,228],
[298,270,0,275,252,267,260,251],
[271,277,275,0,224,277,265,245],
[328,301,298,326,0,293,285,270],
[310,276,283,273,257,0,277,235],
[320,275,290,285,265,273,0,275],
[316,322,299,305,280,315,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1640, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,266,207,231,257,235,286],
[321,0,303,273,269,282,267,331],
[284,247,0,284,237,255,278,291],
[343,277,266,0,274,260,263,285],
[319,281,313,276,0,273,268,326],
[293,268,295,290,277,0,262,274],
[315,283,272,287,282,288,0,332],
[264,219,259,265,224,276,218,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1641, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,281,320,298,296,279,286],
[288,0,272,308,294,278,258,281],
[269,278,0,287,277,295,277,280],
[230,242,263,0,264,269,256,255],
[252,256,273,286,0,268,286,257],
[254,272,255,281,282,0,238,254],
[271,292,273,294,264,312,0,287],
[264,269,270,295,293,296,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1642, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,268,242,266,268,258],
[290,0,266,281,265,266,279,266],
[278,284,0,271,256,265,278,252],
[282,269,279,0,266,273,283,268],
[308,285,294,284,0,266,286,276],
[284,284,285,277,284,0,267,271],
[282,271,272,267,264,283,0,267],
[292,284,298,282,274,279,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1643, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,257,273,282,242,252,328],
[319,0,274,273,279,277,283,301],
[293,276,0,273,291,261,315,256],
[277,277,277,0,233,250,298,309],
[268,271,259,317,0,259,269,275],
[308,273,289,300,291,0,277,296],
[298,267,235,252,281,273,0,266],
[222,249,294,241,275,254,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1644, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,272,281,273,236,289,263],
[271,0,254,285,258,269,259,271],
[278,296,0,310,293,277,263,308],
[269,265,240,0,269,276,257,287],
[277,292,257,281,0,232,233,264],
[314,281,273,274,318,0,245,276],
[261,291,287,293,317,305,0,284],
[287,279,242,263,286,274,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1645, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,303,281,293,273,292,285],
[243,0,294,257,268,263,270,237],
[247,256,0,279,269,239,286,251],
[269,293,271,0,282,278,282,280],
[257,282,281,268,0,275,276,251],
[277,287,311,272,275,0,298,256],
[258,280,264,268,274,252,0,256],
[265,313,299,270,299,294,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1646, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,262,263,272,257,269,277],
[263,0,240,253,262,244,249,276],
[288,310,0,261,268,288,282,275],
[287,297,289,0,275,280,293,286],
[278,288,282,275,0,280,277,282],
[293,306,262,270,270,0,286,286],
[281,301,268,257,273,264,0,292],
[273,274,275,264,268,264,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1647, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,300,275,317,324,299,258,318],
[250,0,237,334,275,271,238,252],
[275,313,0,335,246,240,259,256],
[233,216,215,0,272,248,209,219],
[226,275,304,278,0,270,239,251],
[251,279,310,302,280,0,284,238],
[292,312,291,341,311,266,0,296],
[232,298,294,331,299,312,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1648, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,265,270,284,309,257],
[269,0,242,268,260,290,249,260],
[270,308,0,256,271,289,299,282],
[285,282,294,0,253,304,294,283],
[280,290,279,297,0,296,279,254],
[266,260,261,246,254,0,258,260],
[241,301,251,256,271,292,0,254],
[293,290,268,267,296,290,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1649, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,229,202,288,201,230,316],
[292,0,233,292,348,263,322,261],
[321,317,0,263,290,205,263,289],
[348,258,287,0,291,291,317,376],
[262,202,260,259,0,261,288,318],
[349,287,345,259,289,0,404,433],
[320,228,287,233,262,146,0,404],
[234,289,261,174,232,117,146,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1650, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,280,279,280,279,270,280],
[269,0,281,270,270,274,281,270],
[270,269,0,277,288,265,280,282],
[271,280,273,0,279,269,278,274],
[270,280,262,271,0,270,273,277],
[271,276,285,281,280,0,293,305],
[280,269,270,272,277,257,0,270],
[270,280,268,276,273,245,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1651, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,262,282,278,291,286,262],
[292,0,277,292,279,300,301,275],
[288,273,0,292,284,297,309,283],
[268,258,258,0,268,268,260,270],
[272,271,266,282,0,284,271,272],
[259,250,253,282,266,0,275,261],
[264,249,241,290,279,275,0,255],
[288,275,267,280,278,289,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1652, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,278,271,271,292,286,285],
[271,0,282,267,280,283,277,291],
[272,268,0,269,261,284,273,295],
[279,283,281,0,248,275,257,277],
[279,270,289,302,0,302,305,294],
[258,267,266,275,248,0,270,284],
[264,273,277,293,245,280,0,280],
[265,259,255,273,256,266,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1653, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,267,313,285,277,298,273],
[287,0,270,288,271,278,297,285],
[283,280,0,282,281,283,293,264],
[237,262,268,0,257,248,273,246],
[265,279,269,293,0,276,267,272],
[273,272,267,302,274,0,269,257],
[252,253,257,277,283,281,0,271],
[277,265,286,304,278,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1654, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,319,266,291,301,324,299,288],
[231,0,256,252,285,302,280,257],
[284,294,0,263,276,303,289,290],
[259,298,287,0,310,327,305,304],
[249,265,274,240,0,278,279,255],
[226,248,247,223,272,0,281,264],
[251,270,261,245,271,269,0,284],
[262,293,260,246,295,286,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1655, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,306,280,293,260,287,298,281],
[244,0,268,259,263,252,297,292],
[270,282,0,269,271,260,293,272],
[257,291,281,0,275,268,273,289],
[290,287,279,275,0,264,283,277],
[263,298,290,282,286,0,266,283],
[252,253,257,277,267,284,0,294],
[269,258,278,261,273,267,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1656, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,281,273,276,291,258,281],
[284,0,296,272,279,288,275,277],
[269,254,0,286,264,291,265,273],
[277,278,264,0,287,283,252,266],
[274,271,286,263,0,281,256,289],
[259,262,259,267,269,0,257,263],
[292,275,285,298,294,293,0,297],
[269,273,277,284,261,287,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1657, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,261,262,272,272,282,292],
[291,0,275,283,279,274,283,312],
[289,275,0,282,256,285,281,291],
[288,267,268,0,270,280,280,282],
[278,271,294,280,0,284,291,286],
[278,276,265,270,266,0,269,273],
[268,267,269,270,259,281,0,265],
[258,238,259,268,264,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1658, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,284,271,272,281,270,263],
[268,0,281,284,282,264,280,269],
[266,269,0,294,270,273,257,253],
[279,266,256,0,266,255,270,277],
[278,268,280,284,0,268,271,268],
[269,286,277,295,282,0,284,286],
[280,270,293,280,279,266,0,281],
[287,281,297,273,282,264,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1659, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,275,247,295,289,270,258],
[293,0,282,273,277,321,270,311],
[275,268,0,308,297,273,261,309],
[303,277,242,0,290,303,281,282],
[255,273,253,260,0,258,251,250],
[261,229,277,247,292,0,259,238],
[280,280,289,269,299,291,0,267],
[292,239,241,268,300,312,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1660, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,293,280,272,307,303,281],
[259,0,272,249,257,279,292,269],
[257,278,0,261,250,283,265,256],
[270,301,289,0,277,297,300,306],
[278,293,300,273,0,301,296,292],
[243,271,267,253,249,0,270,258],
[247,258,285,250,254,280,0,269],
[269,281,294,244,258,292,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1661, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,287,265,286,287,275,276],
[293,0,291,280,278,269,269,281],
[263,259,0,252,277,261,267,278],
[285,270,298,0,261,260,260,283],
[264,272,273,289,0,271,254,272],
[263,281,289,290,279,0,268,281],
[275,281,283,290,296,282,0,296],
[274,269,272,267,278,269,254,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1662, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,253,256,259,267,263,266],
[270,0,249,253,269,276,279,277],
[297,301,0,273,297,303,308,309],
[294,297,277,0,274,290,277,293],
[291,281,253,276,0,268,291,288],
[283,274,247,260,282,0,277,273],
[287,271,242,273,259,273,0,257],
[284,273,241,257,262,277,293,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1663, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,276,282,270,285,313,266],
[280,0,289,276,260,277,304,288],
[274,261,0,269,270,260,293,271],
[268,274,281,0,275,301,285,269],
[280,290,280,275,0,282,292,281],
[265,273,290,249,268,0,292,277],
[237,246,257,265,258,258,0,280],
[284,262,279,281,269,273,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1664, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,316,348,272,350,252,283],
[254,0,311,286,236,270,289,279],
[234,239,0,281,235,260,261,290],
[202,264,269,0,299,297,257,269],
[278,314,315,251,0,349,314,326],
[200,280,290,253,201,0,249,249],
[298,261,289,293,236,301,0,279],
[267,271,260,281,224,301,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1665, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,280,275,276,280,273,279],
[262,0,280,264,258,263,267,276],
[270,270,0,263,260,285,287,282],
[275,286,287,0,268,273,275,280],
[274,292,290,282,0,275,275,275],
[270,287,265,277,275,0,293,271],
[277,283,263,275,275,257,0,265],
[271,274,268,270,275,279,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1666, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,268,277,303,300,277,251],
[277,0,282,287,295,288,275,263],
[282,268,0,259,270,276,274,280],
[273,263,291,0,273,281,273,243],
[247,255,280,277,0,274,274,256],
[250,262,274,269,276,0,277,264],
[273,275,276,277,276,273,0,263],
[299,287,270,307,294,286,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1667, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,268,287,279,282,257],
[265,0,308,294,307,287,275,284],
[253,242,0,281,282,269,268,272],
[282,256,269,0,305,274,273,259],
[263,243,268,245,0,248,270,264],
[271,263,281,276,302,0,280,261],
[268,275,282,277,280,270,0,261],
[293,266,278,291,286,289,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1668, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,240,294,285,241,264,257],
[284,0,281,304,293,278,284,269],
[310,269,0,311,307,279,263,294],
[256,246,239,0,268,232,241,242],
[265,257,243,282,0,245,260,263],
[309,272,271,318,305,0,261,280],
[286,266,287,309,290,289,0,285],
[293,281,256,308,287,270,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1669, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,306,284,296,324,239,259],
[267,0,291,288,298,322,265,274],
[244,259,0,286,273,293,260,270],
[266,262,264,0,306,325,280,292],
[254,252,277,244,0,287,247,243],
[226,228,257,225,263,0,257,241],
[311,285,290,270,303,293,0,278],
[291,276,280,258,307,309,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1670, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,257,275,277,284,260,276],
[273,0,254,269,262,263,255,253],
[293,296,0,306,294,271,279,292],
[275,281,244,0,262,258,271,256],
[273,288,256,288,0,273,255,277],
[266,287,279,292,277,0,256,292],
[290,295,271,279,295,294,0,292],
[274,297,258,294,273,258,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1671, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,303,298,275,289,295,304],
[264,0,285,285,269,295,279,275],
[247,265,0,284,256,286,285,273],
[252,265,266,0,253,277,262,266],
[275,281,294,297,0,306,285,292],
[261,255,264,273,244,0,272,261],
[255,271,265,288,265,278,0,265],
[246,275,277,284,258,289,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1672, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,271,277,279,283,263,273],
[260,0,248,270,268,261,261,267],
[279,302,0,301,297,254,276,284],
[273,280,249,0,276,241,252,267],
[271,282,253,274,0,269,260,269],
[267,289,296,309,281,0,290,259],
[287,289,274,298,290,260,0,272],
[277,283,266,283,281,291,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1673, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,275,293,274,277,291,262],
[259,0,260,258,272,272,244,265],
[275,290,0,283,261,274,262,248],
[257,292,267,0,269,290,289,243],
[276,278,289,281,0,264,283,249],
[273,278,276,260,286,0,278,268],
[259,306,288,261,267,272,0,281],
[288,285,302,307,301,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1674, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,295,266,270,298,299,284],
[264,0,294,264,287,267,266,266],
[255,256,0,271,270,265,268,279],
[284,286,279,0,267,313,287,266],
[280,263,280,283,0,301,293,280],
[252,283,285,237,249,0,280,269],
[251,284,282,263,257,270,0,278],
[266,284,271,284,270,281,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1675, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,286,285,293,278,286],
[276,0,287,283,290,278,274,276],
[270,263,0,281,282,251,270,276],
[264,267,269,0,260,271,255,264],
[265,260,268,290,0,276,275,273],
[257,272,299,279,274,0,272,280],
[272,276,280,295,275,278,0,278],
[264,274,274,286,277,270,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1676, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,303,301,281,288,297,306],
[279,0,305,297,265,260,282,258],
[247,245,0,288,276,255,275,275],
[249,253,262,0,248,266,277,256],
[269,285,274,302,0,289,298,277],
[262,290,295,284,261,0,297,284],
[253,268,275,273,252,253,0,248],
[244,292,275,294,273,266,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1677, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,282,266,267,262,276,296],
[297,0,284,274,272,282,259,272],
[268,266,0,270,281,278,266,283],
[284,276,280,0,285,274,271,280],
[283,278,269,265,0,291,286,285],
[288,268,272,276,259,0,281,285],
[274,291,284,279,264,269,0,253],
[254,278,267,270,265,265,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1678, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,297,285,308,275,267,330],
[257,0,312,280,298,278,257,295],
[253,238,0,258,276,250,262,276],
[265,270,292,0,305,267,262,290],
[242,252,274,245,0,243,232,269],
[275,272,300,283,307,0,276,327],
[283,293,288,288,318,274,0,313],
[220,255,274,260,281,223,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1679, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,268,276,260,259,265,254],
[286,0,274,277,270,282,262,258],
[282,276,0,266,268,288,266,262],
[274,273,284,0,283,284,276,274],
[290,280,282,267,0,263,261,261],
[291,268,262,266,287,0,273,265],
[285,288,284,274,289,277,0,277],
[296,292,288,276,289,285,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1680, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,275,278,302,302,273,279],
[277,0,258,289,297,300,279,285],
[275,292,0,273,311,306,301,288],
[272,261,277,0,268,284,299,282],
[248,253,239,282,0,259,248,264],
[248,250,244,266,291,0,267,272],
[277,271,249,251,302,283,0,270],
[271,265,262,268,286,278,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1681, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,314,279,258,276,317,286],
[292,0,302,283,266,277,305,267],
[236,248,0,264,252,250,285,250],
[271,267,286,0,253,273,273,252],
[292,284,298,297,0,285,279,260],
[274,273,300,277,265,0,303,274],
[233,245,265,277,271,247,0,258],
[264,283,300,298,290,276,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1682, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,238,286,270,290,262,289],
[283,0,264,300,280,281,279,303],
[312,286,0,309,298,304,275,288],
[264,250,241,0,264,274,265,257],
[280,270,252,286,0,283,267,294],
[260,269,246,276,267,0,266,282],
[288,271,275,285,283,284,0,293],
[261,247,262,293,256,268,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1683, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,300,257,287,254,304,278],
[253,0,276,248,266,245,269,239],
[250,274,0,282,297,272,288,282],
[293,302,268,0,264,292,277,273],
[263,284,253,286,0,256,277,263],
[296,305,278,258,294,0,306,274],
[246,281,262,273,273,244,0,285],
[272,311,268,277,287,276,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1684, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,227,227,283,242,208,241],
[279,0,273,296,335,254,270,239],
[323,277,0,264,344,247,281,247],
[323,254,286,0,308,261,200,233],
[267,215,206,242,0,211,204,187],
[308,296,303,289,339,0,242,276],
[342,280,269,350,346,308,0,265],
[309,311,303,317,363,274,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1685, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,257,294,278,254,260,283],
[286,0,271,283,277,297,301,283],
[293,279,0,302,275,293,299,274],
[256,267,248,0,267,245,273,284],
[272,273,275,283,0,277,282,291],
[296,253,257,305,273,0,291,281],
[290,249,251,277,268,259,0,276],
[267,267,276,266,259,269,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1686, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,270,285,272,286,271,278],
[264,0,301,280,264,281,274,272],
[280,249,0,263,251,269,287,257],
[265,270,287,0,278,274,278,261],
[278,286,299,272,0,280,283,269],
[264,269,281,276,270,0,287,263],
[279,276,263,272,267,263,0,264],
[272,278,293,289,281,287,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1687, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,316,253,318,293,306,282],
[246,0,291,220,297,272,289,260],
[234,259,0,210,288,263,258,237],
[297,330,340,0,340,322,308,270],
[232,253,262,210,0,248,255,242],
[257,278,287,228,302,0,268,264],
[244,261,292,242,295,282,0,255],
[268,290,313,280,308,286,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1688, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,293,301,254,280,253,275],
[264,0,312,285,289,286,276,275],
[257,238,0,309,280,268,255,249],
[249,265,241,0,268,255,230,245],
[296,261,270,282,0,267,248,254],
[270,264,282,295,283,0,274,283],
[297,274,295,320,302,276,0,286],
[275,275,301,305,296,267,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1689, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,257,270,255,269,257,261],
[274,0,276,269,250,275,259,270],
[293,274,0,281,275,264,274,275],
[280,281,269,0,255,262,263,267],
[295,300,275,295,0,264,282,283],
[281,275,286,288,286,0,269,282],
[293,291,276,287,268,281,0,287],
[289,280,275,283,267,268,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1690, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,253,283,260,274,262,282],
[247,0,265,263,255,258,249,250],
[297,285,0,301,275,278,276,284],
[267,287,249,0,252,270,246,274],
[290,295,275,298,0,293,267,282],
[276,292,272,280,257,0,258,279],
[288,301,274,304,283,292,0,294],
[268,300,266,276,268,271,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1691, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,296,285,302,292,290],
[271,0,289,281,276,252,301,264],
[288,261,0,319,285,283,307,298],
[254,269,231,0,242,273,270,259],
[265,274,265,308,0,269,296,280],
[248,298,267,277,281,0,285,278],
[258,249,243,280,254,265,0,251],
[260,286,252,291,270,272,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1692, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,302,282,274,314,281,302],
[271,0,288,284,276,291,270,296],
[248,262,0,280,285,321,269,282],
[268,266,270,0,266,309,269,276],
[276,274,265,284,0,310,276,282],
[236,259,229,241,240,0,241,229],
[269,280,281,281,274,309,0,283],
[248,254,268,274,268,321,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1693, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,268,295,294,334,311,261],
[297,0,324,279,286,318,271,280],
[282,226,0,300,294,330,280,276],
[255,271,250,0,257,267,268,245],
[256,264,256,293,0,316,283,219],
[216,232,220,283,234,0,240,226],
[239,279,270,282,267,310,0,262],
[289,270,274,305,331,324,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1694, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,254,287,278,268,262,279],
[284,0,272,299,286,284,285,275],
[296,278,0,291,293,292,280,269],
[263,251,259,0,261,262,282,258],
[272,264,257,289,0,261,264,255],
[282,266,258,288,289,0,283,273],
[288,265,270,268,286,267,0,262],
[271,275,281,292,295,277,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1695, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,337,318,260,305,295,317,277],
[213,0,289,259,255,249,263,224],
[232,261,0,236,277,255,244,247],
[290,291,314,0,267,303,287,263],
[245,295,273,283,0,287,265,276],
[255,301,295,247,263,0,286,256],
[233,287,306,263,285,264,0,249],
[273,326,303,287,274,294,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1696, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,305,311,242,298,307,274,274],
[245,0,264,255,289,255,278,277],
[239,286,0,277,296,271,296,268],
[308,295,273,0,301,301,319,276],
[252,261,254,249,0,280,248,255],
[243,295,279,249,270,0,281,264],
[276,272,254,231,302,269,0,253],
[276,273,282,274,295,286,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1697, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,330,317,335,243,359,309,273],
[220,0,254,262,224,267,292,246],
[233,296,0,287,271,328,242,276],
[215,288,263,0,231,261,260,222],
[307,326,279,319,0,320,289,262],
[191,283,222,289,230,0,275,262],
[241,258,308,290,261,275,0,239],
[277,304,274,328,288,288,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1698, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,264,268,253,252,273,268],
[285,0,277,287,272,281,273,286],
[286,273,0,298,273,270,264,273],
[282,263,252,0,264,261,277,263],
[297,278,277,286,0,264,281,280],
[298,269,280,289,286,0,277,279],
[277,277,286,273,269,273,0,284],
[282,264,277,287,270,271,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1699, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,278,272,279,257,294,286],
[276,0,299,292,271,266,317,283],
[272,251,0,264,277,283,284,277],
[278,258,286,0,289,288,285,277],
[271,279,273,261,0,248,301,250],
[293,284,267,262,302,0,296,282],
[256,233,266,265,249,254,0,263],
[264,267,273,273,300,268,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1700, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,262,277,264,294,261],
[284,0,282,267,271,271,284,276],
[276,268,0,253,257,255,285,257],
[288,283,297,0,269,255,309,278],
[273,279,293,281,0,256,302,281],
[286,279,295,295,294,0,295,267],
[256,266,265,241,248,255,0,268],
[289,274,293,272,269,283,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1701, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,294,281,281,284,267,284],
[256,0,267,277,262,290,271,263],
[256,283,0,285,282,287,285,277],
[269,273,265,0,296,277,258,266],
[269,288,268,254,0,263,253,249],
[266,260,263,273,287,0,272,268],
[283,279,265,292,297,278,0,266],
[266,287,273,284,301,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1702, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,331,440,219,415,357,304,276],
[219,0,384,301,306,303,301,274],
[110,166,0,164,222,168,221,194],
[331,249,386,0,358,329,357,333],
[135,244,328,192,0,300,218,191],
[193,247,382,221,250,0,276,249],
[246,249,329,193,332,274,0,167],
[274,276,356,217,359,301,383,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1703, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,289,294,286,306,270,284],
[240,0,258,273,254,262,248,266],
[261,292,0,278,275,293,282,271],
[256,277,272,0,253,263,243,267],
[264,296,275,297,0,277,272,270],
[244,288,257,287,273,0,235,278],
[280,302,268,307,278,315,0,273],
[266,284,279,283,280,272,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1704, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,270,274,278,274,279,271],
[279,0,284,265,277,271,275,277],
[280,266,0,270,264,263,254,262],
[276,285,280,0,275,269,293,283],
[272,273,286,275,0,266,270,284],
[276,279,287,281,284,0,277,268],
[271,275,296,257,280,273,0,267],
[279,273,288,267,266,282,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1705, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,293,293,276,300,262,267],
[269,0,249,269,270,266,253,249],
[257,301,0,291,289,295,264,275],
[257,281,259,0,293,295,269,266],
[274,280,261,257,0,270,247,254],
[250,284,255,255,280,0,251,247],
[288,297,286,281,303,299,0,271],
[283,301,275,284,296,303,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1706, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,267,265,263,282,286],
[293,0,280,286,277,264,284,269],
[284,270,0,284,305,276,283,282],
[283,264,266,0,272,269,287,291],
[285,273,245,278,0,267,290,280],
[287,286,274,281,283,0,290,274],
[268,266,267,263,260,260,0,264],
[264,281,268,259,270,276,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1707, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,287,274,269,269,275,285],
[272,0,264,285,272,276,257,252],
[263,286,0,283,252,282,254,283],
[276,265,267,0,238,262,276,273],
[281,278,298,312,0,296,273,274],
[281,274,268,288,254,0,261,277],
[275,293,296,274,277,289,0,282],
[265,298,267,277,276,273,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1708, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,270,248,261,270,267,262],
[272,0,252,265,269,276,272,268],
[280,298,0,280,283,258,282,269],
[302,285,270,0,261,261,279,249],
[289,281,267,289,0,274,282,276],
[280,274,292,289,276,0,276,277],
[283,278,268,271,268,274,0,270],
[288,282,281,301,274,273,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1709, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,270,264,279,262,265,279],
[275,0,267,288,270,292,259,275],
[280,283,0,281,281,257,276,278],
[286,262,269,0,257,269,258,264],
[271,280,269,293,0,246,276,258],
[288,258,293,281,304,0,256,267],
[285,291,274,292,274,294,0,290],
[271,275,272,286,292,283,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1710, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,285,290,266,283,277,287],
[272,0,293,271,289,281,294,298],
[265,257,0,286,264,271,285,295],
[260,279,264,0,259,283,271,283],
[284,261,286,291,0,286,286,288],
[267,269,279,267,264,0,283,267],
[273,256,265,279,264,267,0,282],
[263,252,255,267,262,283,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1711, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,278,278,256,288,300,281],
[234,0,265,263,260,271,264,257],
[272,285,0,258,269,276,282,256],
[272,287,292,0,278,291,285,266],
[294,290,281,272,0,278,303,264],
[262,279,274,259,272,0,269,273],
[250,286,268,265,247,281,0,255],
[269,293,294,284,286,277,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1712, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,272,270,265,262,282,267],
[280,0,307,285,266,268,290,282],
[278,243,0,260,251,243,266,257],
[280,265,290,0,271,263,272,266],
[285,284,299,279,0,286,297,270],
[288,282,307,287,264,0,289,273],
[268,260,284,278,253,261,0,265],
[283,268,293,284,280,277,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1713, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,316,301,307,304,279,274],
[259,0,290,280,275,285,258,260],
[234,260,0,271,242,272,254,263],
[249,270,279,0,293,261,237,252],
[243,275,308,257,0,297,248,255],
[246,265,278,289,253,0,230,236],
[271,292,296,313,302,320,0,284],
[276,290,287,298,295,314,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1714, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,303,246,335,356,303,293],
[277,0,322,225,318,348,301,310],
[247,228,0,281,315,325,303,271],
[304,325,269,0,344,340,319,319],
[215,232,235,206,0,279,267,237],
[194,202,225,210,271,0,239,274],
[247,249,247,231,283,311,0,263],
[257,240,279,231,313,276,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1715, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,277,259,273,305,261],
[263,0,282,274,284,283,282,277],
[272,268,0,261,266,273,284,262],
[273,276,289,0,258,277,280,266],
[291,266,284,292,0,309,324,267],
[277,267,277,273,241,0,270,258],
[245,268,266,270,226,280,0,239],
[289,273,288,284,283,292,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1716, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,322,358,259,248,265,264],
[272,0,291,314,305,267,295,298],
[228,259,0,255,272,233,284,238],
[192,236,295,0,291,225,261,279],
[291,245,278,259,0,262,252,294],
[302,283,317,325,288,0,269,296],
[285,255,266,289,298,281,0,273],
[286,252,312,271,256,254,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1717, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,305,286,295,360,268,249],
[256,0,240,219,258,299,267,268],
[245,310,0,237,271,294,276,259],
[264,331,313,0,295,285,256,328],
[255,292,279,255,0,316,232,280],
[190,251,256,265,234,0,223,234],
[282,283,274,294,318,327,0,260],
[301,282,291,222,270,316,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1718, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,255,297,283,305,283,290],
[262,0,266,275,294,279,277,277],
[295,284,0,270,311,308,293,323],
[253,275,280,0,286,278,303,312],
[267,256,239,264,0,257,294,252],
[245,271,242,272,293,0,290,254],
[267,273,257,247,256,260,0,279],
[260,273,227,238,298,296,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1719, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,259,287,259,272,265,279],
[246,0,269,265,258,265,276,270],
[291,281,0,273,259,263,285,303],
[263,285,277,0,259,285,259,287],
[291,292,291,291,0,278,290,273],
[278,285,287,265,272,0,297,282],
[285,274,265,291,260,253,0,274],
[271,280,247,263,277,268,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1720, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,254,277,260,270,255,223],
[277,0,260,281,281,269,255,244],
[296,290,0,306,312,300,275,278],
[273,269,244,0,294,283,224,261],
[290,269,238,256,0,245,255,275],
[280,281,250,267,305,0,273,264],
[295,295,275,326,295,277,0,283],
[327,306,272,289,275,286,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1721, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,258,268,272,265,282,269],
[291,0,265,287,286,304,290,294],
[292,285,0,277,266,284,295,273],
[282,263,273,0,290,296,305,278],
[278,264,284,260,0,284,300,277],
[285,246,266,254,266,0,277,260],
[268,260,255,245,250,273,0,280],
[281,256,277,272,273,290,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1722, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,289,257,272,278,289,274],
[248,0,253,245,266,253,279,271],
[261,297,0,268,299,270,301,300],
[293,305,282,0,290,282,300,271],
[278,284,251,260,0,279,291,261],
[272,297,280,268,271,0,282,270],
[261,271,249,250,259,268,0,256],
[276,279,250,279,289,280,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1723, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,293,284,291,290,295,278],
[276,0,282,306,280,285,275,264],
[257,268,0,274,284,278,275,258],
[266,244,276,0,265,250,269,256],
[259,270,266,285,0,267,274,263],
[260,265,272,300,283,0,270,260],
[255,275,275,281,276,280,0,261],
[272,286,292,294,287,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1724, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,258,241,317,242,241,291],
[303,0,278,289,333,272,290,303],
[292,272,0,263,285,250,263,294],
[309,261,287,0,311,268,273,331],
[233,217,265,239,0,221,229,274],
[308,278,300,282,329,0,271,333],
[309,260,287,277,321,279,0,329],
[259,247,256,219,276,217,221,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1725, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,287,277,270,288,261,273],
[287,0,283,284,276,266,280,270],
[263,267,0,268,257,276,246,273],
[273,266,282,0,287,288,282,284],
[280,274,293,263,0,289,251,266],
[262,284,274,262,261,0,252,276],
[289,270,304,268,299,298,0,288],
[277,280,277,266,284,274,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1726, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,269,294,279,273,283,283],
[288,0,297,280,267,309,317,279],
[281,253,0,286,265,284,278,286],
[256,270,264,0,258,271,301,266],
[271,283,285,292,0,299,320,290],
[277,241,266,279,251,0,278,265],
[267,233,272,249,230,272,0,272],
[267,271,264,284,260,285,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1727, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,274,253,278,281,278,283],
[284,0,273,291,268,287,286,297],
[276,277,0,277,267,279,273,306],
[297,259,273,0,245,268,268,286],
[272,282,283,305,0,285,290,297],
[269,263,271,282,265,0,288,300],
[272,264,277,282,260,262,0,308],
[267,253,244,264,253,250,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1728, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,265,280,280,282,263,260],
[274,0,257,267,286,287,255,263],
[285,293,0,290,296,291,259,281],
[270,283,260,0,286,264,261,275],
[270,264,254,264,0,275,243,250],
[268,263,259,286,275,0,254,239],
[287,295,291,289,307,296,0,269],
[290,287,269,275,300,311,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1729, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,268,265,260,274,275,267],
[263,0,258,262,273,267,277,259],
[282,292,0,280,277,267,289,273],
[285,288,270,0,306,294,282,288],
[290,277,273,244,0,281,278,251],
[276,283,283,256,269,0,287,283],
[275,273,261,268,272,263,0,260],
[283,291,277,262,299,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1730, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,257,265,276,287,254,268],
[266,0,251,259,270,281,241,275],
[293,299,0,270,302,304,290,307],
[285,291,280,0,285,290,268,296],
[274,280,248,265,0,293,265,275],
[263,269,246,260,257,0,249,277],
[296,309,260,282,285,301,0,291],
[282,275,243,254,275,273,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1731, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,307,296,285,301,294,263],
[256,0,258,261,272,270,269,265],
[243,292,0,291,249,282,300,284],
[254,289,259,0,258,272,281,269],
[265,278,301,292,0,297,303,283],
[249,280,268,278,253,0,280,270],
[256,281,250,269,247,270,0,271],
[287,285,266,281,267,280,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1732, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,260,262,267,273,254,261],
[285,0,258,268,255,275,272,282],
[290,292,0,276,264,265,263,278],
[288,282,274,0,261,290,273,282],
[283,295,286,289,0,272,283,295],
[277,275,285,260,278,0,271,278],
[296,278,287,277,267,279,0,268],
[289,268,272,268,255,272,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1733, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,282,280,277,276,274,265],
[253,0,259,263,254,256,261,262],
[268,291,0,275,273,265,278,267],
[270,287,275,0,276,281,267,267],
[273,296,277,274,0,291,268,274],
[274,294,285,269,259,0,273,280],
[276,289,272,283,282,277,0,260],
[285,288,283,283,276,270,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1734, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,288,279,278,295,269,286],
[269,0,275,268,268,269,288,281],
[262,275,0,273,286,265,283,274],
[271,282,277,0,265,254,284,272],
[272,282,264,285,0,271,283,280],
[255,281,285,296,279,0,293,291],
[281,262,267,266,267,257,0,269],
[264,269,276,278,270,259,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1735, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,270,286,273,261,277,256],
[296,0,263,297,303,261,280,292],
[280,287,0,295,284,263,267,267],
[264,253,255,0,289,266,280,266],
[277,247,266,261,0,256,245,270],
[289,289,287,284,294,0,257,287],
[273,270,283,270,305,293,0,270],
[294,258,283,284,280,263,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1736, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,271,291,246,264,252,275],
[293,0,237,286,255,261,250,268],
[279,313,0,259,255,282,270,272],
[259,264,291,0,250,279,260,269],
[304,295,295,300,0,264,294,274],
[286,289,268,271,286,0,277,293],
[298,300,280,290,256,273,0,275],
[275,282,278,281,276,257,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1737, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,289,309,273,274,277,253],
[296,0,267,304,256,285,274,276],
[261,283,0,285,290,289,271,256],
[241,246,265,0,248,247,261,213],
[277,294,260,302,0,275,266,260],
[276,265,261,303,275,0,292,278],
[273,276,279,289,284,258,0,240],
[297,274,294,337,290,272,310,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1738, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,275,276,294,269,283,296],
[272,0,273,273,249,261,263,255],
[275,277,0,272,279,262,289,289],
[274,277,278,0,258,265,261,261],
[256,301,271,292,0,278,291,288],
[281,289,288,285,272,0,260,289],
[267,287,261,289,259,290,0,277],
[254,295,261,289,262,261,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1739, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,265,265,273,269,271,284],
[263,0,270,260,277,267,259,264],
[285,280,0,279,274,262,268,284],
[285,290,271,0,282,287,286,283],
[277,273,276,268,0,268,276,281],
[281,283,288,263,282,0,286,300],
[279,291,282,264,274,264,0,282],
[266,286,266,267,269,250,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1740, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,251,256,265,288,263,264],
[272,0,247,242,264,262,252,244],
[299,303,0,280,289,278,271,266],
[294,308,270,0,293,311,298,279],
[285,286,261,257,0,303,277,241],
[262,288,272,239,247,0,264,265],
[287,298,279,252,273,286,0,262],
[286,306,284,271,309,285,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1741, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,270,271,286,277,267,310],
[259,0,285,287,287,266,264,298],
[280,265,0,285,274,243,248,274],
[279,263,265,0,269,269,261,300],
[264,263,276,281,0,262,225,296],
[273,284,307,281,288,0,285,292],
[283,286,302,289,325,265,0,304],
[240,252,276,250,254,258,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1742, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,274,265,269,280,249,279],
[277,0,255,265,241,267,267,264],
[276,295,0,267,306,291,274,267],
[285,285,283,0,265,295,281,276],
[281,309,244,285,0,294,284,265],
[270,283,259,255,256,0,239,228],
[301,283,276,269,266,311,0,270],
[271,286,283,274,285,322,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1743, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,345,252,251,298,324,299,229],
[205,0,206,184,253,228,250,294],
[298,344,0,297,299,253,345,271],
[299,366,253,0,343,208,346,250],
[252,297,251,207,0,207,344,296],
[226,322,297,342,343,0,346,298],
[251,300,205,204,206,204,0,202],
[321,256,279,300,254,252,348,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1744, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,266,300,295,289,273,289],
[273,0,274,297,304,283,263,282],
[284,276,0,291,275,282,279,281],
[250,253,259,0,250,272,248,255],
[255,246,275,300,0,278,283,283],
[261,267,268,278,272,0,269,282],
[277,287,271,302,267,281,0,269],
[261,268,269,295,267,268,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1745, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,269,288,256,278,271,255],
[281,0,270,266,274,282,276,257],
[281,280,0,260,271,284,275,253],
[262,284,290,0,285,286,280,260],
[294,276,279,265,0,272,279,281],
[272,268,266,264,278,0,281,285],
[279,274,275,270,271,269,0,266],
[295,293,297,290,269,265,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1746, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,279,279,281,277,273,279],
[291,0,285,275,285,280,277,281],
[271,265,0,282,270,278,278,274],
[271,275,268,0,272,261,275,265],
[269,265,280,278,0,287,272,281],
[273,270,272,289,263,0,269,279],
[277,273,272,275,278,281,0,274],
[271,269,276,285,269,271,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1747, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,428,273,310,308,350,195,273],
[122,0,83,238,119,118,196,200],
[277,467,0,273,234,311,234,350],
[240,312,277,0,197,232,235,271],
[242,431,316,353,0,195,238,276],
[200,432,239,318,355,0,317,355],
[355,354,316,315,312,233,0,315],
[277,350,200,279,274,195,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1748, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,269,323,248,262,272,296],
[275,0,294,326,262,263,260,265],
[281,256,0,313,273,288,276,268],
[227,224,237,0,196,226,254,238],
[302,288,277,354,0,285,263,277],
[288,287,262,324,265,0,237,301],
[278,290,274,296,287,313,0,285],
[254,285,282,312,273,249,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1749, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,252,255,253,246,263,262],
[290,0,288,296,271,289,282,268],
[298,262,0,279,281,267,264,275],
[295,254,271,0,255,272,291,277],
[297,279,269,295,0,249,276,281],
[304,261,283,278,301,0,287,282],
[287,268,286,259,274,263,0,265],
[288,282,275,273,269,268,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1750, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,274,269,257,278,277,253],
[278,0,254,277,268,271,273,260],
[276,296,0,266,275,275,272,248],
[281,273,284,0,256,282,275,267],
[293,282,275,294,0,282,274,271],
[272,279,275,268,268,0,277,275],
[273,277,278,275,276,273,0,248],
[297,290,302,283,279,275,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1751, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,330,280,271,263,290,279],
[256,0,304,260,246,273,288,230],
[220,246,0,242,262,220,230,208],
[270,290,308,0,283,266,269,236],
[279,304,288,267,0,284,327,269],
[287,277,330,284,266,0,323,281],
[260,262,320,281,223,227,0,214],
[271,320,342,314,281,269,336,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1752, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,274,292,285,282,276,276],
[275,0,278,273,276,267,284,279],
[276,272,0,302,282,284,286,288],
[258,277,248,0,273,278,264,257],
[265,274,268,277,0,281,274,267],
[268,283,266,272,269,0,266,268],
[274,266,264,286,276,284,0,282],
[274,271,262,293,283,282,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1753, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,288,269,303,281,281,290],
[276,0,264,289,265,260,258,288],
[262,286,0,231,257,266,262,276],
[281,261,319,0,285,274,254,288],
[247,285,293,265,0,280,245,273],
[269,290,284,276,270,0,248,300],
[269,292,288,296,305,302,0,281],
[260,262,274,262,277,250,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1754, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,282,290,283,278,280,302],
[282,0,285,287,277,272,278,286],
[268,265,0,294,277,279,299,269],
[260,263,256,0,286,249,272,263],
[267,273,273,264,0,262,279,265],
[272,278,271,301,288,0,288,288],
[270,272,251,278,271,262,0,254],
[248,264,281,287,285,262,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1755, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,257,242,263,258,253,268],
[286,0,247,251,257,259,269,271],
[293,303,0,297,265,303,292,271],
[308,299,253,0,251,276,287,277],
[287,293,285,299,0,275,264,299],
[292,291,247,274,275,0,224,281],
[297,281,258,263,286,326,0,299],
[282,279,279,273,251,269,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1756, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,276,287,238,273,272,274],
[281,0,266,279,300,271,263,282],
[274,284,0,313,283,285,254,269],
[263,271,237,0,254,276,252,273],
[312,250,267,296,0,295,264,265],
[277,279,265,274,255,0,279,250],
[278,287,296,298,286,271,0,275],
[276,268,281,277,285,300,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1757, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,274,283,267,277,278,276],
[262,0,273,270,272,252,272,266],
[276,277,0,275,270,261,265,279],
[267,280,275,0,269,289,260,278],
[283,278,280,281,0,258,264,274],
[273,298,289,261,292,0,265,280],
[272,278,285,290,286,285,0,291],
[274,284,271,272,276,270,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1758, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,328,290,275,332,332,312,312],
[222,0,244,261,254,246,248,270],
[260,306,0,274,275,303,294,290],
[275,289,276,0,297,276,328,278],
[218,296,275,253,0,275,248,276],
[218,304,247,274,275,0,320,286],
[238,302,256,222,302,230,0,229],
[238,280,260,272,274,264,321,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1759, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,285,290,282,287,282,273],
[258,0,266,252,275,283,271,247],
[265,284,0,268,288,292,284,279],
[260,298,282,0,299,294,270,291],
[268,275,262,251,0,271,253,274],
[263,267,258,256,279,0,252,237],
[268,279,266,280,297,298,0,264],
[277,303,271,259,276,313,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1760, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,279,288,309,295,270,275],
[262,0,276,294,300,270,278,282],
[271,274,0,258,275,279,281,259],
[262,256,292,0,284,278,269,274],
[241,250,275,266,0,264,244,262],
[255,280,271,272,286,0,287,270],
[280,272,269,281,306,263,0,262],
[275,268,291,276,288,280,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1761, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,287,274,273,292,309,309],
[261,0,267,295,267,287,289,288],
[263,283,0,272,265,261,287,247],
[276,255,278,0,297,263,300,305],
[277,283,285,253,0,287,292,270],
[258,263,289,287,263,0,297,268],
[241,261,263,250,258,253,0,276],
[241,262,303,245,280,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1762, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,274,290,281,299,275,267],
[254,0,265,261,262,298,256,262],
[276,285,0,285,288,281,268,281],
[260,289,265,0,269,273,274,257],
[269,288,262,281,0,285,269,287],
[251,252,269,277,265,0,252,265],
[275,294,282,276,281,298,0,278],
[283,288,269,293,263,285,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1763, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,246,260,259,257,293,247],
[280,0,276,254,269,265,284,270],
[304,274,0,297,291,269,301,272],
[290,296,253,0,286,278,300,280],
[291,281,259,264,0,252,285,258],
[293,285,281,272,298,0,322,284],
[257,266,249,250,265,228,0,236],
[303,280,278,270,292,266,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1764, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,256,279,266,274,272,265],
[293,0,278,273,268,280,291,269],
[294,272,0,256,262,268,276,271],
[271,277,294,0,281,276,286,273],
[284,282,288,269,0,293,292,280],
[276,270,282,274,257,0,269,266],
[278,259,274,264,258,281,0,249],
[285,281,279,277,270,284,301,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1765, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,266,259,257,290,269,274],
[291,0,289,274,277,308,303,303],
[284,261,0,251,253,282,271,271],
[291,276,299,0,266,286,279,282],
[293,273,297,284,0,296,306,305],
[260,242,268,264,254,0,279,264],
[281,247,279,271,244,271,0,272],
[276,247,279,268,245,286,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1766, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,248,249,284,249,281,253],
[265,0,266,254,285,252,273,253],
[302,284,0,279,300,271,281,282],
[301,296,271,0,299,288,275,262],
[266,265,250,251,0,238,258,256],
[301,298,279,262,312,0,284,269],
[269,277,269,275,292,266,0,264],
[297,297,268,288,294,281,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1767, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,207,271,241,282,222,239,283],
[343,0,272,247,296,213,271,246],
[279,278,0,258,260,252,266,301],
[309,303,292,0,301,257,234,256],
[268,254,290,249,0,209,216,259],
[328,337,298,293,341,0,312,267],
[311,279,284,316,334,238,0,283],
[267,304,249,294,291,283,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1768, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,312,297,293,288,246,290,303],
[238,0,323,306,287,272,244,314],
[253,227,0,238,251,230,223,266],
[257,244,312,0,278,249,281,309],
[262,263,299,272,0,277,266,300],
[304,278,320,301,273,0,294,302],
[260,306,327,269,284,256,0,313],
[247,236,284,241,250,248,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1769, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,284,263,258,271,259,257],
[286,0,293,271,295,285,273,277],
[266,257,0,232,262,255,243,246],
[287,279,318,0,278,276,284,265],
[292,255,288,272,0,280,266,275],
[279,265,295,274,270,0,263,269],
[291,277,307,266,284,287,0,285],
[293,273,304,285,275,281,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1770, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,245,252,273,285,240,266,256],
[305,0,278,265,302,281,276,267],
[298,272,0,284,279,280,263,266],
[277,285,266,0,290,281,273,283],
[265,248,271,260,0,264,252,266],
[310,269,270,269,286,0,288,287],
[284,274,287,277,298,262,0,272],
[294,283,284,267,284,263,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1771, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,242,276,267,299,253,274],
[273,0,265,243,278,278,263,304],
[308,285,0,299,271,282,286,262],
[274,307,251,0,295,260,265,273],
[283,272,279,255,0,280,284,244],
[251,272,268,290,270,0,293,274],
[297,287,264,285,266,257,0,273],
[276,246,288,277,306,276,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1772, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,244,243,254,263,250,278],
[270,0,238,243,272,271,273,269],
[306,312,0,261,275,290,290,285],
[307,307,289,0,283,286,272,286],
[296,278,275,267,0,276,274,278],
[287,279,260,264,274,0,276,274],
[300,277,260,278,276,274,0,282],
[272,281,265,264,272,276,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1773, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,278,282,275,263,280,248],
[263,0,298,265,288,275,288,275],
[272,252,0,260,285,281,274,260],
[268,285,290,0,284,259,285,271],
[275,262,265,266,0,267,265,261],
[287,275,269,291,283,0,290,272],
[270,262,276,265,285,260,0,250],
[302,275,290,279,289,278,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1774, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,305,283,272,281,253,333],
[248,0,273,303,243,272,243,272],
[245,277,0,303,214,227,183,333],
[267,247,247,0,201,211,217,245],
[278,307,336,349,0,270,303,316],
[269,278,323,339,280,0,260,371],
[297,307,367,333,247,290,0,319],
[217,278,217,305,234,179,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1775, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,291,272,271,264,277,277],
[271,0,278,282,279,287,269,289],
[259,272,0,287,277,260,266,286],
[278,268,263,0,264,255,251,283],
[279,271,273,286,0,265,264,280],
[286,263,290,295,285,0,284,298],
[273,281,284,299,286,266,0,301],
[273,261,264,267,270,252,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1776, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,257,266,267,273,266,267,256],
[293,0,275,271,278,270,291,283],
[284,275,0,275,280,275,288,284],
[283,279,275,0,283,268,272,280],
[277,272,270,267,0,263,274,264],
[284,280,275,282,287,0,293,287],
[283,259,262,278,276,257,0,239],
[294,267,266,270,286,263,311,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1777, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,362,278,293,277,235,256],
[306,0,326,273,308,256,293,273],
[188,224,0,225,205,233,244,217],
[272,277,325,0,308,295,255,283],
[257,242,345,242,0,286,291,243],
[273,294,317,255,264,0,281,258],
[315,257,306,295,259,269,0,258],
[294,277,333,267,307,292,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1778, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,283,263,263,269,258,245],
[303,0,318,293,268,271,283,270],
[267,232,0,260,287,284,264,282],
[287,257,290,0,262,250,267,284],
[287,282,263,288,0,291,272,298],
[281,279,266,300,259,0,283,275],
[292,267,286,283,278,267,0,238],
[305,280,268,266,252,275,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1779, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,281,271,273,270,261,275],
[261,0,282,273,282,288,262,285],
[269,268,0,277,275,299,287,281],
[279,277,273,0,280,285,288,287],
[277,268,275,270,0,287,264,277],
[280,262,251,265,263,0,271,263],
[289,288,263,262,286,279,0,273],
[275,265,269,263,273,287,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1780, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,270,283,306,292,279,296],
[260,0,262,270,285,282,291,281],
[280,288,0,283,291,283,269,308],
[267,280,267,0,273,264,266,290],
[244,265,259,277,0,255,273,279],
[258,268,267,286,295,0,274,282],
[271,259,281,284,277,276,0,281],
[254,269,242,260,271,268,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1781, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,286,283,275,289,240,283],
[252,0,244,251,246,229,238,247],
[264,306,0,266,269,277,228,276],
[267,299,284,0,262,273,249,283],
[275,304,281,288,0,294,279,325],
[261,321,273,277,256,0,290,307],
[310,312,322,301,271,260,0,268],
[267,303,274,267,225,243,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1782, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,250,289,261,269,269,261],
[286,0,275,282,269,266,277,261],
[300,275,0,291,282,288,290,279],
[261,268,259,0,290,267,268,272],
[289,281,268,260,0,266,275,262],
[281,284,262,283,284,0,282,270],
[281,273,260,282,275,268,0,270],
[289,289,271,278,288,280,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1783, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,251,278,279,296,277,250,302],
[299,0,287,285,271,283,281,275],
[272,263,0,258,291,293,275,272],
[271,265,292,0,272,269,252,267],
[254,279,259,278,0,281,254,267],
[273,267,257,281,269,0,252,269],
[300,269,275,298,296,298,0,267],
[248,275,278,283,283,281,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1784, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,282,280,255,284,278,250],
[281,0,282,301,292,307,274,286],
[268,268,0,273,262,270,245,246],
[270,249,277,0,251,272,269,250],
[295,258,288,299,0,282,261,266],
[266,243,280,278,268,0,275,243],
[272,276,305,281,289,275,0,264],
[300,264,304,300,284,307,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1785, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,269,265,296,273,299,280],
[261,0,265,272,256,273,287,269],
[281,285,0,274,273,266,270,273],
[285,278,276,0,272,287,298,281],
[254,294,277,278,0,285,286,279],
[277,277,284,263,265,0,279,264],
[251,263,280,252,264,271,0,260],
[270,281,277,269,271,286,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1786, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,262,271,255,262,259,259],
[286,0,284,275,250,279,288,249],
[288,266,0,293,280,283,277,272],
[279,275,257,0,245,267,284,242],
[295,300,270,305,0,288,296,281],
[288,271,267,283,262,0,261,251],
[291,262,273,266,254,289,0,260],
[291,301,278,308,269,299,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1787, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,0,275,275,275,275,275,550],
[550,0,275,550,275,275,275,550],
[275,275,0,275,275,275,550,550],
[275,0,275,0,275,275,275,275],
[275,275,275,275,0,275,275,275],
[275,275,275,275,275,0,275,550],
[275,275,0,275,275,275,0,550],
[0,0,0,275,275,0,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1788, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,277,278,279,265,296,287],
[276,0,285,287,295,275,303,275],
[273,265,0,280,290,268,284,272],
[272,263,270,0,282,259,290,280],
[271,255,260,268,0,269,274,279],
[285,275,282,291,281,0,306,295],
[254,247,266,260,276,244,0,262],
[263,275,278,270,271,255,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1789, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,241,284,281,272,278,272],
[292,0,256,250,217,250,282,272],
[309,294,0,249,296,278,282,274],
[266,300,301,0,239,278,271,254],
[269,333,254,311,0,274,269,278],
[278,300,272,272,276,0,259,267],
[272,268,268,279,281,291,0,243],
[278,278,276,296,272,283,307,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1790, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,269,275,282,283,270,283],
[257,0,255,261,258,279,259,270],
[281,295,0,280,283,292,254,285],
[275,289,270,0,280,282,261,290],
[268,292,267,270,0,290,285,285],
[267,271,258,268,260,0,260,262],
[280,291,296,289,265,290,0,287],
[267,280,265,260,265,288,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1791, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,277,261,291,271,288,276],
[284,0,301,260,278,300,275,265],
[273,249,0,264,264,290,240,279],
[289,290,286,0,274,308,289,300],
[259,272,286,276,0,305,294,283],
[279,250,260,242,245,0,246,269],
[262,275,310,261,256,304,0,284],
[274,285,271,250,267,281,266,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1792, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,334,235,242,271,191,310],
[248,0,290,282,235,250,157,238],
[216,260,0,217,246,268,162,287],
[315,268,333,0,265,332,279,322],
[308,315,304,285,0,309,244,326],
[279,300,282,218,241,0,189,324],
[359,393,388,271,306,361,0,334],
[240,312,263,228,224,226,216,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1793, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,258,286,274,265,257,271],
[276,0,258,277,271,252,249,261],
[292,292,0,305,276,274,275,285],
[264,273,245,0,259,248,249,261],
[276,279,274,291,0,269,262,271],
[285,298,276,302,281,0,263,289],
[293,301,275,301,288,287,0,276],
[279,289,265,289,279,261,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1794, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,271,287,263,265,270,268],
[252,0,257,278,258,257,279,247],
[279,293,0,293,272,288,269,293],
[263,272,257,0,275,271,303,267],
[287,292,278,275,0,291,273,277],
[285,293,262,279,259,0,277,276],
[280,271,281,247,277,273,0,262],
[282,303,257,283,273,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1795, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,291,271,288,304,288,286],
[258,0,280,262,274,284,266,285],
[259,270,0,266,264,278,265,272],
[279,288,284,0,272,290,287,291],
[262,276,286,278,0,281,281,272],
[246,266,272,260,269,0,271,269],
[262,284,285,263,269,279,0,269],
[264,265,278,259,278,281,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1796, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,257,240,262,279,275,261],
[272,0,252,255,282,260,333,263],
[293,298,0,268,262,289,309,266],
[310,295,282,0,317,306,305,269],
[288,268,288,233,0,274,296,275],
[271,290,261,244,276,0,304,266],
[275,217,241,245,254,246,0,270],
[289,287,284,281,275,284,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1797, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,257,285,280,291,284,283],
[264,0,286,263,261,278,257,250],
[293,264,0,282,273,310,303,280],
[265,287,268,0,284,300,286,257],
[270,289,277,266,0,295,269,276],
[259,272,240,250,255,0,266,257],
[266,293,247,264,281,284,0,261],
[267,300,270,293,274,293,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1798, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,273,270,281,278,257,272],
[273,0,289,280,285,290,278,287],
[277,261,0,271,257,255,265,270],
[280,270,279,0,251,265,278,278],
[269,265,293,299,0,272,267,272],
[272,260,295,285,278,0,259,278],
[293,272,285,272,283,291,0,288],
[278,263,280,272,278,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1799, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,278,277,286,268,275,281],
[285,0,278,289,297,273,265,264],
[272,272,0,285,303,284,287,280],
[273,261,265,0,261,268,256,273],
[264,253,247,289,0,261,266,249],
[282,277,266,282,289,0,279,268],
[275,285,263,294,284,271,0,254],
[269,286,270,277,301,282,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1800, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,220,249,239,268,298,238,251],
[330,0,241,287,293,331,256,289],
[301,309,0,256,338,322,292,323],
[311,263,294,0,312,349,256,331],
[282,257,212,238,0,237,232,281],
[252,219,228,201,313,0,222,214],
[312,294,258,294,318,328,0,295],
[299,261,227,219,269,336,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1801, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,274,273,260,270,261,277],
[276,0,277,267,260,270,286,278],
[276,273,0,255,275,271,286,292],
[277,283,295,0,291,266,274,292],
[290,290,275,259,0,278,290,294],
[280,280,279,284,272,0,276,286],
[289,264,264,276,260,274,0,293],
[273,272,258,258,256,264,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1802, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,310,316,277,275,266,276],
[276,0,279,282,291,260,259,262],
[240,271,0,279,246,251,239,252],
[234,268,271,0,264,253,267,246],
[273,259,304,286,0,262,263,253],
[275,290,299,297,288,0,276,284],
[284,291,311,283,287,274,0,270],
[274,288,298,304,297,266,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1803, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,286,272,294,294,312,286],
[281,0,317,264,255,287,296,256],
[264,233,0,246,245,262,294,259],
[278,286,304,0,280,275,310,280],
[256,295,305,270,0,299,305,288],
[256,263,288,275,251,0,285,278],
[238,254,256,240,245,265,0,260],
[264,294,291,270,262,272,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1804, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,282,298,267,286,271,270],
[242,0,258,249,272,263,226,271],
[268,292,0,282,278,291,298,295],
[252,301,268,0,278,292,251,264],
[283,278,272,272,0,285,273,284],
[264,287,259,258,265,0,264,278],
[279,324,252,299,277,286,0,288],
[280,279,255,286,266,272,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1805, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,252,284,268,275,267,258],
[294,0,300,273,300,273,285,264],
[298,250,0,276,280,282,275,279],
[266,277,274,0,288,253,244,262],
[282,250,270,262,0,273,273,258],
[275,277,268,297,277,0,237,257],
[283,265,275,306,277,313,0,273],
[292,286,271,288,292,293,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1806, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,265,290,270,254,270,268],
[294,0,291,268,271,281,288,268],
[285,259,0,309,275,264,282,287],
[260,282,241,0,256,272,284,284],
[280,279,275,294,0,290,302,297],
[296,269,286,278,260,0,284,250],
[280,262,268,266,248,266,0,258],
[282,282,263,266,253,300,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1807, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,249,239,265,283,257,264],
[303,0,216,240,259,294,251,315],
[301,334,0,295,272,329,307,304],
[311,310,255,0,304,337,297,326],
[285,291,278,246,0,272,233,261],
[267,256,221,213,278,0,234,274],
[293,299,243,253,317,316,0,283],
[286,235,246,224,289,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1808, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,291,285,323,269,285,284],
[263,0,268,278,312,270,268,281],
[259,282,0,289,288,287,256,264],
[265,272,261,0,305,270,296,266],
[227,238,262,245,0,247,256,241],
[281,280,263,280,303,0,269,274],
[265,282,294,254,294,281,0,250],
[266,269,286,284,309,276,300,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1809, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,281,278,256,305,282,297],
[269,0,269,272,261,299,278,260],
[269,281,0,294,266,270,277,274],
[272,278,256,0,251,293,283,249],
[294,289,284,299,0,273,285,282],
[245,251,280,257,277,0,275,253],
[268,272,273,267,265,275,0,267],
[253,290,276,301,268,297,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1810, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,209,255,256,298,172,212,212],
[341,0,297,258,299,259,256,255],
[295,253,0,298,256,257,254,295],
[294,292,252,0,295,255,297,294],
[252,251,294,255,0,382,252,251],
[378,291,293,295,168,0,208,208],
[338,294,296,253,298,342,0,210],
[338,295,255,256,299,342,340,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1811, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,288,262,316,321,282,293],
[279,0,283,256,282,282,254,265],
[262,267,0,280,313,300,278,302],
[288,294,270,0,295,278,258,275],
[234,268,237,255,0,269,253,246],
[229,268,250,272,281,0,234,264],
[268,296,272,292,297,316,0,287],
[257,285,248,275,304,286,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1812, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,239,262,269,254,253,278],
[276,0,269,243,258,285,253,293],
[311,281,0,293,269,299,287,319],
[288,307,257,0,281,283,282,298],
[281,292,281,269,0,287,268,271],
[296,265,251,267,263,0,276,268],
[297,297,263,268,282,274,0,317],
[272,257,231,252,279,282,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1813, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,231,290,320,232,288,346,203],
[319,0,317,347,260,350,405,290],
[260,233,0,231,291,260,319,205],
[230,203,319,0,232,230,376,205],
[318,290,259,318,0,260,318,258],
[262,200,290,320,290,0,349,202],
[204,145,231,174,232,201,0,144],
[347,260,345,345,292,348,406,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1814, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,342,364,342,317,317,340],
[276,0,412,365,253,298,296,321],
[208,138,0,297,232,255,138,182],
[186,185,253,0,207,184,182,229],
[208,297,318,343,0,277,227,274],
[233,252,295,366,273,0,204,251],
[233,254,412,368,323,346,0,320],
[210,229,368,321,276,299,230,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1815, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,293,282,306,298,261,295,298],
[257,0,251,252,267,262,275,262],
[268,299,0,300,297,277,298,282],
[244,298,250,0,267,280,281,286],
[252,283,253,283,0,253,265,283],
[289,288,273,270,297,0,294,296],
[255,275,252,269,285,256,0,275],
[252,288,268,264,267,254,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1816, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,267,308,264,285,280,242],
[261,0,271,265,274,251,263,249],
[283,279,0,293,281,273,302,291],
[242,285,257,0,256,246,294,249],
[286,276,269,294,0,267,298,239],
[265,299,277,304,283,0,306,251],
[270,287,248,256,252,244,0,261],
[308,301,259,301,311,299,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1817, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,269,283,279,278,283,285],
[262,0,261,266,271,262,270,258],
[281,289,0,284,267,265,283,268],
[267,284,266,0,273,276,287,257],
[271,279,283,277,0,252,288,264],
[272,288,285,274,298,0,268,255],
[267,280,267,263,262,282,0,235],
[265,292,282,293,286,295,315,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1818, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,284,279,279,283,259,278],
[279,0,293,302,256,316,296,277],
[266,257,0,275,266,281,249,268],
[271,248,275,0,261,273,247,232],
[271,294,284,289,0,306,271,256],
[267,234,269,277,244,0,263,257],
[291,254,301,303,279,287,0,277],
[272,273,282,318,294,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1819, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,288,279,353,311,265,345],
[242,0,260,278,290,292,238,281],
[262,290,0,280,296,249,286,306],
[271,272,270,0,324,286,268,318],
[197,260,254,226,0,247,238,287],
[239,258,301,264,303,0,272,360],
[285,312,264,282,312,278,0,315],
[205,269,244,232,263,190,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1820, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,275,286,280,272,266,254],
[281,0,275,270,282,277,282,275],
[275,275,0,275,292,268,284,272],
[264,280,275,0,298,259,286,286],
[270,268,258,252,0,268,269,261],
[278,273,282,291,282,0,288,280],
[284,268,266,264,281,262,0,261],
[296,275,278,264,289,270,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1821, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,288,288,301,289,301,269,279],
[262,0,271,263,261,269,274,269],
[262,279,0,277,276,294,282,258],
[249,287,273,0,261,272,281,279],
[261,289,274,289,0,291,289,273],
[249,281,256,278,259,0,265,266],
[281,276,268,269,261,285,0,269],
[271,281,292,271,277,284,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1822, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,289,274,297,308,278,292],
[285,0,307,281,277,289,243,283],
[261,243,0,271,303,312,239,283],
[276,269,279,0,293,278,269,264],
[253,273,247,257,0,276,232,262],
[242,261,238,272,274,0,255,263],
[272,307,311,281,318,295,0,317],
[258,267,267,286,288,287,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1823, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,275,278,262,276,310,261],
[288,0,257,268,281,274,296,240],
[275,293,0,287,265,284,309,239],
[272,282,263,0,251,255,281,245],
[288,269,285,299,0,272,296,289],
[274,276,266,295,278,0,300,269],
[240,254,241,269,254,250,0,217],
[289,310,311,305,261,281,333,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1824, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,307,269,267,289,301,282],
[277,0,294,280,275,284,292,287],
[243,256,0,242,243,284,246,241],
[281,270,308,0,288,288,294,281],
[283,275,307,262,0,281,293,300],
[261,266,266,262,269,0,277,259],
[249,258,304,256,257,273,0,270],
[268,263,309,269,250,291,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1825, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,259,273,274,289,294,283,260],
[291,0,268,269,276,295,281,267],
[277,282,0,274,293,286,311,286],
[276,281,276,0,291,296,286,259],
[261,274,257,259,0,271,274,262],
[256,255,264,254,279,0,268,259],
[267,269,239,264,276,282,0,255],
[290,283,264,291,288,291,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1826, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,275,252,261,273,266,252],
[269,0,263,263,265,256,250,232],
[275,287,0,269,276,269,232,247],
[298,287,281,0,298,273,258,280],
[289,285,274,252,0,282,240,272],
[277,294,281,277,268,0,292,273],
[284,300,318,292,310,258,0,295],
[298,318,303,270,278,277,255,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1827, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,255,288,239,274,300,262],
[282,0,262,293,280,274,302,283],
[295,288,0,285,274,281,282,278],
[262,257,265,0,264,280,267,272],
[311,270,276,286,0,293,296,266],
[276,276,269,270,257,0,269,246],
[250,248,268,283,254,281,0,263],
[288,267,272,278,284,304,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1828, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,263,267,304,277,278,260],
[274,0,253,253,281,272,271,252],
[287,297,0,275,312,314,296,277],
[283,297,275,0,306,313,295,289],
[246,269,238,244,0,282,263,249],
[273,278,236,237,268,0,272,254],
[272,279,254,255,287,278,0,251],
[290,298,273,261,301,296,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1829, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,255,262,242,241,283,266],
[289,0,254,234,271,265,293,239],
[295,296,0,258,247,260,302,249],
[288,316,292,0,255,286,310,282],
[308,279,303,295,0,263,307,270],
[309,285,290,264,287,0,314,291],
[267,257,248,240,243,236,0,265],
[284,311,301,268,280,259,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1830, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,278,276,304,287,288,300],
[275,0,294,279,285,321,282,278],
[272,256,0,285,278,285,262,276],
[274,271,265,0,275,295,279,266],
[246,265,272,275,0,274,277,286],
[263,229,265,255,276,0,251,269],
[262,268,288,271,273,299,0,272],
[250,272,274,284,264,281,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1831, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,267,252,254,258,246,265],
[273,0,282,278,284,265,302,292],
[283,268,0,263,273,265,264,281],
[298,272,287,0,266,260,299,300],
[296,266,277,284,0,264,297,303],
[292,285,285,290,286,0,299,268],
[304,248,286,251,253,251,0,275],
[285,258,269,250,247,282,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1832, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,274,269,279,298,276,321],
[261,0,266,251,283,282,258,300],
[276,284,0,276,299,277,264,311],
[281,299,274,0,301,293,289,338],
[271,267,251,249,0,270,280,306],
[252,268,273,257,280,0,258,296],
[274,292,286,261,270,292,0,304],
[229,250,239,212,244,254,246,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1833, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,275,298,267,291,287,294],
[254,0,250,278,268,262,268,290],
[275,300,0,301,279,308,297,281],
[252,272,249,0,267,293,280,264],
[283,282,271,283,0,300,297,283],
[259,288,242,257,250,0,294,272],
[263,282,253,270,253,256,0,273],
[256,260,269,286,267,278,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1834, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,262,281,255,281,263,268],
[267,0,274,279,280,279,293,279],
[288,276,0,277,275,296,297,291],
[269,271,273,0,265,302,309,289],
[295,270,275,285,0,301,303,279],
[269,271,254,248,249,0,278,257],
[287,257,253,241,247,272,0,262],
[282,271,259,261,271,293,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1835, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,303,233,226,273,292,233],
[288,0,317,272,246,298,314,292],
[247,233,0,242,234,284,256,281],
[317,278,308,0,295,304,306,261],
[324,304,316,255,0,341,317,328],
[277,252,266,246,209,0,293,286],
[258,236,294,244,233,257,0,278],
[317,258,269,289,222,264,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1836, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,288,290,304,275,286,287],
[274,0,292,290,306,280,286,280],
[262,258,0,285,271,262,260,275],
[260,260,265,0,283,265,256,269],
[246,244,279,267,0,259,250,258],
[275,270,288,285,291,0,265,268],
[264,264,290,294,300,285,0,281],
[263,270,275,281,292,282,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1837, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,290,298,274,270,314,281],
[264,0,275,266,250,257,285,258],
[260,275,0,271,266,279,298,233],
[252,284,279,0,284,282,288,277],
[276,300,284,266,0,280,282,250],
[280,293,271,268,270,0,308,265],
[236,265,252,262,268,242,0,264],
[269,292,317,273,300,285,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1838, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,276,278,271,283,260,275],
[286,0,273,275,280,277,267,284],
[274,277,0,272,259,258,265,260],
[272,275,278,0,257,276,235,273],
[279,270,291,293,0,289,260,284],
[267,273,292,274,261,0,277,272],
[290,283,285,315,290,273,0,294],
[275,266,290,277,266,278,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1839, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,262,259,266,302,271,275],
[261,0,258,274,262,276,255,285],
[288,292,0,257,277,295,272,271],
[291,276,293,0,274,294,276,277],
[284,288,273,276,0,300,290,263],
[248,274,255,256,250,0,251,269],
[279,295,278,274,260,299,0,287],
[275,265,279,273,287,281,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1840, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,260,285,267,264,279,289],
[285,0,257,285,257,268,290,283],
[290,293,0,298,287,275,295,283],
[265,265,252,0,263,261,271,274],
[283,293,263,287,0,281,275,277],
[286,282,275,289,269,0,286,272],
[271,260,255,279,275,264,0,272],
[261,267,267,276,273,278,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1841, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,254,239,292,257,305,259,292],
[296,0,166,241,289,236,258,328],
[311,384,0,264,360,312,299,349],
[258,309,286,0,324,341,277,327],
[293,261,190,226,0,276,241,279],
[245,314,238,209,274,0,259,313],
[291,292,251,273,309,291,0,360],
[258,222,201,223,271,237,190,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1842, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,345,283,298,262,276,310],
[264,0,346,264,269,257,291,294],
[205,204,0,222,228,233,226,217],
[267,286,328,0,272,261,259,248],
[252,281,322,278,0,277,285,302],
[288,293,317,289,273,0,273,262],
[274,259,324,291,265,277,0,291],
[240,256,333,302,248,288,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1843, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,300,293,288,286,280,286],
[275,0,284,297,264,286,269,284],
[250,266,0,289,252,260,285,263],
[257,253,261,0,263,263,278,276],
[262,286,298,287,0,264,272,282],
[264,264,290,287,286,0,275,283],
[270,281,265,272,278,275,0,260],
[264,266,287,274,268,267,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1844, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,283,292,283,273,299,280],
[274,0,299,277,276,275,276,264],
[267,251,0,258,248,247,281,248],
[258,273,292,0,299,265,269,276],
[267,274,302,251,0,259,269,257],
[277,275,303,285,291,0,285,280],
[251,274,269,281,281,265,0,277],
[270,286,302,274,293,270,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1845, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,280,267,300,273,292,282],
[252,0,259,246,260,256,259,247],
[270,291,0,284,284,276,288,277],
[283,304,266,0,287,272,290,274],
[250,290,266,263,0,271,278,267],
[277,294,274,278,279,0,296,267],
[258,291,262,260,272,254,0,266],
[268,303,273,276,283,283,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1846, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,286,300,267,276,269,256],
[258,0,275,303,280,321,279,256],
[264,275,0,272,280,296,276,281],
[250,247,278,0,260,273,250,259],
[283,270,270,290,0,329,271,247],
[274,229,254,277,221,0,199,257],
[281,271,274,300,279,351,0,271],
[294,294,269,291,303,293,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1847, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,288,276,292,262,287,267],
[282,0,279,280,281,277,276,266],
[262,271,0,267,278,272,268,267],
[274,270,283,0,279,268,282,258],
[258,269,272,271,0,263,270,261],
[288,273,278,282,287,0,288,275],
[263,274,282,268,280,262,0,260],
[283,284,283,292,289,275,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1848, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,273,271,240,253,258,313],
[288,0,266,244,308,276,266,296],
[277,284,0,275,289,267,282,291],
[279,306,275,0,296,292,257,308],
[310,242,261,254,0,260,266,308],
[297,274,283,258,290,0,252,265],
[292,284,268,293,284,298,0,290],
[237,254,259,242,242,285,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1849, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,268,268,292,280,259,300],
[259,0,268,285,267,283,266,294],
[282,282,0,281,269,300,281,288],
[282,265,269,0,247,268,280,272],
[258,283,281,303,0,305,285,291],
[270,267,250,282,245,0,275,278],
[291,284,269,270,265,275,0,291],
[250,256,262,278,259,272,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1850, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,297,293,289,272,325,291],
[258,0,281,289,288,284,319,288],
[253,269,0,283,227,263,308,271],
[257,261,267,0,271,276,290,278],
[261,262,323,279,0,253,286,247],
[278,266,287,274,297,0,314,297],
[225,231,242,260,264,236,0,275],
[259,262,279,272,303,253,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1851, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,275,328,287,268,312,292],
[303,0,258,312,312,258,284,275],
[275,292,0,310,320,290,330,309],
[222,238,240,0,274,237,251,227],
[263,238,230,276,0,284,283,244],
[282,292,260,313,266,0,290,274],
[238,266,220,299,267,260,0,267],
[258,275,241,323,306,276,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1852, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,236,264,253,264,295,251,285],
[314,0,271,292,299,301,271,304],
[286,279,0,278,275,297,281,301],
[297,258,272,0,288,292,262,287],
[286,251,275,262,0,269,251,282],
[255,249,253,258,281,0,247,288],
[299,279,269,288,299,303,0,308],
[265,246,249,263,268,262,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1853, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,255,232,299,262,263,256],
[307,0,270,267,322,272,298,288],
[295,280,0,272,286,277,316,286],
[318,283,278,0,301,293,323,261],
[251,228,264,249,0,265,269,229],
[288,278,273,257,285,0,328,272],
[287,252,234,227,281,222,0,261],
[294,262,264,289,321,278,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1854, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,274,272,273,254,301,270],
[254,0,281,281,270,253,278,285],
[276,269,0,268,298,298,309,288],
[278,269,282,0,256,238,291,263],
[277,280,252,294,0,262,310,304],
[296,297,252,312,288,0,318,321],
[249,272,241,259,240,232,0,231],
[280,265,262,287,246,229,319,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1855, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,298,293,285,312,264,253,292],
[252,0,259,266,269,238,256,266],
[257,291,0,266,259,248,269,266],
[265,284,284,0,298,271,266,271],
[238,281,291,252,0,265,268,256],
[286,312,302,279,285,0,283,271],
[297,294,281,284,282,267,0,259],
[258,284,284,279,294,279,291,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1856, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,267,293,280,292,278,280],
[269,0,276,288,279,266,280,273],
[283,274,0,291,286,276,260,269],
[257,262,259,0,263,257,263,256],
[270,271,264,287,0,265,277,255],
[258,284,274,293,285,0,287,272],
[272,270,290,287,273,263,0,268],
[270,277,281,294,295,278,282,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1857, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,318,281,298,258,300,292],
[271,0,312,233,263,259,257,264],
[232,238,0,205,269,249,229,218],
[269,317,345,0,302,259,244,284],
[252,287,281,248,0,244,278,254],
[292,291,301,291,306,0,289,274],
[250,293,321,306,272,261,0,303],
[258,286,332,266,296,276,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1858, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,277,270,281,276,284,270],
[290,0,274,286,285,280,278,280],
[273,276,0,272,274,269,287,277],
[280,264,278,0,281,289,290,281],
[269,265,276,269,0,265,288,260],
[274,270,281,261,285,0,292,273],
[266,272,263,260,262,258,0,263],
[280,270,273,269,290,277,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1859, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,281,264,282,301,277,277],
[243,0,257,248,251,278,242,238],
[269,293,0,278,298,299,277,283],
[286,302,272,0,287,286,273,266],
[268,299,252,263,0,266,260,247],
[249,272,251,264,284,0,262,262],
[273,308,273,277,290,288,0,276],
[273,312,267,284,303,288,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1860, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,226,289,213,293,232,269],
[243,0,181,291,219,252,245,213],
[324,369,0,339,307,339,220,306],
[261,259,211,0,229,251,218,257],
[337,331,243,321,0,307,290,330],
[257,298,211,299,243,0,276,315],
[318,305,330,332,260,274,0,300],
[281,337,244,293,220,235,250,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1861, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,302,280,276,245,275,256,247],
[248,0,252,254,197,276,238,223],
[270,298,0,301,277,302,289,277],
[274,296,249,0,208,282,246,246],
[305,353,273,342,0,328,316,289],
[275,274,248,268,222,0,256,236],
[294,312,261,304,234,294,0,276],
[303,327,273,304,261,314,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1862, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,282,268,273,272,266,274],
[284,0,250,257,269,254,252,263],
[268,300,0,279,281,271,276,285],
[282,293,271,0,278,280,266,274],
[277,281,269,272,0,264,275,278],
[278,296,279,270,286,0,285,284],
[284,298,274,284,275,265,0,286],
[276,287,265,276,272,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1863, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,270,264,276,265,261,292],
[271,0,275,271,267,267,266,266],
[280,275,0,267,272,265,290,286],
[286,279,283,0,266,267,263,276],
[274,283,278,284,0,277,281,285],
[285,283,285,283,273,0,266,291],
[289,284,260,287,269,284,0,280],
[258,284,264,274,265,259,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1864, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,303,279,303,284,274,296,299],
[247,0,268,274,276,254,258,264],
[271,282,0,283,279,281,250,263],
[247,276,267,0,250,260,261,261],
[266,274,271,300,0,265,262,262],
[276,296,269,290,285,0,250,271],
[254,292,300,289,288,300,0,289],
[251,286,287,289,288,279,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1865, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,366,366,366,183,183,366,183],
[184,0,367,367,367,184,550,184],
[184,183,0,366,367,184,550,184],
[184,183,184,0,184,184,367,184],
[367,183,183,366,0,367,550,184],
[367,366,366,366,183,0,366,367],
[184,0,0,183,0,184,0,184],
[367,366,366,366,366,183,366,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1866, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,303,275,302,268,279,291],
[287,0,274,284,299,283,298,308],
[247,276,0,265,281,276,293,282],
[275,266,285,0,269,252,278,289],
[248,251,269,281,0,262,271,283],
[282,267,274,298,288,0,293,310],
[271,252,257,272,279,257,0,287],
[259,242,268,261,267,240,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1867, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,261,271,267,266,286,275],
[267,0,272,258,244,256,292,258],
[289,278,0,295,276,275,269,264],
[279,292,255,0,272,267,292,270],
[283,306,274,278,0,285,312,277],
[284,294,275,283,265,0,302,275],
[264,258,281,258,238,248,0,265],
[275,292,286,280,273,275,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1868, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,301,255,257,289,289,284,293],
[249,0,246,254,303,271,282,250],
[295,304,0,271,282,291,272,270],
[293,296,279,0,313,273,291,302],
[261,247,268,237,0,281,288,267],
[261,279,259,277,269,0,279,281],
[266,268,278,259,262,271,0,277],
[257,300,280,248,283,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1869, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,263,279,278,293,291,281],
[264,0,273,272,258,268,254,278],
[287,277,0,285,283,286,282,275],
[271,278,265,0,267,271,260,279],
[272,292,267,283,0,294,269,293],
[257,282,264,279,256,0,266,290],
[259,296,268,290,281,284,0,297],
[269,272,275,271,257,260,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1870, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,295,284,286,308,297,276,269],
[255,0,267,250,308,305,257,275],
[266,283,0,265,295,291,257,281],
[264,300,285,0,304,291,257,273],
[242,242,255,246,0,285,237,249],
[253,245,259,259,265,0,236,268],
[274,293,293,293,313,314,0,290],
[281,275,269,277,301,282,260,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1871, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,264,284,290,278,285,278],
[267,0,248,274,288,256,251,255],
[286,302,0,289,314,269,268,288],
[266,276,261,0,288,270,270,260],
[260,262,236,262,0,264,264,267],
[272,294,281,280,286,0,285,251],
[265,299,282,280,286,265,0,288],
[272,295,262,290,283,299,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1872, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,247,280,261,265,278,278,284],
[303,0,274,290,283,256,281,302],
[270,276,0,253,240,268,248,278],
[289,260,297,0,305,276,289,284],
[285,267,310,245,0,289,263,281],
[272,294,282,274,261,0,279,284],
[272,269,302,261,287,271,0,297],
[266,248,272,266,269,266,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1873, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,282,284,288,273,294,272],
[292,0,257,283,294,276,282,294],
[268,293,0,273,285,273,273,278],
[266,267,277,0,284,266,291,279],
[262,256,265,266,0,257,273,275],
[277,274,277,284,293,0,289,280],
[256,268,277,259,277,261,0,266],
[278,256,272,271,275,270,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1874, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,280,290,286,274,276,272],
[277,0,278,299,305,268,278,280],
[270,272,0,290,279,272,260,260],
[260,251,260,0,261,249,235,255],
[264,245,271,289,0,265,267,257],
[276,282,278,301,285,0,269,282],
[274,272,290,315,283,281,0,273],
[278,270,290,295,293,268,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1875, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,264,267,257,260,270,265],
[297,0,278,284,281,276,277,272],
[286,272,0,269,287,269,276,271],
[283,266,281,0,279,268,278,284],
[293,269,263,271,0,280,274,262],
[290,274,281,282,270,0,273,259],
[280,273,274,272,276,277,0,280],
[285,278,279,266,288,291,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1876, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,272,305,274,275,312,243],
[290,0,287,302,299,270,307,272],
[278,263,0,287,269,263,330,280],
[245,248,263,0,237,260,287,271],
[276,251,281,313,0,250,326,260],
[275,280,287,290,300,0,306,284],
[238,243,220,263,224,244,0,219],
[307,278,270,279,290,266,331,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1877, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,257,263,287,279,301,271],
[289,0,270,273,287,271,290,278],
[293,280,0,261,275,257,304,263],
[287,277,289,0,305,285,300,272],
[263,263,275,245,0,241,281,246],
[271,279,293,265,309,0,301,278],
[249,260,246,250,269,249,0,254],
[279,272,287,278,304,272,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1878, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,299,271,300,290,296,276],
[289,0,282,271,289,300,294,269],
[251,268,0,251,270,271,268,267],
[279,279,299,0,297,274,286,299],
[250,261,280,253,0,266,283,277],
[260,250,279,276,284,0,278,269],
[254,256,282,264,267,272,0,274],
[274,281,283,251,273,281,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1879, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,286,254,261,322,272,311,298],
[264,0,264,260,291,297,323,290],
[296,286,0,285,284,296,300,265],
[289,290,265,0,282,273,358,316],
[228,259,266,268,0,243,269,269],
[278,253,254,277,307,0,324,284],
[239,227,250,192,281,226,0,244],
[252,260,285,234,281,266,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1880, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,310,251,298,248,232,298,322],
[240,0,278,272,247,205,221,261],
[299,272,0,325,271,287,285,309],
[252,278,225,0,273,196,232,291],
[302,303,279,277,0,273,260,317],
[318,345,263,354,277,0,324,341],
[252,329,265,318,290,226,0,353],
[228,289,241,259,233,209,197,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1881, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,276,279,287,288,274,270],
[277,0,270,272,307,277,287,284],
[274,280,0,276,275,286,273,273],
[271,278,274,0,278,278,272,273],
[263,243,275,272,0,274,263,257],
[262,273,264,272,276,0,263,258],
[276,263,277,278,287,287,0,264],
[280,266,277,277,293,292,286,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1882, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,271,272,301,258,290,280],
[279,0,268,270,295,265,283,290],
[279,282,0,263,307,278,293,302],
[278,280,287,0,294,269,286,283],
[249,255,243,256,0,235,268,259],
[292,285,272,281,315,0,297,300],
[260,267,257,264,282,253,0,273],
[270,260,248,267,291,250,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1883, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,386,277,274,383,275,221,385],
[164,0,220,275,329,275,220,331],
[273,330,0,328,383,383,220,329],
[276,275,222,0,330,331,276,385],
[167,221,167,220,0,222,221,330],
[275,275,167,219,328,0,166,329],
[329,330,330,274,329,384,0,386],
[165,219,221,165,220,221,164,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1884, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,269,261,278,255,300,254],
[282,0,282,271,315,301,307,288],
[281,268,0,265,291,276,283,270],
[289,279,285,0,299,272,292,270],
[272,235,259,251,0,230,290,242],
[295,249,274,278,320,0,295,258],
[250,243,267,258,260,255,0,280],
[296,262,280,280,308,292,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1885, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,276,333,254,314,278,317],
[310,0,285,274,278,244,234,328],
[274,265,0,291,279,245,302,321],
[217,276,259,0,302,285,311,303],
[296,272,271,248,0,270,296,328],
[236,306,305,265,280,0,267,335],
[272,316,248,239,254,283,0,317],
[233,222,229,247,222,215,233,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1886, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,295,303,297,293,277,278],
[280,0,272,299,283,271,261,283],
[255,278,0,281,279,275,283,263],
[247,251,269,0,264,265,279,266],
[253,267,271,286,0,257,279,250],
[257,279,275,285,293,0,276,277],
[273,289,267,271,271,274,0,256],
[272,267,287,284,300,273,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1887, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,244,249,272,281,260,279,248],
[306,0,286,297,313,282,308,256],
[301,264,0,284,320,291,312,289],
[278,253,266,0,288,264,298,243],
[269,237,230,262,0,250,240,221],
[290,268,259,286,300,0,313,262],
[271,242,238,252,310,237,0,236],
[302,294,261,307,329,288,314,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1888, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,267,268,253,264,260,242],
[280,0,266,270,260,281,268,273],
[283,284,0,268,278,280,256,257],
[282,280,282,0,279,283,267,266],
[297,290,272,271,0,307,278,275],
[286,269,270,267,243,0,257,242],
[290,282,294,283,272,293,0,263],
[308,277,293,284,275,308,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1889, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,241,255,267,260,257,237],
[283,0,266,266,276,256,263,271],
[309,284,0,275,298,270,288,285],
[295,284,275,0,305,275,287,280],
[283,274,252,245,0,273,239,254],
[290,294,280,275,277,0,283,275],
[293,287,262,263,311,267,0,297],
[313,279,265,270,296,275,253,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1890, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,260,266,252,258,268,282],
[284,0,271,281,264,276,265,294],
[290,279,0,296,276,252,270,278],
[284,269,254,0,259,260,265,279],
[298,286,274,291,0,289,287,302],
[292,274,298,290,261,0,285,289],
[282,285,280,285,263,265,0,289],
[268,256,272,271,248,261,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1891, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,236,211,263,218,255,226],
[284,0,228,254,270,237,223,256],
[314,322,0,300,309,293,252,293],
[339,296,250,0,337,267,279,284],
[287,280,241,213,0,279,236,241],
[332,313,257,283,271,0,266,240],
[295,327,298,271,314,284,0,266],
[324,294,257,266,309,310,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1892, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,280,284,289,288,291,301],
[276,0,302,294,268,291,293,289],
[270,248,0,259,273,289,272,272],
[266,256,291,0,265,287,288,269],
[261,282,277,285,0,296,302,280],
[262,259,261,263,254,0,277,268],
[259,257,278,262,248,273,0,266],
[249,261,278,281,270,282,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1893, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,276,286,289,279,271,268,287],
[274,0,278,282,292,306,306,290],
[264,272,0,275,282,289,293,294],
[261,268,275,0,269,283,276,293],
[271,258,268,281,0,283,288,280],
[279,244,261,267,267,0,280,263],
[282,244,257,274,262,270,0,283],
[263,260,256,257,270,287,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1894, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,290,282,269,284,266,255],
[267,0,281,237,243,250,249,247],
[260,269,0,258,276,261,254,287],
[268,313,292,0,254,274,261,260],
[281,307,274,296,0,277,269,280],
[266,300,289,276,273,0,279,260],
[284,301,296,289,281,271,0,287],
[295,303,263,290,270,290,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1895, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,269,263,269,269,278,249],
[292,0,275,259,284,292,290,266],
[281,275,0,277,300,278,284,245],
[287,291,273,0,297,285,289,275],
[281,266,250,253,0,257,266,245],
[281,258,272,265,293,0,285,265],
[272,260,266,261,284,265,0,244],
[301,284,305,275,305,285,306,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1896, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,289,253,292,252,260,264],
[282,0,258,294,291,227,212,258],
[261,292,0,228,271,229,263,271],
[297,256,322,0,345,255,284,256],
[258,259,279,205,0,215,253,213],
[298,323,321,295,335,0,262,238],
[290,338,287,266,297,288,0,283],
[286,292,279,294,337,312,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1897, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,291,271,282,235,238,256,301],
[259,0,294,266,294,275,302,284],
[279,256,0,225,227,238,238,303],
[268,284,325,0,242,282,288,312],
[315,256,323,308,0,291,320,317],
[312,275,312,268,259,0,280,302],
[294,248,312,262,230,270,0,291],
[249,266,247,238,233,248,259,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1898, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,272,251,282,259,270,295],
[253,0,271,249,281,271,263,257],
[278,279,0,281,284,285,266,259],
[299,301,269,0,306,275,270,262],
[268,269,266,244,0,262,265,274],
[291,279,265,275,288,0,275,284],
[280,287,284,280,285,275,0,267],
[255,293,291,288,276,266,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1899, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,278,266,277,300,278,280],
[243,0,244,247,246,249,244,267],
[272,306,0,265,285,275,287,281],
[284,303,285,0,276,274,282,286],
[273,304,265,274,0,287,275,275],
[250,301,275,276,263,0,266,276],
[272,306,263,268,275,284,0,294],
[270,283,269,264,275,274,256,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1900, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,299,264,276,282,266,263,310],
[251,0,277,256,240,246,239,282],
[286,273,0,243,240,254,296,312],
[274,294,307,0,286,278,283,307],
[268,310,310,264,0,311,314,329],
[284,304,296,272,239,0,264,314],
[287,311,254,267,236,286,0,327],
[240,268,238,243,221,236,223,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1901, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,232,216,265,223,224,248],
[290,0,241,210,302,256,257,226],
[318,309,0,292,319,337,284,268],
[334,340,258,0,310,307,305,275],
[285,248,231,240,0,247,244,229],
[327,294,213,243,303,0,255,244],
[326,293,266,245,306,295,0,263],
[302,324,282,275,321,306,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1902, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,261,298,247,262,269,284,290],
[289,0,314,274,273,315,264,291],
[252,236,0,250,238,279,236,247],
[303,276,300,0,267,314,271,280],
[288,277,312,283,0,286,270,276],
[281,235,271,236,264,0,247,258],
[266,286,314,279,280,303,0,271],
[260,259,303,270,274,292,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1903, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,155,312,234,276,313,313],
[273,0,196,273,314,197,276,351],
[395,354,0,391,273,355,354,393],
[238,277,159,0,197,239,277,276],
[316,236,277,353,0,277,276,314],
[274,353,195,311,273,0,351,352],
[237,274,196,273,274,199,0,313],
[237,199,157,274,236,198,237,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1904, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,260,256,261,267,288,286],
[286,0,270,263,277,284,290,285],
[290,280,0,272,282,286,291,292],
[294,287,278,0,275,291,289,290],
[289,273,268,275,0,297,297,268],
[283,266,264,259,253,0,286,287],
[262,260,259,261,253,264,0,278],
[264,265,258,260,282,263,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1905, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,293,285,280,301,262,297],
[258,0,330,276,306,259,304,282],
[257,220,0,235,251,232,223,273],
[265,274,315,0,258,277,279,287],
[270,244,299,292,0,257,238,262],
[249,291,318,273,293,0,282,279],
[288,246,327,271,312,268,0,276],
[253,268,277,263,288,271,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1906, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,287,286,294,288,287,272,261],
[263,0,285,285,270,270,288,266],
[264,265,0,268,265,254,272,262],
[256,265,282,0,247,282,272,273],
[262,280,285,303,0,284,283,276],
[263,280,296,268,266,0,264,279],
[278,262,278,278,267,286,0,279],
[289,284,288,277,274,271,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1907, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,277,283,275,261,303,283,309],
[273,0,286,279,280,293,282,302],
[267,264,0,273,252,274,250,292],
[275,271,277,0,270,304,263,306],
[289,270,298,280,0,292,275,306],
[247,257,276,246,258,0,246,274],
[267,268,300,287,275,304,0,293],
[241,248,258,244,244,276,257,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1908, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,262,266,286,256,270,273],
[283,0,277,295,284,269,282,283],
[288,273,0,287,283,271,286,292],
[284,255,263,0,255,268,256,294],
[264,266,267,295,0,278,287,293],
[294,281,279,282,272,0,290,310],
[280,268,264,294,263,260,0,292],
[277,267,258,256,257,240,258,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1909, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,292,270,273,281,275,284],
[294,0,302,292,279,266,291,279],
[258,248,0,266,268,266,265,266],
[280,258,284,0,279,276,285,260],
[277,271,282,271,0,283,258,277],
[269,284,284,274,267,0,272,257],
[275,259,285,265,292,278,0,260],
[266,271,284,290,273,293,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1910, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,281,259,281,289,272,270],
[294,0,277,286,270,286,295,275],
[269,273,0,276,291,281,285,258],
[291,264,274,0,269,290,295,272],
[269,280,259,281,0,300,285,271],
[261,264,269,260,250,0,261,271],
[278,255,265,255,265,289,0,263],
[280,275,292,278,279,279,287,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1911, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,280,276,260,276,286,265,271],
[270,0,261,257,269,269,270,276],
[274,289,0,256,264,289,271,272],
[290,293,294,0,271,298,290,284],
[274,281,286,279,0,300,292,289],
[264,281,261,252,250,0,271,265],
[285,280,279,260,258,279,0,282],
[279,274,278,266,261,285,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1912, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,275,262,266,287,274,281],
[261,0,264,259,255,267,258,266],
[275,286,0,256,269,283,273,274],
[288,291,294,0,272,299,280,276],
[284,295,281,278,0,287,273,285],
[263,283,267,251,263,0,257,274],
[276,292,277,270,277,293,0,283],
[269,284,276,274,265,276,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1913, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,255,273,272,267,283,273],
[283,0,265,280,263,254,277,275],
[295,285,0,293,282,273,282,284],
[277,270,257,0,262,266,267,259],
[278,287,268,288,0,283,300,273],
[283,296,277,284,267,0,290,283],
[267,273,268,283,250,260,0,274],
[277,275,266,291,277,267,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1914, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,229,216,215,245,221,239,233],
[321,0,270,264,246,270,258,256],
[334,280,0,249,273,296,290,255],
[335,286,301,0,288,269,278,312],
[305,304,277,262,0,284,326,257],
[329,280,254,281,266,0,259,256],
[311,292,260,272,224,291,0,279],
[317,294,295,238,293,294,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1915, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,281,294,302,272,282,288],
[266,0,275,283,303,292,291,260],
[269,275,0,278,289,265,279,260],
[256,267,272,0,271,268,282,247],
[248,247,261,279,0,255,277,257],
[278,258,285,282,295,0,286,266],
[268,259,271,268,273,264,0,241],
[262,290,290,303,293,284,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1916, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,293,265,265,274,271,288],
[297,0,280,278,268,292,273,291],
[257,270,0,265,259,260,252,263],
[285,272,285,0,277,254,268,282],
[285,282,291,273,0,284,284,293],
[276,258,290,296,266,0,262,279],
[279,277,298,282,266,288,0,280],
[262,259,287,268,257,271,270,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1917, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,267,268,271,277,262,291,266],
[283,0,269,266,262,272,282,292],
[282,281,0,267,245,273,268,276],
[279,284,283,0,264,276,298,270],
[273,288,305,286,0,296,284,261],
[288,278,277,274,254,0,274,266],
[259,268,282,252,266,276,0,251],
[284,258,274,280,289,284,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1918, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,303,290,294,286,272,296],
[260,0,279,284,259,264,267,268],
[247,271,0,248,258,234,261,250],
[260,266,302,0,265,237,265,262],
[256,291,292,285,0,277,286,270],
[264,286,316,313,273,0,263,276],
[278,283,289,285,264,287,0,274],
[254,282,300,288,280,274,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1919, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,412,275,412,413,550,275,413],
[138,0,413,550,276,550,276,413],
[275,137,0,275,275,412,0,275],
[138,0,275,0,276,412,0,413],
[137,274,275,274,0,274,137,275],
[0,0,138,138,276,0,138,275],
[275,274,550,550,413,412,0,550],
[137,137,275,137,275,275,0,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1920, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,258,255,267,280,257,272],
[287,0,290,262,268,283,267,258],
[292,260,0,244,247,262,246,269],
[295,288,306,0,279,300,282,271],
[283,282,303,271,0,312,294,300],
[270,267,288,250,238,0,270,281],
[293,283,304,268,256,280,0,277],
[278,292,281,279,250,269,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1921, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,188,407,312,262,276,270,273],
[362,0,388,321,264,293,314,306],
[143,162,0,183,146,170,154,211],
[238,229,367,0,231,246,212,264],
[288,286,404,319,0,253,283,275],
[274,257,380,304,297,0,278,316],
[280,236,396,338,267,272,0,322],
[277,244,339,286,275,234,228,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1922, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,273,270,264,266,257,271],
[272,0,267,258,294,262,280,274],
[277,283,0,277,300,275,281,266],
[280,292,273,0,304,298,271,279],
[286,256,250,246,0,255,230,247],
[284,288,275,252,295,0,277,273],
[293,270,269,279,320,273,0,309],
[279,276,284,271,303,277,241,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1923, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,311,294,280,274,289,290,278],
[239,0,274,271,276,256,279,264],
[256,276,0,253,268,261,287,263],
[270,279,297,0,274,277,285,288],
[276,274,282,276,0,280,285,273],
[261,294,289,273,270,0,301,278],
[260,271,263,265,265,249,0,248],
[272,286,287,262,277,272,302,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1924, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,272,288,284,278,310,272,282],
[278,0,278,286,291,288,276,273],
[262,272,0,271,275,270,273,275],
[266,264,279,0,299,287,275,285],
[272,259,275,251,0,274,264,254],
[240,262,280,263,276,0,267,252],
[278,274,277,275,286,283,0,279],
[268,277,275,265,296,298,271,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1925, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,181,229,182,227,232,139,320],
[369,0,275,365,275,371,280,323],
[321,275,0,321,227,321,277,366],
[368,185,229,0,229,326,94,278],
[323,275,323,321,0,230,324,230],
[318,179,229,224,320,0,139,271],
[411,270,273,456,226,411,0,365],
[230,227,184,272,320,279,185,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1926, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,288,300,287,275,291,335],
[294,0,292,291,280,258,273,342],
[262,258,0,280,270,269,278,291],
[250,259,270,0,250,257,250,286],
[263,270,280,300,0,266,296,326],
[275,292,281,293,284,0,276,307],
[259,277,272,300,254,274,0,319],
[215,208,259,264,224,243,231,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1927, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,247,328,307,250,264,265],
[210,0,220,252,236,220,215,200],
[303,330,0,295,273,268,292,279],
[222,298,255,0,237,252,252,241],
[243,314,277,313,0,307,262,258],
[300,330,282,298,243,0,249,275],
[286,335,258,298,288,301,0,276],
[285,350,271,309,292,275,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1928, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,272,251,253,262,274,230],
[281,0,289,262,273,283,305,268],
[278,261,0,247,242,264,263,255],
[299,288,303,0,256,294,291,277],
[297,277,308,294,0,273,316,267],
[288,267,286,256,277,0,301,281],
[276,245,287,259,234,249,0,256],
[320,282,295,273,283,269,294,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1929, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,290,283,276,263,277,265,266],
[260,0,279,261,273,268,269,282],
[267,271,0,248,277,250,252,273],
[274,289,302,0,272,278,278,284],
[287,277,273,278,0,288,275,269],
[273,282,300,272,262,0,271,284],
[285,281,298,272,275,279,0,286],
[284,268,277,266,281,266,264,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1930, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,217,267,277,226,282,301,232],
[333,0,271,288,281,339,284,291],
[283,279,0,296,287,303,288,264],
[273,262,254,0,247,284,268,249],
[324,269,263,303,0,330,272,288],
[268,211,247,266,220,0,242,225],
[249,266,262,282,278,308,0,282],
[318,259,286,301,262,325,268,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1931, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,269,260,244,270,253,268],
[285,0,295,266,271,261,250,262],
[281,255,0,251,256,269,249,247],
[290,284,299,0,277,278,269,279],
[306,279,294,273,0,295,278,285],
[280,289,281,272,255,0,258,259],
[297,300,301,281,272,292,0,281],
[282,288,303,271,265,291,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1932, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,268,277,289,267,271,269],
[294,0,270,276,299,290,283,269],
[282,280,0,281,271,293,289,284],
[273,274,269,0,287,280,286,259],
[261,251,279,263,0,279,277,246],
[283,260,257,270,271,0,275,268],
[279,267,261,264,273,275,0,276],
[281,281,266,291,304,282,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1933, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,269,280,283,274,280,278],
[268,0,270,274,288,281,262,266],
[281,280,0,288,281,275,272,263],
[270,276,262,0,273,268,279,284],
[267,262,269,277,0,250,270,263],
[276,269,275,282,300,0,272,285],
[270,288,278,271,280,278,0,276],
[272,284,287,266,287,265,274,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1934, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,270,276,281,264,273,273],
[288,0,281,270,288,280,276,286],
[280,269,0,263,279,259,281,267],
[274,280,287,0,280,281,285,286],
[269,262,271,270,0,263,266,279],
[286,270,291,269,287,0,283,269],
[277,274,269,265,284,267,0,281],
[277,264,283,264,271,281,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1935, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,278,262,265,276,294,289,266],
[272,0,280,269,283,281,280,270],
[288,270,0,273,277,272,294,263],
[285,281,277,0,283,293,294,268],
[274,267,273,267,0,297,292,275],
[256,269,278,257,253,0,288,266],
[261,270,256,256,258,262,0,251],
[284,280,287,282,275,284,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1936, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,268,257,273,270,270,274],
[290,0,268,249,284,276,275,293],
[282,282,0,282,303,280,257,294],
[293,301,268,0,292,287,278,294],
[277,266,247,258,0,258,260,268],
[280,274,270,263,292,0,272,298],
[280,275,293,272,290,278,0,287],
[276,257,256,256,282,252,263,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1937, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,374,312,260,270,268,258,281],
[176,0,251,235,223,218,215,208],
[238,299,0,260,265,245,301,279],
[290,315,290,0,265,281,304,277],
[280,327,285,285,0,286,292,251],
[282,332,305,269,264,0,319,230],
[292,335,249,246,258,231,0,238],
[269,342,271,273,299,320,312,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1938, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,240,296,301,320,272,324,308],
[310,0,326,326,293,298,267,331],
[254,224,0,300,248,237,254,315],
[249,224,250,0,235,225,252,257],
[230,257,302,315,0,267,258,321],
[278,252,313,325,283,0,305,314],
[226,283,296,298,292,245,0,298],
[242,219,235,293,229,236,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1939, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,225,222,226,196,214,247],
[254,0,274,248,277,287,332,273],
[325,276,0,250,252,233,353,243],
[328,302,300,0,289,217,279,298],
[324,273,298,261,0,301,306,284],
[354,263,317,333,249,0,254,302],
[336,218,197,271,244,296,0,324],
[303,277,307,252,266,248,226,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1940, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,266,273,289,277,257,252],
[292,0,292,308,270,321,293,299],
[284,258,0,279,290,306,287,291],
[277,242,271,0,272,282,257,270],
[261,280,260,278,0,295,276,272],
[273,229,244,268,255,0,265,253],
[293,257,263,293,274,285,0,271],
[298,251,259,280,278,297,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1941, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,215,246,285,265,299,243,243],
[335,0,218,295,281,293,277,337],
[304,332,0,258,303,303,290,332],
[265,255,292,0,252,259,272,289],
[285,269,247,298,0,264,283,260],
[251,257,247,291,286,0,227,256],
[307,273,260,278,267,323,0,299],
[307,213,218,261,290,294,251,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1942, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,268,294,292,272,264,261,304],
[282,0,283,293,294,277,272,317],
[256,267,0,268,292,262,255,293],
[258,257,282,0,282,266,264,291],
[278,256,258,268,0,258,257,315],
[286,273,288,284,292,0,278,317],
[289,278,295,286,293,272,0,305],
[246,233,257,259,235,233,245,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1943, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,273,295,274,291,289,282],
[269,0,301,255,268,303,276,279],
[277,249,0,245,237,257,279,264],
[255,295,305,0,276,283,289,260],
[276,282,313,274,0,297,293,298],
[259,247,293,267,253,0,284,280],
[261,274,271,261,257,266,0,265],
[268,271,286,290,252,270,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1944, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,289,245,271,288,290,268],
[298,0,306,270,287,276,323,289],
[261,244,0,257,294,266,277,279],
[305,280,293,0,276,286,324,272],
[279,263,256,274,0,281,293,269],
[262,274,284,264,269,0,289,269],
[260,227,273,226,257,261,0,252],
[282,261,271,278,281,281,298,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1945, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,276,277,290,300,301,275],
[275,0,287,289,267,265,288,262],
[274,263,0,275,257,268,291,266],
[273,261,275,0,278,267,293,266],
[260,283,293,272,0,276,299,262],
[250,285,282,283,274,0,274,257],
[249,262,259,257,251,276,0,253],
[275,288,284,284,288,293,297,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1946, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,266,268,280,284,266,289,289],
[284,0,267,279,263,256,276,259],
[282,283,0,295,276,260,289,286],
[270,271,255,0,257,263,265,257],
[266,287,274,293,0,275,284,266],
[284,294,290,287,275,0,301,285],
[261,274,261,285,266,249,0,251],
[261,291,264,293,284,265,299,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1947, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,278,282,298,302,266,310],
[265,0,277,271,268,285,282,282],
[272,273,0,274,280,288,273,299],
[268,279,276,0,270,277,256,292],
[252,282,270,280,0,272,268,280],
[248,265,262,273,278,0,251,283],
[284,268,277,294,282,299,0,288],
[240,268,251,258,270,267,262,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1948, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,283,279,273,311,290,283],
[267,0,282,282,267,274,280,290],
[267,268,0,269,268,289,280,286],
[271,268,281,0,280,276,282,272],
[277,283,282,270,0,280,273,281],
[239,276,261,274,270,0,257,290],
[260,270,270,268,277,293,0,265],
[267,260,264,278,269,260,285,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1949, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,316,281,294,290,285,293,267],
[234,0,236,261,262,260,256,243],
[269,314,0,294,273,283,271,279],
[256,289,256,0,282,264,290,257],
[260,288,277,268,0,277,276,290],
[265,290,267,286,273,0,289,265],
[257,294,279,260,274,261,0,260],
[283,307,271,293,260,285,290,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1950, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,178,211,319,285,301,250],
[286,0,228,194,246,287,249,249],
[372,322,0,268,374,359,392,252],
[339,356,282,0,336,376,339,267],
[231,304,176,214,0,267,302,287],
[265,263,191,174,283,0,302,318],
[249,301,158,211,248,248,0,270],
[300,301,298,283,263,232,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1951, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,224,290,315,274,313],
[266,0,283,230,340,270,249,302],
[272,267,0,262,307,299,282,270],
[326,320,288,0,351,275,298,317],
[260,210,243,199,0,264,251,266],
[235,280,251,275,286,0,267,302],
[276,301,268,252,299,283,0,310],
[237,248,280,233,284,248,240,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1952, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,411,550,550,275,411,275,550],
[139,0,550,413,276,276,276,139],
[0,0,0,274,0,0,0,139],
[0,137,276,0,137,137,137,276],
[275,274,550,413,0,273,137,275],
[139,274,550,413,277,0,276,275],
[275,274,550,413,413,274,0,275],
[0,411,411,274,275,275,275,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1953, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,340,254,271,280,294,280,284],
[210,0,264,286,276,208,238,255],
[296,286,0,304,260,263,288,253],
[279,264,246,0,311,267,297,280],
[270,274,290,239,0,292,251,320],
[256,342,287,283,258,0,274,281],
[270,312,262,253,299,276,0,241],
[266,295,297,270,230,269,309,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1954, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,297,254,268,241,234,252],
[265,0,292,256,262,260,249,276],
[253,258,0,241,252,246,224,243],
[296,294,309,0,283,292,281,269],
[282,288,298,267,0,287,248,248],
[309,290,304,258,263,0,242,277],
[316,301,326,269,302,308,0,289],
[298,274,307,281,302,273,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1955, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,281,247,264,274,276,255,269],
[269,0,274,247,242,265,262,261],
[303,276,0,256,279,287,296,281],
[286,303,294,0,284,270,299,291],
[276,308,271,266,0,308,275,299],
[274,285,263,280,242,0,277,268],
[295,288,254,251,275,273,0,283],
[281,289,269,259,251,282,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1956, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,271,265,256,233,243,191,245],
[279,0,253,257,256,261,242,244],
[285,297,0,281,272,252,256,273],
[294,293,269,0,245,290,294,304],
[317,294,278,305,0,301,219,334],
[307,289,298,260,249,0,253,241],
[359,308,294,256,331,297,0,315],
[305,306,277,246,216,309,235,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1957, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,252,275,281,291,265,268,254],
[298,0,283,282,278,299,313,245],
[275,267,0,301,258,270,251,257],
[269,268,249,0,227,288,297,276],
[259,272,292,323,0,299,286,246],
[285,251,280,262,251,0,280,245],
[282,237,299,253,264,270,0,298],
[296,305,293,274,304,305,252,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1958, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,283,281,278,291,278,284,272],
[267,0,255,266,282,257,290,241],
[269,295,0,287,290,284,285,278],
[272,284,263,0,269,274,278,270],
[259,268,260,281,0,279,287,278],
[272,293,266,276,271,0,290,281],
[266,260,265,272,263,260,0,269],
[278,309,272,280,272,269,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1959, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,308,234,240,282,287,245,282],
[242,0,245,262,289,256,262,253],
[316,305,0,272,277,271,268,284],
[310,288,278,0,315,282,273,285],
[268,261,273,235,0,271,251,291],
[263,294,279,268,279,0,255,292],
[305,288,282,277,299,295,0,270],
[268,297,266,265,259,258,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1960, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,270,259,290,259,270,276],
[261,0,268,271,286,269,282,296],
[280,282,0,264,286,279,278,289],
[291,279,286,0,299,264,271,283],
[260,264,264,251,0,242,253,264],
[291,281,271,286,308,0,275,277],
[280,268,272,279,297,275,0,278],
[274,254,261,267,286,273,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1961, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,294,277,283,297,268,299,277],
[256,0,265,222,267,296,279,278],
[273,285,0,262,278,301,263,265],
[267,328,288,0,300,304,279,303],
[253,283,272,250,0,272,291,265],
[282,254,249,246,278,0,240,264],
[251,271,287,271,259,310,0,262],
[273,272,285,247,285,286,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1962, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,271,285,284,234,287,287],
[277,0,262,310,278,276,290,286],
[279,288,0,305,285,257,293,286],
[265,240,245,0,264,259,265,266],
[266,272,265,286,0,277,293,272],
[316,274,293,291,273,0,290,287],
[263,260,257,285,257,260,0,254],
[263,264,264,284,278,263,296,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1963, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,285,269,293,280,282,289],
[271,0,284,265,273,276,280,264],
[265,266,0,277,270,285,261,255],
[281,285,273,0,269,267,280,258],
[257,277,280,281,0,266,258,265],
[270,274,265,283,284,0,279,270],
[268,270,289,270,292,271,0,281],
[261,286,295,292,285,280,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1964, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,296,295,286,311,284,272,282],
[254,0,262,263,284,261,268,262],
[255,288,0,291,269,271,267,278],
[264,287,259,0,276,255,260,262],
[239,266,281,274,0,262,295,299],
[266,289,279,295,288,0,293,282],
[278,282,283,290,255,257,0,303],
[268,288,272,288,251,268,247,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1965, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,245,266,263,285,257,280],
[271,0,234,257,279,275,273,278],
[305,316,0,289,273,298,294,279],
[284,293,261,0,307,299,273,296],
[287,271,277,243,0,255,256,264],
[265,275,252,251,295,0,252,255],
[293,277,256,277,294,298,0,285],
[270,272,271,254,286,295,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1966, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,275,267,273,268,265,277,303],
[275,0,285,274,276,261,283,283],
[283,265,0,271,272,249,264,301],
[277,276,279,0,271,263,280,302],
[282,274,278,279,0,275,276,295],
[285,289,301,287,275,0,296,309],
[273,267,286,270,274,254,0,278],
[247,267,249,248,255,241,272,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1967, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,279,274,294,281,281,269],
[285,0,285,284,289,290,274,275],
[271,265,0,276,291,279,257,276],
[276,266,274,0,279,276,271,283],
[256,261,259,271,0,256,265,252],
[269,260,271,274,294,0,267,268],
[269,276,293,279,285,283,0,271],
[281,275,274,267,298,282,279,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1968, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,248,283,271,272,255,251],
[292,0,282,285,288,300,315,272],
[302,268,0,305,283,274,280,278],
[267,265,245,0,280,258,274,265],
[279,262,267,270,0,273,256,301],
[278,250,276,292,277,0,296,276],
[295,235,270,276,294,254,0,285],
[299,278,272,285,249,274,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1969, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,262,248,269,239,292,238],
[271,0,241,268,281,229,264,245],
[288,309,0,285,275,259,320,306],
[302,282,265,0,303,274,301,295],
[281,269,275,247,0,268,272,279],
[311,321,291,276,282,0,273,287],
[258,286,230,249,278,277,0,281],
[312,305,244,255,271,263,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1970, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,274,267,261,295,302,291],
[266,0,281,273,283,271,270,282],
[276,269,0,281,278,299,276,286],
[283,277,269,0,280,297,289,285],
[289,267,272,270,0,284,279,298],
[255,279,251,253,266,0,276,266],
[248,280,274,261,271,274,0,283],
[259,268,264,265,252,284,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1971, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,269,256,276,238,249,253,257],
[281,0,282,298,273,276,286,281],
[294,268,0,305,278,274,287,289],
[274,252,245,0,252,264,254,276],
[312,277,272,298,0,301,292,289],
[301,274,276,286,249,0,281,300],
[297,264,263,296,258,269,0,277],
[293,269,261,274,261,250,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1972, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,292,275,282,275,286,302,271],
[258,0,228,251,244,252,288,249],
[275,322,0,285,285,312,325,269],
[268,299,265,0,264,275,305,281],
[275,306,265,286,0,302,321,279],
[264,298,238,275,248,0,324,266],
[248,262,225,245,229,226,0,255],
[279,301,281,269,271,284,295,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1973, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,297,224,300,233,277,228,290],
[253,0,261,267,252,262,203,272],
[326,289,0,322,262,299,262,329],
[250,283,228,0,266,289,276,265],
[317,298,288,284,0,320,266,324],
[273,288,251,261,230,0,259,302],
[322,347,288,274,284,291,0,338],
[260,278,221,285,226,248,212,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1974, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,281,277,291,281,275,306],
[286,0,274,273,286,278,287,301],
[269,276,0,258,285,283,273,305],
[273,277,292,0,291,280,289,299],
[259,264,265,259,0,262,268,295],
[269,272,267,270,288,0,275,287],
[275,263,277,261,282,275,0,302],
[244,249,245,251,255,263,248,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1975, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,262,262,262,291,254,217,271],
[288,0,284,275,306,278,256,288],
[288,266,0,271,286,248,261,275],
[288,275,279,0,299,271,246,281],
[259,244,264,251,0,259,247,281],
[296,272,302,279,291,0,280,282],
[333,294,289,304,303,270,0,301],
[279,262,275,269,269,268,249,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1976, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,255,283,295,281,262,273],
[294,0,280,284,277,286,287,273],
[295,270,0,288,276,285,276,275],
[267,266,262,0,267,265,266,244],
[255,273,274,283,0,261,273,272],
[269,264,265,285,289,0,279,273],
[288,263,274,284,277,271,0,270],
[277,277,275,306,278,277,280,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1977, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,270,266,302,279,277,300,299],
[280,0,258,290,269,267,295,285],
[284,292,0,316,262,287,313,304],
[248,260,234,0,243,238,285,262],
[271,281,288,307,0,274,321,301],
[273,283,263,312,276,0,319,314],
[250,255,237,265,229,231,0,266],
[251,265,246,288,249,236,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1978, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,246,228,220,226,253,258,267],
[304,0,246,250,250,255,274,314],
[322,304,0,282,254,293,264,315],
[330,300,268,0,270,272,263,311],
[324,300,296,280,0,267,252,299],
[297,295,257,278,283,0,278,319],
[292,276,286,287,298,272,0,308],
[283,236,235,239,251,231,242,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1979, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,285,279,268,250,281,291,296],
[265,0,277,268,264,291,290,285],
[271,273,0,287,268,275,299,287],
[282,282,263,0,278,287,298,274],
[300,286,282,272,0,275,286,280],
[269,259,275,263,275,0,281,257],
[259,260,251,252,264,269,0,277],
[254,265,263,276,270,293,273,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1980, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,273,264,257,258,284,269,290],
[277,0,263,261,263,262,256,268],
[286,287,0,269,260,277,296,293],
[293,289,281,0,278,270,285,284],
[292,287,290,272,0,288,271,284],
[266,288,273,280,262,0,273,287],
[281,294,254,265,279,277,0,285],
[260,282,257,266,266,263,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1981, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,260,271,261,248,269,265,255],
[290,0,293,292,264,251,277,269],
[279,257,0,278,258,260,271,268],
[289,258,272,0,231,255,281,249],
[302,286,292,319,0,288,265,278],
[281,299,290,295,262,0,290,287],
[285,273,279,269,285,260,0,266],
[295,281,282,301,272,263,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1982, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,256,264,294,284,280,263,283],
[294,0,298,270,255,275,271,279],
[286,252,0,247,267,255,239,240],
[256,280,303,0,311,291,260,256],
[266,295,283,239,0,307,269,253],
[270,275,295,259,243,0,237,270],
[287,279,311,290,281,313,0,273],
[267,271,310,294,297,280,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1983, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,243,259,247,305,291,242,297],
[307,0,293,292,298,319,318,262],
[291,257,0,289,337,325,311,269],
[303,258,261,0,305,294,275,284],
[245,252,213,245,0,283,267,270],
[259,231,225,256,267,0,251,263],
[308,232,239,275,283,299,0,285],
[253,288,281,266,280,287,265,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1984, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,264,289,278,278,276,274,267],
[286,0,289,265,283,268,270,290],
[261,261,0,259,283,265,272,293],
[272,285,291,0,295,287,285,293],
[272,267,267,255,0,274,264,261],
[274,282,285,263,276,0,283,282],
[276,280,278,265,286,267,0,267],
[283,260,257,257,289,268,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1985, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,272,276,286,274,271,280],
[285,0,260,276,275,271,283,265],
[278,290,0,297,289,271,304,284],
[274,274,253,0,270,267,286,276],
[264,275,261,280,0,277,284,270],
[276,279,279,283,273,0,292,275],
[279,267,246,264,266,258,0,269],
[270,285,266,274,280,275,281,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1986, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,288,290,274,259,271,281],
[268,0,273,274,252,263,269,296],
[262,277,0,279,260,279,249,241],
[260,276,271,0,255,259,265,253],
[276,298,290,295,0,273,281,299],
[291,287,271,291,277,0,270,298],
[279,281,301,285,269,280,0,283],
[269,254,309,297,251,252,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1987, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,289,277,270,282,269,283,293],
[261,0,268,268,270,281,273,276],
[273,282,0,279,287,286,297,294],
[280,282,271,0,293,299,304,301],
[268,280,263,257,0,279,282,283],
[281,269,264,251,271,0,290,284],
[267,277,253,246,268,260,0,274],
[257,274,256,249,267,266,276,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1988, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,272,275,273,300,299,279],
[276,0,275,264,277,287,285,272],
[278,275,0,305,292,284,316,264],
[275,286,245,0,262,275,280,254],
[277,273,258,288,0,292,313,272],
[250,263,266,275,258,0,296,255],
[251,265,234,270,237,254,0,272],
[271,278,286,296,278,295,278,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1989, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,288,292,281,270,262,272],
[285,0,311,297,301,260,255,277],
[262,239,0,262,268,276,254,247],
[258,253,288,0,263,252,224,236],
[269,249,282,287,0,264,234,249],
[280,290,274,298,286,0,266,272],
[288,295,296,326,316,284,0,266],
[278,273,303,314,301,278,284,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1990, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,284,278,275,299,300,270,274],
[266,0,273,277,286,294,261,257],
[272,277,0,278,264,285,259,267],
[275,273,272,0,287,292,273,280],
[251,264,286,263,0,279,255,255],
[250,256,265,258,271,0,250,254],
[280,289,291,277,295,300,0,267],
[276,293,283,270,295,296,283,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1991, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,253,278,282,283,295,289,272],
[297,0,286,298,292,290,271,276],
[272,264,0,260,284,281,268,265],
[268,252,290,0,267,275,279,273],
[267,258,266,283,0,293,293,276],
[255,260,269,275,257,0,262,260],
[261,279,282,271,257,288,0,261],
[278,274,285,277,274,290,289,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1992, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,279,275,259,274,308,294,281],
[271,0,278,266,279,273,283,258],
[275,272,0,263,281,294,282,271],
[291,284,287,0,274,301,294,257],
[276,271,269,276,0,295,283,279],
[242,277,256,249,255,0,279,257],
[256,267,268,256,267,271,0,258],
[269,292,279,293,271,293,292,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1993, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,304,262,292,302,278,304,331],
[246,0,271,337,271,259,304,290],
[288,279,0,296,252,276,306,325],
[258,213,254,0,244,226,296,294],
[248,279,298,306,0,257,272,269],
[272,291,274,324,293,0,283,295],
[246,246,244,254,278,267,0,273],
[219,260,225,256,281,255,277,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1994, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,265,277,269,279,267,271,278],
[285,0,269,280,277,264,267,264],
[273,281,0,279,258,264,270,282],
[281,270,271,0,270,283,273,273],
[271,273,292,280,0,259,280,266],
[283,286,286,267,291,0,285,283],
[279,283,280,277,270,265,0,281],
[272,286,268,277,284,267,269,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1995, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,307,290,279,271,293,295,274],
[243,0,267,254,282,283,296,272],
[260,283,0,283,265,291,289,276],
[271,296,267,0,282,290,291,268],
[279,268,285,268,0,285,298,250],
[257,267,259,260,265,0,293,260],
[255,254,261,259,252,257,0,283],
[276,278,274,282,300,290,267,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1996, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,282,239,278,297,287,225,254],
[268,0,267,260,278,280,234,249],
[311,283,0,303,314,334,279,255],
[272,290,247,0,328,314,241,254],
[253,272,236,222,0,294,229,238],
[263,270,216,236,256,0,211,240],
[325,316,271,309,321,339,0,289],
[296,301,295,296,312,310,261,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1997, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,258,257,260,390,357,261,325],
[292,0,357,290,357,359,229,199],
[293,193,0,226,326,326,324,229],
[290,260,324,0,356,358,325,261],
[160,193,224,194,0,388,225,294],
[193,191,224,192,162,0,258,195],
[289,321,226,225,325,292,0,262],
[225,351,321,289,256,355,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1998, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,274,271,280,295,278,285,269],
[276,0,258,266,302,255,296,280],
[279,292,0,278,305,256,291,283],
[270,284,272,0,303,261,264,269],
[255,248,245,247,0,233,270,262],
[272,295,294,289,317,0,275,276],
[265,254,259,286,280,275,0,262],
[281,270,267,281,288,274,288,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 1999, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

##############################################################
om = np.array([
[0,263,303,284,283,339,283,263],
[287,0,342,247,281,323,318,301],
[247,208,0,168,205,264,187,189],
[266,303,382,0,377,398,339,359],
[267,269,345,173,0,306,207,266],
[211,227,286,152,244,0,247,209],
[267,232,363,211,343,303,0,326],
[287,249,361,191,284,341,224,0]])



times = np.zeros(rep)
for i in range(rep):
    # Algorithm with Condorcet winner
    algorithm = am3.AzziniMunda3(om) 
    start_time = time.time()
    sol = algorithm.execute()
    t = (time.time() - start_time)
    times[i] = t
    #print(t)
exec_time = np.median(times)
result = np.append(np.array([8, 550, 2000, "ME-RCW", exec_time, sol.shape[0], algorithm.ntentative], dtype=np.dtype(object)), times)
print(result[:7])
results = np.vstack((results, result))

 
pd.DataFrame(results).to_csv("predictTime_8_550.csv", index=False, header=False)